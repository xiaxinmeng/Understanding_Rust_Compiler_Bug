{"sha": "0bae745cd84879bf97cf81d9eca28fbfa2360722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWU3NDVjZDg0ODc5YmY5N2NmODFkOWVjYTI4ZmJmYTIzNjA3MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T07:42:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T07:42:31Z"}, "message": "Auto merge of #46290 - scottmcm:i128-from-compiler-builtins, r=nagisa\n\nUpdate compiler-builtins and use it in the 128-bit lowering MIR test\n\nThis picks up the lang item implementations from https://github.com/rust-lang-nursery/compiler-builtins/pull/210\n\ncc #45676 @est31 @nagisa", "tree": {"sha": "dbf8ae705cd5bafe2d448f2489b13e7fb9d9d54f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf8ae705cd5bafe2d448f2489b13e7fb9d9d54f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bae745cd84879bf97cf81d9eca28fbfa2360722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bae745cd84879bf97cf81d9eca28fbfa2360722", "html_url": "https://github.com/rust-lang/rust/commit/0bae745cd84879bf97cf81d9eca28fbfa2360722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bae745cd84879bf97cf81d9eca28fbfa2360722/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "html_url": "https://github.com/rust-lang/rust/commit/7e251390c782d5b8d94c6e55c83572a3a7a26cb4"}, {"sha": "c0654ce8156c0b3811595a29c137d318d90d0686", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0654ce8156c0b3811595a29c137d318d90d0686", "html_url": "https://github.com/rust-lang/rust/commit/c0654ce8156c0b3811595a29c137d318d90d0686"}], "stats": {"total": 137, "additions": 43, "deletions": 94}, "files": [{"sha": "18feaccbfd0dfbd5ab5d0a2a6eac9c04be667266", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=0bae745cd84879bf97cf81d9eca28fbfa2360722", "patch": "@@ -1 +1 @@\n-Subproject commit 02b3734a5ba6de984eb5a02c50860cc014e58d56\n+Subproject commit 18feaccbfd0dfbd5ab5d0a2a6eac9c04be667266"}, {"sha": "4f9bb809e99283fc7291a8b8ddb05a9ee3753f13", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 21, "deletions": 47, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0bae745cd84879bf97cf81d9eca28fbfa2360722/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bae745cd84879bf97cf81d9eca28fbfa2360722/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=0bae745cd84879bf97cf81d9eca28fbfa2360722", "patch": "@@ -8,40 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// asmjs can't even pass i128 as arguments or return values, so ignore it.\n+// this will hopefully be fixed by the LLVM 5 upgrade (#43370)\n+// ignore-asmjs\n+// ignore-emscripten\n+\n // compile-flags: -Z lower_128bit_ops -C debug_assertions=yes\n \n #![feature(i128_type)]\n-#![feature(lang_items)]\n-\n-#[lang=\"i128_div\"]\n-fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n-#[lang=\"u128_div\"]\n-fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n-#[lang=\"i128_rem\"]\n-fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n-#[lang=\"u128_rem\"]\n-fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n-\n-#[lang=\"i128_addo\"]\n-fn i128_addo(_x: i128, _y: i128) -> (i128, bool) { (0, false) }\n-#[lang=\"u128_addo\"]\n-fn u128_addo(_x: u128, _y: u128) -> (u128, bool) { (1, false) }\n-#[lang=\"i128_subo\"]\n-fn i128_subo(_x: i128, _y: i128) -> (i128, bool) { (2, false) }\n-#[lang=\"u128_subo\"]\n-fn u128_subo(_x: u128, _y: u128) -> (u128, bool) { (3, false) }\n-#[lang=\"i128_mulo\"]\n-fn i128_mulo(_x: i128, _y: i128) -> (i128, bool) { (4, false) }\n-#[lang=\"u128_mulo\"]\n-fn u128_mulo(_x: u128, _y: u128) -> (u128, bool) { (5, false) }\n-#[lang=\"i128_shlo\"]\n-fn i128_shlo(_x: i128, _y: u128) -> (i128, bool) { (6, false) }\n-#[lang=\"u128_shlo\"]\n-fn u128_shlo(_x: u128, _y: u128) -> (u128, bool) { (6, false) }\n-#[lang=\"i128_shro\"]\n-fn i128_shro(_x: i128, _y: u128) -> (i128, bool) { (7, false) }\n-#[lang=\"u128_shro\"]\n-fn u128_shro(_x: u128, _y: u128) -> (u128, bool) { (8, false) }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -66,31 +40,31 @@ fn test_unsigned(mut x: u128) -> u128 {\n }\n \n fn main() {\n-    test_signed(-200);\n-    test_unsigned(200);\n+    assert_eq!(test_signed(-222), -1);\n+    assert_eq!(test_unsigned(200), 2);\n }\n \n // END RUST SOURCE\n \n // START rustc.test_signed.Lower128Bit.after.mir\n-//     _2 = const i128_addo(_1, const 1i128) -> bb10;\n+//     _2 = const compiler_builtins::int::addsub::rust_i128_addo(_1, const 1i128) -> bb10;\n //     ...\n //     _1 = move (_2.0: i128);\n-//     _3 = const i128_subo(_1, const 2i128) -> bb11;\n+//     _3 = const compiler_builtins::int::addsub::rust_i128_subo(_1, const 2i128) -> bb11;\n //     ...\n //     _1 = move (_3.0: i128);\n-//     _4 = const i128_mulo(_1, const 3i128) -> bb12;\n+//     _4 = const compiler_builtins::int::mul::rust_i128_mulo(_1, const 3i128) -> bb12;\n //     ...\n //     _1 = move (_4.0: i128);\n //     ...\n-//     _1 = const i128_div(_1, const 4i128) -> bb13;\n+//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb13;\n //     ...\n-//     _1 = const i128_rem(_1, const 5i128) -> bb15;\n+//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb15;\n //     ...\n //     _1 = move (_13.0: i128);\n //     ...\n //     _17 = const 7i32 as u128 (Misc);\n-//     _14 = const i128_shro(_1, move _17) -> bb16;\n+//     _14 = const compiler_builtins::int::shift::rust_i128_shro(_1, move _17) -> bb16;\n //     ...\n //     _1 = move (_14.0: i128);\n //     ...\n@@ -103,30 +77,30 @@ fn main() {\n //     assert(!move (_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n //     ...\n //     _16 = const 6i32 as u128 (Misc);\n-//     _13 = const i128_shlo(_1, move _16) -> bb14;\n+//     _13 = const compiler_builtins::int::shift::rust_i128_shlo(_1, move _16) -> bb14;\n //     ...\n //     assert(!move (_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _2 = const u128_addo(_1, const 1u128) -> bb8;\n+//     _2 = const compiler_builtins::int::addsub::rust_u128_addo(_1, const 1u128) -> bb8;\n //     ...\n //     _1 = move (_2.0: u128);\n-//     _3 = const u128_subo(_1, const 2u128) -> bb9;\n+//     _3 = const compiler_builtins::int::addsub::rust_u128_subo(_1, const 2u128) -> bb9;\n //     ...\n //     _1 = move (_3.0: u128);\n-//     _4 = const u128_mulo(_1, const 3u128) -> bb10;\n+//     _4 = const compiler_builtins::int::mul::rust_u128_mulo(_1, const 3u128) -> bb10;\n //     ...\n //     _1 = move (_4.0: u128);\n //     ...\n-//     _1 = const u128_div(_1, const 4u128) -> bb11;\n+//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb11;\n //     ...\n-//     _1 = const u128_rem(_1, const 5u128) -> bb13;\n+//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb13;\n //     ...\n //     _1 = move (_7.0: u128);\n //     ...\n //     _11 = const 7i32 as u128 (Misc);\n-//     _8 = const u128_shro(_1, move _11) -> bb14;\n+//     _8 = const compiler_builtins::int::shift::rust_u128_shro(_1, move _11) -> bb14;\n //     ...\n //     _1 = move (_8.0: u128);\n //     ...\n@@ -139,7 +113,7 @@ fn main() {\n //     assert(!move (_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n //     ...\n //     _10 = const 6i32 as u128 (Misc);\n-//     _7 = const u128_shlo(_1, move _10) -> bb12;\n+//     _7 = const compiler_builtins::int::shift::rust_u128_shlo(_1, move _10) -> bb12;\n //     ...\n //     assert(!move (_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "e8c8412db80efdae0d258ea93fc5c3ae728b7260", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 21, "deletions": 46, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0bae745cd84879bf97cf81d9eca28fbfa2360722/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bae745cd84879bf97cf81d9eca28fbfa2360722/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=0bae745cd84879bf97cf81d9eca28fbfa2360722", "patch": "@@ -8,39 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// asmjs can't even pass i128 as arguments or return values, so ignore it.\n+// this will hopefully be fixed by the LLVM 5 upgrade (#43370)\n+// ignore-asmjs\n+// ignore-emscripten\n+\n // compile-flags: -Z lower_128bit_ops -C debug_assertions=no\n \n #![feature(i128_type)]\n-#![feature(lang_items)]\n-\n-#[lang=\"i128_add\"]\n-fn i128_add(_x: i128, _y: i128) -> i128 { 0 }\n-#[lang=\"u128_add\"]\n-fn u128_add(_x: u128, _y: u128) -> u128 { 0 }\n-#[lang=\"i128_sub\"]\n-fn i128_sub(_x: i128, _y: i128) -> i128 { 1 }\n-#[lang=\"u128_sub\"]\n-fn u128_sub(_x: u128, _y: u128) -> u128 { 1 }\n-#[lang=\"i128_mul\"]\n-fn i128_mul(_x: i128, _y: i128) -> i128 { 2 }\n-#[lang=\"u128_mul\"]\n-fn u128_mul(_x: u128, _y: u128) -> u128 { 2 }\n-#[lang=\"i128_div\"]\n-fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n-#[lang=\"u128_div\"]\n-fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n-#[lang=\"i128_rem\"]\n-fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n-#[lang=\"u128_rem\"]\n-fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n-#[lang=\"i128_shl\"]\n-fn i128_shl(_x: i128, _y: u32) -> i128 { 7 }\n-#[lang=\"u128_shl\"]\n-fn u128_shl(_x: u128, _y: u32) -> u128 { 7 }\n-#[lang=\"i128_shr\"]\n-fn i128_shr(_x: i128, _y: u32) -> i128 { 8 }\n-#[lang=\"u128_shr\"]\n-fn u128_shr(_x: u128, _y: u32) -> u128 { 9 }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -65,44 +40,44 @@ fn test_unsigned(mut x: u128) -> u128 {\n }\n \n fn main() {\n-    test_signed(-200);\n-    test_unsigned(200);\n+    assert_eq!(test_signed(-222), -1);\n+    assert_eq!(test_unsigned(200), 2);\n }\n \n // END RUST SOURCE\n \n // START rustc.test_signed.Lower128Bit.after.mir\n-//     _1 = const i128_add(_1, const 1i128) -> bb7;\n+//     _1 = const compiler_builtins::int::addsub::rust_i128_add(_1, const 1i128) -> bb7;\n //     ...\n-//     _1 = const i128_div(_1, const 4i128) -> bb8;\n+//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb8;\n //     ...\n-//     _1 = const i128_rem(_1, const 5i128) -> bb11;\n+//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb11;\n //     ...\n-//     _1 = const i128_mul(_1, const 3i128) -> bb5;\n+//     _1 = const compiler_builtins::int::mul::rust_i128_mul(_1, const 3i128) -> bb5;\n //     ...\n-//     _1 = const i128_sub(_1, const 2i128) -> bb6;\n+//     _1 = const compiler_builtins::int::addsub::rust_i128_sub(_1, const 2i128) -> bb6;\n //     ...\n //     _11 = const 7i32 as u32 (Misc);\n-//     _1 = const i128_shr(_1, move _11) -> bb9;\n+//     _1 = const compiler_builtins::int::shift::rust_i128_shr(_1, move _11) -> bb9;\n //     ...\n //     _12 = const 6i32 as u32 (Misc);\n-//     _1 = const i128_shl(_1, move _12) -> bb10;\n+//     _1 = const compiler_builtins::int::shift::rust_i128_shl(_1, move _12) -> bb10;\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _1 = const u128_add(_1, const 1u128) -> bb5;\n+//     _1 = const compiler_builtins::int::addsub::rust_u128_add(_1, const 1u128) -> bb5;\n //     ...\n-//     _1 = const u128_div(_1, const 4u128) -> bb6;\n+//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb6;\n //     ...\n-//     _1 = const u128_rem(_1, const 5u128) -> bb9;\n+//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb9;\n //     ...\n-//     _1 = const u128_mul(_1, const 3u128) -> bb3;\n+//     _1 = const compiler_builtins::int::mul::rust_u128_mul(_1, const 3u128) -> bb3;\n //     ...\n-//     _1 = const u128_sub(_1, const 2u128) -> bb4;\n+//     _1 = const compiler_builtins::int::addsub::rust_u128_sub(_1, const 2u128) -> bb4;\n //     ...\n //     _5 = const 7i32 as u32 (Misc);\n-//     _1 = const u128_shr(_1, move _5) -> bb7;\n+//     _1 = const compiler_builtins::int::shift::rust_u128_shr(_1, move _5) -> bb7;\n //     ...\n //     _6 = const 6i32 as u32 (Misc);\n-//     _1 = const u128_shl(_1, move _6) -> bb8;\n+//     _1 = const compiler_builtins::int::shift::rust_u128_shl(_1, move _6) -> bb8;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}]}