{"sha": "6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNDNhZjNmODRlZjk3ZDRkMGU1YjU1YzUzMzZhNDI1NmJkMWViYjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-06-05T08:24:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T02:51:19Z"}, "message": "Add workaround for archive reading bug in LLDB.\n\nLLDB contains a bug that makes it crash if an archive it reads\ncontains a file the name of which is exactly 16 bytes long. This\nbug recently has made it impossible to debug Rust applications with\nLLDB because some standard libraries triggered it indirectly:\nFor rlibs, rustc includes the LLVM bytecode in the archive, giving\nit the extension \".bc.deflate\". For liballoc (for example) this\nresults in the 16 character filename \"alloc.bc.deflate\", which is\nbad.\n\nThis commit replaces the \".bc.deflate\" suffix with\n\".bytecode.deflate\" which itself is already longer than 16 bytes,\nthus making sure that the bug won't be run into anymore.\n\nThe bug could still be run into with 14 character filenames because\nthen the .o files will trigger it. However, this is much more rare\nand working around it would introduce more complexity than necessary\nat the moment. It can always be done later on, if the need arises.\n\nFixes #14356.", "tree": {"sha": "be314008238e8278f7e378c5c22999845752009a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be314008238e8278f7e378c5c22999845752009a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "html_url": "https://github.com/rust-lang/rust/commit/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735e518a815bd06fa99ea343351041ba22751fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/735e518a815bd06fa99ea343351041ba22751fe4", "html_url": "https://github.com/rust-lang/rust/commit/735e518a815bd06fa99ea343351041ba22751fe4"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "edb0a538a03dcdf8b8b42b85108429bb2acd487a", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "patch": "@@ -109,7 +109,7 @@ impl<'a> Archive<'a> {\n     pub fn add_rlib(&mut self, rlib: &Path, name: &str,\n                     lto: bool) -> io::IoResult<()> {\n         let object = format!(\"{}.o\", name);\n-        let bytecode = format!(\"{}.bc.deflate\", name);\n+        let bytecode = format!(\"{}.bytecode.deflate\", name);\n         let mut ignore = vec!(bytecode.as_slice(), METADATA_FILENAME);\n         if lto {\n             ignore.push(object.as_slice());"}, {"sha": "b432034b81b5625f83a7ce8dfe84f6f8d7812fde", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "patch": "@@ -958,8 +958,12 @@ fn link_rlib<'a>(sess: &'a Session,\n \n             // For LTO purposes, the bytecode of this library is also inserted\n             // into the archive.\n+            // Note that we make sure that the bytecode filename in the archive is always at least\n+            // 16 bytes long by adding a 16 byte extension to it. This is to work around a bug in\n+            // LLDB that would cause it to crash if the name of a file in an archive was exactly\n+            // 16 bytes.\n             let bc = obj_filename.with_extension(\"bc\");\n-            let bc_deflated = obj_filename.with_extension(\"bc.deflate\");\n+            let bc_deflated = obj_filename.with_extension(\"bytecode.deflate\");\n             match fs::File::open(&bc).read_to_end().and_then(|data| {\n                 fs::File::create(&bc_deflated)\n                     .write(match flate::deflate_bytes(data.as_slice()) {"}, {"sha": "7449622366fc2678f4c7912ef4e05664c2916562", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=6a43af3f84ef97d4d0e5b55c5336a4256bd1ebb7", "patch": "@@ -55,10 +55,10 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         let archive = ArchiveRO::open(&path).expect(\"wanted an rlib\");\n         debug!(\"reading {}\", name);\n         let bc = time(sess.time_passes(),\n-                      format!(\"read {}.bc.deflate\", name).as_slice(),\n+                      format!(\"read {}.bytecode.deflate\", name).as_slice(),\n                       (),\n                       |_| {\n-                          archive.read(format!(\"{}.bc.deflate\",\n+                          archive.read(format!(\"{}.bytecode.deflate\",\n                                                name).as_slice())\n                       });\n         let bc = bc.expect(\"missing compressed bytecode in archive!\");"}]}