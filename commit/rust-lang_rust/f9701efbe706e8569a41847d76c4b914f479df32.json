{"sha": "f9701efbe706e8569a41847d76c4b914f479df32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzAxZWZiZTcwNmU4NTY5YTQxODQ3ZDc2YzRiOTE0ZjQ3OWRmMzI=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-14T11:35:34Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-14T11:35:34Z"}, "message": "cli diagnostics walk files", "tree": {"sha": "08c62db02b94c2abc18def2e9891fd999459c48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c62db02b94c2abc18def2e9891fd999459c48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9701efbe706e8569a41847d76c4b914f479df32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9701efbe706e8569a41847d76c4b914f479df32", "html_url": "https://github.com/rust-lang/rust/commit/f9701efbe706e8569a41847d76c4b914f479df32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9701efbe706e8569a41847d76c4b914f479df32/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62c73a97286a49c228cd13c32ed37340afd2c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c73a97286a49c228cd13c32ed37340afd2c1d", "html_url": "https://github.com/rust-lang/rust/commit/f62c73a97286a49c228cd13c32ed37340afd2c1d"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "f5981588abc98538057bb2071fc2fca792d40e59", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=f9701efbe706e8569a41847d76c4b914f479df32", "patch": "@@ -38,6 +38,9 @@ pub(crate) enum Command {\n     Diagnostics {\n         path: PathBuf,\n         load_output_dirs: bool,\n+        /// Include files which are not modules. In rust-analyzer\n+        /// this would include the parser test files.\n+        all: bool,\n     },\n     RunServer,\n     Version,\n@@ -225,6 +228,7 @@ USAGE:\n FLAGS:\n     -h, --help              Prints help information\n         --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+        --all               Include all files rather than only modules\n \n ARGS:\n     <PATH>\"\n@@ -233,6 +237,7 @@ ARGS:\n                 }\n \n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let all = matches.contains(\"--all\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n@@ -241,7 +246,7 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Diagnostics { path, load_output_dirs }\n+                Command::Diagnostics { path, load_output_dirs, all }\n             }\n             _ => {\n                 eprintln!("}, {"sha": "7cfc44f01fdceab470734abc982b02b106f5835a", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=f9701efbe706e8569a41847d76c4b914f479df32", "patch": "@@ -39,8 +39,8 @@ fn main() -> Result<()> {\n             cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n         }\n \n-        args::Command::Diagnostics { path, load_output_dirs } => {\n-            cli::diagnostics(path.as_ref(), load_output_dirs)?\n+        args::Command::Diagnostics { path, load_output_dirs, all } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs, all)?\n         }\n \n         args::Command::RunServer => run_server()?,"}, {"sha": "2d92c1f7825e8f9d906635c6ea941ffce4d34590", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 47, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9701efbe706e8569a41847d76c4b914f479df32/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=f9701efbe706e8569a41847d76c4b914f479df32", "patch": "@@ -1,36 +1,61 @@\n-//! Analyze all files in project for diagnostics. Exits with a non-zero status\n+//! Analyze all modules in a project for diagnostics. Exits with a non-zero status\n //! code if any errors are found.\n \n use anyhow::anyhow;\n-use ra_db::{SourceDatabaseExt, SourceRootId};\n-use ra_ide::{Analysis, Severity};\n+use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_ide::Severity;\n use std::{collections::HashSet, path::Path};\n \n use crate::cli::{load_cargo::load_cargo, Result};\n-use hir::{db::HirDatabase, Crate, Module};\n+use hir::Semantics;\n \n-pub fn diagnostics(path: &Path, load_output_dirs: bool) -> Result<()> {\n+pub fn diagnostics(path: &Path, load_output_dirs: bool, all: bool) -> Result<()> {\n     let (host, roots) = load_cargo(path, load_output_dirs)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n+    let semantics = Semantics::new(db);\n     let members = roots\n         .into_iter()\n-        .filter_map(\n-            |(source_root_id, project_root)| {\n-                if project_root.is_member() {\n-                    Some(source_root_id)\n-                } else {\n-                    None\n-                }\n-            },\n-        )\n+        .filter_map(|(source_root_id, project_root)| {\n+            // filter out dependencies\n+            if project_root.is_member() {\n+                Some(source_root_id)\n+            } else {\n+                None\n+            }\n+        })\n         .collect::<HashSet<_>>();\n \n     let mut found_error = false;\n-    let mut visited_modules = HashSet::new();\n-    for krate in Crate::all(db) {\n-        let module = krate.root_module(db).expect(\"crate without root module\");\n-        check_module(module, db, &mut visited_modules, &members, &analysis, &mut found_error);\n+    let mut visited_files = HashSet::new();\n+    let crate_graph = db.crate_graph();\n+    for crate_id in crate_graph.iter() {\n+        let krate = &crate_graph[crate_id];\n+        if let Some(crate_name) = &krate.display_name {\n+            println!(\"processing crate: {}\", crate_name);\n+        } else {\n+            println!(\"processing crate: unknown\");\n+        }\n+        for file_id in db.source_root(db.file_source_root(krate.root_file_id)).walk() {\n+            // Filter out files which are not actually modules (unless `--all` flag is\n+            // passed). In the rust-analyzer repository this filters out the parser test files.\n+            if semantics.to_module_def(file_id).is_some() || all {\n+                if !visited_files.contains(&file_id) {\n+                    if members.contains(&db.file_source_root(file_id)) {\n+                        println!(\"processing module: {}\", db.file_relative_path(file_id));\n+                        for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+                            if matches!(diagnostic.severity, Severity::Error) {\n+                                found_error = true;\n+                            }\n+\n+                            println!(\"{:?}\", diagnostic);\n+                        }\n+                    }\n+\n+                    visited_files.insert(file_id);\n+                }\n+            }\n+        }\n     }\n \n     println!();\n@@ -43,32 +68,3 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool) -> Result<()> {\n         Ok(())\n     }\n }\n-\n-fn check_module(\n-    module: Module,\n-    db: &(impl HirDatabase + SourceDatabaseExt),\n-    visited_modules: &mut HashSet<Module>,\n-    members: &HashSet<SourceRootId>,\n-    analysis: &Analysis,\n-    found_error: &mut bool,\n-) {\n-    let file_id = module.definition_source(db).file_id.original_file(db);\n-    if !visited_modules.contains(&module) {\n-        if members.contains(&db.file_source_root(file_id)) {\n-            println!(\"processing: {}\", db.file_relative_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id).unwrap() {\n-                if matches!(diagnostic.severity, Severity::Error) {\n-                    *found_error = true;\n-                }\n-\n-                println!(\"{:?}\", diagnostic);\n-            }\n-        }\n-\n-        visited_modules.insert(module);\n-\n-        for child_module in module.children(db) {\n-            check_module(child_module, db, visited_modules, members, analysis, found_error);\n-        }\n-    }\n-}"}]}