{"sha": "27c791ca86335f7301ca38b8944ae97da20d60ab", "node_id": "C_kwDOAAsO6NoAKDI3Yzc5MWNhODYzMzVmNzMwMWNhMzhiODk0NGFlOTdkYTIwZDYwYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T07:22:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T07:22:32Z"}, "message": "Rollup merge of #91515 - jethrogb:rsplit_array, r=yaahc\n\nAdd rsplit_array variants to slices and arrays\n\nBy request: https://github.com/rust-lang/rust/issues/90091#issuecomment-985903239\n\nr? `@yaahc`", "tree": {"sha": "06fbe027f63c8338a9eaa32101888dc78da986da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06fbe027f63c8338a9eaa32101888dc78da986da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c791ca86335f7301ca38b8944ae97da20d60ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtFG5CRBK7hj4Ov3rIwAAAmAIACKyuSjUZnWQT7klnOmTsjiM\np7CoqJ0nBOcLvDEJqbsIN3xjv4xrCcuNeeDPVaO29yoFTP4fqs5KErLHCGxBu3FQ\ntorbpORLgPi+KIlXQ7lrqK9C622z8gVlJJYmtA+ODPOVuu0leH27lBugPTKl/fNc\nCnr1Kb/xSomDXMovhp2uvM0WOHsowbf4CsM9iI78pEl1vFdR513SBD2J7Vf4Amxf\nPNfN999k+iGAE/A3lo3wkN6736RPwCoazXU2OSEWPzaZBcsdMFtQkWD2ijYQ8u39\n0kWKu2Ru1/DUqIWrqRqN6EJgORRHZWP8uqbsHQHZSUgSrYXhHYkCl4B3gLAN1s0=\n=RJqx\n-----END PGP SIGNATURE-----\n", "payload": "tree 06fbe027f63c8338a9eaa32101888dc78da986da\nparent 7e18b79c77f0b513d0c0d23abcd5062e1b12dfa2\nparent 203cf2d3668e38dfa3088763789d2541c5943ae7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639207352 +0100\ncommitter GitHub <noreply@github.com> 1639207352 +0100\n\nRollup merge of #91515 - jethrogb:rsplit_array, r=yaahc\n\nAdd rsplit_array variants to slices and arrays\n\nBy request: https://github.com/rust-lang/rust/issues/90091#issuecomment-985903239\n\nr? `@yaahc`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c791ca86335f7301ca38b8944ae97da20d60ab", "html_url": "https://github.com/rust-lang/rust/commit/27c791ca86335f7301ca38b8944ae97da20d60ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c791ca86335f7301ca38b8944ae97da20d60ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e18b79c77f0b513d0c0d23abcd5062e1b12dfa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e18b79c77f0b513d0c0d23abcd5062e1b12dfa2", "html_url": "https://github.com/rust-lang/rust/commit/7e18b79c77f0b513d0c0d23abcd5062e1b12dfa2"}, {"sha": "203cf2d3668e38dfa3088763789d2541c5943ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/203cf2d3668e38dfa3088763789d2541c5943ae7", "html_url": "https://github.com/rust-lang/rust/commit/203cf2d3668e38dfa3088763789d2541c5943ae7"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "5e295ffbff7409815866a0b967ad163de077d69f", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=27c791ca86335f7301ca38b8944ae97da20d60ab", "patch": "@@ -645,6 +645,84 @@ impl<T, const N: usize> [T; N] {\n     pub fn split_array_mut<const M: usize>(&mut self) -> (&mut [T; M], &mut [T]) {\n         (&mut self[..]).split_array_mut::<M>()\n     }\n+\n+    /// Divides one array reference into two at an index from the end.\n+    ///\n+    /// The first will contain all indices from `[0, N - M)` (excluding\n+    /// the index `N - M` itself) and the second will contain all\n+    /// indices from `[N - M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = [1, 2, 3, 4, 5, 6];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.rsplit_array_ref::<0>();\n+    ///    assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n+    ///    assert_eq!(right, &[]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<2>();\n+    ///     assert_eq!(left, &[1, 2, 3, 4]);\n+    ///     assert_eq!(right, &[5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<6>();\n+    ///     assert_eq!(left, &[]);\n+    ///     assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n+    /// }\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn rsplit_array_ref<const M: usize>(&self) -> (&[T], &[T; M]) {\n+        (&self[..]).rsplit_array_ref::<M>()\n+    }\n+\n+    /// Divides one mutable array reference into two at an index from the end.\n+    ///\n+    /// The first will contain all indices from `[0, N - M)` (excluding\n+    /// the index `N - M` itself) and the second will contain all\n+    /// indices from `[N - M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// let (left, right) = v.rsplit_array_mut::<4>();\n+    /// assert_eq!(left, &mut [1, 0]);\n+    /// assert_eq!(right, &mut [3, 0, 5, 6][..]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn rsplit_array_mut<const M: usize>(&mut self) -> (&mut [T], &mut [T; M]) {\n+        (&mut self[..]).rsplit_array_mut::<M>()\n+    }\n }\n \n /// Pulls `N` items from `iter` and returns them as an array. If the iterator"}, {"sha": "f9ea99ea8aa5c089b2682f61e2566269cadc40bb", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=27c791ca86335f7301ca38b8944ae97da20d60ab", "patch": "@@ -1705,6 +1705,84 @@ impl<T> [T] {\n         unsafe { (&mut *(a.as_mut_ptr() as *mut [T; N]), b) }\n     }\n \n+    /// Divides one slice into an array and a remainder slice at an index from\n+    /// the end.\n+    ///\n+    /// The slice will contain all indices from `[0, len - N)` (excluding\n+    /// the index `len - N` itself) and the array will contain all\n+    /// indices from `[len - N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = &[1, 2, 3, 4, 5, 6][..];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.rsplit_array_ref::<0>();\n+    ///    assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n+    ///    assert_eq!(right, &[]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<2>();\n+    ///     assert_eq!(left, [1, 2, 3, 4]);\n+    ///     assert_eq!(right, &[5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<6>();\n+    ///     assert_eq!(left, []);\n+    ///     assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn rsplit_array_ref<const N: usize>(&self) -> (&[T], &[T; N]) {\n+        assert!(N <= self.len());\n+        let (a, b) = self.split_at(self.len() - N);\n+        // SAFETY: b points to [T; N]? Yes it's [T] of length N (checked by split_at)\n+        unsafe { (a, &*(b.as_ptr() as *const [T; N])) }\n+    }\n+\n+    /// Divides one mutable slice into an array and a remainder slice at an\n+    /// index from the end.\n+    ///\n+    /// The slice will contain all indices from `[0, len - N)` (excluding\n+    /// the index `N` itself) and the array will contain all\n+    /// indices from `[len - N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = &mut [1, 0, 3, 0, 5, 6][..];\n+    /// let (left, right) = v.rsplit_array_mut::<4>();\n+    /// assert_eq!(left, [1, 0]);\n+    /// assert_eq!(right, &mut [3, 0, 5, 6]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn rsplit_array_mut<const N: usize>(&mut self) -> (&mut [T], &mut [T; N]) {\n+        assert!(N <= self.len());\n+        let (a, b) = self.split_at_mut(self.len() - N);\n+        // SAFETY: b points to [T; N]? Yes it's [T] of length N (checked by split_at_mut)\n+        unsafe { (a, &mut *(b.as_mut_ptr() as *mut [T; N])) }\n+    }\n+\n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`. The matched element is not contained in the subslices.\n     ///"}, {"sha": "8524a0bf8dd6a8ed86d22e33d046962e6d3fbcad", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=27c791ca86335f7301ca38b8944ae97da20d60ab", "patch": "@@ -459,6 +459,23 @@ fn array_split_array_mut() {\n     }\n }\n \n+#[test]\n+fn array_rsplit_array_mut() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<0>();\n+        assert_eq!(left, &mut [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, &mut []);\n+    }\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<6>();\n+        assert_eq!(left, &mut []);\n+        assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    }\n+}\n+\n #[should_panic]\n #[test]\n fn array_split_array_ref_out_of_bounds() {\n@@ -475,6 +492,22 @@ fn array_split_array_mut_out_of_bounds() {\n     v.split_array_mut::<7>();\n }\n \n+#[should_panic]\n+#[test]\n+fn array_rsplit_array_ref_out_of_bounds() {\n+    let v = [1, 2, 3, 4, 5, 6];\n+\n+    v.rsplit_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn array_rsplit_array_mut_out_of_bounds() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    v.rsplit_array_mut::<7>();\n+}\n+\n #[test]\n fn array_intoiter_advance_by() {\n     use std::cell::Cell;"}, {"sha": "20e2d8d47c0f5196d5482e4f117a8b41547064eb", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c791ca86335f7301ca38b8944ae97da20d60ab/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=27c791ca86335f7301ca38b8944ae97da20d60ab", "patch": "@@ -2219,6 +2219,23 @@ fn slice_split_array_mut() {\n     }\n }\n \n+#[test]\n+fn slice_rsplit_array_mut() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<0>();\n+        assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, &mut []);\n+    }\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<6>();\n+        assert_eq!(left, []);\n+        assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    }\n+}\n+\n #[should_panic]\n #[test]\n fn slice_split_array_ref_out_of_bounds() {\n@@ -2235,6 +2252,22 @@ fn slice_split_array_mut_out_of_bounds() {\n     v.split_array_mut::<7>();\n }\n \n+#[should_panic]\n+#[test]\n+fn slice_rsplit_array_ref_out_of_bounds() {\n+    let v = &[1, 2, 3, 4, 5, 6][..];\n+\n+    v.rsplit_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn slice_rsplit_array_mut_out_of_bounds() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    v.rsplit_array_mut::<7>();\n+}\n+\n macro_rules! take_tests {\n     (slice: &[], $($tts:tt)*) => {\n         take_tests!(ty: &[()], slice: &[], $($tts)*);"}]}