{"sha": "e028f26e1df27c257e5007390d1787a256b6eee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMjhmMjZlMWRmMjdjMjU3ZTUwMDczOTBkMTc4N2EyNTZiNmVlZTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-26T14:34:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T14:34:30Z"}, "message": "Rollup merge of #69209 - Mark-Simulacrum:strip-unsafe, r=dtolnay\n\nMiscellaneous cleanup to formatting\n\nEach commit stands alone.\n\nThis pull request will also resolve #58320.", "tree": {"sha": "caf728ee4fb7f200cc8e4a877207c8fa920c75e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf728ee4fb7f200cc8e4a877207c8fa920c75e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e028f26e1df27c257e5007390d1787a256b6eee7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVoH3CRBK7hj4Ov3rIwAAdHIIAJ1kBkwl8q97pUn13MVxsBLV\nDF//FlLHFHUrR+fRimu9Dh4/E3QAf1wuyiVrKKHhlZhfar4AcqegOdjha2Bu1z+O\neZ6alAWd7qRtZWzu8bgeFYfwb3tDp4aFhR+i7DOfk5lpgmMnI3xZz5RPhvR1F5MK\nLryuZG6vUDI+EVZUkINfyhP26wXwVDgg2wOC3PYqc8SGyVCeoazSSBoaVAJOTiPl\nJcblLQ4bSyAri0qhYEtPfoewa0SvUIPLdxoVBo/VqNSkOrSkeHiALHLsF2jqeMen\njELnevDNQfL64GQykf/EYp6vudq6hyY4CFDoC7MGc2bCklIq37xR01WwiQZYB3M=\n=oBwU\n-----END PGP SIGNATURE-----\n", "payload": "tree caf728ee4fb7f200cc8e4a877207c8fa920c75e0\nparent 86b9377dd67019db9f0dacb1c077eb6ff24a64ae\nparent f6bfdc95445180aee579dcacc6e6bdc4e6ecf56f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582727670 +0100\ncommitter GitHub <noreply@github.com> 1582727670 +0100\n\nRollup merge of #69209 - Mark-Simulacrum:strip-unsafe, r=dtolnay\n\nMiscellaneous cleanup to formatting\n\nEach commit stands alone.\n\nThis pull request will also resolve #58320.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e028f26e1df27c257e5007390d1787a256b6eee7", "html_url": "https://github.com/rust-lang/rust/commit/e028f26e1df27c257e5007390d1787a256b6eee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e028f26e1df27c257e5007390d1787a256b6eee7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b9377dd67019db9f0dacb1c077eb6ff24a64ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b9377dd67019db9f0dacb1c077eb6ff24a64ae", "html_url": "https://github.com/rust-lang/rust/commit/86b9377dd67019db9f0dacb1c077eb6ff24a64ae"}, {"sha": "f6bfdc95445180aee579dcacc6e6bdc4e6ecf56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfdc95445180aee579dcacc6e6bdc4e6ecf56f", "html_url": "https://github.com/rust-lang/rust/commit/f6bfdc95445180aee579dcacc6e6bdc4e6ecf56f"}], "stats": {"total": 565, "additions": 273, "deletions": 292}, "files": [{"sha": "5ef673009bb6d8469d765d081344db442194d33a", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -29,7 +29,6 @@ where\n             *num,\n             sign,\n             precision,\n-            false,\n             buf.get_mut(),\n             parts.get_mut(),\n         );\n@@ -59,7 +58,6 @@ where\n             *num,\n             sign,\n             precision,\n-            false,\n             buf.get_mut(),\n             parts.get_mut(),\n         );"}, {"sha": "993b1073493e9dd731b54217675dc6da4fd0d5fb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -238,16 +238,8 @@ pub struct Formatter<'a> {\n // NB. Argument is essentially an optimized partially applied formatting function,\n // equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\n \n-struct Void {\n-    _priv: (),\n-    /// Erases all oibits, because `Void` erases the type of the object that\n-    /// will be used to produce formatted output. Since we do not know what\n-    /// oibits the real types have (and they can have any or none), we need to\n-    /// take the most conservative approach and forbid all oibits.\n-    ///\n-    /// It was added after #45197 showed that one could share a `!Sync`\n-    /// object across threads by passing it into `format_args!`.\n-    _oibit_remover: PhantomData<*mut dyn Fn()>,\n+extern \"C\" {\n+    type Opaque;\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n@@ -259,16 +251,23 @@ struct Void {\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n-    value: &'a Void,\n-    formatter: fn(&Void, &mut Formatter<'_>) -> Result,\n+    value: &'a Opaque,\n+    formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n }\n \n-impl<'a> ArgumentV1<'a> {\n-    #[inline(never)]\n-    fn show_usize(x: &usize, f: &mut Formatter<'_>) -> Result {\n-        Display::fmt(x, f)\n-    }\n+// This gurantees a single stable value for the function pointer associated with\n+// indices/counts in the formatting infrastructure.\n+//\n+// Note that a function defined as such would not be correct as functions are\n+// always tagged unnamed_addr with the current lowering to LLVM IR, so their\n+// address is not considered important to LLVM and as such the as_usize cast\n+// could have been miscompiled. In practice, we never call as_usize on non-usize\n+// containing data (as a matter of static generation of the formatting\n+// arguments), so this is merely an additional check.\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+static USIZE_MARKER: fn(&usize, &mut Formatter<'_>) -> Result = |_, _| loop {};\n \n+impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n@@ -278,11 +277,13 @@ impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n-        ArgumentV1::new(x, ArgumentV1::show_usize)\n+        ArgumentV1::new(x, USIZE_MARKER)\n     }\n \n     fn as_usize(&self) -> Option<usize> {\n-        if self.formatter as usize == ArgumentV1::show_usize as usize {\n+        if self.formatter as usize == USIZE_MARKER as usize {\n+            // SAFETY: The `formatter` field is only set to USIZE_MARKER if\n+            // the value is a usize, so this is safe\n             Some(unsafe { *(self.value as *const _ as *const usize) })\n         } else {\n             None\n@@ -1356,11 +1357,11 @@ impl<'a> Formatter<'a> {\n             let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n-                let sign = unsafe { str::from_utf8_unchecked(formatted.sign) };\n+                let sign = formatted.sign;\n                 self.buf.write_str(sign)?;\n \n                 // remove the sign from the formatted parts\n-                formatted.sign = b\"\";\n+                formatted.sign = \"\";\n                 width = width.saturating_sub(sign.len());\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n@@ -1392,7 +1393,7 @@ impl<'a> Formatter<'a> {\n         }\n \n         if !formatted.sign.is_empty() {\n-            write_bytes(self.buf, formatted.sign)?;\n+            self.buf.write_str(formatted.sign)?;\n         }\n         for part in formatted.parts {\n             match *part {"}, {"sha": "5dfd3a8ecdbd695672699c9621995f40229fac16", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -369,11 +369,11 @@ macro_rules! impl_Exp {\n                 flt2dec::Part::Copy(exp_slice)\n             ];\n             let sign = if !is_nonnegative {\n-                &b\"-\"[..]\n+                \"-\"\n             } else if f.sign_plus() {\n-                &b\"+\"[..]\n+                \"+\"\n             } else {\n-                &b\"\"[..]\n+                \"\"\n             };\n             let formatted = flt2dec::Formatted{sign, parts};\n             f.pad_formatted_parts(&formatted)"}, {"sha": "f5cd26a1852d61efbb1bd9d0303218059091f0f5", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -237,7 +237,7 @@ impl<'a> Part<'a> {\n #[derive(Clone)]\n pub struct Formatted<'a> {\n     /// A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.\n-    pub sign: &'static [u8],\n+    pub sign: &'static str,\n     /// Formatted parts to be rendered after a sign and optional zero padding.\n     pub parts: &'a [Part<'a>],\n }\n@@ -259,7 +259,7 @@ impl<'a> Formatted<'a> {\n         if out.len() < self.sign.len() {\n             return None;\n         }\n-        out[..self.sign.len()].copy_from_slice(self.sign);\n+        out[..self.sign.len()].copy_from_slice(self.sign.as_bytes());\n \n         let mut written = self.sign.len();\n         for part in self.parts {\n@@ -402,38 +402,38 @@ pub enum Sign {\n }\n \n /// Returns the static byte string corresponding to the sign to be formatted.\n-/// It can be either `b\"\"`, `b\"+\"` or `b\"-\"`.\n-fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static [u8] {\n+/// It can be either `\"\"`, `\"+\"` or `\"-\"`.\n+fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static str {\n     match (*decoded, sign) {\n-        (FullDecoded::Nan, _) => b\"\",\n-        (FullDecoded::Zero, Sign::Minus) => b\"\",\n+        (FullDecoded::Nan, _) => \"\",\n+        (FullDecoded::Zero, Sign::Minus) => \"\",\n         (FullDecoded::Zero, Sign::MinusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"\"\n+                \"\"\n             }\n         }\n-        (FullDecoded::Zero, Sign::MinusPlus) => b\"+\",\n+        (FullDecoded::Zero, Sign::MinusPlus) => \"+\",\n         (FullDecoded::Zero, Sign::MinusPlusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"+\"\n+                \"+\"\n             }\n         }\n         (_, Sign::Minus) | (_, Sign::MinusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"\"\n+                \"\"\n             }\n         }\n         (_, Sign::MinusPlus) | (_, Sign::MinusPlusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"+\"\n+                \"+\"\n             }\n         }\n     }\n@@ -462,7 +462,6 @@ pub fn to_shortest_str<'a, T, F>(\n     v: T,\n     sign: Sign,\n     frac_digits: usize,\n-    _upper: bool,\n     buf: &'a mut [u8],\n     parts: &'a mut [Part<'a>],\n ) -> Formatted<'a>\n@@ -679,7 +678,6 @@ pub fn to_exact_fixed_str<'a, T, F>(\n     v: T,\n     sign: Sign,\n     frac_digits: usize,\n-    _upper: bool,\n     buf: &'a mut [u8],\n     parts: &'a mut [Part<'a>],\n ) -> Formatted<'a>"}, {"sha": "e945d9c4a54ce26c09e3c88d3dab4ef5d7275139", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 224, "deletions": 236, "changes": 460, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -500,102 +500,99 @@ where\n {\n     use core::num::flt2dec::Sign::*;\n \n-    fn to_string<T, F>(f: &mut F, v: T, sign: Sign, frac_digits: usize, upper: bool) -> String\n+    fn to_string<T, F>(f: &mut F, v: T, sign: Sign, frac_digits: usize) -> String\n     where\n         T: DecodableFloat,\n         F: FnMut(&Decoded, &mut [u8]) -> (usize, i16),\n     {\n         to_string_with_parts(|buf, parts| {\n-            to_shortest_str(|d, b| f(d, b), v, sign, frac_digits, upper, buf, parts)\n+            to_shortest_str(|d, b| f(d, b), v, sign, frac_digits, buf, parts)\n         })\n     }\n \n     let f = &mut f_;\n \n-    assert_eq!(to_string(f, 0.0, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 0, false), \"+0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0, false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 0, false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, 0.0, Minus, 1, true), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 1, true), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 1, true), \"+0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1, true), \"+0.0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 8, true), \"0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 8, true), \"-0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 8, true), \"+0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8, true), \"-0.00000000\");\n-\n-    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0, false), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 0, true), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 0, false), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 0, true), \"+inf\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1, true), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64, true), \"NaN\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1, true), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64, true), \"-inf\");\n-\n-    assert_eq!(to_string(f, 3.14, Minus, 0, false), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 0, false), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 0, false), \"+3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0, false), \"+3.14\");\n-    assert_eq!(to_string(f, -3.14, Minus, 0, false), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 0, false), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 0, false), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0, false), \"-3.14\");\n-    assert_eq!(to_string(f, 3.14, Minus, 1, true), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 2, true), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 3, true), \"+3.140\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4, true), \"+3.1400\");\n-    assert_eq!(to_string(f, -3.14, Minus, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8, true), \"-3.14000000\");\n-\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 0, false), \"0.000000000075\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 3, false), \"0.000000000075\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 12, false), \"0.000000000075\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 13, false), \"0.0000000000750\");\n-\n-    assert_eq!(to_string(f, 1.9971e20, Minus, 0, false), \"199710000000000000000\");\n-    assert_eq!(to_string(f, 1.9971e20, Minus, 1, false), \"199710000000000000000.0\");\n-    assert_eq!(to_string(f, 1.9971e20, Minus, 8, false), \"199710000000000000000.00000000\");\n-\n-    assert_eq!(to_string(f, f32::MAX, Minus, 0, false), format!(\"34028235{:0>31}\", \"\"));\n-    assert_eq!(to_string(f, f32::MAX, Minus, 1, false), format!(\"34028235{:0>31}.0\", \"\"));\n-    assert_eq!(to_string(f, f32::MAX, Minus, 8, false), format!(\"34028235{:0>31}.00000000\", \"\"));\n+    assert_eq!(to_string(f, 0.0, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0, MinusRaw, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 0), \"+0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0), \"+0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, -0.0, MinusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"+0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 1), \"0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusRaw, 1), \"0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 1), \"+0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1), \"+0.0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 8), \"0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusRaw, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"+0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8), \"-0.00000000\");\n+\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 0), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 0), \"+inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 0), \"+inf\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64), \"NaN\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64), \"-inf\");\n+\n+    assert_eq!(to_string(f, 3.14, Minus, 0), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusRaw, 0), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 0), \"+3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0), \"+3.14\");\n+    assert_eq!(to_string(f, -3.14, Minus, 0), \"-3.14\");\n+    assert_eq!(to_string(f, -3.14, MinusRaw, 0), \"-3.14\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 0), \"-3.14\");\n+    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0), \"-3.14\");\n+    assert_eq!(to_string(f, 3.14, Minus, 1), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusRaw, 2), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 3), \"+3.140\");\n+    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusRaw, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8), \"-3.14000000\");\n+\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 0), \"0.000000000075\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 3), \"0.000000000075\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 12), \"0.000000000075\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 13), \"0.0000000000750\");\n+\n+    assert_eq!(to_string(f, 1.9971e20, Minus, 0), \"199710000000000000000\");\n+    assert_eq!(to_string(f, 1.9971e20, Minus, 1), \"199710000000000000000.0\");\n+    assert_eq!(to_string(f, 1.9971e20, Minus, 8), \"199710000000000000000.00000000\");\n+\n+    assert_eq!(to_string(f, f32::MAX, Minus, 0), format!(\"34028235{:0>31}\", \"\"));\n+    assert_eq!(to_string(f, f32::MAX, Minus, 1), format!(\"34028235{:0>31}.0\", \"\"));\n+    assert_eq!(to_string(f, f32::MAX, Minus, 8), format!(\"34028235{:0>31}.00000000\", \"\"));\n \n     let minf32 = ldexp_f32(1.0, -149);\n-    assert_eq!(to_string(f, minf32, Minus, 0, false), format!(\"0.{:0>44}1\", \"\"));\n-    assert_eq!(to_string(f, minf32, Minus, 45, false), format!(\"0.{:0>44}1\", \"\"));\n-    assert_eq!(to_string(f, minf32, Minus, 46, false), format!(\"0.{:0>44}10\", \"\"));\n+    assert_eq!(to_string(f, minf32, Minus, 0), format!(\"0.{:0>44}1\", \"\"));\n+    assert_eq!(to_string(f, minf32, Minus, 45), format!(\"0.{:0>44}1\", \"\"));\n+    assert_eq!(to_string(f, minf32, Minus, 46), format!(\"0.{:0>44}10\", \"\"));\n \n-    assert_eq!(to_string(f, f64::MAX, Minus, 0, false), format!(\"17976931348623157{:0>292}\", \"\"));\n-    assert_eq!(to_string(f, f64::MAX, Minus, 1, false), format!(\"17976931348623157{:0>292}.0\", \"\"));\n-    assert_eq!(\n-        to_string(f, f64::MAX, Minus, 8, false),\n-        format!(\"17976931348623157{:0>292}.00000000\", \"\")\n-    );\n+    assert_eq!(to_string(f, f64::MAX, Minus, 0), format!(\"17976931348623157{:0>292}\", \"\"));\n+    assert_eq!(to_string(f, f64::MAX, Minus, 1), format!(\"17976931348623157{:0>292}.0\", \"\"));\n+    assert_eq!(to_string(f, f64::MAX, Minus, 8), format!(\"17976931348623157{:0>292}.00000000\", \"\"));\n \n     let minf64 = ldexp_f64(1.0, -1074);\n-    assert_eq!(to_string(f, minf64, Minus, 0, false), format!(\"0.{:0>323}5\", \"\"));\n-    assert_eq!(to_string(f, minf64, Minus, 324, false), format!(\"0.{:0>323}5\", \"\"));\n-    assert_eq!(to_string(f, minf64, Minus, 325, false), format!(\"0.{:0>323}50\", \"\"));\n+    assert_eq!(to_string(f, minf64, Minus, 0), format!(\"0.{:0>323}5\", \"\"));\n+    assert_eq!(to_string(f, minf64, Minus, 324), format!(\"0.{:0>323}5\", \"\"));\n+    assert_eq!(to_string(f, minf64, Minus, 325), format!(\"0.{:0>323}50\", \"\"));\n \n     if cfg!(miri) {\n         // Miri is too slow\n         return;\n     }\n \n     // very large output\n-    assert_eq!(to_string(f, 1.1, Minus, 80000, false), format!(\"1.1{:0>79999}\", \"\"));\n+    assert_eq!(to_string(f, 1.1, Minus, 80000), format!(\"1.1{:0>79999}\", \"\"));\n }\n \n pub fn to_shortest_exp_str_test<F>(mut f_: F)\n@@ -996,207 +993,198 @@ where\n {\n     use core::num::flt2dec::Sign::*;\n \n-    fn to_string<T, F>(f: &mut F, v: T, sign: Sign, frac_digits: usize, upper: bool) -> String\n+    fn to_string<T, F>(f: &mut F, v: T, sign: Sign, frac_digits: usize) -> String\n     where\n         T: DecodableFloat,\n         F: FnMut(&Decoded, &mut [u8], i16) -> (usize, i16),\n     {\n         to_string_with_parts(|buf, parts| {\n-            to_exact_fixed_str(|d, b, l| f(d, b, l), v, sign, frac_digits, upper, buf, parts)\n+            to_exact_fixed_str(|d, b, l| f(d, b, l), v, sign, frac_digits, buf, parts)\n         })\n     }\n \n     let f = &mut f_;\n \n-    assert_eq!(to_string(f, 0.0, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 0, false), \"+0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0, false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 0, false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, 0.0, Minus, 1, true), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 1, true), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 1, true), \"+0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1, true), \"+0.0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 8, true), \"0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 8, true), \"-0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 8, true), \"+0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8, true), \"-0.00000000\");\n-\n-    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0, false), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 1, true), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 8, false), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 64, true), \"+inf\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1, true), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64, true), \"NaN\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1, true), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64, true), \"-inf\");\n-\n-    assert_eq!(to_string(f, 3.14, Minus, 0, false), \"3\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 0, false), \"3\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 0, false), \"+3\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0, false), \"+3\");\n-    assert_eq!(to_string(f, -3.14, Minus, 0, false), \"-3\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 0, false), \"-3\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 0, false), \"-3\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0, false), \"-3\");\n-    assert_eq!(to_string(f, 3.14, Minus, 1, true), \"3.1\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 2, true), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 3, true), \"+3.140\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4, true), \"+3.1400\");\n-    assert_eq!(to_string(f, -3.14, Minus, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 8, true), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8, true), \"-3.14000000\");\n-\n-    assert_eq!(to_string(f, 0.195, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.195, MinusPlus, 0, false), \"+0\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 0, false), \"+0\");\n-    assert_eq!(to_string(f, -0.195, Minus, 0, false), \"-0\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, -0.195, MinusPlus, 0, false), \"-0\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 0, false), \"-0\");\n-    assert_eq!(to_string(f, 0.195, Minus, 1, true), \"0.2\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 2, true), \"0.20\");\n-    assert_eq!(to_string(f, 0.195, MinusPlus, 3, true), \"+0.195\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 4, true), \"+0.1950\");\n-    assert_eq!(to_string(f, -0.195, Minus, 5, true), \"-0.19500\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 6, true), \"-0.195000\");\n-    assert_eq!(to_string(f, -0.195, MinusPlus, 7, true), \"-0.1950000\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 8, true), \"-0.19500000\");\n-\n-    assert_eq!(to_string(f, 999.5, Minus, 0, false), \"1000\");\n-    assert_eq!(to_string(f, 999.5, Minus, 1, false), \"999.5\");\n-    assert_eq!(to_string(f, 999.5, Minus, 2, false), \"999.50\");\n-    assert_eq!(to_string(f, 999.5, Minus, 3, false), \"999.500\");\n-    assert_eq!(to_string(f, 999.5, Minus, 30, false), \"999.500000000000000000000000000000\");\n-\n-    assert_eq!(to_string(f, 0.5, Minus, 0, false), \"1\");\n-    assert_eq!(to_string(f, 0.5, Minus, 1, false), \"0.5\");\n-    assert_eq!(to_string(f, 0.5, Minus, 2, false), \"0.50\");\n-    assert_eq!(to_string(f, 0.5, Minus, 3, false), \"0.500\");\n-\n-    assert_eq!(to_string(f, 0.95, Minus, 0, false), \"1\");\n-    assert_eq!(to_string(f, 0.95, Minus, 1, false), \"0.9\"); // because it really is less than 0.95\n-    assert_eq!(to_string(f, 0.95, Minus, 2, false), \"0.95\");\n-    assert_eq!(to_string(f, 0.95, Minus, 3, false), \"0.950\");\n-    assert_eq!(to_string(f, 0.95, Minus, 10, false), \"0.9500000000\");\n-    assert_eq!(to_string(f, 0.95, Minus, 30, false), \"0.949999999999999955591079014994\");\n-\n-    assert_eq!(to_string(f, 0.095, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.095, Minus, 1, false), \"0.1\");\n-    assert_eq!(to_string(f, 0.095, Minus, 2, false), \"0.10\");\n-    assert_eq!(to_string(f, 0.095, Minus, 3, false), \"0.095\");\n-    assert_eq!(to_string(f, 0.095, Minus, 4, false), \"0.0950\");\n-    assert_eq!(to_string(f, 0.095, Minus, 10, false), \"0.0950000000\");\n-    assert_eq!(to_string(f, 0.095, Minus, 30, false), \"0.095000000000000001110223024625\");\n-\n-    assert_eq!(to_string(f, 0.0095, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 1, false), \"0.0\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 2, false), \"0.01\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 3, false), \"0.009\"); // really is less than 0.0095\n-    assert_eq!(to_string(f, 0.0095, Minus, 4, false), \"0.0095\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 5, false), \"0.00950\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 10, false), \"0.0095000000\");\n-    assert_eq!(to_string(f, 0.0095, Minus, 30, false), \"0.009499999999999999764077607267\");\n-\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 3, false), \"0.000\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 10, false), \"0.0000000001\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 11, false), \"0.00000000007\"); // ditto\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 12, false), \"0.000000000075\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 13, false), \"0.0000000000750\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 20, false), \"0.00000000007500000000\");\n-    assert_eq!(to_string(f, 7.5e-11, Minus, 30, false), \"0.000000000074999999999999999501\");\n-\n-    assert_eq!(to_string(f, 1.0e25, Minus, 0, false), \"10000000000000000905969664\");\n-    assert_eq!(to_string(f, 1.0e25, Minus, 1, false), \"10000000000000000905969664.0\");\n-    assert_eq!(to_string(f, 1.0e25, Minus, 3, false), \"10000000000000000905969664.000\");\n-\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 3, false), \"0.000\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 6, false), \"0.000001\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 9, false), \"0.000001000\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 12, false), \"0.000001000000\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 22, false), \"0.0000010000000000000000\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 23, false), \"0.00000099999999999999995\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 24, false), \"0.000000999999999999999955\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 25, false), \"0.0000009999999999999999547\");\n-    assert_eq!(to_string(f, 1.0e-6, Minus, 35, false), \"0.00000099999999999999995474811182589\");\n+    assert_eq!(to_string(f, 0.0, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0, MinusRaw, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 0), \"+0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0), \"+0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, -0.0, MinusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"+0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 1), \"0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusRaw, 1), \"0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 1), \"+0.0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1), \"+0.0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 8), \"0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusRaw, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"+0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8), \"-0.00000000\");\n+\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 1), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 8), \"+inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 64), \"+inf\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64), \"NaN\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64), \"-inf\");\n+\n+    assert_eq!(to_string(f, 3.14, Minus, 0), \"3\");\n+    assert_eq!(to_string(f, 3.14, MinusRaw, 0), \"3\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 0), \"+3\");\n+    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0), \"+3\");\n+    assert_eq!(to_string(f, -3.14, Minus, 0), \"-3\");\n+    assert_eq!(to_string(f, -3.14, MinusRaw, 0), \"-3\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 0), \"-3\");\n+    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0), \"-3\");\n+    assert_eq!(to_string(f, 3.14, Minus, 1), \"3.1\");\n+    assert_eq!(to_string(f, 3.14, MinusRaw, 2), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 3), \"+3.140\");\n+    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusRaw, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 8), \"-3.14000000\");\n+    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8), \"-3.14000000\");\n+\n+    assert_eq!(to_string(f, 0.195, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 0.195, MinusRaw, 0), \"0\");\n+    assert_eq!(to_string(f, 0.195, MinusPlus, 0), \"+0\");\n+    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 0), \"+0\");\n+    assert_eq!(to_string(f, -0.195, Minus, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.195, MinusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.195, MinusPlus, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, 0.195, Minus, 1), \"0.2\");\n+    assert_eq!(to_string(f, 0.195, MinusRaw, 2), \"0.20\");\n+    assert_eq!(to_string(f, 0.195, MinusPlus, 3), \"+0.195\");\n+    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 4), \"+0.1950\");\n+    assert_eq!(to_string(f, -0.195, Minus, 5), \"-0.19500\");\n+    assert_eq!(to_string(f, -0.195, MinusRaw, 6), \"-0.195000\");\n+    assert_eq!(to_string(f, -0.195, MinusPlus, 7), \"-0.1950000\");\n+    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 8), \"-0.19500000\");\n+\n+    assert_eq!(to_string(f, 999.5, Minus, 0), \"1000\");\n+    assert_eq!(to_string(f, 999.5, Minus, 1), \"999.5\");\n+    assert_eq!(to_string(f, 999.5, Minus, 2), \"999.50\");\n+    assert_eq!(to_string(f, 999.5, Minus, 3), \"999.500\");\n+    assert_eq!(to_string(f, 999.5, Minus, 30), \"999.500000000000000000000000000000\");\n+\n+    assert_eq!(to_string(f, 0.5, Minus, 0), \"1\");\n+    assert_eq!(to_string(f, 0.5, Minus, 1), \"0.5\");\n+    assert_eq!(to_string(f, 0.5, Minus, 2), \"0.50\");\n+    assert_eq!(to_string(f, 0.5, Minus, 3), \"0.500\");\n+\n+    assert_eq!(to_string(f, 0.95, Minus, 0), \"1\");\n+    assert_eq!(to_string(f, 0.95, Minus, 1), \"0.9\"); // because it really is less than 0.95\n+    assert_eq!(to_string(f, 0.95, Minus, 2), \"0.95\");\n+    assert_eq!(to_string(f, 0.95, Minus, 3), \"0.950\");\n+    assert_eq!(to_string(f, 0.95, Minus, 10), \"0.9500000000\");\n+    assert_eq!(to_string(f, 0.95, Minus, 30), \"0.949999999999999955591079014994\");\n+\n+    assert_eq!(to_string(f, 0.095, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 0.095, Minus, 1), \"0.1\");\n+    assert_eq!(to_string(f, 0.095, Minus, 2), \"0.10\");\n+    assert_eq!(to_string(f, 0.095, Minus, 3), \"0.095\");\n+    assert_eq!(to_string(f, 0.095, Minus, 4), \"0.0950\");\n+    assert_eq!(to_string(f, 0.095, Minus, 10), \"0.0950000000\");\n+    assert_eq!(to_string(f, 0.095, Minus, 30), \"0.095000000000000001110223024625\");\n+\n+    assert_eq!(to_string(f, 0.0095, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 1), \"0.0\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 2), \"0.01\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 3), \"0.009\"); // really is less than 0.0095\n+    assert_eq!(to_string(f, 0.0095, Minus, 4), \"0.0095\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 5), \"0.00950\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 10), \"0.0095000000\");\n+    assert_eq!(to_string(f, 0.0095, Minus, 30), \"0.009499999999999999764077607267\");\n+\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 3), \"0.000\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 10), \"0.0000000001\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 11), \"0.00000000007\"); // ditto\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 12), \"0.000000000075\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 13), \"0.0000000000750\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 20), \"0.00000000007500000000\");\n+    assert_eq!(to_string(f, 7.5e-11, Minus, 30), \"0.000000000074999999999999999501\");\n+\n+    assert_eq!(to_string(f, 1.0e25, Minus, 0), \"10000000000000000905969664\");\n+    assert_eq!(to_string(f, 1.0e25, Minus, 1), \"10000000000000000905969664.0\");\n+    assert_eq!(to_string(f, 1.0e25, Minus, 3), \"10000000000000000905969664.000\");\n+\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 3), \"0.000\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 6), \"0.000001\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 9), \"0.000001000\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 12), \"0.000001000000\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 22), \"0.0000010000000000000000\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 23), \"0.00000099999999999999995\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 24), \"0.000000999999999999999955\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 25), \"0.0000009999999999999999547\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 35), \"0.00000099999999999999995474811182589\");\n+    assert_eq!(to_string(f, 1.0e-6, Minus, 45), \"0.000000999999999999999954748111825886258685614\");\n     assert_eq!(\n-        to_string(f, 1.0e-6, Minus, 45, false),\n-        \"0.000000999999999999999954748111825886258685614\"\n-    );\n-    assert_eq!(\n-        to_string(f, 1.0e-6, Minus, 55, false),\n+        to_string(f, 1.0e-6, Minus, 55),\n         \"0.0000009999999999999999547481118258862586856139387236908\"\n     );\n     assert_eq!(\n-        to_string(f, 1.0e-6, Minus, 65, false),\n+        to_string(f, 1.0e-6, Minus, 65),\n         \"0.00000099999999999999995474811182588625868561393872369080781936646\"\n     );\n     assert_eq!(\n-        to_string(f, 1.0e-6, Minus, 75, false),\n+        to_string(f, 1.0e-6, Minus, 75),\n         \"0.000000999999999999999954748111825886258685613938723690807819366455078125000\"\n     );\n \n-    assert_eq!(to_string(f, f32::MAX, Minus, 0, false), \"340282346638528859811704183484516925440\");\n-    assert_eq!(\n-        to_string(f, f32::MAX, Minus, 1, false),\n-        \"340282346638528859811704183484516925440.0\"\n-    );\n-    assert_eq!(\n-        to_string(f, f32::MAX, Minus, 2, false),\n-        \"340282346638528859811704183484516925440.00\"\n-    );\n+    assert_eq!(to_string(f, f32::MAX, Minus, 0), \"340282346638528859811704183484516925440\");\n+    assert_eq!(to_string(f, f32::MAX, Minus, 1), \"340282346638528859811704183484516925440.0\");\n+    assert_eq!(to_string(f, f32::MAX, Minus, 2), \"340282346638528859811704183484516925440.00\");\n \n     if cfg!(miri) {\n         // Miri is too slow\n         return;\n     }\n \n     let minf32 = ldexp_f32(1.0, -149);\n-    assert_eq!(to_string(f, minf32, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, minf32, Minus, 1, false), \"0.0\");\n-    assert_eq!(to_string(f, minf32, Minus, 2, false), \"0.00\");\n-    assert_eq!(to_string(f, minf32, Minus, 4, false), \"0.0000\");\n-    assert_eq!(to_string(f, minf32, Minus, 8, false), \"0.00000000\");\n-    assert_eq!(to_string(f, minf32, Minus, 16, false), \"0.0000000000000000\");\n-    assert_eq!(to_string(f, minf32, Minus, 32, false), \"0.00000000000000000000000000000000\");\n+    assert_eq!(to_string(f, minf32, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, minf32, Minus, 1), \"0.0\");\n+    assert_eq!(to_string(f, minf32, Minus, 2), \"0.00\");\n+    assert_eq!(to_string(f, minf32, Minus, 4), \"0.0000\");\n+    assert_eq!(to_string(f, minf32, Minus, 8), \"0.00000000\");\n+    assert_eq!(to_string(f, minf32, Minus, 16), \"0.0000000000000000\");\n+    assert_eq!(to_string(f, minf32, Minus, 32), \"0.00000000000000000000000000000000\");\n     assert_eq!(\n-        to_string(f, minf32, Minus, 64, false),\n+        to_string(f, minf32, Minus, 64),\n         \"0.0000000000000000000000000000000000000000000014012984643248170709\"\n     );\n     assert_eq!(\n-        to_string(f, minf32, Minus, 128, false),\n+        to_string(f, minf32, Minus, 128),\n         \"0.0000000000000000000000000000000000000000000014012984643248170709\\\n                   2372958328991613128026194187651577175706828388979108268586060149\"\n     );\n     assert_eq!(\n-        to_string(f, minf32, Minus, 256, false),\n+        to_string(f, minf32, Minus, 256),\n         \"0.0000000000000000000000000000000000000000000014012984643248170709\\\n                   2372958328991613128026194187651577175706828388979108268586060148\\\n                   6638188362121582031250000000000000000000000000000000000000000000\\\n                   0000000000000000000000000000000000000000000000000000000000000000\"\n     );\n \n     assert_eq!(\n-        to_string(f, f64::MAX, Minus, 0, false),\n+        to_string(f, f64::MAX, Minus, 0),\n         \"1797693134862315708145274237317043567980705675258449965989174768\\\n                 0315726078002853876058955863276687817154045895351438246423432132\\\n                 6889464182768467546703537516986049910576551282076245490090389328\\\n                 9440758685084551339423045832369032229481658085593321233482747978\\\n                 26204144723168738177180919299881250404026184124858368\"\n     );\n     assert_eq!(\n-        to_string(f, f64::MAX, Minus, 10, false),\n+        to_string(f, f64::MAX, Minus, 10),\n         \"1797693134862315708145274237317043567980705675258449965989174768\\\n                 0315726078002853876058955863276687817154045895351438246423432132\\\n                 6889464182768467546703537516986049910576551282076245490090389328\\\n@@ -1205,16 +1193,16 @@ where\n     );\n \n     let minf64 = ldexp_f64(1.0, -1074);\n-    assert_eq!(to_string(f, minf64, Minus, 0, false), \"0\");\n-    assert_eq!(to_string(f, minf64, Minus, 1, false), \"0.0\");\n-    assert_eq!(to_string(f, minf64, Minus, 10, false), \"0.0000000000\");\n+    assert_eq!(to_string(f, minf64, Minus, 0), \"0\");\n+    assert_eq!(to_string(f, minf64, Minus, 1), \"0.0\");\n+    assert_eq!(to_string(f, minf64, Minus, 10), \"0.0000000000\");\n     assert_eq!(\n-        to_string(f, minf64, Minus, 100, false),\n+        to_string(f, minf64, Minus, 100),\n         \"0.0000000000000000000000000000000000000000000000000000000000000000\\\n                   000000000000000000000000000000000000\"\n     );\n     assert_eq!(\n-        to_string(f, minf64, Minus, 1000, false),\n+        to_string(f, minf64, Minus, 1000),\n         \"0.0000000000000000000000000000000000000000000000000000000000000000\\\n                   0000000000000000000000000000000000000000000000000000000000000000\\\n                   0000000000000000000000000000000000000000000000000000000000000000\\\n@@ -1234,15 +1222,15 @@ where\n     );\n \n     // very large output\n-    assert_eq!(to_string(f, 0.0, Minus, 80000, false), format!(\"0.{:0>80000}\", \"\"));\n-    assert_eq!(to_string(f, 1.0e1, Minus, 80000, false), format!(\"10.{:0>80000}\", \"\"));\n-    assert_eq!(to_string(f, 1.0e0, Minus, 80000, false), format!(\"1.{:0>80000}\", \"\"));\n+    assert_eq!(to_string(f, 0.0, Minus, 80000), format!(\"0.{:0>80000}\", \"\"));\n+    assert_eq!(to_string(f, 1.0e1, Minus, 80000), format!(\"10.{:0>80000}\", \"\"));\n+    assert_eq!(to_string(f, 1.0e0, Minus, 80000), format!(\"1.{:0>80000}\", \"\"));\n     assert_eq!(\n-        to_string(f, 1.0e-1, Minus, 80000, false),\n+        to_string(f, 1.0e-1, Minus, 80000),\n         format!(\"0.1000000000000000055511151231257827021181583404541015625{:0>79945}\", \"\")\n     );\n     assert_eq!(\n-        to_string(f, 1.0e-20, Minus, 80000, false),\n+        to_string(f, 1.0e-20, Minus, 80000),\n         format!(\n             \"0.0000000000000000000099999999999999994515327145420957165172950370\\\n                           2787392447107715776066783064379706047475337982177734375{:0>79881}\","}, {"sha": "c8439764effc331dfbd3d2a2a076da8fccdda4fb", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e028f26e1df27c257e5007390d1787a256b6eee7/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=e028f26e1df27c257e5007390d1787a256b6eee7", "patch": "@@ -1,34 +1,30 @@\n-error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:8:5\n    |\n LL | fn send<T: Send>(_: T) {}\n    |    ----    ---- required by this bound in `send`\n ...\n LL |     send(format_args!(\"{:?}\", c));\n-   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n-   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n-   = note: required because it appears within the type `core::fmt::Void`\n-   = note: required because it appears within the type `&core::fmt::Void`\n+   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `core::fmt::Opaque`\n+   = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n \n-error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:9:5\n    |\n LL | fn sync<T: Sync>(_: T) {}\n    |    ----    ---- required by this bound in `sync`\n ...\n LL |     sync(format_args!(\"{:?}\", c));\n-   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n-   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n-   = note: required because it appears within the type `core::fmt::Void`\n-   = note: required because it appears within the type `&core::fmt::Void`\n+   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `core::fmt::Opaque`\n+   = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`"}]}