{"sha": "cc47998e2877f13712a12b3814cc2bbf07fbae09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNDc5OThlMjg3N2YxMzcxMmExMmIzODE0Y2MyYmJmMDdmYmFlMDk=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-17T14:43:23Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "add `tcx` to `fn walk`", "tree": {"sha": "46d88e9a1a7ae272191acb1c7e17f067dca95124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d88e9a1a7ae272191acb1c7e17f067dca95124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc47998e2877f13712a12b3814cc2bbf07fbae09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc47998e2877f13712a12b3814cc2bbf07fbae09", "html_url": "https://github.com/rust-lang/rust/commit/cc47998e2877f13712a12b3814cc2bbf07fbae09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc47998e2877f13712a12b3814cc2bbf07fbae09/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfaf13af4e5071b09248979e51c6614bf1353f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaf13af4e5071b09248979e51c6614bf1353f52", "html_url": "https://github.com/rust-lang/rust/commit/bfaf13af4e5071b09248979e51c6614bf1353f52"}], "stats": {"total": 140, "additions": 73, "deletions": 67}, "files": [{"sha": "e00003face9ced40b6f7d3e13367b05b4e7d68cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n \n     fn node_ty_contains_target(&self, hir_id: HirId) -> Option<Ty<'tcx>> {\n         self.node_type_opt(hir_id).map(|ty| self.infcx.resolve_vars_if_possible(ty)).filter(|ty| {\n-            ty.walk().any(|inner| {\n+            ty.walk(self.infcx.tcx).any(|inner| {\n                 inner == self.target\n                     || match (inner.unpack(), self.target.unpack()) {\n                         (GenericArgKind::Type(inner_ty), GenericArgKind::Type(target_ty)) => {"}, {"sha": "dba73251b4f0d44e9e8d68e3333c6f44181e38f5", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -189,7 +189,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n         let mut bounds = parent\n-            .walk_shallow(visited)\n+            .walk_shallow(self.tcx, visited)\n             .filter_map(|child| match child.unpack() {\n                 GenericArgKind::Type(ty) => Some(self.type_bound(ty, visited)),\n                 GenericArgKind::Lifetime(lt) => {"}, {"sha": "b4f11a8a0448c639b8ed3529b29256f9aa2934e9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -152,8 +152,8 @@ declare_lint! {\n declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n \n impl BoxPointers {\n-    fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {\n-        for leaf in ty.walk() {\n+    fn check_heap_type<'tcx>(&self, cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n+        for leaf in ty.walk(cx.tcx) {\n             if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n                 if leaf_ty.is_box() {\n                     cx.struct_span_lint(BOX_POINTERS, span, |lint| {"}, {"sha": "ef4ad998f10c81ab2f2ec3745e31d5e5c7a2f9c8", "filename": "compiler/rustc_middle/src/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -194,7 +194,7 @@ fn compute_components_recursive(\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n     visited: &mut SsoHashSet<GenericArg<'tcx>>,\n ) {\n-    for child in parent.walk_shallow(visited) {\n+    for child in parent.walk_shallow(tcx, visited) {\n         match child.unpack() {\n             GenericArgKind::Type(ty) => {\n                 compute_components(tcx, ty, out, visited);"}, {"sha": "3cab813f12ad081398f4c60c2235634c2c93dca9", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -1,8 +1,8 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use crate::ty;\n use crate::ty::subst::{GenericArg, GenericArgKind};\n+use crate::ty::{self, TyCtxt};\n use rustc_data_structures::sso::SsoHashSet;\n use smallvec::{self, SmallVec};\n \n@@ -11,6 +11,7 @@ use smallvec::{self, SmallVec};\n type TypeWalkerStack<'tcx> = SmallVec<[GenericArg<'tcx>; 8]>;\n \n pub struct TypeWalker<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n     pub visited: SsoHashSet<GenericArg<'tcx>>,\n@@ -25,8 +26,8 @@ pub struct TypeWalker<'tcx> {\n /// It maintains a set of visited types and\n /// skips any types that are already there.\n impl<'tcx> TypeWalker<'tcx> {\n-    pub fn new(root: GenericArg<'tcx>) -> Self {\n-        Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }\n+    fn new(tcx: TyCtxt<'tcx>, root: GenericArg<'tcx>) -> Self {\n+        Self { tcx, stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }\n     }\n \n     /// Skips the subtree corresponding to the last type\n@@ -55,7 +56,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n             let next = self.stack.pop()?;\n             self.last_subtree = self.stack.len();\n             if self.visited.insert(next) {\n-                push_inner(&mut self.stack, next);\n+                push_inner(self.tcx, &mut self.stack, next);\n                 debug!(\"next: stack={:?}\", self.stack);\n                 return Some(next);\n             }\n@@ -74,8 +75,8 @@ impl GenericArg<'tcx> {\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }\n     /// ```\n-    pub fn walk(self) -> TypeWalker<'tcx> {\n-        TypeWalker::new(self)\n+    pub fn walk(self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n+        TypeWalker::new(tcx, self)\n     }\n \n     /// Iterator that walks the immediate children of `self`. Hence\n@@ -87,10 +88,11 @@ impl GenericArg<'tcx> {\n     /// and skips any types that are already there.\n     pub fn walk_shallow(\n         self,\n+        tcx: TyCtxt<'tcx>,\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> impl Iterator<Item = GenericArg<'tcx>> {\n         let mut stack = SmallVec::new();\n-        push_inner(&mut stack, self);\n+        push_inner(tcx, &mut stack, self);\n         stack.retain(|a| visited.insert(*a));\n         stack.into_iter()\n     }\n@@ -107,18 +109,22 @@ impl<'tcx> super::TyS<'tcx> {\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }\n     /// ```\n-    pub fn walk(&'tcx self) -> TypeWalker<'tcx> {\n-        TypeWalker::new(self.into())\n+    pub fn walk(&'tcx self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n+        TypeWalker::new(tcx, self.into())\n     }\n }\n \n-// We push `GenericArg`s on the stack in reverse order so as to\n-// maintain a pre-order traversal. As of the time of this\n-// writing, the fact that the traversal is pre-order is not\n-// known to be significant to any code, but it seems like the\n-// natural order one would expect (basically, the order of the\n-// types as they are written).\n-fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {\n+/// We push `GenericArg`s on the stack in reverse order so as to\n+/// maintain a pre-order traversal. As of the time of this\n+/// writing, the fact that the traversal is pre-order is not\n+/// known to be significant to any code, but it seems like the\n+/// natural order one would expect (basically, the order of the\n+/// types as they are written).\n+fn push_inner<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    stack: &mut TypeWalkerStack<'tcx>,\n+    parent: GenericArg<'tcx>,\n+) {\n     match parent.unpack() {\n         GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {\n             ty::Bool\n@@ -196,8 +202,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Error(_) => {}\n \n                 ty::ConstKind::Unevaluated(ct) => {\n-                    // TODO\n-                    stack.extend(ct.substs_.unwrap().iter().rev());\n+                    stack.extend(ct.substs(tcx).iter().rev());\n                 }\n             }\n         }"}, {"sha": "f03036267acfabb036b5cbf5a991e9f157830db0", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -573,7 +573,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     let type_length = instance\n         .substs\n         .iter()\n-        .flat_map(|arg| arg.walk())\n+        .flat_map(|arg| arg.walk(tcx))\n         .filter(|arg| match arg.unpack() {\n             GenericArgKind::Type(_) | GenericArgKind::Const(_) => true,\n             GenericArgKind::Lifetime(_) => false,"}, {"sha": "0361ddc915d4cd67abb4ccf3327630b2a60ab686", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -365,7 +365,7 @@ impl Checker<'mir, 'tcx> {\n     fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>, local: Local) {\n         let kind = self.body.local_kind(local);\n \n-        for ty in ty.walk() {\n+        for ty in ty.walk(self.tcx) {\n             let ty = match ty.unpack() {\n                 GenericArgKind::Type(ty) => ty,\n "}, {"sha": "ba2c91a9347ec5dd45ffc0a33250f8248d86b997", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n                     // Handle calls to `transmute`\n                     if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                         let arg_ty = args[0].ty(self.body, self.tcx);\n-                        for generic_inner_ty in arg_ty.walk() {\n+                        for generic_inner_ty in arg_ty.walk(self.tcx) {\n                             if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                                 if let Some((fn_id, fn_substs)) =\n                                     FunctionItemRefChecker::is_fn_ref(inner_ty)\n@@ -110,7 +110,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                 let arg_defs = self.tcx.fn_sig(def_id).skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n-                    for generic_inner_ty in arg_def.walk() {\n+                    for generic_inner_ty in arg_def.walk(self.tcx) {\n                         if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                             // If the inner type matches the type bound by `Pointer`\n                             if TyS::same_type(inner_ty, bound_ty) {"}, {"sha": "bbb5de34d1860a84011421cfebb78e1130a76488", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         // code at the moment, because types like `for <'a> fn(&'a ())` do\n         // not *yet* implement `PartialEq`. So for now we leave this here.\n         has_impl\n-            || ty.walk().any(|t| match t.unpack() {\n+            || ty.walk(self.tcx()).any(|t| match t.unpack() {\n                 ty::subst::GenericArgKind::Lifetime(_) => false,\n                 ty::subst::GenericArgKind::Type(t) => t.is_fn_ptr(),\n                 ty::subst::GenericArgKind::Const(_) => false,"}, {"sha": "110d83cbe28bb78270a1364ed41b6d4e9fac5c06", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -767,14 +767,15 @@ fn substs_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     substs: ty::Binder<'tcx, SubstsRef<'tcx>>,\n ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {\n+    let tcx = selcx.tcx();\n     selcx\n         .infcx()\n         .resolve_vars_if_possible(substs)\n         .skip_binder() // ok because this check doesn't care about regions\n         .iter()\n         .filter(|arg| arg.has_infer_types_or_consts())\n-        .flat_map(|arg| {\n-            let mut walker = arg.walk();\n+        .flat_map(move |arg| {\n+            let mut walker = arg.walk(tcx);\n             while let Some(c) = walker.next() {\n                 if !c.has_infer_types_or_consts() {\n                     walker.visited.remove(&c);"}, {"sha": "9511b41147da87dc77ac345c66889bdaef6a81cd", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -278,7 +278,7 @@ fn predicate_references_self(\n     (predicate, sp): (ty::Predicate<'tcx>, Span),\n ) -> Option<Span> {\n     let self_ty = tcx.types.self_param;\n-    let has_self_ty = |arg: &GenericArg<'_>| arg.walk().any(|arg| arg == self_ty.into());\n+    let has_self_ty = |arg: &GenericArg<'tcx>| arg.walk(tcx).any(|arg| arg == self_ty.into());\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(ref data) => {\n             // In the case of a trait predicate, we can skip the \"self\" type."}, {"sha": "c571a1d628427f6af88f025a94195d1c39b1c8f2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -947,7 +947,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n                 if tcx.features().relaxed_struct_unsize {\n-                    for arg in tail_field_ty.walk() {\n+                    for arg in tail_field_ty.walk(tcx) {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n                             unsizing_params.insert(i);\n                         }\n@@ -956,7 +956,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // Ensure none of the other fields mention the parameters used\n                     // in unsizing.\n                     for field in prefix_fields {\n-                        for arg in tcx.type_of(field.did).walk() {\n+                        for arg in tcx.type_of(field.did).walk(tcx) {\n                             if let Some(i) = maybe_unsizing_param_idx(arg) {\n                                 unsizing_params.remove(i);\n                             }\n@@ -968,7 +968,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 } else {\n                     let mut found = false;\n-                    for arg in tail_field_ty.walk() {\n+                    for arg in tail_field_ty.walk(tcx) {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n                             unsizing_params.insert(i);\n                             found = true;\n@@ -984,7 +984,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // by putting it in a query; it would only need the `DefId` as it\n                     // looks at declared field types, not anything substituted.\n                     for field in prefix_fields {\n-                        for arg in tcx.type_of(field.did).walk() {\n+                        for arg in tcx.type_of(field.did).walk(tcx) {\n                             if let Some(i) = maybe_unsizing_param_idx(arg) {\n                                 if unsizing_params.contains(i) {\n                                     return Err(Unimplemented);"}, {"sha": "623215ec34e1873cb342d3e3892fa8cb3bfa7abc", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n     /// Pushes all the predicates needed to validate that `ty` is WF into `out`.\n     fn compute(&mut self, arg: GenericArg<'tcx>) {\n-        let mut walker = arg.walk();\n+        let mut walker = arg.walk(self.tcx());\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n         while let Some(arg) = walker.next() {"}, {"sha": "1b0fff93a99fbbf0e20469fad0070433e0b830f5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -361,7 +361,7 @@ fn well_formed_types_in_env<'tcx>(\n         // constituents are well-formed.\n         NodeKind::InherentImpl => {\n             let self_ty = tcx.type_of(def_id);\n-            inputs.extend(self_ty.walk());\n+            inputs.extend(self_ty.walk(tcx));\n         }\n \n         // In an fn, we assume that the arguments and all their constituents are\n@@ -370,7 +370,7 @@ fn well_formed_types_in_env<'tcx>(\n             let fn_sig = tcx.fn_sig(def_id);\n             let fn_sig = tcx.liberate_late_bound_regions(def_id, fn_sig);\n \n-            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk()));\n+            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk(tcx)));\n         }\n \n         NodeKind::Other => (),"}, {"sha": "2879b7fcd9115e9a3dadca7c2bf30c4d4eb8d69a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -394,7 +394,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if self.is_object && has_default {\n                         let default_ty = tcx.at(self.span).type_of(param.def_id);\n                         let self_param = tcx.types.self_param;\n-                        if default_ty.walk().any(|arg| arg == self_param.into()) {\n+                        if default_ty.walk(tcx).any(|arg| arg == self_param.into()) {\n                             // There is no suitable inference default for a type parameter\n                             // that references self, in an object type.\n                             return true;\n@@ -1354,7 +1354,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // A `Self` within the original bound will be substituted with a\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self =\n-                            pred.skip_binder().ty.walk().any(|arg| arg == dummy_self.into());\n+                            pred.skip_binder().ty.walk(tcx).any(|arg| arg == dummy_self.into());\n \n                         // If the projection output contains `Self`, force the user to\n                         // elaborate it explicitly to avoid a lot of complexity."}, {"sha": "3c9d5b4def4e7a83a67655167919346a98b78eb7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -1482,7 +1482,7 @@ pub(super) fn check_type_params_are_used<'tcx>(\n         return;\n     }\n \n-    for leaf in ty.walk() {\n+    for leaf in ty.walk(tcx) {\n         if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n             if let ty::Param(param) = leaf_ty.kind() {\n                 debug!(\"found use of ty param {:?}\", param);"}, {"sha": "9efb52a08b7e10eb98daaab1dd43f2bebf7b5987", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -937,7 +937,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let ty = self.resolve_vars_if_possible(ty);\n                         // We walk the argument type because the argument's type could have\n                         // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                        if ty.walk().any(|arg| arg == predicate.self_ty().into()) {\n+                        if ty.walk(self.tcx).any(|arg| arg == predicate.self_ty().into()) {\n                             Some(i)\n                         } else {\n                             None"}, {"sha": "985ee2169c92d01cccbaf38e6d3ce717932f278d", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -114,7 +114,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n-    for arg in field_ty.walk() {\n+    for arg in field_ty.walk(tcx) {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n \n@@ -306,7 +306,7 @@ pub fn check_explicit_predicates<'tcx>(\n         // 'b`.\n         if let Some(self_ty) = ignored_self_ty {\n             if let GenericArgKind::Type(ty) = outlives_predicate.0.unpack() {\n-                if ty.walk().any(|arg| arg == self_ty.into()) {\n+                if ty.walk(tcx).any(|arg| arg == self_ty.into()) {\n                     debug!(\"skipping self ty = {:?}\", &ty);\n                     continue;\n                 }"}, {"sha": "685dbf26250ce2b82aeafd95de9933831e6fc603", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -53,7 +53,7 @@ fn is_non_trait_box(ty: Ty<'_>) -> bool {\n struct EscapeDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     set: HirIdSet,\n-    trait_self_ty: Option<Ty<'a>>,\n+    trait_self_ty: Option<Ty<'tcx>>,\n     too_large_for_stack: u64,\n }\n \n@@ -171,7 +171,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 // skip if there is a `self` parameter binding to a type\n                 // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n                 if let Some(trait_self_ty) = self.trait_self_ty {\n-                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(cmt.place.ty(), trait_self_ty) {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty) {\n                         return;\n                     }\n                 }"}, {"sha": "89146b4dd2c9bd5f58b61a89a2cab4b61f7b6d76", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -119,7 +119,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if let Some(init) = local.init;\n             then {\n                 let init_ty = cx.typeck_results().expr_ty(init);\n-                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n+                let contains_sync_guard = init_ty.walk(cx.tcx).any(|inner| match inner.unpack() {\n                     GenericArgKind::Type(inner_ty) => {\n                         SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n                     },"}, {"sha": "545498a10478db9c623f979edee7a70bf3f54d37", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -49,7 +49,7 @@ pub(super) fn check<'tcx>(\n         if same_item_push_visitor.should_lint();\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push;\n         let vec_ty = cx.typeck_results().expr_ty(vec);\n-        let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n+        let ty = vec_ty.walk(cx.tcx).nth(1).unwrap().expect_ty();\n         if cx\n             .tcx\n             .lang_items()"}, {"sha": "9626cf79dc129c4ba253907830fa8674c0c8e722", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -1987,10 +1987,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             // walk the return type and check for Self (this does not check associated types)\n             if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt_constructor(ret_ty, self_adt) {\n+                if contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n                     return;\n                 }\n-            } else if contains_ty(ret_ty, self_ty) {\n+            } else if contains_ty(cx.tcx, ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -2001,10 +2001,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(cx.tcx, projection_predicate.ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(cx.tcx, projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -2053,7 +2053,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n             let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n-            if !contains_ty(ret_ty, self_ty);\n+            if !contains_ty(cx.tcx, ret_ty, self_ty);\n \n             then {\n                 span_lint("}, {"sha": "681baed8c3696f0323cda6a590bea11e8b325798", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -288,7 +288,7 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n                 .fn_sig(def_id)\n                 .output()\n                 .skip_binder()\n-                .walk()\n+                .walk(self.cx.tcx)\n                 .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         }\n "}, {"sha": "4ba5e1a0f5357829f95fad45aec80029882e8b88", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -62,10 +62,10 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         // Ensure method is constructor-like\n         if let Some(self_adt) = self_ty.ty_adt_def() {\n-            if !contains_adt_constructor(ret_ty, self_adt) {\n+            if !contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n                 return;\n             }\n-        } else if !contains_ty(ret_ty, self_ty) {\n+        } else if !contains_ty(cx.tcx, ret_ty, self_ty) {\n             return;\n         }\n "}, {"sha": "97b1b2dae3c1a3d03f3bd5e051fe74396a62410c", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -218,7 +218,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n \n fn expr_borrows(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n-    matches!(ty.kind(), ty::Ref(..)) || ty.walk().any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n+    matches!(ty.kind(), ty::Ref(..)) || ty.walk(cx.tcx).any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n }\n \n impl LateLintPass<'_> for UnnecessarySortBy {"}, {"sha": "9ae50e47ca4c59ce899e0472b635f7d0e493a925", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 //\n                 // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n                 for (impl_hir_ty, trait_sem_ty) in impl_inputs_outputs.zip(trait_method_sig.inputs_and_output) {\n-                    if trait_sem_ty.walk().any(|inner| inner == self_ty.into()) {\n+                    if trait_sem_ty.walk(cx.tcx).any(|inner| inner == self_ty.into()) {\n                         let mut visitor = SkipTyCollector::default();\n                         visitor.visit_ty(impl_hir_ty);\n                         types_to_skip.extend(visitor.types_to_skip);"}, {"sha": "98f3937ba3ddba5f45fdb768c4e4c6e6ef3e3683", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -1627,15 +1627,15 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     if is_primitive {\n         // if we have wrappers like Array, Slice or Tuple, print these\n         // and get the type enclosed in the slice ref\n-        match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind() {\n+        match expr_type.peel_refs().walk(cx.tcx).nth(1).unwrap().expect_ty().kind() {\n             rustc_ty::Slice(..) => return Some(\"slice\".into()),\n             rustc_ty::Array(..) => return Some(\"array\".into()),\n             rustc_ty::Tuple(..) => return Some(\"tuple\".into()),\n             _ => {\n                 // is_recursively_primitive_type() should have taken care\n                 // of the rest and we can rely on the type that is found\n                 let refs_peeled = expr_type.peel_refs();\n-                return Some(refs_peeled.walk().last().unwrap().to_string());\n+                return Some(refs_peeled.walk(cx.tcx).last().unwrap().to_string());\n             },\n         }\n     }"}, {"sha": "e5bbf75c3b0a1857ed5b7c4580cb8e1d973ce587", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -88,7 +88,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&Ru\n }\n \n fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n-    for arg in ty.walk() {\n+    for arg in ty.walk(tcx) {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n "}, {"sha": "3cd8ed5aa2c8c50ef32a129d0879f5428883969f", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc47998e2877f13712a12b3814cc2bbf07fbae09/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=cc47998e2877f13712a12b3814cc2bbf07fbae09", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n+use rustc_middle::ty::{self, TyCtxt, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n use rustc_span::sym;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n@@ -36,17 +36,17 @@ pub fn can_partially_move_ty(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n-    ty.walk().any(|inner| match inner.unpack() {\n+pub fn contains_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n+    ty.walk(tcx).any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n-    ty.walk().any(|inner| match inner.unpack() {\n+pub fn contains_adt_constructor<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, adt: &'tcx AdtDef) -> bool {\n+    ty.walk(tcx).any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n@@ -209,7 +209,7 @@ fn is_normalizable_helper<'tcx>(\n                         .iter()\n                         .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n                 }),\n-                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n+                _ => ty.walk(cx.tcx).all(|generic_arg| match generic_arg.unpack() {\n                     GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n                         is_normalizable_helper(cx, param_env, inner_ty, cache)\n                     },"}]}