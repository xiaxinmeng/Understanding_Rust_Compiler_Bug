{"sha": "0b1ff27cd8968454771d419703873e3f98caf2eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMWZmMjdjZDg5Njg0NTQ3NzFkNDE5NzAzODczZTNmOThjYWYyZWI=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-07-14T01:33:02Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-01T22:10:58Z"}, "message": "Basic run-pass tests for or-patterns\n\nAdd some basic run-pass ui tests for or-patterns.", "tree": {"sha": "f10c3df1355d2b066b246a2898cf6dc70d21f83b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10c3df1355d2b066b246a2898cf6dc70d21f83b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1ff27cd8968454771d419703873e3f98caf2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ff27cd8968454771d419703873e3f98caf2eb", "html_url": "https://github.com/rust-lang/rust/commit/0b1ff27cd8968454771d419703873e3f98caf2eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ff27cd8968454771d419703873e3f98caf2eb/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30058df867fbe5c43f90707d6fb644fba6201c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/30058df867fbe5c43f90707d6fb644fba6201c2a", "html_url": "https://github.com/rust-lang/rust/commit/30058df867fbe5c43f90707d6fb644fba6201c2a"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "6daa9d9255b804a06e82be630a1e997bce771089", "filename": "src/test/ui/or-patterns/basic-switch.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs?ref=0b1ff27cd8968454771d419703873e3f98caf2eb", "patch": "@@ -0,0 +1,33 @@\n+// Test basic or-patterns when the target pattern type will be lowered to a\n+// `Switch` (an `enum`).\n+\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+#[derive(Debug)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(x: Option<Test>) -> bool {\n+    match x {\n+        // most simple case\n+        Some(Test::Bar | Test::Qux) => true,\n+        // wild case\n+        Some(_) => false,\n+        // empty case\n+        None => false,\n+    }\n+}\n+\n+fn main() {\n+    assert!(!test(Some(Test::Foo)));\n+    assert!(test(Some(Test::Bar)));\n+    assert!(!test(Some(Test::Baz)));\n+    assert!(test(Some(Test::Qux)));\n+    assert!(!test(None))\n+}"}, {"sha": "2ae5f2681655ab16e0a679d36bd0d40bf7b0e68c", "filename": "src/test/ui/or-patterns/basic-switchint.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs?ref=0b1ff27cd8968454771d419703873e3f98caf2eb", "patch": "@@ -0,0 +1,57 @@\n+// Test basic or-patterns when the target pattern type will be lowered to\n+// a `SwitchInt`. This will happen when the target type is an integer.\n+\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug)]\n+enum Foo {\n+    One(usize),\n+    Two(usize, usize),\n+}\n+\n+fn test_foo(x: Foo) -> MatchArm {\n+    match x {\n+        // normal pattern.\n+        Foo::One(0) | Foo::One(1) | Foo::One(2) => MatchArm::Arm(0),\n+        // most simple or-pattern.\n+        Foo::One(42 | 255) => MatchArm::Arm(1),\n+        // multiple or-patterns for one structure.\n+        Foo::Two(42 | 255, 1024 | 2048) => MatchArm::Arm(2),\n+        // mix of pattern types in one or-pattern (range).\n+        //\n+        // FIXME(dlrobertson | Nadrieril): Fix or-pattern completeness and\n+        // unreachabilitychecks for ranges.\n+        Foo::One(100 | 110..=120 | 210..=220) => MatchArm::Arm(3),\n+        // multiple or-patterns with wild.\n+        Foo::Two(0..=10 | 100..=110, 0 | _) => MatchArm::Arm(4),\n+        // wild\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    // `Foo` tests.\n+    assert_eq!(test_foo(Foo::One(0)), MatchArm::Arm(0));\n+    assert_eq!(test_foo(Foo::One(42)), MatchArm::Arm(1));\n+    assert_eq!(test_foo(Foo::One(43)), MatchArm::Wild);\n+    assert_eq!(test_foo(Foo::One(255)), MatchArm::Arm(1));\n+    assert_eq!(test_foo(Foo::One(256)), MatchArm::Wild);\n+    assert_eq!(test_foo(Foo::Two(42, 1023)), MatchArm::Wild);\n+    assert_eq!(test_foo(Foo::Two(255, 2048)), MatchArm::Arm(2));\n+    assert_eq!(test_foo(Foo::One(100)), MatchArm::Arm(3));\n+    assert_eq!(test_foo(Foo::One(115)), MatchArm::Arm(3));\n+    assert_eq!(test_foo(Foo::One(105)), MatchArm::Wild);\n+    assert_eq!(test_foo(Foo::One(215)), MatchArm::Arm(3));\n+    assert_eq!(test_foo(Foo::One(121)), MatchArm::Wild);\n+    assert_eq!(test_foo(Foo::Two(0, 42)), MatchArm::Arm(4));\n+    assert_eq!(test_foo(Foo::Two(100, 0)), MatchArm::Arm(4));\n+    assert_eq!(test_foo(Foo::Two(42, 0)), MatchArm::Wild);\n+}"}, {"sha": "37f20df1b312d38eb85e264ed882082f7f619f0d", "filename": "src/test/ui/or-patterns/mix-with-wild.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs?ref=0b1ff27cd8968454771d419703873e3f98caf2eb", "patch": "@@ -0,0 +1,19 @@\n+// Test that an or-pattern works with a wild pattern. This tests two things:\n+//\n+//  1) The Wild pattern should cause the pattern to always succeed.\n+//  2) or-patterns should work with simplifyable patterns.\n+\n+// run-pass\n+#![feature(or_patterns)]\n+\n+pub fn test(x: Option<usize>) -> bool {\n+    match x {\n+        Some(0 | _) => true,\n+        _ => false,\n+    }\n+}\n+\n+fn main() {\n+    assert!(test(Some(42)));\n+    assert!(!test(None));\n+}"}, {"sha": "3794a8b6c1510d085a4b02a42b411059b917bc58", "filename": "src/test/ui/or-patterns/struct-like.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ff27cd8968454771d419703873e3f98caf2eb/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs?ref=0b1ff27cd8968454771d419703873e3f98caf2eb", "patch": "@@ -0,0 +1,42 @@\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+#[derive(Debug)]\n+enum Other {\n+    One,\n+    Two,\n+    Three,\n+}\n+\n+#[derive(Debug)]\n+enum Test {\n+    Foo { first: usize, second: usize },\n+    Bar { other: Option<Other> },\n+    Baz,\n+}\n+\n+fn test(x: Option<Test>) -> bool {\n+    match x {\n+        Some(\n+            Test::Foo { first: 1024 | 2048, second: 2048 | 4096 }\n+            | Test::Bar { other: Some(Other::One | Other::Two) },\n+        ) => true,\n+        // wild case\n+        Some(_) => false,\n+        // empty case\n+        None => false,\n+    }\n+}\n+\n+fn main() {\n+    assert!(test(Some(Test::Foo { first: 1024, second: 4096 })));\n+    assert!(!test(Some(Test::Foo { first: 2048, second: 8192 })));\n+    assert!(!test(Some(Test::Foo { first: 42, second: 2048 })));\n+    assert!(test(Some(Test::Bar { other: Some(Other::One) })));\n+    assert!(test(Some(Test::Bar { other: Some(Other::Two) })));\n+    assert!(!test(Some(Test::Bar { other: Some(Other::Three) })));\n+    assert!(!test(Some(Test::Bar { other: None })));\n+    assert!(!test(Some(Test::Baz)));\n+    assert!(!test(None));\n+}"}]}