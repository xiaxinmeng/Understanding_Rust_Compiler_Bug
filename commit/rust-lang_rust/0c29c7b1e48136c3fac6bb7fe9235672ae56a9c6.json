{"sha": "0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjljN2IxZTQ4MTM2YzNmYWM2YmI3ZmU5MjM1NjcyYWU1NmE5YzY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-20T13:22:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-20T13:22:02Z"}, "message": "Rollup merge of #46851 - petrochenkov:tospace, r=estebank\n\nFix whitespacing issues in pretty-printing of bounds\n\ncc https://github.com/rust-lang/rust/pull/46827#discussion_r157603277", "tree": {"sha": "00c700afe754ad48b23aff2c6b82dfce5ee365dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c700afe754ad48b23aff2c6b82dfce5ee365dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "html_url": "https://github.com/rust-lang/rust/commit/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fdca077c9e4b629dbb44453804ca0e449f0e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fdca077c9e4b629dbb44453804ca0e449f0e56", "html_url": "https://github.com/rust-lang/rust/commit/99fdca077c9e4b629dbb44453804ca0e449f0e56"}, {"sha": "7a95e716c731d1e358eeb8bf9741852f1278b4f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a95e716c731d1e358eeb8bf9741852f1278b4f3", "html_url": "https://github.com/rust-lang/rust/commit/7a95e716c731d1e358eeb8bf9741852f1278b4f3"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "b2c2c96f6245a954ab84f365ac389eed023a29da", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -408,15 +408,16 @@ impl<'a> State<'a> {\n             hir::TyTraitObject(ref bounds, ref lifetime) => {\n                 let mut first = true;\n                 for bound in bounds {\n-                    self.nbsp()?;\n                     if first {\n                         first = false;\n                     } else {\n+                        self.nbsp()?;\n                         self.word_space(\"+\")?;\n                     }\n                     self.print_poly_trait_ref(bound)?;\n                 }\n                 if !lifetime.is_elided() {\n+                    self.nbsp()?;\n                     self.word_space(\"+\")?;\n                     self.print_lifetime(lifetime)?;\n                 }\n@@ -764,7 +765,8 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.nbsp()?;\n+                self.print_bounds(\"=\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\";\")?;\n             }\n@@ -788,6 +790,7 @@ impl<'a> State<'a> {\n                 comma = true;\n             }\n             self.s.word(\">\")?;\n+            self.nbsp()?;\n         }\n         Ok(())\n     }\n@@ -2016,30 +2019,29 @@ impl<'a> State<'a> {\n             self.s.word(prefix)?;\n             let mut first = true;\n             for bound in bounds {\n-                self.nbsp()?;\n+                if !(first && prefix.is_empty()) {\n+                    self.nbsp()?;\n+                }\n                 if first {\n                     first = false;\n                 } else {\n                     self.word_space(\"+\")?;\n                 }\n \n-                match *bound {\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::None) => {\n-                        self.print_poly_trait_ref(tref)\n-                    }\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::Maybe) => {\n-                        self.s.word(\"?\")?;\n-                        self.print_poly_trait_ref(tref)\n+                match bound {\n+                    TraitTyParamBound(tref, modifier) => {\n+                        if modifier == &TraitBoundModifier::Maybe {\n+                            self.s.word(\"?\")?;\n+                        }\n+                        self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(ref lt) => {\n-                        self.print_lifetime(lt)\n+                    RegionTyParamBound(lt) => {\n+                        self.print_lifetime(lt)?;\n                     }\n-                }?\n+                }\n             }\n-            Ok(())\n-        } else {\n-            Ok(())\n         }\n+        Ok(())\n     }\n \n     pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) -> io::Result<()> {"}, {"sha": "da4d5f5f676a632048639ee37c215512749559be", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -1066,11 +1066,11 @@ impl<'a> State<'a> {\n                 self.print_qpath(path, qself, false)?\n             }\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n-                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn \" } else { \"\" };\n+                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n                 self.print_bounds(prefix, &bounds[..])?;\n             }\n             ast::TyKind::ImplTrait(ref bounds) => {\n-                self.print_bounds(\"impl \", &bounds[..])?;\n+                self.print_bounds(\"impl\", &bounds[..])?;\n             }\n             ast::TyKind::Array(ref ty, ref v) => {\n                 self.s.word(\"[\")?;\n@@ -1398,7 +1398,8 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.nbsp()?;\n+                self.print_bounds(\"=\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\";\")?;\n             }\n@@ -1444,6 +1445,7 @@ impl<'a> State<'a> {\n                 comma = true;\n             }\n             self.s.word(\">\")?;\n+            self.nbsp()?;\n         }\n         Ok(())\n     }\n@@ -2818,30 +2820,29 @@ impl<'a> State<'a> {\n             self.s.word(prefix)?;\n             let mut first = true;\n             for bound in bounds {\n-                self.nbsp()?;\n+                if !(first && prefix.is_empty()) {\n+                    self.nbsp()?;\n+                }\n                 if first {\n                     first = false;\n                 } else {\n                     self.word_space(\"+\")?;\n                 }\n \n-                (match *bound {\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::None) => {\n-                        self.print_poly_trait_ref(tref)\n-                    }\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::Maybe) => {\n-                        self.s.word(\"?\")?;\n-                        self.print_poly_trait_ref(tref)\n+                match bound {\n+                    TraitTyParamBound(tref, modifier) => {\n+                        if modifier == &TraitBoundModifier::Maybe {\n+                            self.s.word(\"?\")?;\n+                        }\n+                        self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(ref lt) => {\n-                        self.print_lifetime(lt)\n+                    RegionTyParamBound(lt) => {\n+                        self.print_lifetime(lt)?;\n                     }\n-                })?\n+                }\n             }\n-            Ok(())\n-        } else {\n-            Ok(())\n         }\n+        Ok(())\n     }\n \n     pub fn print_lifetime(&mut self,"}, {"sha": "25e9c3071d654090d6c421664e4c3a391c6369be", "filename": "src/test/parse-fail/trait-object-bad-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -14,9 +14,9 @@ fn main() {\n     let _: Box<((Copy)) + Copy>;\n     //~^ ERROR expected a path on the left-hand side of `+`, not `((Copy))`\n     let _: Box<(Copy + Copy) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy + Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(Copy + Copy)`\n     let _: Box<(Copy +) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(Copy)`\n     let _: Box<(dyn Copy) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `(dyn  Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(dyn Copy)`\n }"}, {"sha": "b5fc06ddaac05b7b8713f0261d100afad681eaa1", "filename": "src/test/parse-fail/trait-object-polytrait-priority.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -12,7 +12,7 @@ trait Trait<'a> {}\n \n fn main() {\n     let _: &for<'a> Trait<'a> + 'static;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `& for<'a>Trait<'a>`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `&for<'a> Trait<'a>`\n     //~| HELP try adding parentheses\n-    //~| SUGGESTION &( for<'a>Trait<'a> + 'static)\n+    //~| SUGGESTION &(for<'a> Trait<'a> + 'static)\n }"}, {"sha": "a1fdebf6fa1c0347602d506b48c42dd95df11a0f", "filename": "src/test/pretty/closure-reform-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -17,7 +17,7 @@ fn call_it(f: Box<FnMut(String) -> String>) { }\n \n fn call_this<F>(f: F) where F: Fn(&str) + Send { }\n \n-fn call_that<F>(f: F) where F: for<'a>Fn(&'a isize, &'a isize) -> isize { }\n+fn call_that<F>(f: F) where F: for<'a> Fn(&'a isize, &'a isize) -> isize { }\n \n fn call_extern(f: fn() -> isize) { }\n "}, {"sha": "ae6a0fc314226327a6347e0a757ca7d025200c80", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=0c29c7b1e48136c3fac6bb7fe9235672ae56a9c6", "patch": "@@ -16,10 +16,10 @@ trait Tr {\n }\n impl Tr for isize { }\n \n-fn foo<'a>(x: Box< Tr + Sync + 'a>) -> Box< Tr + Sync + 'a> { x }\n+fn foo<'a>(x: Box<Tr + Sync + 'a>) -> Box<Tr + Sync + 'a> { x }\n \n fn main() {\n-    let x: Box< Tr + Sync>;\n+    let x: Box<Tr + Sync>;\n \n-    Box::new(1isize) as Box< Tr + Sync>;\n+    Box::new(1isize) as Box<Tr + Sync>;\n }"}]}