{"sha": "eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzBjZThhY2I2NjE3ZmJlNjE4MmEzYjViOTA3OGRlYTQwMjdhOTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T07:34:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Move relocation methods from `Memory` to `Allocation`", "tree": {"sha": "b97ddad65081d7e328c6b3da8ffd608097dbe9e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97ddad65081d7e328c6b3da8ffd608097dbe9e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "html_url": "https://github.com/rust-lang/rust/commit/eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb30ce8acb6617fbe6182a3b5b9078dea4027a90/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40a7713d3f044dc6f590acfc55f74f44f8295e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40a7713d3f044dc6f590acfc55f74f44f8295e8", "html_url": "https://github.com/rust-lang/rust/commit/d40a7713d3f044dc6f590acfc55f74f44f8295e8"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "2334ca2f91a9a956f7e78549b5f242ef1af7fe70", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/eb30ce8acb6617fbe6182a3b5b9078dea4027a90/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb30ce8acb6617fbe6182a3b5b9078dea4027a90/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "patch": "@@ -133,6 +133,79 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     }\n }\n \n+/// Relocations\n+impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n+    /// Return all relocations overlapping with the given ptr-offset pair.\n+    fn relocations(\n+        &self,\n+        ptr: Pointer<M::PointerTag>,\n+        size: Size,\n+    ) -> EvalResult<'tcx, &[(Size, (M::PointerTag, AllocId))]> {\n+        // We have to go back `pointer_size - 1` bytes, as that one would still overlap with\n+        // the beginning of this range.\n+        let start = ptr.offset.bytes().saturating_sub(self.pointer_size().bytes() - 1);\n+        let end = ptr.offset + size; // this does overflow checking\n+        Ok(self.get(ptr.alloc_id)?.relocations.range(Size::from_bytes(start)..end))\n+    }\n+\n+    /// Check that there ar eno relocations overlapping with the given range.\n+    #[inline(always)]\n+    fn check_relocations(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n+        if self.relocations(ptr, size)?.len() != 0 {\n+            err!(ReadPointerAsBytes)\n+        } else {\n+            Ok(())\n+        }\n+    }\n+\n+    /// Remove all relocations inside the given range.\n+    /// If there are relocations overlapping with the edges, they\n+    /// are removed as well *and* the bytes they cover are marked as\n+    /// uninitialized.  This is a somewhat odd \"spooky action at a distance\",\n+    /// but it allows strictly more code to run than if we would just error\n+    /// immediately in that case.\n+    fn clear_relocations(&mut self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n+        // Find the start and end of the given range and its outermost relocations.\n+        let (first, last) = {\n+            // Find all relocations overlapping the given range.\n+            let relocations = self.relocations(ptr, size)?;\n+            if relocations.is_empty() {\n+                return Ok(());\n+            }\n+\n+            (relocations.first().unwrap().0,\n+             relocations.last().unwrap().0 + self.pointer_size())\n+        };\n+        let start = ptr.offset;\n+        let end = start + size;\n+\n+        let alloc = self.get_mut(ptr.alloc_id)?;\n+\n+        // Mark parts of the outermost relocations as undefined if they partially fall outside the\n+        // given range.\n+        if first < start {\n+            alloc.undef_mask.set_range(first, start, false);\n+        }\n+        if last > end {\n+            alloc.undef_mask.set_range(end, last, false);\n+        }\n+\n+        // Forget all the relocations.\n+        alloc.relocations.remove_range(first..last);\n+\n+        Ok(())\n+    }\n+\n+    /// Error if there are relocations overlapping with the edges of the\n+    /// given memory range.\n+    #[inline]\n+    fn check_relocation_edges(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n+        self.check_relocations(ptr, Size::ZERO)?;\n+        self.check_relocations(ptr.offset(size, self)?, Size::ZERO)?;\n+        Ok(())\n+    }\n+}\n+\n pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Default + Clone {\n     /// Hook for performing extra checks on a memory read access.\n     ///"}, {"sha": "cb52e595e02be9625c2ba2e657257936453a54b7", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/eb30ce8acb6617fbe6182a3b5b9078dea4027a90/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb30ce8acb6617fbe6182a3b5b9078dea4027a90/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "patch": "@@ -955,79 +955,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n }\n \n-/// Relocations\n-impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n-    /// Return all relocations overlapping with the given ptr-offset pair.\n-    fn relocations(\n-        &self,\n-        ptr: Pointer<M::PointerTag>,\n-        size: Size,\n-    ) -> EvalResult<'tcx, &[(Size, (M::PointerTag, AllocId))]> {\n-        // We have to go back `pointer_size - 1` bytes, as that one would still overlap with\n-        // the beginning of this range.\n-        let start = ptr.offset.bytes().saturating_sub(self.pointer_size().bytes() - 1);\n-        let end = ptr.offset + size; // this does overflow checking\n-        Ok(self.get(ptr.alloc_id)?.relocations.range(Size::from_bytes(start)..end))\n-    }\n-\n-    /// Check that there ar eno relocations overlapping with the given range.\n-    #[inline(always)]\n-    fn check_relocations(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n-        if self.relocations(ptr, size)?.len() != 0 {\n-            err!(ReadPointerAsBytes)\n-        } else {\n-            Ok(())\n-        }\n-    }\n-\n-    /// Remove all relocations inside the given range.\n-    /// If there are relocations overlapping with the edges, they\n-    /// are removed as well *and* the bytes they cover are marked as\n-    /// uninitialized.  This is a somewhat odd \"spooky action at a distance\",\n-    /// but it allows strictly more code to run than if we would just error\n-    /// immediately in that case.\n-    fn clear_relocations(&mut self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n-        // Find the start and end of the given range and its outermost relocations.\n-        let (first, last) = {\n-            // Find all relocations overlapping the given range.\n-            let relocations = self.relocations(ptr, size)?;\n-            if relocations.is_empty() {\n-                return Ok(());\n-            }\n-\n-            (relocations.first().unwrap().0,\n-             relocations.last().unwrap().0 + self.pointer_size())\n-        };\n-        let start = ptr.offset;\n-        let end = start + size;\n-\n-        let alloc = self.get_mut(ptr.alloc_id)?;\n-\n-        // Mark parts of the outermost relocations as undefined if they partially fall outside the\n-        // given range.\n-        if first < start {\n-            alloc.undef_mask.set_range(first, start, false);\n-        }\n-        if last > end {\n-            alloc.undef_mask.set_range(end, last, false);\n-        }\n-\n-        // Forget all the relocations.\n-        alloc.relocations.remove_range(first..last);\n-\n-        Ok(())\n-    }\n-\n-    /// Error if there are relocations overlapping with the edges of the\n-    /// given memory range.\n-    #[inline]\n-    fn check_relocation_edges(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n-        self.check_relocations(ptr, Size::ZERO)?;\n-        self.check_relocations(ptr.offset(size, self)?, Size::ZERO)?;\n-        Ok(())\n-    }\n-}\n-\n /// Undefined bytes\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     // FIXME: Add a fast version for the common, nonoverlapping case"}]}