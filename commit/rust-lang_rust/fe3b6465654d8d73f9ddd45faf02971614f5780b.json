{"sha": "fe3b6465654d8d73f9ddd45faf02971614f5780b", "node_id": "C_kwDOAAsO6NoAKGZlM2I2NDY1NjU0ZDhkNzNmOWRkZDQ1ZmFmMDI5NzE2MTRmNTc4MGI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-05T06:05:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-07T00:27:00Z"}, "message": "Merge the two loops in `internalize_symbols`.\n\nBecause they have a lot of overlap.", "tree": {"sha": "35fa3a721d8f3a31905f4f9c2cd058377c4325f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35fa3a721d8f3a31905f4f9c2cd058377c4325f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe3b6465654d8d73f9ddd45faf02971614f5780b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3b6465654d8d73f9ddd45faf02971614f5780b", "html_url": "https://github.com/rust-lang/rust/commit/fe3b6465654d8d73f9ddd45faf02971614f5780b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe3b6465654d8d73f9ddd45faf02971614f5780b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392045b7e70cc68290851451994d4ea135ec3f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/392045b7e70cc68290851451994d4ea135ec3f0a", "html_url": "https://github.com/rust-lang/rust/commit/392045b7e70cc68290851451994d4ea135ec3f0a"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "c88df1b0b60f35b2ed761ed23bd9a8c59fef8dfe", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fe3b6465654d8d73f9ddd45faf02971614f5780b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3b6465654d8d73f9ddd45faf02971614f5780b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=fe3b6465654d8d73f9ddd45faf02971614f5780b", "patch": "@@ -486,21 +486,7 @@ fn internalize_symbols<'tcx>(\n     mono_item_placements: FxHashMap<MonoItem<'tcx>, MonoItemPlacement>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n ) {\n-    if codegen_units.len() == 1 {\n-        // Fast path for when there is only one codegen unit. In this case we\n-        // can internalize all candidates, since there is nowhere else they\n-        // could be used from.\n-        for cgu in codegen_units {\n-            for (item, linkage_and_visibility) in cgu.items_mut() {\n-                if !internalization_candidates.contains(item) {\n-                    // This item is no candidate for internalizing, so skip it.\n-                    continue;\n-                }\n-                *linkage_and_visibility = (Linkage::Internal, Visibility::Default);\n-            }\n-        }\n-        return;\n-    }\n+    let single_codegen_unit = codegen_units.len() == 1;\n \n     // For each internalization candidates in each codegen unit, check if it is\n     // used from outside its defining codegen unit.\n@@ -512,21 +498,24 @@ fn internalize_symbols<'tcx>(\n                 // This item is no candidate for internalizing, so skip it.\n                 continue;\n             }\n-            debug_assert_eq!(mono_item_placements[item], home_cgu);\n-\n-            if let Some(user_items) = cx.usage_map.get_user_items(*item) {\n-                if user_items\n-                    .iter()\n-                    .filter_map(|user_item| {\n-                        // Some user mono items might not have been\n-                        // instantiated. We can safely ignore those.\n-                        mono_item_placements.get(user_item)\n-                    })\n-                    .any(|placement| *placement != home_cgu)\n-                {\n-                    // Found a user from another CGU, so skip to the next item\n-                    // without marking this one as internal.\n-                    continue;\n+\n+            if !single_codegen_unit {\n+                debug_assert_eq!(mono_item_placements[item], home_cgu);\n+\n+                if let Some(user_items) = cx.usage_map.get_user_items(*item) {\n+                    if user_items\n+                        .iter()\n+                        .filter_map(|user_item| {\n+                            // Some user mono items might not have been\n+                            // instantiated. We can safely ignore those.\n+                            mono_item_placements.get(user_item)\n+                        })\n+                        .any(|placement| *placement != home_cgu)\n+                    {\n+                        // Found a user from another CGU, so skip to the next item\n+                        // without marking this one as internal.\n+                        continue;\n+                    }\n                 }\n             }\n "}]}