{"sha": "73023c0299d4adeada026648c3684621f129e038", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMDIzYzAyOTlkNGFkZWFkYTAyNjY0OGMzNjg0NjIxZjEyOWUwMzg=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-12T12:44:01Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-13T04:22:46Z"}, "message": "Support length for ByteStrings\n\nI am not confident that my added byte string parsing is right.", "tree": {"sha": "302ca449ae51a546d808d93037134af9c470d6b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302ca449ae51a546d808d93037134af9c470d6b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73023c0299d4adeada026648c3684621f129e038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73023c0299d4adeada026648c3684621f129e038", "html_url": "https://github.com/rust-lang/rust/commit/73023c0299d4adeada026648c3684621f129e038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73023c0299d4adeada026648c3684621f129e038/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b147624ff906a11134d2e18be071c6cb8ec4beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b147624ff906a11134d2e18be071c6cb8ec4beb", "html_url": "https://github.com/rust-lang/rust/commit/8b147624ff906a11134d2e18be071c6cb8ec4beb"}], "stats": {"total": 118, "additions": 85, "deletions": 33}, "files": [{"sha": "b00dcbdf0400eedff4f162ef41ff6c9afeedf569", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -1022,7 +1022,10 @@ impl From<ast::LiteralKind> for Literal {\n                 let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(&it));\n                 Literal::Float(Default::default(), ty)\n             }\n-            LiteralKind::ByteString(_) => Literal::ByteString(Default::default()),\n+            LiteralKind::ByteString(bs) => {\n+                let text = bs.value().map(Vec::from).unwrap_or_else(Default::default);\n+                Literal::ByteString(text)\n+            }\n             LiteralKind::String(_) => Literal::String(Default::default()),\n             LiteralKind::Byte => Literal::Uint(Default::default(), Some(BuiltinUint::U8)),\n             LiteralKind::Bool(val) => Literal::Bool(val),"}, {"sha": "46e4777a40a23452b7d451b80ddd1da9d307059f", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -16,16 +16,17 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef, dummy_usize_const,\n+    autoderef,\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n     utils::{generics, Generics},\n-    AdtId, Binders, CallableDefId, ConstValue, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n-    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n+    AdtId, Binders, CallableDefId, ConcreteConst, ConstValue, FnPointer, FnSig, FnSubst,\n+    InEnvironment, Interner, ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty,\n+    TyBuilder, TyExt, TyKind,\n };\n \n use super::{\n@@ -758,11 +759,18 @@ impl<'a> InferenceContext<'a> {\n                     TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(&Interner))\n                         .intern(&Interner)\n                 }\n-                Literal::ByteString(..) => {\n+                Literal::ByteString(bs) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n \n-                    let array_type =\n-                        TyKind::Array(byte_type, dummy_usize_const()).intern(&Interner);\n+                    let len = ConstData {\n+                        ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n+                        value: ConstValue::Concrete(ConcreteConst {\n+                            interned: ConstScalar::Usize(bs.len() as u64),\n+                        }),\n+                    }\n+                    .intern(&Interner);\n+\n+                    let array_type = TyKind::Array(byte_type, len).intern(&Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),"}, {"sha": "79445a12d9e75468f08ebfe94a345078432f5682", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -496,15 +496,15 @@ fn infer_literals() {\n             26..30 '5f32': f32\n             36..40 '5f64': f64\n             46..53 '\"hello\"': &str\n-            59..67 'b\"bytes\"': &[u8; _]\n+            59..67 'b\"bytes\"': &[u8; 5]\n             73..76 ''c'': char\n             82..86 'b'b'': u8\n             92..96 '3.14': f64\n             102..106 '5000': i32\n             112..117 'false': bool\n             123..127 'true': bool\n             133..197 'r#\"   ...    \"#': &str\n-            203..213 'br#\"yolo\"#': &[u8; _]\n+            203..213 'br#\"yolo\"#': &[u8; 4]\n         \"##]],\n     );\n }"}, {"sha": "c67ccd1a9f7e9731dae814878da28abae7799381", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -4,7 +4,7 @@ use ide_assists::utils::extract_trivial_expression;\n use itertools::Itertools;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstNode, AstToken, IsString},\n     Direction, NodeOrToken, SourceFile,\n     SyntaxKind::{self, USE_TREE, WHITESPACE},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,"}, {"sha": "4269d339ebfdcc6ed7a33d06c59cedbf34beeabb", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -6,7 +6,7 @@ use either::Either;\n use hir::{InFile, Semantics};\n use ide_db::{call_info::ActiveParameter, helpers::rust_doc::is_rust_fence, SymbolKind};\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, IsString},\n     AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n "}, {"sha": "d98a55ae4abf6a3ddf80377c1eea91418946c974", "filename": "crates/ide_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n \n-use syntax::{ast, AstToken, TextRange, TextSize};\n+use syntax::{ast, ast::IsString, AstToken, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "0800d291e44ab2ca31a8fcec7dfd536b56fce930", "filename": "crates/ide_assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -1,4 +1,4 @@\n-use syntax::{ast, AstToken, SyntaxKind::STRING};\n+use syntax::{ast, ast::IsString, AstToken, SyntaxKind::STRING};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "4b1e1ccee29cd7e0a5158b39d99e11f26effe484", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/73023c0299d4adeada026648c3684621f129e038/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73023c0299d4adeada026648c3684621f129e038/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=73023c0299d4adeada026648c3684621f129e038", "patch": "@@ -143,6 +143,30 @@ impl QuoteOffsets {\n     }\n }\n \n+pub trait IsString: AstToken {\n+    fn quote_offsets(&self) -> Option<QuoteOffsets> {\n+        let text = self.text();\n+        let offsets = QuoteOffsets::new(text)?;\n+        let o = self.syntax().text_range().start();\n+        let offsets = QuoteOffsets {\n+            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n+            contents: offsets.contents + o,\n+        };\n+        Some(offsets)\n+    }\n+    fn text_range_between_quotes(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.contents)\n+    }\n+    fn open_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.0)\n+    }\n+    fn close_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.1)\n+    }\n+}\n+\n+impl IsString for ast::String {}\n+\n impl ast::String {\n     pub fn is_raw(&self) -> bool {\n         self.text().starts_with('r')\n@@ -187,32 +211,49 @@ impl ast::String {\n             (false, false) => Some(Cow::Owned(buf)),\n         }\n     }\n-\n-    pub fn quote_offsets(&self) -> Option<QuoteOffsets> {\n-        let text = self.text();\n-        let offsets = QuoteOffsets::new(text)?;\n-        let o = self.syntax().text_range().start();\n-        let offsets = QuoteOffsets {\n-            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n-            contents: offsets.contents + o,\n-        };\n-        Some(offsets)\n-    }\n-    pub fn text_range_between_quotes(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.contents)\n-    }\n-    pub fn open_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.0)\n-    }\n-    pub fn close_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.1)\n-    }\n }\n \n+impl IsString for ast::ByteString {}\n+\n impl ast::ByteString {\n     pub fn is_raw(&self) -> bool {\n         self.text().starts_with(\"br\")\n     }\n+\n+    pub fn value(&self) -> Option<Cow<'_, [u8]>> {\n+        if self.is_raw() {\n+            let text = self.text();\n+            let text =\n+                &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+            return Some(Cow::Borrowed(text.as_bytes()));\n+        }\n+\n+        let text = self.text();\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+\n+        let mut buf: Vec<u8> = Vec::new();\n+        let mut text_iter = text.chars();\n+        let mut has_error = false;\n+        unescape_literal(text, Mode::ByteStr, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c as u8),\n+            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.extend_from_slice(&text[..char_range.start].as_bytes());\n+                buf.push(c as u8);\n+            }\n+            (Err(_), _) => has_error = true,\n+        });\n+\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text.as_bytes())),\n+            (false, false) => Some(Cow::Owned(buf)),\n+        }\n+    }\n }\n \n #[derive(Debug)]"}]}