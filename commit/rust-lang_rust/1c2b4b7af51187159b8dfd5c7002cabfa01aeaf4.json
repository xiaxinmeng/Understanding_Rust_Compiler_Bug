{"sha": "1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4", "node_id": "C_kwDOAAsO6NoAKDFjMmI0YjdhZjUxMTg3MTU5YjhkZmQ1YzcwMDJjYWJmYTAxYWVhZjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-04T23:53:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-04T23:53:34Z"}, "message": "Rollup merge of #95630 - declanvk:update-nonnull-doc, r=RalfJung\n\nUpdate `NonNull` pointer provenance methods' documentation\n\n - Add links to equivalent methods on raw pointers", "tree": {"sha": "d095e82881f7a22bc5488f8451192b358626f251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d095e82881f7a22bc5488f8451192b358626f251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiS4T+CRBK7hj4Ov3rIwAAd7wIACYGp9Vr9GM4onfeLBV+LQ5j\n+WcC0NLkvNRMuxpv6IXjBv6FcOJqOEK42AStaam5fEHoX+7q80Q5JC56I73w2Eop\nsfDJMezN9dF1EgWBa3pQp+IKNqZatad9VjGrhXOClPnEjqiUufgI4/KksoIWPArS\nYVxkh45moqF57/Q6kuErqSzCYXvVfZa6Id20zpF8NZ1j5fJv0mIx9UzjmyO+td3S\ntBgg8y62GkIk48mKV+WeKUWRd/kfac49WyCHmfbnah/9OdzwBIj1XQJb7YOQDcHz\nlkbYZr7t95g6xCebOmVgEBy3X2QeQF8G6c/q25Yxy/oDv/GlxGvPseErKZdXDgQ=\n=Vov/\n-----END PGP SIGNATURE-----\n", "payload": "tree d095e82881f7a22bc5488f8451192b358626f251\nparent 78f81f0d10484f244b99361db359ba8a6a17e79b\nparent 637592d8c3d07aeb2a204402fe250c6a763aa452\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649116414 +0200\ncommitter GitHub <noreply@github.com> 1649116414 +0200\n\nRollup merge of #95630 - declanvk:update-nonnull-doc, r=RalfJung\n\nUpdate `NonNull` pointer provenance methods' documentation\n\n - Add links to equivalent methods on raw pointers\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4", "html_url": "https://github.com/rust-lang/rust/commit/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f81f0d10484f244b99361db359ba8a6a17e79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f81f0d10484f244b99361db359ba8a6a17e79b", "html_url": "https://github.com/rust-lang/rust/commit/78f81f0d10484f244b99361db359ba8a6a17e79b"}, {"sha": "637592d8c3d07aeb2a204402fe250c6a763aa452", "url": "https://api.github.com/repos/rust-lang/rust/commits/637592d8c3d07aeb2a204402fe250c6a763aa452", "html_url": "https://github.com/rust-lang/rust/commit/637592d8c3d07aeb2a204402fe250c6a763aa452"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "6f402924e75dfadec1cb0bb3acdf2ff0e8c40e6c", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=1c2b4b7af51187159b8dfd5c7002cabfa01aeaf4", "patch": "@@ -256,8 +256,10 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Gets the \"address\" portion of the pointer.\n     ///\n+    /// For more details see the equivalent method on a raw pointer, [`pointer::addr`].\n+    ///\n     /// This API and its claimed semantics are part of the Strict Provenance experiment,\n-    /// see the [module documentation][crate::ptr] for details.\n+    /// see the [`ptr` module documentation][crate::ptr].\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n@@ -272,8 +274,10 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Creates a new pointer with the given address.\n     ///\n+    /// For more details see the equivalent method on a raw pointer, [`pointer::with_addr`].\n+    ///\n     /// This API and its claimed semantics are part of the Strict Provenance experiment,\n-    /// see the [module documentation][crate::ptr] for details.\n+    /// see the [`ptr` module documentation][crate::ptr].\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n@@ -287,10 +291,10 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Creates a new pointer by mapping `self`'s address to a new one.\n     ///\n-    /// This is a convenience for [`with_addr`][Self::with_addr], see that method for details.\n+    /// For more details see the equivalent method on a raw pointer, [`pointer::map_addr`].\n     ///\n     /// This API and its claimed semantics are part of the Strict Provenance experiment,\n-    /// see the [module documentation][crate::ptr] for details.\n+    /// see the [`ptr` module documentation][crate::ptr].\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]"}]}