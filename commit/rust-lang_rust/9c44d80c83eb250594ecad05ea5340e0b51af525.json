{"sha": "9c44d80c83eb250594ecad05ea5340e0b51af525", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDRkODBjODNlYjI1MDU5NGVjYWQwNWVhNTM0MGUwYjUxYWY1MjU=", "commit": {"author": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2021-08-11T18:38:20Z"}, "committer": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2021-08-23T05:00:34Z"}, "message": "add Cell::as_array_of_cells, similar to Cell::as_slice_of_cells\n\nPreviously, converting `&mut [T; N]` to `&[Cell<T>; N]` looks like this:\n\n    let array = &mut [1, 2, 3];\n    let cells: &[Cell<i32>; 3] = Cell::from_mut(&mut array[..])\n        .as_slice_of_cells()\n        .try_into()\n        .unwrap();\n\nWith this new helper method, it looks like this:\n\n    let array = &mut [1, 2, 3];\n    let cells: &[Cell<i32>; 3] = Cell::from_mut(array).as_array_of_cells();", "tree": {"sha": "7a133a4ec3ba30f84d6613854fe59b1f496f579c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a133a4ec3ba30f84d6613854fe59b1f496f579c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c44d80c83eb250594ecad05ea5340e0b51af525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c44d80c83eb250594ecad05ea5340e0b51af525", "html_url": "https://github.com/rust-lang/rust/commit/9c44d80c83eb250594ecad05ea5340e0b51af525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c44d80c83eb250594ecad05ea5340e0b51af525/comments", "author": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558553272d5f80ca6484ed3de961fe4f1a9d411d", "url": "https://api.github.com/repos/rust-lang/rust/commits/558553272d5f80ca6484ed3de961fe4f1a9d411d", "html_url": "https://github.com/rust-lang/rust/commit/558553272d5f80ca6484ed3de961fe4f1a9d411d"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "85b43f48847608a4708b2464ce71ba5d4c3d66ac", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c44d80c83eb250594ecad05ea5340e0b51af525/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c44d80c83eb250594ecad05ea5340e0b51af525/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9c44d80c83eb250594ecad05ea5340e0b51af525", "patch": "@@ -576,6 +576,26 @@ impl<T> Cell<[T]> {\n     }\n }\n \n+impl<T, const N: usize> Cell<[T; N]> {\n+    /// Returns a `&[Cell<T>; N]` from a `&Cell<[T; N]>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_array_of_cells)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut array: [i32; 3] = [1, 2, 3];\n+    /// let cell_array: &Cell<[i32; 3]> = Cell::from_mut(&mut array);\n+    /// let array_cell: &[Cell<i32>; 3] = cell_array.as_array_of_cells();\n+    /// ```\n+    #[unstable(feature = \"as_array_of_cells\", issue = \"88248\")]\n+    pub fn as_array_of_cells(&self) -> &[Cell<T>; N] {\n+        // SAFETY: `Cell<T>` has the same memory layout as `T`.\n+        unsafe { &*(self as *const Cell<[T; N]> as *const [Cell<T>; N]) }\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](self) for more."}, {"sha": "329fadb150fcd9586e5f39e60e5f34e881ced254", "filename": "src/test/ui/rfcs/rfc-1789-as-cell/from-mut.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c44d80c83eb250594ecad05ea5340e0b51af525/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c44d80c83eb250594ecad05ea5340e0b51af525/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs?ref=9c44d80c83eb250594ecad05ea5340e0b51af525", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![feature(as_array_of_cells)]\n+\n use std::cell::Cell;\n \n fn main() {\n@@ -8,4 +10,11 @@ fn main() {\n     let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n \n     assert_eq!(slice_cell.len(), 3);\n+\n+    let mut array: [i32; 3] = [1, 2, 3];\n+    let cell_array: &Cell<[i32; 3]> = Cell::from_mut(&mut array);\n+    let array_cell: &[Cell<i32>; 3] = cell_array.as_array_of_cells();\n+\n+    array_cell[0].set(99);\n+    assert_eq!(array, [99, 2, 3]);\n }"}]}