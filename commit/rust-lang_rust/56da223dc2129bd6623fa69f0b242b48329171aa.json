{"sha": "56da223dc2129bd6623fa69f0b242b48329171aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZGEyMjNkYzIxMjliZDY2MjNmYTY5ZjBiMjQyYjQ4MzI5MTcxYWE=", "commit": {"author": {"name": "Jonathan Behrens", "email": "behrensj@mit.edu", "date": "2017-03-30T23:16:06Z"}, "committer": {"name": "Jonathan Behrens", "email": "behrensj@mit.edu", "date": "2017-03-30T23:35:58Z"}, "message": "--file_lines argument now supports \"stdin\"", "tree": {"sha": "7c07b40416d6304318c745c7f21bd7b66ad2ad1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c07b40416d6304318c745c7f21bd7b66ad2ad1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56da223dc2129bd6623fa69f0b242b48329171aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56da223dc2129bd6623fa69f0b242b48329171aa", "html_url": "https://github.com/rust-lang/rust/commit/56da223dc2129bd6623fa69f0b242b48329171aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56da223dc2129bd6623fa69f0b242b48329171aa/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f0402bac2464910b261d08de54e37a0dce5601", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f0402bac2464910b261d08de54e37a0dce5601", "html_url": "https://github.com/rust-lang/rust/commit/36f0402bac2464910b261d08de54e37a0dce5601"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "0b30a7f87982c3ac2ea922711841ae3ecff45fd1", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56da223dc2129bd6623fa69f0b242b48329171aa/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56da223dc2129bd6623fa69f0b242b48329171aa/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=56da223dc2129bd6623fa69f0b242b48329171aa", "patch": "@@ -217,17 +217,16 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n \n+            // parse file_lines\n+            if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+                config.file_lines = try!(file_lines.parse());\n+            }\n+\n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format {\n-            mut files,\n-            config_path,\n-        } => {\n+        Operation::Format { files, config_path } => {\n             let options = try!(CliOptions::from_matches(&matches));\n \n-            // Add any additional files that were specified via `--file-lines`.\n-            files.extend(options.file_lines.files().cloned().map(PathBuf::from));\n-\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -345,9 +344,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n                       Some(dir)\n                   });\n \n-    // if no file argument is supplied and `--file-lines` is not specified, read from stdin\n-    if matches.free.is_empty() && !matches.opt_present(\"file-lines\") {\n-\n+    // if no file argument is supplied, read from stdin\n+    if matches.free.is_empty() {\n         let mut buffer = String::new();\n         try!(io::stdin().read_to_string(&mut buffer));\n \n@@ -357,7 +355,6 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n                   });\n     }\n \n-    // We append files from `--file-lines` later in `execute()`.\n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n     Ok(Operation::Format {"}, {"sha": "e68751eb887592d632307bff1d1ff1d05913e6f9", "filename": "src/file_lines.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56da223dc2129bd6623fa69f0b242b48329171aa/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56da223dc2129bd6623fa69f0b242b48329171aa/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=56da223dc2129bd6623fa69f0b242b48329171aa", "patch": "@@ -162,6 +162,10 @@ impl<'a> iter::Iterator for Files<'a> {\n }\n \n fn canonicalize_path_string(s: &str) -> Result<String, ()> {\n+    if s == \"stdin\" {\n+        return Ok(s.to_string());\n+    }\n+\n     match path::PathBuf::from(s).canonicalize() {\n         Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()).ok_or(()),\n         _ => Err(()),"}]}