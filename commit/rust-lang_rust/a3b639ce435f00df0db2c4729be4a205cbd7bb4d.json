{"sha": "a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "node_id": "C_kwDOAAsO6NoAKGEzYjYzOWNlNDM1ZjAwZGYwZGIyYzQ3MjliZTRhMjA1Y2JkN2JiNGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-02T16:12:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T16:12:45Z"}, "message": "Rollup merge of #111647 - klensy:cstr, r=oli-obk\n\nuse c literals in compiler and library\n\nUse c literals #108801 in compiler and library\n\ncurrently blocked on:\n* <strike>rustfmt: don't know how to format c literals</strike> nope, nightly one works.\n* <strike>bootstrap</strike>\n\nr? `@ghost`\n`@rustbot` blocked", "tree": {"sha": "247700fbcd3b1680ce35b5ae84418805899a9ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247700fbcd3b1680ce35b5ae84418805899a9ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkehT9CRBK7hj4Ov3rIwAAMxgIACE9ODyw+YQRDjrQZhAuxPjQ\n2iuFdqOrMTfts4twsLoR+OV3Uv+jtrShRtBh8LpW9VMwnRVBvYedp8bwYVIW/pBw\nd4L2qtBPs3aTiSHa5AQXbIUFa849A8KmpiOVJ9OvnJkbn92jwJn4lnh9yvOP/eHf\n6Lur5W+Gm0O9jk2dV9TanSoiHyEEYtGnzYx8QN9dlQrn4Bdxr2PHE11mz2tInZi8\nBN4SFSE77oWg1+snAeNuah4V6NuuY8MVOHI4FT+5XipUFaACDXO7uhAmwKVxCaRB\nENIoGbEPvUCiimoUAyDToWpg7+6LE0vLPRwETq/QIWo3as9yiq6X6aFKXijZNvs=\n=g/uj\n-----END PGP SIGNATURE-----\n", "payload": "tree 247700fbcd3b1680ce35b5ae84418805899a9ccf\nparent 0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5\nparent 2f459f7f140307b5abbb7ea81440ed1843b490e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685722365 +0200\ncommitter GitHub <noreply@github.com> 1685722365 +0200\n\nRollup merge of #111647 - klensy:cstr, r=oli-obk\n\nuse c literals in compiler and library\n\nUse c literals #108801 in compiler and library\n\ncurrently blocked on:\n* <strike>rustfmt: don't know how to format c literals</strike> nope, nightly one works.\n* <strike>bootstrap</strike>\n\nr? `@ghost`\n`@rustbot` blocked\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "html_url": "https://github.com/rust-lang/rust/commit/a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "html_url": "https://github.com/rust-lang/rust/commit/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5"}, {"sha": "2f459f7f140307b5abbb7ea81440ed1843b490e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f459f7f140307b5abbb7ea81440ed1843b490e7", "html_url": "https://github.com/rust-lang/rust/commit/2f459f7f140307b5abbb7ea81440ed1843b490e7"}], "stats": {"total": 172, "additions": 74, "deletions": 98}, "files": [{"sha": "30d1fe51af57ceb957ef9103ad156cfb0704d401", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -871,16 +871,6 @@ dependencies = [\n  \"typenum\",\n ]\n \n-[[package]]\n-name = \"cstr\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n-]\n-\n [[package]]\n name = \"ctrlc\"\n version = \"3.3.1\"\n@@ -3179,7 +3169,6 @@ name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"cstr\",\n  \"libc\",\n  \"measureme\",\n  \"object 0.31.1\","}, {"sha": "39ff3a0ba2d22d56e1b43efe3bafa682bced00a0", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -8,7 +8,6 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n-cstr = \"0.2\"\n libc = \"0.2\"\n measureme = \"10.0.0\"\n object = { version = \"0.31.1\", default-features = false, features = ["}, {"sha": "ad0636894b793a0503b9b5c4e29be27eaf27150c", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -77,7 +77,7 @@ pub(crate) unsafe fn codegen(\n                 llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n             llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n \n-            let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+            let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, c\"entry\".as_ptr().cast());\n \n             let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n             llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n@@ -129,7 +129,7 @@ pub(crate) unsafe fn codegen(\n     attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);\n     llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n \n-    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, c\"entry\".as_ptr().cast());\n \n     let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n     llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);"}, {"sha": "8b05af7bed90959640d4c2e1eedcd0a6145f5888", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -595,7 +595,7 @@ pub(crate) fn run_pass_manager(\n             llvm::LLVMRustAddModuleFlag(\n                 module.module_llvm.llmod(),\n                 llvm::LLVMModFlagBehavior::Error,\n-                \"LTOPostLink\\0\".as_ptr().cast(),\n+                c\"LTOPostLink\".as_ptr().cast(),\n                 1,\n             );\n         }"}, {"sha": "53b4296802ef7e82bcb224b74fd69db337946a4d", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -891,11 +891,11 @@ unsafe fn embed_bitcode(\n         let llglobal = llvm::LLVMAddGlobal(\n             llmod,\n             common::val_ty(llconst),\n-            \"rustc.embedded.module\\0\".as_ptr().cast(),\n+            c\"rustc.embedded.module\".as_ptr().cast(),\n         );\n         llvm::LLVMSetInitializer(llglobal, llconst);\n \n-        let section = if is_apple { \"__LLVM,__bitcode\\0\" } else { \".llvmbc\\0\" };\n+        let section = if is_apple { c\"__LLVM,__bitcode\" } else { c\".llvmbc\" };\n         llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n         llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n         llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n@@ -904,10 +904,10 @@ unsafe fn embed_bitcode(\n         let llglobal = llvm::LLVMAddGlobal(\n             llmod,\n             common::val_ty(llconst),\n-            \"rustc.embedded.cmdline\\0\".as_ptr().cast(),\n+            c\"rustc.embedded.cmdline\".as_ptr().cast(),\n         );\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        let section = if is_apple { \"__LLVM,__cmdline\\0\" } else { \".llvmcmd\\0\" };\n+        let section = if is_apple { c\"__LLVM,__cmdline\" } else { c\".llvmcmd\" };\n         llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n         llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     } else {"}, {"sha": "2f7eb08ad3d4c9ea6e4d9aaa5de33f644ba3ef01", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -19,8 +19,6 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n \n-use cstr::cstr;\n-\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n@@ -110,11 +108,11 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n \n             // Create the llvm.used and llvm.compiler.used variables.\n             if !cx.used_statics.borrow().is_empty() {\n-                cx.create_used_variable_impl(cstr!(\"llvm.used\"), &*cx.used_statics.borrow());\n+                cx.create_used_variable_impl(c\"llvm.used\", &*cx.used_statics.borrow());\n             }\n             if !cx.compiler_used_statics.borrow().is_empty() {\n                 cx.create_used_variable_impl(\n-                    cstr!(\"llvm.compiler.used\"),\n+                    c\"llvm.compiler.used\",\n                     &*cx.compiler_used_statics.borrow(),\n                 );\n             }"}, {"sha": "b4aa001547c4c49b555bd57171cffe0990e427eb", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -6,7 +6,6 @@ use crate::llvm::{self, AtomicOrdering, AtomicRmwBinOp, BasicBlock, False, True}\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use cstr::cstr;\n use libc::{c_char, c_uint};\n use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, SynchronizationScope, TypeKind};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n@@ -25,7 +24,6 @@ use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, Typ\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n use rustc_target::spec::{HasTargetSpec, SanitizerSet, Target};\n use std::borrow::Cow;\n-use std::ffi::CStr;\n use std::iter;\n use std::ops::Deref;\n use std::ptr;\n@@ -45,13 +43,10 @@ impl Drop for Builder<'_, '_, '_> {\n     }\n }\n \n-// FIXME(eddyb) use a checked constructor when they become `const fn`.\n-const EMPTY_C_STR: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b\"\\0\") };\n-\n /// Empty string, to be used where LLVM expects an instruction name, indicating\n /// that the instruction is to be left unnamed (i.e. numbered, in textual IR).\n // FIXME(eddyb) pass `&CStr` directly to FFI once it's a thin pointer.\n-const UNNAMED: *const c_char = EMPTY_C_STR.as_ptr();\n+const UNNAMED: *const c_char = c\"\".as_ptr();\n \n impl<'ll, 'tcx> BackendTypes for Builder<'_, 'll, 'tcx> {\n     type Value = <CodegenCx<'ll, 'tcx> as BackendTypes>::Value;\n@@ -1010,14 +1005,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n             llvm::LLVMBuildCleanupPad(\n                 self.llbuilder,\n                 parent,\n                 args.as_ptr(),\n                 args.len() as c_uint,\n-                name.as_ptr(),\n+                c\"cleanuppad\".as_ptr(),\n             )\n         };\n         Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n@@ -1031,14 +1025,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMBuildCatchPad(\n                 self.llbuilder,\n                 parent,\n                 args.as_ptr(),\n                 args.len() as c_uint,\n-                name.as_ptr(),\n+                c\"catchpad\".as_ptr(),\n             )\n         };\n         Funclet::new(ret.expect(\"LLVM does not have support for catchpad\"))\n@@ -1050,14 +1043,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unwind: Option<&'ll BasicBlock>,\n         handlers: &[&'ll BasicBlock],\n     ) -> &'ll Value {\n-        let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n                 handlers.len() as c_uint,\n-                name.as_ptr(),\n+                c\"catchswitch\".as_ptr(),\n             )\n         };\n         let ret = ret.expect(\"LLVM does not have support for catchswitch\");"}, {"sha": "2087754c66b847498ab10b4b777851e701d559e0", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -8,7 +8,6 @@ use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -482,9 +481,9 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                             .all(|&byte| byte == 0);\n \n                     let sect_name = if all_bytes_are_zero {\n-                        cstr!(\"__DATA,__thread_bss\")\n+                        c\"__DATA,__thread_bss\"\n                     } else {\n-                        cstr!(\"__DATA,__thread_data\")\n+                        c\"__DATA,__thread_data\"\n                     };\n                     llvm::LLVMSetSection(g, sect_name.as_ptr());\n                 }\n@@ -513,7 +512,7 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                     let val = llvm::LLVMMetadataAsValue(self.llcx, meta);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n-                        \"wasm.custom_sections\\0\".as_ptr().cast(),\n+                        c\"wasm.custom_sections\".as_ptr().cast(),\n                         val,\n                     );\n                 }"}, {"sha": "e8a7afcc632c28c20b9171720fe556a72668baf9", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -8,7 +8,6 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::value::Value;\n \n-use cstr::cstr;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n@@ -224,36 +223,42 @@ pub unsafe fn create_module<'ll>(\n     // If skipping the PLT is enabled, we need to add some module metadata\n     // to ensure intrinsic calls don't use it.\n     if !sess.needs_plt() {\n-        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr().cast();\n-        llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Warning, avoid_plt, 1);\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Warning,\n+            c\"RtLibUseGOT\".as_ptr().cast(),\n+            1,\n+        );\n     }\n \n     // Enable canonical jump tables if CFI is enabled. (See https://reviews.llvm.org/D65629.)\n     if sess.is_sanitizer_cfi_canonical_jump_tables_enabled() && sess.is_sanitizer_cfi_enabled() {\n-        let canonical_jump_tables = \"CFI Canonical Jump Tables\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            canonical_jump_tables,\n+            c\"CFI Canonical Jump Tables\".as_ptr().cast(),\n             1,\n         );\n     }\n \n     // Enable LTO unit splitting if specified or if CFI is enabled. (See https://reviews.llvm.org/D53891.)\n     if sess.is_split_lto_unit_enabled() || sess.is_sanitizer_cfi_enabled() {\n-        let enable_split_lto_unit = \"EnableSplitLTOUnit\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            enable_split_lto_unit,\n+            c\"EnableSplitLTOUnit\".as_ptr().cast(),\n             1,\n         );\n     }\n \n     // Add \"kcfi\" module flag if KCFI is enabled. (See https://reviews.llvm.org/D119296.)\n     if sess.is_sanitizer_kcfi_enabled() {\n-        let kcfi = \"kcfi\\0\".as_ptr().cast();\n-        llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Override, kcfi, 1);\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            c\"kcfi\".as_ptr().cast(),\n+            1,\n+        );\n     }\n \n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n@@ -265,7 +270,7 @@ pub unsafe fn create_module<'ll>(\n                 llvm::LLVMRustAddModuleFlag(\n                     llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"cfguard\\0\".as_ptr() as *const _,\n+                    c\"cfguard\".as_ptr() as *const _,\n                     1,\n                 )\n             }\n@@ -274,7 +279,7 @@ pub unsafe fn create_module<'ll>(\n                 llvm::LLVMRustAddModuleFlag(\n                     llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"cfguard\\0\".as_ptr() as *const _,\n+                    c\"cfguard\".as_ptr() as *const _,\n                     2,\n                 )\n             }\n@@ -292,26 +297,26 @@ pub unsafe fn create_module<'ll>(\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"branch-target-enforcement\\0\".as_ptr().cast(),\n+                c\"branch-target-enforcement\".as_ptr().cast(),\n                 bti.into(),\n             );\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address\\0\".as_ptr().cast(),\n+                c\"sign-return-address\".as_ptr().cast(),\n                 pac_ret.is_some().into(),\n             );\n             let pac_opts = pac_ret.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address-all\\0\".as_ptr().cast(),\n+                c\"sign-return-address-all\".as_ptr().cast(),\n                 pac_opts.leaf.into(),\n             );\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+                c\"sign-return-address-with-bkey\".as_ptr().cast(),\n                 u32::from(pac_opts.key == PAuthKey::B),\n             );\n         } else {\n@@ -327,15 +332,15 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            \"cf-protection-branch\\0\".as_ptr().cast(),\n+            c\"cf-protection-branch\".as_ptr().cast(),\n             1,\n         )\n     }\n     if let CFProtection::Return | CFProtection::Full = sess.opts.unstable_opts.cf_protection {\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            \"cf-protection-return\\0\".as_ptr().cast(),\n+            c\"cf-protection-return\".as_ptr().cast(),\n             1,\n         )\n     }\n@@ -344,7 +349,7 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Error,\n-            \"Virtual Function Elim\\0\".as_ptr().cast(),\n+            c\"Virtual Function Elim\".as_ptr().cast(),\n             1,\n         );\n     }\n@@ -476,14 +481,13 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     }\n \n     pub(crate) fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n-        let section = cstr!(\"llvm.metadata\");\n         let array = self.const_array(self.type_ptr_to(self.type_i8()), values);\n \n         unsafe {\n             let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n             llvm::LLVMSetInitializer(g, array);\n             llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n-            llvm::LLVMSetSection(g, section.as_ptr());\n+            llvm::LLVMSetSection(g, c\"llvm.metadata\".as_ptr());\n         }\n     }\n }"}, {"sha": "8be54b7eb7188adc2e63cef8b4f9a05b28cd3b87", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -38,7 +38,6 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n         unsafe { llvm::LLVMGetNamedGlobal(cx.llmod, c_section_var_name.as_ptr().cast()) };\n \n     section_var.unwrap_or_else(|| {\n-        let section_name = b\".debug_gdb_scripts\\0\";\n         let mut section_contents = Vec::new();\n \n         // Add the pretty printers for the standard library first.\n@@ -71,7 +70,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n             let section_var = cx\n                 .define_global(section_var_name, llvm_type)\n                 .unwrap_or_else(|| bug!(\"symbol `{}` is already defined\", section_var_name));\n-            llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n+            llvm::LLVMSetSection(section_var, c\".debug_gdb_scripts\".as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddress(section_var, llvm::UnnamedAddr::Global);"}, {"sha": "166454d3ae74c53f3de8c8f211d6deac96663e9d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -20,7 +20,6 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n-use cstr::cstr;\n use rustc_codegen_ssa::debuginfo::type_names::cpp_like_debuginfo;\n use rustc_codegen_ssa::debuginfo::type_names::VTableNameKind;\n use rustc_codegen_ssa::traits::*;\n@@ -812,7 +811,6 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n     let work_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped);\n-    let flags = \"\\0\";\n     let output_filenames = tcx.output_filenames(());\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n         output_filenames\n@@ -849,7 +847,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             producer.as_ptr().cast(),\n             producer.len(),\n             tcx.sess.opts.optimize != config::OptLevel::No,\n-            flags.as_ptr().cast(),\n+            c\"\".as_ptr().cast(),\n             0,\n             // NB: this doesn't actually have any perceptible effect, it seems. LLVM will instead\n             // put the path supplied to `MCSplitDwarfFile` into the debug info of the final\n@@ -878,8 +876,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             );\n             let val = llvm::LLVMMetadataAsValue(debug_context.llcontext, gcov_metadata);\n \n-            let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n-            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, llvm_gcov_ident.as_ptr(), val);\n+            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, c\"llvm.gcov\".as_ptr(), val);\n         }\n \n         // Insert `llvm.ident` metadata on the wasm targets since that will\n@@ -892,7 +889,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             );\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n-                cstr!(\"llvm.ident\").as_ptr(),\n+                c\"llvm.ident\".as_ptr(),\n                 llvm::LLVMMDNodeInContext(debug_context.llcontext, &name_metadata, 1),\n             );\n         }"}, {"sha": "aa7ae9355bcfa29eba716bff1f54ba41c5ac56ca", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -113,25 +113,24 @@ impl<'ll, 'tcx> CodegenUnitDebugContext<'ll, 'tcx> {\n                 llvm::LLVMRustAddModuleFlag(\n                     self.llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"Dwarf Version\\0\".as_ptr().cast(),\n+                    c\"Dwarf Version\".as_ptr().cast(),\n                     dwarf_version,\n                 );\n             } else {\n                 // Indicate that we want CodeView debug information on MSVC\n                 llvm::LLVMRustAddModuleFlag(\n                     self.llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"CodeView\\0\".as_ptr().cast(),\n+                    c\"CodeView\".as_ptr().cast(),\n                     1,\n                 )\n             }\n \n             // Prevent bitcode readers from deleting the debug info.\n-            let ptr = \"Debug Info Version\\0\".as_ptr();\n             llvm::LLVMRustAddModuleFlag(\n                 self.llmod,\n                 llvm::LLVMModFlagBehavior::Warning,\n-                ptr.cast(),\n+                c\"Debug Info Version\".as_ptr().cast(),\n                 llvm::LLVMRustDebugMetadataVersion(),\n             );\n         }"}, {"sha": "ff9909c720e547906ae7107eec60f6272533a164", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -11,6 +11,7 @@\n #![feature(let_chains)]\n #![feature(never_type)]\n #![feature(impl_trait_in_assoc_type)]\n+#![feature(c_str_literals)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "d53f1a2b2fff17a89dfd7558121ef07988c69214", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -240,6 +240,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n+#![feature(c_str_literals)]\n #![feature(c_unwind)]\n #![feature(cfg_target_thread_local)]\n #![feature(concat_idents)]"}, {"sha": "0efe2570d67753792409f561e8fa370e658b1f2b", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -242,13 +242,15 @@ mod imp {\n         let mut res = Vec::new();\n \n         unsafe {\n-            let process_info_sel = sel_registerName(\"processInfo\\0\".as_ptr());\n-            let arguments_sel = sel_registerName(\"arguments\\0\".as_ptr());\n-            let utf8_sel = sel_registerName(\"UTF8String\\0\".as_ptr());\n-            let count_sel = sel_registerName(\"count\\0\".as_ptr());\n-            let object_at_sel = sel_registerName(\"objectAtIndex:\\0\".as_ptr());\n-\n-            let klass = objc_getClass(\"NSProcessInfo\\0\".as_ptr());\n+            let process_info_sel =\n+                sel_registerName(c\"processInfo\".as_ptr() as *const libc::c_uchar);\n+            let arguments_sel = sel_registerName(c\"arguments\".as_ptr() as *const libc::c_uchar);\n+            let utf8_sel = sel_registerName(c\"UTF8String\".as_ptr() as *const libc::c_uchar);\n+            let count_sel = sel_registerName(c\"count\".as_ptr() as *const libc::c_uchar);\n+            let object_at_sel =\n+                sel_registerName(c\"objectAtIndex:\".as_ptr() as *const libc::c_uchar);\n+\n+            let klass = objc_getClass(c\"NSProcessInfo\".as_ptr() as *const libc::c_uchar);\n             let info = objc_msgSend(klass, process_info_sel);\n             let args = objc_msgSend(info, arguments_sel);\n "}, {"sha": "0e5691d40d176ec4b92a0fdde98a836ba855ef50", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -1063,7 +1063,7 @@ impl File {\n         cfg_has_statx! {\n             if let Some(ret) = unsafe { try_statx(\n                 fd,\n-                b\"\\0\" as *const _ as *const c_char,\n+                c\"\".as_ptr() as *const c_char,\n                 libc::AT_EMPTY_PATH | libc::AT_STATX_SYNC_AS_STAT,\n                 libc::STATX_ALL,\n             ) } {"}, {"sha": "54e2f20b31703eab70fde0dd4be5f5f39d49193e", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -1,6 +1,5 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use crate::ffi::CStr;\n use crate::io::ErrorKind;\n \n pub use self::rand::hashmap_random_keys;\n@@ -75,7 +74,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     // thread-id for the main thread and so renaming the main thread will rename the\n     // process and we only want to enable this on platforms we've tested.\n     if cfg!(target_os = \"macos\") {\n-        thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n+        thread::Thread::set_name(&c\"main\");\n     }\n \n     unsafe fn sanitize_standard_fds() {\n@@ -121,7 +120,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 if pfd.revents & libc::POLLNVAL == 0 {\n                     continue;\n                 }\n-                if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                if open64(c\"/dev/null\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                     // If the stream is closed but we failed to reopen it, abort the\n                     // process. Otherwise we wouldn't preserve the safety of\n                     // operations on the corresponding Rust object Stdin, Stdout, or\n@@ -151,7 +150,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n             use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n-                    if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                    if open64(c\"/dev/null\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                         // If the stream is closed but we failed to reopen it, abort the\n                         // process. Otherwise we wouldn't preserve the safety of\n                         // operations on the corresponding Rust object Stdin, Stdout, or"}, {"sha": "5f316b12b625d0389816d45f9f34415bbb05ac24", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -24,11 +24,11 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n         // fuchsia doesn't have /dev/null\n     } else if #[cfg(target_os = \"redox\")] {\n-        const DEV_NULL: &str = \"null:\\0\";\n+        const DEV_NULL: &CStr = c\"null:\";\n     } else if #[cfg(target_os = \"vxworks\")] {\n-        const DEV_NULL: &str = \"/null\\0\";\n+        const DEV_NULL: &CStr = c\"/null\";\n     } else {\n-        const DEV_NULL: &str = \"/dev/null\\0\";\n+        const DEV_NULL: &CStr = c\"/dev/null\";\n     }\n }\n \n@@ -474,8 +474,7 @@ impl Stdio {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n                 opts.write(!readable);\n-                let path = unsafe { CStr::from_ptr(DEV_NULL.as_ptr() as *const _) };\n-                let fd = File::open_c(&path, &opts)?;\n+                let fd = File::open_c(DEV_NULL, &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_inner()), None))\n             }\n "}, {"sha": "878af5088d9f49952c042fd44863edafd646b53f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -163,10 +163,9 @@ impl Thread {\n     #[cfg(target_os = \"netbsd\")]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n-            let cname = CStr::from_bytes_with_nul_unchecked(b\"%s\\0\".as_slice());\n             let res = libc::pthread_setname_np(\n                 libc::pthread_self(),\n-                cname.as_ptr(),\n+                c\"%s\".as_ptr(),\n                 name.as_ptr() as *mut libc::c_void,\n             );\n             debug_assert_eq!(res, 0);"}, {"sha": "07b0610d463fa07c2b66aab21c92fcefff10e4ed", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -317,7 +317,7 @@ pub unsafe fn NtWriteFile(\n // Functions that aren't available on every version of Windows that we support,\n // but we still use them and just provide some form of a fallback implementation.\n compat_fn_with_fallback! {\n-    pub static KERNEL32: &CStr = ansi_str!(\"kernel32\");\n+    pub static KERNEL32: &CStr = c\"kernel32\";\n \n     // >= Win10 1607\n     // https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreaddescription\n@@ -350,7 +350,7 @@ compat_fn_optional! {\n }\n \n compat_fn_with_fallback! {\n-    pub static NTDLL: &CStr = ansi_str!(\"ntdll\");\n+    pub static NTDLL: &CStr = c\"ntdll\";\n \n     pub fn NtCreateKeyedEvent(\n         KeyedEventHandle: LPHANDLE,"}, {"sha": "649cc4bfdbf1ad0a6a0875822702f50421db0023", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -228,9 +228,9 @@ macro_rules! compat_fn_optional {\n /// Load all needed functions from \"api-ms-win-core-synch-l1-2-0\".\n pub(super) fn load_synch_functions() {\n     fn try_load() -> Option<()> {\n-        const MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-        const WAIT_ON_ADDRESS: &CStr = ansi_str!(\"WaitOnAddress\");\n-        const WAKE_BY_ADDRESS_SINGLE: &CStr = ansi_str!(\"WakeByAddressSingle\");\n+        const MODULE_NAME: &CStr = c\"api-ms-win-core-synch-l1-2-0\";\n+        const WAIT_ON_ADDRESS: &CStr = c\"WaitOnAddress\";\n+        const WAKE_BY_ADDRESS_SINGLE: &CStr = c\"WakeByAddressSingle\";\n \n         // Try loading the library and all the required functions.\n         // If any step fails, then they all fail."}, {"sha": "b11c89622032eba7f8859d5844036b8c33b4596b", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -1,6 +1,6 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use crate::ffi::{CStr, OsStr, OsString};\n+use crate::ffi::{OsStr, OsString};\n use crate::io::ErrorKind;\n use crate::mem::MaybeUninit;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n@@ -51,7 +51,7 @@ pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {\n \n     // Normally, `thread::spawn` will call `Thread::set_name` but since this thread already\n     // exists, we have to call it ourselves.\n-    thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n+    thread::Thread::set_name(&c\"main\");\n }\n \n // SAFETY: must be called only once during runtime cleanup."}, {"sha": "abaed95a084266322b854dc8d5d88c195dcd2827", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b639ce435f00df0db2c4729be4a205cbd7bb4d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "patch": "@@ -132,7 +132,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"crossbeam-epoch\",\n     \"crossbeam-utils\",\n     \"crypto-common\",\n-    \"cstr\",\n     \"datafrog\",\n     \"derive_more\",\n     \"digest\","}]}