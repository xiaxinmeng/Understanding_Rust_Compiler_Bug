{"sha": "223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "node_id": "C_kwDOAAsO6NoAKDIyM2Y1ODA4NWFhY2I1ODZjMDZjN2RiZmFhNjBiODVjMWIxZjFkYTQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-27T06:21:17Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-27T06:21:28Z"}, "message": "Remove `is_const_fn` in `find_mir_or_eval_fn`", "tree": {"sha": "d03fdde3cb085e38dc282dc49c56f8bfc275df12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03fdde3cb085e38dc282dc49c56f8bfc275df12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "html_url": "https://github.com/rust-lang/rust/commit/223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223f58085aacb586c06c7dbfaa60b85c1b1f1da4/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4345a1c5fce8dec8a44b7fd80be8867ac6e649", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4345a1c5fce8dec8a44b7fd80be8867ac6e649", "html_url": "https://github.com/rust-lang/rust/commit/cc4345a1c5fce8dec8a44b7fd80be8867ac6e649"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "dacd8f7c12cfd50204f00037a4e3eec8049d5a29", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/223f58085aacb586c06c7dbfaa60b85c1b1f1da4/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223f58085aacb586c06c7dbfaa60b85c1b1f1da4/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "patch": "@@ -265,24 +265,18 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def) = instance.def {\n-            let mut is_const_fn = true;\n-\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n                 // allow calling functions marked with #[default_method_body_is_const].\n                 if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n-                    is_const_fn = false;\n+                    // We certainly do *not* want to actually call the fn\n+                    // though, so be sure we return here.\n+                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n                 }\n             }\n \n-            if !is_const_fn {\n-                // We certainly do *not* want to actually call the fn\n-                // though, so be sure we return here.\n-                throw_unsup_format!(\"calling non-const function `{}`\", instance)\n-            }\n-\n             if let Some(new_instance) = ecx.hook_special_const_fn(instance, args)? {\n                 // We call another const fn instead.\n                 return Self::find_mir_or_eval_fn(ecx, new_instance, _abi, args, _ret, _unwind);"}]}