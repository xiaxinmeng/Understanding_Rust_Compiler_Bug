{"sha": "497a8b54b5b3f9daf0ec735d443c443ac29afeab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5N2E4YjU0YjViM2Y5ZGFmMGVjNzM1ZDQ0M2M0NDNhYzI5YWZlYWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:07:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:08:05Z"}, "message": "syntax: switch tt quoter to emit ~[tt], not tt.", "tree": {"sha": "fbb06ef2831317fc195467bd6fb45fa357d82d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb06ef2831317fc195467bd6fb45fa357d82d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497a8b54b5b3f9daf0ec735d443c443ac29afeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497a8b54b5b3f9daf0ec735d443c443ac29afeab", "html_url": "https://github.com/rust-lang/rust/commit/497a8b54b5b3f9daf0ec735d443c443ac29afeab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497a8b54b5b3f9daf0ec735d443c443ac29afeab/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba01cd7fb0b6efe22e23bcfdb763260cd4c2ea32", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba01cd7fb0b6efe22e23bcfdb763260cd4c2ea32", "html_url": "https://github.com/rust-lang/rust/commit/ba01cd7fb0b6efe22e23bcfdb763260cd4c2ea32"}], "stats": {"total": 112, "additions": 76, "deletions": 36}, "files": [{"sha": "e613263a52c812296c0402bae4d7ad338f2b6d88", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -79,6 +79,11 @@ fn mk_uniq_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n    @ast::expr {\n     mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs), ast::expr_vstore_uniq)\n }\n+fn mk_slice_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n+   @ast::expr {\n+    mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs),\n+                ast::expr_vstore_slice)\n+}\n fn mk_fixed_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n    @ast::expr {\n     mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs),"}, {"sha": "443a937d4eb7acf7ffa5319ddfa4249c00dab1fd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -5,7 +5,7 @@ use ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n use fold::*;\n use ext::base::*;\n use ext::qquote::{qq_helper};\n-use parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n+use parse::{parser, parse_expr_from_source_str, new_parser_from_tts};\n \n \n use codemap::{span, ExpandedFrom};"}, {"sha": "907a193d05c6784a1612d276d3b0839e8e9dc330", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -473,6 +473,7 @@ trait ext_ctxt_parse_utils {\n     fn parse_item(s: ~str) -> @ast::item;\n     fn parse_expr(s: ~str) -> @ast::expr;\n     fn parse_stmt(s: ~str) -> @ast::stmt;\n+    fn parse_tts(s: ~str) -> ~[ast::token_tree];\n }\n \n impl ext_ctxt: ext_ctxt_parse_utils {\n@@ -508,4 +509,12 @@ impl ext_ctxt: ext_ctxt_parse_utils {\n             self.cfg(),\n             self.parse_sess())\n     }\n+\n+    fn parse_tts(s: ~str) -> ~[ast::token_tree] {\n+        parse::parse_tts_from_source_str(\n+            ~\"***protocol expansion***\",\n+            @(copy s),\n+            self.cfg(),\n+            self.parse_sess())\n+    }\n }"}, {"sha": "80a0616e732be79a80efdb13a8d46c95b6a95a12", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -19,15 +19,15 @@ use token::*;\n pub mod rt {\n     pub use ast::*;\n     pub use parse::token::*;\n-    pub use parse::new_parser_from_tt;\n+    pub use parse::new_parser_from_tts;\n     pub use codemap::BytePos;\n     pub use codemap::span;\n }\n \n pub fn expand_quote_tokens(cx: ext_ctxt,\n                            sp: span,\n                            tts: ~[ast::token_tree]) -> base::mac_result {\n-    base::mr_expr(expand_tt(cx, sp, tts))\n+    base::mr_expr(expand_tts(cx, sp, tts))\n }\n \n pub fn expand_quote_expr(cx: ext_ctxt,\n@@ -121,8 +121,7 @@ fn mk_span(cx: ext_ctxt, qsp: span, sp: span) -> @ast::expr {\n         }\n     };\n \n-    let span_path = ids_ext(\n-        cx, ~[~\"syntax\", ~\"ext\", ~\"quote\", ~\"rt\", ~\"span\"]);\n+    let span_path = ids_ext(cx, ~[~\"span\"]);\n \n     build::mk_struct_e(cx, qsp,\n                        span_path,\n@@ -150,7 +149,7 @@ fn mk_ident(cx: ext_ctxt, sp: span, ident: ast::ident) -> @ast::expr {\n }\n \n fn mk_bytepos(cx: ext_ctxt, sp: span, bpos: BytePos) -> @ast::expr {\n-    let path = ids_ext(cx, ~[~\"syntax\", ~\"ext\", ~\"quote\", ~\"rt\", ~\"BytePos\"]);\n+    let path = ids_ext(cx, ~[~\"BytePos\"]);\n     let arg = build::mk_uint(cx, sp, bpos.to_uint());\n     build::mk_call(cx, sp, path, ~[arg])\n }\n@@ -318,17 +317,21 @@ fn mk_token(cx: ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n \n fn mk_tt(cx: ext_ctxt, sp: span, tt: &ast::token_tree) -> @ast::expr {\n     match *tt {\n-        ast::tt_tok(sp, tok) =>\n-        build::mk_call(cx, sp,\n-                       ids_ext(cx, ~[~\"tt_tok\"]),\n-                       ~[mk_span(cx, sp, sp),\n-                         mk_token(cx, sp, tok)]),\n+        ast::tt_tok(sp, tok) => {\n+            let e_tok =\n+                build::mk_call(cx, sp,\n+                               ids_ext(cx, ~[~\"tt_tok\"]),\n+                               ~[mk_span(cx, sp, sp),\n+                                 mk_token(cx, sp, tok)]);\n+            build::mk_uniq_vec_e(cx, sp, ~[e_tok])\n+        }\n \n         ast::tt_delim(tts) => {\n-            let e_tts = tts.map(|tt| mk_tt(cx, sp, tt));\n-            build::mk_call(cx, sp,\n-                           ids_ext(cx, ~[~\"tt_delim\"]),\n-                           ~[build::mk_uniq_vec_e(cx, sp, e_tts)])\n+            let e_delim =\n+                build::mk_call(cx, sp,\n+                               ids_ext(cx, ~[~\"tt_delim\"]),\n+                               ~[mk_tts(cx, sp, tts)]);\n+            build::mk_uniq_vec_e(cx, sp, ~[e_delim])\n         }\n \n         ast::tt_seq(*) => fail ~\"tt_seq in quote!\",\n@@ -338,39 +341,41 @@ fn mk_tt(cx: ext_ctxt, sp: span, tt: &ast::token_tree) -> @ast::expr {\n     }\n }\n \n+fn mk_tts(cx: ext_ctxt, sp: span, tts: &[ast::token_tree]) -> @ast::expr {\n+    let e_tts = tts.map(|tt| mk_tt(cx, sp, tt));\n+    build::mk_call(cx, sp,\n+                   ids_ext(cx, ~[~\"vec\", ~\"concat\"]),\n+                   ~[build::mk_slice_vec_e(cx, sp, e_tts)])\n+}\n \n-fn expand_tt(cx: ext_ctxt,\n-             sp: span,\n-             tts: ~[ast::token_tree]) -> @ast::expr {\n+fn expand_tts(cx: ext_ctxt,\n+              sp: span,\n+              tts: ~[ast::token_tree]) -> @ast::expr {\n     // NB: It appears that the main parser loses its mind if we consider\n     // $foo as a tt_nonterminal during the main parse, so we have to re-parse\n     // under quote_depth > 0. This is silly and should go away; the _guess_ is\n     // it has to do with transition away from supporting old-style macros, so\n     // try removing it when enough of them are gone.\n-    let p = parse::new_parser_from_tt(cx.parse_sess(), cx.cfg(), tts);\n+    let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts);\n     p.quote_depth += 1u;\n-    let tq = dvec::DVec();\n-    while p.token != token::EOF {\n-        tq.push(p.parse_token_tree());\n-    }\n-    let tts = tq.get();\n+    let tts = p.parse_all_token_trees();\n+    p.abort_if_errors();\n \n     // We want to emit a block expression that does a sequence of 'use's to\n     // import the runtime module, followed by a tt expression.\n     let uses = ~[ build::mk_glob_use(cx, sp, ids_ext(cx, ~[~\"syntax\",\n                                                            ~\"ext\",\n                                                            ~\"quote\",\n                                                            ~\"rt\"])) ];\n-    build::mk_block(cx, sp, uses, ~[],\n-                    Some(mk_tt(cx, sp, &ast::tt_delim(tts))))\n+    build::mk_block(cx, sp, uses, ~[], Some(mk_tts(cx, sp, tts)))\n }\n \n fn expand_parse_call(cx: ext_ctxt,\n                      sp: span,\n                      parse_method: ~str,\n                      arg_exprs: ~[@ast::expr],\n                      tts: ~[ast::token_tree]) -> @ast::expr {\n-    let tt_expr = expand_tt(cx, sp, tts);\n+    let tts_expr = expand_tts(cx, sp, tts);\n \n     let cfg_call = || build::mk_call_(\n         cx, sp, build::mk_access(cx, sp, ids_ext(cx, ~[~\"ext_cx\"]),\n@@ -386,10 +391,10 @@ fn expand_parse_call(cx: ext_ctxt,\n                                      ~\"ext\",\n                                      ~\"quote\",\n                                      ~\"rt\",\n-                                     ~\"new_parser_from_tt\"]),\n+                                     ~\"new_parser_from_tts\"]),\n                        ~[parse_sess_call(),\n                          cfg_call(),\n-                         build::mk_uniq_vec_e(cx, sp, ~[tt_expr])]);\n+                         tts_expr]);\n \n     build::mk_call_(cx, sp,\n                     build::mk_access_(cx, sp, new_parser_call,"}, {"sha": "3ddb03547cbb535c23e35e3ded865085cbdb515a", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -5,12 +5,13 @@ export new_parse_sess, new_parse_sess_special_handler;\n export next_node_id;\n export new_parser_from_file, new_parser_etc_from_file;\n export new_parser_from_source_str;\n-export new_parser_from_tt;\n+export new_parser_from_tts;\n export new_sub_parser_from_file;\n export parse_crate_from_file, parse_crate_from_crate_file;\n export parse_crate_from_source_str;\n export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_stmt_from_source_str;\n+export parse_tts_from_source_str;\n export parse_from_source_str;\n \n use parser::Parser;\n@@ -127,6 +128,16 @@ fn parse_stmt_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n     return r;\n }\n \n+fn parse_tts_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                             sess: parse_sess) -> ~[ast::token_tree] {\n+    let p = new_parser_from_source_str(sess, cfg, name,\n+                                       codemap::FssNone, source);\n+    p.quote_depth += 1u;\n+    let r = p.parse_all_token_trees();\n+    p.abort_if_errors();\n+    return r;\n+}\n+\n fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n                             name: ~str, ss: codemap::FileSubstr,\n                             source: @~str, cfg: ast::crate_cfg,\n@@ -199,9 +210,9 @@ fn new_sub_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n     }\n }\n \n-fn new_parser_from_tt(sess: parse_sess, cfg: ast::crate_cfg,\n-                      tt: ~[ast::token_tree]) -> Parser {\n+fn new_parser_from_tts(sess: parse_sess, cfg: ast::crate_cfg,\n+                       tts: ~[ast::token_tree]) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, sess.interner,\n-                                    None, tt);\n+                                    None, tts);\n     return Parser(sess, cfg, trdr as reader)\n }"}, {"sha": "925934d165f68e8283ecb5148b61fcb946aba8b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -1321,6 +1321,14 @@ impl Parser {\n         };\n     }\n \n+    fn parse_all_token_trees() -> ~[token_tree] {\n+        let tts = DVec();\n+        while self.token != token::EOF {\n+            tts.push(self.parse_token_tree());\n+        }\n+        tts.get()\n+    }\n+\n     fn parse_matchers() -> ~[matcher] {\n         // unification of matchers and token_trees would vastly improve\n         // the interpolation of matchers"}, {"sha": "2e71d213428d10497b93ad401e60ffcce8bca462", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497a8b54b5b3f9daf0ec735d443c443ac29afeab/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=497a8b54b5b3f9daf0ec735d443c443ac29afeab", "patch": "@@ -1,10 +1,12 @@\n+#[allow(non_implicitly_copyable_typarams)];\n+\n extern mod syntax;\n \n use syntax::ext::base::ext_ctxt;\n \n fn syntax_extension(ext_cx: @ext_ctxt) {\n-    let e_toks : syntax::ast::token_tree = quote_tokens!(1 + 2);\n-    let p_toks : syntax::ast::token_tree = quote_tokens!((x, 1 .. 4, *));\n+    let e_toks : ~[syntax::ast::token_tree] = quote_tokens!(1 + 2);\n+    let p_toks : ~[syntax::ast::token_tree] = quote_tokens!((x, 1 .. 4, *));\n \n     let _a: @syntax::ast::expr = quote_expr!(1 + 2);\n     let _b: Option<@syntax::ast::item> = quote_item!( const foo : int = $e_toks; );\n@@ -14,6 +16,6 @@ fn syntax_extension(ext_cx: @ext_ctxt) {\n }\n \n fn main() {\n-    let _x: syntax::ast::token_tree = quote_tokens!(a::Foo::foo());\n+    let _x: ~[syntax::ast::token_tree] = quote_tokens!(a::Foo::foo());\n }\n "}]}