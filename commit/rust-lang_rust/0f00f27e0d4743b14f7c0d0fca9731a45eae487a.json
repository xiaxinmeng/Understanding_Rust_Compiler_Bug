{"sha": "0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMDBmMjdlMGQ0NzQzYjE0ZjdjMGQwZmNhOTczMWE0NWVhZTQ4N2E=", "commit": {"author": {"name": "Amit Aryeh Levy", "email": "amit@amitlevy.com", "date": "2017-04-28T22:21:59Z"}, "committer": {"name": "Amit Aryeh Levy", "email": "amit@amitlevy.com", "date": "2017-04-28T22:33:56Z"}, "message": "Added LLVMRustRelocMode\n\nReplaces the llvm-c exposed LLVMRelocMode, which does not include all\nrelocation model variants, with a LLVMRustRelocMode modeled after\nLLVMRustCodeMode.", "tree": {"sha": "6d966bd680e8f739a396f554d4368e5f2e0095b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d966bd680e8f739a396f554d4368e5f2e0095b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "html_url": "https://github.com/rust-lang/rust/commit/0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f00f27e0d4743b14f7c0d0fca9731a45eae487a/comments", "author": {"login": "alevy", "id": 4689, "node_id": "MDQ6VXNlcjQ2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/4689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alevy", "html_url": "https://github.com/alevy", "followers_url": "https://api.github.com/users/alevy/followers", "following_url": "https://api.github.com/users/alevy/following{/other_user}", "gists_url": "https://api.github.com/users/alevy/gists{/gist_id}", "starred_url": "https://api.github.com/users/alevy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alevy/subscriptions", "organizations_url": "https://api.github.com/users/alevy/orgs", "repos_url": "https://api.github.com/users/alevy/repos", "events_url": "https://api.github.com/users/alevy/events{/privacy}", "received_events_url": "https://api.github.com/users/alevy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alevy", "id": 4689, "node_id": "MDQ6VXNlcjQ2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/4689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alevy", "html_url": "https://github.com/alevy", "followers_url": "https://api.github.com/users/alevy/followers", "following_url": "https://api.github.com/users/alevy/following{/other_user}", "gists_url": "https://api.github.com/users/alevy/gists{/gist_id}", "starred_url": "https://api.github.com/users/alevy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alevy/subscriptions", "organizations_url": "https://api.github.com/users/alevy/orgs", "repos_url": "https://api.github.com/users/alevy/repos", "events_url": "https://api.github.com/users/alevy/events{/privacy}", "received_events_url": "https://api.github.com/users/alevy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b92669e4ec83005eff2641b092f25be09373b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b92669e4ec83005eff2641b092f25be09373b8", "html_url": "https://github.com/rust-lang/rust/commit/32b92669e4ec83005eff2641b092f25be09373b8"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "5cb5a62c93b35ad6075c289283931ccf8d19b7ec", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f00f27e0d4743b14f7c0d0fca9731a45eae487a/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f00f27e0d4743b14f7c0d0fca9731a45eae487a/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "patch": "@@ -284,13 +284,13 @@ pub enum CodeGenOptLevel {\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n-    Default = 0,\n-    Static = 1,\n-    PIC = 2,\n-    DynamicNoPic = 3,\n-    ROPI = 4,\n-    RWPI = 5,\n-    ROPI_RWPI = 6,\n+    Default,\n+    Static,\n+    PIC,\n+    DynamicNoPic,\n+    ROPI,\n+    RWPI,\n+    ROPI_RWPI,\n }\n \n /// LLVMRustCodeModel"}, {"sha": "f91145fbb5e15fbfc044e0886d17e250b1fba90c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0f00f27e0d4743b14f7c0d0fca9731a45eae487a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0f00f27e0d4743b14f7c0d0fca9731a45eae487a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "patch": "@@ -239,6 +239,47 @@ static CodeGenOpt::Level fromRust(LLVMRustCodeGenOptLevel Level) {\n   }\n }\n \n+enum class LLVMRustRelocMode {\n+  Default,\n+  Static,\n+  PIC,\n+  DynamicNoPic,\n+  ROPI,\n+  RWPI,\n+  ROPIRWPI,\n+};\n+\n+#if LLVM_VERSION_LE(3, 8)\n+static Reloc::Model fromRust(LLVMRustRelocMode RustReloc) {\n+#else\n+static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n+#endif\n+  switch (RustReloc) {\n+  case LLVMRustRelocMode::Default:\n+#if LLVM_VERSION_LE(3, 8)\n+    return Reloc::Default;\n+#else\n+    return None;\n+#endif\n+  case LLVMRustRelocMode::Static:\n+    return Reloc::Static;\n+  case LLVMRustRelocMode::PIC:\n+    return Reloc::PIC_;\n+  case LLVMRustRelocMode::DynamicNoPic:\n+    return Reloc::DynamicNoPIC;\n+#if LLVM_VERSION_GE(4, 0)\n+  case LLVMRustRelocMode::ROPI:\n+    return Reloc::ROPI;\n+  case LLVMRustRelocMode::RWPI:\n+    return Reloc::RWPI;\n+  case LLVMRustRelocMode::ROPIRWPI:\n+    return Reloc::ROPI_RWPI;\n+#endif\n+  default:\n+    llvm_unreachable(\"Bad RelocModel.\");\n+  }\n+}\n+\n #if LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n ///\n@@ -290,46 +331,14 @@ extern \"C\" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n \n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n-    LLVMRustCodeModel RustCM, int Reloc,\n+    LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n     bool DataSections) {\n \n-#if LLVM_VERSION_LE(3, 8)\n-  Reloc::Model RM;\n-#else\n-  Optional<Reloc::Model> RM;\n-#endif\n   auto CM = fromRust(RustCM);\n   auto OptLevel = fromRust(RustOptLevel);\n-\n-  switch (Reloc) {\n-  case 1:\n-    RM = Reloc::Static;\n-    break;\n-  case 2:\n-    RM = Reloc::PIC_;\n-    break;\n-  case 3:\n-    RM = Reloc::DynamicNoPIC;\n-    break;\n-#if LLVM_VERSION_GE(4, 0)\n-  case 4:\n-    RM = Reloc::ROPI;\n-    break;\n-  case 5:\n-    RM = Reloc::RWPI;\n-    break;\n-  case 6:\n-    RM = Reloc::ROPI_RWPI;\n-    break;\n-#endif\n-  default:\n-#if LLVM_VERSION_LE(3, 8)\n-    RM = Reloc::Default;\n-#endif\n-    break;\n-  }\n+  auto RM = fromRust(RustReloc);\n \n   std::string Error;\n   Triple Trip(Triple::normalize(TripleStr));"}]}