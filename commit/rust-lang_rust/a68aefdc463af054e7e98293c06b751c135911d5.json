{"sha": "a68aefdc463af054e7e98293c06b751c135911d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OGFlZmRjNDYzYWYwNTRlN2U5ODI5M2MwNmI3NTFjMTM1OTExZDU=", "commit": {"author": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T09:04:37Z"}, "committer": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T09:04:45Z"}, "message": "Move inclusive range check to validation", "tree": {"sha": "8084aff27bc7dab711524a0878e0d3026499a4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8084aff27bc7dab711524a0878e0d3026499a4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a68aefdc463af054e7e98293c06b751c135911d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a68aefdc463af054e7e98293c06b751c135911d5", "html_url": "https://github.com/rust-lang/rust/commit/a68aefdc463af054e7e98293c06b751c135911d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a68aefdc463af054e7e98293c06b751c135911d5/comments", "author": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989cebc99c02acd427f01724c4fa77d81691e886", "url": "https://api.github.com/repos/rust-lang/rust/commits/989cebc99c02acd427f01724c4fa77d81691e886", "html_url": "https://github.com/rust-lang/rust/commit/989cebc99c02acd427f01724c4fa77d81691e886"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "81d4f75f99a4e4748225cd49e672452e4e6ea1af", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=a68aefdc463af054e7e98293c06b751c135911d5", "patch": "@@ -300,9 +300,6 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> (Option<CompletedMarker>,\n             let has_trailing_expression =\n                 p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{']));\n             if !has_trailing_expression {\n-                if op == T![..=] {\n-                    p.error(\"expected expression to end inclusive range\");\n-                }\n                 // no RHS\n                 lhs = m.complete(p, RANGE_EXPR);\n                 break;"}, {"sha": "6c171df8d5e323429e0bb6b7dd15c5d3ba986747", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=a68aefdc463af054e7e98293c06b751c135911d5", "patch": "@@ -83,6 +83,7 @@ pub enum SyntaxErrorKind {\n     InvalidMatchInnerAttr,\n     InvalidTupleIndexFormat,\n     VisibilityNotAllowed,\n+    InclusiveRangeMissingEnd,\n }\n \n impl fmt::Display for SyntaxErrorKind {\n@@ -103,6 +104,9 @@ impl fmt::Display for SyntaxErrorKind {\n             VisibilityNotAllowed => {\n                 write!(f, \"unnecessary visibility qualifier\")\n             }\n+            InclusiveRangeMissingEnd => {\n+                write!(f, \"An inclusive range must have an end expression\")\n+            }\n         }\n     }\n }"}, {"sha": "e01333e23ce889239168e1a0e56830852e42203b", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=a68aefdc463af054e7e98293c06b751c135911d5", "patch": "@@ -103,6 +103,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::FieldExpr(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n                 ast::RecordField(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n                 ast::Visibility(it) => { validate_visibility(it, &mut errors) },\n+                ast::RangeExpr(it) => { validate_range_expr(it, &mut errors) },\n                 _ => (),\n             }\n         }\n@@ -227,3 +228,16 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n             .push(SyntaxError::new(SyntaxErrorKind::VisibilityNotAllowed, vis.syntax.text_range()))\n     }\n }\n+\n+fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n+    let last_child = match expr.syntax().last_child_or_token() {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    if last_child.kind() == T![..=] {\n+        errors.push(SyntaxError::new(\n+            SyntaxErrorKind::InclusiveRangeMissingEnd,\n+            last_child.text_range(),\n+        ));\n+    }\n+}"}, {"sha": "0b4ed7a2bc20595bcc63c59a9119f8e60afee18b", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs?ref=a68aefdc463af054e7e98293c06b751c135911d5", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n     0..=;\n+    ..=;\n }"}, {"sha": "749d5360945310e03bfb76b6ce2c117a665223e6", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.txt", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a68aefdc463af054e7e98293c06b751c135911d5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt?ref=a68aefdc463af054e7e98293c06b751c135911d5", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 24)\n-  FN_DEF@[0; 23)\n+SOURCE_FILE@[0; 33)\n+  FN_DEF@[0; 32)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 7)\n@@ -8,8 +8,8 @@ SOURCE_FILE@[0; 24)\n       L_PAREN@[7; 8) \"(\"\n       R_PAREN@[8; 9) \")\"\n     WHITESPACE@[9; 10) \" \"\n-    BLOCK_EXPR@[10; 23)\n-      BLOCK@[10; 23)\n+    BLOCK_EXPR@[10; 32)\n+      BLOCK@[10; 32)\n         L_CURLY@[10; 11) \"{\"\n         WHITESPACE@[11; 16) \"\\n    \"\n         EXPR_STMT@[16; 21)\n@@ -18,7 +18,13 @@ SOURCE_FILE@[0; 24)\n               INT_NUMBER@[16; 17) \"0\"\n             DOTDOTEQ@[17; 20) \"..=\"\n           SEMI@[20; 21) \";\"\n-        WHITESPACE@[21; 22) \"\\n\"\n-        R_CURLY@[22; 23) \"}\"\n-  WHITESPACE@[23; 24) \"\\n\"\n-error 20: expected expression to end inclusive range\n+        WHITESPACE@[21; 26) \"\\n    \"\n+        EXPR_STMT@[26; 30)\n+          RANGE_EXPR@[26; 29)\n+            DOTDOTEQ@[26; 29) \"..=\"\n+          SEMI@[29; 30) \";\"\n+        WHITESPACE@[30; 31) \"\\n\"\n+        R_CURLY@[31; 32) \"}\"\n+  WHITESPACE@[32; 33) \"\\n\"\n+error [17; 20): An inclusive range must have an end expression\n+error [26; 29): An inclusive range must have an end expression"}]}