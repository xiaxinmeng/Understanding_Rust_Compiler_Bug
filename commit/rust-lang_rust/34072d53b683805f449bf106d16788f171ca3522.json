{"sha": "34072d53b683805f449bf106d16788f171ca3522", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDcyZDUzYjY4MzgwNWY0NDliZjEwNmQxNjc4OGYxNzFjYTM1MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:20:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:20:16Z"}, "message": "Rewrite goto implementation tests", "tree": {"sha": "f984836423f65d6e697bf2e3de0b33978b7a642b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f984836423f65d6e697bf2e3de0b33978b7a642b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34072d53b683805f449bf106d16788f171ca3522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34072d53b683805f449bf106d16788f171ca3522", "html_url": "https://github.com/rust-lang/rust/commit/34072d53b683805f449bf106d16788f171ca3522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34072d53b683805f449bf106d16788f171ca3522/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4484908a867fc742104d6ffe63b865a411203276", "url": "https://api.github.com/repos/rust-lang/rust/commits/4484908a867fc742104d6ffe63b865a411203276", "html_url": "https://github.com/rust-lang/rust/commit/4484908a867fc742104d6ffe63b865a411203276"}], "stats": {"total": 223, "additions": 119, "deletions": 104}, "files": [{"sha": "f8a46630460bb6ad1a75cf0b54ee7d83febdaf6d", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=34072d53b683805f449bf106d16788f171ca3522", "patch": "@@ -279,13 +279,17 @@ impl ToNav for hir::Module {\n impl ToNav for hir::ImplDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let frange = if let Some(item) = self.is_builtin_derive(db) {\n+        let derive_attr = self.is_builtin_derive(db);\n+        let frange = if let Some(item) = &derive_attr {\n             original_range(db, item.syntax())\n         } else {\n             original_range(db, src.as_ref().map(|it| it.syntax()))\n         };\n-        let focus_range =\n-            src.value.target_type().map(|ty| original_range(db, src.with_value(ty.syntax())).range);\n+        let focus_range = if derive_attr.is_some() {\n+            None\n+        } else {\n+            src.value.target_type().map(|ty| original_range(db, src.with_value(ty.syntax())).range)\n+        };\n \n         NavigationTarget::from_syntax(\n             frange.file_id,"}, {"sha": "1882789c4aa98b6f13f5c85bacb6bd2c79885424", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 105, "deletions": 88, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=34072d53b683805f449bf106d16788f171ca3522", "patch": "@@ -74,135 +74,152 @@ fn impls_for_trait(\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use ra_db::FileRange;\n \n-    fn check_goto(fixture: &str, expected: &[&str]) {\n-        let (analysis, pos) = analysis_and_position(fixture);\n+    use crate::mock_analysis::{analysis_and_position, MockAnalysis};\n \n-        let mut navs = analysis.goto_implementation(pos).unwrap().unwrap().info;\n-        assert_eq!(navs.len(), expected.len());\n-        navs.sort_by_key(|nav| (nav.file_id(), nav.full_range().start()));\n-        navs.into_iter().enumerate().for_each(|(i, nav)| nav.assert_match(expected[i]));\n+    fn check(ra_fixture: &str) {\n+        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n+        let annotations = mock.annotations();\n+        let analysis = mock.analysis();\n+\n+        let navs = analysis.goto_implementation(position).unwrap().unwrap().info;\n+\n+        let key = |frange: &FileRange| (frange.file_id, frange.range.start());\n+\n+        let mut expected = annotations\n+            .into_iter()\n+            .map(|(range, data)| {\n+                assert!(data.is_empty());\n+                range\n+            })\n+            .collect::<Vec<_>>();\n+        expected.sort_by_key(key);\n+\n+        let mut actual = navs\n+            .into_iter()\n+            .map(|nav| FileRange { file_id: nav.file_id(), range: nav.range() })\n+            .collect::<Vec<_>>();\n+        actual.sort_by_key(key);\n+\n+        assert_eq!(expected, actual);\n     }\n \n     #[test]\n     fn goto_implementation_works() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo<|>;\n-            impl Foo {}\n-            \",\n-            &[\"impl IMPL_DEF FileId(1) 12..23\"],\n+        check(\n+            r#\"\n+struct Foo<|>;\n+impl Foo {}\n+   //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_works_multiple_blocks() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo<|>;\n-            impl Foo {}\n-            impl Foo {}\n-            \",\n-            &[\"impl IMPL_DEF FileId(1) 12..23\", \"impl IMPL_DEF FileId(1) 24..35\"],\n+        check(\n+            r#\"\n+struct Foo<|>;\n+impl Foo {}\n+   //^^^\n+impl Foo {}\n+   //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_works_multiple_mods() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo<|>;\n-            mod a {\n-                impl super::Foo {}\n-            }\n-            mod b {\n-                impl super::Foo {}\n-            }\n-            \",\n-            &[\"impl IMPL_DEF FileId(1) 24..42\", \"impl IMPL_DEF FileId(1) 57..75\"],\n+        check(\n+            r#\"\n+struct Foo<|>;\n+mod a {\n+    impl super::Foo {}\n+       //^^^^^^^^^^\n+}\n+mod b {\n+    impl super::Foo {}\n+       //^^^^^^^^^^\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_works_multiple_files() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo<|>;\n-            mod a;\n-            mod b;\n-            //- /a.rs\n-            impl crate::Foo {}\n-            //- /b.rs\n-            impl crate::Foo {}\n-            \",\n-            &[\"impl IMPL_DEF FileId(2) 0..18\", \"impl IMPL_DEF FileId(3) 0..18\"],\n+        check(\n+            r#\"\n+//- /lib.rs\n+struct Foo<|>;\n+mod a;\n+mod b;\n+//- /a.rs\n+impl crate::Foo {}\n+   //^^^^^^^^^^\n+//- /b.rs\n+impl crate::Foo {}\n+   //^^^^^^^^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_for_trait() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            trait T<|> {}\n-            struct Foo;\n-            impl T for Foo {}\n-            \",\n-            &[\"impl IMPL_DEF FileId(1) 23..40\"],\n+        check(\n+            r#\"\n+trait T<|> {}\n+struct Foo;\n+impl T for Foo {}\n+         //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_for_trait_multiple_files() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            trait T<|> {};\n-            struct Foo;\n-            mod a;\n-            mod b;\n-            //- /a.rs\n-            impl crate::T for crate::Foo {}\n-            //- /b.rs\n-            impl crate::T for crate::Foo {}\n-            \",\n-            &[\"impl IMPL_DEF FileId(2) 0..31\", \"impl IMPL_DEF FileId(3) 0..31\"],\n+        check(\n+            r#\"\n+//- /lib.rs\n+trait T<|> {};\n+struct Foo;\n+mod a;\n+mod b;\n+//- /a.rs\n+impl crate::T for crate::Foo {}\n+                //^^^^^^^^^^\n+//- /b.rs\n+impl crate::T for crate::Foo {}\n+                //^^^^^^^^^^\n+            \"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_all_impls() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            trait T {}\n-            struct Foo<|>;\n-            impl Foo {}\n-            impl T for Foo {}\n-            impl T for &Foo {}\n-            \",\n-            &[\n-                \"impl IMPL_DEF FileId(1) 23..34\",\n-                \"impl IMPL_DEF FileId(1) 35..52\",\n-                \"impl IMPL_DEF FileId(1) 53..71\",\n-            ],\n+        check(\n+            r#\"\n+//- /lib.rs\n+trait T {}\n+struct Foo<|>;\n+impl Foo {}\n+   //^^^\n+impl T for Foo {}\n+         //^^^\n+impl T for &Foo {}\n+         //^^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_implementation_to_builtin_derive() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            #[derive(Copy)]\n-            struct Foo<|>;\n-            \",\n-            &[\"impl IMPL_DEF FileId(1) 0..15\"],\n+        check(\n+            r#\"\n+  #[derive(Copy)]\n+//^^^^^^^^^^^^^^^\n+struct Foo<|>;\n+\"#,\n         );\n     }\n }"}, {"sha": "db6d50694a9761a1753116b25e6268c0337deafc", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34072d53b683805f449bf106d16788f171ca3522/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=34072d53b683805f449bf106d16788f171ca3522", "patch": "@@ -10,8 +10,6 @@ use test_utils::{\n use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n };\n-use ra_syntax::TextRange;\n-use rustc_hash::FxHashMap;\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -81,27 +79,23 @@ impl MockAnalysis {\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)\n     }\n-    pub fn annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+    pub fn annotations(&self) -> Vec<(FileRange, String)> {\n         self.files\n             .iter()\n             .enumerate()\n-            .filter_map(|(idx, fixture)| {\n+            .flat_map(|(idx, fixture)| {\n                 let file_id = FileId(idx as u32 + 1);\n                 let annotations = extract_annotations(&fixture.text);\n-                if annotations.is_empty() {\n-                    return None;\n-                }\n-                Some((file_id, annotations))\n+                annotations\n+                    .into_iter()\n+                    .map(move |(range, data)| (FileRange { file_id, range }, data))\n             })\n             .collect()\n     }\n     pub fn annotation(&self) -> (FileRange, String) {\n-        let all = self.annotations();\n+        let mut all = self.annotations();\n         assert_eq!(all.len(), 1);\n-        let (file_id, mut for_file) = all.into_iter().next().unwrap();\n-        assert_eq!(for_file.len(), 1);\n-        let (range, data) = for_file.pop().unwrap();\n-        (FileRange { file_id, range}, data)\n+        all.pop().unwrap()\n     }\n     pub fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();"}]}