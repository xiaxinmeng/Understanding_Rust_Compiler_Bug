{"sha": "93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDc0MTg3YjZjN2FlZWVjNmE4ZmQyODU3NGJmYWQ3YTQ2MDhlMWY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-23T03:38:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-23T03:38:03Z"}, "message": "Rollup merge of #40696 - cramertj:remove-unused-adt-def-code, r=petrochenkov\n\nRemove unused adt-def insertion by constructor DefIndex\n\nIt looks to me like ADT definitions weren't being looked up by constructor id, and a test run supports my theory.\n\nIn any case, I'm not sure it would have worked in its current configuration. If I understand correctly, the `adt_def` map entry from constructor id -> adt def would only be present after a successful call to `queries::adt_def::get` with the proper ADT `DefIndex`. Trying to look up an adt_def by the constructor index prior to a successful lookup by ADT index would fail since `item.kind` would be `EntryKind::Fn` (for the constructor function) and so would trigger the `bug!`.\n\nr? @nikomatsakis", "tree": {"sha": "7447808378b144534bdac51dce3a48670cda23a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7447808378b144534bdac51dce3a48670cda23a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "html_url": "https://github.com/rust-lang/rust/commit/93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93074187b6c7aeeec6a8fd28574bfad7a4608e1f/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e4a272049f00f55208c04fa8c6a8dfcdbe4c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e4a272049f00f55208c04fa8c6a8dfcdbe4c8a", "html_url": "https://github.com/rust-lang/rust/commit/39e4a272049f00f55208c04fa8c6a8dfcdbe4c8a"}, {"sha": "873248d87d1b376c0411d474c665cc6eeefbb16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/873248d87d1b376c0411d474c665cc6eeefbb16c", "html_url": "https://github.com/rust-lang/rust/commit/873248d87d1b376c0411d474c665cc6eeefbb16c"}], "stats": {"total": 18, "additions": 2, "deletions": 16}, "files": [{"sha": "6ccdf8092f210491c856774bb92ea632ccaf91bc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93074187b6c7aeeec6a8fd28574bfad7a4608e1f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93074187b6c7aeeec6a8fd28574bfad7a4608e1f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "patch": "@@ -558,7 +558,6 @@ impl<'a, 'tcx> CrateMetadata {\n             EntryKind::Union(_, _) => ty::AdtKind::Union,\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n-        let mut ctor_index = None;\n         let variants = if let ty::AdtKind::Enum = kind {\n             item.children\n                 .decode(self)\n@@ -570,8 +569,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 })\n                 .collect()\n         } else {\n-            let (variant, struct_ctor) = self.get_variant(&item, item_id, tcx);\n-            ctor_index = struct_ctor;\n+            let (variant, _struct_ctor) = self.get_variant(&item, item_id, tcx);\n             vec![variant]\n         };\n         let (kind, repr) = match item.kind {\n@@ -581,13 +579,7 @@ impl<'a, 'tcx> CrateMetadata {\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n \n-        let adt = tcx.alloc_adt_def(did, kind, variants, repr);\n-        if let Some(ctor_index) = ctor_index {\n-            // Make adt definition available through constructor id as well.\n-            tcx.maps.adt_def.borrow_mut().insert(self.local_def_id(ctor_index), adt);\n-        }\n-\n-        adt\n+        tcx.alloc_adt_def(did, kind, variants, repr)\n     }\n \n     pub fn get_predicates(&self,"}, {"sha": "1ed42b842c6fafa3911ba8121a2a445259a3bdff", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93074187b6c7aeeec6a8fd28574bfad7a4608e1f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93074187b6c7aeeec6a8fd28574bfad7a4608e1f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=93074187b6c7aeeec6a8fd28574bfad7a4608e1f", "patch": "@@ -689,12 +689,6 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let item = match tcx.hir.get(node_id) {\n         NodeItem(item) => item,\n-\n-        // Make adt definition available through constructor id as well.\n-        NodeStructCtor(_) => {\n-            return tcx.lookup_adt_def(tcx.hir.get_parent_did(node_id));\n-        }\n-\n         _ => bug!()\n     };\n "}]}