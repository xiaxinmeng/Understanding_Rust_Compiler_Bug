{"sha": "ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "node_id": "C_kwDOAAsO6NoAKGVlOGJjNWIwYjIxYWIxYWFjMGU5ZGI3NmY5NGFhZGNhMTA3NmY5Njk", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-21T14:15:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-03-01T09:19:26Z"}, "message": "Use FxIndexSet instead of FxHashSet for asm_target_features query.", "tree": {"sha": "1099304f2b834f25ee4ad32863fc81fb635c29c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1099304f2b834f25ee4ad32863fc81fb635c29c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "html_url": "https://github.com/rust-lang/rust/commit/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0202d9c2c03e62cf72554af4a537969b463d3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0202d9c2c03e62cf72554af4a537969b463d3e8", "html_url": "https://github.com/rust-lang/rust/commit/b0202d9c2c03e62cf72554af4a537969b463d3e8"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "0dbdf4a05e8eac9b6268c7dcec9e70c69edc21a1", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast;\n use rustc_attr::InstructionSetAttr;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Applicability;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -418,7 +418,7 @@ pub fn from_target_feature(\n \n /// Computes the set of target features used in a function for the purposes of\n /// inline assembly.\n-fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxHashSet<Symbol> {\n+fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxIndexSet<Symbol> {\n     let mut target_features = tcx.sess.unstable_target_features.clone();\n     if tcx.def_kind(did).has_codegen_attrs() {\n         let attrs = tcx.codegen_fn_attrs(did);"}, {"sha": "172b84bafb2157aa757c263354267a603fbbd005", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::InlineAsmTemplatePiece;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitableExt, UintTy};\n use rustc_session::lint;\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         template: &[InlineAsmTemplatePiece],\n         is_input: bool,\n         tied_input: Option<(&'tcx hir::Expr<'tcx>, Option<InlineAsmType>)>,\n-        target_features: &FxHashSet<Symbol>,\n+        target_features: &FxIndexSet<Symbol>,\n     ) -> Option<InlineAsmType> {\n         let ty = (self.get_operand_ty)(expr);\n         if ty.has_non_region_infer() {\n@@ -201,7 +201,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         // (!). In that case we still need the earlier check to verify that the\n         // register class is usable at all.\n         if let Some(feature) = feature {\n-            if !target_features.contains(&feature) {\n+            if !target_features.contains(feature) {\n                 let msg = &format!(\"`{}` target feature is not enabled\", feature);\n                 let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n                 err.note(&format!("}, {"sha": "55ea78c0474e092c80c37de940db95c3f4b99c62", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -94,7 +94,8 @@ macro_rules! arena_types {\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n             [decode] attribute: rustc_ast::Attribute,\n-            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n+            [] name_set: rustc_data_structures::unord::UnordSet<rustc_span::symbol::Symbol>,\n+            [] ordered_name_set: rustc_data_structures::fx::FxIndexSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types"}, {"sha": "be5aa49a0d03a5cc5703800513931e0919ddaf8a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1212,7 +1212,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query asm_target_features(def_id: DefId) -> &'tcx FxHashSet<Symbol> {\n+    query asm_target_features(def_id: DefId) -> &'tcx FxIndexSet<Symbol> {\n         desc { |tcx| \"computing target features for inline asm of `{}`\", tcx.def_path_str(def_id) }\n     }\n "}, {"sha": "0ef3b026ab0e4fa62f42d3cec3191629bee3b1ef", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -11,7 +11,7 @@ use crate::{filesearch, lint};\n pub use rustc_ast::attr::MarkedAttrs;\n pub use rustc_ast::Attribute;\n use rustc_data_structures::flock;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::jobserver::{self, Client};\n use rustc_data_structures::profiling::{duration_to_secs_str, SelfProfiler, SelfProfilerRef};\n use rustc_data_structures::sync::{\n@@ -207,10 +207,10 @@ pub struct Session {\n     pub asm_arch: Option<InlineAsmArch>,\n \n     /// Set of enabled features for the current target.\n-    pub target_features: FxHashSet<Symbol>,\n+    pub target_features: FxIndexSet<Symbol>,\n \n     /// Set of enabled features for the current target, including unstable ones.\n-    pub unstable_target_features: FxHashSet<Symbol>,\n+    pub unstable_target_features: FxIndexSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1484,8 +1484,8 @@ pub fn build_session(\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,\n-        target_features: FxHashSet::default(),\n-        unstable_target_features: FxHashSet::default(),\n+        target_features: Default::default(),\n+        unstable_target_features: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "97132311a5c9ad9f56e755089174f21ea6055393", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -80,7 +80,7 @@ pub fn target_reserves_x18(target: &Target) -> bool {\n fn reserved_x18(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "514e30ae0204da2860f371f5d8b4409bdd15705b", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;\n@@ -64,14 +64,14 @@ impl ArmInlineAsmRegClass {\n }\n \n // This uses the same logic as useR7AsFramePointer in LLVM\n-fn frame_pointer_is_r7(target_features: &FxHashSet<Symbol>, target: &Target) -> bool {\n+fn frame_pointer_is_r7(target_features: &FxIndexSet<Symbol>, target: &Target) -> bool {\n     target.is_like_osx || (!target.is_like_windows && target_features.contains(&sym::thumb_mode))\n }\n \n fn frame_pointer_r11(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -87,7 +87,7 @@ fn frame_pointer_r11(\n fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -101,7 +101,7 @@ fn frame_pointer_r7(\n fn not_thumb1(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -118,7 +118,7 @@ fn not_thumb1(\n fn reserved_r9(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "0dbfd4267818b6fae1da27367fdecd8f2097c0a1", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::Target;\n use crate::{abi::Size, spec::RelocModel};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -37,13 +37,14 @@ macro_rules! def_reg_class {\n \n         pub(super) fn regclass_map() -> rustc_data_structures::fx::FxHashMap<\n             super::InlineAsmRegClass,\n-            rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n+            rustc_data_structures::fx::FxIndexSet<super::InlineAsmReg>,\n         > {\n-            use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+            use rustc_data_structures::fx::FxHashMap;\n+            use rustc_data_structures::fx::FxIndexSet;\n             use super::InlineAsmRegClass;\n             let mut map = FxHashMap::default();\n             $(\n-                map.insert(InlineAsmRegClass::$arch($arch_regclass::$class), FxHashSet::default());\n+                map.insert(InlineAsmRegClass::$arch($arch_regclass::$class), FxIndexSet::default());\n             )*\n             map\n         }\n@@ -94,7 +95,7 @@ macro_rules! def_regs {\n             pub fn validate(self,\n                 _arch: super::InlineAsmArch,\n                 _reloc_model: crate::spec::RelocModel,\n-                _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n+                _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,\n                 _target: &crate::spec::Target,\n                 _is_clobber: bool,\n             ) -> Result<(), &'static str> {\n@@ -118,11 +119,11 @@ macro_rules! def_regs {\n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n             _reloc_model: crate::spec::RelocModel,\n-            _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n+            _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,\n             _target: &crate::spec::Target,\n             _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n-                rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n+                rustc_data_structures::fx::FxIndexSet<super::InlineAsmReg>,\n             >,\n         ) {\n             #[allow(unused_imports)]\n@@ -334,7 +335,7 @@ impl InlineAsmReg {\n         self,\n         arch: InlineAsmArch,\n         reloc_model: RelocModel,\n-        target_features: &FxHashSet<Symbol>,\n+        target_features: &FxIndexSet<Symbol>,\n         target: &Target,\n         is_clobber: bool,\n     ) -> Result<(), &'static str> {\n@@ -701,9 +702,9 @@ impl fmt::Display for InlineAsmType {\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &crate::spec::Target,\n-) -> FxHashMap<InlineAsmRegClass, FxHashSet<InlineAsmReg>> {\n+) -> FxHashMap<InlineAsmRegClass, FxIndexSet<InlineAsmReg>> {\n     match arch {\n         InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n             let mut map = x86::regclass_map();"}, {"sha": "dea6d50fe2ba83239bf1139fad0beb661e0bf67a", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;\n@@ -55,7 +55,7 @@ impl RiscVInlineAsmRegClass {\n fn not_e(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "3902dac7ff654acf5d41e0f025c3c83f0f29dd61", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -147,7 +147,7 @@ impl X86InlineAsmRegClass {\n fn x86_64_only(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -161,7 +161,7 @@ fn x86_64_only(\n fn high_byte(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -174,7 +174,7 @@ fn high_byte(\n fn rbx_reserved(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -190,7 +190,7 @@ fn rbx_reserved(\n fn esi_reserved(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}]}