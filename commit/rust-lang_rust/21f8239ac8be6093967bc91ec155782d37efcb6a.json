{"sha": "21f8239ac8be6093967bc91ec155782d37efcb6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjgyMzlhYzhiZTYwOTM5NjdiYzkxZWMxNTU3ODJkMzdlZmNiNmE=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-01-08T14:46:48Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-01-09T14:41:29Z"}, "message": "Fixed typos in code comments", "tree": {"sha": "e4af0f0077f2d736db4651673dbab3d274275f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4af0f0077f2d736db4651673dbab3d274275f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f8239ac8be6093967bc91ec155782d37efcb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f8239ac8be6093967bc91ec155782d37efcb6a", "html_url": "https://github.com/rust-lang/rust/commit/21f8239ac8be6093967bc91ec155782d37efcb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f8239ac8be6093967bc91ec155782d37efcb6a/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939ca83b34f9a5648d196f85e5cc7d844ba22604", "url": "https://api.github.com/repos/rust-lang/rust/commits/939ca83b34f9a5648d196f85e5cc7d844ba22604", "html_url": "https://github.com/rust-lang/rust/commit/939ca83b34f9a5648d196f85e5cc7d844ba22604"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "c8c5fecd7069446a1ff3596d784dda5f1b932801", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -1,6 +1,6 @@\n //! Utility module for converting between hir_def ids and code_model wrappers.\n //!\n-//! It's unclear if we need this long-term, but it's definitelly useful while we\n+//! It's unclear if we need this long-term, but it's definitely useful while we\n //! are splitting the hir.\n \n use hir_def::{"}, {"sha": "3dc33f248faedf91425888504c853b8f1d27ee57", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -581,7 +581,7 @@ impl ExprCollector<'_> {\n         match res.value {\n             Some((mark, expansion)) => {\n                 // FIXME: Statements are too complicated to recover from error for now.\n-                // It is because we don't have any hygenine for local variable expansion right now.\n+                // It is because we don't have any hygiene for local variable expansion right now.\n                 if T::can_cast(syntax::SyntaxKind::MACRO_STMTS) && res.err.is_some() {\n                     self.expander.exit(self.db, mark);\n                     collector(self, None);\n@@ -959,7 +959,7 @@ impl ExprCollector<'_> {\n \n     fn collect_tuple_pat(&mut self, args: AstChildren<ast::Pat>) -> (Vec<PatId>, Option<usize>) {\n         // Find the location of the `..`, if there is one. Note that we do not\n-        // consider the possiblity of there being multiple `..` here.\n+        // consider the possibility of there being multiple `..` here.\n         let ellipsis = args.clone().position(|p| matches!(p, ast::Pat::RestPat(_)));\n         // We want to skip the `..` pattern here, since we account for it above.\n         let args = args"}, {"sha": "76f5721e58786424ecf0b368ed5c654cb8f8b732", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -1,6 +1,6 @@\n //! This module describes hir-level representation of expressions.\n //!\n-//! This representaion is:\n+//! This representation is:\n //!\n //! 1. Identity-based. Each expression has an `id`, so we can distinguish\n //!    between different `1` in `1 + 1`."}, {"sha": "f027fd48d35cbaaa76e72befd60391cd8aa8e24c", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -267,7 +267,7 @@ impl DefCollector<'_> {\n \n         // Resolve all indeterminate resolved imports again\n         // As some of the macros will expand newly import shadowing partial resolved imports\n-        // FIXME: We maybe could skip this, if we handle the Indetermine imports in `resolve_imports`\n+        // FIXME: We maybe could skip this, if we handle the indeterminate imports in `resolve_imports`\n         // correctly\n         let partial_resolved = self.resolved_imports.iter().filter_map(|directive| {\n             if let PartialResolvedImport::Indeterminate(_) = directive.status {\n@@ -402,7 +402,7 @@ impl DefCollector<'_> {\n \n     /// Define a proc macro\n     ///\n-    /// A proc macro is similar to normal macro scope, but it would not visiable in legacy textual scoped.\n+    /// A proc macro is similar to normal macro scope, but it would not visible in legacy textual scoped.\n     /// And unconditionally exported.\n     fn define_proc_macro(&mut self, name: Name, macro_: MacroDefId) {\n         self.update(\n@@ -592,7 +592,7 @@ impl DefCollector<'_> {\n                     // XXX: urgh, so this works by accident! Here, we look at\n                     // the enum data, and, in theory, this might require us to\n                     // look back at the crate_def_map, creating a cycle. For\n-                    // example, `enum E { crate::some_macro!(); }`. Luckely, the\n+                    // example, `enum E { crate::some_macro!(); }`. Luckily, the\n                     // only kind of macro that is allowed inside enum is a\n                     // `cfg_macro`, and we don't need to run name resolution for\n                     // it, but this is sheer luck!\n@@ -655,7 +655,7 @@ impl DefCollector<'_> {\n         &mut self,\n         module_id: LocalModuleId,\n         resolutions: &[(Option<Name>, PerNs)],\n-        // All resolutions are imported with this visibility; the visibilies in\n+        // All resolutions are imported with this visibility; the visibilities in\n         // the `PerNs` values are ignored and overwritten\n         vis: Visibility,\n         import_type: ImportType,"}, {"sha": "e4152a0be4b23a6ebd36a27d99d06f02830b2264", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -27,7 +27,7 @@ use crate::{\n \n #[derive(Debug, Clone, Default)]\n pub struct Resolver {\n-    // FIXME: all usages generally call `.rev`, so maybe reverse once in consturciton?\n+    // FIXME: all usages generally call `.rev`, so maybe reverse once in construction?\n     scopes: Vec<Scope>,\n }\n "}, {"sha": "c6208639050e0f42e1cfcdf65ee4fba0233ace1f", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -40,7 +40,7 @@ impl TokenExpander {\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n-                // We store the result in salsa db to prevent non-determinisc behavior in\n+                // We store the result in salsa db to prevent non-deterministic behavior in\n                 // some proc-macro implementation\n                 // See #4315 for details\n                 db.expand_proc_macro(id.into()).into()"}, {"sha": "61c47eec876d9959241cd8ee8dc3c5a79c898444", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -14,7 +14,7 @@\n //! The algorithm implemented here is a modified version of the one described in\n //! <http://moscova.inria.fr/~maranget/papers/warn/index.html>.\n //! However, to save future implementors from reading the original paper, we\n-//! summarise the algorithm here to hopefully save time and be a little clearer\n+//! summarize the algorithm here to hopefully save time and be a little clearer\n //! (without being so rigorous).\n //!\n //! The core of the algorithm revolves about a \"usefulness\" check. In particular, we\n@@ -132,7 +132,7 @@\n //! The algorithm is inductive (on the number of columns: i.e., components of tuple patterns).\n //! That means we're going to check the components from left-to-right, so the algorithm\n //! operates principally on the first component of the matrix and new pattern-stack `p`.\n-//! This algorithm is realised in the `is_useful` function.\n+//! This algorithm is realized in the `is_useful` function.\n //!\n //! Base case (`n = 0`, i.e., an empty tuple pattern):\n //! - If `P` already contains an empty pattern (i.e., if the number of patterns `m > 0`), then"}, {"sha": "72ddf369028545653d6c478c972d7564f6ad9e76", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Defi\n         if target.contains(\"://\") {\n             (target.to_string(), title.to_string())\n         } else {\n-            // Two posibilities:\n+            // Two possibilities:\n             // * path-based links: `../../module/struct.MyStruct.html`\n             // * module-based links (AKA intra-doc links): `super::super::module::MyStruct`\n             if let Some(rewritten) = rewrite_intra_doc_link(db, *definition, target, title) {\n@@ -420,7 +420,7 @@ fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem)\n                     function.as_assoc_item(db).map(|assoc| assoc.container(db)),\n                     Some(AssocItemContainer::Trait(..))\n                 );\n-                // This distinction may get more complicated when specialisation is available.\n+                // This distinction may get more complicated when specialization is available.\n                 // Rustdoc makes this decision based on whether a method 'has defaultness'.\n                 // Currently this is only the case for provided trait methods.\n                 if is_trait_method && !function.has_body(db) {"}, {"sha": "165b32ef938d4c6dde8a46975bbaf5a54164e298", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -1951,16 +1951,16 @@ struct S {\n /// Test cases:\n /// case 1.  bare URL: https://www.example.com/\n /// case 2.  inline URL with title: [example](https://www.example.com/)\n-/// case 3.  code refrence: [`Result`]\n-/// case 4.  code refrence but miss footnote: [`String`]\n+/// case 3.  code reference: [`Result`]\n+/// case 4.  code reference but miss footnote: [`String`]\n /// case 5.  autolink: <http://www.example.com/>\n /// case 6.  email address: <test@example.com>\n-/// case 7.  refrence: [example][example]\n+/// case 7.  reference: [example][example]\n /// case 8.  collapsed link: [example][]\n /// case 9.  shortcut link: [example]\n /// case 10. inline without URL: [example]()\n-/// case 11. refrence: [foo][foo]\n-/// case 12. refrence: [foo][bar]\n+/// case 11. reference: [foo][foo]\n+/// case 12. reference: [foo][bar]\n /// case 13. collapsed link: [foo][]\n /// case 14. shortcut link: [foo]\n /// case 15. inline without URL: [foo]()\n@@ -1987,16 +1987,16 @@ pub fn fo$0o() {}\n                 Test cases:\n                 case 1.  bare URL: https://www.example.com/\n                 case 2.  inline URL with title: [example](https://www.example.com/)\n-                case 3.  code refrence: `Result`\n-                case 4.  code refrence but miss footnote: `String`\n+                case 3.  code reference: `Result`\n+                case 4.  code reference but miss footnote: `String`\n                 case 5.  autolink: http://www.example.com/\n                 case 6.  email address: test@example.com\n-                case 7.  refrence: example\n+                case 7.  reference: example\n                 case 8.  collapsed link: example\n                 case 9.  shortcut link: example\n                 case 10. inline without URL: example\n-                case 11. refrence: foo\n-                case 12. refrence: foo\n+                case 11. reference: foo\n+                case 12. reference: foo\n                 case 13. collapsed link: foo\n                 case 14. shortcut link: foo\n                 case 15. inline without URL: foo"}, {"sha": "37a95e1c5eb9ff6ba9a8526ae7ed13883ae248ef", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -3,7 +3,7 @@\n //! or `ast::NameRef`. If it's a `ast::NameRef`, at the classification step we\n //! try to resolve the direct tree parent of this element, otherwise we\n //! already have a definition and just need to get its HIR together with\n-//! some information that is needed for futher steps of searching.\n+//! some information that is needed for further steps of searching.\n //! After that, we collect files that might contain references and look\n //! for text occurrences of the identifier. If there's an `ast::NameRef`\n //! at the index that the match starts at and its tree parent is"}, {"sha": "099900673aa5a6cbb330445e7c5a0bfa5c844643", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -945,7 +945,7 @@ use crate::foo$0::FooContent;\n //- /lib.rs\n mod fo$0o;\n //- /foo/mod.rs\n-// emtpy\n+// empty\n \"#,\n             expect![[r#\"\n                 RangeInfo {\n@@ -995,7 +995,7 @@ mod fo$0o;\n mod outer { mod fo$0o; }\n \n //- /outer/foo.rs\n-// emtpy\n+// empty\n \"#,\n             expect![[r#\"\n                 RangeInfo {"}, {"sha": "e9f23adf8388d8d7fa439168a3f8f353a9fe19c3", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -1,4 +1,4 @@\n-//! This module contains an import search funcionality that is provided to the assists module.\n+//! This module contains an import search functionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n use hir::{import_map, AsAssocItem, Crate, MacroDef, ModuleDef, Semantics};"}, {"sha": "d32e60521471de37d7620525eb57513f4d7277b1", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -378,7 +378,7 @@ pub(super) fn match_repeat(\n     src: &mut TtIter,\n ) -> Result<(), ExpandError> {\n     // Dirty hack to make macro-expansion terminate.\n-    // This should be replaced by a propper macro-by-example implementation\n+    // This should be replaced by a proper macro-by-example implementation\n     let mut limit = 65536;\n     let mut counter = 0;\n "}, {"sha": "7194a107bbe006ce0518bb8b35cabe5df5ebe342", "filename": "crates/mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -67,7 +67,7 @@ struct NestingState {\n     /// because there is no variable in use by the current repetition\n     hit: bool,\n     /// `at_end` is currently necessary to tell `expand_repeat` if it should stop\n-    /// because there is no more value avaible for the current repetition\n+    /// because there is no more value available for the current repetition\n     at_end: bool,\n }\n "}, {"sha": "244a81e99bbda8ed4c336c1c59f926515f0eb652", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -149,7 +149,7 @@ impl TokenMap {\n     }\n \n     fn remove_delim(&mut self, idx: usize) {\n-        // FIXME: This could be accidently quadratic\n+        // FIXME: This could be accidentally quadratic\n         self.entries.remove(idx);\n     }\n }"}, {"sha": "5cb8b08e715c381225a42d49643f429565ed95a5", "filename": "crates/parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -46,7 +46,7 @@ fn use_tree(p: &mut Parser, top_level: bool) {\n         // test use_tree_list\n         // use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n         // use {path::from::root}; // Rust 2015\n-        // use ::{some::arbritrary::path}; // Rust 2015\n+        // use ::{some::arbitrary::path}; // Rust 2015\n         // use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting\n         T!['{'] => {\n             use_tree_list(p);"}, {"sha": "970f165edc3f5a3b68cf95b52d0d3cf81871b9f6", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -79,7 +79,7 @@ impl Message for Response {}\n fn read_json(inp: &mut impl BufRead) -> io::Result<Option<String>> {\n     let mut buf = String::new();\n     inp.read_line(&mut buf)?;\n-    buf.pop(); // Remove traling '\\n'\n+    buf.pop(); // Remove trailing '\\n'\n     Ok(match buf.len() {\n         0 => None,\n         _ => Some(buf),"}, {"sha": "bd1e7c2fcede9102f4dbb4351db83229a2228791", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -251,7 +251,7 @@ impl<S> DecodeMut<'_, '_, S> for String {\n     }\n }\n \n-/// Simplied version of panic payloads, ignoring\n+/// Simplified version of panic payloads, ignoring\n /// types other than `&'static str` and `String`.\n #[derive(Debug)]\n pub enum PanicMessage {"}, {"sha": "e6006a3c8ce7832232c8b243846ecaf671b7469a", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -4,7 +4,7 @@\n //! The lib-proc-macro server backend is `TokenStream`-agnostic, such that\n //! we could provide any TokenStream implementation.\n //! The original idea from fedochet is using proc-macro2 as backend,\n-//! we use tt instead for better intergation with RA.\n+//! we use tt instead for better integration with RA.\n //!\n //! FIXME: No span and source file information is implemented yet\n "}, {"sha": "6ca94921f70c1732acf3731c67914beaa4048b93", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -130,7 +130,7 @@ pub(crate) fn apply_document_changes(\n }\n \n /// Checks that the edits inside the completion and the additional edits do not overlap.\n-/// LSP explicitly forbits the additional edits to overlap both with the main edit and themselves.\n+/// LSP explicitly forbids the additional edits to overlap both with the main edit and themselves.\n pub(crate) fn all_edits_are_disjoint(\n     completion: &lsp_types::CompletionItem,\n     additional_edits: &[lsp_types::TextEdit],"}, {"sha": "1ed8a96e5fcb7381ade83af86f3db05558bb2b0d", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -241,7 +241,7 @@ pub fn wildcard_pat() -> ast::WildcardPat {\n     }\n }\n \n-/// Creates a tuple of patterns from an interator of patterns.\n+/// Creates a tuple of patterns from an iterator of patterns.\n ///\n /// Invariant: `pats` must be length > 1\n ///"}, {"sha": "7c8d0a4c48c409b73b0eb0687e2ef2be2201ff13", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -24,7 +24,7 @@ pub struct Token {\n /// Beware that it checks for shebang first and its length contributes to resulting\n /// tokens offsets.\n pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n-    // non-empty string is a precondtion of `rustc_lexer::strip_shebang()`.\n+    // non-empty string is a precondition of `rustc_lexer::strip_shebang()`.\n     if text.is_empty() {\n         return Default::default();\n     }\n@@ -76,7 +76,7 @@ pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxEr\n }\n \n /// The same as `lex_single_syntax_kind()` but returns only `SyntaxKind` and\n-/// returns `None` if any tokenization error occured.\n+/// returns `None` if any tokenization error occurred.\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n@@ -96,7 +96,7 @@ pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n-    // non-empty string is a precondtion of `rustc_lexer::first_token()`.\n+    // non-empty string is a precondition of `rustc_lexer::first_token()`.\n     if text.is_empty() {\n         return None;\n     }\n@@ -117,7 +117,7 @@ fn rustc_token_kind_to_syntax_kind(\n     token_text: &str,\n ) -> (SyntaxKind, Option<&'static str>) {\n     // A note on an intended tradeoff:\n-    // We drop some useful infromation here (see patterns with double dots `..`)\n+    // We drop some useful information here (see patterns with double dots `..`)\n     // Storing that info in `SyntaxKind` is not possible due to its layout requirements of\n     // being `u16` that come from `rowan::SyntaxKind`.\n "}, {"sha": "e19d2ad616e931011950cb4d1b3e33fd343f5645", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f8239ac8be6093967bc91ec155782d37efcb6a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=21f8239ac8be6093967bc91ec155782d37efcb6a", "patch": "@@ -63,7 +63,7 @@ pub fn extract_offset(text: &str) -> (TextSize, String) {\n     }\n }\n \n-/// Returns the offset of the first occurence of `$0` marker and the copy of `text`\n+/// Returns the offset of the first occurrence of `$0` marker and the copy of `text`\n /// without the marker.\n fn try_extract_offset(text: &str) -> Option<(TextSize, String)> {\n     let cursor_pos = text.find(CURSOR_MARKER)?;"}]}