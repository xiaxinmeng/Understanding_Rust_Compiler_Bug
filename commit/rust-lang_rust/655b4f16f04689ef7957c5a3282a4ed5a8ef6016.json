{"sha": "655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NWI0ZjE2ZjA0Njg5ZWY3OTU3YzVhMzI4MmE0ZWQ1YThlZjYwMTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-22T14:17:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:17:06Z"}, "message": "Merge #3679\n\n3679: Some miniscule refactorings r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "bce7301baad49d8abb15c0a7e3ab7c30beda5c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce7301baad49d8abb15c0a7e3ab7c30beda5c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3NiCRBK7hj4Ov3rIwAAdHIIAGNOShFhEzwVku5vQWqhTOT9\nmhAhp3IKoEYLrQzVZwb5VT1bs9UyqNewGxV0iW2ww6DK+nBoRCVlcNFQIS+vb4sc\nME1EDDPZhvjXmLsfL3tpv9lScdo3FLy9pXlanYeH00ofu0eF3r1U/YLPwnuRCch7\nKX2dZCgJ/DTW0vM4D1CCNymjBK0aLWhu/nwXvJRg3V7NfvbcQQ8xa57+03hVF8Zt\n+1aveG3Dw8na+2siUmqKXEgJY09RZC1qOqqrEPdTNLxcfI1nD/2BIVm2u76pgqYX\nsU0PpLg2ktPAKUeu3bdCzOzyfFNU6Yy/9PtlWZHWe+bW9Cx00LgVVFQY9blsxKs=\n=GLgi\n-----END PGP SIGNATURE-----\n", "payload": "tree bce7301baad49d8abb15c0a7e3ab7c30beda5c15\nparent 6fe956420fc63609a84dd005b8190b1f19fff280\nparent bfb6e3fd836650dd477c55e6642d831028f30b22\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584886626 +0000\ncommitter GitHub <noreply@github.com> 1584886626 +0000\n\nMerge #3679\n\n3679: Some miniscule refactorings r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "html_url": "https://github.com/rust-lang/rust/commit/655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655b4f16f04689ef7957c5a3282a4ed5a8ef6016/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe956420fc63609a84dd005b8190b1f19fff280", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe956420fc63609a84dd005b8190b1f19fff280", "html_url": "https://github.com/rust-lang/rust/commit/6fe956420fc63609a84dd005b8190b1f19fff280"}, {"sha": "bfb6e3fd836650dd477c55e6642d831028f30b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb6e3fd836650dd477c55e6642d831028f30b22", "html_url": "https://github.com/rust-lang/rust/commit/bfb6e3fd836650dd477c55e6642d831028f30b22"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "4b150ef061f8cb2bbb29a23d13c7a53d3e9270de", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/655b4f16f04689ef7957c5a3282a4ed5a8ef6016/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655b4f16f04689ef7957c5a3282a4ed5a8ef6016/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "patch": "@@ -1042,30 +1042,18 @@ impl Type {\n     }\n \n     pub fn is_bool(&self) -> bool {\n-        match &self.ty.value {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::Bool => true,\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n+        matches!(self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::Bool, .. }))\n     }\n \n     pub fn is_mutable_reference(&self) -> bool {\n-        match &self.ty.value {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::Ref(Mutability::Mut) => true,\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n+        matches!(\n+            self.ty.value,\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Ref(Mutability::Mut), .. })\n+        )\n     }\n \n     pub fn is_unknown(&self) -> bool {\n-        match &self.ty.value {\n-            Ty::Unknown => true,\n-            _ => false,\n-        }\n+        matches!(self.ty.value, Ty::Unknown)\n     }\n \n     /// Checks that particular type `ty` implements `std::future::Future`."}, {"sha": "533c6ccfb1f17a3f05ee45899a65100af2399582", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/655b4f16f04689ef7957c5a3282a4ed5a8ef6016/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655b4f16f04689ef7957c5a3282a4ed5a8ef6016/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=655b4f16f04689ef7957c5a3282a4ed5a8ef6016", "patch": "@@ -95,14 +95,14 @@ impl Ty {\n         // Types like slice can have inherent impls in several crates, (core and alloc).\n         // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n         macro_rules! lang_item_crate {\n-        ($($name:expr),+ $(,)?) => {{\n-            let mut v = ArrayVec::<[LangItemTarget; 2]>::new();\n-            $(\n-                v.extend(db.lang_item(cur_crate, $name.into()));\n-            )+\n-            v\n-        }};\n-    }\n+            ($($name:expr),+ $(,)?) => {{\n+                let mut v = ArrayVec::<[LangItemTarget; 2]>::new();\n+                $(\n+                    v.extend(db.lang_item(cur_crate, $name.into()));\n+                )+\n+                v\n+            }};\n+        }\n \n         let lang_item_targets = match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {"}]}