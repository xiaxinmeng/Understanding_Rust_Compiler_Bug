{"sha": "b36bb0a68d70f091dd03f209f41b614ff1f015d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmJiMGE2OGQ3MGYwOTFkZDAzZjIwOWY0MWI2MTRmZjFmMDE1ZDA=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-02T13:13:43Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-02T13:13:43Z"}, "message": "Reimplement the `map_clone` lint from scratch", "tree": {"sha": "7f315ffcd6e53796906544b25fb25d39ebe1588b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f315ffcd6e53796906544b25fb25d39ebe1588b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36bb0a68d70f091dd03f209f41b614ff1f015d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36bb0a68d70f091dd03f209f41b614ff1f015d0", "html_url": "https://github.com/rust-lang/rust/commit/b36bb0a68d70f091dd03f209f41b614ff1f015d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36bb0a68d70f091dd03f209f41b614ff1f015d0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057243f16b4f42337b6178a627dcf3ae4c09f056", "url": "https://api.github.com/repos/rust-lang/rust/commits/057243f16b4f42337b6178a627dcf3ae4c09f056", "html_url": "https://github.com/rust-lang/rust/commit/057243f16b4f42337b6178a627dcf3ae4c09f056"}], "stats": {"total": 139, "additions": 136, "deletions": 3}, "files": [{"sha": "013a508cc76ed1b005110f04f84f3a982cf06306", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -688,8 +688,6 @@ All notable changes to this project will be documented in this file.\n [`float_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp_const\n-[`fn_to_numeric_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n-[`fn_to_numeric_cast_with_truncation`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loop_over_option`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_option\n [`for_loop_over_result`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_result"}, {"sha": "a2b61703a820d12d031fba914e5e1be37818fc15", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 279 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 277 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8b1b626be44379f2160317629ae724a87633f9fc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -129,6 +129,7 @@ pub mod let_if_seq;\n pub mod lifetimes;\n pub mod literal_representation;\n pub mod loops;\n+pub mod map_clone;\n pub mod map_unit_fn;\n pub mod matches;\n pub mod mem_forget;\n@@ -327,6 +328,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box strings::StringAdd);\n     reg.register_early_lint_pass(box returns::ReturnPass);\n     reg.register_late_lint_pass(box methods::Pass);\n+    reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box shadow::Pass);\n     reg.register_late_lint_pass(box types::LetPass);\n     reg.register_late_lint_pass(box types::UnitCmp);\n@@ -583,6 +585,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::WHILE_IMMUTABLE_CONDITION,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        map_clone::MAP_CLONE,\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n         matches::MATCH_AS_REF,\n@@ -742,6 +745,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::FOR_KV_MAP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        map_clone::MAP_CLONE,\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,\n         matches::MATCH_REF_PATS,"}, {"sha": "ddbb55a26fff23db44ce5d11551ac380f760b2fe", "filename": "clippy_lints/src/map_clone.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -0,0 +1,100 @@\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n+use crate::utils::paths;\n+use crate::utils::{\n+    in_macro, match_trait_method, match_type,\n+    remove_blocks, snippet,\n+    span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n+use crate::syntax::ast::Ident;\n+\n+#[derive(Clone)]\n+pub struct Pass;\n+\n+/// **What it does:** Checks for usage of `iterator.map(|x| x.clone())` and suggests\n+/// `iterator.cloned()` instead\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// let x = vec![42, 43];\n+/// let y = x.iter();\n+/// let z = y.map(|i| *i);\n+/// ```\n+///\n+/// The correct use would be:\n+///\n+/// ```rust\n+/// let x = vec![42, 43];\n+/// let y = x.iter();\n+/// let z = y.cloned();\n+/// ```\n+declare_clippy_lint! {\n+    pub MAP_CLONE,\n+    style,\n+    \"using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types\"\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MAP_CLONE)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(ref method, _, ref args) = e.node;\n+            if args.len() == 2;\n+            if method.ident.as_str() == \"map\";\n+            let ty = cx.tables.expr_ty(&args[0]);\n+            if match_type(cx, ty, &paths::OPTION) || match_trait_method(cx, e, &paths::ITERATOR);\n+            if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].node;\n+            let closure_body = cx.tcx.hir.body(body_id);\n+            let closure_expr = remove_blocks(&closure_body.value);\n+            then {\n+                match closure_body.arguments[0].pat.node {\n+                    hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) = inner.node {\n+                        lint(cx, e.span, args[0].span, name, closure_expr);\n+                    },\n+                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => match closure_expr.node {\n+                        hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => lint(cx, e.span, args[0].span, name, inner),\n+                        hir::ExprKind::MethodCall(ref method, _, ref obj) => if method.ident.as_str() == \"clone\" {\n+                            if match_trait_method(cx, closure_expr, &paths::CLONE_TRAIT) {\n+                                lint(cx, e.span, args[0].span, name, &obj[0]);\n+                            }\n+                        }\n+                        _ => {},\n+                    },\n+                    _ => {},\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span, name: Ident, path: &hir::Expr) {\n+    if let hir::ExprKind::Path(hir::QPath::Resolved(None, ref path)) = path.node {\n+        if path.segments.len() == 1 && path.segments[0].ident == name {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_CLONE,\n+                replace,\n+                \"You are using an explicit closure for cloning elements\",\n+                \"Consider calling the dedicated `cloned` method\",\n+                format!(\"{}.cloned()\", snippet(cx, root, \"..\")),\n+            )\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "11a5316a367e0ca441f543500951c4da49b958be", "filename": "tests/ui/map_clone.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -0,0 +1,9 @@\n+#![feature(tool_lints)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::missing_docs_in_private_items)]\n+\n+fn main() {\n+    let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n+    let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n+    let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n+}"}, {"sha": "e80983cdbf7f05023b9d33083d1eff73b53fb993", "filename": "tests/ui/map_clone.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b36bb0a68d70f091dd03f209f41b614ff1f015d0/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b36bb0a68d70f091dd03f209f41b614ff1f015d0/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=b36bb0a68d70f091dd03f209f41b614ff1f015d0", "patch": "@@ -0,0 +1,22 @@\n+error: You are using an explicit closure for cloning elements\n+ --> $DIR/map_clone.rs:6:22\n+  |\n+6 |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n+  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n+  |\n+  = note: `-D clippy::map-clone` implied by `-D warnings`\n+\n+error: You are using an explicit closure for cloning elements\n+ --> $DIR/map_clone.rs:7:26\n+  |\n+7 |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n+  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n+\n+error: You are using an explicit closure for cloning elements\n+ --> $DIR/map_clone.rs:8:23\n+  |\n+8 |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n+  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n+\n+error: aborting due to 3 previous errors\n+"}]}