{"sha": "850c3219fb8659608eb62cd43eaee29e9e354379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MGMzMjE5ZmI4NjU5NjA4ZWI2MmNkNDNlYWVlMjllOWUzNTQzNzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-03T13:22:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-03T13:22:07Z"}, "message": "Move jointness censoring to proc_macro\n\nProc-macro API currently exposes jointness in `Punct` tokens. That is,\n`+` in `+one` is **non** joint.\n\nOur lexer produces jointness info for all tokens, so we need to censor\nit *somewhere*\n\nPreviously we did this in a lexer, but it makes more sense to do this\nin a proc-macro server.", "tree": {"sha": "987c3cdc477cd3965b390b4f6d22f5e56e8b6f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987c3cdc477cd3965b390b4f6d22f5e56e8b6f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850c3219fb8659608eb62cd43eaee29e9e354379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850c3219fb8659608eb62cd43eaee29e9e354379", "html_url": "https://github.com/rust-lang/rust/commit/850c3219fb8659608eb62cd43eaee29e9e354379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850c3219fb8659608eb62cd43eaee29e9e354379/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08deb863bdebfcbbb71c18acf903eca84f1df4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08deb863bdebfcbbb71c18acf903eca84f1df4e7", "html_url": "https://github.com/rust-lang/rust/commit/08deb863bdebfcbbb71c18acf903eca84f1df4e7"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "19c87d08a1379bd283adf1c17302a6aa2ea7c9c7", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/850c3219fb8659608eb62cd43eaee29e9e354379/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850c3219fb8659608eb62cd43eaee29e9e354379/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=850c3219fb8659608eb62cd43eaee29e9e354379", "patch": "@@ -47,15 +47,21 @@ impl ToInternal<token::DelimToken> for Delimiter {\n     }\n }\n \n-impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n+impl FromInternal<(TreeAndJoint, Option<tokenstream::TokenTree>, &'_ ParseSess, &'_ mut Vec<Self>)>\n     for TokenTree<Group, Punct, Ident, Literal>\n {\n     fn from_internal(\n-        ((tree, is_joint), sess, stack): (TreeAndJoint, &ParseSess, &mut Vec<Self>),\n+        ((tree, is_joint), look_ahead, sess, stack): (\n+            TreeAndJoint,\n+            Option<tokenstream::TokenTree>,\n+            &ParseSess,\n+            &mut Vec<Self>,\n+        ),\n     ) -> Self {\n         use rustc_ast::token::*;\n \n-        let joint = is_joint == Joint;\n+        let joint = is_joint == Joint\n+            && matches!(look_ahead, Some(tokenstream::TokenTree::Token(t)) if t.is_op());\n         let Token { kind, span } = match tree {\n             tokenstream::TokenTree::Delimited(span, delim, tts) => {\n                 let delimiter = Delimiter::from_internal(delim);\n@@ -445,7 +451,8 @@ impl server::TokenStreamIter for Rustc<'_> {\n         loop {\n             let tree = iter.stack.pop().or_else(|| {\n                 let next = iter.cursor.next_with_joint()?;\n-                Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n+                let lookahead = iter.cursor.look_ahead(0);\n+                Some(TokenTree::from_internal((next, lookahead, self.sess, &mut iter.stack)))\n             })?;\n             // A hack used to pass AST fragments to attribute and derive macros\n             // as a single nonterminal token instead of a token stream."}, {"sha": "fb27ccfbd9429b5a168064eec2b99f5b5f601ef5", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/850c3219fb8659608eb62cd43eaee29e9e354379/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850c3219fb8659608eb62cd43eaee29e9e354379/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=850c3219fb8659608eb62cd43eaee29e9e354379", "patch": "@@ -262,10 +262,7 @@ impl<'a> TokenTreesReader<'a> {\n             }\n             _ => {\n                 let tt = TokenTree::Token(self.token.take());\n-                let mut is_joint = self.bump();\n-                if !self.token.is_op() {\n-                    is_joint = NonJoint;\n-                }\n+                let is_joint = self.bump();\n                 Ok((tt, is_joint))\n             }\n         }"}]}