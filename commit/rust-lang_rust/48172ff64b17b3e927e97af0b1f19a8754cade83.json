{"sha": "48172ff64b17b3e927e97af0b1f19a8754cade83", "node_id": "C_kwDOAAsO6NoAKDQ4MTcyZmY2NGIxN2IzZTkyN2U5N2FmMGIxZjE5YTg3NTRjYWRlODM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T12:27:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T12:27:41Z"}, "message": "Rollup merge of #105098 - lyming2007:issue-103869-fix, r=eholk\n\npropagate the error from parsing enum variant to the parser and emit out\n\nWhile parsing enum variant, the error message always disappear\nBecause the error message that emit out is from main error of parser\nThe information of enum variant disappears while parsing enum variant with error\nWe only check the syntax of expecting token, i.e, in case https://github.com/rust-lang/rust/issues/103869\nIt will error it without telling the message that this error is from pasring enum variant.\nPropagate the sub-error from parsing enum variant to the main error of parser by chaining it with map_err\nCheck the sub-error before emitting the main error of parser and attach it.\nFix https://github.com/rust-lang/rust/issues/103869", "tree": {"sha": "840e50f24319ff9c1d0ff1d8711eccc9ed2e86b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840e50f24319ff9c1d0ff1d8711eccc9ed2e86b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48172ff64b17b3e927e97af0b1f19a8754cade83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjzU9CRBK7hj4Ov3rIwAAILgIALD5MtSJwItKDIGQ6yZU6SIo\nOjY2x4O9cD8LIRkKslIXoND/+M0cXmUhU7CtefFFMCI+rX4EJ0YpnRxyRGPPnNY+\nt/bLXRjxUHMEdm86UK5tpTR/WL0YBSdAN8dzWXssQFT1jvecGV+oHhC8hldsK77q\nQGNiXDa3EUZDEyJjVTH3+d0Hse7+U00vWlIrDAjYkHdmFYf+DimxWdoA7FmektUS\nUu4kFQ6ZtQrSPlNfrvwQ9m7ryHX2HFLWJbuwW3gwcM7ovgMc5vnxU9FpvrtcjOX+\njXgcj6LswMQnzCK/dJR+9T+NrLsQJ0laMlCyjdG/SXE2jDNxkI6QBX/RosjrW7I=\n=PwID\n-----END PGP SIGNATURE-----\n", "payload": "tree 840e50f24319ff9c1d0ff1d8711eccc9ed2e86b2\nparent be3ad5d6b0d3292d53599b3325cb9e6bdf656749\nparent 0e19fb92e1eb7f91aa5570b2ac782c9a42a6e329\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670329661 +0100\ncommitter GitHub <noreply@github.com> 1670329661 +0100\n\nRollup merge of #105098 - lyming2007:issue-103869-fix, r=eholk\n\npropagate the error from parsing enum variant to the parser and emit out\n\nWhile parsing enum variant, the error message always disappear\nBecause the error message that emit out is from main error of parser\nThe information of enum variant disappears while parsing enum variant with error\nWe only check the syntax of expecting token, i.e, in case https://github.com/rust-lang/rust/issues/103869\nIt will error it without telling the message that this error is from pasring enum variant.\nPropagate the sub-error from parsing enum variant to the main error of parser by chaining it with map_err\nCheck the sub-error before emitting the main error of parser and attach it.\nFix https://github.com/rust-lang/rust/issues/103869\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48172ff64b17b3e927e97af0b1f19a8754cade83", "html_url": "https://github.com/rust-lang/rust/commit/48172ff64b17b3e927e97af0b1f19a8754cade83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48172ff64b17b3e927e97af0b1f19a8754cade83/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "html_url": "https://github.com/rust-lang/rust/commit/be3ad5d6b0d3292d53599b3325cb9e6bdf656749"}, {"sha": "0e19fb92e1eb7f91aa5570b2ac782c9a42a6e329", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e19fb92e1eb7f91aa5570b2ac782c9a42a6e329", "html_url": "https://github.com/rust-lang/rust/commit/0e19fb92e1eb7f91aa5570b2ac782c9a42a6e329"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "03f25392a7c1f90094ccf4fb2ce067a598f8210b", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -1414,7 +1414,10 @@ impl<'a> Parser<'a> {\n \n                 Ok((Some(vr), TrailingToken::MaybeComma))\n             },\n-        )\n+        ).map_err(|mut err|{\n+            err.help(\"enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\");\n+            err\n+        })\n     }\n \n     /// Parses `struct Foo { ... }`."}, {"sha": "bebb012660a16ae140a780bb5da5049761bc0faa", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -943,6 +943,10 @@ impl<'a> Parser<'a> {\n                                 Err(e) => {\n                                     // Parsing failed, therefore it must be something more serious\n                                     // than just a missing separator.\n+                                    for xx in &e.children {\n+                                        // propagate the help message from sub error 'e' to main error 'expect_err;\n+                                        expect_err.children.push(xx.clone());\n+                                    }\n                                     expect_err.emit();\n \n                                     e.cancel();"}, {"sha": "c42ee9b295e1d365e4f07ff2b76200994470828c", "filename": "src/test/ui/macros/syntax-error-recovery.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -7,6 +7,7 @@ LL |                 $token $($inner)? = $value,\n LL | values!(STRING(1) as (String) => cfg(test),);\n    | -------------------------------------------- in this macro invocation\n    |\n+   = help: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n    = note: this error originates in the macro `values` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro expansion ignores token `(String)` and any following"}, {"sha": "1edca391e8fd01eb9e6b7e877d7ce4f6ab64f2fe", "filename": "src/test/ui/parser/issue-101477-enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-101477-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-101477-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-101477-enum.stderr?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -3,6 +3,8 @@ error: unexpected `==`\n    |\n LL |     B == 2\n    |       ^^ help: try using `=` instead\n+   |\n+   = help: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n \n error: expected item, found `==`\n   --> $DIR/issue-101477-enum.rs:6:7"}, {"sha": "28c442bdd632dd62ebaa7a5ef02f3419fbebda67", "filename": "src/test/ui/parser/issue-103869.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-103869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-103869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103869.rs?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -0,0 +1,9 @@\n+enum VecOrMap{\n+    vec: Vec<usize>,\n+    //~^ ERROR expected one of `(`, `,`, `=`, `{`, or `}`, found `:`\n+    //~| HELP: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n+    //~| ERROR expected item, found `:`\n+    map: HashMap<String,usize>\n+}\n+\n+fn main() {}"}, {"sha": "0b8cd919a9de26a8f654648a36b211df25b6984b", "filename": "src/test/ui/parser/issue-103869.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-103869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fissue-103869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103869.stderr?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -0,0 +1,16 @@\n+error: expected one of `(`, `,`, `=`, `{`, or `}`, found `:`\n+  --> $DIR/issue-103869.rs:2:8\n+   |\n+LL |     vec: Vec<usize>,\n+   |        ^ expected one of `(`, `,`, `=`, `{`, or `}`\n+   |\n+   = help: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n+\n+error: expected item, found `:`\n+  --> $DIR/issue-103869.rs:2:8\n+   |\n+LL |     vec: Vec<usize>,\n+   |        ^ expected item\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "da9e743a0b44ffc73a4f45ef9eb3f2ee0535b63d", "filename": "src/test/ui/parser/macro/issue-37113.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -9,6 +9,7 @@ LL |             $( $t, )*\n LL |     test_macro!(String,);\n    |     -------------------- in this macro invocation\n    |\n+   = help: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n    = note: this error originates in the macro `test_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7f48f55fec93803d3e89f002ee57963edcfde507", "filename": "src/test/ui/structs/struct-fn-in-definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -28,6 +28,7 @@ enum E {\n     //~^ ERROR functions are not allowed in enum definitions\n     //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n     //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+    //~| HELP enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n }\n \n fn main() {}"}, {"sha": "439c86ec22b0eb9178e39fd2c5569be225a94a3b", "filename": "src/test/ui/structs/struct-fn-in-definition.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48172ff64b17b3e927e97af0b1f19a8754cade83/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr?ref=48172ff64b17b3e927e97af0b1f19a8754cade83", "patch": "@@ -33,6 +33,7 @@ LL |     fn foo() {}\n    |\n    = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n    = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+   = help: enum variants can be `Variant`, `Variant = <integer>`, `Variant(Type, ..., TypeN)` or `Variant { fields: Types }`\n \n error: aborting due to 3 previous errors\n "}]}