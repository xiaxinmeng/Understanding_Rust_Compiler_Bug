{"sha": "9c601611a02bd2026065a50ba640697488f064b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjAxNjExYTAyYmQyMDI2MDY1YTUwYmE2NDA2OTc0ODhmMDY0YjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T19:13:34Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-21T19:03:34Z"}, "message": "Simplify the cleanup_post_borrowck passes", "tree": {"sha": "2c478e2f7e92342f015e2c871f1f2e6471d07a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c478e2f7e92342f015e2c871f1f2e6471d07a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c601611a02bd2026065a50ba640697488f064b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c601611a02bd2026065a50ba640697488f064b6", "html_url": "https://github.com/rust-lang/rust/commit/9c601611a02bd2026065a50ba640697488f064b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c601611a02bd2026065a50ba640697488f064b6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf446c80c2792c7ec234ecf4107d75c80826a5f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf446c80c2792c7ec234ecf4107d75c80826a5f5", "html_url": "https://github.com/rust-lang/rust/commit/bf446c80c2792c7ec234ecf4107d75c80826a5f5"}], "stats": {"total": 115, "additions": 25, "deletions": 90}, "files": [{"sha": "349b27523a0a10ecce6fd1a21f8d51c5a5200955", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 18, "deletions": 79, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9c601611a02bd2026065a50ba640697488f064b6/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c601611a02bd2026065a50ba640697488f064b6/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=9c601611a02bd2026065a50ba640697488f064b6", "patch": "@@ -1,112 +1,51 @@\n-//! This module provides two passes:\n+//! This module provides a pass to replacing the following statements with\n+//! [`Nop`]s\n //!\n-//!   - [`CleanAscribeUserType`], that replaces all [`AscribeUserType`]\n-//!     statements with [`Nop`].\n-//!   - [`CleanFakeReadsAndBorrows`], that replaces all [`FakeRead`] statements\n-//!     and borrows that are read by [`ForMatchGuard`] fake reads with [`Nop`].\n+//!   - [`AscribeUserType`]\n+//!   - [`FakeRead`]\n+//!   - [`Assign`] statements with a [`Shallow`] borrow\n //!\n //! The `CleanFakeReadsAndBorrows` \"pass\" is actually implemented as two\n //! traversals (aka visits) of the input MIR. The first traversal,\n //! [`DeleteAndRecordFakeReads`], deletes the fake reads and finds the\n //! temporaries read by [`ForMatchGuard`] reads, and [`DeleteFakeBorrows`]\n //! deletes the initialization of those temporaries.\n //!\n-//! [`CleanAscribeUserType`]: cleanup_post_borrowck::CleanAscribeUserType\n-//! [`CleanFakeReadsAndBorrows`]: cleanup_post_borrowck::CleanFakeReadsAndBorrows\n-//! [`DeleteAndRecordFakeReads`]: cleanup_post_borrowck::DeleteAndRecordFakeReads\n-//! [`DeleteFakeBorrows`]: cleanup_post_borrowck::DeleteFakeBorrows\n //! [`AscribeUserType`]: rustc::mir::StatementKind::AscribeUserType\n-//! [`Nop`]: rustc::mir::StatementKind::Nop\n+//! [`Shallow`]: rustc::mir::BorrowKind::Shallow\n //! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n-//! [`ForMatchGuard`]: rustc::mir::FakeReadCause::ForMatchGuard\n-\n-use rustc_data_structures::fx::FxHashSet;\n+//! [`Nop`]: rustc::mir::StatementKind::Nop\n \n-use rustc::mir::{BasicBlock, FakeReadCause, Local, Location, Mir, Place};\n+use rustc::mir::{BasicBlock, BorrowKind, Rvalue, Location, Mir};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n use crate::transform::{MirPass, MirSource};\n \n-pub struct CleanAscribeUserType;\n+pub struct CleanupNonCodegenStatements;\n \n-pub struct DeleteAscribeUserType;\n+pub struct DeleteNonCodegenStatements;\n \n-impl MirPass for CleanAscribeUserType {\n+impl MirPass for CleanupNonCodegenStatements {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n-        let mut delete = DeleteAscribeUserType;\n+        let mut delete = DeleteNonCodegenStatements;\n         delete.visit_mir(mir);\n     }\n }\n \n-impl<'tcx> MutVisitor<'tcx> for DeleteAscribeUserType {\n-    fn visit_statement(&mut self,\n-                       block: BasicBlock,\n-                       statement: &mut Statement<'tcx>,\n-                       location: Location) {\n-        if let StatementKind::AscribeUserType(..) = statement.kind {\n-            statement.make_nop();\n-        }\n-        self.super_statement(block, statement, location);\n-    }\n-}\n-\n-pub struct CleanFakeReadsAndBorrows;\n-\n-#[derive(Default)]\n-pub struct DeleteAndRecordFakeReads {\n-    fake_borrow_temporaries: FxHashSet<Local>,\n-}\n-\n-pub struct DeleteFakeBorrows {\n-    fake_borrow_temporaries: FxHashSet<Local>,\n-}\n-\n-// Removes any FakeReads from the MIR\n-impl MirPass for CleanFakeReadsAndBorrows {\n-    fn run_pass<'a, 'tcx>(&self,\n-                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n-        let mut delete_reads = DeleteAndRecordFakeReads::default();\n-        delete_reads.visit_mir(mir);\n-        let mut delete_borrows = DeleteFakeBorrows {\n-            fake_borrow_temporaries: delete_reads.fake_borrow_temporaries,\n-        };\n-        delete_borrows.visit_mir(mir);\n-    }\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for DeleteAndRecordFakeReads {\n-    fn visit_statement(&mut self,\n-                       block: BasicBlock,\n-                       statement: &mut Statement<'tcx>,\n-                       location: Location) {\n-        if let StatementKind::FakeRead(cause, ref place) = statement.kind {\n-            if let FakeReadCause::ForMatchGuard = cause {\n-                match *place {\n-                    Place::Local(local) => self.fake_borrow_temporaries.insert(local),\n-                    _ => bug!(\"Fake match guard read of non-local: {:?}\", place),\n-                };\n-            }\n-            statement.make_nop();\n-        }\n-        self.super_statement(block, statement, location);\n-    }\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for DeleteFakeBorrows {\n+impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n     fn visit_statement(&mut self,\n                        block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n-        if let StatementKind::Assign(Place::Local(local), _) = statement.kind {\n-            if self.fake_borrow_temporaries.contains(&local) {\n-                statement.make_nop();\n-            }\n+        match statement.kind {\n+            StatementKind::AscribeUserType(..)\n+            | StatementKind::Assign(_, box Rvalue::Ref(_, BorrowKind::Shallow, _))\n+            | StatementKind::FakeRead(..) => statement.make_nop(),\n+            _ => (),\n         }\n         self.super_statement(block, statement, location);\n     }"}, {"sha": "48884872a01ed0220ffeb2d2d69ede05749560c8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c601611a02bd2026065a50ba640697488f064b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c601611a02bd2026065a50ba640697488f064b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=9c601611a02bd2026065a50ba640697488f064b6", "patch": "@@ -241,15 +241,11 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n     run_passes(tcx, &mut mir, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n-        // Remove all things not needed by analysis\n+        // Remove all things only needed by analysis\n         &no_landing_pads::NoLandingPads,\n         &simplify_branches::SimplifyBranches::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        // Remove all `AscribeUserType` statements.\n-        &cleanup_post_borrowck::CleanAscribeUserType,\n-        // Remove all `FakeRead` statements and the borrows that are only\n-        // used for checking matches\n-        &cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n+        &cleanup_post_borrowck::CleanupNonCodegenStatements,\n \n         &simplify::SimplifyCfg::new(\"early-opt\"),\n "}, {"sha": "ebb1ef2f430b595722a74cce3b85b7da4cfc0bec", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c601611a02bd2026065a50ba640697488f064b6/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c601611a02bd2026065a50ba640697488f064b6/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=9c601611a02bd2026065a50ba640697488f064b6", "patch": "@@ -17,7 +17,7 @@ fn main() {\n \n // END RUST SOURCE\n \n-// START rustc.match_guard.CleanFakeReadsAndBorrows.before.mir\n+// START rustc.match_guard.CleanupNonCodegenStatements.before.mir\n // bb0: {\n //     FakeRead(ForMatchedPlace, _1);\n //     _3 = discriminant(_1);\n@@ -66,9 +66,9 @@ fn main() {\n // bb10: {\n //     resume;\n // }\n-// END rustc.match_guard.CleanFakeReadsAndBorrows.before.mir\n+// END rustc.match_guard.CleanupNonCodegenStatements.before.mir\n \n-// START rustc.match_guard.CleanFakeReadsAndBorrows.after.mir\n+// START rustc.match_guard.CleanupNonCodegenStatements.after.mir\n // bb0: {\n //     nop;\n //     _3 = discriminant(_1);\n@@ -116,5 +116,5 @@ fn main() {\n // }\n // bb10: {\n //     resume;\n-//    }\n-// END rustc.match_guard.CleanFakeReadsAndBorrows.after.mir\n+// }\n+// END rustc.match_guard.CleanupNonCodegenStatements.after.mir"}]}