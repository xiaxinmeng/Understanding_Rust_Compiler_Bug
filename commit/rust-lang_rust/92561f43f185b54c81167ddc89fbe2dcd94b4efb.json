{"sha": "92561f43f185b54c81167ddc89fbe2dcd94b4efb", "node_id": "C_kwDOAAsO6NoAKDkyNTYxZjQzZjE4NWI1NGM4MTE2N2RkYzg5ZmJlMmRjZDk0YjRlZmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-26T23:57:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-27T17:42:15Z"}, "message": "Support bindings with anon consts in generics", "tree": {"sha": "91c220ebdffe344cf5dd4b4d5266c860f9b6b2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c220ebdffe344cf5dd4b4d5266c860f9b6b2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92561f43f185b54c81167ddc89fbe2dcd94b4efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92561f43f185b54c81167ddc89fbe2dcd94b4efb", "html_url": "https://github.com/rust-lang/rust/commit/92561f43f185b54c81167ddc89fbe2dcd94b4efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92561f43f185b54c81167ddc89fbe2dcd94b4efb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05267b5a50bfa3952fe2a4433f4e12a93e15dd22", "url": "https://api.github.com/repos/rust-lang/rust/commits/05267b5a50bfa3952fe2a4433f4e12a93e15dd22", "html_url": "https://github.com/rust-lang/rust/commit/05267b5a50bfa3952fe2a4433f4e12a93e15dd22"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "f8a62c849107632b68bd7e60a3d0106fcc2e5c71", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/92561f43f185b54c81167ddc89fbe2dcd94b4efb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92561f43f185b54c81167ddc89fbe2dcd94b4efb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=92561f43f185b54c81167ddc89fbe2dcd94b4efb", "patch": "@@ -441,8 +441,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n-                    return tcx.ty_error_with_message(DUMMY_SP, \"Could not find trait\");\n-                  };\n+                        return tcx.ty_error_with_message(DUMMY_SP, \"Could not find trait\");\n+                    };\n                     let assoc_items = tcx.associated_items(trait_def_id);\n                     let assoc_item = assoc_items.find_by_name_and_kind(\n                         tcx,\n@@ -461,6 +461,49 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     }\n                 }\n \n+                Node::TypeBinding(\n+                    binding @ &TypeBinding { hir_id: binding_id, gen_args, ref kind, .. },\n+                ) if let Node::TraitRef(trait_ref) =\n+                    tcx.hir().get(tcx.hir().get_parent_node(binding_id))\n+                    && let Some((idx, _)) =\n+                        gen_args.args.iter().enumerate().find(|(_, arg)| {\n+                            if let GenericArg::Const(ct) = arg {\n+                                ct.value.hir_id == hir_id\n+                            } else {\n+                                false\n+                            }\n+                        }) =>\n+                {\n+                    let Some(trait_def_id) = trait_ref.trait_def_id() else {\n+                        return tcx.ty_error_with_message(DUMMY_SP, \"Could not find trait\");\n+                    };\n+                    let assoc_items = tcx.associated_items(trait_def_id);\n+                    let assoc_item = assoc_items.find_by_name_and_kind(\n+                        tcx,\n+                        binding.ident,\n+                        match kind {\n+                            // I think `<A: T>` type bindings requires that `A` is a type\n+                            TypeBindingKind::Constraint { .. }\n+                            | TypeBindingKind::Equality { term: Term::Ty(..) } => {\n+                                ty::AssocKind::Type\n+                            }\n+                            TypeBindingKind::Equality { term: Term::Const(..) } => {\n+                                ty::AssocKind::Const\n+                            }\n+                        },\n+                        def_id.to_def_id(),\n+                    );\n+                    if let Some(assoc_item) = assoc_item {\n+                        tcx.type_of(tcx.generics_of(assoc_item.def_id).params[idx].def_id)\n+                    } else {\n+                        // FIXME(associated_const_equality): add a useful error message here.\n+                        tcx.ty_error_with_message(\n+                            DUMMY_SP,\n+                            \"Could not find associated const on trait\",\n+                        )\n+                    }\n+                }\n+\n                 Node::GenericParam(&GenericParam {\n                     hir_id: param_hir_id,\n                     kind: GenericParamKind::Const { default: Some(ct), .. },"}, {"sha": "6c72563322f55f3fca0639758033bad7ac663dcf", "filename": "src/test/ui/generic-associated-types/issue-102333.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/92561f43f185b54c81167ddc89fbe2dcd94b4efb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92561f43f185b54c81167ddc89fbe2dcd94b4efb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102333.rs?ref=92561f43f185b54c81167ddc89fbe2dcd94b4efb", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+trait A {\n+    type T: B<U<1i32> = ()>;\n+}\n+\n+trait B {\n+    type U<const C: i32>;\n+}\n+\n+fn f<T: A>() {\n+    let _: <<T as A>::T as B>::U<1i32> = ();\n+}\n+\n+fn main() {}"}]}