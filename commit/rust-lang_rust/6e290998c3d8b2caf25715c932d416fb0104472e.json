{"sha": "6e290998c3d8b2caf25715c932d416fb0104472e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMjkwOTk4YzNkOGIyY2FmMjU3MTVjOTMyZDQxNmZiMDEwNDQ3MmU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-11T00:33:20Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "infer: Turn normalize_associated_type into a method on TyCtxt.", "tree": {"sha": "7532114ee26c841d5f18fdc1df887a5525c6db47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7532114ee26c841d5f18fdc1df887a5525c6db47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e290998c3d8b2caf25715c932d416fb0104472e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e290998c3d8b2caf25715c932d416fb0104472e", "html_url": "https://github.com/rust-lang/rust/commit/6e290998c3d8b2caf25715c932d416fb0104472e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e290998c3d8b2caf25715c932d416fb0104472e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0907c198c46e7c3ceefe42855f933a29bc5e085a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0907c198c46e7c3ceefe42855f933a29bc5e085a", "html_url": "https://github.com/rust-lang/rust/commit/0907c198c46e7c3ceefe42855f933a29bc5e085a"}], "stats": {"total": 109, "additions": 51, "deletions": 58}, "files": [{"sha": "407278c283f50d5f709ca20a044a44dc3abdf480", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -523,34 +523,36 @@ pub struct CombinedSnapshot {\n }\n \n // NOTE: Callable from trans only!\n-pub fn normalize_associated_type<'tcx,T>(tcx: &TyCtxt<'tcx>, value: &T) -> T\n-    where T : TypeFoldable<'tcx>\n-{\n-    debug!(\"normalize_associated_type(t={:?})\", value);\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn normalize_associated_type<T>(&self, value: &T) -> T\n+        where T : TypeFoldable<'tcx>\n+    {\n+        debug!(\"normalize_associated_type(t={:?})\", value);\n \n-    let value = tcx.erase_regions(value);\n+        let value = self.erase_regions(value);\n \n-    if !value.has_projection_types() {\n-        return value;\n-    }\n+        if !value.has_projection_types() {\n+            return value;\n+        }\n \n-    let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::Any);\n-    let mut selcx = traits::SelectionContext::new(&infcx);\n-    let cause = traits::ObligationCause::dummy();\n-    let traits::Normalized { value: result, obligations } =\n-        traits::normalize(&mut selcx, cause, &value);\n+        let infcx = InferCtxt::new(self, &self.tables, None, ProjectionMode::Any);\n+        let mut selcx = traits::SelectionContext::new(&infcx);\n+        let cause = traits::ObligationCause::dummy();\n+        let traits::Normalized { value: result, obligations } =\n+            traits::normalize(&mut selcx, cause, &value);\n \n-    debug!(\"normalize_associated_type: result={:?} obligations={:?}\",\n-           result,\n-           obligations);\n+        debug!(\"normalize_associated_type: result={:?} obligations={:?}\",\n+            result,\n+            obligations);\n \n-    let mut fulfill_cx = traits::FulfillmentContext::new();\n+        let mut fulfill_cx = traits::FulfillmentContext::new();\n \n-    for obligation in obligations {\n-        fulfill_cx.register_predicate_obligation(&infcx, obligation);\n-    }\n+        for obligation in obligations {\n+            fulfill_cx.register_predicate_obligation(&infcx, obligation);\n+        }\n \n-    drain_fulfillment_cx_or_panic(DUMMY_SP, &infcx, &mut fulfill_cx, &result)\n+        drain_fulfillment_cx_or_panic(DUMMY_SP, &infcx, &mut fulfill_cx, &result)\n+    }\n }\n \n pub fn drain_fulfillment_cx_or_panic<'a,'tcx,T>(span: Span,\n@@ -1617,7 +1619,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                      substs);\n \n         if self.normalize {\n-            normalize_associated_type(&self.tcx, &closure_ty)\n+            self.tcx.normalize_associated_type(&closure_ty)\n         } else {\n             closure_ty\n         }"}, {"sha": "63dc0f303ff7d013dbc4eac4fed0008d90695841", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -11,7 +11,6 @@\n #![allow(non_snake_case)]\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use middle::const_val::ConstVal;\n@@ -439,7 +438,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 }\n \n                 for field in &def.struct_variant().fields {\n-                    let field_ty = infer::normalize_associated_type(cx, &field.ty(cx, substs));\n+                    let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                     let r = self.check_type_for_ffi(cache, field_ty);\n                     match r {\n                         FfiSafe => {}\n@@ -494,7 +493,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 // Check the contained variants.\n                 for variant in &def.variants {\n                     for field in &variant.fields {\n-                        let arg = infer::normalize_associated_type(cx, &field.ty(cx, substs));\n+                        let arg = cx.normalize_associated_type(&field.ty(cx, substs));\n                         let r = self.check_type_for_ffi(cache, arg);\n                         match r {\n                             FfiSafe => {}\n@@ -596,7 +595,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = infer::normalize_associated_type(self.cx.tcx, &ty);\n+        let ty = self.cx.tcx.normalize_associated_type(&ty);\n \n         match self.check_type_for_ffi(&mut FnvHashSet(), ty) {\n             FfiResult::FfiSafe => {}"}, {"sha": "f095b60ac4813ec166bdd6fa3d358b8c73f97cc5", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -36,7 +36,6 @@ use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use rustc::cfg;\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use rustc::hir::pat_util::simple_name;\n@@ -1923,7 +1922,7 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let fn_ty = ccx.tcx().lookup_item_type(def_id).ty;\n     let fn_ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs, &fn_ty);\n     let sig = ccx.tcx().erase_late_bound_regions(fn_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     let abi = fn_ty.fn_abi();\n     trans_closure(ccx,\n                   decl,\n@@ -1947,7 +1946,7 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.fcx.ccx;\n \n     let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     let result_ty = sig.output.unwrap();\n \n     // Get location to store the result. If the user does not care about\n@@ -2017,7 +2016,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let ctor_ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs, &ctor_ty);\n \n     let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);"}, {"sha": "656fac54a829dae6cd78c897716273298bd0fbc1", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -22,7 +22,6 @@ use back::symbol_names;\n use llvm::{self, ValueRef, get_params};\n use middle::cstore::LOCAL_CRATE;\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n use rustc::ty::subst;\n use rustc::traits;\n use rustc::hir::map as hir_map;\n@@ -221,7 +220,7 @@ impl<'tcx> Callee<'tcx> {\n                               extra_args: &[Ty<'tcx>]) -> FnType {\n         let abi = self.ty.fn_abi();\n         let sig = ccx.tcx().erase_late_bound_regions(self.ty.fn_sig());\n-        let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+        let sig = ccx.tcx().normalize_associated_type(&sig);\n         let mut fn_ty = FnType::unadjusted(ccx, abi, &sig, extra_args);\n         if let Virtual(_) = self.data {\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n@@ -361,7 +360,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n         }\n     };\n     let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     let tuple_input_ty = tcx.mk_tup(sig.inputs.to_vec());\n     let sig = ty::FnSig {\n         inputs: vec![bare_fn_ty_maybe_ref,\n@@ -491,7 +490,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let fn_ptr_ty = match ty.sty {\n         ty::TyFnDef(_, _, fty) => {\n             // Create a fn pointer with the normalized signature.\n-            tcx.mk_fn_ptr(infer::normalize_associated_type(tcx, fty))\n+            tcx.mk_fn_ptr(tcx.normalize_associated_type(fty))\n         }\n         _ => bug!(\"expected fn item type, found {}\", ty)\n     };\n@@ -623,7 +622,7 @@ fn trans_call_inner<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let abi = callee.ty.fn_abi();\n     let sig = callee.ty.fn_sig();\n     let output = bcx.tcx().erase_late_bound_regions(&sig.output());\n-    let output = infer::normalize_associated_type(bcx.tcx(), &output);\n+    let output = bcx.tcx().normalize_associated_type(&output);\n \n     let extra_args = match args {\n         ArgExprs(args) if abi != Abi::RustCall => {"}, {"sha": "86a91d261fc195fd8d4787ab9ea2abdfe9b23e16", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -12,7 +12,7 @@ use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_param, get_params};\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{self, InferCtxt};\n+use rustc::infer::InferCtxt;\n use rustc::traits::ProjectionMode;\n use abi::{Abi, FnType};\n use adt;\n@@ -158,7 +158,7 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Any);\n     let sig = &infcx.closure_type(closure_id, &substs).sig;\n     let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = infer::normalize_associated_type(tcx, &sig);\n+    let sig = tcx.normalize_associated_type(&sig);\n     let closure_type = tcx.mk_closure_from_closure_substs(closure_id, Box::new(substs));\n     let function_type = tcx.mk_fn_ptr(ty::BareFnTy {\n         unsafety: hir::Unsafety::Normal,\n@@ -224,7 +224,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     let function_type = infcx.closure_type(closure_def_id, closure_substs);\n \n     let sig = tcx.erase_late_bound_regions(&function_type.sig);\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n \n     let closure_type = tcx.mk_closure_from_closure_substs(closure_def_id,\n         Box::new(closure_substs.clone()));\n@@ -369,7 +369,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     sig.0.inputs[0] = closure_ty;\n \n     let sig = tcx.erase_late_bound_regions(&sig);\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n \n     let llonce_fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {"}, {"sha": "55b5bc2beb8000b504f51400d3d8bef73df83f9a", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -24,7 +24,6 @@ use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n use rustc::hir::pat_util;\n use rustc::ty::subst;\n use rustc::hir::map as hir_map;\n@@ -263,7 +262,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 unique_type_id.push_str(\" fn(\");\n \n                 let sig = cx.tcx().erase_late_bound_regions(sig);\n-                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+                let sig = cx.tcx().normalize_associated_type(&sig);\n \n                 for &parameter_type in &sig.inputs {\n                     let parameter_type_id ="}, {"sha": "f1ac89ebf52569fc861ae8895ecdb7d45d13e80b", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -34,7 +34,6 @@ use rustc::hir;\n use abi::Abi;\n use common::{NodeIdAndSpan, CrateContext, FunctionContext, Block, BlockAndBuilder};\n use monomorphize::Instance;\n-use rustc::infer::normalize_associated_type;\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n@@ -369,7 +368,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         name_to_append_suffix_to.push('<');\n         for (i, &actual_type) in actual_types.iter().enumerate() {\n-            let actual_type = normalize_associated_type(cx.tcx(), &actual_type);\n+            let actual_type = cx.tcx().normalize_associated_type(&actual_type);\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n                                                                actual_type,\n@@ -385,7 +384,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         // Again, only create type information if full debuginfo is enabled\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             generics.types.as_slice().iter().enumerate().map(|(i, param)| {\n-                let actual_type = normalize_associated_type(cx.tcx(), &actual_types[i]);\n+                let actual_type = cx.tcx().normalize_associated_type(&actual_types[i]);\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n                 let name = CString::new(param.name.as_str().as_bytes()).unwrap();\n                 unsafe {"}, {"sha": "3e0fc7b31206cbff2434ae9ba5722031d0c066e3", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -12,7 +12,6 @@\n \n use common::CrateContext;\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n use rustc::ty::subst;\n use rustc::ty::{self, Ty};\n \n@@ -114,7 +113,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push_str(\"fn(\");\n \n             let sig = cx.tcx().erase_late_bound_regions(sig);\n-            let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+            let sig = cx.tcx().normalize_associated_type(&sig);\n             if !sig.inputs.is_empty() {\n                 for &parameter_type in &sig.inputs {\n                     push_debuginfo_type_name(cx, parameter_type, true, output);"}, {"sha": "e6db695943bbee5b5ae940255b31ed3e108f2c5b", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -21,7 +21,6 @@\n //! * When in doubt, define.\n use llvm::{self, ValueRef};\n use rustc::ty;\n-use rustc::infer;\n use abi::{Abi, FnType};\n use attributes;\n use context::CrateContext;\n@@ -105,7 +104,7 @@ pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n     let abi = fn_type.fn_abi();\n     let sig = ccx.tcx().erase_late_bound_regions(fn_type.fn_sig());\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let sig = ccx.tcx().normalize_associated_type(&sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n     let fty = FnType::new(ccx, abi, &sig, &[]);"}, {"sha": "04c7e872f0ea399dee20c136f00dc8767955522e", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -15,7 +15,6 @@ use intrinsics::{self, Intrinsic};\n use libc;\n use llvm;\n use llvm::{ValueRef, TypeKind};\n-use rustc::infer;\n use rustc::ty::subst;\n use rustc::ty::subst::FnSpace;\n use abi::{Abi, FnType};\n@@ -114,7 +113,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let (def_id, substs, sig) = match callee_ty.sty {\n         ty::TyFnDef(def_id, substs, fty) => {\n             let sig = tcx.erase_late_bound_regions(&fty.sig);\n-            (def_id, substs, infer::normalize_associated_type(tcx, &sig))\n+            (def_id, substs, tcx.normalize_associated_type(&sig))\n         }\n         _ => bug!(\"expected fn item type, found {}\", callee_ty)\n     };\n@@ -1352,7 +1351,7 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n     let tcx = bcx.tcx();\n     let sig = tcx.erase_late_bound_regions(callee_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(tcx, &sig);\n+    let sig = tcx.normalize_associated_type(&sig);\n     let arg_tys = sig.inputs;\n \n     // every intrinsic takes a SIMD vector as its first argument"}, {"sha": "22177fe9451d8d3cda3be66ed5a2f60268be021e", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -14,7 +14,7 @@ use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_params};\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{self, InferCtxt};\n+use rustc::infer::InferCtxt;\n use rustc::ty::subst::{FnSpace, Subst, Substs};\n use rustc::ty::subst;\n use rustc::traits::{self, ProjectionMode};\n@@ -86,7 +86,7 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n            method_ty);\n \n     let sig = tcx.erase_late_bound_regions(&method_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(tcx, &sig);\n+    let sig = tcx.normalize_associated_type(&sig);\n     let fn_ty = FnType::new(ccx, method_ty.fn_abi(), &sig, &[]);\n \n     let function_name ="}, {"sha": "ee94d6fa48e7a124b8eca4d2306a0909cd53cf13", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -12,7 +12,6 @@ use back::symbol_names;\n use llvm::ValueRef;\n use llvm;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::normalize_associated_type;\n use rustc::ty::subst;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TypeFoldable, TyCtxt};\n@@ -197,7 +196,7 @@ pub fn apply_param_substs<'tcx,T>(tcx: &TyCtxt<'tcx>,\n     where T : TypeFoldable<'tcx>\n {\n     let substituted = value.subst(tcx, param_substs);\n-    normalize_associated_type(tcx, &substituted)\n+    tcx.normalize_associated_type(&substituted)\n }\n \n \n@@ -207,5 +206,5 @@ pub fn field_ty<'tcx>(tcx: &TyCtxt<'tcx>,\n                       f: ty::FieldDef<'tcx>)\n                       -> Ty<'tcx>\n {\n-    normalize_associated_type(tcx, &f.ty(tcx, param_substs))\n+    tcx.normalize_associated_type(&f.ty(tcx, param_substs))\n }"}, {"sha": "8b8d9984bc9500073c198c4706d5508a288db8ac", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e290998c3d8b2caf25715c932d416fb0104472e/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=6e290998c3d8b2caf25715c932d416fb0104472e", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_camel_case_types)]\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer::{self, InferCtxt};\n+use rustc::infer::InferCtxt;\n use rustc::ty::subst;\n use abi::FnType;\n use adt;\n@@ -296,7 +296,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyFnDef(..) => Type::nil(cx),\n       ty::TyFnPtr(f) => {\n         let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n-        let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+        let sig = cx.tcx().normalize_associated_type(&sig);\n         FnType::new(cx, f.abi, &sig, &[]).llvm_type(cx).ptr_to()\n       }\n       ty::TyTuple(ref tys) if tys.is_empty() => Type::nil(cx),"}]}