{"sha": "633aace41108b74fe6c93c5ab04272067db033f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzM2FhY2U0MTEwOGI3NGZlNmM5M2M1YWIwNDI3MjA2N2RiMDMzZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T15:08:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T15:08:58Z"}, "message": "Rename LambdaExpr -> ClosureExpr", "tree": {"sha": "d071a03fb2c191629da532c14c002c30328d1e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d071a03fb2c191629da532c14c002c30328d1e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633aace41108b74fe6c93c5ab04272067db033f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633aace41108b74fe6c93c5ab04272067db033f9", "html_url": "https://github.com/rust-lang/rust/commit/633aace41108b74fe6c93c5ab04272067db033f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633aace41108b74fe6c93c5ab04272067db033f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfcee63e75d6feb21cafbdf3887e0efd508b6b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfcee63e75d6feb21cafbdf3887e0efd508b6b2e", "html_url": "https://github.com/rust-lang/rust/commit/bfcee63e75d6feb21cafbdf3887e0efd508b6b2e"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "cc62db0c446ae10041dd0b27e739350dcdc2b7d4", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n-        BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n+        BLOCK_EXPR, BREAK_EXPR, CLOSURE_EXPR, COMMENT, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n     },\n     SyntaxNode,\n };\n@@ -148,7 +148,7 @@ impl Anchor {\n             }\n \n             if let Some(parent) = node.parent() {\n-                if parent.kind() == MATCH_ARM || parent.kind() == LAMBDA_EXPR {\n+                if parent.kind() == MATCH_ARM || parent.kind() == CLOSURE_EXPR {\n                     return Some(Anchor::WrapInBlock(node));\n                 }\n             }"}, {"sha": "99d72340259a84893c8e5eaf136079759d894cd6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -473,7 +473,7 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 }\n             }\n-            ast::Expr::LambdaExpr(e) => {\n+            ast::Expr::ClosureExpr(e) => {\n                 let mut args = Vec::new();\n                 let mut arg_types = Vec::new();\n                 if let Some(pl) = e.param_list() {"}, {"sha": "f3b7cd492c0bcf9d328a2a281312e360462eb5d5", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -379,7 +379,7 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n \n         FOR_EXPR => FragmentKind::Expr,\n         PATH_EXPR => FragmentKind::Expr,\n-        LAMBDA_EXPR => FragmentKind::Expr,\n+        CLOSURE_EXPR => FragmentKind::Expr,\n         CONDITION => FragmentKind::Expr,\n         BREAK_EXPR => FragmentKind::Expr,\n         RETURN_EXPR => FragmentKind::Expr,"}, {"sha": "9e654b373cbddb6b3aadc684a42db6504f546910", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -134,7 +134,7 @@ pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n         NodeOrToken::Token(token) => token.parent(),\n     };\n     for node in leaf.ancestors() {\n-        if node.kind() == FN || node.kind() == LAMBDA_EXPR {\n+        if node.kind() == FN || node.kind() == CLOSURE_EXPR {\n             break;\n         }\n         let loop_body = match_ast! {"}, {"sha": "0b01d3bc64640f4d3e6aeb69ce3262757a7676cd", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -250,7 +250,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n             p.error(\"expected expression\");\n         }\n     }\n-    m.complete(p, LAMBDA_EXPR)\n+    m.complete(p, CLOSURE_EXPR)\n }\n \n // test if_expr"}, {"sha": "2830c0d74b3b07e900c82cdba252e1e87090eb5c", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -173,7 +173,7 @@ pub enum SyntaxKind {\n     ARRAY_EXPR,\n     PAREN_EXPR,\n     PATH_EXPR,\n-    LAMBDA_EXPR,\n+    CLOSURE_EXPR,\n     IF_EXPR,\n     WHILE_EXPR,\n     CONDITION,"}, {"sha": "158544fa2160e70b99c67c393d0960831db02b0a", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -582,9 +582,7 @@ pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for BinExpr {}\n-impl BinExpr {\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-}\n+impl BinExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -680,17 +678,14 @@ impl ast::AttrsOwner for IfExpr {}\n impl IfExpr {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n-    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n     pub fn else_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![else]) }\n-    pub fn if_expr(&self) -> Option<IfExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for IndexExpr {}\n impl IndexExpr {\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n@@ -704,11 +699,11 @@ impl Label {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LambdaExpr {\n+pub struct ClosureExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for LambdaExpr {}\n-impl LambdaExpr {\n+impl ast::AttrsOwner for ClosureExpr {}\n+impl ClosureExpr {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n     pub fn move_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![move]) }\n@@ -778,9 +773,7 @@ pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for RangeExpr {}\n-impl RangeExpr {\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-}\n+impl RangeExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1351,7 +1344,7 @@ pub enum Expr {\n     IfExpr(IfExpr),\n     IndexExpr(IndexExpr),\n     Label(Label),\n-    LambdaExpr(LambdaExpr),\n+    ClosureExpr(ClosureExpr),\n     Literal(Literal),\n     LoopExpr(LoopExpr),\n     MacroCall(MacroCall),\n@@ -2101,8 +2094,8 @@ impl AstNode for Label {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for LambdaExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LAMBDA_EXPR }\n+impl AstNode for ClosureExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CLOSURE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3114,8 +3107,8 @@ impl From<IndexExpr> for Expr {\n impl From<Label> for Expr {\n     fn from(node: Label) -> Expr { Expr::Label(node) }\n }\n-impl From<LambdaExpr> for Expr {\n-    fn from(node: LambdaExpr) -> Expr { Expr::LambdaExpr(node) }\n+impl From<ClosureExpr> for Expr {\n+    fn from(node: ClosureExpr) -> Expr { Expr::ClosureExpr(node) }\n }\n impl From<Literal> for Expr {\n     fn from(node: Literal) -> Expr { Expr::Literal(node) }\n@@ -3167,7 +3160,7 @@ impl AstNode for Expr {\n         match kind {\n             ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n             | CAST_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR\n-            | INDEX_EXPR | LABEL | LAMBDA_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n+            | INDEX_EXPR | LABEL | CLOSURE_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n             | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n             _ => false,\n@@ -3190,7 +3183,7 @@ impl AstNode for Expr {\n             IF_EXPR => Expr::IfExpr(IfExpr { syntax }),\n             INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n             LABEL => Expr::Label(Label { syntax }),\n-            LAMBDA_EXPR => Expr::LambdaExpr(LambdaExpr { syntax }),\n+            CLOSURE_EXPR => Expr::ClosureExpr(ClosureExpr { syntax }),\n             LITERAL => Expr::Literal(Literal { syntax }),\n             LOOP_EXPR => Expr::LoopExpr(LoopExpr { syntax }),\n             MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n@@ -3227,7 +3220,7 @@ impl AstNode for Expr {\n             Expr::IfExpr(it) => &it.syntax,\n             Expr::IndexExpr(it) => &it.syntax,\n             Expr::Label(it) => &it.syntax,\n-            Expr::LambdaExpr(it) => &it.syntax,\n+            Expr::ClosureExpr(it) => &it.syntax,\n             Expr::Literal(it) => &it.syntax,\n             Expr::LoopExpr(it) => &it.syntax,\n             Expr::MacroCall(it) => &it.syntax,\n@@ -3757,7 +3750,7 @@ impl std::fmt::Display for Label {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for LambdaExpr {\n+impl std::fmt::Display for ClosureExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "e0f1d0c27499d1feaf414bb2c77a81c58e58476a", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..42\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n       EXPR_STMT@16..24\n-        LAMBDA_EXPR@16..24\n+        CLOSURE_EXPR@16..24\n           PARAM_LIST@16..18\n             PIPE@16..17 \"|\"\n             PIPE@17..18 \"|\""}, {"sha": "0afa24b775d56823459000677f8cf4f7c5b0a144", "filename": "crates/ra_syntax/test_data/parser/err/0012_broken_lambda.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -117,7 +117,7 @@ SOURCE_FILE@0..389\n         WHITESPACE@140..141\n         EQ@141..142\n         WHITESPACE@142..143\n-        LAMBDA_EXPR@143..389\n+        CLOSURE_EXPR@143..389\n           PARAM_LIST@143..388\n             PIPE@143..144\n             PARAM@144..159"}, {"sha": "0678d42781db42f14400c7c70c0626ae16320250", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -49,7 +49,7 @@ SOURCE_FILE@0..83\n               IDENT@48..51 \"map\"\n             ARG_LIST@51..57\n               L_PAREN@51..52 \"(\"\n-              LAMBDA_EXPR@52..56\n+              CLOSURE_EXPR@52..56\n                 PARAM_LIST@52..56\n                   PIPE@52..53 \"|\"\n                   PARAM@53..55"}, {"sha": "a80d79563ad96ed81085476e918361ce4a3ade21", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0106_lambda_expr.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..134\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n       EXPR_STMT@15..21\n-        LAMBDA_EXPR@15..20\n+        CLOSURE_EXPR@15..20\n           PARAM_LIST@15..17\n             PIPE@15..16 \"|\"\n             PIPE@16..17 \"|\"\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@20..21 \";\"\n       WHITESPACE@21..26 \"\\n    \"\n       EXPR_STMT@26..43\n-        LAMBDA_EXPR@26..42\n+        CLOSURE_EXPR@26..42\n           PARAM_LIST@26..28\n             PIPE@26..27 \"|\"\n             PIPE@27..28 \"|\"\n@@ -47,7 +47,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@42..43 \";\"\n       WHITESPACE@43..48 \"\\n    \"\n       EXPR_STMT@48..54\n-        LAMBDA_EXPR@48..53\n+        CLOSURE_EXPR@48..53\n           PARAM_LIST@48..51\n             PIPE@48..49 \"|\"\n             PARAM@49..50\n@@ -64,7 +64,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@53..54 \";\"\n       WHITESPACE@54..59 \"\\n    \"\n       EXPR_STMT@59..76\n-        LAMBDA_EXPR@59..75\n+        CLOSURE_EXPR@59..75\n           MOVE_KW@59..63 \"move\"\n           WHITESPACE@63..64 \" \"\n           PARAM_LIST@64..73\n@@ -91,7 +91,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@75..76 \";\"\n       WHITESPACE@76..81 \"\\n    \"\n       EXPR_STMT@81..93\n-        LAMBDA_EXPR@81..92\n+        CLOSURE_EXPR@81..92\n           ASYNC_KW@81..86 \"async\"\n           WHITESPACE@86..87 \" \"\n           PARAM_LIST@87..89\n@@ -104,7 +104,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@92..93 \";\"\n       WHITESPACE@93..98 \"\\n    \"\n       EXPR_STMT@98..109\n-        LAMBDA_EXPR@98..108\n+        CLOSURE_EXPR@98..108\n           MOVE_KW@98..102 \"move\"\n           WHITESPACE@102..103 \" \"\n           PARAM_LIST@103..105\n@@ -117,7 +117,7 @@ SOURCE_FILE@0..134\n         SEMICOLON@108..109 \";\"\n       WHITESPACE@109..114 \"\\n    \"\n       EXPR_STMT@114..131\n-        LAMBDA_EXPR@114..130\n+        CLOSURE_EXPR@114..130\n           ASYNC_KW@114..119 \"async\"\n           WHITESPACE@119..120 \" \"\n           MOVE_KW@120..124 \"move\""}, {"sha": "d2fd6e567a409f4f2c94a22fa227c41ce4385f2a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0130_let_stmt.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -105,7 +105,7 @@ SOURCE_FILE@0..135\n         WHITESPACE@117..118 \" \"\n         EQ@118..119 \"=\"\n         WHITESPACE@119..120 \" \"\n-        LAMBDA_EXPR@120..131\n+        CLOSURE_EXPR@120..131\n           ATTR@120..127\n             POUND@120..121 \"#\"\n             L_BRACK@121..122 \"[\""}, {"sha": "0a9f7c137643ff72814fef37d972c5843fdaf488", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0155_closure_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -20,7 +20,7 @@ SOURCE_FILE@0..63\n         WHITESPACE@22..23 \" \"\n         EQ@23..24 \"=\"\n         WHITESPACE@24..25 \" \"\n-        LAMBDA_EXPR@25..59\n+        CLOSURE_EXPR@25..59\n           PARAM_LIST@25..56\n             PIPE@25..26 \"|\"\n             PARAM@26..29"}, {"sha": "aa4099a9293063e4ba39843b0f1cd58bb78d11f5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0158_lambda_ret_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -13,7 +13,7 @@ SOURCE_FILE@0..34\n       WHITESPACE@11..12 \" \"\n       EXPR_STMT@12..31\n         CALL_EXPR@12..30\n-          LAMBDA_EXPR@12..28\n+          CLOSURE_EXPR@12..28\n             PARAM_LIST@12..14\n               PIPE@12..13 \"|\"\n               PIPE@13..14 \"|\""}, {"sha": "1d75ed08f0ac06e3b92be1d5c5ea612b6ac28227", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -351,7 +351,7 @@ SOURCE_FILE@0..3813\n         WHITESPACE@766..767 \" \"\n         BLOCK_EXPR@767..777\n           L_CURLY@767..768 \"{\"\n-          LAMBDA_EXPR@768..776\n+          CLOSURE_EXPR@768..776\n             PARAM_LIST@768..770\n               PIPE@768..769 \"|\"\n               PIPE@769..770 \"|\"\n@@ -1628,7 +1628,7 @@ SOURCE_FILE@0..3813\n               CALL_EXPR@2950..2995\n                 PAREN_EXPR@2950..2971\n                   L_PAREN@2950..2951 \"(\"\n-                  LAMBDA_EXPR@2951..2970\n+                  CLOSURE_EXPR@2951..2970\n                     PARAM_LIST@2951..2968\n                       PIPE@2951..2952 \"|\"\n                       PARAM@2952..2962"}, {"sha": "650f4e3102dfc43944ba8658f0d66045a2771837", "filename": "crates/ra_syntax/test_data/parser/ok/0044_let_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -52,7 +52,7 @@ SOURCE_FILE@0..166\n                   IDENT@134..146 \"catch_unwind\"\n           ARG_LIST@146..162\n             L_PAREN@146..147 \"(\"\n-            LAMBDA_EXPR@147..161\n+            CLOSURE_EXPR@147..161\n               MOVE_KW@147..151 \"move\"\n               WHITESPACE@151..152 \" \"\n               PARAM_LIST@152..154"}, {"sha": "427406249c99877c34a15924814d04150221a476", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -144,7 +144,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"ARRAY_EXPR\",\n         \"PAREN_EXPR\",\n         \"PATH_EXPR\",\n-        \"LAMBDA_EXPR\",\n+        \"CLOSURE_EXPR\",\n         \"IF_EXPR\",\n         \"WHILE_EXPR\",\n         \"CONDITION\","}, {"sha": "05953869693e52f8bfcca4a24db32e08b6491d8f", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -579,7 +579,19 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, r\n         }\n         Rule::Labeled { label: l, rule } => {\n             assert!(label.is_none());\n-            if l == \"op\" {\n+            let manually_implemented = matches!(\n+                l.as_str(),\n+                \"lhs\"\n+                    | \"rhs\"\n+                    | \"then_branch\"\n+                    | \"else_branch\"\n+                    | \"start\"\n+                    | \"end\"\n+                    | \"op\"\n+                    | \"index\"\n+                    | \"base\"\n+            );\n+            if manually_implemented {\n                 return;\n             }\n             lower_rule(acc, grammar, Some(l), rule);"}, {"sha": "aef07cb1e82512bea1bf1962fde17767a1a503f4", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/633aace41108b74fe6c93c5ab04272067db033f9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=633aace41108b74fe6c93c5ab04272067db033f9", "patch": "@@ -222,7 +222,7 @@ Expr =\n | IfExpr\n | IndexExpr\n | Label\n-| LambdaExpr\n+| ClosureExpr\n | Literal\n | LoopExpr\n | MacroCall\n@@ -266,14 +266,14 @@ PrefixExpr =\n \n BinExpr =\n   Attr*\n-  Expr\n+  lhs:Expr\n   op:(\n     '||' | '&&'\n     | '==' | '!=' | '<=' | '>=' | '<' | '>'\n     | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'\n     | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='\n   )\n-  Expr\n+  rhs:Expr\n \n CastExpr =\n   Attr* Expr 'as' Type\n@@ -288,7 +288,7 @@ ArrayExpr =\n   ) ']'\n \n IndexExpr =\n-  Attr* Expr '[' Expr ']'\n+  Attr* base:Expr '[' index:Expr ']'\n \n TupleExpr =\n   Attr* '(' Attr* (Expr (',' Expr)* ','?)? ')'\n@@ -318,13 +318,13 @@ MethodCallExpr =\n FieldExpr =\n   Attr* Expr '.' NameRef\n \n-LambdaExpr =\n+ClosureExpr =\n   Attr* 'static'? 'async'? 'move'?  ParamList RetType?\n   body:Expr\n \n IfExpr =\n-  Attr* 'if' Condition BlockExpr\n-  ('else' (IfExpr | BlockExpr))?\n+  Attr* 'if' Condition then_branch:BlockExpr\n+  ('else' else_branch:(IfExpr | BlockExpr))?\n \n Condition =\n   'let' Pat '=' Expr\n@@ -352,7 +352,7 @@ ContinueExpr =\n   Attr* 'continue' 'lifetime'?\n \n RangeExpr =\n-  Attr* Expr? op:('..' | '..=') Expr?\n+  Attr* start:Expr? op:('..' | '..=') end:Expr?\n \n MatchExpr =\n   Attr* 'match' Expr MatchArmList"}]}