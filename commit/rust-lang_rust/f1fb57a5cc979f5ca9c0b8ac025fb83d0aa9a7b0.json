{"sha": "f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmI1N2E1Y2M5NzlmNWNhOWMwYjhhYzAyNWZiODNkMGFhOWE3YjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-22T20:21:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-22T20:24:12Z"}, "message": "native: Unlink unix socket paths on drop\n\nThis prevents unix sockets from remaining on the system all over the place, and\nmore closely mirrors the behavior of libuv and windows pipes.", "tree": {"sha": "8c2851b593b0de46ef5e0fa0852501d5a006206c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2851b593b0de46ef5e0fa0852501d5a006206c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "html_url": "https://github.com/rust-lang/rust/commit/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f6b925a9df11d3f5d0090e91ad893b1932cda9", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f6b925a9df11d3f5d0090e91ad893b1932cda9", "html_url": "https://github.com/rust-lang/rust/commit/92f6b925a9df11d3f5d0090e91ad893b1932cda9"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "b332ced1fc5726528b9512f3a88fcd107f3ec783", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "patch": "@@ -232,11 +232,14 @@ impl UnixDatagram {\n \n pub struct UnixListener {\n     inner: Inner,\n+    path: CString,\n }\n \n impl UnixListener {\n     pub fn bind(addr: &CString) -> IoResult<UnixListener> {\n-        bind(addr, libc::SOCK_STREAM).map(|fd| UnixListener { inner: fd })\n+        bind(addr, libc::SOCK_STREAM).map(|fd| {\n+            UnixListener { inner: fd, path: addr.clone() }\n+        })\n     }\n \n     fn fd(&self) -> fd_t { self.inner.fd }\n@@ -283,3 +286,14 @@ impl rtio::RtioUnixAcceptor for UnixAcceptor {\n         self.native_accept().map(|s| ~s as ~rtio::RtioPipe:Send)\n     }\n }\n+\n+impl Drop for UnixListener {\n+    fn drop(&mut self) {\n+        // Unlink the path to the socket to ensure that it doesn't linger. We're\n+        // careful to unlink the path before we close the file descriptor to\n+        // prevent races where we unlink someone else's path.\n+        unsafe {\n+            let _ = libc::unlink(self.path.with_ref(|p| p));\n+        }\n+    }\n+}"}, {"sha": "bf56817702021e8f95c4bcd589a2b580c329de59", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=f1fb57a5cc979f5ca9c0b8ac025fb83d0aa9a7b0", "patch": "@@ -355,4 +355,20 @@ mod tests {\n \n         rx.recv();\n     })\n+\n+    iotest!(fn drop_removes_listener_path() {\n+        let path = next_test_unix();\n+        let l = UnixListener::bind(&path).unwrap();\n+        assert!(path.exists());\n+        drop(l);\n+        assert!(!path.exists());\n+    } #[cfg(not(windows))])\n+\n+    iotest!(fn drop_removes_acceptor_path() {\n+        let path = next_test_unix();\n+        let l = UnixListener::bind(&path).unwrap();\n+        assert!(path.exists());\n+        drop(l.listen().unwrap());\n+        assert!(!path.exists());\n+    } #[cfg(not(windows))])\n }"}]}