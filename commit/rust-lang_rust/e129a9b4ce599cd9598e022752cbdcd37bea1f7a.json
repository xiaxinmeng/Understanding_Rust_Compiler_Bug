{"sha": "e129a9b4ce599cd9598e022752cbdcd37bea1f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjlhOWI0Y2U1OTljZDk1OThlMDIyNzUyY2JkY2QzN2JlYTFmN2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-13T22:14:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-13T22:14:04Z"}, "message": "Use the user-defined type aliases when reporting type errors", "tree": {"sha": "2c5907de87aa8dbf427599cb9a059931094cb143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5907de87aa8dbf427599cb9a059931094cb143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e129a9b4ce599cd9598e022752cbdcd37bea1f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e129a9b4ce599cd9598e022752cbdcd37bea1f7a", "html_url": "https://github.com/rust-lang/rust/commit/e129a9b4ce599cd9598e022752cbdcd37bea1f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e129a9b4ce599cd9598e022752cbdcd37bea1f7a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c622b6ecbb47cfcef7322047217665bda5675b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c622b6ecbb47cfcef7322047217665bda5675b7", "html_url": "https://github.com/rust-lang/rust/commit/5c622b6ecbb47cfcef7322047217665bda5675b7"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "4427890411c63c2a6cada859927b4d57b3bf1860", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 71, "deletions": 21, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/e129a9b4ce599cd9598e022752cbdcd37bea1f7a/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/e129a9b4ce599cd9598e022752cbdcd37bea1f7a/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=e129a9b4ce599cd9598e022752cbdcd37bea1f7a", "patch": "@@ -37,6 +37,61 @@ let iflog cx thunk =\n   else ()\n ;;\n \n+(* Pretty-printing of type names *)\n+let type_name_cache = ref None\n+let get_type_name_cache cx =\n+  match !type_name_cache with\n+      None ->\n+        let cache = Hashtbl.create 0 in\n+        let add item_id ty =\n+          let item_names = cx.Semant.ctxt_all_item_names in\n+          if Hashtbl.mem item_names item_id then\n+            Hashtbl.add cache ty (Hashtbl.find item_names item_id)\n+        in\n+        Hashtbl.iter add cx.Semant.ctxt_all_type_items;\n+        type_name_cache := Some cache;\n+        cache\n+    | Some cache -> cache\n+\n+let rec friendly_stringify cx fallback ty =\n+  let cache = get_type_name_cache cx in\n+  if Hashtbl.mem cache ty then\n+    let names = List.map (Ast.sprintf_name ()) (Hashtbl.find_all cache ty) in\n+    String.concat \" = \" names\n+  else\n+    match ty with\n+        Ast.TY_vec ty' -> \"vec[\" ^ (friendly_stringify cx fallback ty') ^ \")\"\n+      | Ast.TY_chan ty' ->\n+          \"chan[\" ^ (friendly_stringify cx fallback ty') ^ \")\"\n+      | Ast.TY_port ty' ->\n+          \"port[\" ^ (friendly_stringify cx fallback ty') ^ \")\"\n+      | Ast.TY_box ty' -> \"@\" ^ (friendly_stringify cx fallback ty')\n+      | Ast.TY_mutable ty' ->\n+          \"(mutable \" ^ (friendly_stringify cx fallback ty') ^ \")\"\n+      | Ast.TY_constrained (ty', _) ->\n+          \"(\" ^ (friendly_stringify cx fallback ty') ^ \" : <constrained>)\"\n+      | Ast.TY_tup tys ->\n+          let tys_str = Array.map (friendly_stringify cx fallback) tys in\n+          \"tup(\" ^ (String.concat \", \" (Array.to_list tys_str)) ^ \")\"\n+      | Ast.TY_rec fields ->\n+          let format_field (ident, ty') =\n+            ident ^ \"=\" ^ (friendly_stringify cx fallback ty')\n+          in\n+          let fields = Array.to_list (Array.map format_field fields) in\n+          \"rec(\" ^ (String.concat \", \" fields) ^ \")\"\n+      | Ast.TY_fn (fnsig, _) ->\n+          let format_slot slot =\n+            match slot.Ast.slot_ty with\n+                None -> Common.bug () \"no ty in slot\"\n+              | Some ty' -> friendly_stringify cx fallback ty'\n+          in\n+          let fn_args = Array.map format_slot fnsig.Ast.sig_input_slots in\n+          let fn_args_str = String.concat \", \" (Array.to_list fn_args) in\n+          let fn_rv_str = format_slot fnsig.Ast.sig_output_slot in\n+          Printf.sprintf \"fn(%s) -> %s\" fn_args_str fn_rv_str\n+\n+      | _ -> fallback ty (* TODO: we can do better for objects *)\n+\n let head_only ty =\n   match ty with\n \n@@ -59,11 +114,11 @@ let head_only ty =\n \n \n let rec rec_diff\n+    (cx:Semant.ctxt)\n     (a:Ast.ty_rec) (b:Ast.ty_rec)\n-    (abuf:Buffer.t) (bbuf:Buffer.t)\n+    (bbuf:Buffer.t)\n     : unit =\n \n-  Buffer.add_string abuf \"rec(\";\n   Buffer.add_string bbuf \"rec(\";\n \n   let rec append_first_diff buf a b i =\n@@ -86,23 +141,21 @@ let rec rec_diff\n             else\n               if aty <> bty\n               then\n-                let (a,_) = summarize_difference aty bty in\n+                let (a,_) = summarize_difference cx aty bty in\n                   Printf.bprintf buf \"... %s %s ...)\" a alab\n               else\n                 append_first_diff buf a b (i+1)\n   in\n-    append_first_diff abuf a b 0;\n     append_first_diff bbuf b a 0;\n-    Buffer.add_string abuf \")\";\n     Buffer.add_string bbuf \")\";\n \n \n and tup_diff\n+    (cx:Semant.ctxt)\n     (a:Ast.ty_tup) (b:Ast.ty_tup)\n-    (abuf:Buffer.t) (bbuf:Buffer.t)\n+    (bbuf:Buffer.t)\n     : unit =\n \n-  Buffer.add_string abuf \"tup(\";\n   Buffer.add_string bbuf \"tup(\";\n \n   let rec append_first_diff buf a b i =\n@@ -121,18 +174,16 @@ and tup_diff\n           let (bty) = b.(i) in\n             if aty <> bty\n             then\n-              let (a,_) = summarize_difference aty bty in\n+              let (a,_) = summarize_difference cx aty bty in\n                 Printf.bprintf buf \"... %s ...)\" a\n             else\n               append_first_diff buf a b (i+1)\n   in\n-    append_first_diff abuf a b 0;\n     append_first_diff bbuf b a 0;\n-    Buffer.add_string abuf \")\";\n     Buffer.add_string bbuf \")\";\n \n \n-and summarize_difference (expected:Ast.ty) (actual:Ast.ty)\n+and summarize_difference cx (expected:Ast.ty) (actual:Ast.ty)\n     : (string * string) =\n   if expected = actual\n   then (\"_\", \"_\")\n@@ -142,23 +193,23 @@ and summarize_difference (expected:Ast.ty) (actual:Ast.ty)\n       let abuf = Buffer.create 10 in\n \n       let p s =\n-        Buffer.add_string ebuf s;\n         Buffer.add_string abuf s\n       in\n \n       let sub e a =\n-        let (e, a) = summarize_difference e a in\n-          Printf.bprintf ebuf \"%s\" e;\n-          Printf.bprintf abuf \"%s\" a;\n+        let (_, a) = summarize_difference cx e a in\n+          Printf.bprintf abuf \"%s\" a\n       in\n \n+      Buffer.add_string ebuf (friendly_stringify cx head_only expected);\n+\n         begin\n           match expected, actual with\n               (Ast.TY_tup etys,  Ast.TY_tup atys) ->\n-                tup_diff etys atys ebuf abuf\n+                tup_diff cx etys atys abuf\n \n             | (Ast.TY_rec eelts, Ast.TY_rec aelts) ->\n-                rec_diff eelts aelts ebuf abuf\n+                rec_diff cx eelts aelts abuf\n \n             | (Ast.TY_vec e, Ast.TY_vec a) ->\n                 p \"vec[\"; sub e a; p \"]\";\n@@ -175,9 +226,8 @@ and summarize_difference (expected:Ast.ty) (actual:Ast.ty)\n             | (Ast.TY_mutable e, Ast.TY_mutable a) ->\n                 p \"mutable \"; sub e a;\n \n-            | (e, a) ->\n-                Buffer.add_string ebuf (head_only e);\n-                Buffer.add_string abuf (head_only a)\n+            | (_, a) ->\n+                Buffer.add_string abuf (friendly_stringify cx head_only a)\n         end;\n         (Buffer.contents ebuf, Buffer.contents abuf)\n     end\n@@ -253,7 +303,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   let demand (expected:Ast.ty) (actual:Ast.ty) : unit =\n     let expected, actual = fundamental_ty expected, fundamental_ty actual in\n     if expected <> actual then\n-      let (e,a) = summarize_difference expected actual in\n+      let (e,a) = summarize_difference cx expected actual in\n         type_error_full e a\n   in\n   let demand_integer (actual:Ast.ty) : unit ="}]}