{"sha": "f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZGIwZWY5NDY0YTE3ZmE2ZTU0N2U3NTViMWI1ZGZhMDlhZjk0OTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-23T11:54:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-23T12:48:10Z"}, "message": "std: remove the `equals` method from `TotalEq`.\n\n`TotalEq` is now just an assertion about the `Eq` impl of a\ntype (i.e. `==` is a total equality if a type implements `TotalEq`) so\nthe extra method is just confusing.\n\nAlso, a new method magically appeared as a hack to allow deriving to\nassert that the contents of a struct/enum are also TotalEq, because the\nderiving infrastructure makes it very hard to do anything but create a\ntrait method. (You didn't hear about this horrible work-around from me\n:(.)", "tree": {"sha": "671ec7c6a30cc425d47f83ca1b4efd2f1c71dbca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671ec7c6a30cc425d47f83ca1b4efd2f1c71dbca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "html_url": "https://github.com/rust-lang/rust/commit/f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddb60565423bdc225ccc8dd4ebfb653c5650ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddb60565423bdc225ccc8dd4ebfb653c5650ba2", "html_url": "https://github.com/rust-lang/rust/commit/2ddb60565423bdc225ccc8dd4ebfb653c5650ba2"}], "stats": {"total": 282, "additions": 74, "deletions": 208}, "files": [{"sha": "51fa002420cb80b3da617f0a01c93006d9bf951c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -337,7 +337,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n                 }\n             }\n \n-            if tool_path.equals(&~\"\") {\n+            if tool_path.is_empty() {\n                 fatal(~\"cannot found android cross path\");\n             }\n "}, {"sha": "3f53ede6027eb65776b9bb6daada98db066ad544", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 13, "deletions": 44, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -94,17 +94,12 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for BTree<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for BTree<K, V> {\n     fn eq(&self, other: &BTree<K, V>) -> bool {\n-        self.equals(other)\n-    }\n-}\n-\n-impl<K: TotalOrd, V: TotalEq> TotalEq for BTree<K, V> {\n-    ///Testing equality on BTrees by comparing the root.\n-    fn equals(&self, other: &BTree<K, V>) -> bool {\n         self.root.cmp(&other.root) == Equal\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> TotalEq for BTree<K, V> {}\n+\n impl<K: TotalOrd, V: TotalEq> Ord for BTree<K, V> {\n     fn lt(&self, other: &BTree<K, V>) -> bool {\n         self.cmp(other) == Less\n@@ -204,14 +199,6 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Node<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for Node<K, V> {\n     fn eq(&self, other: &Node<K, V>) -> bool {\n-        self.equals(other)\n-    }\n-}\n-\n-impl<K: TotalOrd, V: TotalEq> TotalEq for Node<K, V> {\n-    ///Returns whether two nodes are equal based on the keys of each element.\n-    ///Two nodes are equal if all of their keys are the same.\n-    fn equals(&self, other: &Node<K, V>) -> bool{\n         match *self{\n             BranchNode(ref branch) => {\n                 if other.is_leaf() {\n@@ -232,6 +219,8 @@ impl<K: TotalOrd, V: TotalEq> TotalEq for Node<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> TotalEq for Node<K, V> {}\n+\n impl<K: TotalOrd, V: TotalEq> Ord for Node<K, V> {\n     fn lt(&self, other: &Node<K, V>) -> bool {\n         self.cmp(other) == Less\n@@ -405,16 +394,11 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Leaf<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for Leaf<K, V> {\n     fn eq(&self, other: &Leaf<K, V>) -> bool {\n-        self.equals(other)\n+        self.elts == other.elts\n     }\n }\n \n-impl<K: TotalOrd, V: TotalEq> TotalEq for Leaf<K, V> {\n-    ///Implementation of equals function for leaves that compares LeafElts.\n-    fn equals(&self, other: &Leaf<K, V>) -> bool {\n-        self.elts.equals(&other.elts)\n-    }\n-}\n+impl<K: TotalOrd, V: TotalEq> TotalEq for Leaf<K, V> {}\n \n impl<K: TotalOrd, V: TotalEq> Ord for Leaf<K, V> {\n     fn lt(&self, other: &Leaf<K, V>) -> bool {\n@@ -639,16 +623,11 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Branch<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for Branch<K, V> {\n     fn eq(&self, other: &Branch<K, V>) -> bool {\n-        self.equals(other)\n+        self.elts == other.elts\n     }\n }\n \n-impl<K: TotalOrd, V: TotalEq> TotalEq for Branch<K, V> {\n-    ///Equals function for Branches--compares all the elements in each branch\n-    fn equals(&self, other: &Branch<K, V>) -> bool {\n-        self.elts.equals(&other.elts)\n-    }\n-}\n+impl<K: TotalOrd, V: TotalEq> TotalEq for Branch<K, V> {}\n \n impl<K: TotalOrd, V: TotalEq> Ord for Branch<K, V> {\n     fn lt(&self, other: &Branch<K, V>) -> bool {\n@@ -712,16 +691,11 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for LeafElt<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for LeafElt<K, V> {\n     fn eq(&self, other: &LeafElt<K, V>) -> bool {\n-        self.equals(other)\n+        self.key == other.key && self.value == other.value\n     }\n }\n \n-impl<K: TotalOrd, V: TotalEq> TotalEq for LeafElt<K, V> {\n-    ///TotalEq for LeafElts\n-    fn equals(&self, other: &LeafElt<K, V>) -> bool {\n-        self.key.equals(&other.key) && self.value.equals(&other.value)\n-    }\n-}\n+impl<K: TotalOrd, V: TotalEq> TotalEq for LeafElt<K, V> {}\n \n impl<K: TotalOrd, V: TotalEq> Ord for LeafElt<K, V> {\n     fn lt(&self, other: &LeafElt<K, V>) -> bool {\n@@ -766,16 +740,11 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for BranchElt<K, V> {\n \n impl<K: TotalOrd, V: TotalEq> Eq for BranchElt<K, V>{\n     fn eq(&self, other: &BranchElt<K, V>) -> bool {\n-        self.equals(other)\n+        self.key == other.key && self.value == other.value\n     }\n }\n \n-impl<K: TotalOrd, V: TotalEq> TotalEq for BranchElt<K, V>{\n-    ///TotalEq for BranchElts\n-    fn equals(&self, other: &BranchElt<K, V>) -> bool {\n-        self.key.equals(&other.key)&&self.value.equals(&other.value)\n-    }\n-}\n+impl<K: TotalOrd, V: TotalEq> TotalEq for BranchElt<K, V>{}\n \n impl<K: TotalOrd, V: TotalEq> Ord for BranchElt<K, V> {\n     fn lt(&self, other: &BranchElt<K, V>) -> bool {\n@@ -900,7 +869,7 @@ mod test_btree {\n     fn btree_clone_test() {\n         let b = BTree::new(1, ~\"abc\", 2);\n         let b2 = b.clone();\n-        assert!(b.root.equals(&b2.root))\n+        assert!(b.root == b2.root)\n     }\n \n     //Tests the BTree's cmp() method when one node is \"less than\" another."}, {"sha": "89ad2b5d1bc9e83efae6df5d384c48f707bc8452", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -92,15 +92,11 @@ pub struct BigUint {\n \n impl Eq for BigUint {\n     #[inline]\n-    fn eq(&self, other: &BigUint) -> bool { self.equals(other) }\n-}\n-\n-impl TotalEq for BigUint {\n-    #[inline]\n-    fn equals(&self, other: &BigUint) -> bool {\n+    fn eq(&self, other: &BigUint) -> bool {\n         match self.cmp(other) { Equal => true, _ => false }\n     }\n }\n+impl TotalEq for BigUint {}\n \n impl Ord for BigUint {\n     #[inline]\n@@ -852,31 +848,9 @@ fn get_radix_base(radix: uint) -> (uint, uint) {\n }\n \n /// A Sign is a `BigInt`'s composing element.\n-#[deriving(Eq, Clone, Show)]\n+#[deriving(Eq, Ord, TotalEq, TotalOrd, Clone, Show)]\n pub enum Sign { Minus, Zero, Plus }\n \n-impl Ord for Sign {\n-    #[inline]\n-    fn lt(&self, other: &Sign) -> bool {\n-        match self.cmp(other) { Less => true, _ => false}\n-    }\n-}\n-\n-impl TotalEq for Sign {\n-    #[inline]\n-    fn equals(&self, other: &Sign) -> bool { *self == *other }\n-}\n-impl TotalOrd for Sign {\n-    #[inline]\n-    fn cmp(&self, other: &Sign) -> Ordering {\n-        match (*self, *other) {\n-          (Minus, Minus) | (Zero,  Zero) | (Plus, Plus) => Equal,\n-          (Minus, Zero)  | (Minus, Plus) | (Zero, Plus) => Less,\n-          _                                             => Greater\n-        }\n-    }\n-}\n-\n impl Neg<Sign> for Sign {\n     /// Negate Sign value.\n     #[inline]\n@@ -898,16 +872,13 @@ pub struct BigInt {\n \n impl Eq for BigInt {\n     #[inline]\n-    fn eq(&self, other: &BigInt) -> bool { self.equals(other) }\n-}\n-\n-impl TotalEq for BigInt {\n-    #[inline]\n-    fn equals(&self, other: &BigInt) -> bool {\n+    fn eq(&self, other: &BigInt) -> bool {\n         match self.cmp(other) { Equal => true, _ => false }\n     }\n }\n \n+impl TotalEq for BigInt {}\n+\n impl Ord for BigInt {\n     #[inline]\n     fn lt(&self, other: &BigInt) -> bool {"}, {"sha": "6fb3d492432b260f64ccab063fe17ad6052072ae", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -147,20 +147,20 @@ macro_rules! cmp_impl {\n         cmp_impl!(impl $imp, $($method -> bool),+)\n     };\n     // return something other than a Ratio<T>\n-    (impl $imp:ident, $($method:ident -> $res:ty),+) => {\n+    (impl $imp:ident, $($method:ident -> $res:ty),*) => {\n         impl<T: Mul<T,T> + $imp> $imp for Ratio<T> {\n             $(\n                 #[inline]\n                 fn $method(&self, other: &Ratio<T>) -> $res {\n                     (self.numer * other.denom). $method (&(self.denom*other.numer))\n                 }\n-            )+\n+            )*\n         }\n     };\n }\n cmp_impl!(impl Eq, eq, ne)\n-cmp_impl!(impl TotalEq, equals)\n cmp_impl!(impl Ord, lt, gt, le, ge)\n+cmp_impl!(impl TotalEq, )\n cmp_impl!(impl TotalOrd, cmp -> cmp::Ordering)\n \n /* Arithmetic */"}, {"sha": "e956a1cdf1d633db2c34f4898bec828e5a021923", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -42,6 +42,21 @@ pub trait Eq {\n }\n \n /// Trait for equality comparisons where `a == b` and `a != b` are strict inverses.\n+#[cfg(not(stage0))]\n+pub trait TotalEq: Eq {\n+    // FIXME #13101: this method is used solely by #[deriving] to\n+    // assert that every component of a type implements #[deriving]\n+    // itself, the current deriving infrastructure means doing this\n+    // assertion without using a method on this trait is nearly\n+    // impossible.\n+    //\n+    // This should never be implemented by hand.\n+    #[doc(hidden)]\n+    #[inline(always)]\n+    fn assert_receiver_is_total_eq(&self) {}\n+}\n+\n+#[cfg(stage0)]\n pub trait TotalEq: Eq {\n     /// This method must return the same value as `eq`. It exists to prevent\n     /// deriving `TotalEq` from fields not implementing the `TotalEq` trait.\n@@ -52,10 +67,7 @@ pub trait TotalEq: Eq {\n \n macro_rules! totaleq_impl(\n     ($t:ty) => {\n-        impl TotalEq for $t {\n-            #[inline]\n-            fn equals(&self, other: &$t) -> bool { *self == *other }\n-        }\n+        impl TotalEq for $t {}\n     }\n )\n \n@@ -84,12 +96,7 @@ pub trait TotalOrd: TotalEq + Ord {\n     fn cmp(&self, other: &Self) -> Ordering;\n }\n \n-impl TotalEq for Ordering {\n-    #[inline]\n-    fn equals(&self, other: &Ordering) -> bool {\n-        *self == *other\n-    }\n-}\n+impl TotalEq for Ordering {}\n impl TotalOrd for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n@@ -194,12 +201,6 @@ mod test {\n         assert_eq!(12.cmp(-5), Greater);\n     }\n \n-    #[test]\n-    fn test_int_totaleq() {\n-        assert!(5.equals(&5));\n-        assert!(!2.equals(&17));\n-    }\n-\n     #[test]\n     fn test_ordering_order() {\n         assert!(Less < Equal);"}, {"sha": "f2cb46acc2ea910034d79ca94e488e3b3d4f6917", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -2195,13 +2195,13 @@ pub mod order {\n     use option::{Some, None};\n     use super::Iterator;\n \n-    /// Compare `a` and `b` for equality using `TotalOrd`\n+    /// Compare `a` and `b` for equality using `TotalEq`\n     pub fn equals<A: TotalEq, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n         loop {\n             match (a.next(), b.next()) {\n                 (None, None) => return true,\n                 (None, _) | (_, None) => return false,\n-                (Some(x), Some(y)) => if !x.equals(&y) { return false },\n+                (Some(x), Some(y)) => if x != y { return false },\n             }\n         }\n     }"}, {"sha": "bf73c05440c14bf3a388df72444f01ac6ae4324f", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -45,10 +45,7 @@ impl<T: TotalOrd> TotalOrd for @T {\n }\n \n #[cfg(not(test))]\n-impl<T: TotalEq> TotalEq for @T {\n-    #[inline]\n-    fn equals(&self, other: &@T) -> bool { (**self).equals(*other) }\n-}\n+impl<T: TotalEq> TotalEq for @T {}\n \n #[test]\n fn test() {"}, {"sha": "1fa86c5311799f0941d8faebb9d25bf44d529e0b", "filename": "src/libstd/owned.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fowned.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -53,7 +53,4 @@ impl<T: TotalOrd> TotalOrd for ~T {\n }\n \n #[cfg(not(test))]\n-impl<T: TotalEq> TotalEq for ~T {\n-    #[inline]\n-    fn equals(&self, other: &~T) -> bool { (**self).equals(*other) }\n-}\n+impl<T: TotalEq> TotalEq for ~T {}"}, {"sha": "eb615afd85f9a2192599a0081324fc48ba80d579", "filename": "src/libstd/reference.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freference.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -54,8 +54,4 @@ impl<'a, T: TotalOrd> TotalOrd for &'a T {\n }\n \n #[cfg(not(test))]\n-impl<'a, T: TotalEq> TotalEq for &'a T {\n-    #[inline]\n-    fn equals(&self, other: & &'a T) -> bool { (**self).equals(*other) }\n-}\n-\n+impl<'a, T: TotalEq> TotalEq for &'a T {}"}, {"sha": "bb5b36896af85146f148f152318c253c8df67236", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -649,17 +649,9 @@ pub mod traits {\n         fn ne(&self, other: &~[T]) -> bool { !self.eq(other) }\n     }\n \n-    impl<'a,T:TotalEq> TotalEq for &'a [T] {\n-        fn equals(&self, other: & &'a [T]) -> bool {\n-            self.len() == other.len() &&\n-                order::equals(self.iter(), other.iter())\n-        }\n-    }\n+    impl<'a,T:TotalEq> TotalEq for &'a [T] {}\n \n-    impl<T:TotalEq> TotalEq for ~[T] {\n-        #[inline]\n-        fn equals(&self, other: &~[T]) -> bool { self.as_slice().equals(&other.as_slice()) }\n-    }\n+    impl<T:TotalEq> TotalEq for ~[T] {}\n \n     impl<'a,T:Eq, V: Vector<T>> Equiv<V> for &'a [T] {\n         #[inline]"}, {"sha": "b14773d35c5e31ecfaf91cbc71605157617a7ba4", "filename": "src/libstd/str.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -1262,16 +1262,11 @@ impl<'a> IntoMaybeOwned<'a> for MaybeOwned<'a> {\n impl<'a> Eq for MaybeOwned<'a> {\n     #[inline]\n     fn eq(&self, other: &MaybeOwned) -> bool {\n-        self.as_slice().equals(&other.as_slice())\n+        self.as_slice() == other.as_slice()\n     }\n }\n \n-impl<'a> TotalEq for MaybeOwned<'a> {\n-    #[inline]\n-    fn equals(&self, other: &MaybeOwned) -> bool {\n-        self.as_slice().equals(&other.as_slice())\n-    }\n-}\n+impl<'a> TotalEq for MaybeOwned<'a> {}\n \n impl<'a> Ord for MaybeOwned<'a> {\n     #[inline]\n@@ -1290,7 +1285,7 @@ impl<'a> TotalOrd for MaybeOwned<'a> {\n impl<'a, S: Str> Equiv<S> for MaybeOwned<'a> {\n     #[inline]\n     fn equiv(&self, other: &S) -> bool {\n-        self.as_slice().equals(&other.as_slice())\n+        self.as_slice() == other.as_slice()\n     }\n }\n \n@@ -1577,19 +1572,9 @@ pub mod traits {\n         }\n     }\n \n-    impl<'a> TotalEq for &'a str {\n-        #[inline]\n-        fn equals(&self, other: & &'a str) -> bool {\n-            eq_slice((*self), (*other))\n-        }\n-    }\n+    impl<'a> TotalEq for &'a str {}\n \n-    impl TotalEq for ~str {\n-        #[inline]\n-        fn equals(&self, other: &~str) -> bool {\n-            eq_slice((*self), (*other))\n-        }\n-    }\n+    impl TotalEq for ~str {}\n \n     impl<'a> Ord for &'a str {\n         #[inline]\n@@ -4450,11 +4435,9 @@ mod tests {\n         assert_eq!(Owned(~\"\"), Default::default());\n \n         assert!(s.cmp(&o) == Equal);\n-        assert!(s.equals(&o));\n         assert!(s.equiv(&o));\n \n         assert!(o.cmp(&s) == Equal);\n-        assert!(o.equals(&s));\n         assert!(o.equiv(&s));\n     }\n "}, {"sha": "c4ce6b5ae666fe2ed82e720c8db46198b486890e", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -75,12 +75,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[cfg(not(test))]\n-            impl<$($T:TotalEq),+> TotalEq for ($($T,)+) {\n-                #[inline]\n-                fn equals(&self, other: &($($T,)+)) -> bool {\n-                    $(self.$refN().equals(other.$refN()))&&+\n-                }\n-            }\n+            impl<$($T:TotalEq),+> TotalEq for ($($T,)+) {}\n \n             #[cfg(not(test))]\n             impl<$($T:Ord + Eq),+> Ord for ($($T,)+) {\n@@ -338,12 +333,6 @@ mod tests {\n         assert!(((1.0, 2.0) < (2.0, nan)));\n         assert!(!((2.0, 2.0) < (2.0, nan)));\n \n-        // TotalEq\n-        assert!(small.equals(&small));\n-        assert!(big.equals(&big));\n-        assert!(!small.equals(&big));\n-        assert!(!big.equals(&small));\n-\n         // TotalOrd\n         assert!(small.cmp(&small) == Equal);\n         assert!(big.cmp(&big) == Equal);"}, {"sha": "38307f415ac26f774a1f78695bc6888c9fcc2eeb", "filename": "src/libstd/unit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -37,10 +37,7 @@ impl TotalOrd for () {\n }\n \n #[cfg(not(test))]\n-impl TotalEq for () {\n-    #[inline]\n-    fn equals(&self, _other: &()) -> bool { true }\n-}\n+impl TotalEq for () {}\n \n #[cfg(not(test))]\n impl Default for () {"}, {"sha": "d00a411e9a0732730c8a1b23f9dcc87da68eda23", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -339,12 +339,7 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n-impl<T: TotalEq> TotalEq for Vec<T> {\n-    #[inline]\n-    fn equals(&self, other: &Vec<T>) -> bool {\n-        self.as_slice().equals(&other.as_slice())\n-    }\n-}\n+impl<T: TotalEq> TotalEq for Vec<T> {}\n \n impl<T: TotalOrd> TotalOrd for Vec<T> {\n     #[inline]"}, {"sha": "33512b3df5ee563044cfb6644d0d07466127ec53", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -19,9 +19,18 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                                mitem: @MetaItem,\n                                item: @Item,\n                                push: |@Item|) {\n-    fn cs_equals(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n-        cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n-               cx, span, substr)\n+    fn cs_total_eq_assert(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+        cs_same_method(|cx, span, exprs| {\n+            // create `a.<method>(); b.<method>(); c.<method>(); ...`\n+            // (where method is `assert_receiver_is_total_eq`)\n+            let stmts = exprs.move_iter().map(|e| cx.stmt_expr(e)).collect();\n+            let block = cx.block(span, stmts, None);\n+            cx.expr_block(block)\n+        },\n+                       |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(TotalEq)?\"),\n+                       cx,\n+                       span,\n+                       substr)\n     }\n \n     let trait_def = TraitDef {\n@@ -32,14 +41,14 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n             MethodDef {\n-                name: \"equals\",\n+                name: \"assert_receiver_is_total_eq\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"bool\"))),\n+                args: vec!(),\n+                ret_ty: nil_ty(),\n                 inline: true,\n                 const_nonmatching: true,\n-                combine_substructure: cs_equals\n+                combine_substructure: cs_total_eq_assert\n             }\n         )\n     };"}, {"sha": "969b9f81785e164dbfabd6c636dc895f42749711", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -95,11 +95,7 @@ pub struct RcStr {\n     priv string: Rc<~str>,\n }\n \n-impl TotalEq for RcStr {\n-    fn equals(&self, other: &RcStr) -> bool {\n-        self.as_slice().equals(&other.as_slice())\n-    }\n-}\n+impl TotalEq for RcStr {}\n \n impl TotalOrd for RcStr {\n     fn cmp(&self, other: &RcStr) -> Ordering {"}, {"sha": "49af5ba9b2b8facd2f4efc1192bb7cdcb44b276f", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -491,14 +491,7 @@ impl Eq for Uuid {\n     }\n }\n \n-/// Test two UUIDs for equality\n-///\n-/// UUIDs are equal only when they are byte-for-byte identical\n-impl TotalEq for Uuid {\n-    fn equals(&self, other: &Uuid) -> bool {\n-        self.bytes == other.bytes\n-    }\n-}\n+impl TotalEq for Uuid {}\n \n // FIXME #9845: Test these more thoroughly\n impl<T: Encoder> Encodable<T> for Uuid {"}, {"sha": "5d41e275cd3f6cc96493520020939f2920379eba", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -39,9 +39,6 @@ pub fn main() {\n             assert_eq!(*e1 == *e2, eq);\n             assert_eq!(*e1 != *e2, !eq);\n \n-            // TotalEq\n-            assert_eq!(e1.equals(e2), eq);\n-\n             // Ord\n             assert_eq!(*e1 < *e2, lt);\n             assert_eq!(*e1 > *e2, gt);"}, {"sha": "c2f0c269d62b3fda160883b8c8c8c611c609c8ba", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -35,9 +35,6 @@ pub fn main() {\n             assert_eq!(*es1 == *es2, eq);\n             assert_eq!(*es1 != *es2, !eq);\n \n-            // TotalEq\n-            assert_eq!(es1.equals(es2), eq);\n-\n             // Ord\n             assert_eq!(*es1 < *es2, lt);\n             assert_eq!(*es1 > *es2, gt);"}, {"sha": "4f62d1fa6313a3a6613eaa677360cd7c43cabe29", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -35,9 +35,6 @@ pub fn main() {\n             assert_eq!(*s1 == *s2, eq);\n             assert_eq!(*s1 != *s2, !eq);\n \n-            // TotalEq\n-            assert_eq!(s1.equals(s2), eq);\n-\n             // Ord\n             assert_eq!(*s1 < *s2, lt);\n             assert_eq!(*s1 > *s2, gt);"}, {"sha": "b8ba4c64616ce90dace3b369a9a60635c0e3309d", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -33,9 +33,6 @@ pub fn main() {\n             assert_eq!(*ts1 == *ts2, eq);\n             assert_eq!(*ts1 != *ts2, !eq);\n \n-            // TotalEq\n-            assert_eq!(ts1.equals(ts2), eq);\n-\n             // Ord\n             assert_eq!(*ts1 < *ts2, lt);\n             assert_eq!(*ts1 > *ts2, gt);"}, {"sha": "03e6d04d87ff02b175607938567ecd05a0ded4cb", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -21,9 +21,7 @@ impl Ord for FailCmp {\n     fn lt(&self, _: &FailCmp) -> bool { fail!(\"lt\") }\n }\n \n-impl TotalEq for FailCmp {\n-    fn equals(&self, _: &FailCmp) -> bool { fail!(\"equals\") }\n-}\n+impl TotalEq for FailCmp {}\n \n impl TotalOrd for FailCmp {\n     fn cmp(&self, _: &FailCmp) -> Ordering { fail!(\"cmp\") }\n@@ -41,6 +39,5 @@ pub fn main() {\n \n     assert!(a != b);\n     assert!(a < b);\n-    assert!(!a.equals(&b));\n     assert_eq!(a.cmp(&b), ::std::cmp::Less);\n }"}, {"sha": "1c921041042104cfc4d5306cacf4564517b5dcd3", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6db0ef9464a17fa6e547e755b1b5dfa09af9499/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=f6db0ef9464a17fa6e547e755b1b5dfa09af9499", "patch": "@@ -19,10 +19,6 @@ struct A<'a> {\n pub fn main() {\n     let (a, b) = (A { x: &1 }, A { x: &2 });\n \n-    assert!(a.equals(&a));\n-    assert!(b.equals(&b));\n-\n-\n     assert_eq!(a.cmp(&a), Equal);\n     assert_eq!(b.cmp(&b), Equal);\n "}]}