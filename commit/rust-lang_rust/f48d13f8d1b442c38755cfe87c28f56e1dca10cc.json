{"sha": "f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "node_id": "C_kwDOAAsO6NoAKGY0OGQxM2Y4ZDFiNDQyYzM4NzU1Y2ZlODdjMjhmNTZlMWRjYTEwY2M", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-10T20:37:42Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-10T22:12:16Z"}, "message": "Replace manual let else patterns with let else", "tree": {"sha": "f21a120086292776b215372660c543d6ae90e325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21a120086292776b215372660c543d6ae90e325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "html_url": "https://github.com/rust-lang/rust/commit/f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf72565a12c982f577ca4394c3b80edb89f6c6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf72565a12c982f577ca4394c3b80edb89f6c6d3", "html_url": "https://github.com/rust-lang/rust/commit/cf72565a12c982f577ca4394c3b80edb89f6c6d3"}], "stats": {"total": 223, "additions": 73, "deletions": 150}, "files": [{"sha": "efdb158c21e9be447bf11c0e8ba8262f48bfd805", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -36,9 +36,8 @@ impl ClippyProjectInfo {\n }\n \n pub fn setup_rustc_src(rustc_path: &str) {\n-    let rustc_source_dir = match check_and_get_rustc_dir(rustc_path) {\n-        Ok(path) => path,\n-        Err(_) => return,\n+    let Ok(rustc_source_dir) = check_and_get_rustc_dir(rustc_path) else {\n+        return\n     };\n \n     for project in CLIPPY_PROJECTS {\n@@ -172,24 +171,18 @@ pub fn remove_rustc_src() {\n }\n \n fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> bool {\n-    let mut cargo_content = if let Ok(content) = read_project_file(project.cargo_file) {\n-        content\n-    } else {\n+    let Ok(mut cargo_content) = read_project_file(project.cargo_file) else {\n         return false;\n     };\n-    let section_start = if let Some(section_start) = cargo_content.find(RUSTC_PATH_SECTION) {\n-        section_start\n-    } else {\n+    let Some(section_start) = cargo_content.find(RUSTC_PATH_SECTION) else {\n         println!(\n             \"info: dependencies could not be found in `{}` for {}, skipping file\",\n             project.cargo_file, project.name\n         );\n         return true;\n     };\n \n-    let end_point = if let Some(end_point) = cargo_content.find(DEPENDENCIES_SECTION) {\n-        end_point\n-    } else {\n+    let Some(end_point) = cargo_content.find(DEPENDENCIES_SECTION) else {\n         eprintln!(\n             \"error: the end of the rustc dependencies section could not be found in `{}`\",\n             project.cargo_file"}, {"sha": "e690bc369cd4337203eef2e1c2e6d7ba25834751", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -869,13 +869,11 @@ fn clippy_lints_src_files() -> impl Iterator<Item = (PathBuf, DirEntry)> {\n macro_rules! match_tokens {\n     ($iter:ident, $($token:ident $({$($fields:tt)*})? $(($capture:ident))?)*) => {\n          {\n-            $($(let $capture =)? if let Some(LintDeclSearchResult {\n+            $(#[allow(clippy::redundant_pattern)] let Some(LintDeclSearchResult {\n                     token_kind: TokenKind::$token $({$($fields)*})?,\n-                    content: _x,\n+                    content: $($capture @)? _,\n                     ..\n-            }) = $iter.next() {\n-                _x\n-            } else {\n+            }) = $iter.next() else {\n                 continue;\n             };)*\n             #[allow(clippy::unused_unit)]"}, {"sha": "fad984d05ca95fa04f20cd76446688db9322748c", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -339,10 +339,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &h\n         Some(id) if trait_ref.trait_def_id() == Some(id) => id,\n         _ => return,\n     };\n-    let copy_id = match cx.tcx.lang_items().copy_trait() {\n-        Some(id) => id,\n-        None => return,\n-    };\n+    let Some(copy_id) = cx.tcx.lang_items().copy_trait() else { return };\n     let (ty_adt, ty_subs) = match *ty.kind() {\n         // Unions can't derive clone.\n         ty::Adt(adt, subs) if !adt.is_union() => (adt, subs),"}, {"sha": "6ac85606d9c7cf86827b7f038701fe152887e74b", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -94,9 +94,8 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n         } else {\n             path_def_id(cx, expr)\n         };\n-        let def_id = match uncalled_path.or_else(|| fn_def_id(cx, expr)) {\n-            Some(def_id) => def_id,\n-            None => return,\n+        let Some(def_id) = uncalled_path.or_else(|| fn_def_id(cx, expr)) else {\n+            return\n         };\n         let conf = match self.disallowed.get(&def_id) {\n             Some(&index) => &self.conf_disallowed[index],"}, {"sha": "b44e62435881fdca6e8144f6fe788bacf8c745ee", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -65,28 +65,24 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let (cond_expr, then_expr, else_expr) = match higher::If::hir(expr) {\n-            Some(higher::If { cond, then, r#else }) => (cond, then, r#else),\n-            _ => return,\n+        let Some(higher::If { cond: cond_expr, then: then_expr, r#else: else_expr }) = higher::If::hir(expr) else {\n+            return\n         };\n \n-        let (map_ty, contains_expr) = match try_parse_contains(cx, cond_expr) {\n-            Some(x) => x,\n-            None => return,\n+        let Some((map_ty, contains_expr)) = try_parse_contains(cx, cond_expr) else {\n+            return\n         };\n \n-        let then_search = match find_insert_calls(cx, &contains_expr, then_expr) {\n-            Some(x) => x,\n-            None => return,\n+        let Some(then_search) = find_insert_calls(cx, &contains_expr, then_expr) else {\n+            return\n         };\n \n         let mut app = Applicability::MachineApplicable;\n         let map_str = snippet_with_context(cx, contains_expr.map.span, contains_expr.call_ctxt, \"..\", &mut app).0;\n         let key_str = snippet_with_context(cx, contains_expr.key.span, contains_expr.call_ctxt, \"..\", &mut app).0;\n         let sugg = if let Some(else_expr) = else_expr {\n-            let else_search = match find_insert_calls(cx, &contains_expr, else_expr) {\n-                Some(search) => search,\n-                None => return,\n+            let Some(else_search) = find_insert_calls(cx, &contains_expr, else_expr) else {\n+                return;\n             };\n \n             if then_search.edits.is_empty() && else_search.edits.is_empty() {"}, {"sha": "7b9786d7e570f91b398f2d7ea9e4fa46cb098fdf", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -213,9 +213,8 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, closure_ty: Ty<'tcx>, call_ty: Ty<'tc\n     if !closure_ty.has_late_bound_regions() {\n         return true;\n     }\n-    let substs = match closure_ty.kind() {\n-        ty::Closure(_, substs) => substs,\n-        _ => return false,\n+    let ty::Closure(_, substs) = closure_ty.kind() else {\n+        return false;\n     };\n     let closure_sig = cx.tcx.signature_unclosure(substs.as_closure().sig(), Unsafety::Normal);\n     cx.tcx.erase_late_bound_regions(closure_sig) == cx.tcx.erase_late_bound_regions(call_sig)"}, {"sha": "bd473ac7e51b0e9695f741029dda1bd68380ecdf", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -22,9 +22,8 @@ pub(super) fn check_fn(\n         return;\n     }\n \n-    let code_snippet = match snippet_opt(cx, body.value.span) {\n-        Some(s) => s,\n-        _ => return,\n+    let Some(code_snippet) = snippet_opt(cx, body.value.span) else {\n+        return\n     };\n     let mut line_count: u64 = 0;\n     let mut in_comment = false;"}, {"sha": "0ef77e03de9062bb5cc98ea27ec07c3ce94fd050", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -145,9 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidUpcastComparisons {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref cmp, lhs, rhs) = expr.kind {\n             let normalized = comparisons::normalize_comparison(cmp.node, lhs, rhs);\n-            let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n-                val\n-            } else {\n+            let Some((rel, normalized_lhs, normalized_rhs)) = normalized else {\n                 return;\n             };\n "}, {"sha": "8ed7e4bb196cd63fa14aaea0d5db007ff65f3d4a", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -124,9 +124,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let (adt, subst) = match ty.kind() {\n-                Adt(adt, subst) => (adt, subst),\n-                _ => panic!(\"already checked whether this is an enum\"),\n+            let Adt(adt, subst) = ty.kind() else {\n+                panic!(\"already checked whether this is an enum\")\n             };\n             if adt.variants().len() <= 1 {\n                 return;"}, {"sha": "55989f8a4465018f3fe9f5bbf3e0d782ece39959", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -331,9 +331,8 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n     }\n \n     if let Some(e) = get_enclosing_loop_or_multi_call_closure(cx, loop_expr) {\n-        let local_id = match iter_expr.path {\n-            Res::Local(id) => id,\n-            _ => return true,\n+        let Res::Local(local_id) = iter_expr.path else {\n+            return true\n         };\n         let mut v = NestedLoopVisitor {\n             cx,"}, {"sha": "5b7644a5383231a988574b5bcffb438838979eb1", "filename": "clippy_lints/src/matches/manual_utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmatches%2Fmanual_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmatches%2Fmanual_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_utils.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -60,9 +60,8 @@ where\n         return None;\n     }\n \n-    let some_expr = match get_some_expr_fn(cx, some_pat, some_expr, expr_ctxt) {\n-        Some(expr) => expr,\n-        None => return None,\n+    let Some(some_expr) = get_some_expr_fn(cx, some_pat, some_expr, expr_ctxt) else {\n+        return None;\n     };\n \n     // These two lints will go back and forth with each other."}, {"sha": "168c1e4d2e60d4d3da9e94412c674d8539a299a5", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -221,7 +221,6 @@ fn iter_matching_struct_fields<'a>(\n \n #[expect(clippy::similar_names)]\n impl<'a> NormalizedPat<'a> {\n-    #[expect(clippy::too_many_lines)]\n     fn from_pat(cx: &LateContext<'_>, arena: &'a DroplessArena, pat: &'a Pat<'_>) -> Self {\n         match pat.kind {\n             PatKind::Wild | PatKind::Binding(.., None) => Self::Wild,\n@@ -235,9 +234,8 @@ impl<'a> NormalizedPat<'a> {\n                 Self::Struct(cx.qpath_res(path, pat.hir_id).opt_def_id(), fields)\n             },\n             PatKind::TupleStruct(ref path, pats, wild_idx) => {\n-                let adt = match cx.typeck_results().pat_ty(pat).ty_adt_def() {\n-                    Some(x) => x,\n-                    None => return Self::Wild,\n+                let Some(adt) = cx.typeck_results().pat_ty(pat).ty_adt_def() else {\n+                    return Self::Wild\n                 };\n                 let (var_id, variant) = if adt.is_enum() {\n                     match cx.qpath_res(path, pat.hir_id).opt_def_id() {"}, {"sha": "8adf9e37059209d24d940d8c193263afda17bcae", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -42,9 +42,8 @@ pub(super) fn check(\n \n fn ty_has_iter_method(cx: &LateContext<'_>, self_ref_ty: Ty<'_>) -> Option<(Symbol, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n-        let mutbl = match self_ref_ty.kind() {\n-            ty::Ref(_, _, mutbl) => mutbl,\n-            _ => unreachable!(),\n+        let ty::Ref(_, _, mutbl) = self_ref_ty.kind() else {\n+            unreachable!()\n         };\n         let method_name = match mutbl {\n             hir::Mutability::Not => \"iter\","}, {"sha": "b80541b86479a804227b1152718881ad7d2daf58", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -21,21 +21,15 @@ pub fn check(\n         return;\n     }\n \n-    let mm = if let Some(mm) = is_min_or_max(cx, unwrap_arg) {\n-        mm\n-    } else {\n-        return;\n-    };\n+    let Some(mm) = is_min_or_max(cx, unwrap_arg) else { return };\n \n     if ty.is_signed() {\n         use self::{\n             MinMax::{Max, Min},\n             Sign::{Neg, Pos},\n         };\n \n-        let sign = if let Some(sign) = lit_sign(arith_rhs) {\n-            sign\n-        } else {\n+        let Some(sign) = lit_sign(arith_rhs) else {\n             return;\n         };\n "}, {"sha": "78c1b33ed97b22764d02a693d16255b1c753b8f1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -3851,9 +3851,8 @@ impl SelfKind {\n                 hir::Mutability::Mut => &paths::ASMUT_TRAIT,\n             };\n \n-            let trait_def_id = match get_trait_def_id(cx, trait_path) {\n-                Some(did) => did,\n-                None => return false,\n+            let Some(trait_def_id) = get_trait_def_id(cx, trait_path) else {\n+                return false\n             };\n             implements_trait(cx, ty, trait_def_id, &[parent_ty.into()])\n         }"}, {"sha": "1acac59144cee8ce926daf8fdabfe5212918dae5", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -289,9 +289,7 @@ fn parse_iter_usage<'tcx>(\n ) -> Option<IterUsage> {\n     let (kind, span) = match iter.next() {\n         Some((_, Node::Expr(e))) if e.span.ctxt() == ctxt => {\n-            let (name, args) = if let ExprKind::MethodCall(name, _, [args @ ..], _) = e.kind {\n-                (name, args)\n-            } else {\n+            let ExprKind::MethodCall(name, _, [args @ ..], _) = e.kind else {\n                 return None;\n             };\n             let did = cx.typeck_results().type_dependent_def_id(e.hir_id)?;"}, {"sha": "27e7f8505eb5b854acfaf7fb6b622273f3d551db", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -6,9 +6,7 @@ use rustc_lint::EarlyContext;\n use super::{SEPARATED_LITERAL_SUFFIX, UNSEPARATED_LITERAL_SUFFIX};\n \n pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n-    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n-        val\n-    } else {\n+    let Some(maybe_last_sep_idx) = lit_snip.len().checked_sub(suffix.len() + 1) else {\n         return; // It's useless so shouldn't lint.\n     };\n     // Do not lint when literal is unsuffixed."}, {"sha": "263ee1e945a255cfdd23977bab7cf9ef84f5e5d6", "filename": "clippy_lints/src/misc_early/mixed_case_hex_literals.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -5,9 +5,7 @@ use rustc_lint::EarlyContext;\n use super::MIXED_CASE_HEX_LITERALS;\n \n pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, suffix: &str, lit_snip: &str) {\n-    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n-        val\n-    } else {\n+    let Some(maybe_last_sep_idx) = lit_snip.len().checked_sub(suffix.len() + 1) else {\n         return; // It's useless so shouldn't lint.\n     };\n     if maybe_last_sep_idx <= 2 {"}, {"sha": "9de4b56b77b56c4d858e55a5868a2861065ac042", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -70,9 +70,8 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n \n                 // find the type that the Impl is for\n                 // only lint on struct/enum/union for now\n-                let defid = match path.res {\n-                    Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, defid) => defid,\n-                    _ => return,\n+                let Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, defid) = path.res else {\n+                    return\n                 };\n \n                 // get the names of the generic parameters in the type"}, {"sha": "6752976348f6045ed45e98ad774cf722d43d14ea", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -190,10 +190,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n         if parent_id == cur_id {\n             break;\n         }\n-        let parent_node = match map.find(parent_id) {\n-            Some(parent) => parent,\n-            None => break,\n-        };\n+        let Some(parent_node) = map.find(parent_id) else { break };\n \n         let stop_early = match parent_node {\n             Node::Expr(expr) => check_expr(vis, expr),"}, {"sha": "c3b633fd6a038919bfcdea2c9935030b7a9ab45f", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -49,9 +49,8 @@ declare_lint_pass!(NeedlessForEach => [NEEDLESS_FOR_EACH]);\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        let expr = match stmt.kind {\n-            StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr,\n-            _ => return,\n+        let (StmtKind::Expr(expr) | StmtKind::Semi(expr)) = stmt.kind else {\n+             return\n         };\n \n         if_chain! {"}, {"sha": "a6742824bc56aae7855f9c76fc1b79f00b8ca200", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -357,9 +357,8 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            let item_def_id = match cx.qpath_res(qpath, expr.hir_id) {\n-                Res::Def(DefKind::Const | DefKind::AssocConst, did) => did,\n-                _ => return,\n+            let Res::Def(DefKind::Const | DefKind::AssocConst, item_def_id) = cx.qpath_res(qpath, expr.hir_id) else {\n+                return\n             };\n \n             // Climb up to resolve any field access and explicit referencing."}, {"sha": "2ecb04874842f8aeca17b4c7ba5ba69e2e9c0665", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -55,9 +55,8 @@ impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n                     if let ExprKind::Lit(_) = param.kind;\n \n                     then {\n-                        let snip = match snippet_opt(cx, param.span) {\n-                            Some(s) => s,\n-                            _ => return,\n+                        let Some(snip) = snippet_opt(cx, param.span) else {\n+                            return\n                         };\n \n                         if !snip.starts_with(\"0o\") {\n@@ -72,16 +71,10 @@ impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n                     if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n                     if match_def_path(cx, def_id, &paths::PERMISSIONS_FROM_MODE);\n                     if let ExprKind::Lit(_) = param.kind;\n-\n+                    if let Some(snip) = snippet_opt(cx, param.span);\n+                    if !snip.starts_with(\"0o\");\n                     then {\n-                        let snip = match snippet_opt(cx, param.span) {\n-                            Some(s) => s,\n-                            _ => return,\n-                        };\n-\n-                        if !snip.starts_with(\"0o\") {\n-                            show_error(cx, param);\n-                        }\n+                        show_error(cx, param);\n                     }\n                 }\n             },"}, {"sha": "2d80236327a13c15971380a3620d2caae82dbb9e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -552,9 +552,8 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n             }\n \n             // Check if this is local we care about\n-            let args_idx = match path_to_local(e).and_then(|id| self.bindings.get(&id)) {\n-                Some(&i) => i,\n-                None => return walk_expr(self, e),\n+            let Some(&args_idx) = path_to_local(e).and_then(|id| self.bindings.get(&id)) else {\n+                return walk_expr(self, e);\n             };\n             let args = &self.args[args_idx];\n             let result = &mut self.results[args_idx];\n@@ -609,9 +608,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             }\n                         }\n \n-                        let id = if let Some(x) = self.cx.typeck_results().type_dependent_def_id(e.hir_id) {\n-                            x\n-                        } else {\n+                        let Some(id) = self.cx.typeck_results().type_dependent_def_id(e.hir_id) else {\n                             set_skip_flag();\n                             return;\n                         };"}, {"sha": "72dda67c72b25d09a64aa9c953d668c42342b4da", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -49,15 +49,13 @@ declare_lint_pass!(PtrOffsetWithCast => [PTR_OFFSET_WITH_CAST]);\n impl<'tcx> LateLintPass<'tcx> for PtrOffsetWithCast {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // Check if the expressions is a ptr.offset or ptr.wrapping_offset method call\n-        let (receiver_expr, arg_expr, method) = match expr_as_ptr_offset_call(cx, expr) {\n-            Some(call_arg) => call_arg,\n-            None => return,\n+        let Some((receiver_expr, arg_expr, method)) = expr_as_ptr_offset_call(cx, expr) else {\n+            return\n         };\n \n         // Check if the argument to the method call is a cast from usize\n-        let cast_lhs_expr = match expr_as_cast_from_usize(cx, arg_expr) {\n-            Some(cast_lhs_expr) => cast_lhs_expr,\n-            None => return,\n+        let Some(cast_lhs_expr) = expr_as_cast_from_usize(cx, arg_expr) else {\n+            return\n         };\n \n         let msg = format!(\"use of `{method}` with a `usize` casted to an `isize`\");"}, {"sha": "87f966ced0df121b640a5b301809027ed3dd3cb3", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -106,10 +106,7 @@ impl_lint_pass!(Shadow => [SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED]);\n \n impl<'tcx> LateLintPass<'tcx> for Shadow {\n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n-        let (id, ident) = match pat.kind {\n-            PatKind::Binding(_, hir_id, ident, _) => (hir_id, ident),\n-            _ => return,\n-        };\n+        let PatKind::Binding(_, id, ident, _) = pat.kind else { return };\n \n         if pat.span.desugaring_kind().is_some() {\n             return;"}, {"sha": "e39fdc1ea7041833addb7adcfae100a6425a7c88", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -26,10 +26,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             if !cx.tcx.is_diagnostic_item(sym::Vec, id) {\n                 return false;\n             }\n-            let qpath = match &ty.kind {\n-                TyKind::Path(qpath) => qpath,\n-                _ => return false,\n-            };\n+            let TyKind::Path(qpath) = &ty.kind else { return false };\n             let inner_span = match qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n                 None => return false,\n@@ -65,10 +62,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             if !cx.tcx.is_diagnostic_item(sym::Vec, id) {\n                 return false;\n             }\n-            let qpath = match &ty.kind {\n-                TyKind::Path(qpath) => qpath,\n-                _ => return false,\n-            };\n+            let TyKind::Path(qpath) = &ty.kind else { return false };\n             let inner_span = match qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n                 None => return false,"}, {"sha": "92d2c48a5898b15db8dc520918ae3bb3bef04db4", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -47,9 +47,8 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         _ => return false,\n     };\n \n-    let inner_qpath = match &ty.kind {\n-        TyKind::Path(inner_qpath) => inner_qpath,\n-        _ => return false,\n+    let TyKind::Path(inner_qpath) = &ty.kind else {\n+        return false\n     };\n     let inner_span = match qpath_generic_tys(inner_qpath).next() {\n         Some(ty) => {"}, {"sha": "b305dae76084c3e698263f59701c83698ca470db", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -163,9 +163,8 @@ fn unnest_or_patterns(pat: &mut P<Pat>) -> bool {\n             noop_visit_pat(p, self);\n \n             // Don't have an or-pattern? Just quit early on.\n-            let alternatives = match &mut p.kind {\n-                Or(ps) => ps,\n-                _ => return,\n+            let Or(alternatives) = &mut p.kind else {\n+                return\n             };\n \n             // Collapse or-patterns directly nested in or-patterns."}, {"sha": "92053cec59fc8da8254403fadbbae6099812d4b2", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -47,9 +47,8 @@ declare_lint_pass!(UnusedIoAmount => [UNUSED_IO_AMOUNT]);\n \n impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        let expr = match s.kind {\n-            hir::StmtKind::Semi(expr) | hir::StmtKind::Expr(expr) => expr,\n-            _ => return,\n+        let (hir::StmtKind::Semi(expr) | hir::StmtKind::Expr(expr)) = s.kind else {\n+            return\n         };\n \n         match expr.kind {"}, {"sha": "1f69db1cbca40e4145a26752a8294557684e5b14", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -55,9 +55,8 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n \n         match e.kind {\n             ExprKind::Match(_, arms, MatchSource::TryDesugar) => {\n-                let e = match arms[0].body.kind {\n-                    ExprKind::Ret(Some(e)) | ExprKind::Break(_, Some(e)) => e,\n-                    _ => return,\n+                let (ExprKind::Ret(Some(e)) | ExprKind::Break(_, Some(e))) = arms[0].body.kind else {\n+                     return\n                 };\n                 if let ExprKind::Call(_, [arg, ..]) = e.kind {\n                     self.try_desugar_arm.push(arg.hir_id);"}, {"sha": "0d908bf2a83e3ed0fa30061240211ad1ac2337d4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48d13f8d1b442c38755cfe87c28f56e1dca10cc/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f48d13f8d1b442c38755cfe87c28f56e1dca10cc", "patch": "@@ -1402,18 +1402,12 @@ impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n         } else {\n             return;\n         };\n-        let then_block = match then.kind {\n-            ExprKind::Block(block, _) => block,\n-            _ => return,\n-        };\n+        let ExprKind::Block(then_block, _) = then.kind else { return };\n         let if_chain_span = is_expn_of(expr.span, \"if_chain\");\n         if !els {\n             check_nested_if_chains(cx, expr, then_block, if_chain_span);\n         }\n-        let if_chain_span = match if_chain_span {\n-            None => return,\n-            Some(span) => span,\n-        };\n+        let Some(if_chain_span) = if_chain_span else { return };\n         // check for `if a && b;`\n         if_chain! {\n             if let ExprKind::Binary(op, _, _) = cond.kind;"}]}