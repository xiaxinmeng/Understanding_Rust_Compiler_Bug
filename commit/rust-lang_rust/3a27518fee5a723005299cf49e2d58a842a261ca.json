{"sha": "3a27518fee5a723005299cf49e2d58a842a261ca", "node_id": "C_kwDOAAsO6NoAKDNhMjc1MThmZWU1YTcyMzAwNTI5OWNmNDllMmQ1OGE4NDJhMjYxY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T20:35:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T20:35:15Z"}, "message": "Auto merge of #14690 - HKalbasi:closure-hover, r=HKalbasi\n\nAdd hover for closure", "tree": {"sha": "563dbbec33945c6eff5b9849bdedbe0df711e347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563dbbec33945c6eff5b9849bdedbe0df711e347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a27518fee5a723005299cf49e2d58a842a261ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a27518fee5a723005299cf49e2d58a842a261ca", "html_url": "https://github.com/rust-lang/rust/commit/3a27518fee5a723005299cf49e2d58a842a261ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a27518fee5a723005299cf49e2d58a842a261ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bcb4c2ef23e151a639ff918fbb8ab9d521eabb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bcb4c2ef23e151a639ff918fbb8ab9d521eabb9", "html_url": "https://github.com/rust-lang/rust/commit/7bcb4c2ef23e151a639ff918fbb8ab9d521eabb9"}, {"sha": "5df545b3f06b40e0930bc26413125d084c7bc1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5df545b3f06b40e0930bc26413125d084c7bc1dc", "html_url": "https://github.com/rust-lang/rust/commit/5df545b3f06b40e0930bc26413125d084c7bc1dc"}], "stats": {"total": 256, "additions": 249, "deletions": 7}, "files": [{"sha": "64e31583095d08346b6c09a7b138bb2502fbbf42", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -62,7 +62,7 @@ mod path;\n mod expr;\n mod pat;\n mod coerce;\n-mod closure;\n+pub(crate) mod closure;\n mod mutability;\n \n /// The entry point of type inference.\n@@ -426,7 +426,7 @@ impl InferenceResult {\n             _ => None,\n         })\n     }\n-    pub(crate) fn closure_info(&self, closure: &ClosureId) -> &(Vec<CapturedItem>, FnTrait) {\n+    pub fn closure_info(&self, closure: &ClosureId) -> &(Vec<CapturedItem>, FnTrait) {\n         self.closure_info.get(closure).unwrap()\n     }\n }"}, {"sha": "346c7f6df66c2126fbb334c318fbf4aa39d124cd", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -4,6 +4,7 @@ use std::{cmp, collections::HashMap, convert::Infallible, mem};\n \n use chalk_ir::{cast::Cast, AliasEq, AliasTy, FnSubst, Mutability, TyKind, WhereClause};\n use hir_def::{\n+    data::adt::VariantData,\n     hir::{\n         Array, BinaryOp, BindingAnnotation, BindingId, CaptureBy, Expr, ExprId, Pat, PatId,\n         Statement, UnaryOp,\n@@ -18,6 +19,7 @@ use smallvec::SmallVec;\n use stdx::never;\n \n use crate::{\n+    db::HirDatabase,\n     mir::{BorrowKind, MirSpan, ProjectionElem},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n@@ -146,13 +148,81 @@ pub(crate) enum CaptureKind {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub(crate) struct CapturedItem {\n+pub struct CapturedItem {\n     pub(crate) place: HirPlace,\n     pub(crate) kind: CaptureKind,\n     pub(crate) span: MirSpan,\n     pub(crate) ty: Ty,\n }\n \n+impl CapturedItem {\n+    pub fn display_kind(&self) -> &'static str {\n+        match self.kind {\n+            CaptureKind::ByRef(k) => match k {\n+                BorrowKind::Shared => \"immutable borrow\",\n+                BorrowKind::Shallow => {\n+                    never!(\"shallow borrow should not happen in closure captures\");\n+                    \"shallow borrow\"\n+                },\n+                BorrowKind::Unique => \"unique immutable borrow ([read more](https://doc.rust-lang.org/stable/reference/types/closure.html#unique-immutable-borrows-in-captures))\",\n+                BorrowKind::Mut { .. } => \"mutable borrow\",\n+            },\n+            CaptureKind::ByValue => \"move\",\n+        }\n+    }\n+\n+    pub fn display_place(&self, owner: ClosureId, db: &dyn HirDatabase) -> String {\n+        let owner = db.lookup_intern_closure(owner.into()).0;\n+        let body = db.body(owner);\n+        let mut result = body[self.place.local].name.to_string();\n+        let mut field_need_paren = false;\n+        for proj in &self.place.projections {\n+            match proj {\n+                ProjectionElem::Deref => {\n+                    result = format!(\"*{result}\");\n+                    field_need_paren = true;\n+                }\n+                ProjectionElem::Field(f) => {\n+                    if field_need_paren {\n+                        result = format!(\"({result})\");\n+                    }\n+                    let variant_data = f.parent.variant_data(db.upcast());\n+                    let field = match &*variant_data {\n+                        VariantData::Record(fields) => fields[f.local_id]\n+                            .name\n+                            .as_str()\n+                            .unwrap_or(\"[missing field]\")\n+                            .to_string(),\n+                        VariantData::Tuple(fields) => fields\n+                            .iter()\n+                            .position(|x| x.0 == f.local_id)\n+                            .unwrap_or_default()\n+                            .to_string(),\n+                        VariantData::Unit => \"[missing field]\".to_string(),\n+                    };\n+                    result = format!(\"{result}.{field}\");\n+                    field_need_paren = false;\n+                }\n+                &ProjectionElem::TupleOrClosureField(field) => {\n+                    if field_need_paren {\n+                        result = format!(\"({result})\");\n+                    }\n+                    result = format!(\"{result}.{field}\");\n+                    field_need_paren = false;\n+                }\n+                ProjectionElem::Index(_)\n+                | ProjectionElem::ConstantIndex { .. }\n+                | ProjectionElem::Subslice { .. }\n+                | ProjectionElem::OpaqueCast(_) => {\n+                    never!(\"Not happen in closure capture\");\n+                    continue;\n+                }\n+            }\n+        }\n+        result\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub(crate) struct CapturedItemWithoutTy {\n     pub(crate) place: HirPlace,"}, {"sha": "e5b356dde6c693b2e080c051d6563f67c1d7dc2a", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -60,8 +60,8 @@ pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n-    InferenceResult, OverloadedDeref, PointerCast,\n+    closure::CapturedItem, could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode,\n+    InferenceDiagnostic, InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "f7a14bf36ad9d539eff04ee67435730c0632107d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -3174,6 +3174,46 @@ impl TraitRef {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct Closure {\n+    id: ClosureId,\n+    subst: Substitution,\n+}\n+\n+impl From<Closure> for ClosureId {\n+    fn from(value: Closure) -> Self {\n+        value.id\n+    }\n+}\n+\n+impl Closure {\n+    fn as_ty(self) -> Ty {\n+        TyKind::Closure(self.id, self.subst).intern(Interner)\n+    }\n+\n+    pub fn display_with_id(&self, db: &dyn HirDatabase) -> String {\n+        self.clone().as_ty().display(db).with_closure_style(ClosureStyle::ClosureWithId).to_string()\n+    }\n+\n+    pub fn display_with_impl(&self, db: &dyn HirDatabase) -> String {\n+        self.clone().as_ty().display(db).with_closure_style(ClosureStyle::ImplFn).to_string()\n+    }\n+\n+    pub fn captured_items(&self, db: &dyn HirDatabase) -> Vec<hir_ty::CapturedItem> {\n+        let owner = db.lookup_intern_closure((self.id).into()).0;\n+        let infer = &db.infer(owner);\n+        let info = infer.closure_info(&self.id);\n+        info.0.clone()\n+    }\n+\n+    pub fn fn_trait(&self, db: &dyn HirDatabase) -> FnTrait {\n+        let owner = db.lookup_intern_closure((self.id).into()).0;\n+        let infer = &db.infer(owner);\n+        let info = infer.closure_info(&self.id);\n+        info.1\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     env: Arc<TraitEnvironment>,\n@@ -3463,6 +3503,13 @@ impl Type {\n         matches!(self.ty.kind(Interner), TyKind::Closure { .. })\n     }\n \n+    pub fn as_closure(&self) -> Option<Closure> {\n+        match self.ty.kind(Interner) {\n+            TyKind::Closure(id, subst) => Some(Closure { id: *id, subst: subst.clone() }),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn is_fn(&self) -> bool {\n         matches!(self.ty.kind(Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n     }\n@@ -4016,6 +4063,10 @@ impl Type {\n             .map(|id| TypeOrConstParam { id }.split(db).either_into())\n             .collect()\n     }\n+\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n+        layout_of_ty(db, &self.ty, self.env.krate)\n+    }\n }\n \n // FIXME: Document this"}, {"sha": "bbbf39ca15bd6ecc39a7844fbdbe94d19b104bc8", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -119,8 +119,8 @@ fn hover_simple(\n         | T![crate]\n         | T![Self]\n         | T![_] => 4,\n-        // index and prefix ops\n-        T!['['] | T![']'] | T![?] | T![*] | T![-] | T![!] => 3,\n+        // index and prefix ops and closure pipe\n+        T!['['] | T![']'] | T![?] | T![*] | T![-] | T![!] | T![|] => 3,\n         kind if kind.is_keyword() => 2,\n         T!['('] | T![')'] => 2,\n         kind if kind.is_trivia() => 0,\n@@ -219,6 +219,16 @@ fn hover_simple(\n                 };\n                 render::type_info_of(sema, config, &Either::Left(call_expr))\n             })\n+        })\n+        // try closure\n+        .or_else(|| {\n+            descended().find_map(|token| {\n+                if token.kind() != T![|] {\n+                    return None;\n+                }\n+                let c = token.parent().and_then(|x| x.parent()).and_then(ast::ClosureExpr::cast)?;\n+                render::closure_expr(sema, c)\n+            })\n         });\n \n     result.map(|mut res: HoverResult| {"}, {"sha": "e5019b71595bf44e45ebe415769e341e050f5993", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -42,6 +42,38 @@ pub(super) fn type_info_of(\n     type_info(sema, _config, original, adjusted)\n }\n \n+pub(super) fn closure_expr(\n+    sema: &Semantics<'_, RootDatabase>,\n+    c: ast::ClosureExpr,\n+) -> Option<HoverResult> {\n+    let ty = &sema.type_of_expr(&c.into())?.original;\n+    let layout = ty\n+        .layout(sema.db)\n+        .map(|x| format!(\" // size = {}, align = {}\", x.size.bytes(), x.align.abi.bytes()))\n+        .unwrap_or_default();\n+    let c = ty.as_closure()?;\n+    let mut captures = c\n+        .captured_items(sema.db)\n+        .into_iter()\n+        .map(|x| {\n+            format!(\"* `{}` by {}\", x.display_place(c.clone().into(), sema.db), x.display_kind())\n+        })\n+        .join(\"\\n\");\n+    if captures.trim().is_empty() {\n+        captures = \"This closure captures nothing\".to_string();\n+    }\n+    let mut res = HoverResult::default();\n+    res.markup = format!(\n+        \"```rust\\n{}{}\\n{}\\n```\\n\\n## Captures\\n{}\",\n+        c.display_with_id(sema.db),\n+        layout,\n+        c.display_with_impl(sema.db),\n+        captures,\n+    )\n+    .into();\n+    Some(res)\n+}\n+\n pub(super) fn try_expr(\n     sema: &Semantics<'_, RootDatabase>,\n     _config: &HoverConfig,"}, {"sha": "24c39ab03d51d92b1f5411e7ea3706f254458b9b", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a27518fee5a723005299cf49e2d58a842a261ca/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=3a27518fee5a723005299cf49e2d58a842a261ca", "patch": "@@ -198,6 +198,85 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn hover_closure() {\n+    check(\n+        r#\"\n+//- minicore: copy\n+fn main() {\n+    let x = 2;\n+    let y = $0|z| x + z;\n+}\n+\"#,\n+        expect![[r#\"\n+            *|*\n+            ```rust\n+            {closure#0} // size = 8, align = 8\n+            impl Fn(i32) -> i32\n+            ```\n+\n+            ## Captures\n+            * `x` by immutable borrow\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+//- minicore: copy\n+fn foo(x: impl Fn(i32) -> i32) {\n+\n+}\n+fn main() {\n+    foo($0|x: i32| x)\n+}\n+\"#,\n+        expect![[r#\"\n+            *|*\n+            ```rust\n+            {closure#0} // size = 0, align = 1\n+            impl Fn(i32) -> i32\n+            ```\n+\n+            ## Captures\n+            This closure captures nothing\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+//- minicore: copy\n+\n+struct Z { f: i32 }\n+\n+struct Y(&'static mut Z)\n+\n+struct X {\n+    f1: Y,\n+    f2: (Y, Y),\n+}\n+\n+fn main() {\n+    let x: X;\n+    let y = $0|| {\n+        x.f1;\n+        &mut x.f2.0 .0.f;\n+    };\n+}\n+\"#,\n+        expect![[r#\"\n+            *|*\n+            ```rust\n+            {closure#0} // size = 16, align = 8\n+            impl FnOnce()\n+            ```\n+\n+            ## Captures\n+            * `x.f1` by move\n+            * `(*x.f2.0.0).f` by mutable borrow\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_shows_long_type_of_an_expression() {\n     check("}]}