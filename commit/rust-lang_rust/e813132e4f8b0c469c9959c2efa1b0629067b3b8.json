{"sha": "e813132e4f8b0c469c9959c2efa1b0629067b3b8", "node_id": "C_kwDOAAsO6NoAKGU4MTMxMzJlNGY4YjBjNDY5Yzk5NTljMmVmYTFiMDYyOTA2N2IzYjg", "commit": {"author": {"name": "SpanishPear", "email": "shrey.somaiya@gmail.com", "date": "2022-10-23T13:52:59Z"}, "committer": {"name": "SpanishPear", "email": "shrey.somaiya@gmail.com", "date": "2023-01-22T06:05:37Z"}, "message": "--wip-- [skip ci]\n\n--wip-- [skip ci]\n\nget the generic text and put it int he suggestion, but suggestion not working on derive subdiagnostic\n\nrefactor away from derives and use span_suggestion() instead. Show's the correct(?) generic contents, but overwrites the fn name :(\n\nx fmt\n\ndrop commented code and s/todo/fixme\n\nget the correct diagnostic for functions, at least\n\nx fmt\n\nremove some debugs\n\nremove format\n\nremove debugs\n\nremove useless change\n\nremove useless change\n\nremove legacy approach\n\ncorrect lookahead + error message contains the ident name\n\nfmt\n\nrefactor code\n\ntests\n\nadd tests\n\nremoev debug\n\nremove comment", "tree": {"sha": "6367f65c34fd4cfdd72e3bb474b1db3d87fb9a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6367f65c34fd4cfdd72e3bb474b1db3d87fb9a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e813132e4f8b0c469c9959c2efa1b0629067b3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e813132e4f8b0c469c9959c2efa1b0629067b3b8", "html_url": "https://github.com/rust-lang/rust/commit/e813132e4f8b0c469c9959c2efa1b0629067b3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e813132e4f8b0c469c9959c2efa1b0629067b3b8/comments", "author": {"login": "SpanishPear", "id": 27941681, "node_id": "MDQ6VXNlcjI3OTQxNjgx", "avatar_url": "https://avatars.githubusercontent.com/u/27941681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpanishPear", "html_url": "https://github.com/SpanishPear", "followers_url": "https://api.github.com/users/SpanishPear/followers", "following_url": "https://api.github.com/users/SpanishPear/following{/other_user}", "gists_url": "https://api.github.com/users/SpanishPear/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpanishPear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpanishPear/subscriptions", "organizations_url": "https://api.github.com/users/SpanishPear/orgs", "repos_url": "https://api.github.com/users/SpanishPear/repos", "events_url": "https://api.github.com/users/SpanishPear/events{/privacy}", "received_events_url": "https://api.github.com/users/SpanishPear/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SpanishPear", "id": 27941681, "node_id": "MDQ6VXNlcjI3OTQxNjgx", "avatar_url": "https://avatars.githubusercontent.com/u/27941681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpanishPear", "html_url": "https://github.com/SpanishPear", "followers_url": "https://api.github.com/users/SpanishPear/followers", "following_url": "https://api.github.com/users/SpanishPear/following{/other_user}", "gists_url": "https://api.github.com/users/SpanishPear/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpanishPear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpanishPear/subscriptions", "organizations_url": "https://api.github.com/users/SpanishPear/orgs", "repos_url": "https://api.github.com/users/SpanishPear/repos", "events_url": "https://api.github.com/users/SpanishPear/events{/privacy}", "received_events_url": "https://api.github.com/users/SpanishPear/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c394e1b9abf83f26d68f441e9f0ef0062bde703", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c394e1b9abf83f26d68f441e9f0ef0062bde703", "html_url": "https://github.com/rust-lang/rust/commit/1c394e1b9abf83f26d68f441e9f0ef0062bde703"}], "stats": {"total": 294, "additions": 292, "deletions": 2}, "files": [{"sha": "6df9cfd3ff4e3afe5d96ce69cb4389509f60d10c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -284,7 +284,7 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -324,7 +324,60 @@ impl<'a> Parser<'a> {\n             suggest_raw,\n             suggest_remove_comma,\n         };\n-        err.into_diagnostic(&self.sess.span_diagnostic)\n+        let mut err = err.into_diagnostic(&self.sess.span_diagnostic);\n+\n+        // if the token we have is a `<`\n+        // it *might* be a misplaced generic\n+        if self.token == token::Lt {\n+            // all keywords that could have generic applied\n+            let valid_prev_keywords =\n+                [kw::Fn, kw::Type, kw::Struct, kw::Enum, kw::Union, kw::Trait];\n+\n+            // If we've expected an identifier,\n+            // and the current token is a '<'\n+            // if the previous token is a valid keyword\n+            // that might use a generic, then suggest a correct\n+            // generic placement (later on)\n+            let maybe_keyword = self.prev_token.clone();\n+            if valid_prev_keywords.into_iter().any(|x| maybe_keyword.is_keyword(x)) {\n+                // if we have a valid keyword, attempt to parse generics\n+                // also obtain the keywords symbol\n+                match self.parse_generics() {\n+                    Ok(generic) => {\n+                        if let TokenKind::Ident(symbol, _) = maybe_keyword.kind {\n+                            let ident_name = symbol.to_string();\n+                            // at this point, we've found something like\n+                            // `fn <T>id`\n+                            // and current token should be Ident with the item name (i.e. the function name)\n+                            // if there is a `<` after the fn name, then don't show a suggestion, show help\n+\n+                            if !self.look_ahead(1, |t| *t == token::Lt) &&\n+                                let Ok(snippet) = self.sess.source_map().span_to_snippet(generic.span) &&\n+                                let Ok(ident) = self.sess.source_map().span_to_snippet(self.token.span) {\n+                                    err.span_suggestion_verbose(\n+                                        generic.span.to(self.token.span),\n+                                        format!(\"place the generic parameter name after the {ident_name} name\"),\n+                                        format!(\" {ident}{snippet}\"),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                } else {\n+                                    err.help(format!(\n+                                        \"place the generic parameter name after the {ident_name} name\"\n+                                    ));\n+                                }\n+                        }\n+                    }\n+                    Err(err) => {\n+                        // if there's an error parsing the generics,\n+                        // then don't do a misplaced generics suggestion\n+                        // and emit the expected ident error instead;\n+                        err.cancel();\n+                    }\n+                }\n+            }\n+        }\n+\n+        err\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "a9d3e9f86d09c437b52b750a9fc3de7ee644c937", "filename": "src/test/ui/parser/suggest_misplaced_generics/enum.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+enum Foo<T> { Variant(T) }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the enum name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "2d216ba53cc7201de6f858f4ff8034a0aed6b7f2", "filename": "src/test/ui/parser/suggest_misplaced_generics/enum.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+enum<T> Foo { Variant(T) }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the enum name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "521cee4f728985e6209315f48289c4c8cd68d184", "filename": "src/test/ui/parser/suggest_misplaced_generics/enum.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/enum.rs:5:5\n+   |\n+LL | enum<T> Foo { Variant(T) }\n+   |     ^ expected identifier\n+   |\n+help: place the generic parameter name after the enum name\n+   |\n+LL | enum Foo<T> { Variant(T) }\n+   |      ~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "1dc182398d80abc9b3ead6f58137fd4687bd2a66", "filename": "src/test/ui/parser/suggest_misplaced_generics/existing_generics.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366\n+// there is already an existing generic on f, so don't show a suggestion\n+\n+#[allow(unused)]\n+fn<'a, B: 'a + std::ops::Add<Output = u32>> f<T>(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "89716e6f1ed0a28ffe32513749e4aefd52aedebe", "filename": "src/test/ui/parser/suggest_misplaced_generics/existing_generics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `<`\n+  --> $DIR/existing_generics.rs:5:3\n+   |\n+LL | fn<'a, B: 'a + std::ops::Add<Output = u32>> f<T>(_x: B) { }\n+   |   ^ expected identifier\n+   |\n+   = help: place the generic parameter name after the fn name\n+\n+error: aborting due to previous error\n+"}, {"sha": "06947e098ee6ae063c27a2d13b8732cafc4edf57", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-complex-generics.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+//~| SUGGESTION  f<'a, B: 'a + std::ops::Add<Output = u32>>\n+\n+fn main() {}"}, {"sha": "cefce8d08806d9cf52e7bb73e1dca9ec7282558b", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-complex-generics.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+//~| SUGGESTION  f<'a, B: 'a + std::ops::Add<Output = u32>>\n+\n+fn main() {}"}, {"sha": "7d1b44c44944c97e405e27dac7d90a62ff27f077", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-complex-generics.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-complex-generics.rs:5:3\n+   |\n+LL | fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n+   |   ^ expected identifier\n+   |\n+help: place the generic parameter name after the fn name\n+   |\n+LL | fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n+   |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "7fcb6a82ce451e49120cc01caa3e39da5c5578d5", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-invalid-generics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,8 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// The generics fail to parse here, so don't make any suggestions/help\n+\n+#[allow(unused)]\n+fn<~>()> id(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+\n+fn main() {}"}, {"sha": "47e12016938d8deacb9ab58e82c608b5cde9af64", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-invalid-generics.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-invalid-generics.rs:5:3\n+   |\n+LL | fn<~>()> id(x: T) -> T { x }\n+   |   ^ expected identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "31c5429b16b05084e650db5f529cd08f2873f3ff", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-simple.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn id<T>(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+//~| SUGGESTION  id<T>\n+\n+fn main() {}"}, {"sha": "0a466184e996f37ee43bf779c62119c92c625605", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-simple.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn<T> id(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+//~| SUGGESTION  id<T>\n+\n+fn main() {}"}, {"sha": "40c4581e513ad3b280ada3bad108ac587fdb5c17", "filename": "src/test/ui/parser/suggest_misplaced_generics/fn-simple.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-simple.rs:5:3\n+   |\n+LL | fn<T> id(x: T) -> T { x }\n+   |   ^ expected identifier\n+   |\n+help: place the generic parameter name after the fn name\n+   |\n+LL | fn id<T>(x: T) -> T { x }\n+   |    ~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "8627699a83084943ef5729b030b73b646ca95976", "filename": "src/test/ui/parser/suggest_misplaced_generics/struct.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Foo<T> { x: T }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the struct name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "15646b06cfc62597a23121113abb184ec54bba19", "filename": "src/test/ui/parser/suggest_misplaced_generics/struct.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct<T> Foo { x: T }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the struct name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "ab17ee57e0bcd6c92500f3afb1ae1b6582e72cd1", "filename": "src/test/ui/parser/suggest_misplaced_generics/struct.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/struct.rs:5:7\n+   |\n+LL | struct<T> Foo { x: T }\n+   |       ^ expected identifier\n+   |\n+help: place the generic parameter name after the struct name\n+   |\n+LL | struct Foo<T> { x: T }\n+   |        ~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "31ebf1f088fc7b01d4f3319c83091bcd1d98d356", "filename": "src/test/ui/parser/suggest_misplaced_generics/trait.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,12 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+trait Foo<T> {\n+    //~^ ERROR expected identifier, found `<`\n+    //~| HELP place the generic parameter name after the trait name\n+    //~| SUGGESTION  Foo<T>\n+}\n+\n+\n+fn main() {}"}, {"sha": "81b6abbd66163b2af968992df1f60d8c75100aae", "filename": "src/test/ui/parser/suggest_misplaced_generics/trait.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,12 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+trait<T> Foo {\n+    //~^ ERROR expected identifier, found `<`\n+    //~| HELP place the generic parameter name after the trait name\n+    //~| SUGGESTION  Foo<T>\n+}\n+\n+\n+fn main() {}"}, {"sha": "069683bda1be3a21694a4c587886fba6b7e30541", "filename": "src/test/ui/parser/suggest_misplaced_generics/trait.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/trait.rs:5:6\n+   |\n+LL | trait<T> Foo {\n+   |      ^ expected identifier\n+   |\n+help: place the generic parameter name after the trait name\n+   |\n+LL | trait Foo<T> {\n+   |       ~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "b04003b803d1c9e48b0b3c5715d2277e611cbafc", "filename": "src/test/ui/parser/suggest_misplaced_generics/type.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+type Foo<T> = T;\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the type name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "2d759a8b1ab61bef0abccf2df6a9eafefbd640a6", "filename": "src/test/ui/parser/suggest_misplaced_generics/type.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,10 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+type<T> Foo = T;\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the type name\n+//~| SUGGESTION  Foo<T>\n+\n+fn main() {}"}, {"sha": "a2832965c6d0e368a683ae55f16376b70e96cfeb", "filename": "src/test/ui/parser/suggest_misplaced_generics/type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e813132e4f8b0c469c9959c2efa1b0629067b3b8/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr?ref=e813132e4f8b0c469c9959c2efa1b0629067b3b8", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `<`\n+  --> $DIR/type.rs:5:5\n+   |\n+LL | type<T> Foo = T;\n+   |     ^ expected identifier\n+   |\n+help: place the generic parameter name after the type name\n+   |\n+LL | type Foo<T> = T;\n+   |      ~~~~~~\n+\n+error: aborting due to previous error\n+"}]}