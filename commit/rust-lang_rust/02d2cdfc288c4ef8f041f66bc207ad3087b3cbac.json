{"sha": "02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "node_id": "C_kwDOAAsO6NoAKDAyZDJjZGZjMjg4YzRlZjhmMDQxZjY2YmMyMDdhZDMwODdiM2NiYWM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-22T06:38:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-26T22:14:09Z"}, "message": "Convert `process_variant` functions into closures.\n\nIt makes things a bit nicer.", "tree": {"sha": "a169c628db36dc4265bd178f2e3bdd167278c9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a169c628db36dc4265bd178f2e3bdd167278c9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "html_url": "https://github.com/rust-lang/rust/commit/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7855fa9defc918aa513edd021f4100a46c30109", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7855fa9defc918aa513edd021f4100a46c30109", "html_url": "https://github.com/rust-lang/rust/commit/b7855fa9defc918aa513edd021f4100a46c30109"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "8331710699063296518cf1eed8d0af1009af8b15", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "patch": "@@ -107,20 +107,20 @@ fn cs_clone_shallow(\n     substr: &Substructure<'_>,\n     is_union: bool,\n ) -> P<Expr> {\n-    fn process_variant(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {\n+    let mut stmts = Vec::new();\n+    let mut process_variant = |variant: &VariantData| {\n         for field in variant.fields() {\n             // let _: AssertParamIsClone<FieldTy>;\n             super::assert_ty_bounds(\n                 cx,\n-                stmts,\n+                &mut stmts,\n                 field.ty.clone(),\n                 field.span,\n                 &[sym::clone, sym::AssertParamIsClone],\n             );\n         }\n-    }\n+    };\n \n-    let mut stmts = Vec::new();\n     if is_union {\n         // let _: AssertParamIsCopy<Self>;\n         let self_ty = cx.ty_path(cx.path_ident(trait_span, Ident::with_dummy_span(kw::SelfUpper)));\n@@ -134,11 +134,11 @@ fn cs_clone_shallow(\n     } else {\n         match *substr.fields {\n             StaticStruct(vdata, ..) => {\n-                process_variant(cx, &mut stmts, vdata);\n+                process_variant(vdata);\n             }\n             StaticEnum(enum_def, ..) => {\n                 for variant in &enum_def.variants {\n-                    process_variant(cx, &mut stmts, &variant.data);\n+                    process_variant(&variant.data);\n                 }\n             }\n             _ => cx.span_bug("}, {"sha": "f54ded3c87cab836853f779f0c2b4d9d33cc4135", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d2cdfc288c4ef8f041f66bc207ad3087b3cbac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=02d2cdfc288c4ef8f041f66bc207ad3087b3cbac", "patch": "@@ -55,31 +55,27 @@ fn cs_total_eq_assert(\n     trait_span: Span,\n     substr: &Substructure<'_>,\n ) -> P<Expr> {\n-    fn process_variant(\n-        cx: &mut ExtCtxt<'_>,\n-        stmts: &mut Vec<ast::Stmt>,\n-        variant: &ast::VariantData,\n-    ) {\n+    let mut stmts = Vec::new();\n+    let mut process_variant = |variant: &ast::VariantData| {\n         for field in variant.fields() {\n             // let _: AssertParamIsEq<FieldTy>;\n             super::assert_ty_bounds(\n                 cx,\n-                stmts,\n+                &mut stmts,\n                 field.ty.clone(),\n                 field.span,\n                 &[sym::cmp, sym::AssertParamIsEq],\n             );\n         }\n-    }\n+    };\n \n-    let mut stmts = Vec::new();\n     match *substr.fields {\n         StaticStruct(vdata, ..) => {\n-            process_variant(cx, &mut stmts, vdata);\n+            process_variant(vdata);\n         }\n         StaticEnum(enum_def, ..) => {\n             for variant in &enum_def.variants {\n-                process_variant(cx, &mut stmts, &variant.data);\n+                process_variant(&variant.data);\n             }\n         }\n         _ => cx.span_bug(trait_span, \"unexpected substructure in `derive(Eq)`\"),"}]}