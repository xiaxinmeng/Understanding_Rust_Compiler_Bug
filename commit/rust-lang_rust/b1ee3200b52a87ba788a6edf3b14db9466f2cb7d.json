{"sha": "b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZWUzMjAwYjUyYTg3YmE3ODhhNmVkZjNiMTRkYjk0NjZmMmNiN2Q=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-05T12:44:07Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-15T13:04:09Z"}, "message": "test: ensure that the extended usage description gets printed.\n\nPreviously the longer hand-written usage string was never being printed:\ntheoretically it was trying to detect when precisely `--help` was\npassed (but not `-h`), but the getopts framework was considering a check\nfor the presence of `-h` to be a check for that of `--help` too,\ni.e. the code was always going through the `-h` path.\n\nThis changes it to print the extended usage for both `-h` and `--help`,\nmeaning that it does actually appear correctly.", "tree": {"sha": "497aff49c6226142b730220f84e0dd3e0192e461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497aff49c6226142b730220f84e0dd3e0192e461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "html_url": "https://github.com/rust-lang/rust/commit/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f9181654ec71754c8528dd37075643d95947c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f9181654ec71754c8528dd37075643d95947c4", "html_url": "https://github.com/rust-lang/rust/commit/19f9181654ec71754c8528dd37075643d95947c4"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "3273e53ed8a0bad0a14e26a5474e43f9cfc57593", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "patch": "@@ -320,13 +320,11 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n                                          task, allow printing directly\"))\n }\n \n-fn usage(binary: &str, helpstr: &str) {\n+fn usage(binary: &str) {\n     let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n-    println!(\"{}\", getopts::usage(message, optgroups().as_slice()));\n-    println!(\"\");\n-    if helpstr == \"help\" {\n-        println!(\"{}\", \"\\\n-The FILTER regex is matched against the name of all tests to run, and\n+    println!(r\"{usage}\n+\n+The FILTER regex is tested against the name of all tests to run, and\n only those tests that match are run.\n \n By default, all tests are run in parallel. This can be altered with the\n@@ -338,18 +336,18 @@ environment variable. Logging is not captured by default.\n \n Test Attributes:\n \n-    #[test]        - Indicates a function is a test to be run. This function\n+    \\#[test]        - Indicates a function is a test to be run. This function\n                      takes no arguments.\n-    #[bench]       - Indicates a function is a benchmark to be run. This\n+    \\#[bench]       - Indicates a function is a benchmark to be run. This\n                      function takes one argument (test::Bencher).\n-    #[should_fail] - This function (also labeled with #[test]) will only pass if\n+    \\#[should_fail] - This function (also labeled with \\#[test]) will only pass if\n                      the code causes a failure (an assertion failure or fail!)\n-    #[ignore]      - When applied to a function which is already attributed as a\n+    \\#[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n-                     tests. This may also be written as #[ignore(cfg(...))] to\n-                     ignore the test on certain configurations.\");\n-    }\n+                     tests. This may also be written as \\#[ignore(cfg(...))] to\n+                     ignore the test on certain configurations.\",\n+             usage = getopts::usage(message, optgroups().as_slice()));\n }\n \n // Parses command line arguments into test options\n@@ -365,14 +363,7 @@ pub fn parse_opts(args: &[StrBuf]) -> Option<OptRes> {\n           Err(f) => return Some(Err(f.to_err_msg().to_strbuf()))\n         };\n \n-    if matches.opt_present(\"h\") {\n-        usage(args[0].as_slice(), \"h\");\n-        return None;\n-    }\n-    if matches.opt_present(\"help\") {\n-        usage(args[0].as_slice(), \"help\");\n-        return None;\n-    }\n+    if matches.opt_present(\"h\") { usage(args[0].as_slice()); return None; }\n \n     let filter = if matches.free.len() > 0 {\n         let s = matches.free.get(0).as_slice();"}]}