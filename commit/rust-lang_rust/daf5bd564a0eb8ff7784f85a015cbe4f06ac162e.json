{"sha": "daf5bd564a0eb8ff7784f85a015cbe4f06ac162e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjViZDU2NGEwZWI4ZmY3Nzg0Zjg1YTAxNWNiZTRmMDZhYzE2MmU=", "commit": {"author": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2018-10-31T19:15:20Z"}, "committer": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2018-10-31T19:15:20Z"}, "message": "A couple suggested edits", "tree": {"sha": "76799422bfe675c434ad9b984b7de1126bb03189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76799422bfe675c434ad9b984b7de1126bb03189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e", "html_url": "https://github.com/rust-lang/rust/commit/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92594dfacd6d6323f920a9d64557174db813904", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92594dfacd6d6323f920a9d64557174db813904", "html_url": "https://github.com/rust-lang/rust/commit/a92594dfacd6d6323f920a9d64557174db813904"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "4a62649434ca607588df1a0788d830aedaeccbd1", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf5bd564a0eb8ff7784f85a015cbe4f06ac162e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=daf5bd564a0eb8ff7784f85a015cbe4f06ac162e", "patch": "@@ -477,7 +477,7 @@ fn search_hashed_nonempty<K, V, M, F>(table: M, hash: SafeHash, mut is_match: F,\n         }\n \n         // If the hash doesn't match, it can't be this one..\n-        if hash == full.hash() || !compare_hashes {\n+        if !compare_hashes || hash == full.hash() {\n             // If the key doesn't match, it can't be this one..\n             if is_match(full.read().0) {\n                 return InternalEntry::Occupied { elem: full };\n@@ -489,7 +489,7 @@ fn search_hashed_nonempty<K, V, M, F>(table: M, hash: SafeHash, mut is_match: F,\n     }\n }\n \n-/// Search for a pre-hashed key when the hash map is known to be non-empty.\n+/// Same as `search_hashed_nonempty` but for mutable access.\n #[inline]\n fn search_hashed_nonempty_mut<K, V, M, F>(table: M, hash: SafeHash, mut is_match: F,\n                                           compare_hashes: bool)\n@@ -1571,10 +1571,6 @@ impl<K, V, S> HashMap<K, V, S>\n     /// so that the map now contains keys which compare equal, search may start\n     /// acting eratically, with two keys randomly masking eachother. Implementations\n     /// are free to assume this doesn't happen (within the limits of memory-safety).\n-    ///\n-    /// # Examples\n-    ///\n-    ///\n     #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n     pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<K, V, S> {\n         self.reserve(1);\n@@ -1595,7 +1591,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// Unless you are in such a situation, higher-level and more foolproof APIs like\n     /// `get` should be preferred.\n     ///\n-    /// Immutable raw entries have very limited use; you might instead want `raw_entry`.\n+    /// Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n     #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n     pub fn raw_entry(&self) -> RawEntryBuilder<K, V, S> {\n         RawEntryBuilder { map: self }"}]}