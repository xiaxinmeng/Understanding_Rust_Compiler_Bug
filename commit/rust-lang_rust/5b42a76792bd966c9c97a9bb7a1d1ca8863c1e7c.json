{"sha": "5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDJhNzY3OTJiZDk2NmM5Yzk3YTliYjdhMWQxY2E4ODYzYzFlN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T11:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T11:09:45Z"}, "message": "Auto merge of #5099 - JohnTitor:split-up-non-copy-const, r=flip1995\n\nSplit up `non_copy_const` ui test\n\nPart of #2038\nMaybe there is a better way to avoid duplications of constants.\n\nchangelog: none", "tree": {"sha": "67ef02506025780127330da1b36e42069295b90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67ef02506025780127330da1b36e42069295b90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "html_url": "https://github.com/rust-lang/rust/commit/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e722ba670c7223c6048fb4e9c1d4833515d16d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e722ba670c7223c6048fb4e9c1d4833515d16d0", "html_url": "https://github.com/rust-lang/rust/commit/5e722ba670c7223c6048fb4e9c1d4833515d16d0"}, {"sha": "314f438ab4025448da3980c2f03269f49ffeaa0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/314f438ab4025448da3980c2f03269f49ffeaa0b", "html_url": "https://github.com/rust-lang/rust/commit/314f438ab4025448da3980c2f03269f49ffeaa0b"}], "stats": {"total": 635, "additions": 335, "deletions": 300}, "files": [{"sha": "fef9f4f39f80941d56d58225a086c526bcfa9a43", "filename": "tests/ui/borrow_interior_mutable_const.rs", "status": "renamed", "additions": 5, "deletions": 65, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fborrow_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fborrow_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.rs?ref=5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "patch": "@@ -1,93 +1,33 @@\n-#![allow(clippy::ref_in_deref, dead_code)]\n+#![warn(clippy::borrow_interior_mutable_const)]\n+#![allow(clippy::declare_interior_mutable_const, clippy::ref_in_deref)]\n \n use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt::Display;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Once;\n \n-const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+const ATOMIC: AtomicUsize = AtomicUsize::new(5);\n+const CELL: Cell<usize> = Cell::new(6);\n const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-//~^ ERROR interior mutable\n-\n-macro_rules! declare_const {\n-    ($name:ident: $ty:ty = $e:expr) => {\n-        const $name: $ty = $e;\n-    };\n-}\n-declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-\n-// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n-\n const INTEGER: u8 = 8;\n const STRING: String = String::new();\n const STR: &str = \"012345\";\n const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n-//^ note: a const item of Cow is used in the `postgres` package.\n-\n const NO_ANN: &dyn Display = &70;\n-\n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n-//^ there should be no lints on this line\n-\n-#[allow(clippy::declare_interior_mutable_const)]\n const ONCE_INIT: Once = Once::new();\n \n trait Trait<T>: Copy {\n     type NonCopyType;\n \n-    const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n-    const INTEGER: u64;\n-    const STRING: String;\n-    const SELF: Self; // (no error)\n-    const INPUT: T;\n-    //~^ ERROR interior mutable\n-    //~| HELP consider requiring `T` to be `Copy`\n-    const ASSOC: Self::NonCopyType;\n-    //~^ ERROR interior mutable\n-    //~| HELP consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n-\n-    const AN_INPUT: T = Self::INPUT;\n-    //~^ ERROR interior mutable\n-    //~| ERROR consider requiring `T` to be `Copy`\n-    declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n-}\n-\n-trait Trait2 {\n-    type CopyType: Copy;\n-\n-    const SELF_2: Self;\n-    //~^ ERROR interior mutable\n-    //~| HELP consider requiring `Self` to be `Copy`\n-    const ASSOC_2: Self::CopyType; // (no error)\n+    const ATOMIC: AtomicUsize;\n }\n \n-// we don't lint impl of traits, because an impl has no power to change the interface.\n impl Trait<u32> for u64 {\n     type NonCopyType = u16;\n \n     const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n-    const INTEGER: u64 = 10;\n-    const STRING: String = String::new();\n-    const SELF: Self = 11;\n-    const INPUT: u32 = 12;\n-    const ASSOC: Self::NonCopyType = 13;\n-}\n-\n-struct Local<T, U>(T, U);\n-\n-impl<T: Trait2 + Trait<u32>, U: Trait2> Local<T, U> {\n-    const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n-    const COW: Cow<'static, str> = Cow::Borrowed(\"tuvwxy\");\n-    const T_SELF: T = T::SELF_2;\n-    const U_SELF: U = U::SELF_2;\n-    //~^ ERROR interior mutable\n-    //~| HELP consider requiring `U` to be `Copy`\n-    const T_ASSOC: T::NonCopyType = T::ASSOC;\n-    //~^ ERROR interior mutable\n-    //~| HELP consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n-    const U_ASSOC: U::CopyType = U::ASSOC_2;\n }\n \n fn main() {", "previous_filename": "tests/ui/non_copy_const.rs"}, {"sha": "dc738064a17184ddf9c1177e36d18a9db60c31b8", "filename": "tests/ui/borrow_interior_mutable_const.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.stderr?ref=5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "patch": "@@ -0,0 +1,131 @@\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:34:5\n+   |\n+LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n+   |     ^^^^^^\n+   |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:35:16\n+   |\n+LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n+   |                ^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:38:22\n+   |\n+LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n+   |                      ^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:39:25\n+   |\n+LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n+   |                         ^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:40:27\n+   |\n+LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n+   |                           ^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:41:26\n+   |\n+LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n+   |                          ^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:52:14\n+   |\n+LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n+   |              ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:53:14\n+   |\n+LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n+   |              ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:54:19\n+   |\n+LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:55:14\n+   |\n+LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n+   |              ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:56:13\n+   |\n+LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:62:13\n+   |\n+LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:67:5\n+   |\n+LL |     CELL.set(2); //~ ERROR interior mutability\n+   |     ^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:68:16\n+   |\n+LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n+   |                ^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:81:5\n+   |\n+LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/borrow_interior_mutable_const.rs:82:16\n+   |\n+LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "b4003ed8932d37bd214e7160db8757fc7cfbedd4", "filename": "tests/ui/declare_interior_mutable_const.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.rs?ref=5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "patch": "@@ -0,0 +1,93 @@\n+#![warn(clippy::declare_interior_mutable_const)]\n+\n+use std::borrow::Cow;\n+use std::cell::Cell;\n+use std::fmt::Display;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::Once;\n+\n+const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+//~^ ERROR interior mutable\n+\n+macro_rules! declare_const {\n+    ($name:ident: $ty:ty = $e:expr) => {\n+        const $name: $ty = $e;\n+    };\n+}\n+declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+\n+// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n+\n+const INTEGER: u8 = 8;\n+const STRING: String = String::new();\n+const STR: &str = \"012345\";\n+const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n+//^ note: a const item of Cow is used in the `postgres` package.\n+\n+const NO_ANN: &dyn Display = &70;\n+\n+static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n+//^ there should be no lints on this line\n+\n+#[allow(clippy::declare_interior_mutable_const)]\n+const ONCE_INIT: Once = Once::new();\n+\n+trait Trait<T>: Copy {\n+    type NonCopyType;\n+\n+    const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n+    const INTEGER: u64;\n+    const STRING: String;\n+    const SELF: Self; // (no error)\n+    const INPUT: T;\n+    //~^ ERROR interior mutable\n+    //~| HELP consider requiring `T` to be `Copy`\n+    const ASSOC: Self::NonCopyType;\n+    //~^ ERROR interior mutable\n+    //~| HELP consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n+\n+    const AN_INPUT: T = Self::INPUT;\n+    //~^ ERROR interior mutable\n+    //~| ERROR consider requiring `T` to be `Copy`\n+    declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n+}\n+\n+trait Trait2 {\n+    type CopyType: Copy;\n+\n+    const SELF_2: Self;\n+    //~^ ERROR interior mutable\n+    //~| HELP consider requiring `Self` to be `Copy`\n+    const ASSOC_2: Self::CopyType; // (no error)\n+}\n+\n+// we don't lint impl of traits, because an impl has no power to change the interface.\n+impl Trait<u32> for u64 {\n+    type NonCopyType = u16;\n+\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n+    const INTEGER: u64 = 10;\n+    const STRING: String = String::new();\n+    const SELF: Self = 11;\n+    const INPUT: u32 = 12;\n+    const ASSOC: Self::NonCopyType = 13;\n+}\n+\n+struct Local<T, U>(T, U);\n+\n+impl<T: Trait2 + Trait<u32>, U: Trait2> Local<T, U> {\n+    const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n+    const COW: Cow<'static, str> = Cow::Borrowed(\"tuvwxy\");\n+    const T_SELF: T = T::SELF_2;\n+    const U_SELF: U = U::SELF_2;\n+    //~^ ERROR interior mutable\n+    //~| HELP consider requiring `U` to be `Copy`\n+    const T_ASSOC: T::NonCopyType = T::ASSOC;\n+    //~^ ERROR interior mutable\n+    //~| HELP consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n+    const U_ASSOC: U::CopyType = U::ASSOC_2;\n+}\n+\n+fn main() {}"}, {"sha": "ca7831618eda6df61ebcf362a37b6ef9abb1db36", "filename": "tests/ui/declare_interior_mutable_const.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.stderr?ref=5b42a76792bd966c9c97a9bb7a1d1ca8863c1e7c", "patch": "@@ -0,0 +1,106 @@\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:9:1\n+   |\n+LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:10:1\n+   |\n+LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:11:1\n+   |\n+LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:16:9\n+   |\n+LL |         const $name: $ty = $e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+   | ------------------------------------------ in this macro invocation\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:40:5\n+   |\n+LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:44:5\n+   |\n+LL |     const INPUT: T;\n+   |     ^^^^^^^^^^^^^-^\n+   |                  |\n+   |                  consider requiring `T` to be `Copy`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:47:5\n+   |\n+LL |     const ASSOC: Self::NonCopyType;\n+   |     ^^^^^^^^^^^^^-----------------^\n+   |                  |\n+   |                  consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:51:5\n+   |\n+LL |     const AN_INPUT: T = Self::INPUT;\n+   |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     consider requiring `T` to be `Copy`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:16:9\n+   |\n+LL |         const $name: $ty = $e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n+   |     ----------------------------------------------- in this macro invocation\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:60:5\n+   |\n+LL |     const SELF_2: Self;\n+   |     ^^^^^^^^^^^^^^----^\n+   |                   |\n+   |                   consider requiring `Self` to be `Copy`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:81:5\n+   |\n+LL |     const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:84:5\n+   |\n+LL |     const U_SELF: U = U::SELF_2;\n+   |     ^^^^^^^^^^^^^^-^^^^^^^^^^^^^\n+   |                   |\n+   |                   consider requiring `U` to be `Copy`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:87:5\n+   |\n+LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n+   |     ^^^^^^^^^^^^^^^--------------^^^^^^^^^^^^\n+   |                    |\n+   |                    consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "c80bf3deb95b9475e72452d3dfdcdb893a80951d", "filename": "tests/ui/non_copy_const.stderr", "status": "removed", "additions": 0, "deletions": 235, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,235 +0,0 @@\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:9:1\n-   |\n-LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-   |\n-   = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:10:1\n-   |\n-LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:11:1\n-   |\n-LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:16:9\n-   |\n-LL |         const $name: $ty = $e;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-   | ------------------------------------------ in this macro invocation\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:40:5\n-   |\n-LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:44:5\n-   |\n-LL |     const INPUT: T;\n-   |     ^^^^^^^^^^^^^-^\n-   |                  |\n-   |                  consider requiring `T` to be `Copy`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:47:5\n-   |\n-LL |     const ASSOC: Self::NonCopyType;\n-   |     ^^^^^^^^^^^^^-----------------^\n-   |                  |\n-   |                  consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:51:5\n-   |\n-LL |     const AN_INPUT: T = Self::INPUT;\n-   |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     consider requiring `T` to be `Copy`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:16:9\n-   |\n-LL |         const $name: $ty = $e;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n-   |     ----------------------------------------------- in this macro invocation\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:60:5\n-   |\n-LL |     const SELF_2: Self;\n-   |     ^^^^^^^^^^^^^^----^\n-   |                   |\n-   |                   consider requiring `Self` to be `Copy`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:81:5\n-   |\n-LL |     const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:84:5\n-   |\n-LL |     const U_SELF: U = U::SELF_2;\n-   |     ^^^^^^^^^^^^^^-^^^^^^^^^^^^^\n-   |                   |\n-   |                   consider requiring `U` to be `Copy`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:87:5\n-   |\n-LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n-   |     ^^^^^^^^^^^^^^^--------------^^^^^^^^^^^^\n-   |                    |\n-   |                    consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:94:5\n-   |\n-LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n-   |     ^^^^^^\n-   |\n-   = note: `#[deny(clippy::borrow_interior_mutable_const)]` on by default\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:95:16\n-   |\n-LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n-   |                ^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:98:22\n-   |\n-LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n-   |                      ^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:99:25\n-   |\n-LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n-   |                         ^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:100:27\n-   |\n-LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n-   |                           ^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:101:26\n-   |\n-LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n-   |                          ^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:112:14\n-   |\n-LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n-   |              ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:113:14\n-   |\n-LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n-   |              ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:114:19\n-   |\n-LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n-   |                   ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:115:14\n-   |\n-LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n-   |              ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:116:13\n-   |\n-LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n-   |             ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:122:13\n-   |\n-LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n-   |             ^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:127:5\n-   |\n-LL |     CELL.set(2); //~ ERROR interior mutability\n-   |     ^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:128:16\n-   |\n-LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n-   |                ^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:141:5\n-   |\n-LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:142:16\n-   |\n-LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n-   |                ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: aborting due to 29 previous errors\n-"}]}