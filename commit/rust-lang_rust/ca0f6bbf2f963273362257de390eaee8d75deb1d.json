{"sha": "ca0f6bbf2f963273362257de390eaee8d75deb1d", "node_id": "C_kwDOAAsO6NoAKGNhMGY2YmJmMmY5NjMyNzMzNjIyNTdkZTM5MGVhZWU4ZDc1ZGViMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T21:02:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T21:02:15Z"}, "message": "Auto merge of #14520 - lowr:fix/unify-variable-fallout, r=Veykril\n\nfix: unify types in `infer_expr_coerce_never()`\n\nFixes #14506\n\n#14506 turned out to be a regression in type inference. `infer_expr_coerce_never()` added in #14251 allows never-to-any coercion but should also perform ordinary type unification in other cases.", "tree": {"sha": "12859e75770ead6e5f0013774cdcdd02b1c9d507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12859e75770ead6e5f0013774cdcdd02b1c9d507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0f6bbf2f963273362257de390eaee8d75deb1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f6bbf2f963273362257de390eaee8d75deb1d", "html_url": "https://github.com/rust-lang/rust/commit/ca0f6bbf2f963273362257de390eaee8d75deb1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f6bbf2f963273362257de390eaee8d75deb1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625a6f37dec0629e8777a3550f5381618c819a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/625a6f37dec0629e8777a3550f5381618c819a3c", "html_url": "https://github.com/rust-lang/rust/commit/625a6f37dec0629e8777a3550f5381618c819a3c"}, {"sha": "5ab4e64a4c3f26f71ae95d673a2de1cd9c09541d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab4e64a4c3f26f71ae95d673a2de1cd9c09541d", "html_url": "https://github.com/rust-lang/rust/commit/5ab4e64a4c3f26f71ae95d673a2de1cd9c09541d"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "d6a205e6086f5e361985fd5015e37c02d9287ef9", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ca0f6bbf2f963273362257de390eaee8d75deb1d", "patch": "@@ -86,10 +86,10 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    pub(super) fn infer_expr_coerce_never(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n+    fn infer_expr_coerce_never(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n         let ty = self.infer_expr_inner(expr, expected);\n         // While we don't allow *arbitrary* coercions here, we *do* allow\n-        // coercions from ! to `expected`.\n+        // coercions from `!` to `expected`.\n         if ty.is_never() {\n             if let Some(adjustments) = self.result.expr_adjustments.get(&expr) {\n                 return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &**adjustments {\n@@ -99,13 +99,22 @@ impl<'a> InferenceContext<'a> {\n                 };\n             }\n \n-            let adj_ty = self.table.new_type_var();\n-            self.write_expr_adj(\n-                expr,\n-                vec![Adjustment { kind: Adjust::NeverToAny, target: adj_ty.clone() }],\n-            );\n-            adj_ty\n+            if let Some(target) = expected.only_has_type(&mut self.table) {\n+                self.coerce(Some(expr), &ty, &target)\n+                    .expect(\"never-to-any coercion should always succeed\")\n+            } else {\n+                ty\n+            }\n         } else {\n+            if let Some(expected_ty) = expected.only_has_type(&mut self.table) {\n+                let could_unify = self.unify(&ty, &expected_ty);\n+                if !could_unify {\n+                    self.result.type_mismatches.insert(\n+                        expr.into(),\n+                        TypeMismatch { expected: expected_ty, actual: ty.clone() },\n+                    );\n+                }\n+            }\n             ty\n         }\n     }"}, {"sha": "be67329fee4417189c42474436427f0151723c74", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=ca0f6bbf2f963273362257de390eaee8d75deb1d", "patch": "@@ -476,7 +476,7 @@ fn infer_adt_pattern() {\n             183..184 'x': usize\n             190..191 'x': usize\n             201..205 'E::B': E\n-            209..212 'foo': {unknown}\n+            209..212 'foo': bool\n             216..217 '1': usize\n             227..231 'E::B': E\n             235..237 '10': usize"}, {"sha": "74c7e3efc058fe53e019d029715ab6e00cb2b7bc", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0f6bbf2f963273362257de390eaee8d75deb1d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=ca0f6bbf2f963273362257de390eaee8d75deb1d", "patch": "@@ -270,7 +270,7 @@ fn infer_std_crash_5() {\n             61..320 '{     ...     }': ()\n             75..79 'name': &{unknown}\n             82..166 'if doe...     }': &{unknown}\n-            85..98 'doesnt_matter': {unknown}\n+            85..98 'doesnt_matter': bool\n             99..128 '{     ...     }': &{unknown}\n             113..118 'first': &{unknown}\n             134..166 '{     ...     }': &{unknown}\n@@ -279,7 +279,7 @@ fn infer_std_crash_5() {\n             181..188 'content': &{unknown}\n             191..313 'if ICE...     }': &{unknown}\n             194..231 'ICE_RE..._VALUE': {unknown}\n-            194..247 'ICE_RE...&name)': {unknown}\n+            194..247 'ICE_RE...&name)': bool\n             241..246 '&name': &&{unknown}\n             242..246 'name': &{unknown}\n             248..276 '{     ...     }': &{unknown}"}]}