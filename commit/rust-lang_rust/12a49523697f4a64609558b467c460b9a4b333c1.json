{"sha": "12a49523697f4a64609558b467c460b9a4b333c1", "node_id": "C_kwDOAAsO6NoAKDEyYTQ5NTIzNjk3ZjRhNjQ2MDk1NThiNDY3YzQ2MGI5YTRiMzMzYzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T07:24:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T07:24:55Z"}, "message": "Suggest associated method on deref types", "tree": {"sha": "a2747757f64b449f534be94e760e2b83183a2877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2747757f64b449f534be94e760e2b83183a2877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a49523697f4a64609558b467c460b9a4b333c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a49523697f4a64609558b467c460b9a4b333c1", "html_url": "https://github.com/rust-lang/rust/commit/12a49523697f4a64609558b467c460b9a4b333c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a49523697f4a64609558b467c460b9a4b333c1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0421444f8fa221864418c57603a4080f974849a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0421444f8fa221864418c57603a4080f974849a4", "html_url": "https://github.com/rust-lang/rust/commit/0421444f8fa221864418c57603a4080f974849a4"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "998405bcbe1cc702629dcefc8bc89b0742a49d84", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/12a49523697f4a64609558b467c460b9a4b333c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a49523697f4a64609558b467c460b9a4b333c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=12a49523697f4a64609558b467c460b9a4b333c1", "patch": "@@ -16,8 +16,8 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n@@ -30,7 +30,7 @@ use rustc_trait_selection::traits::{\n use std::cmp::Ordering;\n use std::iter;\n \n-use super::probe::{Mode, ProbeScope};\n+use super::probe::{IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1069,6 +1069,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                self.check_for_deref_method(&mut err, source, rcvr_ty, item_name);\n+\n                 return Some(err);\n             }\n \n@@ -1651,6 +1653,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn check_for_deref_method(\n+        &self,\n+        err: &mut Diagnostic,\n+        self_source: SelfSource<'tcx>,\n+        rcvr_ty: Ty<'tcx>,\n+        item_name: Ident,\n+    ) {\n+        let SelfSource::QPath(ty) = self_source else { return; };\n+        for (deref_ty, _) in self.autoderef(rustc_span::DUMMY_SP, rcvr_ty).skip(1) {\n+            if let Ok(pick) = self.probe_for_name(\n+                ty.span,\n+                Mode::Path,\n+                item_name,\n+                IsSuggestion(true),\n+                deref_ty,\n+                ty.hir_id,\n+                ProbeScope::TraitsInScope,\n+            ) {\n+                if deref_ty.is_suggestable(self.tcx, true)\n+                    // If this method receives `&self`, then the provided\n+                    // argument _should_ coerce, so it's valid to suggest\n+                    // just changing the path.\n+                    && pick.item.fn_has_self_parameter\n+                    && let Some(self_ty) =\n+                        self.tcx.fn_sig(pick.item.def_id).inputs().skip_binder().get(0)\n+                    && self_ty.is_ref()\n+                {\n+                    let suggested_path = match deref_ty.kind() {\n+                        ty::Bool\n+                        | ty::Char\n+                        | ty::Int(_)\n+                        | ty::Uint(_)\n+                        | ty::Float(_)\n+                        | ty::Adt(_, _)\n+                        | ty::Str\n+                        | ty::Projection(_)\n+                        | ty::Param(_) => format!(\"{deref_ty}\"),\n+                        _ => format!(\"<{deref_ty}>\"),\n+                    };\n+                    err.span_suggestion_verbose(\n+                        ty.span,\n+                        format!(\"the function `{item_name}` is implemented on `{deref_ty}`\"),\n+                        suggested_path,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_note(\n+                        ty.span,\n+                        format!(\"the function `{item_name}` is implemented on `{deref_ty}`\"),\n+                    );\n+                }\n+                return;\n+            }\n+        }\n+    }\n+\n     /// Print out the type for use in value namespace.\n     fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n         match ty.kind() {"}, {"sha": "0281cdb6b37cfda0f2522fff50858379196c1d99", "filename": "src/test/ui/suggestions/deref-path-method.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12a49523697f4a64609558b467c460b9a4b333c1/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a49523697f4a64609558b467c460b9a4b333c1/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs?ref=12a49523697f4a64609558b467c460b9a4b333c1", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let vec = Vec::new();\n+    Vec::contains(&vec, &0);\n+    //~^ ERROR no function or associated item named `contains` found for struct `Vec<_, _>` in the current scope\n+    //~| HELP the function `contains` is implemented on `[_]`\n+}"}, {"sha": "1cc37d61151ca11addc35701d679ce0906243a9d", "filename": "src/test/ui/suggestions/deref-path-method.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12a49523697f4a64609558b467c460b9a4b333c1/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a49523697f4a64609558b467c460b9a4b333c1/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr?ref=12a49523697f4a64609558b467c460b9a4b333c1", "patch": "@@ -0,0 +1,14 @@\n+error[E0599]: no function or associated item named `contains` found for struct `Vec<_, _>` in the current scope\n+  --> $DIR/deref-path-method.rs:3:10\n+   |\n+LL |     Vec::contains(&vec, &0);\n+   |          ^^^^^^^^ function or associated item not found in `Vec<_, _>`\n+   |\n+help: the function `contains` is implemented on `[_]`\n+   |\n+LL |     <[_]>::contains(&vec, &0);\n+   |     ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}