{"sha": "6866bf32343ce784a256cd0b9c7686a560fd8aa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjZiZjMyMzQzY2U3ODRhMjU2Y2QwYjljNzY4NmE1NjBmZDhhYTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T18:20:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T18:20:59Z"}, "message": "Fix merge conflict about `[]` coercions in new tests", "tree": {"sha": "7c089771a7afc22d603377a97a5e702c30ba8b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c089771a7afc22d603377a97a5e702c30ba8b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6866bf32343ce784a256cd0b9c7686a560fd8aa6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6866bf32343ce784a256cd0b9c7686a560fd8aa6", "html_url": "https://github.com/rust-lang/rust/commit/6866bf32343ce784a256cd0b9c7686a560fd8aa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6866bf32343ce784a256cd0b9c7686a560fd8aa6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ba260749bbd30321bcbe755652ef215106719c", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ba260749bbd30321bcbe755652ef215106719c", "html_url": "https://github.com/rust-lang/rust/commit/56ba260749bbd30321bcbe755652ef215106719c"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a17702ac1dcaa0613c1953a9dcadefd0e26ef4f7", "filename": "src/librustc_trans/test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6866bf32343ce784a256cd0b9c7686a560fd8aa6/src%2Flibrustc_trans%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6866bf32343ce784a256cd0b9c7686a560fd8aa6/src%2Flibrustc_trans%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftest.rs?ref=6866bf32343ce784a256cd0b9c7686a560fd8aa6", "patch": "@@ -540,7 +540,7 @@ fn subst_ty_renumber_bound() {\n      * level of binding. This requires adjusting the Debruijn index.\n      */\n \n-    test_env(EMPTY_SOURCE_STR, errors([]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n         // Situation:\n         // Theta = [A -> &'a foo]\n \n@@ -549,7 +549,7 @@ fn subst_ty_renumber_bound() {\n         // t_source = fn(A)\n         let t_source = {\n             let t_param = env.t_param(subst::TypeSpace, 0);\n-            env.t_fn([t_param], env.t_nil())\n+            env.t_fn(&[t_param], env.t_nil())\n         };\n \n         let substs = subst::Substs::new_type(vec![t_rptr_bound1], vec![]);\n@@ -558,7 +558,7 @@ fn subst_ty_renumber_bound() {\n         // t_expected = fn(&'a int)\n         let t_expected = {\n             let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n-            env.t_fn([t_ptr_bound2], env.t_nil())\n+            env.t_fn(&[t_ptr_bound2], env.t_nil())\n         };\n \n         debug!(\"subst_bound: t_source={} substs={} t_substituted={} t_expected={}\",\n@@ -578,7 +578,7 @@ fn subst_ty_renumber_some_bounds() {\n      * level of binding. This requires adjusting the Debruijn index.\n      */\n \n-    test_env(EMPTY_SOURCE_STR, errors([]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n         // Situation:\n         // Theta = [A -> &'a foo]\n \n@@ -587,7 +587,7 @@ fn subst_ty_renumber_some_bounds() {\n         // t_source = (A, fn(A))\n         let t_source = {\n             let t_param = env.t_param(subst::TypeSpace, 0);\n-            env.t_pair(t_param, env.t_fn([t_param], env.t_nil()))\n+            env.t_pair(t_param, env.t_fn(&[t_param], env.t_nil()))\n         };\n \n         let substs = subst::Substs::new_type(vec![t_rptr_bound1], vec![]);\n@@ -598,7 +598,7 @@ fn subst_ty_renumber_some_bounds() {\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n             let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n-            env.t_pair(t_rptr_bound1, env.t_fn([t_rptr_bound2], env.t_nil()))\n+            env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n         };\n \n         debug!(\"subst_bound: t_source={} substs={} t_substituted={} t_expected={}\",\n@@ -618,7 +618,7 @@ fn escaping() {\n      * regions or not.\n      */\n \n-    test_env(EMPTY_SOURCE_STR, errors([]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n         // Situation:\n         // Theta = [A -> &'a foo]\n \n@@ -636,19 +636,19 @@ fn escaping() {\n         // t_fn = fn(A)\n         let t_param = env.t_param(subst::TypeSpace, 0);\n         assert!(!ty::type_has_escaping_regions(t_param));\n-        let t_fn = env.t_fn([t_param], env.t_nil());\n+        let t_fn = env.t_fn(&[t_param], env.t_nil());\n         assert!(!ty::type_has_escaping_regions(t_fn));\n \n         // t_fn = |&int|+'a\n-        let t_fn = env.t_closure([t_rptr_bound1], env.t_nil(), env.re_free(0, 1));\n+        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(), env.re_free(0, 1));\n         assert!(!ty::type_has_escaping_regions(t_fn));\n \n         // t_fn = |&int|+'a (where &int has depth 2)\n-        let t_fn = env.t_closure([t_rptr_bound2], env.t_nil(), env.re_free(0, 1));\n+        let t_fn = env.t_closure(&[t_rptr_bound2], env.t_nil(), env.re_free(0, 1));\n         assert!(ty::type_has_escaping_regions(t_fn));\n \n         // t_fn = |&int|+&int\n-        let t_fn = env.t_closure([t_rptr_bound1], env.t_nil(),\n+        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(),\n                                  env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1)));\n         assert!(ty::type_has_escaping_regions(t_fn));\n     })\n@@ -661,13 +661,13 @@ fn subst_region_renumber_region() {\n      * for an early-bound region is a late-bound region.\n      */\n \n-    test_env(EMPTY_SOURCE_STR, errors([]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n         let re_bound1 = env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1));\n \n         // type t_source<'a> = fn(&'a int)\n         let t_source = {\n             let re_early = env.re_early_bound(subst::TypeSpace, 0, \"'a\");\n-            env.t_fn([env.t_rptr(re_early)], env.t_nil())\n+            env.t_fn(&[env.t_rptr(re_early)], env.t_nil())\n         };\n \n         let substs = subst::Substs::new_type(vec![], vec![re_bound1]);\n@@ -678,7 +678,7 @@ fn subst_region_renumber_region() {\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n             let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n-            env.t_fn([t_rptr_bound2], env.t_nil())\n+            env.t_fn(&[t_rptr_bound2], env.t_nil())\n         };\n \n         debug!(\"subst_bound: t_source={} substs={} t_substituted={} t_expected={}\","}]}