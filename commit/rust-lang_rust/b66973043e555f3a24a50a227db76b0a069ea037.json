{"sha": "b66973043e555f3a24a50a227db76b0a069ea037", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Njk3MzA0M2U1NTVmM2EyNGE1MGEyMjdkYjc2YjBhMDY5ZWEwMzc=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-03T23:10:33Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T17:59:01Z"}, "message": "Don't use max_slice_length when subtracting from VarLenSlice\n\nThis alters error messages slightly, but that'll be improved later", "tree": {"sha": "c101f8a9b49c1716696c117d1b77d76ace2fa5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c101f8a9b49c1716696c117d1b77d76ace2fa5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66973043e555f3a24a50a227db76b0a069ea037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66973043e555f3a24a50a227db76b0a069ea037", "html_url": "https://github.com/rust-lang/rust/commit/b66973043e555f3a24a50a227db76b0a069ea037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66973043e555f3a24a50a227db76b0a069ea037/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909ec370286b193f67e738e7b9d6437cf32c014c", "url": "https://api.github.com/repos/rust-lang/rust/commits/909ec370286b193f67e738e7b9d6437cf32c014c", "html_url": "https://github.com/rust-lang/rust/commit/909ec370286b193f67e738e7b9d6437cf32c014c"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "902d9b610ce3339be63f650403518cf8f099de1a", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b66973043e555f3a24a50a227db76b0a069ea037/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66973043e555f3a24a50a227db76b0a069ea037/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b66973043e555f3a24a50a227db76b0a069ea037", "patch": "@@ -658,7 +658,6 @@ impl<'tcx> Constructor<'tcx> {\n     // anything in `other_ctors`.\n     fn subtract_ctors(\n         &self,\n-        pcx: PatCtxt<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         other_ctors: &Vec<Constructor<'tcx>>,\n@@ -681,11 +680,7 @@ impl<'tcx> Constructor<'tcx> {\n                 if other_ctors.iter().any(overlaps) { vec![] } else { vec![self.clone()] }\n             }\n             VarLenSlice(_) => {\n-                let mut remaining_ctors = if let VarLenSlice(len) = self {\n-                    (*len..pcx.max_slice_length + 1).map(FixedLenSlice).collect()\n-                } else {\n-                    vec![self.clone()]\n-                };\n+                let mut remaining_ctors = vec![self.clone()];\n \n                 // For each used ctor, subtract from the current set of constructors.\n                 // Naming: we remove the \"neg\" constructors from the \"pos\" ones.\n@@ -704,6 +699,23 @@ impl<'tcx> Constructor<'tcx> {\n                                         smallvec![pos_ctor]\n                                     }\n                                 }\n+                                (VarLenSlice(pos_len), VarLenSlice(neg_len)) => {\n+                                    if neg_len <= pos_len {\n+                                        smallvec![]\n+                                    } else {\n+                                        (*pos_len..*neg_len).map(FixedLenSlice).collect()\n+                                    }\n+                                }\n+                                (VarLenSlice(pos_len), FixedLenSlice(neg_len)) => {\n+                                    if neg_len < pos_len {\n+                                        smallvec![pos_ctor]\n+                                    } else {\n+                                        (*pos_len..*neg_len)\n+                                            .map(FixedLenSlice)\n+                                            .chain(Some(VarLenSlice(neg_len + 1)))\n+                                            .collect()\n+                                    }\n+                                }\n                                 _ if pos_ctor == *neg_ctor => smallvec![],\n                                 _ => smallvec![pos_ctor],\n                             }\n@@ -1456,7 +1468,6 @@ impl<'tcx> IntRange<'tcx> {\n \n // A struct to compute a set of constructors equivalent to `all_ctors \\ used_ctors`.\n struct MissingConstructors<'tcx> {\n-    pcx: PatCtxt<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     all_ctors: Vec<Constructor<'tcx>>,\n@@ -1465,13 +1476,12 @@ struct MissingConstructors<'tcx> {\n \n impl<'tcx> MissingConstructors<'tcx> {\n     fn new(\n-        pcx: PatCtxt<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         all_ctors: Vec<Constructor<'tcx>>,\n         used_ctors: Vec<Constructor<'tcx>>,\n     ) -> Self {\n-        MissingConstructors { pcx, tcx, param_env, all_ctors, used_ctors }\n+        MissingConstructors { tcx, param_env, all_ctors, used_ctors }\n     }\n \n     fn into_inner(self) -> (Vec<Constructor<'tcx>>, Vec<Constructor<'tcx>>) {\n@@ -1490,7 +1500,7 @@ impl<'tcx> MissingConstructors<'tcx> {\n     /// Iterate over all_ctors \\ used_ctors\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Constructor<'tcx>> + Captures<'a> {\n         self.all_ctors.iter().flat_map(move |req_ctor| {\n-            req_ctor.subtract_ctors(self.pcx, self.tcx, self.param_env, &self.used_ctors)\n+            req_ctor.subtract_ctors(self.tcx, self.param_env, &self.used_ctors)\n         })\n     }\n }\n@@ -1633,8 +1643,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n         // non-wildcard patterns in the current column. To determine if\n         // the set is empty, we can check that `.peek().is_none()`, so\n         // we only fully construct them on-demand, because they're rarely used and can be big.\n-        let missing_ctors =\n-            MissingConstructors::new(pcx, cx.tcx, cx.param_env, all_ctors, used_ctors);\n+        let missing_ctors = MissingConstructors::new(cx.tcx, cx.param_env, all_ctors, used_ctors);\n \n         debug!(\n             \"missing_ctors.empty()={:#?} is_privately_empty={:#?} is_declared_nonexhaustive={:#?}\","}, {"sha": "9938c9c284d1c8e584e0f3ada6ecca3dcb0e4ff8", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b66973043e555f3a24a50a227db76b0a069ea037/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b66973043e555f3a24a50a227db76b0a069ea037/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=b66973043e555f3a24a50a227db76b0a069ea037", "patch": "@@ -6,11 +6,11 @@ LL |     match buf {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 3 more not covered\n+error[E0004]: non-exhaustive patterns: `&[]` not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n    |\n LL |     match buf {\n-   |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 3 more not covered\n+   |           ^^^ pattern `&[]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}