{"sha": "28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "node_id": "C_kwDOAAsO6NoAKDI4YTI5MjgyZjZkZGUyZTRhYmE2ZTFlNGNmZWE1Yzk0MzBhMDAyMTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T21:18:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T21:18:49Z"}, "message": "Auto merge of #109162 - ozkanonur:extend_detect_src_and_out_test, r=jyn514\n\nextend `detect_src_and_out` test\n\n> I was thinking about the following cases when I wrote the comment in #109055\n>\n> 1. Running bootstrap from the source root.\n> 2. Running from a subdirectory of the source root.\n> 3. Running from outside the source root.\n> 4. Running on a different machine from where bootstrap was compiled (which will be important > for #107812). You can mostly replicate this by renaming the source root so it no longer exists on disk.\n> 5. Running with `--build-dir`.\n> 6. Running with `$RUST_BOOTSTRAP_CONFIG` set in the environment and `build-dir` set in the file.\n\nTested all the topics mentioned above. All worked fine. The test is now also covers if build dir is manually specified in config.\n\nr? `@jyn514`\n\nhelps #109120 partially", "tree": {"sha": "f1f1e43fc8df65cc1901be50ad6325693a892267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f1e43fc8df65cc1901be50ad6325693a892267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "html_url": "https://github.com/rust-lang/rust/commit/28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a29282f6dde2e4aba6e1e4cfea5c9430a00217/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de74dab880447f5227030b261dbd0f2bc4f32dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/de74dab880447f5227030b261dbd0f2bc4f32dba", "html_url": "https://github.com/rust-lang/rust/commit/de74dab880447f5227030b261dbd0f2bc4f32dba"}, {"sha": "925a3040c7f0a84885a91ba8919d1f6d7516302a", "url": "https://api.github.com/repos/rust-lang/rust/commits/925a3040c7f0a84885a91ba8919d1f6d7516302a", "html_url": "https://github.com/rust-lang/rust/commit/925a3040c7f0a84885a91ba8919d1f6d7516302a"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "50569eb4f3737309245d3f7dd7146da2fd0c6ef4", "filename": "src/bootstrap/config/tests.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/28a29282f6dde2e4aba6e1e4cfea5c9430a00217/src%2Fbootstrap%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a29282f6dde2e4aba6e1e4cfea5c9430a00217/src%2Fbootstrap%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig%2Ftests.rs?ref=28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "patch": "@@ -33,35 +33,58 @@ fn download_ci_llvm() {\n     ));\n }\n \n+// FIXME(ozkanonur): extend scope of the test\n+// refs:\n+//   - https://github.com/rust-lang/rust/issues/109120\n+//   - https://github.com/rust-lang/rust/pull/109162#issuecomment-1496782487\n #[test]\n fn detect_src_and_out() {\n-    let cfg = parse(\"\");\n+    fn test(cfg: Config, build_dir: Option<&str>) {\n+        // This will bring absolute form of `src/bootstrap` path\n+        let current_dir = std::env::current_dir().unwrap();\n \n-    // This will bring absolute form of `src/bootstrap` path\n-    let current_dir = std::env::current_dir().unwrap();\n+        // get `src` by moving into project root path\n+        let expected_src = current_dir.ancestors().nth(2).unwrap();\n+        assert_eq!(&cfg.src, expected_src);\n \n-    // get `src` by moving into project root path\n-    let expected_src = current_dir.ancestors().nth(2).unwrap();\n+        // Sanity check for `src`\n+        let manifest_dir = Path::new(env!(\"CARGO_MANIFEST_DIR\"));\n+        let expected_src = manifest_dir.ancestors().nth(2).unwrap();\n+        assert_eq!(&cfg.src, expected_src);\n \n-    assert_eq!(&cfg.src, expected_src);\n+        // test if build-dir was manually given in config.toml\n+        if let Some(custom_build_dir) = build_dir {\n+            assert_eq!(&cfg.out, Path::new(custom_build_dir));\n+        }\n+        // test the native bootstrap way\n+        else {\n+            // This should bring output path of bootstrap in absolute form\n+            let cargo_target_dir = env::var_os(\"CARGO_TARGET_DIR\").expect(\n+                \"CARGO_TARGET_DIR must been provided for the test environment from bootstrap\",\n+            );\n \n-    // This should bring output path of bootstrap in absolute form\n-    let cargo_target_dir = env::var_os(\"CARGO_TARGET_DIR\")\n-        .expect(\"CARGO_TARGET_DIR must been provided for the test environment from bootstrap\");\n+            // Move to `build` from `build/bootstrap`\n+            let expected_out = Path::new(&cargo_target_dir).parent().unwrap();\n+            assert_eq!(&cfg.out, expected_out);\n \n-    // Move to `build` from `build/bootstrap`\n-    let expected_out = Path::new(&cargo_target_dir).parent().unwrap();\n-    assert_eq!(&cfg.out, expected_out);\n+            let args: Vec<String> = env::args().collect();\n \n-    let args: Vec<String> = env::args().collect();\n+            // Another test for `out` as a sanity check\n+            //\n+            // This will bring something similar to:\n+            //     `{build-dir}/bootstrap/debug/deps/bootstrap-c7ee91d5661e2804`\n+            // `{build-dir}` can be anywhere, not just in the rust project directory.\n+            let dep = Path::new(args.first().unwrap());\n+            let expected_out = dep.ancestors().nth(4).unwrap();\n \n-    // Another test for `out` as a sanity check\n-    //\n-    // This will bring something similar to:\n-    //     `{config_toml_place}/build/bootstrap/debug/deps/bootstrap-c7ee91d5661e2804`\n-    // `{config_toml_place}` can be anywhere, not just in the rust project directory.\n-    let dep = Path::new(args.first().unwrap());\n-    let expected_out = dep.ancestors().nth(4).unwrap();\n+            assert_eq!(&cfg.out, expected_out);\n+        }\n+    }\n+\n+    test(parse(\"\"), None);\n \n-    assert_eq!(&cfg.out, expected_out);\n+    {\n+        let build_dir = if cfg!(windows) { Some(\"C:\\\\tmp\") } else { Some(\"/tmp\") };\n+        test(parse(\"build.build-dir = \\\"/tmp\\\"\"), build_dir);\n+    }\n }"}]}