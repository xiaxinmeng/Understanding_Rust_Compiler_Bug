{"sha": "5557596926b493f1fdb85aef6bd78941f231f962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NTc1OTY5MjZiNDkzZjFmZGI4NWFlZjZiZDc4OTQxZjIzMWY5NjI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-06T10:11:52Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:24Z"}, "message": "move option_map_or_none to its own module", "tree": {"sha": "b79be528bcdd753bb5962472b8d675311c039d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79be528bcdd753bb5962472b8d675311c039d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5557596926b493f1fdb85aef6bd78941f231f962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5557596926b493f1fdb85aef6bd78941f231f962", "html_url": "https://github.com/rust-lang/rust/commit/5557596926b493f1fdb85aef6bd78941f231f962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5557596926b493f1fdb85aef6bd78941f231f962/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbed852f6fb82aa85f72fc8b2aeffdb90f409495", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbed852f6fb82aa85f72fc8b2aeffdb90f409495", "html_url": "https://github.com/rust-lang/rust/commit/bbed852f6fb82aa85f72fc8b2aeffdb90f409495"}], "stats": {"total": 151, "additions": 80, "deletions": 71}, "files": [{"sha": "0c67c3b892b24d47a95a205d91d6e766c500a945", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 71, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5557596926b493f1fdb85aef6bd78941f231f962/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557596926b493f1fdb85aef6bd78941f231f962/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5557596926b493f1fdb85aef6bd78941f231f962", "patch": "@@ -30,6 +30,7 @@ mod map_collect_result_unit;\n mod map_flatten;\n mod ok_expect;\n mod option_as_ref_deref;\n+mod option_map_or_none;\n mod option_map_unwrap_or;\n mod search_is_some;\n mod single_char_insert_string;\n@@ -1692,7 +1693,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"unwrap_or\");\n                 }\n             },\n-            [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n+            [\"map_or\", ..] => option_map_or_none::check(cx, expr, arg_lists[0]),\n             [\"and_then\", ..] => {\n                 let biom_option_linted = bind_instead_of_map::OptionAndThenSome::check(cx, expr, arg_lists[0]);\n                 let biom_result_linted = bind_instead_of_map::ResultAndThenOk::check(cx, expr, arg_lists[0]);\n@@ -2431,76 +2432,6 @@ fn lint_map_unwrap_or_else<'tcx>(\n     false\n }\n \n-/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n-fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map_or_args: &'tcx [hir::Expr<'_>]) {\n-    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_or_args[0]), sym::option_type);\n-    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_or_args[0]), sym::result_type);\n-\n-    // There are two variants of this `map_or` lint:\n-    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n-    // (2) using `map_or` as a combinator instead of `and_then`\n-    //\n-    // (For this lint) we don't care if any other type calls `map_or`\n-    if !is_option && !is_result {\n-        return;\n-    }\n-\n-    let (lint_name, msg, instead, hint) = {\n-        let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n-            match_qpath(qpath, &paths::OPTION_NONE)\n-        } else {\n-            return;\n-        };\n-\n-        if !default_arg_is_none {\n-            // nothing to lint!\n-            return;\n-        }\n-\n-        let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n-            match_qpath(qpath, &paths::OPTION_SOME)\n-        } else {\n-            false\n-        };\n-\n-        if is_option {\n-            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n-                       `and_then(..)` instead\";\n-            (\n-                OPTION_MAP_OR_NONE,\n-                msg,\n-                \"try using `and_then` instead\",\n-                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n-            )\n-        } else if f_arg_is_some {\n-            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n-                       `ok()` instead\";\n-            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            (\n-                RESULT_MAP_OR_INTO_OPTION,\n-                msg,\n-                \"try using `ok` instead\",\n-                format!(\"{0}.ok()\", self_snippet),\n-            )\n-        } else {\n-            // nothing to lint!\n-            return;\n-        }\n-    };\n-\n-    span_lint_and_sugg(\n-        cx,\n-        lint_name,\n-        expr.span,\n-        msg,\n-        instead,\n-        hint,\n-        Applicability::MachineApplicable,\n-    );\n-}\n-\n /// Used for `lint_binary_expr_with_method_call`.\n #[derive(Copy, Clone)]\n struct BinaryExprInfo<'a> {"}, {"sha": "64f6ebc5062ef3ef208c2190f7b50891702ffaaf", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5557596926b493f1fdb85aef6bd78941f231f962/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557596926b493f1fdb85aef6bd78941f231f962/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=5557596926b493f1fdb85aef6bd78941f231f962", "patch": "@@ -0,0 +1,78 @@\n+use crate::utils::{is_type_diagnostic_item, match_qpath, paths, snippet, span_lint_and_sugg};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::OPTION_MAP_OR_NONE;\n+use super::RESULT_MAP_OR_INTO_OPTION;\n+\n+/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map_or_args: &'tcx [hir::Expr<'_>]) {\n+    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_or_args[0]), sym::option_type);\n+    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_or_args[0]), sym::result_type);\n+\n+    // There are two variants of this `map_or` lint:\n+    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n+    // (2) using `map_or` as a combinator instead of `and_then`\n+    //\n+    // (For this lint) we don't care if any other type calls `map_or`\n+    if !is_option && !is_result {\n+        return;\n+    }\n+\n+    let (lint_name, msg, instead, hint) = {\n+        let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n+            match_qpath(qpath, &paths::OPTION_NONE)\n+        } else {\n+            return;\n+        };\n+\n+        if !default_arg_is_none {\n+            // nothing to lint!\n+            return;\n+        }\n+\n+        let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n+            match_qpath(qpath, &paths::OPTION_SOME)\n+        } else {\n+            false\n+        };\n+\n+        if is_option {\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n+            let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                       `and_then(..)` instead\";\n+            (\n+                OPTION_MAP_OR_NONE,\n+                msg,\n+                \"try using `and_then` instead\",\n+                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            )\n+        } else if f_arg_is_some {\n+            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                       `ok()` instead\";\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            (\n+                RESULT_MAP_OR_INTO_OPTION,\n+                msg,\n+                \"try using `ok` instead\",\n+                format!(\"{0}.ok()\", self_snippet),\n+            )\n+        } else {\n+            // nothing to lint!\n+            return;\n+        }\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint_name,\n+        expr.span,\n+        msg,\n+        instead,\n+        hint,\n+        Applicability::MachineApplicable,\n+    );\n+}"}]}