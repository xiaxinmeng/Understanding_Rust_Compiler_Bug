{"sha": "036688f875cf2a1cf848c5f7ba8ed5809cbad46f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjY4OGY4NzVjZjJhMWNmODQ4YzVmN2JhOGVkNTgwOWNiYWQ0NmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-25T21:58:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T21:58:57Z"}, "message": "Rollup merge of #72451 - ecstatic-morse:nrvo-type-mismatch, r=matthewjasper\n\nPerform MIR NRVO even if types don't match\n\nThis is the most straightforward way to resolve #72428, but it could cause problems in codegen since the type of `_0` may no longer match the return type of the body.", "tree": {"sha": "aae1d80d607406cb9c66737bc1553ec201441d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae1d80d607406cb9c66737bc1553ec201441d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036688f875cf2a1cf848c5f7ba8ed5809cbad46f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezD+iCRBK7hj4Ov3rIwAAdHIIAALgmq5TlyvYwS1xBsowR3Ys\nQbXYtBY2LApEnRYgt2jUEmvaEjX0yGvRHVYnCx9QkqwR2sLcOOSyRrfwr6HBPj/8\nv6oy+p5OKhJ3UIr1Q66jiQiZXLKKVsg6nT6+lU0hG87Al/akWDMxU2CwaceP2uCt\n63sZQtZcQdUz3HaPi/vZo4ekhrhrVwxSsmnR3JQb6OeEdgR3gIP/TqvtNJ72PDHi\nfYwU2yL/aiJ4WkJph4K1Ny/bo18XboFcfxVjSOGH+Uty25/7NoZ96lJP65EjlWW0\nzawQ9mZfupn2r/kUmBnFWpvy44W3Joq9ETEJzJX7wMHdE9l6TgzaLvRUBivdEOM=\n=OqNu\n-----END PGP SIGNATURE-----\n", "payload": "tree aae1d80d607406cb9c66737bc1553ec201441d0e\nparent a7ff5a00775ca8db59077307b0b9eb706f907941\nparent d24ba6d1243db648eac365eaf637264e6d04d5f1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590443937 +0200\ncommitter GitHub <noreply@github.com> 1590443937 +0200\n\nRollup merge of #72451 - ecstatic-morse:nrvo-type-mismatch, r=matthewjasper\n\nPerform MIR NRVO even if types don't match\n\nThis is the most straightforward way to resolve #72428, but it could cause problems in codegen since the type of `_0` may no longer match the return type of the body.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036688f875cf2a1cf848c5f7ba8ed5809cbad46f", "html_url": "https://github.com/rust-lang/rust/commit/036688f875cf2a1cf848c5f7ba8ed5809cbad46f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036688f875cf2a1cf848c5f7ba8ed5809cbad46f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ff5a00775ca8db59077307b0b9eb706f907941", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ff5a00775ca8db59077307b0b9eb706f907941", "html_url": "https://github.com/rust-lang/rust/commit/a7ff5a00775ca8db59077307b0b9eb706f907941"}, {"sha": "d24ba6d1243db648eac365eaf637264e6d04d5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24ba6d1243db648eac365eaf637264e6d04d5f1", "html_url": "https://github.com/rust-lang/rust/commit/d24ba6d1243db648eac365eaf637264e6d04d5f1"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "ffad1ebea005bfe1eb8d01b5cddca8618c04f5b7", "filename": "src/librustc_mir/transform/nrvo.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/036688f875cf2a1cf848c5f7ba8ed5809cbad46f/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036688f875cf2a1cf848c5f7ba8ed5809cbad46f/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs?ref=036688f875cf2a1cf848c5f7ba8ed5809cbad46f", "patch": "@@ -44,18 +44,6 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n             }\n         };\n \n-        // Sometimes, the return place is assigned a local of a different but coercable type, for\n-        // example `&T` instead of `&mut T`. Overwriting the `LocalInfo` for the return place would\n-        // result in it having an incorrect type. Although this doesn't seem to cause a problem in\n-        // codegen, bail out anyways since it happens so rarely.\n-        let ret_ty = body.local_decls[mir::RETURN_PLACE].ty;\n-        let assigned_ty = body.local_decls[returned_local].ty;\n-        if ret_ty != assigned_ty {\n-            debug!(\"`{:?}` was eligible for NRVO but for type mismatch\", src.def_id());\n-            debug!(\"typeof(_0) != typeof({:?}); {:?} != {:?}\", returned_local, ret_ty, assigned_ty);\n-            return;\n-        }\n-\n         debug!(\n             \"`{:?}` was eligible for NRVO, making {:?} the return place\",\n             src.def_id(),\n@@ -72,6 +60,12 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n         // Overwrite the debuginfo of `_0` with that of the renamed local.\n         let (renamed_decl, ret_decl) =\n             body.local_decls.pick2_mut(returned_local, mir::RETURN_PLACE);\n+\n+        // Sometimes, the return place is assigned a local of a different but coercable type, for\n+        // example `&mut T` instead of `&T`. Overwriting the `LocalInfo` for the return place means\n+        // its type may no longer match the return type of its function. This doesn't cause a\n+        // problem in codegen because these two types are layout-compatible, but may be unexpected.\n+        debug!(\"_0: {:?} = {:?}: {:?}\", ret_decl.ty, returned_local, renamed_decl.ty);\n         ret_decl.clone_from(renamed_decl);\n \n         // The return place is always mutable."}]}