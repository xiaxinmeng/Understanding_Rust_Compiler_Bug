{"sha": "fc055281a5c1c81a6df0e4c10cde71e4799bd329", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDU1MjgxYTVjMWM4MWE2ZGYwZTRjMTBjZGU3MWU0Nzk5YmQzMjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T08:48:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T08:49:16Z"}, "message": "Minor cleanup", "tree": {"sha": "9bb7d02b5cf78fa43650110c1c7189343b144d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb7d02b5cf78fa43650110c1c7189343b144d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc055281a5c1c81a6df0e4c10cde71e4799bd329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc055281a5c1c81a6df0e4c10cde71e4799bd329", "html_url": "https://github.com/rust-lang/rust/commit/fc055281a5c1c81a6df0e4c10cde71e4799bd329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc055281a5c1c81a6df0e4c10cde71e4799bd329/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0646be29e80db3d8ab3a797b9fadd6c8b2c6e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0646be29e80db3d8ab3a797b9fadd6c8b2c6e1", "html_url": "https://github.com/rust-lang/rust/commit/aa0646be29e80db3d8ab3a797b9fadd6c8b2c6e1"}], "stats": {"total": 91, "additions": 44, "deletions": 47}, "files": [{"sha": "2fd4ccb10902bab934b41e976f6b3780400bb67f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -550,7 +550,7 @@ where\n     }\n \n     fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(self.into())\n+        db.body(self.into())\n     }\n \n     fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n@@ -564,7 +564,7 @@ impl HasBody for DefWithBody {\n     }\n \n     fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(self)\n+        db.body(self)\n     }\n \n     fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n@@ -666,7 +666,7 @@ impl Function {\n     }\n \n     pub fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(self.into())\n+        db.body(self.into())\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n@@ -1079,7 +1079,7 @@ pub struct Local {\n \n impl Local {\n     pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n-        let body = db.body_hir(self.parent);\n+        let body = db.body(self.parent);\n         match &body[self.pat_id] {\n             Pat::Bind { name, .. } => Some(name.clone()),\n             _ => None,\n@@ -1091,7 +1091,7 @@ impl Local {\n     }\n \n     pub fn is_mut(self, db: &impl HirDatabase) -> bool {\n-        let body = db.body_hir(self.parent);\n+        let body = db.body(self.parent);\n         match &body[self.pat_id] {\n             Pat::Bind { mode, .. } => match mode {\n                 BindingAnnotation::Mutable | BindingAnnotation::RefMut => true,"}, {"sha": "abf4ae40236b8fcd675d657a22637e0845b2994c", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -8,6 +8,7 @@ use ra_syntax::SmolStr;\n \n use crate::{\n     debug::HirDebugDatabase,\n+    expr::{Body, BodySourceMap},\n     generics::{GenericDef, GenericParams},\n     ids,\n     impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n@@ -112,14 +113,11 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(crate::ty::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDef) -> Substs;\n \n-    #[salsa::invoke(crate::expr::body_with_source_map_query)]\n-    fn body_with_source_map(\n-        &self,\n-        def: DefWithBody,\n-    ) -> (Arc<crate::expr::Body>, Arc<crate::expr::BodySourceMap>);\n+    #[salsa::invoke(Body::body_with_source_map_query)]\n+    fn body_with_source_map(&self, def: DefWithBody) -> (Arc<Body>, Arc<BodySourceMap>);\n \n-    #[salsa::invoke(crate::expr::body_hir_query)]\n-    fn body_hir(&self, def: DefWithBody) -> Arc<crate::expr::Body>;\n+    #[salsa::invoke(Body::body_query)]\n+    fn body(&self, def: DefWithBody) -> Arc<Body>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "53da7f0bf04b53e2bf858726ea6f6449df5ef243", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -75,6 +75,36 @@ pub struct BodySourceMap {\n }\n \n impl Body {\n+    pub(crate) fn body_with_source_map_query(\n+        db: &impl HirDatabase,\n+        def: DefWithBody,\n+    ) -> (Arc<Body>, Arc<BodySourceMap>) {\n+        let mut params = None;\n+\n+        let (file_id, body) = match def {\n+            DefWithBody::Function(f) => {\n+                let src = f.source(db);\n+                params = src.ast.param_list();\n+                (src.file_id, src.ast.body().map(ast::Expr::from))\n+            }\n+            DefWithBody::Const(c) => {\n+                let src = c.source(db);\n+                (src.file_id, src.ast.body())\n+            }\n+            DefWithBody::Static(s) => {\n+                let src = s.source(db);\n+                (src.file_id, src.ast.body())\n+            }\n+        };\n+\n+        let (body, source_map) = lower::lower(db, def.resolver(db), file_id, def, params, body);\n+        (Arc::new(body), Arc::new(source_map))\n+    }\n+\n+    pub(crate) fn body_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n+        db.body_with_source_map(def).0\n+    }\n+\n     pub fn params(&self) -> &[PatId] {\n         &self.params\n     }\n@@ -542,34 +572,3 @@ impl Pat {\n         }\n     }\n }\n-\n-// Queries\n-pub(crate) fn body_with_source_map_query(\n-    db: &impl HirDatabase,\n-    def: DefWithBody,\n-) -> (Arc<Body>, Arc<BodySourceMap>) {\n-    let mut params = None;\n-\n-    let (file_id, body) = match def {\n-        DefWithBody::Function(f) => {\n-            let src = f.source(db);\n-            params = src.ast.param_list();\n-            (src.file_id, src.ast.body().map(ast::Expr::from))\n-        }\n-        DefWithBody::Const(c) => {\n-            let src = c.source(db);\n-            (src.file_id, src.ast.body())\n-        }\n-        DefWithBody::Static(s) => {\n-            let src = s.source(db);\n-            (src.file_id, src.ast.body())\n-        }\n-    };\n-\n-    let (body, source_map) = lower::lower(db, def.resolver(db), file_id, def, params, body);\n-    (Arc::new(body), Arc::new(source_map))\n-}\n-\n-pub(crate) fn body_hir_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n-    db.body_with_source_map(def).0\n-}"}, {"sha": "0e49a28d6c32be51534e89997c1e27441932e02a", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -46,7 +46,7 @@ pub(crate) struct ScopeData {\n \n impl ExprScopes {\n     pub(crate) fn expr_scopes_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<ExprScopes> {\n-        let body = db.body_hir(def);\n+        let body = db.body(def);\n         let res = ExprScopes::new(body);\n         Arc::new(res)\n     }"}, {"sha": "de322dd523ff4cc1e1143618f9bf555e93c314ac", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -714,7 +714,7 @@ fn closure_fn_trait_impl_datum(\n     let fn_once_trait = get_fn_trait(db, krate, super::FnTrait::FnOnce)?;\n     let trait_ = get_fn_trait(db, krate, data.fn_trait)?; // get corresponding fn trait\n \n-    let num_args: u16 = match &db.body_hir(data.def)[data.expr] {\n+    let num_args: u16 = match &db.body(data.def)[data.expr] {\n         crate::expr::Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);"}, {"sha": "010b45141fdca345d73bce4b277b531ac03395e8", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc055281a5c1c81a6df0e4c10cde71e4799bd329/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=fc055281a5c1c81a6df0e4c10cde71e4799bd329", "patch": "@@ -276,7 +276,7 @@ impl RootDatabase {\n \n         self.query(hir::db::ExprScopesQuery).sweep(sweep);\n         self.query(hir::db::InferQuery).sweep(sweep);\n-        self.query(hir::db::BodyHirQuery).sweep(sweep);\n+        self.query(hir::db::BodyQuery).sweep(sweep);\n     }\n \n     pub(crate) fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n@@ -333,7 +333,7 @@ impl RootDatabase {\n             hir::db::GenericPredicatesQuery\n             hir::db::GenericDefaultsQuery\n             hir::db::BodyWithSourceMapQuery\n-            hir::db::BodyHirQuery\n+            hir::db::BodyQuery\n             hir::db::ImplsInCrateQuery\n             hir::db::ImplsForTraitQuery\n             hir::db::AssociatedTyDataQuery"}]}