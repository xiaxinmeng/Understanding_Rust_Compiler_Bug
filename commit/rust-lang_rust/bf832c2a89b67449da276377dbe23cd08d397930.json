{"sha": "bf832c2a89b67449da276377dbe23cd08d397930", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODMyYzJhODliNjc0NDlkYTI3NjM3N2RiZTIzY2QwOGQzOTc5MzA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-12T13:32:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-12T13:32:29Z"}, "message": "Rollup merge of #50602 - Screwtapello:update-canonicalize-docs, r=cramertj\n\nUpdate canonicalize docs\n\nI was recently working with file-paths in Rust, and I felt let down by the `std::fs::canonicalize` docs, so I figured I should submit a PR with some suggestions.\n\nI was looking for a method to turn a relative path into an absolute path. The `canonicalize` docs didn't mention the words \"relative\" or \"absolute\", but they did mention resolving symlinks (which is a kind of canonicalisation and does not imply converting to absolute), so I assumed that's all it did. To remedy this, I've added the word \"absolute\" to the description of both `std::fs::canonicalize` and `std::path::Path::canonicalize`.\n\nAfter calling `canonicalize` on Windows, I ran into a bunch of other problems I would not have expected from the function's behaviour on Linux. Specifically, if you call `canonicalize` on a path:\n\n  - it's allowed to be much longer than it otherwise would\n  - `.join(\"a/slash/delimited/path\")` gives you a broken path that Windows can't use, where the same operation would have worked perfectly without `canonicalize` (if the path were short enough)\n  - the resulting path may confuse other Windows programs if you pass it to them on the command-line, or write it to a config file that they read, etc.\n\n...so I tried to summarize those behaviours too.\n\nIf I understand correctly, those behaviours are a side-effect of calling `GetFinalPathNameByHandle`, and the documentation says `canonicalize` might not call that function in future, so maybe those side-effects shouldn't be part of the function's documentation. However, I bet there's a lot of applications deliberately calling `canonicalize` just for the path-length-extension alone, so that particular side-effect is de-facto part of the `canonicalize` interface.", "tree": {"sha": "9b794eb4b63f2b8007c0ccec136021624ef7f7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b794eb4b63f2b8007c0ccec136021624ef7f7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf832c2a89b67449da276377dbe23cd08d397930", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9uztCRBK7hj4Ov3rIwAAdHIIAKyw4uLxhK922HANH7QYjkQn\n97qdcmat5SOJWcP0uGReEfalKiGdHqAL0iBSQlhEJlpl7xqi/QHnfonZP+DHJcIT\n7vUQjkCewvvZnVLSK2BFbBbbJipR9G/5s0VDxQWrGRd+1bfhKnbr+/uhqFUYSL7/\naFqoYMOn2yksPaExsp6w65uuzOMBG/bPv4eVLhURfZsvIODoCueiTJjwhD4mgg4V\nw9ZT+QHnR/TdlKeAJD6EEaXpdqxyuWUYPsBEZlKchNMMixDkip2mmQTx1BPQd+7S\nq6tfWjkhx1vqo5GWUeWWzRkEJhGy/efevCLCDdBuZuU0dAA9pIM3DFhqa++SiRw=\n=M1+1\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b794eb4b63f2b8007c0ccec136021624ef7f7d9\nparent b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c\nparent 8720314c025cd222fd04d07119e2cf180f53770a\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526131949 -0600\ncommitter GitHub <noreply@github.com> 1526131949 -0600\n\nRollup merge of #50602 - Screwtapello:update-canonicalize-docs, r=cramertj\n\nUpdate canonicalize docs\n\nI was recently working with file-paths in Rust, and I felt let down by the `std::fs::canonicalize` docs, so I figured I should submit a PR with some suggestions.\n\nI was looking for a method to turn a relative path into an absolute path. The `canonicalize` docs didn't mention the words \"relative\" or \"absolute\", but they did mention resolving symlinks (which is a kind of canonicalisation and does not imply converting to absolute), so I assumed that's all it did. To remedy this, I've added the word \"absolute\" to the description of both `std::fs::canonicalize` and `std::path::Path::canonicalize`.\n\nAfter calling `canonicalize` on Windows, I ran into a bunch of other problems I would not have expected from the function's behaviour on Linux. Specifically, if you call `canonicalize` on a path:\n\n  - it's allowed to be much longer than it otherwise would\n  - `.join(\"a/slash/delimited/path\")` gives you a broken path that Windows can't use, where the same operation would have worked perfectly without `canonicalize` (if the path were short enough)\n  - the resulting path may confuse other Windows programs if you pass it to them on the command-line, or write it to a config file that they read, etc.\n\n...so I tried to summarize those behaviours too.\n\nIf I understand correctly, those behaviours are a side-effect of calling `GetFinalPathNameByHandle`, and the documentation says `canonicalize` might not call that function in future, so maybe those side-effects shouldn't be part of the function's documentation. However, I bet there's a lot of applications deliberately calling `canonicalize` just for the path-length-extension alone, so that particular side-effect is de-facto part of the `canonicalize` interface.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf832c2a89b67449da276377dbe23cd08d397930", "html_url": "https://github.com/rust-lang/rust/commit/bf832c2a89b67449da276377dbe23cd08d397930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf832c2a89b67449da276377dbe23cd08d397930/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "html_url": "https://github.com/rust-lang/rust/commit/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c"}, {"sha": "8720314c025cd222fd04d07119e2cf180f53770a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8720314c025cd222fd04d07119e2cf180f53770a", "html_url": "https://github.com/rust-lang/rust/commit/8720314c025cd222fd04d07119e2cf180f53770a"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "732da79a4d4da34cc1a0abda600fb40a3a4e273a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf832c2a89b67449da276377dbe23cd08d397930/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf832c2a89b67449da276377dbe23cd08d397930/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=bf832c2a89b67449da276377dbe23cd08d397930", "patch": "@@ -1699,16 +1699,23 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::readlink(path.as_ref())\n }\n \n-/// Returns the canonical form of a path with all intermediate components\n-/// normalized and symbolic links resolved.\n+/// Returns the canonical, absolute form of a path with all intermediate\n+/// components normalized and symbolic links resolved.\n ///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `realpath` function on Unix\n /// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n /// Note that, this [may change in the future][changes].\n ///\n+/// On Windows, this converts the path to use [extended length path][path]\n+/// syntax, which allows your program to use longer path names, but means you\n+/// can only join backslash-delimited paths to it, and it may be incompatible\n+/// with other applications (if passed to the application on the command-line,\n+/// or written to a file another application may read).\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n+/// [path]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#maxpath\n ///\n /// # Errors\n ///"}, {"sha": "86478f0a523190fc6abc64772241f2c555d7fd4a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf832c2a89b67449da276377dbe23cd08d397930/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf832c2a89b67449da276377dbe23cd08d397930/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=bf832c2a89b67449da276377dbe23cd08d397930", "patch": "@@ -2284,8 +2284,8 @@ impl Path {\n         fs::symlink_metadata(self)\n     }\n \n-    /// Returns the canonical form of the path with all intermediate components\n-    /// normalized and symbolic links resolved.\n+    /// Returns the canonical, absolute form of the path with all intermediate\n+    /// components normalized and symbolic links resolved.\n     ///\n     /// This is an alias to [`fs::canonicalize`].\n     ///"}]}