{"sha": "29e83988be5be6d2bc4d869f00f4bf931b1500fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTgzOTg4YmU1YmU2ZDJiYzRkODY5ZjAwZjRiZjkzMWIxNTAwZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-10T14:48:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-10T14:48:30Z"}, "message": "don't special case macro_use", "tree": {"sha": "a7c8c6d2681fd4fdb2d340b9dd233baccecf8b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c8c6d2681fd4fdb2d340b9dd233baccecf8b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e83988be5be6d2bc4d869f00f4bf931b1500fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e83988be5be6d2bc4d869f00f4bf931b1500fa", "html_url": "https://github.com/rust-lang/rust/commit/29e83988be5be6d2bc4d869f00f4bf931b1500fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e83988be5be6d2bc4d869f00f4bf931b1500fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89826a50fc59f271b8b52ae675e145029727aa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/89826a50fc59f271b8b52ae675e145029727aa35", "html_url": "https://github.com/rust-lang/rust/commit/89826a50fc59f271b8b52ae675e145029727aa35"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "bd159a56650ca3ed9e2364d31b9511987c8874a4", "filename": "crates/ra_hir/src/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fattr.rs?ref=29e83988be5be6d2bc4d869f00f4bf931b1500fa", "patch": "@@ -63,6 +63,7 @@ impl Attr {\n         self.path.as_ident().map_or(false, |s| s.to_string() == name)\n     }\n \n+    // FIXME: handle cfg_attr :-)\n     pub(crate) fn as_cfg(&self) -> Option<&Subtree> {\n         if !self.is_simple_atom(\"cfg\") {\n             return None;"}, {"sha": "aa5885f045bce011b547112322e7539ef5cd6556", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=29e83988be5be6d2bc4d869f00f4bf931b1500fa", "patch": "@@ -562,9 +562,10 @@ where\n \n     fn collect_module(&mut self, module: &raw::ModuleData, attrs: &[Attr]) {\n         let path_attr = self.path_attr(attrs);\n+        let is_macro_use = self.is_macro_use(attrs);\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, ast_id, is_macro_use } => {\n+            raw::ModuleData::Definition { name, items, ast_id } => {\n                 let module_id =\n                     self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n \n@@ -576,12 +577,12 @@ where\n                     mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n                 }\n                 .collect(&*items);\n-                if *is_macro_use {\n+                if is_macro_use {\n                     self.import_all_legacy_macros(module_id);\n                 }\n             }\n             // out of line module, resolve, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id, is_macro_use } => {\n+            raw::ModuleData::Declaration { name, ast_id } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 match self.mod_dir.resolve_submodule(\n                     self.def_collector.db,\n@@ -600,7 +601,7 @@ where\n                             mod_dir,\n                         }\n                         .collect(raw_items.items());\n-                        if *is_macro_use {\n+                        if is_macro_use {\n                             self.import_all_legacy_macros(module_id);\n                         }\n                     }\n@@ -720,6 +721,10 @@ where\n     fn path_attr<'a>(&self, attrs: &'a [Attr]) -> Option<&'a SmolStr> {\n         attrs.iter().find_map(|attr| attr.as_path())\n     }\n+\n+    fn is_macro_use<'a>(&self, attrs: &'a [Attr]) -> bool {\n+        attrs.iter().any(|attr| attr.is_simple_atom(\"macro_use\"))\n+    }\n }\n \n fn is_macro_rules(path: &Path) -> bool {"}, {"sha": "57f2929c38ed8bf0e79ae1031a06c1af9105fa03", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e83988be5be6d2bc4d869f00f4bf931b1500fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=29e83988be5be6d2bc4d869f00f4bf931b1500fa", "patch": "@@ -149,17 +149,8 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration {\n-        name: Name,\n-        ast_id: FileAstId<ast::Module>,\n-        is_macro_use: bool,\n-    },\n-    Definition {\n-        name: Name,\n-        ast_id: FileAstId<ast::Module>,\n-        items: Vec<RawItem>,\n-        is_macro_use: bool,\n-    },\n+    Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n+    Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -290,14 +281,8 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         let attrs = self.parse_attrs(&module);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n-        // FIXME: cfg_attr\n-        let is_macro_use = module.has_atom_attr(\"macro_use\");\n         if module.has_semi() {\n-            let item = self.raw_items.modules.alloc(ModuleData::Declaration {\n-                name,\n-                ast_id,\n-                is_macro_use,\n-            });\n+            let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n@@ -307,7 +292,6 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                 name,\n                 ast_id,\n                 items: Vec::new(),\n-                is_macro_use,\n             });\n             self.process_module(Some(item), item_list);\n             self.push_item(current_module, attrs, RawItemKind::Module(item));"}]}