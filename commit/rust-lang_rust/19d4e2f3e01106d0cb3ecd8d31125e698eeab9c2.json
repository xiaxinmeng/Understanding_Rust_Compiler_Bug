{"sha": "19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDRlMmYzZTAxMTA2ZDBjYjNlY2Q4ZDMxMTI1ZTY5OGVlYWI5YzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-15T11:27:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T11:27:27Z"}, "message": "Rollup merge of #64035 - petrochenkov:stabmacgen, r=eddyb\n\nStabilize proc macros generating `macro_rules` items\n\nFn-like and attribute proc macros can now generate `macro_rules` items.\n\ncc #54727", "tree": {"sha": "e65d9a76d520b1db1387c21d6d7a0096165712e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65d9a76d520b1db1387c21d6d7a0096165712e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpa0fCRBK7hj4Ov3rIwAAdHIIAARicNBg+gnG8LgY3y41HOhQ\nMx0c+JkPzbBB3cu3GeX6ssRXIIAqefKkgcVWbNKE7W6JxzVM0zT00FFN4ml2ryh4\nz195ObXqIgFNnFa+kYzqiKPGM5Tk+oSHDrL6rDsHG4gUYcq1JX2lpfGUYvVEXkkp\n1L1YNffEvOd6qaykGnaKyHpVzMU2v9HllBW69xW69EGKot9yScyaMQYh9AFXOvDd\nDCY/YHsoUaCIE/nHsEKJ1bjkaBcxdsqacGa6UnjP6bc+tfp56SBzg/Q3H+uwLkKx\nrORd6v/DwRpPLGUKtQGCFxqZznCXC//u92/3QWtjv+P1akluJDYcOCUNuU2Plmg=\n=u/70\n-----END PGP SIGNATURE-----\n", "payload": "tree e65d9a76d520b1db1387c21d6d7a0096165712e5\nparent e369d87b015a84653343032833d65d0545fd3f26\nparent d80be3b4ff49583d94dea89b1b9bd06a013f43d6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571138847 +0200\ncommitter GitHub <noreply@github.com> 1571138847 +0200\n\nRollup merge of #64035 - petrochenkov:stabmacgen, r=eddyb\n\nStabilize proc macros generating `macro_rules` items\n\nFn-like and attribute proc macros can now generate `macro_rules` items.\n\ncc #54727\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "html_url": "https://github.com/rust-lang/rust/commit/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e369d87b015a84653343032833d65d0545fd3f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e369d87b015a84653343032833d65d0545fd3f26", "html_url": "https://github.com/rust-lang/rust/commit/e369d87b015a84653343032833d65d0545fd3f26"}, {"sha": "d80be3b4ff49583d94dea89b1b9bd06a013f43d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80be3b4ff49583d94dea89b1b9bd06a013f43d6", "html_url": "https://github.com/rust-lang/rust/commit/d80be3b4ff49583d94dea89b1b9bd06a013f43d6"}], "stats": {"total": 241, "additions": 84, "deletions": 157}, "files": [{"sha": "8943fc342c023efa22c6b9f52919df12807e799d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -56,7 +56,7 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n-#![feature(proc_macro_hygiene)]\n+#![cfg_attr(bootstrap, feature(proc_macro_hygiene))]\n #![feature(log_syntax)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]"}, {"sha": "2559e874762774f1367884a9665a2dfacf864a7e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 45, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -10,14 +10,14 @@ use crate::ext::mbe::macro_rules::annotate_err_with_kind;\n use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use crate::mut_visit::*;\n-use crate::parse::{DirectoryOwnership, PResult, ParseSess};\n+use crate::parse::{DirectoryOwnership, PResult};\n use crate::parse::token;\n use crate::parse::parser::Parser;\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n-use crate::visit::{self, Visitor};\n+use crate::visit::Visitor;\n use crate::util::map_in_place::MapInPlace;\n \n use errors::{Applicability, FatalError};\n@@ -577,10 +577,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 SyntaxExtensionKind::Bang(expander) => {\n                     self.gate_proc_macro_expansion_kind(span, fragment_kind);\n                     let tok_result = expander.expand(self.cx, span, mac.stream());\n-                    let result =\n-                        self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span);\n-                    self.gate_proc_macro_expansion(span, &result);\n-                    result\n+                    self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n                     let prev = self.cx.current_expansion.prior_type_ascription;\n@@ -624,10 +621,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     })), DUMMY_SP).into();\n                     let input = self.extract_proc_macro_attr_input(attr.item.tokens, span);\n                     let tok_result = expander.expand(self.cx, span, input, item_tok);\n-                    let res =\n-                        self.parse_ast_fragment(tok_result, fragment_kind, &attr.item.path, span);\n-                    self.gate_proc_macro_expansion(span, &res);\n-                    res\n+                    self.parse_ast_fragment(tok_result, fragment_kind, &attr.item.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n                     match attr.parse_meta(self.cx.parse_sess) {\n@@ -718,41 +712,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         );\n     }\n \n-    fn gate_proc_macro_expansion(&self, span: Span, fragment: &AstFragment) {\n-        if self.cx.ecfg.proc_macro_hygiene() {\n-            return\n-        }\n-\n-        fragment.visit_with(&mut DisallowMacros {\n-            span,\n-            parse_sess: self.cx.parse_sess,\n-        });\n-\n-        struct DisallowMacros<'a> {\n-            span: Span,\n-            parse_sess: &'a ParseSess,\n-        }\n-\n-        impl<'ast, 'a> Visitor<'ast> for DisallowMacros<'a> {\n-            fn visit_item(&mut self, i: &'ast ast::Item) {\n-                if let ast::ItemKind::MacroDef(_) = i.kind {\n-                    emit_feature_err(\n-                        self.parse_sess,\n-                        sym::proc_macro_hygiene,\n-                        self.span,\n-                        GateIssue::Language,\n-                        \"procedural macros cannot expand to macro definitions\",\n-                    );\n-                }\n-                visit::walk_item(self, i);\n-            }\n-\n-            fn visit_mac(&mut self, _mac: &'ast ast::Mac) {\n-                // ...\n-            }\n-        }\n-    }\n-\n     fn gate_proc_macro_expansion_kind(&self, span: Span, kind: AstFragmentKind) {\n         let kind = match kind {\n             AstFragmentKind::Expr |"}, {"sha": "7f7c5cb2e454865aa188616c11958410f98fe3b9", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -12,7 +12,7 @@\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n-#![feature(proc_macro_hygiene)]\n+#![cfg_attr(bootstrap, feature(proc_macro_hygiene))]\n #![feature(specialization)]\n #![feature(step_trait)]\n "}, {"sha": "e0bb4d98525b9c4d5d61fc1fc200407fcc03e4c4", "filename": "src/test/ui/macros/same-sequence-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -4,7 +4,6 @@\n // left-hand side of a macro definition behave as if they had unique spans, and in particular that\n // they don't crash the compiler.\n \n-#![feature(proc_macro_hygiene)]\n #![allow(unused_macros)]\n \n extern crate proc_macro_sequence;"}, {"sha": "896f579765f957c58ba6df3efa3e72055aeaa762", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -1,21 +1,21 @@\n error: `$x:expr` may be followed by `$y:tt`, which is not allowed for `expr` fragments\n-  --> $DIR/same-sequence-span.rs:15:18\n+  --> $DIR/same-sequence-span.rs:14:18\n    |\n LL |     (1 $x:expr $($y:tt,)*\n    |                  ^^^^^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n \n error: `$x:expr` may be followed by `=`, which is not allowed for `expr` fragments\n-  --> $DIR/same-sequence-span.rs:16:18\n+  --> $DIR/same-sequence-span.rs:15:18\n    |\n LL |                $(= $z:tt)*\n    |                  ^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n \n error: `$x:expr` may be followed by `$y:tt`, which is not allowed for `expr` fragments\n-  --> $DIR/same-sequence-span.rs:20:1\n+  --> $DIR/same-sequence-span.rs:19:1\n    |\n LL |   proc_macro_sequence::make_foo!();\n    |   ^--------------------------------\n@@ -30,7 +30,7 @@ LL | | fn main() {}\n    = note: allowed there are: `=>`, `,` or `;`\n \n error: `$x:expr` may be followed by `=`, which is not allowed for `expr` fragments\n-  --> $DIR/same-sequence-span.rs:20:1\n+  --> $DIR/same-sequence-span.rs:19:1\n    |\n LL | proc_macro_sequence::make_foo!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "548fefe76f57111a25c50726aa6c6e0500b0d3c9", "filename": "src/test/ui/proc-macro/auxiliary/gen-macro-rules-hygiene.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules-hygiene.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -0,0 +1,23 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn gen_macro_rules(_: TokenStream) -> TokenStream {\n+    \"\n+    macro_rules! generated {() => {\n+        struct ItemDef;\n+        let local_def = 0;\n+\n+        ItemUse; // OK\n+        local_use; // ERROR\n+        break 'label_use; // ERROR\n+\n+        type DollarCrate = $crate::ItemUse; // OK\n+    }}\n+    \".parse().unwrap()\n+}"}, {"sha": "6b609eaee1295dd0e87c6fba02af46c8b7b82648", "filename": "src/test/ui/proc-macro/auxiliary/more-gates.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs?ref=e369d87b015a84653343032833d65d0545fd3f26", "patch": "@@ -1,35 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::*;\n-\n-#[proc_macro_attribute]\n-pub fn attr2mac1(_: TokenStream, _: TokenStream) -> TokenStream {\n-    \"macro_rules! foo1 { (a) => (a) }\".parse().unwrap()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn attr2mac2(_: TokenStream, _: TokenStream) -> TokenStream {\n-    \"macro foo2(a) { a }\".parse().unwrap()\n-}\n-\n-#[proc_macro]\n-pub fn mac2mac1(_: TokenStream) -> TokenStream {\n-    \"macro_rules! foo3 { (a) => (a) }\".parse().unwrap()\n-}\n-\n-#[proc_macro]\n-pub fn mac2mac2(_: TokenStream) -> TokenStream {\n-    \"macro foo4(a) { a }\".parse().unwrap()\n-}\n-\n-#[proc_macro]\n-pub fn tricky(_: TokenStream) -> TokenStream {\n-    \"fn foo() {\n-        macro_rules! foo { (a) => (a) }\n-    }\".parse().unwrap()\n-}"}, {"sha": "195bda82e9ce1f3cee048362d59f5650d3549592", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.rs?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -0,0 +1,23 @@\n+// `macro_rules` items produced by transparent macros have correct hygiene in basic cases.\n+// Local variables and labels are hygienic, items are not hygienic.\n+// `$crate` refers to the crate that defines `macro_rules` and not the outer transparent macro.\n+\n+// aux-build:gen-macro-rules-hygiene.rs\n+\n+#[macro_use]\n+extern crate gen_macro_rules_hygiene;\n+\n+struct ItemUse;\n+\n+gen_macro_rules!();\n+//~^ ERROR use of undeclared label `'label_use`\n+//~| ERROR cannot find value `local_use` in this scope\n+\n+fn main() {\n+    'label_use: loop {\n+        let local_use = 1;\n+        generated!();\n+        ItemDef; // OK\n+        local_def; //~ ERROR cannot find value `local_def` in this scope\n+    }\n+}"}, {"sha": "ecebdfa965666ec7fc2771a6f41fdc88a1c71516", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=19d4e2f3e01106d0cb3ecd8d31125e698eeab9c2", "patch": "@@ -0,0 +1,28 @@\n+error[E0426]: use of undeclared label `'label_use`\n+  --> $DIR/gen-macro-rules-hygiene.rs:12:1\n+   |\n+LL | gen_macro_rules!();\n+   | ^^^^^^^^^^^^^^^^^^^ undeclared label `'label_use`\n+...\n+LL |         generated!();\n+   |         ------------- in this macro invocation\n+\n+error[E0425]: cannot find value `local_use` in this scope\n+  --> $DIR/gen-macro-rules-hygiene.rs:12:1\n+   |\n+LL | gen_macro_rules!();\n+   | ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+...\n+LL |         generated!();\n+   |         ------------- in this macro invocation\n+\n+error[E0425]: cannot find value `local_def` in this scope\n+  --> $DIR/gen-macro-rules-hygiene.rs:21:9\n+   |\n+LL |         local_def;\n+   |         ^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0425, E0426.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "b870b438a65406101839550ab906fca5a9123ad3", "filename": "src/test/ui/proc-macro/more-gates.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs?ref=e369d87b015a84653343032833d65d0545fd3f26", "patch": "@@ -1,22 +0,0 @@\n-// aux-build:more-gates.rs\n-\n-#![feature(decl_macro)]\n-\n-extern crate more_gates as foo;\n-\n-use foo::*;\n-\n-#[attr2mac1]\n-//~^ ERROR: cannot expand to macro definitions\n-pub fn a() {}\n-#[attr2mac2]\n-//~^ ERROR: cannot expand to macro definitions\n-pub fn a() {}\n-\n-mac2mac1!(); //~ ERROR: cannot expand to macro definitions\n-mac2mac2!(); //~ ERROR: cannot expand to macro definitions\n-\n-tricky!();\n-//~^ ERROR: cannot expand to macro definitions\n-\n-fn main() {}"}, {"sha": "ad96f78c77ad026947b1941d51e027e090dc81e7", "filename": "src/test/ui/proc-macro/more-gates.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e369d87b015a84653343032833d65d0545fd3f26/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr?ref=e369d87b015a84653343032833d65d0545fd3f26", "patch": "@@ -1,48 +0,0 @@\n-error[E0658]: procedural macros cannot expand to macro definitions\n-  --> $DIR/more-gates.rs:9:1\n-   |\n-LL | #[attr2mac1]\n-   | ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error[E0658]: procedural macros cannot expand to macro definitions\n-  --> $DIR/more-gates.rs:12:1\n-   |\n-LL | #[attr2mac2]\n-   | ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error[E0658]: procedural macros cannot expand to macro definitions\n-  --> $DIR/more-gates.rs:16:1\n-   |\n-LL | mac2mac1!();\n-   | ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error[E0658]: procedural macros cannot expand to macro definitions\n-  --> $DIR/more-gates.rs:17:1\n-   |\n-LL | mac2mac2!();\n-   | ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error[E0658]: procedural macros cannot expand to macro definitions\n-  --> $DIR/more-gates.rs:19:1\n-   |\n-LL | tricky!();\n-   | ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}