{"sha": "445c83f8f36d78895c92f7f8145542b6ea6b59a8", "node_id": "C_kwDOAAsO6NoAKDQ0NWM4M2Y4ZjM2ZDc4ODk1YzkyZjdmODE0NTU0MmI2ZWE2YjU5YTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T15:34:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T15:34:46Z"}, "message": "Auto merge of #7937 - flip1995:rustfmt-skip-artefact, r=Manishearth\n\nRemove rustfmt::skip attribute from register_plugins function\n\nr? `@Manishearth` since you added this in #540 :smile:\n\nchangelog: none", "tree": {"sha": "3e86512dd8d6604e4c40355d1df806c5dbd2414d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e86512dd8d6604e4c40355d1df806c5dbd2414d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445c83f8f36d78895c92f7f8145542b6ea6b59a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445c83f8f36d78895c92f7f8145542b6ea6b59a8", "html_url": "https://github.com/rust-lang/rust/commit/445c83f8f36d78895c92f7f8145542b6ea6b59a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445c83f8f36d78895c92f7f8145542b6ea6b59a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a60a93cacbdf76c45f96ac045c74251c3aa413b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a60a93cacbdf76c45f96ac045c74251c3aa413b", "html_url": "https://github.com/rust-lang/rust/commit/9a60a93cacbdf76c45f96ac045c74251c3aa413b"}, {"sha": "93ffc9d233f24894c7372b8097a3295dd7b7afee", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ffc9d233f24894c7372b8097a3295dd7b7afee", "html_url": "https://github.com/rust-lang/rust/commit/93ffc9d233f24894c7372b8097a3295dd7b7afee"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "bc302046b2d1821517185e1269add043f7fca6e2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 70, "deletions": 22, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/445c83f8f36d78895c92f7f8145542b6ea6b59a8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445c83f8f36d78895c92f7f8145542b6ea6b59a8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=445c83f8f36d78895c92f7f8145542b6ea6b59a8", "patch": "@@ -441,7 +441,6 @@ pub fn read_conf(sess: &Session) -> Conf {\n ///\n /// Used in `./src/driver.rs`.\n #[allow(clippy::too_many_lines)]\n-#[rustfmt::skip]\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n \n@@ -493,11 +492,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n-    store.register_late_pass(move || Box::new(types::Types::new(\n-        vec_box_size_threshold,\n-        type_complexity_threshold,\n-        avoid_breaking_exported_api,\n-    )));\n+    store.register_late_pass(move || {\n+        Box::new(types::Types::new(\n+            vec_box_size_threshold,\n+            type_complexity_threshold,\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n     store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n     store.register_late_pass(|| Box::new(needless_bitwise_bool::NeedlessBitwiseBool));\n     store.register_late_pass(|| Box::new(eq_op::EqOp));\n@@ -535,7 +536,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n-            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n+            sess.err(&format!(\n+                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n+                s\n+            ));\n             None\n         })\n     });\n@@ -579,10 +583,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n     store.register_late_pass(|| Box::new(transmute::Transmute));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || Box::new(cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold)));\n+    store.register_late_pass(move || {\n+        Box::new(cognitive_complexity::CognitiveComplexity::new(\n+            cognitive_complexity_threshold,\n+        ))\n+    });\n     let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || Box::new(escape::BoxedLocal{too_large_for_stack}));\n-    store.register_late_pass(move || Box::new(vec::UselessVec{too_large_for_stack}));\n+    store.register_late_pass(move || Box::new(escape::BoxedLocal { too_large_for_stack }));\n+    store.register_late_pass(move || Box::new(vec::UselessVec { too_large_for_stack }));\n     store.register_late_pass(|| Box::new(panic_unimplemented::PanicUnimplemented));\n     store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n     store.register_late_pass(|| Box::new(derive::Derive));\n@@ -603,7 +611,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(blacklisted_name::BlacklistedName::new(blacklisted_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || Box::new(functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold)));\n+    store.register_late_pass(move || {\n+        Box::new(functions::Functions::new(\n+            too_many_arguments_threshold,\n+            too_many_lines_threshold,\n+        ))\n+    });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n@@ -688,14 +701,32 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(multiple_crate_versions::MultipleCrateVersions));\n     store.register_late_pass(|| Box::new(wildcard_dependencies::WildcardDependencies));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n-    store.register_early_pass(move || Box::new(literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability)));\n+    store.register_early_pass(move || {\n+        Box::new(literal_representation::LiteralDigitGrouping::new(\n+            literal_representation_lint_fraction_readability,\n+        ))\n+    });\n     let literal_representation_threshold = conf.literal_representation_threshold;\n-    store.register_early_pass(move || Box::new(literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold)));\n+    store.register_early_pass(move || {\n+        Box::new(literal_representation::DecimalLiteralRepresentation::new(\n+            literal_representation_threshold,\n+        ))\n+    });\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_late_pass(move || Box::new(enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api)));\n+    store.register_late_pass(move || {\n+        Box::new(enum_variants::EnumVariantNames::new(\n+            enum_variant_name_threshold,\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n     store.register_early_pass(|| Box::new(tabs_in_doc_comments::TabsInDocComments));\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_late_pass(move || Box::new(upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive)));\n+    store.register_late_pass(move || {\n+        Box::new(upper_case_acronyms::UpperCaseAcronyms::new(\n+            avoid_breaking_exported_api,\n+            upper_case_acronyms_aggressive,\n+        ))\n+    });\n     store.register_late_pass(|| Box::new(default::Default::default()));\n     store.register_late_pass(|| Box::new(unused_self::UnusedSelf));\n     store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n@@ -710,7 +741,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n-    store.register_early_pass(move || Box::new(excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools)));\n+    store.register_early_pass(move || {\n+        Box::new(excessive_bools::ExcessiveBools::new(\n+            max_struct_bools,\n+            max_fn_params_bools,\n+        ))\n+    });\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n     store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n@@ -729,9 +765,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n     store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n-    store.register_early_pass(move || Box::new(non_expressive_names::NonExpressiveNames {\n-        single_char_binding_names_threshold,\n-    }));\n+    store.register_early_pass(move || {\n+        Box::new(non_expressive_names::NonExpressiveNames {\n+            single_char_binding_names_threshold,\n+        })\n+    });\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n     store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n@@ -754,7 +792,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::StringToString));\n     store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n     store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n-    store.register_late_pass(|| Box::new(case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons));\n+    store.register_late_pass(|| {\n+        Box::new(case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons)\n+    });\n     store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n     store.register_late_pass(|| Box::new(manual_map::ManualMap));\n@@ -765,7 +805,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let disallowed_types = conf.disallowed_types.clone();\n     store.register_late_pass(move || Box::new(disallowed_type::DisallowedType::new(disallowed_types.clone())));\n     let import_renames = conf.enforced_import_renames.clone();\n-    store.register_late_pass(move || Box::new(missing_enforced_import_rename::ImportRename::new(import_renames.clone())));\n+    store.register_late_pass(move || {\n+        Box::new(missing_enforced_import_rename::ImportRename::new(\n+            import_renames.clone(),\n+        ))\n+    });\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n     store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n@@ -774,7 +818,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n-    store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n+    store.register_late_pass(move || {\n+        Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(\n+            enable_raw_pointer_heuristic_for_send,\n+        ))\n+    });\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));"}]}