{"sha": "f227187cb8ddd76ef93e630adc56eefc09ae7e59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMjcxODdjYjhkZGQ3NmVmOTNlNjMwYWRjNTZlZWZjMDlhZTdlNTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T19:55:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:37:47Z"}, "message": "remove `LinkMeta` from `SharedCrateContext`\n\nA number of things were using `crate_hash` that really ought to be using\n`crate_disambiguator` (e.g., to create the plugin symbol names). They\nhave been updated.\n\nIt is important to remove `LinkMeta` from `SharedCrateContext` since it\ncontains a hash of the entire crate, and hence it will change\nwhenever **anything** changes (which would then require\nrebuilding **everything**).", "tree": {"sha": "ff74031063f81a980f3184d2f78f6f3c12221e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff74031063f81a980f3184d2f78f6f3c12221e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f227187cb8ddd76ef93e630adc56eefc09ae7e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f227187cb8ddd76ef93e630adc56eefc09ae7e59", "html_url": "https://github.com/rust-lang/rust/commit/f227187cb8ddd76ef93e630adc56eefc09ae7e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f227187cb8ddd76ef93e630adc56eefc09ae7e59/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22fdf9a3ac1e316069d55effbfa5c91cc5c0a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22fdf9a3ac1e316069d55effbfa5c91cc5c0a12", "html_url": "https://github.com/rust-lang/rust/commit/c22fdf9a3ac1e316069d55effbfa5c91cc5c0a12"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "adc9aabb8c77a1abf24a93f9807e890cb9d1b020", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -13,7 +13,6 @@ pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n \n use dep_graph::DepGraph;\n use hir::def_id::{CrateNum, DefIndex};\n-use hir::svh::Svh;\n use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n@@ -402,15 +401,14 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate Svh and the function DefIndex.\n-    pub fn generate_plugin_registrar_symbol(&self, svh: &Svh, index: DefIndex)\n+    pub fn generate_plugin_registrar_symbol(&self, disambiguator: Symbol, index: DefIndex)\n                                             -> String {\n-        format!(\"__rustc_plugin_registrar__{}_{}\", svh, index.as_usize())\n+        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator, index.as_usize())\n     }\n \n-    pub fn generate_derive_registrar_symbol(&self,\n-                                            svh: &Svh,\n-                                            index: DefIndex) -> String {\n-        format!(\"__rustc_derive_registrar__{}_{}\", svh, index.as_usize())\n+    pub fn generate_derive_registrar_symbol(&self, disambiguator: Symbol, index: DefIndex)\n+                                            -> String {\n+        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator, index.as_usize())\n     }\n \n     pub fn sysroot<'a>(&'a self) -> &'a Path {"}, {"sha": "a8ee999505e2074e2755a593316c05d8acd591ce", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -600,7 +600,7 @@ impl<'a> CrateLoader<'a> {\n             Err(err) => self.sess.span_fatal(span, &err),\n         };\n \n-        let sym = self.sess.generate_derive_registrar_symbol(&root.hash,\n+        let sym = self.sess.generate_derive_registrar_symbol(root.disambiguator,\n                                                              root.macro_derive_registrar.unwrap());\n         let registrar = unsafe {\n             let sym = match lib.symbol(&sym) {\n@@ -654,7 +654,7 @@ impl<'a> CrateLoader<'a> {\n     /// Look for a plugin registrar. Returns library path, crate\n     /// SVH and DefIndex of the registrar function.\n     pub fn find_plugin_registrar(&mut self, span: Span, name: &str)\n-                                 -> Option<(PathBuf, Svh, DefIndex)> {\n+                                 -> Option<(PathBuf, Symbol, DefIndex)> {\n         let ekrate = self.read_extension_crate(span, &ExternCrateInfo {\n              name: Symbol::intern(name),\n              ident: Symbol::intern(name),\n@@ -675,7 +675,7 @@ impl<'a> CrateLoader<'a> {\n         let root = ekrate.metadata.get_root();\n         match (ekrate.dylib.as_ref(), root.plugin_registrar_fn) {\n             (Some(dylib), Some(reg)) => {\n-                Some((dylib.to_path_buf(), root.hash, reg))\n+                Some((dylib.to_path_buf(), root.disambiguator, reg))\n             }\n             (None, Some(_)) => {\n                 span_err!(self.sess, span, E0457,"}, {"sha": "ed49e8a14c8c7b0097825e234b382d52e8f98967", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -100,8 +100,8 @@ impl<'a> PluginLoader<'a> {\n     fn load_plugin(&mut self, span: Span, name: &str, args: Vec<ast::NestedMetaItem>) {\n         let registrar = self.reader.find_plugin_registrar(span, name);\n \n-        if let Some((lib, svh, index)) = registrar {\n-            let symbol = self.sess.generate_plugin_registrar_symbol(&svh, index);\n+        if let Some((lib, disambiguator, index)) = registrar {\n+            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator, index);\n             let fun = self.dylink_registrar(span, lib, symbol);\n             self.plugins.push(PluginRegistrar {\n                 fun: fun,"}, {"sha": "04617edf4a7a972e3fbba39599b348e04063c9d0", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -64,10 +64,10 @@ impl ExportedSymbols {\n         }\n \n         if let Some(id) = scx.sess().derive_registrar_fn.get() {\n-            let svh = &scx.link_meta().crate_hash;\n             let def_id = scx.tcx().hir.local_def_id(id);\n             let idx = def_id.index;\n-            let registrar = scx.sess().generate_derive_registrar_symbol(svh, idx);\n+            let disambiguator = scx.sess().local_crate_disambiguator();\n+            let registrar = scx.sess().generate_derive_registrar_symbol(disambiguator, idx);\n             local_crate.push((registrar, SymbolExportLevel::C));\n         }\n "}, {"sha": "8facbd6cc278373299585b0dd64dd5904fcc62f8", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -179,14 +179,14 @@ pub fn symbol_name<'a, 'tcx>(instance: Instance<'tcx>,\n \n     if let Some(id) = node_id {\n         if scx.sess().plugin_registrar_fn.get() == Some(id) {\n-            let svh = &scx.link_meta().crate_hash;\n             let idx = def_id.index;\n-            return scx.sess().generate_plugin_registrar_symbol(svh, idx);\n+            let disambiguator = scx.sess().local_crate_disambiguator();\n+            return scx.sess().generate_plugin_registrar_symbol(disambiguator, idx);\n         }\n         if scx.sess().derive_registrar_fn.get() == Some(id) {\n-            let svh = &scx.link_meta().crate_hash;\n             let idx = def_id.index;\n-            return scx.sess().generate_derive_registrar_symbol(svh, idx);\n+            let disambiguator = scx.sess().local_crate_disambiguator();\n+            return scx.sess().generate_derive_registrar_symbol(disambiguator, idx);\n         }\n     }\n "}, {"sha": "cec599e28484baf2d6246f01a706a480e9fe5c2d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -39,6 +39,7 @@ use middle::lang_items::StartFnLangItem;\n use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::dep_graph::{AssertDepGraphSafe, DepNode};\n+use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n use session::config::{self, NoDebugInfo};\n@@ -725,6 +726,7 @@ fn contains_null(s: &str) -> bool {\n }\n \n fn write_metadata(cx: &SharedCrateContext,\n+                  link_meta: &LinkMeta,\n                   exported_symbols: &NodeSet)\n                   -> (ContextRef, ModuleRef, EncodedMetadata) {\n     use flate;\n@@ -762,7 +764,7 @@ fn write_metadata(cx: &SharedCrateContext,\n \n     let cstore = &cx.tcx().sess.cstore;\n     let metadata = cstore.encode_metadata(cx.tcx(),\n-                                          cx.link_meta(),\n+                                          &link_meta,\n                                           exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n         return (metadata_llcx, metadata_llmod, metadata);\n@@ -1071,13 +1073,12 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let link_meta = link::build_link_meta(incremental_hashes_map);\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n-                                             link_meta.clone(),\n                                              exported_symbols,\n                                              check_overflow);\n     // Translate the metadata.\n     let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {\n-            write_metadata(&shared_ccx, shared_ccx.exported_symbols())\n+            write_metadata(&shared_ccx, &link_meta, shared_ccx.exported_symbols())\n         });\n \n     let metadata_module = ModuleTranslation {"}, {"sha": "9d18b4574bcc42612c05a85f36ebb4229bf3248b", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f227187cb8ddd76ef93e630adc56eefc09ae7e59/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=f227187cb8ddd76ef93e630adc56eefc09ae7e59", "patch": "@@ -11,7 +11,6 @@\n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef};\n use rustc::dep_graph::{DepGraph, DepGraphSafe, DepNode, DepTrackingMap, DepTrackingMapConfig};\n-use middle::cstore::LinkMeta;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n@@ -65,7 +64,6 @@ pub struct Stats {\n /// (aside from metadata-related ones).\n pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     exported_symbols: NodeSet,\n-    link_meta: LinkMeta,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     empty_param_env: ty::ParameterEnvironment<'tcx>,\n     stats: Stats,\n@@ -316,7 +314,6 @@ pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (Cont\n \n impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-               link_meta: LinkMeta,\n                exported_symbols: NodeSet,\n                check_overflow: bool)\n                -> SharedCrateContext<'b, 'tcx> {\n@@ -367,7 +364,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n         SharedCrateContext {\n             exported_symbols: exported_symbols,\n-            link_meta: link_meta,\n             empty_param_env: tcx.empty_parameter_environment(),\n             tcx: tcx,\n             stats: Stats {\n@@ -409,10 +405,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.project_cache\n     }\n \n-    pub fn link_meta<'a>(&'a self) -> &'a LinkMeta {\n-        &self.link_meta\n-    }\n-\n     pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n         self.tcx\n     }\n@@ -440,7 +432,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn metadata_symbol_name(&self) -> String {\n         format!(\"rust_metadata_{}_{}\",\n                 self.tcx().crate_name(LOCAL_CRATE),\n-                self.link_meta().crate_hash)\n+                self.tcx().crate_disambiguator(LOCAL_CRATE))\n     }\n }\n "}]}