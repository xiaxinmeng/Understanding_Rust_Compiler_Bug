{"sha": "fd4c083e429d055190fa830bd2216915fe634b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNGMwODNlNDI5ZDA1NTE5MGZhODMwYmQyMjE2OTE1ZmU2MzRiOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:14:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:14:22Z"}, "message": "simplify", "tree": {"sha": "03720638d848a87392c57b4ee0d4348755ba1d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03720638d848a87392c57b4ee0d4348755ba1d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4c083e429d055190fa830bd2216915fe634b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4c083e429d055190fa830bd2216915fe634b98", "html_url": "https://github.com/rust-lang/rust/commit/fd4c083e429d055190fa830bd2216915fe634b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4c083e429d055190fa830bd2216915fe634b98/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15cf2c9600e0464b9bcd0273e7845efbf7bdeb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15cf2c9600e0464b9bcd0273e7845efbf7bdeb5", "html_url": "https://github.com/rust-lang/rust/commit/d15cf2c9600e0464b9bcd0273e7845efbf7bdeb5"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "d2c19b98d602ebe7a923ed8939e68231f50ae981", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fd4c083e429d055190fa830bd2216915fe634b98/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4c083e429d055190fa830bd2216915fe634b98/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=fd4c083e429d055190fa830bd2216915fe634b98", "patch": "@@ -132,41 +132,42 @@ pub enum BinOp {\n \n impl ast::BinExpr {\n     fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n-        self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| match c\n-            .kind()\n-        {\n-            T![||] => Some((c, BinOp::BooleanOr)),\n-            T![&&] => Some((c, BinOp::BooleanAnd)),\n-            T![==] => Some((c, BinOp::EqualityTest)),\n-            T![!=] => Some((c, BinOp::NegatedEqualityTest)),\n-            T![<=] => Some((c, BinOp::LesserEqualTest)),\n-            T![>=] => Some((c, BinOp::GreaterEqualTest)),\n-            T![<] => Some((c, BinOp::LesserTest)),\n-            T![>] => Some((c, BinOp::GreaterTest)),\n-            T![+] => Some((c, BinOp::Addition)),\n-            T![*] => Some((c, BinOp::Multiplication)),\n-            T![-] => Some((c, BinOp::Subtraction)),\n-            T![/] => Some((c, BinOp::Division)),\n-            T![%] => Some((c, BinOp::Remainder)),\n-            T![<<] => Some((c, BinOp::LeftShift)),\n-            T![>>] => Some((c, BinOp::RightShift)),\n-            T![^] => Some((c, BinOp::BitwiseXor)),\n-            T![|] => Some((c, BinOp::BitwiseOr)),\n-            T![&] => Some((c, BinOp::BitwiseAnd)),\n-            T![..] => Some((c, BinOp::RangeRightOpen)),\n-            T![..=] => Some((c, BinOp::RangeRightClosed)),\n-            T![=] => Some((c, BinOp::Assignment)),\n-            T![+=] => Some((c, BinOp::AddAssign)),\n-            T![/=] => Some((c, BinOp::DivAssign)),\n-            T![*=] => Some((c, BinOp::MulAssign)),\n-            T![%=] => Some((c, BinOp::RemAssign)),\n-            T![>>=] => Some((c, BinOp::ShrAssign)),\n-            T![<<=] => Some((c, BinOp::ShlAssign)),\n-            T![-=] => Some((c, BinOp::SubAssign)),\n-            T![|=] => Some((c, BinOp::BitOrAssign)),\n-            T![&=] => Some((c, BinOp::BitAndAssign)),\n-            T![^=] => Some((c, BinOp::BitXorAssign)),\n-            _ => None,\n+        self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| {\n+            let bin_op = match c.kind() {\n+                T![||] => BinOp::BooleanOr,\n+                T![&&] => BinOp::BooleanAnd,\n+                T![==] => BinOp::EqualityTest,\n+                T![!=] => BinOp::NegatedEqualityTest,\n+                T![<=] => BinOp::LesserEqualTest,\n+                T![>=] => BinOp::GreaterEqualTest,\n+                T![<] => BinOp::LesserTest,\n+                T![>] => BinOp::GreaterTest,\n+                T![+] => BinOp::Addition,\n+                T![*] => BinOp::Multiplication,\n+                T![-] => BinOp::Subtraction,\n+                T![/] => BinOp::Division,\n+                T![%] => BinOp::Remainder,\n+                T![<<] => BinOp::LeftShift,\n+                T![>>] => BinOp::RightShift,\n+                T![^] => BinOp::BitwiseXor,\n+                T![|] => BinOp::BitwiseOr,\n+                T![&] => BinOp::BitwiseAnd,\n+                T![..] => BinOp::RangeRightOpen,\n+                T![..=] => BinOp::RangeRightClosed,\n+                T![=] => BinOp::Assignment,\n+                T![+=] => BinOp::AddAssign,\n+                T![/=] => BinOp::DivAssign,\n+                T![*=] => BinOp::MulAssign,\n+                T![%=] => BinOp::RemAssign,\n+                T![>>=] => BinOp::ShrAssign,\n+                T![<<=] => BinOp::ShlAssign,\n+                T![-=] => BinOp::SubAssign,\n+                T![|=] => BinOp::BitOrAssign,\n+                T![&=] => BinOp::BitAndAssign,\n+                T![^=] => BinOp::BitXorAssign,\n+                _ => return None,\n+            };\n+            Some((c, bin_op))\n         })\n     }\n "}]}