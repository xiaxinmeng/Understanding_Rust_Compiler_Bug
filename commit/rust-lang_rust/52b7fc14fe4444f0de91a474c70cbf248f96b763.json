{"sha": "52b7fc14fe4444f0de91a474c70cbf248f96b763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYjdmYzE0ZmU0NDQ0ZjBkZTkxYTQ3NGM3MGNiZjI0OGY5NmI3NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-22T15:19:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-22T15:19:32Z"}, "message": "auto merge of #7903 : michaelwoerister/rust/end_of_spanned, r=jdm\n\nContinuation of https://github.com/mozilla/rust/pull/7826.\r\n\r\nAST spanned<T> refactoring, AST type renamings:\r\n\r\n`crate => Crate`\r\n`local => Local`\r\n`blk => Block`\r\n`crate_num => CrateNum`\r\n`crate_cfg => CrateConfig`\r\n`field => Field`\r\n\r\nAlso, Crate, Field and Local are not wrapped in spanned<T> anymore.", "tree": {"sha": "3eb8238a1e8ab4f9999d1185077e2bec74707ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb8238a1e8ab4f9999d1185077e2bec74707ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b7fc14fe4444f0de91a474c70cbf248f96b763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b7fc14fe4444f0de91a474c70cbf248f96b763", "html_url": "https://github.com/rust-lang/rust/commit/52b7fc14fe4444f0de91a474c70cbf248f96b763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b7fc14fe4444f0de91a474c70cbf248f96b763/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3eaf8f27bd626a9667a574bc62464a815a6ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3eaf8f27bd626a9667a574bc62464a815a6ad4", "html_url": "https://github.com/rust-lang/rust/commit/7a3eaf8f27bd626a9667a574bc62464a815a6ad4"}, {"sha": "5aee3e01a02e0b31ad225e70899a671937ab65ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aee3e01a02e0b31ad225e70899a671937ab65ee", "html_url": "https://github.com/rust-lang/rust/commit/5aee3e01a02e0b31ad225e70899a671937ab65ee"}], "stats": {"total": 1117, "additions": 553, "deletions": 564}, "files": [{"sha": "f9910462db5a2f460415693ae46ae11067c1e49b", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -488,7 +488,7 @@ pub mod write {\n  */\n \n pub fn build_link_meta(sess: Session,\n-                       c: &ast::crate,\n+                       c: &ast::Crate,\n                        output: &Path,\n                        symbol_hasher: &mut hash::State)\n                        -> LinkMeta {\n@@ -498,12 +498,12 @@ pub fn build_link_meta(sess: Session,\n         cmh_items: ~[@ast::MetaItem]\n     }\n \n-    fn provided_link_metas(sess: Session, c: &ast::crate) ->\n+    fn provided_link_metas(sess: Session, c: &ast::Crate) ->\n        ProvidedMetas {\n         let mut name = None;\n         let mut vers = None;\n         let mut cmh_items = ~[];\n-        let linkage_metas = attr::find_linkage_metas(c.node.attrs);\n+        let linkage_metas = attr::find_linkage_metas(c.attrs);\n         attr::require_unique_names(sess.diagnostic(), linkage_metas);\n         for linkage_metas.iter().advance |meta| {\n             match meta.name_str_pair() {"}, {"sha": "278c7c3949e5727918544683374ae7931e746e61", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -64,7 +64,7 @@ pub fn source_name(input: &input) -> @str {\n }\n \n pub fn default_configuration(sess: Session, argv0: @str, input: &input) ->\n-   ast::crate_cfg {\n+   ast::CrateConfig {\n     let (libc, tos) = match sess.targ_cfg.os {\n         session::os_win32 =>   (@\"msvcrt.dll\", @\"win32\"),\n         session::os_macos =>   (@\"libc.dylib\", @\"macos\"),\n@@ -96,14 +96,14 @@ pub fn default_configuration(sess: Session, argv0: @str, input: &input) ->\n          mk(@\"build_input\", source_name(input))];\n }\n \n-pub fn append_configuration(cfg: &mut ast::crate_cfg, name: @str) {\n+pub fn append_configuration(cfg: &mut ast::CrateConfig, name: @str) {\n     if !cfg.iter().any(|mi| mi.name() == name) {\n         cfg.push(attr::mk_word_item(name))\n     }\n }\n \n pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n-   ast::crate_cfg {\n+   ast::CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n     let default_cfg = default_configuration(sess, argv0, input);\n@@ -117,11 +117,11 @@ pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n fn parse_cfgspecs(cfgspecs: ~[~str],\n-                  demitter: diagnostic::Emitter) -> ast::crate_cfg {\n+                  demitter: diagnostic::Emitter) -> ast::CrateConfig {\n     do cfgspecs.consume_iter().transform |s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n         parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n-    }.collect::<ast::crate_cfg>()\n+    }.collect::<ast::CrateConfig>()\n }\n \n pub enum input {\n@@ -132,8 +132,8 @@ pub enum input {\n     str_input(@str)\n }\n \n-pub fn parse_input(sess: Session, cfg: ast::crate_cfg, input: &input)\n-    -> @ast::crate {\n+pub fn parse_input(sess: Session, cfg: ast::CrateConfig, input: &input)\n+    -> @ast::Crate {\n     match *input {\n       file_input(ref file) => {\n         parse::parse_crate_from_file(&(*file), cfg, sess.parse_sess)\n@@ -167,11 +167,11 @@ pub enum compile_phase {\n \n #[fixed_stack_segment]\n pub fn compile_rest(sess: Session,\n-                    cfg: ast::crate_cfg,\n+                    cfg: ast::CrateConfig,\n                     phases: compile_upto,\n                     outputs: Option<@OutputFilenames>,\n-                    curr: Option<@ast::crate>)\n-    -> (Option<@ast::crate>, Option<ty::ctxt>) {\n+                    curr: Option<@ast::Crate>)\n+    -> (Option<@ast::Crate>, Option<ty::ctxt>) {\n \n     let time_passes = sess.time_passes();\n \n@@ -372,11 +372,11 @@ pub fn compile_rest(sess: Session,\n }\n \n pub fn compile_upto(sess: Session,\n-                    cfg: ast::crate_cfg,\n+                    cfg: ast::CrateConfig,\n                     input: &input,\n                     upto: compile_phase,\n                     outputs: Option<@OutputFilenames>)\n-                    -> (Option<@ast::crate>, Option<ty::ctxt>) {\n+                    -> (Option<@ast::Crate>, Option<ty::ctxt>) {\n     let time_passes = sess.time_passes();\n     let crate = time(time_passes,\n                      ~\"parsing\",\n@@ -395,7 +395,7 @@ pub fn compile_upto(sess: Session,\n                  Some(crate))\n }\n \n-pub fn compile_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n+pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n                      outdir: &Option<Path>, output: &Option<Path>) {\n     let upto = if sess.opts.parse_only { cu_parse }\n                else if sess.opts.no_trans { cu_no_trans }\n@@ -404,7 +404,7 @@ pub fn compile_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n     compile_upto(sess, cfg, input, upto, Some(outputs));\n }\n \n-pub fn pretty_print_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n+pub fn pretty_print_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n                           ppm: pp_mode) {\n     fn ann_paren_for_expr(node: pprust::ann_node) {\n         match node {"}, {"sha": "67894cca78ee22fabb9e8c32915844b4fd5fe704", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -158,7 +158,7 @@ pub struct options {\n     // items to the crate config, and during parsing the entire crate config\n     // will be added to the crate AST node.  This should not be used for\n     // anything except building the full crate config prior to parsing.\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     binary: @str,\n     test: bool,\n     parse_only: bool,\n@@ -357,7 +357,7 @@ pub fn expect<T:Clone>(sess: Session, opt: Option<T>, msg: &fn() -> ~str)\n }\n \n pub fn building_library(req_crate_type: crate_type,\n-                        crate: &ast::crate,\n+                        crate: &ast::Crate,\n                         testing: bool) -> bool {\n     match req_crate_type {\n       bin_crate => false,\n@@ -367,7 +367,7 @@ pub fn building_library(req_crate_type: crate_type,\n             false\n         } else {\n             match syntax::attr::first_attr_value_str_by_name(\n-                crate.node.attrs,\n+                crate.attrs,\n                 \"crate_type\") {\n               Some(s) => \"lib\" == s,\n               _ => false\n@@ -402,19 +402,20 @@ mod test {\n         attr::mk_attr(attr::mk_name_value_item_str(@\"crate_type\", t))\n     }\n \n-    fn make_crate(with_bin: bool, with_lib: bool) -> @ast::crate {\n+    fn make_crate(with_bin: bool, with_lib: bool) -> @ast::Crate {\n         let mut attrs = ~[];\n         if with_bin {\n             attrs.push(make_crate_type_attr(@\"bin\"));\n         }\n         if with_lib {\n             attrs.push(make_crate_type_attr(@\"lib\"));\n         }\n-        @codemap::respan(codemap::dummy_sp(), ast::crate_ {\n+        @ast::Crate {\n             module: ast::_mod { view_items: ~[], items: ~[] },\n             attrs: attrs,\n-            config: ~[]\n-        })\n+            config: ~[],\n+            span: codemap::dummy_sp(),\n+        }\n     }\n \n     #[test]"}, {"sha": "d8b59d579c8154ece425d0be7d5f0d0c7c28afbd", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -20,14 +20,14 @@ struct Context {\n \n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n-pub fn strip_unconfigured_items(crate: @ast::crate) -> @ast::crate {\n+pub fn strip_unconfigured_items(crate: @ast::Crate) -> @ast::Crate {\n     do strip_items(crate) |attrs| {\n-        in_cfg(crate.node.config, attrs)\n+        in_cfg(crate.config, attrs)\n     }\n }\n \n-pub fn strip_items(crate: &ast::crate, in_cfg: in_cfg_pred)\n-    -> @ast::crate {\n+pub fn strip_items(crate: &ast::Crate, in_cfg: in_cfg_pred)\n+    -> @ast::Crate {\n \n     let ctxt = @Context { in_cfg: in_cfg };\n \n@@ -131,16 +131,16 @@ fn filter_stmt(cx: @Context, stmt: @ast::stmt) ->\n \n fn fold_block(\n     cx: @Context,\n-    b: &ast::blk,\n+    b: &ast::Block,\n     fld: @fold::ast_fold\n-) -> ast::blk {\n+) -> ast::Block {\n     let resulting_stmts = do b.stmts.iter().filter_map |a| {\n         filter_stmt(cx, *a).chain(|stmt| fld.fold_stmt(stmt))\n     }.collect();\n     let filtered_view_items = do b.view_items.iter().filter_map |a| {\n         filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n     }.collect();\n-    ast::blk {\n+    ast::Block {\n         view_items: filtered_view_items,\n         stmts: resulting_stmts,\n         expr: b.expr.map(|x| fld.fold_expr(*x)),"}, {"sha": "3a1129b1dd94e450f3200d06ff4b8b18fac81771", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -20,29 +20,30 @@ use syntax::fold;\n \n static STD_VERSION: &'static str = \"0.8-pre\";\n \n-pub fn maybe_inject_libstd_ref(sess: Session, crate: @ast::crate)\n-                               -> @ast::crate {\n+pub fn maybe_inject_libstd_ref(sess: Session, crate: @ast::Crate)\n+                               -> @ast::Crate {\n     if use_std(crate) {\n         inject_libstd_ref(sess, crate)\n     } else {\n         crate\n     }\n }\n \n-fn use_std(crate: &ast::crate) -> bool {\n-    !attr::contains_name(crate.node.attrs, \"no_std\")\n+fn use_std(crate: &ast::Crate) -> bool {\n+    !attr::contains_name(crate.attrs, \"no_std\")\n }\n+\n fn no_prelude(attrs: &[ast::Attribute]) -> bool {\n     attr::contains_name(attrs, \"no_implicit_prelude\")\n }\n \n-fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n+fn inject_libstd_ref(sess: Session, crate: &ast::Crate) -> @ast::Crate {\n     fn spanned<T>(x: T) -> codemap::spanned<T> {\n         codemap::spanned { node: x, span: dummy_sp() }\n     }\n \n     let precursor = @fold::AstFoldFns {\n-        fold_crate: |crate, span, fld| {\n+        fold_crate: |crate, fld| {\n             let n1 = sess.next_node_id();\n             let vi1 = ast::view_item {\n                 node: ast::view_item_extern_mod(\n@@ -68,11 +69,10 @@ fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n             }\n \n             // FIXME #2543: Bad copy.\n-            let new_crate = ast::crate_ {\n+            ast::Crate {\n                 module: new_module,\n                 ..(*crate).clone()\n-            };\n-            (new_crate, span)\n+            }\n         },\n         fold_item: |item, fld| {\n             if !no_prelude(item.attrs) {"}, {"sha": "bdc904a5a6115e1695062d9dcee4ff055c2b9593", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -37,7 +37,7 @@ struct Test {\n \n struct TestCtxt {\n     sess: session::Session,\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     path: ~[ast::ident],\n     ext_cx: @ExtCtxt,\n     testfns: ~[Test]\n@@ -46,12 +46,12 @@ struct TestCtxt {\n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n pub fn modify_for_testing(sess: session::Session,\n-                          crate: @ast::crate)\n-                       -> @ast::crate {\n+                          crate: @ast::Crate)\n+                       -> @ast::Crate {\n     // We generate the test harness when building in the 'test'\n     // configuration, either with the '--test' or '--cfg test'\n     // command line options.\n-    let should_test = attr::contains_name(crate.node.config, \"test\");\n+    let should_test = attr::contains_name(crate.config, \"test\");\n \n     if should_test {\n         generate_test_harness(sess, crate)\n@@ -61,8 +61,8 @@ pub fn modify_for_testing(sess: session::Session,\n }\n \n fn generate_test_harness(sess: session::Session,\n-                         crate: @ast::crate)\n-                      -> @ast::crate {\n+                         crate: @ast::Crate)\n+                      -> @ast::Crate {\n     let cx: @mut TestCtxt = @mut TestCtxt {\n         sess: sess,\n         crate: crate,\n@@ -81,7 +81,7 @@ fn generate_test_harness(sess: session::Session,\n     });\n \n     let precursor = @fold::AstFoldFns {\n-        fold_crate: fold::wrap(|a,b| fold_crate(cx, a, b) ),\n+        fold_crate: |a,b| fold_crate(cx, a, b),\n         fold_item: |a,b| fold_item(cx, a, b),\n         fold_mod: |a,b| fold_mod(cx, a, b),.. *fold::default_ast_fold()};\n \n@@ -91,7 +91,7 @@ fn generate_test_harness(sess: session::Session,\n     return res;\n }\n \n-fn strip_test_functions(crate: &ast::crate) -> @ast::crate {\n+fn strip_test_functions(crate: &ast::Crate) -> @ast::Crate {\n     // When not compiling with --test we should not compile the\n     // #[test] functions\n     do config::strip_items(crate) |attrs| {\n@@ -132,13 +132,13 @@ fn fold_mod(cx: @mut TestCtxt,\n     fold::noop_fold_mod(&mod_nomain, fld)\n }\n \n-fn fold_crate(cx: @mut TestCtxt, c: &ast::crate_, fld: @fold::ast_fold)\n-              -> ast::crate_ {\n+fn fold_crate(cx: @mut TestCtxt, c: &ast::Crate, fld: @fold::ast_fold)\n+              -> ast::Crate {\n     let folded = fold::noop_fold_crate(c, fld);\n \n     // Add a special __test module to the crate that will contain code\n     // generated for the test harness\n-    ast::crate_ {\n+    ast::Crate {\n         module: add_test_module(cx, &folded.module),\n         .. folded\n     }\n@@ -236,7 +236,7 @@ fn is_ignored(cx: @mut TestCtxt, i: @ast::item) -> bool {\n     do i.attrs.iter().any |attr| {\n         // check ignore(cfg(foo, bar))\n         \"ignore\" == attr.name() && match attr.meta_item_list() {\n-            Some(ref cfgs) => attr::test_cfg(cx.crate.node.config, cfgs.iter().transform(|x| *x)),\n+            Some(ref cfgs) => attr::test_cfg(cx.crate.config, cfgs.iter().transform(|x| *x)),\n             None => true\n         }\n     }\n@@ -370,7 +370,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n }\n \n fn is_extra(cx: &TestCtxt) -> bool {\n-    let items = attr::find_linkage_metas(cx.crate.node.attrs);\n+    let items = attr::find_linkage_metas(cx.crate.attrs);\n     match attr::last_meta_item_value_str_by_name(items, \"name\") {\n         Some(s) if \"extra\" == s => true,\n         _ => false"}, {"sha": "cbf1494e4508dbc1f8e3c5c1e83af7cdda0ed893", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -29,7 +29,7 @@ use syntax::ast;\n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n pub fn read_crates(diag: @span_handler,\n-                   crate: &ast::crate,\n+                   crate: &ast::Crate,\n                    cstore: @mut cstore::CStore,\n                    filesearch: @FileSearch,\n                    os: loader::os,\n@@ -118,14 +118,14 @@ struct Env {\n     os: loader::os,\n     statik: bool,\n     crate_cache: @mut ~[cache_entry],\n-    next_crate_num: ast::crate_num,\n+    next_crate_num: ast::CrateNum,\n     intr: @ident_interner\n }\n \n-fn visit_crate(e: &Env, c: &ast::crate) {\n+fn visit_crate(e: &Env, c: &ast::Crate) {\n     let cstore = e.cstore;\n \n-    for c.node.attrs.iter().filter(|m| \"link_args\" == m.name()).advance |a| {\n+    for c.attrs.iter().filter(|m| \"link_args\" == m.name()).advance |a| {\n         match a.value_str() {\n           Some(ref linkarg) => {\n             cstore::add_used_link_args(cstore, *linkarg);\n@@ -237,7 +237,7 @@ fn resolve_crate(e: @mut Env,\n                  metas: ~[@ast::MetaItem],\n                  hash: @str,\n                  span: span)\n-              -> ast::crate_num {\n+              -> ast::CrateNum {\n     let metas = metas_with_ident(token::ident_to_str(&ident), metas);\n \n     match existing_match(e, metas, hash) {"}, {"sha": "97344ee91adb2306b8c2dc775a58479b01451b9c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -42,15 +42,15 @@ pub fn get_type_param_count(cstore: @mut cstore::CStore, def: ast::def_id)\n \n /// Iterates over all the language items in the given crate.\n pub fn each_lang_item(cstore: @mut cstore::CStore,\n-                      cnum: ast::crate_num,\n+                      cnum: ast::CrateNum,\n                       f: &fn(ast::node_id, uint) -> bool) -> bool {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n     decoder::each_lang_item(crate_data, f)\n }\n \n /// Iterates over all the paths in the given crate.\n pub fn each_path(cstore: @mut cstore::CStore,\n-                 cnum: ast::crate_num,\n+                 cnum: ast::CrateNum,\n                  f: &fn(&str, decoder::def_like, ast::visibility) -> bool)\n                  -> bool {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n@@ -232,7 +232,7 @@ pub fn get_item_visibility(cstore: @mut cstore::CStore,\n }\n \n pub fn get_link_args_for_crate(cstore: @mut cstore::CStore,\n-                               crate_num: ast::crate_num)\n+                               crate_num: ast::CrateNum)\n                             -> ~[~str] {\n     let cdata = cstore::get_crate_data(cstore, crate_num);\n     decoder::get_link_args_for_crate(cdata)"}, {"sha": "e70abf102def268de6bd08ee2a4f3f01687d6a72", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -25,17 +25,17 @@ use syntax::parse::token::ident_interner;\n // local crate numbers (as generated during this session). Each external\n // crate may refer to types in other external crates, and each has their\n // own crate numbers.\n-pub type cnum_map = @mut HashMap<ast::crate_num, ast::crate_num>;\n+pub type cnum_map = @mut HashMap<ast::CrateNum, ast::CrateNum>;\n \n pub struct crate_metadata {\n     name: @str,\n     data: @~[u8],\n     cnum_map: cnum_map,\n-    cnum: ast::crate_num\n+    cnum: ast::CrateNum\n }\n \n pub struct CStore {\n-    priv metas: HashMap <ast::crate_num, @crate_metadata>,\n+    priv metas: HashMap <ast::CrateNum, @crate_metadata>,\n     priv extern_mod_crate_map: extern_mod_crate_map,\n     priv used_crate_files: ~[Path],\n     priv used_libraries: ~[@str],\n@@ -44,7 +44,7 @@ pub struct CStore {\n }\n \n // Map from node_id's of local extern mod statements to crate numbers\n-type extern_mod_crate_map = HashMap<ast::node_id, ast::crate_num>;\n+type extern_mod_crate_map = HashMap<ast::node_id, ast::CrateNum>;\n \n pub fn mk_cstore(intr: @ident_interner) -> CStore {\n     return CStore {\n@@ -57,33 +57,33 @@ pub fn mk_cstore(intr: @ident_interner) -> CStore {\n     };\n }\n \n-pub fn get_crate_data(cstore: &CStore, cnum: ast::crate_num)\n+pub fn get_crate_data(cstore: &CStore, cnum: ast::CrateNum)\n                    -> @crate_metadata {\n     return *cstore.metas.get(&cnum);\n }\n \n-pub fn get_crate_hash(cstore: &CStore, cnum: ast::crate_num) -> @str {\n+pub fn get_crate_hash(cstore: &CStore, cnum: ast::CrateNum) -> @str {\n     let cdata = get_crate_data(cstore, cnum);\n     decoder::get_crate_hash(cdata.data)\n }\n \n-pub fn get_crate_vers(cstore: &CStore, cnum: ast::crate_num) -> @str {\n+pub fn get_crate_vers(cstore: &CStore, cnum: ast::CrateNum) -> @str {\n     let cdata = get_crate_data(cstore, cnum);\n     decoder::get_crate_vers(cdata.data)\n }\n \n pub fn set_crate_data(cstore: &mut CStore,\n-                      cnum: ast::crate_num,\n+                      cnum: ast::CrateNum,\n                       data: @crate_metadata) {\n     cstore.metas.insert(cnum, data);\n }\n \n-pub fn have_crate_data(cstore: &CStore, cnum: ast::crate_num) -> bool {\n+pub fn have_crate_data(cstore: &CStore, cnum: ast::CrateNum) -> bool {\n     cstore.metas.contains_key(&cnum)\n }\n \n pub fn iter_crate_data(cstore: &CStore,\n-                       i: &fn(ast::crate_num, @crate_metadata)) {\n+                       i: &fn(ast::CrateNum, @crate_metadata)) {\n     for cstore.metas.iter().advance |(&k, &v)| {\n         i(k, v);\n     }\n@@ -126,13 +126,13 @@ pub fn get_used_link_args<'a>(cstore: &'a CStore) -> &'a [@str] {\n \n pub fn add_extern_mod_stmt_cnum(cstore: &mut CStore,\n                                 emod_id: ast::node_id,\n-                                cnum: ast::crate_num) {\n+                                cnum: ast::CrateNum) {\n     cstore.extern_mod_crate_map.insert(emod_id, cnum);\n }\n \n pub fn find_extern_mod_stmt_cnum(cstore: &CStore,\n                                  emod_id: ast::node_id)\n-                       -> Option<ast::crate_num> {\n+                       -> Option<ast::CrateNum> {\n     cstore.extern_mod_crate_map.find(&emod_id).map_consume(|x| *x)\n }\n "}, {"sha": "6e166cfbfc85a360f10e335ef6c91bfafcf5a0bb", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -66,7 +66,7 @@ fn lookup_hash(d: ebml::Doc, eq_fn: &fn(x:&[u8]) -> bool, hash: uint) ->\n     None\n }\n \n-pub type GetCrateDataCb<'self> = &'self fn(ast::crate_num) -> cmd;\n+pub type GetCrateDataCb<'self> = &'self fn(ast::CrateNum) -> cmd;\n \n pub fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n     fn eq_item(bytes: &[u8], item_id: int) -> bool {\n@@ -174,7 +174,7 @@ fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n     None\n }\n \n-fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n+fn item_reqd_and_translated_parent_item(cnum: ast::CrateNum,\n                                         d: ebml::Doc) -> ast::def_id {\n     let trait_did = item_parent_item(d).expect(\"item without parent\");\n     ast::def_id { crate: cnum, node: trait_did.node }\n@@ -311,7 +311,7 @@ fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::ident {\n     }\n }\n \n-fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n+fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::CrateNum)\n     -> def_like {\n     let fam = item_family(item);\n     match fam {\n@@ -349,7 +349,7 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n     }\n }\n \n-pub fn lookup_def(cnum: ast::crate_num, data: @~[u8], did_: ast::def_id) ->\n+pub fn lookup_def(cnum: ast::CrateNum, data: @~[u8], did_: ast::def_id) ->\n    ast::def {\n     let item = lookup_item(did_.node, data);\n     let did = ast::def_id { crate: cnum, node: did_.node };\n@@ -1160,7 +1160,7 @@ pub fn get_crate_attributes(data: @~[u8]) -> ~[ast::Attribute] {\n \n #[deriving(Clone)]\n pub struct crate_dep {\n-    cnum: ast::crate_num,\n+    cnum: ast::CrateNum,\n     name: ast::ident,\n     vers: @str,\n     hash: @str"}, {"sha": "3c02609def11e9e930305e2f1286d714bf9026df", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -1170,14 +1170,14 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n \n fn encode_info_for_items(ecx: &EncodeContext,\n                          ebml_w: &mut writer::Encoder,\n-                         crate: &crate)\n+                         crate: &Crate)\n                          -> ~[entry<int>] {\n     let index = @mut ~[];\n     ebml_w.start_tag(tag_items_data);\n     index.push(entry { val: crate_node_id, pos: ebml_w.writer.tell() });\n     encode_info_for_mod(ecx,\n                         ebml_w,\n-                        &crate.node.module,\n+                        &crate.module,\n                         crate_node_id,\n                         [],\n                         syntax::parse::token::special_idents::invalid,\n@@ -1348,7 +1348,7 @@ fn encode_attributes(ebml_w: &mut writer::Encoder, attrs: &[Attribute]) {\n // 'name' and 'vers' items, so if the user didn't provide them we will throw\n // them in anyway with default values.\n fn synthesize_crate_attrs(ecx: &EncodeContext,\n-                          crate: &crate) -> ~[Attribute] {\n+                          crate: &Crate) -> ~[Attribute] {\n \n     fn synthesize_link_attr(ecx: &EncodeContext, items: ~[@MetaItem]) ->\n        Attribute {\n@@ -1377,7 +1377,7 @@ fn synthesize_crate_attrs(ecx: &EncodeContext,\n \n     let mut attrs = ~[];\n     let mut found_link_attr = false;\n-    for crate.node.attrs.iter().advance |attr| {\n+    for crate.attrs.iter().advance |attr| {\n         attrs.push(\n             if \"link\" != attr.name()  {\n                 *attr\n@@ -1477,11 +1477,11 @@ fn encode_link_args(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n }\n \n fn encode_misc_info(ecx: &EncodeContext,\n-                    crate: &crate,\n+                    crate: &Crate,\n                     ebml_w: &mut writer::Encoder) {\n     ebml_w.start_tag(tag_misc_info);\n     ebml_w.start_tag(tag_misc_info_crate_items);\n-    for crate.node.module.items.iter().advance |&item| {\n+    for crate.module.items.iter().advance |&item| {\n         ebml_w.start_tag(tag_mod_child);\n         ebml_w.wr_str(def_to_str(local_def(item.id)));\n         ebml_w.end_tag();\n@@ -1531,7 +1531,7 @@ pub static metadata_encoding_version : &'static [u8] =\n       0x74, //'t' as u8,\n       0, 0, 0, 1 ];\n \n-pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n+pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     let wr = @io::BytesWriter::new();\n     let stats = Stats {\n         inline_bytes: 0,"}, {"sha": "f3e0779475ccbd2bbaab07a9571f36c6245f5fd6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -291,7 +291,7 @@ fn encode_ast(ebml_w: &mut writer::Encoder, item: ast::inlined_item) {\n // nested items, as otherwise it would get confused when translating\n // inlined items.\n fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n-    fn drop_nested_items(blk: &ast::blk, fld: @fold::ast_fold) -> ast::blk {\n+    fn drop_nested_items(blk: &ast::Block, fld: @fold::ast_fold) -> ast::Block {\n         let stmts_sans_items = do blk.stmts.iter().filter_map |stmt| {\n             match stmt.node {\n               ast::stmt_expr(_, _) | ast::stmt_semi(_, _) |\n@@ -302,7 +302,7 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n               ast::stmt_mac(*) => fail!(\"unexpanded macro in astencode\")\n             }\n         }.collect();\n-        let blk_sans_items = ast::blk {\n+        let blk_sans_items = ast::Block {\n             view_items: ~[], // I don't know if we need the view_items here,\n                              // but it doesn't break tests!\n             stmts: stmts_sans_items,\n@@ -1206,7 +1206,7 @@ fn decode_item_ast(par_doc: ebml::Doc) -> @ast::item {\n \n #[cfg(test)]\n trait fake_ext_ctxt {\n-    fn cfg(&self) -> ast::crate_cfg;\n+    fn cfg(&self) -> ast::CrateConfig;\n     fn parse_sess(&self) -> @mut parse::ParseSess;\n     fn call_site(&self) -> span;\n     fn ident_of(&self, st: &str) -> ast::ident;\n@@ -1217,7 +1217,7 @@ type fake_session = @mut parse::ParseSess;\n \n #[cfg(test)]\n impl fake_ext_ctxt for fake_session {\n-    fn cfg(&self) -> ast::crate_cfg { ~[] }\n+    fn cfg(&self) -> ast::CrateConfig { ~[] }\n     fn parse_sess(&self) -> @mut parse::ParseSess { *self }\n     fn call_site(&self) -> span {\n         codemap::span {"}, {"sha": "31fb1765e43bcded52d6dc492f52157f547c259d", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -44,7 +44,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    dfcx_loans: &LoanDataFlow,\n                    move_data: move_data::FlowedMoveData,\n                    all_loans: &[Loan],\n-                   body: &ast::blk) {\n+                   body: &ast::Block) {\n     debug!(\"check_loans(body id=%?)\", body.id);\n \n     let clcx = CheckLoanCtxt {\n@@ -615,7 +615,7 @@ impl<'self> CheckLoanCtxt<'self> {\n \n fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n                          decl: &ast::fn_decl,\n-                         body: &ast::blk,\n+                         body: &ast::Block,\n                          sp: span,\n                          id: ast::node_id,\n                          (this, visitor): (CheckLoanCtxt<'a>,\n@@ -676,7 +676,7 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n     }\n }\n \n-fn check_loans_in_local<'a>(local: @ast::local,\n+fn check_loans_in_local<'a>(local: @ast::Local,\n                             (this, vt): (CheckLoanCtxt<'a>,\n                                          visit::vt<CheckLoanCtxt<'a>>)) {\n     visit::visit_local(local, (this, vt));\n@@ -745,7 +745,7 @@ fn check_loans_in_pat<'a>(pat: @ast::pat,\n     visit::visit_pat(pat, (this, vt));\n }\n \n-fn check_loans_in_block<'a>(blk: &ast::blk,\n+fn check_loans_in_block<'a>(blk: &ast::Block,\n                             (this, vt): (CheckLoanCtxt<'a>,\n                                          visit::vt<CheckLoanCtxt<'a>>))\n {"}, {"sha": "34cb9c01d91fa554822af80ca45ff0c64dc000f9", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -74,7 +74,7 @@ struct GatherLoanCtxt {\n \n pub fn gather_loans(bccx: @BorrowckCtxt,\n                     decl: &ast::fn_decl,\n-                    body: &ast::blk)\n+                    body: &ast::Block)\n                     -> (id_range, @mut ~[Loan], @mut move_data::MoveData) {\n     let glcx = @mut GatherLoanCtxt {\n         bccx: bccx,\n@@ -109,7 +109,7 @@ fn add_pat_to_id_range(p: @ast::pat,\n \n fn gather_loans_in_fn(fk: &visit::fn_kind,\n                       decl: &ast::fn_decl,\n-                      body: &ast::blk,\n+                      body: &ast::Block,\n                       sp: span,\n                       id: ast::node_id,\n                       (this, v): (@mut GatherLoanCtxt,\n@@ -131,21 +131,21 @@ fn gather_loans_in_fn(fk: &visit::fn_kind,\n     }\n }\n \n-fn gather_loans_in_block(blk: &ast::blk,\n+fn gather_loans_in_block(blk: &ast::Block,\n                          (this, vt): (@mut GatherLoanCtxt,\n                                       visit::vt<@mut GatherLoanCtxt>)) {\n     this.id_range.add(blk.id);\n     visit::visit_block(blk, (this, vt));\n }\n \n-fn gather_loans_in_local(local: @ast::local,\n+fn gather_loans_in_local(local: @ast::Local,\n                          (this, vt): (@mut GatherLoanCtxt,\n                                       visit::vt<@mut GatherLoanCtxt>)) {\n-    match local.node.init {\n+    match local.init {\n         None => {\n             // Variable declarations without initializers are considered \"moves\":\n             let tcx = this.bccx.tcx;\n-            do pat_util::pat_bindings(tcx.def_map, local.node.pat)\n+            do pat_util::pat_bindings(tcx.def_map, local.pat)\n                 |_, id, span, _| {\n                 gather_moves::gather_decl(this.bccx,\n                                           this.move_data,\n@@ -157,7 +157,7 @@ fn gather_loans_in_local(local: @ast::local,\n         Some(init) => {\n             // Variable declarations with initializers are considered \"assigns\":\n             let tcx = this.bccx.tcx;\n-            do pat_util::pat_bindings(tcx.def_map, local.node.pat)\n+            do pat_util::pat_bindings(tcx.def_map, local.pat)\n                 |_, id, span, _| {\n                 gather_moves::gather_assignment(this.bccx,\n                                                 this.move_data,\n@@ -167,7 +167,7 @@ fn gather_loans_in_local(local: @ast::local,\n                                                 id);\n             }\n             let init_cmt = this.bccx.cat_expr(init);\n-            this.gather_pat(init_cmt, local.node.pat, None);\n+            this.gather_pat(init_cmt, local.pat, None);\n         }\n     }\n \n@@ -608,7 +608,7 @@ impl GatherLoanCtxt {\n \n     fn gather_fn_arg_patterns(&mut self,\n                               decl: &ast::fn_decl,\n-                              body: &ast::blk) {\n+                              body: &ast::Block) {\n         /*!\n          * Walks the patterns for fn arguments, checking that they\n          * do not attempt illegal moves or create refs that outlive"}, {"sha": "b307280729ed47f4789866bad76faa81e3274368", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -66,7 +66,7 @@ pub fn check_crate(\n     moves_map: moves::MovesMap,\n     moved_variables_set: moves::MovedVariablesSet,\n     capture_map: moves::CaptureMap,\n-    crate: &ast::crate) -> (root_map, write_guard_map)\n+    crate: &ast::Crate) -> (root_map, write_guard_map)\n {\n     let bccx = @BorrowckCtxt {\n         tcx: tcx,\n@@ -116,7 +116,7 @@ pub fn check_crate(\n \n fn borrowck_fn(fk: &visit::fn_kind,\n                decl: &ast::fn_decl,\n-               body: &ast::blk,\n+               body: &ast::Block,\n                sp: span,\n                id: ast::node_id,\n                (this, v): (@BorrowckCtxt,"}, {"sha": "917714b6f511031289c446c5baae14cc72504a25", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -473,7 +473,7 @@ impl FlowedMoveData {\n                tcx: ty::ctxt,\n                method_map: typeck::method_map,\n                id_range: ast_util::id_range,\n-               body: &ast::blk)\n+               body: &ast::Block)\n                -> FlowedMoveData\n     {\n         let mut dfcx_moves ="}, {"sha": "aee8ae32178d23d244ef7d7a515771f9a55d6f0f", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -33,7 +33,7 @@ struct LoopScope {\n \n pub fn construct(tcx: ty::ctxt,\n                  method_map: typeck::method_map,\n-                 blk: &ast::blk) -> CFG {\n+                 blk: &ast::Block) -> CFG {\n     let mut cfg_builder = CFGBuilder {\n         exit_map: HashMap::new(),\n         graph: graph::Graph::new(),\n@@ -51,7 +51,7 @@ pub fn construct(tcx: ty::ctxt,\n }\n \n impl CFGBuilder {\n-    fn block(&mut self, blk: &ast::blk, pred: CFGIndex) -> CFGIndex {\n+    fn block(&mut self, blk: &ast::Block, pred: CFGIndex) -> CFGIndex {\n         let mut stmts_exit = pred;\n         for blk.stmts.iter().advance |&stmt| {\n             stmts_exit = self.stmt(stmt, stmts_exit);\n@@ -81,8 +81,8 @@ impl CFGBuilder {\n     fn decl(&mut self, decl: @ast::decl, pred: CFGIndex) -> CFGIndex {\n         match decl.node {\n             ast::decl_local(local) => {\n-                let init_exit = self.opt_expr(local.node.init, pred);\n-                self.pat(local.node.pat, init_exit)\n+                let init_exit = self.opt_expr(local.init, pred);\n+                self.pat(local.pat, init_exit)\n             }\n \n             ast::decl_item(_) => {\n@@ -374,7 +374,7 @@ impl CFGBuilder {\n             ast::expr_struct(_, ref fields, base) => {\n                 let base_exit = self.opt_expr(base, pred);\n                 let field_exprs: ~[@ast::expr] =\n-                    fields.iter().transform(|f| f.node.expr).collect();\n+                    fields.iter().transform(|f| f.expr).collect();\n                 self.straightline(expr, base_exit, field_exprs)\n             }\n "}, {"sha": "9199891c4a03601f941fbebd8113e0014902cdb2", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -55,7 +55,7 @@ pub struct CFGIndices {\n impl CFG {\n     pub fn new(tcx: ty::ctxt,\n                method_map: typeck::method_map,\n-               blk: &ast::blk) -> CFG {\n+               blk: &ast::Block) -> CFG {\n         construct::construct(tcx, method_map, blk)\n     }\n }\n\\ No newline at end of file"}, {"sha": "7e313ca69654e55890396ef801c75f3979e2d69c", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -20,7 +20,7 @@ use syntax::codemap;\n use syntax::{visit, ast_util, ast_map};\n \n pub fn check_crate(sess: Session,\n-                   crate: &crate,\n+                   crate: &Crate,\n                    ast_map: ast_map::map,\n                    def_map: resolve::DefMap,\n                    method_map: typeck::method_map,"}, {"sha": "ae9a96dee1ac32c26735da344f97e5d3ec60788a", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -20,7 +20,7 @@ pub struct Context {\n     can_ret: bool\n }\n \n-pub fn check_crate(tcx: ty::ctxt, crate: &crate) {\n+pub fn check_crate(tcx: ty::ctxt, crate: &Crate) {\n     visit::visit_crate(crate,\n                        (Context { in_loop: false, can_ret: true },\n                        visit::mk_vt(@visit::Visitor {"}, {"sha": "36edb567a507b6ec91727adb047a02b363a3abd2", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -36,7 +36,7 @@ pub struct MatchCheckCtxt {\n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: method_map,\n                    moves_map: moves::MovesMap,\n-                   crate: &crate) {\n+                   crate: &Crate) {\n     let cx = @MatchCheckCtxt {tcx: tcx,\n                               method_map: method_map,\n                               moves_map: moves_map};\n@@ -738,23 +738,23 @@ pub fn default(cx: &MatchCheckCtxt, r: &[@pat]) -> Option<~[@pat]> {\n }\n \n pub fn check_local(cx: &MatchCheckCtxt,\n-                   loc: @local,\n+                   loc: @Local,\n                    (s, v): ((),\n                             visit::vt<()>)) {\n     visit::visit_local(loc, (s, v));\n-    if is_refutable(cx, loc.node.pat) {\n-        cx.tcx.sess.span_err(loc.node.pat.span,\n+    if is_refutable(cx, loc.pat) {\n+        cx.tcx.sess.span_err(loc.pat.span,\n                              \"refutable pattern in local binding\");\n     }\n \n     // Check legality of move bindings.\n-    check_legality_of_move_bindings(cx, false, [ loc.node.pat ]);\n+    check_legality_of_move_bindings(cx, false, [ loc.pat ]);\n }\n \n pub fn check_fn(cx: &MatchCheckCtxt,\n                 kind: &visit::fn_kind,\n                 decl: &fn_decl,\n-                body: &blk,\n+                body: &Block,\n                 sp: span,\n                 id: node_id,\n                 (s, v): ((),"}, {"sha": "59dbc7251da7604f90bd428ae502ab046226c418", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -117,7 +117,7 @@ pub fn classify(e: &expr,\n \n               ast::expr_struct(_, ref fs, None) => {\n                 let cs = do fs.iter().transform |f| {\n-                    classify(f.node.expr, tcx)\n+                    classify(f.expr, tcx)\n                 };\n                 join_all(cs)\n               }\n@@ -265,7 +265,7 @@ pub fn lookup_constness(tcx: ty::ctxt, e: &expr) -> constness {\n     }\n }\n \n-pub fn process_crate(crate: &ast::crate,\n+pub fn process_crate(crate: &ast::Crate,\n                      tcx: ty::ctxt) {\n     let v = visit::mk_simple_visitor(@visit::SimpleVisitor {\n         visit_expr_post: |e| { classify(e, tcx); },"}, {"sha": "2cdae04478ca3be2a96031ce976c948556990c74", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -297,7 +297,7 @@ impl<O:DataFlowOperator> DataFlowContext<O> {\n \n impl<O:DataFlowOperator+Clone+'static> DataFlowContext<O> {\n //                      ^^^^^^^^^^^^^ only needed for pretty printing\n-    pub fn propagate(&mut self, blk: &ast::blk) {\n+    pub fn propagate(&mut self, blk: &ast::Block) {\n         //! Performs the data flow analysis.\n \n         if self.bits_per_id == 0 {\n@@ -329,7 +329,7 @@ impl<O:DataFlowOperator+Clone+'static> DataFlowContext<O> {\n         });\n     }\n \n-    fn pretty_print_to(@self, wr: @io::Writer, blk: &ast::blk) {\n+    fn pretty_print_to(@self, wr: @io::Writer, blk: &ast::Block) {\n         let pre: @fn(pprust::ann_node) = |node| {\n             let (ps, id) = match node {\n                 pprust::node_expr(ps, expr) => (ps, expr.id),\n@@ -383,7 +383,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     }\n \n     fn walk_block(&mut self,\n-                  blk: &ast::blk,\n+                  blk: &ast::Block,\n                   in_out: &mut [uint],\n                   loop_scopes: &mut ~[LoopScope]) {\n         debug!(\"DataFlowContext::walk_block(blk.id=%?, in_out=%s)\",\n@@ -425,8 +425,8 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                  loop_scopes: &mut ~[LoopScope]) {\n         match decl.node {\n             ast::decl_local(local) => {\n-                self.walk_opt_expr(local.node.init, in_out, loop_scopes);\n-                self.walk_pat(local.node.pat, in_out, loop_scopes);\n+                self.walk_opt_expr(local.init, in_out, loop_scopes);\n+                self.walk_pat(local.pat, in_out, loop_scopes);\n             }\n \n             ast::decl_item(_) => {}\n@@ -705,7 +705,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n \n             ast::expr_struct(_, ref fields, with_expr) => {\n                 for fields.iter().advance |field| {\n-                    self.walk_expr(field.node.expr, in_out, loop_scopes);\n+                    self.walk_expr(field.expr, in_out, loop_scopes);\n                 }\n                 self.walk_opt_expr(with_expr, in_out, loop_scopes);\n             }"}, {"sha": "c89b0d97ff0fb268233c481e65f9a89938bab027", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -47,7 +47,7 @@ fn type_is_unsafe_function(ty: ty::t) -> bool {\n \n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: method_map,\n-                   crate: &ast::crate) {\n+                   crate: &ast::Crate) {\n     let context = @mut Context {\n         method_map: method_map,\n         unsafe_context: SafeContext,"}, {"sha": "28927764a9f15938e04a3578241368001f046d2a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -12,7 +12,7 @@\n use driver::session;\n use driver::session::Session;\n use syntax::parse::token::special_idents;\n-use syntax::ast::{crate, node_id, item, item_fn};\n+use syntax::ast::{Crate, node_id, item, item_fn};\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::visit::{default_visitor, mk_vt, vt, Visitor, visit_crate, visit_item};\n@@ -40,7 +40,7 @@ struct EntryContext {\n \n type EntryVisitor = vt<@mut EntryContext>;\n \n-pub fn find_entry_point(session: Session, crate: &crate, ast_map: ast_map::map) {\n+pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map) {\n \n     // FIXME #4404 android JNI hacks\n     if *session.building_library &&"}, {"sha": "799ceec09cf646d7203ee65eaa64898ab12ecbb2", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -34,7 +34,7 @@ pub type freevar_map = @mut HashMap<ast::node_id, freevar_info>;\n // Since we want to be able to collect upvars in some arbitrary piece\n // of the AST, we take a walker function that we invoke with a visitor\n // in order to start the search.\n-fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n+fn collect_freevars(def_map: resolve::DefMap, blk: &ast::Block)\n     -> freevar_info {\n     let seen = @mut HashMap::new();\n     let refs = @mut ~[];\n@@ -87,13 +87,13 @@ fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n // efficient as it fully recomputes the free variables at every\n // node of interest rather than building up the free variables in\n // one pass. This could be improved upon if it turns out to matter.\n-pub fn annotate_freevars(def_map: resolve::DefMap, crate: &ast::crate) ->\n+pub fn annotate_freevars(def_map: resolve::DefMap, crate: &ast::Crate) ->\n    freevar_map {\n     let freevars = @mut HashMap::new();\n \n     let walk_fn: @fn(&visit::fn_kind,\n                      &ast::fn_decl,\n-                     &ast::blk,\n+                     &ast::Block,\n                      span,\n                      ast::node_id) = |_, _, blk, _, nid| {\n         let vars = collect_freevars(def_map, blk);"}, {"sha": "eb9d18c9b2424d46bafc93880365d24bf8f94914", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -59,7 +59,7 @@ pub struct Context {\n \n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: typeck::method_map,\n-                   crate: &crate) {\n+                   crate: &Crate) {\n     let ctx = Context {\n         tcx: tcx,\n         method_map: method_map,\n@@ -107,7 +107,7 @@ fn check_struct_safe_for_destructor(cx: Context,\n     }\n }\n \n-fn check_block(block: &blk, (cx, visitor): (Context, visit::vt<Context>)) {\n+fn check_block(block: &Block, (cx, visitor): (Context, visit::vt<Context>)) {\n     visit::visit_block(block, (cx, visitor));\n }\n \n@@ -227,7 +227,7 @@ fn with_appropriate_checker(cx: Context, id: node_id,\n fn check_fn(\n     fk: &visit::fn_kind,\n     decl: &fn_decl,\n-    body: &blk,\n+    body: &Block,\n     sp: span,\n     fn_id: node_id,\n     (cx, v): (Context,"}, {"sha": "6bc4564bb13b158a638653dd47cb39e6a928f069", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -23,7 +23,7 @@\n use driver::session::Session;\n use metadata::csearch::each_lang_item;\n use metadata::cstore::iter_crate_data;\n-use syntax::ast::{crate, def_id, MetaItem};\n+use syntax::ast::{Crate, def_id, MetaItem};\n use syntax::ast_util::local_def;\n use syntax::attr::AttrMetaMethods;\n use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n@@ -291,14 +291,14 @@ impl LanguageItems {\n struct LanguageItemCollector<'self> {\n     items: LanguageItems,\n \n-    crate: &'self crate,\n+    crate: &'self Crate,\n     session: Session,\n \n     item_refs: HashMap<@str, uint>,\n }\n \n impl<'self> LanguageItemCollector<'self> {\n-    pub fn new<'a>(crate: &'a crate, session: Session)\n+    pub fn new<'a>(crate: &'a Crate, session: Session)\n                    -> LanguageItemCollector<'a> {\n         let mut item_refs = HashMap::new();\n \n@@ -442,7 +442,7 @@ impl<'self> LanguageItemCollector<'self> {\n     }\n }\n \n-pub fn collect_language_items(crate: &crate,\n+pub fn collect_language_items(crate: &Crate,\n                               session: Session)\n                            -> LanguageItems {\n     let mut collector = LanguageItemCollector::new(crate, session);"}, {"sha": "4bcb40a5fba500e8cf159f7320635d8aa88eb4d5", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -127,7 +127,7 @@ pub type LintDict = HashMap<&'static str, LintSpec>;\n enum AttributedNode<'self> {\n     Item(@ast::item),\n     Method(&'self ast::method),\n-    Crate(@ast::crate),\n+    Crate(@ast::Crate),\n }\n \n #[deriving(Eq)]\n@@ -938,8 +938,8 @@ fn lint_unused_mut() -> visit::vt<@mut Context> {\n \n     visit::mk_vt(@visit::Visitor {\n         visit_local: |l, (cx, vt): (@mut Context, visit::vt<@mut Context>)| {\n-            if l.node.is_mutbl {\n-                check_pat(cx, l.node.pat);\n+            if l.is_mutbl {\n+                check_pat(cx, l.pat);\n             }\n             visit::visit_local(l, (cx, vt));\n         },\n@@ -1095,7 +1095,7 @@ fn lint_missing_doc() -> visit::vt<@mut Context> {\n     })\n }\n \n-pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n+pub fn check_crate(tcx: ty::ctxt, crate: @ast::Crate) {\n     let cx = @mut Context {\n         dict: @get_lint_dict(),\n         curr: SmallIntMap::new(),\n@@ -1128,7 +1128,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     cx.add_lint(lint_missing_doc());\n \n     // Actually perform the lint checks (iterating the ast)\n-    do cx.with_lint_attrs(crate.node.attrs) {\n+    do cx.with_lint_attrs(crate.attrs) {\n         cx.process(Crate(crate));\n \n         visit::visit_crate(crate, (cx, visit::mk_vt(@visit::Visitor {"}, {"sha": "f9b42d593c25791160312583ddbabdfb9cd568a5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -155,7 +155,7 @@ fn live_node_kind_to_str(lnk: LiveNodeKind, cx: ty::ctxt) -> ~str {\n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: typeck::method_map,\n                    capture_map: moves::CaptureMap,\n-                   crate: &crate) {\n+                   crate: &Crate) {\n     let visitor = visit::mk_vt(@visit::Visitor {\n         visit_fn: visit_fn,\n         visit_local: visit_local,\n@@ -343,7 +343,7 @@ impl IrMaps {\n \n fn visit_fn(fk: &visit::fn_kind,\n             decl: &fn_decl,\n-            body: &blk,\n+            body: &Block,\n             sp: span,\n             id: node_id,\n             (this, v): (@mut IrMaps,\n@@ -414,20 +414,20 @@ fn visit_fn(fk: &visit::fn_kind,\n     lsets.warn_about_unused_args(decl, entry_ln);\n }\n \n-fn visit_local(local: @local, (this, vt): (@mut IrMaps, vt<@mut IrMaps>)) {\n+fn visit_local(local: @Local, (this, vt): (@mut IrMaps, vt<@mut IrMaps>)) {\n     let def_map = this.tcx.def_map;\n-    do pat_util::pat_bindings(def_map, local.node.pat) |_bm, p_id, sp, path| {\n+    do pat_util::pat_bindings(def_map, local.pat) |_bm, p_id, sp, path| {\n         debug!(\"adding local variable %d\", p_id);\n         let name = ast_util::path_to_ident(path);\n         this.add_live_node_for_node(p_id, VarDefNode(sp));\n-        let kind = match local.node.init {\n+        let kind = match local.init {\n           Some(_) => FromLetWithInitializer,\n           None => FromLetNoInitializer\n         };\n         this.add_variable(Local(LocalInfo {\n           id: p_id,\n           ident: name,\n-          is_mutbl: local.node.is_mutbl,\n+          is_mutbl: local.is_mutbl,\n           kind: kind\n         }));\n     }\n@@ -884,7 +884,7 @@ impl Liveness {\n \n     // _______________________________________________________________________\n \n-    pub fn compute(&self, decl: &fn_decl, body: &blk) -> LiveNode {\n+    pub fn compute(&self, decl: &fn_decl, body: &Block) -> LiveNode {\n         // if there is a `break` or `again` at the top level, then it's\n         // effectively a return---this only occurs in `for` loops,\n         // where the body is really a closure.\n@@ -909,7 +909,7 @@ impl Liveness {\n         entry_ln\n     }\n \n-    pub fn propagate_through_fn_block(&self, _: &fn_decl, blk: &blk)\n+    pub fn propagate_through_fn_block(&self, _: &fn_decl, blk: &Block)\n                                       -> LiveNode {\n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n@@ -921,7 +921,7 @@ impl Liveness {\n         self.propagate_through_block(blk, self.s.fallthrough_ln)\n     }\n \n-    pub fn propagate_through_block(&self, blk: &blk, succ: LiveNode)\n+    pub fn propagate_through_block(&self, blk: &Block, succ: LiveNode)\n                                    -> LiveNode {\n         let succ = self.propagate_through_opt_expr(blk.expr, succ);\n         do blk.stmts.rev_iter().fold(succ) |succ, stmt| {\n@@ -956,7 +956,7 @@ impl Liveness {\n         }\n     }\n \n-    pub fn propagate_through_local(&self, local: &local, succ: LiveNode)\n+    pub fn propagate_through_local(&self, local: &Local, succ: LiveNode)\n                                    -> LiveNode {\n         // Note: we mark the variable as defined regardless of whether\n         // there is an initializer.  Initially I had thought to only mark\n@@ -972,8 +972,8 @@ impl Liveness {\n         // initialization, which is mildly more complex than checking\n         // once at the func header but otherwise equivalent.\n \n-        let succ = self.propagate_through_opt_expr(local.node.init, succ);\n-        self.define_bindings_in_pat(local.node.pat, succ)\n+        let succ = self.propagate_through_opt_expr(local.init, succ);\n+        self.define_bindings_in_pat(local.pat, succ)\n     }\n \n     pub fn propagate_through_exprs(&self, exprs: &[@expr], succ: LiveNode)\n@@ -1161,7 +1161,7 @@ impl Liveness {\n           expr_struct(_, ref fields, with_expr) => {\n             let succ = self.propagate_through_opt_expr(with_expr, succ);\n             do fields.rev_iter().fold(succ) |succ, field| {\n-                self.propagate_through_expr(field.node.expr, succ)\n+                self.propagate_through_expr(field.expr, succ)\n             }\n           }\n \n@@ -1331,7 +1331,7 @@ impl Liveness {\n     pub fn propagate_through_loop(&self,\n                                   expr: &expr,\n                                   cond: Option<@expr>,\n-                                  body: &blk,\n+                                  body: &Block,\n                                   succ: LiveNode)\n                                   -> LiveNode {\n \n@@ -1406,18 +1406,18 @@ impl Liveness {\n // _______________________________________________________________________\n // Checking for error conditions\n \n-fn check_local(local: @local, (this, vt): (@Liveness, vt<@Liveness>)) {\n-    match local.node.init {\n+fn check_local(local: @Local, (this, vt): (@Liveness, vt<@Liveness>)) {\n+    match local.init {\n       Some(_) => {\n-        this.warn_about_unused_or_dead_vars_in_pat(local.node.pat);\n+        this.warn_about_unused_or_dead_vars_in_pat(local.pat);\n       }\n       None => {\n \n         // No initializer: the variable might be unused; if not, it\n         // should not be live at this point.\n \n         debug!(\"check_local() with no initializer\");\n-        do this.pat_bindings(local.node.pat) |ln, var, sp, id| {\n+        do this.pat_bindings(local.pat) |ln, var, sp, id| {\n             if !this.warn_about_unused(sp, id, ln, var) {\n                 match this.live_on_exit(ln, var) {\n                   None => { /* not live: good */ }\n@@ -1491,7 +1491,7 @@ fn check_expr(expr: @expr, (this, vt): (@Liveness, vt<@Liveness>)) {\n }\n \n fn check_fn(_fk: &visit::fn_kind, _decl: &fn_decl,\n-            _body: &blk, _sp: span, _id: node_id,\n+            _body: &Block, _sp: span, _id: node_id,\n             (_self, _v): (@Liveness, vt<@Liveness>)) {\n     // do not check contents of nested fns\n }"}, {"sha": "d8ce0a966363103e68cab4880559c208cdc97c23", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -192,7 +192,7 @@ enum UseMode {\n \n pub fn compute_moves(tcx: ty::ctxt,\n                      method_map: method_map,\n-                     crate: &crate) -> MoveMaps\n+                     crate: &Crate) -> MoveMaps\n {\n     let visitor = visit::mk_vt(@visit::Visitor {\n         visit_fn: compute_modes_for_fn,\n@@ -227,18 +227,18 @@ pub fn moved_variable_node_id_from_def(def: def) -> Option<node_id> {\n ///////////////////////////////////////////////////////////////////////////\n // Expressions\n \n-fn compute_modes_for_local<'a>(local: @local,\n+fn compute_modes_for_local<'a>(local: @Local,\n                                (cx, v): (VisitContext,\n                                          vt<VisitContext>)) {\n-    cx.use_pat(local.node.pat);\n-    for local.node.init.iter().advance |&init| {\n+    cx.use_pat(local.pat);\n+    for local.init.iter().advance |&init| {\n         cx.use_expr(init, Read, v);\n     }\n }\n \n fn compute_modes_for_fn(fk: &visit::fn_kind,\n                         decl: &fn_decl,\n-                        body: &blk,\n+                        body: &Block,\n                         span: span,\n                         id: node_id,\n                         (cx, v): (VisitContext,\n@@ -281,7 +281,7 @@ impl VisitContext {\n         };\n     }\n \n-    pub fn consume_block(&self, blk: &blk, visitor: vt<VisitContext>) {\n+    pub fn consume_block(&self, blk: &Block, visitor: vt<VisitContext>) {\n         /*!\n          * Indicates that the value of `blk` will be consumed,\n          * meaning either copied or moved depending on its type.\n@@ -394,7 +394,7 @@ impl VisitContext {\n \n             expr_struct(_, ref fields, opt_with) => {\n                 for fields.iter().advance |field| {\n-                    self.consume_expr(field.node.expr, visitor);\n+                    self.consume_expr(field.expr, visitor);\n                 }\n \n                 for opt_with.iter().advance |with_expr| {\n@@ -417,7 +417,7 @@ impl VisitContext {\n                     // specified and (2) have a type that\n                     // moves-by-default:\n                     let consume_with = with_fields.iter().any(|tf| {\n-                        !fields.iter().any(|f| f.node.ident == tf.ident) &&\n+                        !fields.iter().any(|f| f.ident == tf.ident) &&\n                             ty::type_moves_by_default(self.tcx, tf.mt.ty)\n                     });\n "}, {"sha": "1ea32b3f4046996da86288eefdaaf0a5d40d6524", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -39,7 +39,7 @@ use syntax::visit;\n \n pub fn check_crate<'mm>(tcx: ty::ctxt,\n                    method_map: &'mm method_map,\n-                   crate: &ast::crate) {\n+                   crate: &ast::Crate) {\n     let privileged_items = @mut ~[];\n \n     // Adds an item to its scope.\n@@ -413,9 +413,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span,\n-                                                 &entry.origin,\n-                                                 ident);\n+                                    check_method(expr.span, &entry.origin, ident);\n                                 }\n                             }\n                         }\n@@ -433,8 +431,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 for (*fields).iter().advance |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 field in struct literal\");\n-                                    check_field(expr.span, id,\n-                                                field.node.ident);\n+                                    check_field(expr.span, id, field.ident);\n                                 }\n                             }\n                         }\n@@ -448,8 +445,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                                         checking field in \\\n                                                         struct variant \\\n                                                         literal\");\n-                                            check_field(expr.span, variant_id,\n-                                                        field.node.ident);\n+                                            check_field(expr.span, variant_id, field.ident);\n                                         }\n                                     }\n                                     _ => {\n@@ -499,8 +495,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 for fields.iter().advance |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 struct pattern\");\n-                                    check_field(pattern.span, id,\n-                                                field.ident);\n+                                    check_field(pattern.span, id, field.ident);\n                                 }\n                             }\n                         }\n@@ -513,9 +508,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                             debug!(\"(privacy checking) \\\n                                                     checking field in \\\n                                                     struct variant pattern\");\n-                                            check_field(pattern.span,\n-                                                        variant_id,\n-                                                        field.ident);\n+                                            check_field(pattern.span, variant_id, field.ident);\n                                         }\n                                     }\n                                     _ => {"}, {"sha": "fe2afd22edd5f632627653da64f81b62c27b5522", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -110,7 +110,7 @@ impl ReachableContext {\n \n     // Step 1: Mark all public symbols, and add all public symbols that might\n     // be inlined to a worklist.\n-    fn mark_public_symbols(&self, crate: @crate) {\n+    fn mark_public_symbols(&self, crate: @Crate) {\n         let reachable_symbols = self.reachable_symbols;\n         let worklist = self.worklist;\n         let visitor = visit::mk_vt(@Visitor {\n@@ -403,7 +403,7 @@ impl ReachableContext {\n \n pub fn find_reachable(tcx: ty::ctxt,\n                       method_map: typeck::method_map,\n-                      crate: @crate)\n+                      crate: @Crate)\n                       -> @mut HashSet<node_id> {\n     // XXX(pcwalton): We only need to mark symbols that are exported. But this\n     // is more complicated than just looking at whether the symbol is `pub`,"}, {"sha": "bbe3abd3dd219dab3efee4c46616ed8d8074331f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -323,7 +323,7 @@ fn parent_to_expr(cx: Context, child_id: ast::node_id, sp: span) {\n     }\n }\n \n-fn resolve_block(blk: &ast::blk, (cx, visitor): (Context, visit::vt<Context>)) {\n+fn resolve_block(blk: &ast::Block, (cx, visitor): (Context, visit::vt<Context>)) {\n     // Record the parent of this block.\n     parent_to_expr(cx, blk.id, blk.span);\n \n@@ -398,11 +398,11 @@ fn resolve_expr(expr: @ast::expr, (cx, visitor): (Context, visit::vt<Context>))\n     visit::visit_expr(expr, (new_cx, visitor));\n }\n \n-fn resolve_local(local: @ast::local,\n+fn resolve_local(local: @ast::Local,\n                  (cx, visitor) : (Context,\n                                   visit::vt<Context>)) {\n     assert_eq!(cx.var_parent, cx.parent);\n-    parent_to_expr(cx, local.node.id, local.span);\n+    parent_to_expr(cx, local.id, local.span);\n     visit::visit_local(local, (cx, visitor));\n }\n \n@@ -414,7 +414,7 @@ fn resolve_item(item: @ast::item, (cx, visitor): (Context, visit::vt<Context>))\n \n fn resolve_fn(fk: &visit::fn_kind,\n               decl: &ast::fn_decl,\n-              body: &ast::blk,\n+              body: &ast::Block,\n               sp: span,\n               id: ast::node_id,\n               (cx, visitor): (Context,\n@@ -457,7 +457,7 @@ fn resolve_fn(fk: &visit::fn_kind,\n \n pub fn resolve_crate(sess: Session,\n                      def_map: resolve::DefMap,\n-                     crate: &ast::crate) -> @mut RegionMaps\n+                     crate: &ast::Crate) -> @mut RegionMaps\n {\n     let region_maps = @mut RegionMaps {\n         scope_map: HashMap::new(),\n@@ -706,7 +706,7 @@ fn determine_rp_in_item(item: @ast::item,\n \n fn determine_rp_in_fn(fk: &visit::fn_kind,\n                       decl: &ast::fn_decl,\n-                      body: &ast::blk,\n+                      body: &ast::Block,\n                       _: span,\n                       _: ast::node_id,\n                       (cx, visitor): (@mut DetermineRpCtxt,\n@@ -874,7 +874,7 @@ fn determine_rp_in_struct_field(\n pub fn determine_rp_in_crate(sess: Session,\n                              ast_map: ast_map::map,\n                              def_map: resolve::DefMap,\n-                             crate: &ast::crate)\n+                             crate: &ast::Crate)\n                           -> region_paramd_items {\n     let cx = @mut DetermineRpCtxt {\n         sess: sess,"}, {"sha": "e2d2ac9cf238a32059b67ca5372132a478a4b65b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -764,7 +764,7 @@ pub fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n \n pub fn Resolver(session: Session,\n                 lang_items: LanguageItems,\n-                crate: @crate)\n+                crate: @Crate)\n              -> Resolver {\n     let graph_root = @mut NameBindings();\n \n@@ -821,7 +821,7 @@ pub fn Resolver(session: Session,\n pub struct Resolver {\n     session: @Session,\n     lang_items: LanguageItems,\n-    crate: @crate,\n+    crate: @Crate,\n \n     intr: @ident_interner,\n \n@@ -1050,7 +1050,7 @@ impl Resolver {\n         }\n     }\n \n-    pub fn block_needs_anonymous_module(@mut self, block: &blk) -> bool {\n+    pub fn block_needs_anonymous_module(@mut self, block: &Block) -> bool {\n         // If the block has view items, we need an anonymous module.\n         if block.view_items.len() > 0 {\n             return true;\n@@ -1544,7 +1544,7 @@ impl Resolver {\n     }\n \n     pub fn build_reduced_graph_for_block(@mut self,\n-                                         block: &blk,\n+                                         block: &Block,\n                                          (parent, visitor):\n                                          (ReducedGraphParent,\n                                           vt<ReducedGraphParent>)) {\n@@ -3709,7 +3709,7 @@ impl Resolver {\n                             rib_kind: RibKind,\n                             optional_declaration: Option<&fn_decl>,\n                             type_parameters: TypeParameters,\n-                            block: &blk,\n+                            block: &Block,\n                             self_binding: SelfBinding,\n                             visitor: ResolveVisitor) {\n         // Create a value rib for the function.\n@@ -3983,14 +3983,14 @@ impl Resolver {\n         visit_mod(module_, span, id, ((), visitor));\n     }\n \n-    pub fn resolve_local(@mut self, local: @local, visitor: ResolveVisitor) {\n-        let mutability = if local.node.is_mutbl {Mutable} else {Immutable};\n+    pub fn resolve_local(@mut self, local: @Local, visitor: ResolveVisitor) {\n+        let mutability = if local.is_mutbl {Mutable} else {Immutable};\n \n         // Resolve the type.\n-        self.resolve_type(&local.node.ty, visitor);\n+        self.resolve_type(&local.ty, visitor);\n \n         // Resolve the initializer, if necessary.\n-        match local.node.init {\n+        match local.init {\n             None => {\n                 // Nothing to do.\n             }\n@@ -4000,7 +4000,7 @@ impl Resolver {\n         }\n \n         // Resolve the pattern.\n-        self.resolve_pattern(local.node.pat, LocalIrrefutableMode, mutability,\n+        self.resolve_pattern(local.pat, LocalIrrefutableMode, mutability,\n                              None, visitor);\n     }\n \n@@ -4073,7 +4073,7 @@ impl Resolver {\n         self.value_ribs.pop();\n     }\n \n-    pub fn resolve_block(@mut self, block: &blk, visitor: ResolveVisitor) {\n+    pub fn resolve_block(@mut self, block: &Block, visitor: ResolveVisitor) {\n         debug!(\"(resolving block) entering block\");\n         self.value_ribs.push(@Rib(NormalRibKind));\n \n@@ -4874,7 +4874,7 @@ impl Resolver {\n           i -= 1;\n           match this.type_ribs[i].kind {\n             MethodRibKind(node_id, _) =>\n-              for this.crate.node.module.items.iter().advance |item| {\n+              for this.crate.module.items.iter().advance |item| {\n                 if item.id == node_id {\n                   match item.node {\n                     item_struct(class_def, _) => {\n@@ -5407,7 +5407,7 @@ pub struct CrateMap {\n /// Entry point to crate resolution.\n pub fn resolve_crate(session: Session,\n                      lang_items: LanguageItems,\n-                     crate: @crate)\n+                     crate: @Crate)\n                   -> CrateMap {\n     let resolver = @mut Resolver(session, lang_items, crate);\n     resolver.resolve();"}, {"sha": "32a5ebe0c39cb100bd884a200a6c5ed4ca9e37c0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -1093,31 +1093,31 @@ pub fn trans_trace(bcx: block, sp_opt: Option<span>, trace_str: @str) {\n     Call(bcx, ccx.upcalls.trace, args);\n }\n \n-pub fn ignore_lhs(_bcx: block, local: &ast::local) -> bool {\n-    match local.node.pat.node {\n+pub fn ignore_lhs(_bcx: block, local: &ast::Local) -> bool {\n+    match local.pat.node {\n         ast::pat_wild => true, _ => false\n     }\n }\n \n-pub fn init_local(bcx: block, local: &ast::local) -> block {\n+pub fn init_local(bcx: block, local: &ast::Local) -> block {\n \n     debug!(\"init_local(bcx=%s, local.id=%?)\",\n-           bcx.to_str(), local.node.id);\n+           bcx.to_str(), local.id);\n     let _indenter = indenter();\n \n     let _icx = push_ctxt(\"init_local\");\n \n     if ignore_lhs(bcx, local) {\n         // Handle let _ = e; just like e;\n-        match local.node.init {\n+        match local.init {\n             Some(init) => {\n               return expr::trans_into(bcx, init, expr::Ignore);\n             }\n             None => { return bcx; }\n         }\n     }\n \n-    _match::store_local(bcx, local.node.pat, local.node.init)\n+    _match::store_local(bcx, local.pat, local.init)\n }\n \n pub fn trans_stmt(cx: block, s: &ast::stmt) -> block {\n@@ -1446,7 +1446,7 @@ pub fn with_scope_datumblock(bcx: block, opt_node_info: Option<NodeInfo>,\n     DatumBlock {bcx: leave_block(bcx, scope_cx), datum: datum}\n }\n \n-pub fn block_locals(b: &ast::blk, it: &fn(@ast::local)) {\n+pub fn block_locals(b: &ast::Block, it: &fn(@ast::Local)) {\n     for b.stmts.iter().advance |s| {\n         match s.node {\n           ast::stmt_decl(d, _) => {\n@@ -1830,7 +1830,7 @@ pub enum self_arg { impl_self(ty::t, ty::SelfMode), no_self, }\n pub fn trans_closure(ccx: @mut CrateContext,\n                      path: path,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      llfndecl: ValueRef,\n                      self_arg: self_arg,\n                      param_substs: Option<@param_substs>,\n@@ -1911,7 +1911,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n pub fn trans_fn(ccx: @mut CrateContext,\n                 path: path,\n                 decl: &ast::fn_decl,\n-                body: &ast::blk,\n+                body: &ast::Block,\n                 llfndecl: ValueRef,\n                 self_arg: self_arg,\n                 param_substs: Option<@param_substs>,\n@@ -2628,7 +2628,7 @@ pub fn trans_constant(ccx: &mut CrateContext, it: @ast::item) {\n     }\n }\n \n-pub fn trans_constants(ccx: @mut CrateContext, crate: &ast::crate) {\n+pub fn trans_constants(ccx: @mut CrateContext, crate: &ast::Crate) {\n     visit::visit_crate(\n         crate, ((),\n         visit::mk_simple_visitor(@visit::SimpleVisitor {\n@@ -2885,7 +2885,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n         }\n }\n \n-pub fn write_metadata(cx: &mut CrateContext, crate: &ast::crate) {\n+pub fn write_metadata(cx: &mut CrateContext, crate: &ast::Crate) {\n     if !*cx.sess.building_library { return; }\n \n     let encode_inlined_item: encoder::encode_inlined_item =\n@@ -2943,7 +2943,7 @@ pub fn write_abi_version(ccx: &mut CrateContext) {\n }\n \n pub fn trans_crate(sess: session::Session,\n-                   crate: &ast::crate,\n+                   crate: &ast::Crate,\n                    tcx: ty::ctxt,\n                    output: &Path,\n                    emap2: resolve::ExportMap2,\n@@ -2984,7 +2984,7 @@ pub fn trans_crate(sess: session::Session,\n \n     {\n         let _icx = push_ctxt(\"text\");\n-        trans_mod(ccx, &crate.node.module);\n+        trans_mod(ccx, &crate.module);\n     }\n \n     decl_gc_metadata(ccx, llmod_id);"}, {"sha": "73adcec71e46227b8ff8b9df2053ef34247e749b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -554,7 +554,7 @@ pub fn trans_lang_call_with_type_params(bcx: block,\n         ArgVals(args), Some(dest), DontAutorefArg).bcx;\n }\n \n-pub fn body_contains_ret(body: &ast::blk) -> bool {\n+pub fn body_contains_ret(body: &ast::Block) -> bool {\n     let cx = @mut false;\n     visit::visit_block(body, (cx, visit::mk_vt(@visit::Visitor {\n         visit_item: |_i, (_cx, _v)| { },"}, {"sha": "5723e24e421b8cb61975a4bfd4c127003366619c", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -358,7 +358,7 @@ pub fn load_environment(fcx: fn_ctxt,\n pub fn trans_expr_fn(bcx: block,\n                      sigil: ast::Sigil,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      outer_id: ast::node_id,\n                      user_id: ast::node_id,\n                      is_loop_body: Option<Option<ValueRef>>,"}, {"sha": "995cda92d9b8ce6bb5bec456793b1b50d5f1a88b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -488,7 +488,7 @@ impl get_node_info for ast::expr {\n     }\n }\n \n-impl get_node_info for ast::blk {\n+impl get_node_info for ast::Block {\n     fn info(&self) -> Option<NodeInfo> {\n         Some(NodeInfo {id: self.id,\n                        callee_id: None,"}, {"sha": "9246ca1f6410b430b40353c1ebcd8fec4a301865", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -488,8 +488,8 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               do expr::with_field_tys(tcx, ety, Some(e.id))\n                   |discr, field_tys| {\n                   let cs = field_tys.map(|field_ty| {\n-                      match fs.iter().find_(|f| field_ty.ident == f.node.ident) {\n-                          Some(f) => const_expr(cx, (*f).node.expr),\n+                      match fs.iter().find_(|f| field_ty.ident == f.ident) {\n+                          Some(f) => const_expr(cx, (*f).expr),\n                           None => {\n                               cx.tcx.sess.span_bug(e.span, \"missing struct field\");\n                           }"}, {"sha": "9ffe3c9f25cedef6fcac6bd16e15288cf1166f62", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -34,7 +34,7 @@ use syntax::ast_map::path_mod;\n use syntax::ast_util;\n use syntax::codemap::span;\n \n-pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n+pub fn trans_block(bcx: block, b: &ast::Block, dest: expr::Dest) -> block {\n     let _icx = push_ctxt(\"trans_block\");\n     let mut bcx = bcx;\n     for b.stmts.iter().advance |s| {\n@@ -55,7 +55,7 @@ pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n \n pub fn trans_if(bcx: block,\n             cond: @ast::expr,\n-            thn: &ast::blk,\n+            thn: &ast::Block,\n             els: Option<@ast::expr>,\n             dest: expr::Dest)\n          -> block {\n@@ -167,7 +167,7 @@ pub fn join_blocks(parent_bcx: block, in_cxs: &[block]) -> block {\n     return out;\n }\n \n-pub fn trans_while(bcx: block, cond: @ast::expr, body: &ast::blk) -> block {\n+pub fn trans_while(bcx: block, cond: @ast::expr, body: &ast::Block) -> block {\n     let _icx = push_ctxt(\"trans_while\");\n     let next_bcx = sub_block(bcx, \"while next\");\n \n@@ -207,7 +207,7 @@ pub fn trans_while(bcx: block, cond: @ast::expr, body: &ast::blk) -> block {\n }\n \n pub fn trans_loop(bcx:block,\n-                  body: &ast::blk,\n+                  body: &ast::Block,\n                   opt_label: Option<ident>)\n                -> block {\n     let _icx = push_ctxt(\"trans_loop\");"}, {"sha": "7518d4eb8247446c447732a10aeb3f64198abd30", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -134,10 +134,10 @@ pub fn finalize(cx: @mut CrateContext) {\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n /// The return value should be ignored if called from outside of the debuginfo module.\n-pub fn create_local_var_metadata(bcx: block, local: @ast::local) -> DIVariable {\n+pub fn create_local_var_metadata(bcx: block, local: @ast::Local) -> DIVariable {\n     let cx = bcx.ccx();\n \n-    let ident = match local.node.pat.node {\n+    let ident = match local.pat.node {\n       ast::pat_ident(_, ref pth, _) => ast_util::path_to_ident(pth),\n       // FIXME this should be handled (#2533)\n       _ => {\n@@ -150,8 +150,8 @@ pub fn create_local_var_metadata(bcx: block, local: @ast::local) -> DIVariable {\n     debug!(\"create_local_var_metadata: %s\", name);\n \n     let loc = span_start(cx, local.span);\n-    let ty = node_id_type(bcx, local.node.id);\n-    let type_metadata = type_metadata(cx, ty, local.node.ty.span);\n+    let ty = node_id_type(bcx, local.id);\n+    let type_metadata = type_metadata(cx, ty, local.ty.span);\n     let file_metadata = file_metadata(cx, loc.file.name);\n \n     let context = match bcx.parent {\n@@ -176,12 +176,12 @@ pub fn create_local_var_metadata(bcx: block, local: @ast::local) -> DIVariable {\n     };\n \n     // FIXME(#6814) Should use `pat_util::pat_bindings` for pats like (a, b) etc\n-    let llptr = match bcx.fcx.lllocals.find_copy(&local.node.pat.id) {\n+    let llptr = match bcx.fcx.lllocals.find_copy(&local.pat.id) {\n         Some(v) => v,\n         None => {\n             bcx.tcx().sess.span_bug(\n                 local.span,\n-                fmt!(\"No entry in lllocals table for %?\", local.node.id));\n+                fmt!(\"No entry in lllocals table for %?\", local.id));\n         }\n     };\n "}, {"sha": "d9fdf8d52c7dc107b527453f94c2252df874a1d5", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -1124,7 +1124,7 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n }\n \n fn trans_rec_or_struct(bcx: block,\n-                       fields: &[ast::field],\n+                       fields: &[ast::Field],\n                        base: Option<@ast::expr>,\n                        expr_span: codemap::span,\n                        id: ast::node_id,\n@@ -1139,11 +1139,11 @@ fn trans_rec_or_struct(bcx: block,\n         let mut need_base = vec::from_elem(field_tys.len(), true);\n \n         let numbered_fields = do fields.map |field| {\n-            let opt_pos = field_tys.iter().position(|field_ty| field_ty.ident == field.node.ident);\n+            let opt_pos = field_tys.iter().position(|field_ty| field_ty.ident == field.ident);\n             match opt_pos {\n                 Some(i) => {\n                     need_base[i] = false;\n-                    (i, field.node.expr)\n+                    (i, field.expr)\n                 }\n                 None => {\n                     tcx.sess.span_bug(field.span,"}, {"sha": "c929506b7d52f8af412fff46d6452063f4c2b80b", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -965,15 +965,15 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n pub fn trans_foreign_fn(ccx: @mut CrateContext,\n                         path: ast_map::path,\n                         decl: &ast::fn_decl,\n-                        body: &ast::blk,\n+                        body: &ast::Block,\n                         llwrapfn: ValueRef,\n                         id: ast::node_id) {\n     let _icx = push_ctxt(\"foreign::build_foreign_fn\");\n \n     fn build_rust_fn(ccx: @mut CrateContext,\n                      path: &ast_map::path,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      id: ast::node_id)\n                   -> ValueRef {\n         let _icx = push_ctxt(\"foreign::foreign::build_rust_fn\");"}, {"sha": "4d5d597d382f14d5adefd545d06e1ed36f0bf774", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -406,15 +406,15 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n     }\n }\n \n-pub fn handle_body(cx: &Context, body: &blk) {\n+pub fn handle_body(cx: &Context, body: &Block) {\n     let v = visit::mk_vt(@visit::Visitor {\n         visit_expr: |e, (cx, v)| {\n             visit::visit_expr(e, (cx, v));\n             mark_for_expr(cx, e);\n         },\n         visit_local: |l, (cx, v)| {\n             visit::visit_local(l, (cx, v));\n-            node_type_needs(cx, use_repr, l.node.id);\n+            node_type_needs(cx, use_repr, l.id);\n         },\n         visit_pat: |p, (cx, v)| {\n             visit::visit_pat(p, (cx, v));"}, {"sha": "cd9d744c24034f5ceb7f99357a34d3d2a50175fc", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -2853,7 +2853,7 @@ pub fn tys_in_fn_sig(sig: &FnSig) -> ~[t] {\n }\n \n // Type accessors for AST nodes\n-pub fn block_ty(cx: ctxt, b: &ast::blk) -> t {\n+pub fn block_ty(cx: ctxt, b: &ast::Block) -> t {\n     return node_id_to_type(cx, b.id);\n }\n "}, {"sha": "c04e1c2515cc533d155b48639e64dc82a398e110", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -193,7 +193,7 @@ impl PurityState {\n         PurityState { def: def, purity: purity, from_fn: true }\n     }\n \n-    pub fn recurse(&mut self, blk: &ast::blk) -> PurityState {\n+    pub fn recurse(&mut self, blk: &ast::Block) -> PurityState {\n         match self.purity {\n             // If this unsafe, then if the outer function was already marked as\n             // unsafe we shouldn't attribute the unsafe'ness to the block. This\n@@ -303,7 +303,7 @@ impl ExprTyProvider for FnCtxt {\n     }\n }\n \n-pub fn check_item_types(ccx: @mut CrateCtxt, crate: &ast::crate) {\n+pub fn check_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n     let visit = visit::mk_simple_visitor(@visit::SimpleVisitor {\n         visit_item: |a| check_item(ccx, a),\n         .. *visit::default_simple_visitor()\n@@ -313,7 +313,7 @@ pub fn check_item_types(ccx: @mut CrateCtxt, crate: &ast::crate) {\n \n pub fn check_bare_fn(ccx: @mut CrateCtxt,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      id: ast::node_id,\n                      self_info: Option<SelfInfo>) {\n     let fty = ty::node_id_to_type(ccx.tcx, id);\n@@ -339,7 +339,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n                 fn_sig: &ty::FnSig,\n                 decl: &ast::fn_decl,\n                 id: ast::node_id,\n-                body: &ast::blk,\n+                body: &ast::Block,\n                 fn_kind: FnKind,\n                 inherited_isr: isr_alist,\n                 inherited: @inherited) -> @mut FnCtxt\n@@ -439,7 +439,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n \n     fn gather_locals(fcx: @mut FnCtxt,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      arg_tys: &[ty::t],\n                      opt_self_info: Option<SelfInfo>) {\n         let tcx = fcx.ccx.tcx;\n@@ -484,17 +484,17 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n \n         // Add explicitly-declared locals.\n-        let visit_local: @fn(@ast::local, ((), visit::vt<()>)) =\n+        let visit_local: @fn(@ast::Local, ((), visit::vt<()>)) =\n                 |local, (e, v)| {\n-            let o_ty = match local.node.ty.node {\n+            let o_ty = match local.ty.node {\n               ast::ty_infer => None,\n-              _ => Some(fcx.to_ty(&local.node.ty))\n+              _ => Some(fcx.to_ty(&local.ty))\n             };\n-            assign(local.node.id, o_ty);\n+            assign(local.id, o_ty);\n             debug!(\"Local variable %s is assigned type %s\",\n-                   fcx.pat_to_str(local.node.pat),\n+                   fcx.pat_to_str(local.pat),\n                    fcx.infcx().ty_to_str(\n-                       fcx.inh.locals.get_copy(&local.node.id)));\n+                       fcx.inh.locals.get_copy(&local.id)));\n             visit::visit_local(local, (e, v));\n         };\n \n@@ -514,7 +514,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n             visit::visit_pat(p, (e, v));\n         };\n \n-        let visit_block: @fn(&ast::blk, ((), visit::vt<()>)) = |b, (e, v)| {\n+        let visit_block: @fn(&ast::Block, ((), visit::vt<()>)) = |b, (e, v)| {\n             // non-obvious: the `blk` variable maps to region lb, so\n             // we have to keep this up-to-date.  This\n             // is... unfortunate.  It'd be nice to not need this.\n@@ -525,7 +525,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n \n         // Don't descend into fns and items\n         fn visit_fn(_fk: &visit::fn_kind, _decl: &ast::fn_decl,\n-                    _body: &ast::blk, _sp: span,\n+                    _body: &ast::Block, _sp: span,\n                     _id: ast::node_id, (_t,_v): ((), visit::vt<()>)) {\n         }\n         fn visit_item(_i: @ast::item, (_e,_v): ((), visit::vt<()>)) { }\n@@ -1456,7 +1456,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     // or if-check\n     fn check_then_else(fcx: @mut FnCtxt,\n                        cond_expr: @ast::expr,\n-                       then_blk: &ast::blk,\n+                       then_blk: &ast::Block,\n                        opt_else_expr: Option<@ast::expr>,\n                        id: ast::node_id,\n                        sp: span,\n@@ -1705,7 +1705,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                      expr: @ast::expr,\n                      ast_sigil_opt: Option<ast::Sigil>,\n                      decl: &ast::fn_decl,\n-                     body: &ast::blk,\n+                     body: &ast::Block,\n                      fn_kind: FnKind,\n                      expected: Option<ty::t>) {\n         let tcx = fcx.ccx.tcx;\n@@ -1872,7 +1872,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                       node_id: ast::node_id,\n                                       substitutions: ty::substs,\n                                       field_types: &[ty::field_ty],\n-                                      ast_fields: &[ast::field],\n+                                      ast_fields: &[ast::Field],\n                                       check_completeness: bool)  {\n         let tcx = fcx.ccx.tcx;\n \n@@ -1888,37 +1888,37 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         for ast_fields.iter().advance |field| {\n             let mut expected_field_type = ty::mk_err();\n \n-            let pair = class_field_map.find(&field.node.ident).\n+            let pair = class_field_map.find(&field.ident).\n                                        map_consume(|x| *x);\n             match pair {\n                 None => {\n                     tcx.sess.span_err(\n                         field.span,\n                         fmt!(\"structure has no field named `%s`\",\n-                             tcx.sess.str_of(field.node.ident)));\n+                             tcx.sess.str_of(field.ident)));\n                     error_happened = true;\n                 }\n                 Some((_, true)) => {\n                     tcx.sess.span_err(\n                         field.span,\n                         fmt!(\"field `%s` specified more than once\",\n-                             tcx.sess.str_of(field.node.ident)));\n+                             tcx.sess.str_of(field.ident)));\n                     error_happened = true;\n                 }\n                 Some((field_id, false)) => {\n                     expected_field_type =\n                         ty::lookup_field_type(\n                             tcx, class_id, field_id, &substitutions);\n                     class_field_map.insert(\n-                        field.node.ident, (field_id, true));\n+                        field.ident, (field_id, true));\n                     fields_found += 1;\n                 }\n             }\n             // Make sure to give a type to the field even if there's\n             // an error, so we can continue typechecking\n             check_expr_coercable_to_type(\n                     fcx,\n-                    field.node.expr,\n+                    field.expr,\n                     expected_field_type);\n         }\n \n@@ -1961,7 +1961,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 id: ast::node_id,\n                                 span: codemap::span,\n                                 class_id: ast::def_id,\n-                                fields: &[ast::field],\n+                                fields: &[ast::Field],\n                                 base_expr: Option<@ast::expr>) {\n         let tcx = fcx.ccx.tcx;\n \n@@ -2051,7 +2051,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                  span: codemap::span,\n                                  enum_id: ast::def_id,\n                                  variant_id: ast::def_id,\n-                                 fields: &[ast::field]) {\n+                                 fields: &[ast::Field]) {\n         let tcx = fcx.ccx.tcx;\n \n         // Look up the number of type parameters and the raw type, and\n@@ -2900,31 +2900,31 @@ pub fn check_decl_initializer(fcx: @mut FnCtxt,\n     check_expr_coercable_to_type(fcx, init, local_ty)\n }\n \n-pub fn check_decl_local(fcx: @mut FnCtxt, local: @ast::local)  {\n+pub fn check_decl_local(fcx: @mut FnCtxt, local: @ast::Local)  {\n     let tcx = fcx.ccx.tcx;\n \n-    let t = fcx.local_ty(local.span, local.node.id);\n-    fcx.write_ty(local.node.id, t);\n+    let t = fcx.local_ty(local.span, local.id);\n+    fcx.write_ty(local.id, t);\n \n-    match local.node.init {\n+    match local.init {\n         Some(init) => {\n-            check_decl_initializer(fcx, local.node.id, init);\n+            check_decl_initializer(fcx, local.id, init);\n             let init_ty = fcx.expr_ty(init);\n             if ty::type_is_error(init_ty) || ty::type_is_bot(init_ty) {\n-                fcx.write_ty(local.node.id, init_ty);\n+                fcx.write_ty(local.id, init_ty);\n             }\n         }\n         _ => {}\n     }\n \n     let pcx = pat_ctxt {\n         fcx: fcx,\n-        map: pat_id_map(tcx.def_map, local.node.pat),\n+        map: pat_id_map(tcx.def_map, local.pat),\n     };\n-    _match::check_pat(&pcx, local.node.pat, t);\n-    let pat_ty = fcx.node_ty(local.node.pat.id);\n+    _match::check_pat(&pcx, local.pat, t);\n+    let pat_ty = fcx.node_ty(local.pat.id);\n     if ty::type_is_error(pat_ty) || ty::type_is_bot(pat_ty) {\n-        fcx.write_ty(local.node.id, pat_ty);\n+        fcx.write_ty(local.id, pat_ty);\n     }\n }\n \n@@ -2938,7 +2938,7 @@ pub fn check_stmt(fcx: @mut FnCtxt, stmt: @ast::stmt)  {\n         match decl.node {\n           ast::decl_local(ref l) => {\n               check_decl_local(fcx, *l);\n-              let l_t = fcx.node_ty(l.node.id);\n+              let l_t = fcx.node_ty(l.id);\n               saw_bot = saw_bot || ty::type_is_bot(l_t);\n               saw_err = saw_err || ty::type_is_error(l_t);\n           }\n@@ -2973,7 +2973,7 @@ pub fn check_stmt(fcx: @mut FnCtxt, stmt: @ast::stmt)  {\n     }\n }\n \n-pub fn check_block_no_value(fcx: @mut FnCtxt, blk: &ast::blk)  {\n+pub fn check_block_no_value(fcx: @mut FnCtxt, blk: &ast::Block)  {\n     check_block_with_expected(fcx, blk, Some(ty::mk_nil()));\n     let blkty = fcx.node_ty(blk.id);\n     if ty::type_is_error(blkty) {\n@@ -2988,12 +2988,12 @@ pub fn check_block_no_value(fcx: @mut FnCtxt, blk: &ast::blk)  {\n     }\n }\n \n-pub fn check_block(fcx0: @mut FnCtxt, blk: &ast::blk)  {\n+pub fn check_block(fcx0: @mut FnCtxt, blk: &ast::Block)  {\n     check_block_with_expected(fcx0, blk, None)\n }\n \n pub fn check_block_with_expected(fcx: @mut FnCtxt,\n-                                 blk: &ast::blk,\n+                                 blk: &ast::Block,\n                                  expected: Option<ty::t>) {\n     let purity_state = fcx.ps.recurse(blk);\n     let prev = replace(&mut fcx.ps, purity_state);\n@@ -3419,7 +3419,7 @@ pub fn ast_expr_vstore_to_vstore(fcx: @mut FnCtxt,\n }\n \n // Returns true if b contains a break that can exit from b\n-pub fn may_break(cx: ty::ctxt, id: ast::node_id, b: &ast::blk) -> bool {\n+pub fn may_break(cx: ty::ctxt, id: ast::node_id, b: &ast::Block) -> bool {\n     // First: is there an unlabeled break immediately\n     // inside the loop?\n     (loop_query(b, |e| {"}, {"sha": "cd49b6e3415020b993507d3d84e8ff0d7f5bb179", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -153,7 +153,7 @@ pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n     fcx.infcx().resolve_regions();\n }\n \n-pub fn regionck_fn(fcx: @mut FnCtxt, blk: &ast::blk) {\n+pub fn regionck_fn(fcx: @mut FnCtxt, blk: &ast::Block) {\n     let rcx = @mut Rcx { fcx: fcx, errors_reported: 0,\n                          repeating_scope: blk.id };\n     if fcx.err_count_since_creation() == 0 {\n@@ -187,7 +187,7 @@ fn visit_item(_item: @ast::item, (_rcx, _v): (@mut Rcx, rvt)) {\n     // Ignore items\n }\n \n-fn visit_block(b: &ast::blk, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_block(b: &ast::Block, (rcx, v): (@mut Rcx, rvt)) {\n     rcx.fcx.tcx().region_maps.record_cleanup_scope(b.id);\n     visit::visit_block(b, (rcx, v));\n }\n@@ -201,9 +201,9 @@ fn visit_arm(arm: &ast::arm, (rcx, v): (@mut Rcx, rvt)) {\n     visit::visit_arm(arm, (rcx, v));\n }\n \n-fn visit_local(l: @ast::local, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_local(l: @ast::Local, (rcx, v): (@mut Rcx, rvt)) {\n     // see above\n-    constrain_bindings_in_pat(l.node.pat, rcx);\n+    constrain_bindings_in_pat(l.pat, rcx);\n     visit::visit_local(l, (rcx, v));\n }\n "}, {"sha": "da09f79d03120afbe17ecc71f5f932d901044095", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -698,7 +698,7 @@ pub fn resolve_impl(ccx: @mut CrateCtxt, impl_item: @ast::item) {\n \n // Detect points where a trait-bounded type parameter is\n // instantiated, resolve the impls for the parameters.\n-pub fn resolve_in_block(fcx: @mut FnCtxt, bl: &ast::blk) {\n+pub fn resolve_in_block(fcx: @mut FnCtxt, bl: &ast::Block) {\n     visit::visit_block(bl, (fcx, visit::mk_vt(@visit::Visitor {\n         visit_expr: resolve_expr,\n         visit_item: |_,_| {},"}, {"sha": "4d437d83f2ab0138a1819089cf6d70e09f84c13f", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -271,7 +271,7 @@ fn visit_expr(e: @ast::expr, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n     visit::visit_expr(e, (wbcx, v));\n }\n \n-fn visit_block(b: &ast::blk, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_block(b: &ast::Block, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n     if !wbcx.success {\n         return;\n     }\n@@ -294,16 +294,16 @@ fn visit_pat(p: @ast::pat, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n     visit::visit_pat(p, (wbcx, v));\n }\n \n-fn visit_local(l: @ast::local, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_local(l: @ast::Local, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n     if !wbcx.success { return; }\n-    let var_ty = wbcx.fcx.local_ty(l.span, l.node.id);\n+    let var_ty = wbcx.fcx.local_ty(l.span, l.id);\n     match resolve_type(wbcx.fcx.infcx(), var_ty, resolve_all | force_all) {\n         Ok(lty) => {\n             debug!(\"Type for local %s (id %d) resolved to %s\",\n-                   pat_to_str(l.node.pat, wbcx.fcx.tcx().sess.intr()),\n-                   l.node.id,\n+                   pat_to_str(l.pat, wbcx.fcx.tcx().sess.intr()),\n+                   l.id,\n                    wbcx.fcx.infcx().ty_to_str(lty));\n-            write_ty_to_tcx(wbcx.fcx.ccx.tcx, l.node.id, lty);\n+            write_ty_to_tcx(wbcx.fcx.ccx.tcx, l.id, lty);\n         }\n         Err(e) => {\n             wbcx.fcx.ccx.tcx.sess.span_err(\n@@ -339,7 +339,7 @@ pub fn resolve_type_vars_in_expr(fcx: @mut FnCtxt, e: @ast::expr) -> bool {\n \n pub fn resolve_type_vars_in_fn(fcx: @mut FnCtxt,\n                                decl: &ast::fn_decl,\n-                               blk: &ast::blk,\n+                               blk: &ast::Block,\n                                self_info: Option<SelfInfo>) -> bool {\n     let wbcx = @mut WbCtxt { fcx: fcx, success: true };\n     let visit = mk_visitor();"}, {"sha": "84a2627c87ccc083dfa9f85aee6e51708a4bd776", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -36,7 +36,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n use middle::typeck::infer;\n-use syntax::ast::{crate, def_id, def_struct, def_ty};\n+use syntax::ast::{Crate, def_id, def_struct, def_ty};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n use syntax::ast::{local_crate, trait_ref, ty_path};\n use syntax::ast;\n@@ -169,7 +169,7 @@ pub struct CoherenceChecker {\n }\n \n impl CoherenceChecker {\n-    pub fn check_coherence(self, crate: &crate) {\n+    pub fn check_coherence(self, crate: &Crate) {\n         // Check implementations and traits. This populates the tables\n         // containing the inherent methods and extension methods. It also\n         // builds up the trait inheritance table.\n@@ -481,7 +481,7 @@ impl CoherenceChecker {\n     }\n \n     // Privileged scope checking\n-    pub fn check_privileged_scopes(self, crate: &crate) {\n+    pub fn check_privileged_scopes(self, crate: &Crate) {\n         visit_crate(crate, ((), mk_vt(@Visitor {\n             visit_item: |item, (_context, visitor)| {\n                 match item.node {\n@@ -882,7 +882,7 @@ fn subst_receiver_types_in_method_ty(tcx: ty::ctxt,\n     )\n }\n \n-pub fn check_coherence(crate_context: @mut CrateCtxt, crate: &crate) {\n+pub fn check_coherence(crate_context: @mut CrateCtxt, crate: &Crate) {\n     let coherence_checker = CoherenceChecker(crate_context);\n     coherence_checker.check_coherence(crate);\n }"}, {"sha": "3db881dac1ac70f0ecb5dc6d35f876532969785f", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -61,7 +61,7 @@ use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n use syntax::parse::token::special_idents;\n \n-pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::crate) {\n+pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n     fn collect_intrinsic_type(ccx: &CrateCtxt,\n                               lang_item: ast::def_id) {\n         let ty::ty_param_bounds_and_ty { ty: ty, _ } ="}, {"sha": "e26402d686d34a68f5458a093e0c66a111765d31", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -34,7 +34,7 @@ use syntax::parse::parse_crate_from_source_str;\n use syntax::{ast, attr, parse};\n \n struct Env {\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     tcx: ty::ctxt,\n     infcx: infer::infer_ctxt,\n     err_messages: @DVec<~str>"}, {"sha": "81b18e746b23a4260f4dac75356b7605c6128eec", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -407,7 +407,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n \n pub fn check_crate(tcx: ty::ctxt,\n                    trait_map: resolve::TraitMap,\n-                   crate: &ast::crate)\n+                   crate: &ast::Crate)\n                 -> (method_map, vtable_map) {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = @mut CrateCtxt {"}, {"sha": "733e8093a9d706788e76c7b34b0019c674ddf00c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -54,15 +54,15 @@ pub fn indenter() -> _indenter {\n     _indenter(())\n }\n \n-pub fn field_expr(f: ast::field) -> @ast::expr { return f.node.expr; }\n+pub fn field_expr(f: ast::Field) -> @ast::expr { return f.expr; }\n \n-pub fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n-    fields.map(|f| f.node.expr)\n+pub fn field_exprs(fields: ~[ast::Field]) -> ~[@ast::expr] {\n+    fields.map(|f| f.expr)\n }\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn loop_query(b: &ast::blk, p: @fn(&ast::expr_) -> bool) -> bool {\n+pub fn loop_query(b: &ast::Block, p: @fn(&ast::expr_) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         (@mut bool,\n@@ -85,7 +85,7 @@ pub fn loop_query(b: &ast::blk, p: @fn(&ast::expr_) -> bool) -> bool {\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn block_query(b: &ast::blk, p: @fn(@ast::expr) -> bool) -> bool {\n+pub fn block_query(b: &ast::Block, p: @fn(@ast::expr) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         (@mut bool,\n@@ -100,8 +100,8 @@ pub fn block_query(b: &ast::blk, p: @fn(@ast::expr) -> bool) -> bool {\n     return *rs;\n }\n \n-pub fn local_rhs_span(l: @ast::local, def: span) -> span {\n-    match l.node.init {\n+pub fn local_rhs_span(l: @ast::Local, def: span) -> span {\n+    match l.init {\n       Some(i) => return i.span,\n       _ => return def\n     }"}, {"sha": "287cb6cf15fe309f08e94da0b649bd3dcbf3e093", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -32,13 +32,13 @@ use syntax::ast_map;\n use syntax;\n \n pub struct Ctxt {\n-    ast: @ast::crate,\n+    ast: @ast::Crate,\n     ast_map: ast_map::map\n }\n \n type SrvOwner<'self,T> = &'self fn(srv: Srv) -> T;\n pub type CtxtHandler<T> = ~fn(ctxt: Ctxt) -> T;\n-type Parser = ~fn(Session, s: @str) -> @ast::crate;\n+type Parser = ~fn(Session, s: @str) -> @ast::Crate;\n \n enum Msg {\n     HandleRequest(~fn(Ctxt)),\n@@ -109,7 +109,7 @@ pub fn exec<T:Send>(\n }\n \n fn build_ctxt(sess: Session,\n-              ast: @ast::crate) -> Ctxt {\n+              ast: @ast::Crate) -> Ctxt {\n \n     use rustc::front::config;\n \n@@ -143,7 +143,7 @@ fn should_prune_unconfigured_items() {\n     do from_str(source) |srv| {\n         do exec(srv) |ctxt| {\n             // one item: the __std_macros secret module\n-            assert_eq!(ctxt.ast.node.module.items.len(), 1);\n+            assert_eq!(ctxt.ast.module.items.len(), 1);\n         }\n     }\n }"}, {"sha": "8596fb050e94b07aa6d425b0dbc06c22a5494414", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -61,7 +61,7 @@ fn fold_crate(\n     let doc = fold::default_seq_fold_crate(fold, doc);\n \n     let attrs = do astsrv::exec(srv) |ctxt| {\n-        let attrs = ctxt.ast.node.attrs.clone();\n+        let attrs = ctxt.ast.attrs.clone();\n         attr_parser::parse_crate(attrs)\n     };\n \n@@ -87,7 +87,7 @@ fn fold_item(\n     let desc = if doc.id == ast::crate_node_id {\n         // This is the top-level mod, use the crate attributes\n         do astsrv::exec(srv) |ctxt| {\n-            attr_parser::parse_desc(ctxt.ast.node.attrs.clone())\n+            attr_parser::parse_desc(ctxt.ast.attrs.clone())\n         }\n     } else {\n         parse_item_attrs(srv, doc.id, attr_parser::parse_desc)"}, {"sha": "04ae44569caecc47762ff332407f827501b06524", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -44,7 +44,7 @@ pub fn from_srv(\n }\n \n pub fn extract(\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     default_name: ~str\n ) -> doc::Doc {\n     doc::Doc {\n@@ -57,11 +57,11 @@ pub fn extract(\n }\n \n fn top_moddoc_from_crate(\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     default_name: ~str\n ) -> doc::ModDoc {\n     moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n-                    crate.node.module.clone())\n+                    crate.module.clone())\n }\n \n fn mk_itemdoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {"}, {"sha": "c0e506774a371c3c787dc24001dfa59a4cbbf0bf", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -17,26 +17,26 @@ use rustc::driver::session;\n use syntax::ast;\n use syntax::parse;\n \n-pub fn from_file(file: &Path) -> @ast::crate {\n+pub fn from_file(file: &Path) -> @ast::Crate {\n     parse::parse_crate_from_file(\n         file, ~[], parse::new_parse_sess(None))\n }\n \n-pub fn from_str(source: @str) -> @ast::crate {\n+pub fn from_str(source: @str) -> @ast::Crate {\n     parse::parse_crate_from_source_str(\n         @\"-\", source, ~[], parse::new_parse_sess(None))\n }\n \n-pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n+pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::Crate {\n     parse::parse_crate_from_file(\n         file, cfg(sess, file_input((*file).clone())), sess.parse_sess)\n }\n \n-pub fn from_str_sess(sess: session::Session, source: @str) -> @ast::crate {\n+pub fn from_str_sess(sess: session::Session, source: @str) -> @ast::Crate {\n     parse::parse_crate_from_source_str(\n         @\"-\", source, cfg(sess, str_input(source)), sess.parse_sess)\n }\n \n-fn cfg(sess: session::Session, input: driver::input) -> ast::crate_cfg {\n+fn cfg(sess: session::Session, input: driver::input) -> ast::CrateConfig {\n     driver::build_configuration(sess, @\"rustdoc\", &input)\n }"}, {"sha": "893e58290faf859ddb219595c7296aa404214bac", "filename": "src/librusti/program.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -271,11 +271,11 @@ impl Program {\n     ///\n     /// Once the types are known, they are inserted into the local_vars map in\n     /// this Program (to be deserialized later on\n-    pub fn register_new_vars(&mut self, blk: &ast::blk, tcx: ty::ctxt) {\n+    pub fn register_new_vars(&mut self, blk: &ast::Block, tcx: ty::ctxt) {\n         debug!(\"looking for new variables\");\n         let newvars = @mut HashMap::new();\n         do each_user_local(blk) |local| {\n-            let mutable = local.node.is_mutbl;\n+            let mutable = local.is_mutbl;\n             do each_binding(local) |path, id| {\n                 let name = do with_pp(token::get_ident_interner()) |pp, _| {\n                     pprust::print_path(pp, path, false);\n@@ -350,7 +350,7 @@ impl Program {\n         }\n \n         // helper functions to perform ast iteration\n-        fn each_user_local(blk: &ast::blk, f: &fn(@ast::local)) {\n+        fn each_user_local(blk: &ast::Block, f: &fn(@ast::Local)) {\n             do find_user_block(blk) |blk| {\n                 for blk.stmts.iter().advance |stmt| {\n                     match stmt.node {\n@@ -366,7 +366,7 @@ impl Program {\n             }\n         }\n \n-        fn find_user_block(blk: &ast::blk, f: &fn(&ast::blk)) {\n+        fn find_user_block(blk: &ast::Block, f: &fn(&ast::Block)) {\n             for blk.stmts.iter().advance |stmt| {\n                 match stmt.node {\n                     ast::stmt_semi(e, _) => {"}, {"sha": "63cf4001594f973835963de654a589ae754b98d0", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -185,7 +185,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n                         // Local declarations must be specially dealt with,\n                         // record all local declarations for use later on\n                         ast::decl_local(l) => {\n-                            let mutbl = l.node.is_mutbl;\n+                            let mutbl = l.is_mutbl;\n                             do each_binding(l) |path, _| {\n                                 let s = do with_pp(intr) |pp, _| {\n                                     pprust::print_path(pp, path, false);\n@@ -261,7 +261,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     return (program, jit::consume_engine());\n \n     fn parse_input(sess: session::Session, binary: @str,\n-                   input: &str) -> @ast::crate {\n+                   input: &str) -> @ast::Crate {\n         let code = fmt!(\"fn main() {\\n %s \\n}\", input);\n         let input = driver::str_input(code.to_managed());\n         let cfg = driver::build_configuration(sess, binary, &input);\n@@ -271,9 +271,9 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n         crate.expect(\"parsing should return a crate\")\n     }\n \n-    fn find_main(crate: @ast::crate, sess: session::Session,\n-                 f: &fn(&ast::blk)) {\n-        for crate.node.module.items.iter().advance |item| {\n+    fn find_main(crate: @ast::Crate, sess: session::Session,\n+                 f: &fn(&ast::Block)) {\n+        for crate.module.items.iter().advance |item| {\n             match item.node {\n                 ast::item_fn(_, _, _, _, ref blk) => {\n                     if item.ident == sess.ident_of(\"main\") {"}, {"sha": "3fc6d4fe3d09503aecca0295b76dfb197bd929f1", "filename": "src/librusti/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrusti%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Futils.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -14,7 +14,7 @@ use syntax::print::pp;\n use syntax::print::pprust;\n use syntax::parse::token;\n \n-pub fn each_binding(l: @ast::local, f: @fn(&ast::Path, ast::node_id)) {\n+pub fn each_binding(l: @ast::Local, f: @fn(&ast::Path, ast::node_id)) {\n     use syntax::visit;\n \n     let vt = visit::mk_simple_visitor(\n@@ -30,7 +30,7 @@ pub fn each_binding(l: @ast::local, f: @fn(&ast::Path, ast::node_id)) {\n             .. *visit::default_simple_visitor()\n         }\n     );\n-    (vt.visit_pat)(l.node.pat, ((), vt));\n+    (vt.visit_pat)(l.pat, ((), vt));\n }\n \n /// A utility function that hands off a pretty printer to a callback."}, {"sha": "770c073fa2ae13c3b389f5b9530f6578342488a7", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -83,9 +83,9 @@ struct PkgScript<'self> {\n     /// build script\n     sess: session::Session,\n     /// The config for compiling the custom build script\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     /// The crate for the custom build script\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     /// Directory in which to store build output\n     build_dir: Path\n }"}, {"sha": "349c41b13a98c6de8952a0122556001290d8a587", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -67,7 +67,7 @@ struct ListenerFn {\n \n struct ReadyCtx {\n     sess: session::Session,\n-    crate: @ast::crate,\n+    crate: @ast::Crate,\n     ext_cx: @ExtCtxt,\n     path: ~[ast::ident],\n     fns: ~[ListenerFn]\n@@ -139,7 +139,7 @@ fn fold_item(ctx: @mut ReadyCtx,\n \n /// Generate/filter main function, add the list of commands, etc.\n pub fn ready_crate(sess: session::Session,\n-                   crate: @ast::crate) -> @ast::crate {\n+                   crate: @ast::Crate) -> @ast::Crate {\n     let ctx = @mut ReadyCtx {\n         sess: sess,\n         crate: crate,\n@@ -238,7 +238,7 @@ pub fn compile_input(ctxt: &Ctx,\n                                   });\n \n     // Inject the link attributes so we get the right package name and version\n-    if attr::find_linkage_metas(crate.node.attrs).is_empty() {\n+    if attr::find_linkage_metas(crate.attrs).is_empty() {\n         let short_name_to_use = match what {\n             Test  => fmt!(\"%stest\", pkg_id.short_name),\n             Bench => fmt!(\"%sbench\", pkg_id.short_name),\n@@ -249,9 +249,10 @@ pub fn compile_input(ctxt: &Ctx,\n             ~[attr::mk_name_value_item_str(@\"name\", short_name_to_use.to_managed()),\n               attr::mk_name_value_item_str(@\"vers\", pkg_id.version.to_str().to_managed())];\n \n-        crate = @codemap::respan(crate.span, ast::crate_ {\n+        crate = @ast::Crate {\n             attrs: ~[attr::mk_attr(attr::mk_list_item(@\"link\", link_options))],\n-            .. crate.node.clone()});\n+            .. (*crate).clone()\n+        };\n     }\n \n     debug!(\"calling compile_crate_from_input, out_dir = %s,\n@@ -268,15 +269,15 @@ pub fn compile_input(ctxt: &Ctx,\n pub fn compile_crate_from_input(input: &driver::input,\n                                 build_dir: &Path,\n                                 sess: session::Session,\n-                                crate: @ast::crate,\n-                                cfg: ast::crate_cfg,\n+                                crate: @ast::Crate,\n+                                cfg: ast::CrateConfig,\n                                 compile_from: driver::compile_phase) {\n     debug!(\"Calling build_output_filenames with %s, building library? %?\",\n            build_dir.to_str(), sess.building_library);\n \n     // bad copy\n     let outputs = driver::build_output_filenames(input, &Some((*build_dir).clone()), &None,\n-                                                 crate.node.attrs, sess);\n+                                                 crate.attrs, sess);\n \n     debug!(\"Outputs are %? and output type = %?\", outputs, sess.opts.output_type);\n     debug!(\"additional libraries:\");\n@@ -324,7 +325,7 @@ pub fn compile_crate(ctxt: &Ctx, pkg_id: &PkgId,\n pub fn find_and_install_dependencies(ctxt: &Ctx,\n                                  sess: session::Session,\n                                  workspace: &Path,\n-                                 c: &ast::crate,\n+                                 c: &ast::Crate,\n                                  save: @fn(Path)\n                                 ) {\n     // :-("}, {"sha": "95691c334b137962658c69c1bb320e59af6f9744", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -113,17 +113,17 @@ pub struct Path {\n     types: ~[Ty],\n }\n \n-pub type crate_num = int;\n+pub type CrateNum = int;\n \n pub type node_id = int;\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub struct def_id {\n-    crate: crate_num,\n+    crate: CrateNum,\n     node: node_id,\n }\n \n-pub static local_crate: crate_num = 0;\n+pub static local_crate: CrateNum = 0;\n pub static crate_node_id: node_id = 0;\n \n // The AST represents all type param bounds as types.\n@@ -195,15 +195,14 @@ pub enum def {\n \n // The set of MetaItems that define the compilation environment of the crate,\n // used to drive conditional compilation\n-pub type crate_cfg = ~[@MetaItem];\n-\n-pub type crate = spanned<crate_>;\n+pub type CrateConfig = ~[@MetaItem];\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n-pub struct crate_ {\n+pub struct Crate {\n     module: _mod,\n     attrs: ~[Attribute],\n-    config: crate_cfg,\n+    config: CrateConfig,\n+    span: span,\n }\n \n pub type MetaItem = spanned<MetaItem_>;\n@@ -240,10 +239,8 @@ impl Eq for MetaItem_ {\n     }\n }\n \n-//pub type blk = spanned<blk_>;\n-\n #[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]\n-pub struct blk {\n+pub struct Block {\n     view_items: ~[view_item],\n     stmts: ~[@stmt],\n     expr: Option<@expr>,\n@@ -385,22 +382,21 @@ pub enum stmt_ {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n-pub struct local_ {\n+pub struct Local {\n     is_mutbl: bool,\n     ty: Ty,\n     pat: @pat,\n     init: Option<@expr>,\n     id: node_id,\n+    span: span,\n }\n \n-pub type local = spanned<local_>;\n-\n pub type decl = spanned<decl_>;\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub enum decl_ {\n     // a local (let) binding:\n-    decl_local(@local),\n+    decl_local(@Local),\n     // an item binding:\n     decl_item(@item),\n }\n@@ -409,17 +405,16 @@ pub enum decl_ {\n pub struct arm {\n     pats: ~[@pat],\n     guard: Option<@expr>,\n-    body: blk,\n+    body: Block,\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n-pub struct field_ {\n+pub struct Field {\n     ident: ident,\n     expr: @expr,\n+    span: span,\n }\n \n-pub type field = spanned<field_>;\n-\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum blk_check_mode {\n     default_blk,\n@@ -464,21 +459,21 @@ pub enum expr_ {\n     expr_unary(node_id, unop, @expr),\n     expr_lit(@lit),\n     expr_cast(@expr, Ty),\n-    expr_if(@expr, blk, Option<@expr>),\n-    expr_while(@expr, blk),\n+    expr_if(@expr, Block, Option<@expr>),\n+    expr_while(@expr, Block),\n     /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n-    expr_loop(blk, Option<ident>),\n+    expr_loop(Block, Option<ident>),\n     expr_match(@expr, ~[arm]),\n-    expr_fn_block(fn_decl, blk),\n+    expr_fn_block(fn_decl, Block),\n     // Inner expr is always an expr_fn_block. We need the wrapping node to\n     // easily type this (a function returning nil on the inside but bool on\n     // the outside).\n     expr_loop_body(@expr),\n     // Like expr_loop_body but for 'do' blocks\n     expr_do_body(@expr),\n-    expr_block(blk),\n+    expr_block(Block),\n \n     expr_assign(@expr, @expr),\n     expr_assign_op(node_id, binop, @expr, @expr),\n@@ -499,7 +494,7 @@ pub enum expr_ {\n     expr_mac(mac),\n \n     // A struct literal expression.\n-    expr_struct(Path, ~[field], Option<@expr>),\n+    expr_struct(Path, ~[Field], Option<@expr>),\n \n     // A vector literal constructed from one repeated element.\n     expr_repeat(@expr /* element */, @expr /* count */, mutability),\n@@ -863,7 +858,7 @@ pub struct method {\n     explicit_self: explicit_self,\n     purity: purity,\n     decl: fn_decl,\n-    body: blk,\n+    body: Block,\n     id: node_id,\n     span: span,\n     self_id: node_id,\n@@ -1051,7 +1046,7 @@ pub struct item {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum item_ {\n     item_static(Ty, mutability, @expr),\n-    item_fn(fn_decl, purity, AbiSet, Generics, blk),\n+    item_fn(fn_decl, purity, AbiSet, Generics, Block),\n     item_mod(_mod),\n     item_foreign_mod(foreign_mod),\n     item_ty(Ty, Generics),"}, {"sha": "2981336466ee0fbc99ef9c8b32a06367925985da", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -73,7 +73,7 @@ pub enum ast_node {\n     node_stmt(@stmt),\n     node_arg,\n     node_local(ident),\n-    node_block(blk),\n+    node_block(Block),\n     node_struct_ctor(@struct_def, @item, @path),\n     node_callee_scope(@expr)\n }\n@@ -104,7 +104,7 @@ pub fn mk_ast_map_visitor() -> vt {\n     });\n }\n \n-pub fn map_crate(diag: @span_handler, c: &crate) -> map {\n+pub fn map_crate(diag: @span_handler, c: &Crate) -> map {\n     let cx = @mut Ctx {\n         map: @mut HashMap::new(),\n         path: ~[],\n@@ -157,7 +157,7 @@ pub fn map_decoded_item(diag: @span_handler,\n pub fn map_fn(\n     fk: &visit::fn_kind,\n     decl: &fn_decl,\n-    body: &blk,\n+    body: &Block,\n     sp: codemap::span,\n     id: node_id,\n     (cx,v): (@mut Ctx,\n@@ -169,7 +169,7 @@ pub fn map_fn(\n     visit::visit_fn(fk, decl, body, sp, id, (cx, v));\n }\n \n-pub fn map_block(b: &blk, (cx,v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n+pub fn map_block(b: &Block, (cx,v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n     cx.map.insert(b.id, node_block(/* FIXME (#2543) */ (*b).clone()));\n     visit::visit_block(b, (cx, v));\n }"}, {"sha": "37112a533c816d92bdc36c9df8eaf7b34c177efc", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -195,7 +195,7 @@ pub fn is_call_expr(e: @expr) -> bool {\n     match e.node { expr_call(*) => true, _ => false }\n }\n \n-pub fn block_from_expr(e: @expr) -> blk {\n+pub fn block_from_expr(e: @expr) -> Block {\n     let mut blk = default_block(~[], option::Some::<@expr>(e), e.id);\n     blk.span = e.span;\n     return blk;\n@@ -205,8 +205,8 @@ pub fn default_block(\n     stmts1: ~[@stmt],\n     expr1: Option<@expr>,\n     id1: node_id\n-) -> blk {\n-    ast::blk {\n+) -> Block {\n+    ast::Block {\n         view_items: ~[],\n         stmts: stmts1,\n         expr: expr1,\n@@ -443,7 +443,7 @@ pub fn id_visitor<T: Clone>(vfn: @fn(node_id, T)) -> visit::vt<T> {\n         },\n \n         visit_local: |l, (t, vt)| {\n-            vfn(l.node.id, t.clone());\n+            vfn(l.id, t.clone());\n             visit::visit_local(l, (t, vt));\n         },\n         visit_block: |b, (t, vt)| {\n@@ -570,7 +570,7 @@ pub trait EachViewItem {\n     pub fn each_view_item(&self, f: @fn(&ast::view_item) -> bool) -> bool;\n }\n \n-impl EachViewItem for ast::crate {\n+impl EachViewItem for ast::Crate {\n     fn each_view_item(&self, f: @fn(&ast::view_item) -> bool) -> bool {\n         let broke = @mut false;\n         let vtor: visit::vt<()> = visit::mk_simple_visitor(@visit::SimpleVisitor {"}, {"sha": "e831e32f23d49ac57d2d6392303d3eba21949ea0", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -212,7 +212,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n // -> expn_info of their expansion context stored into their span.\n pub struct ExtCtxt {\n     parse_sess: @mut parse::ParseSess,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     backtrace: @mut Option<@ExpnInfo>,\n \n     // These two @mut's should really not be here,\n@@ -225,7 +225,7 @@ pub struct ExtCtxt {\n }\n \n impl ExtCtxt {\n-    pub fn new(parse_sess: @mut parse::ParseSess, cfg: ast::crate_cfg)\n+    pub fn new(parse_sess: @mut parse::ParseSess, cfg: ast::CrateConfig)\n                -> @ExtCtxt {\n         @ExtCtxt {\n             parse_sess: parse_sess,\n@@ -238,7 +238,7 @@ impl ExtCtxt {\n \n     pub fn codemap(&self) -> @CodeMap { self.parse_sess.cm }\n     pub fn parse_sess(&self) -> @mut parse::ParseSess { self.parse_sess }\n-    pub fn cfg(&self) -> ast::crate_cfg { self.cfg.clone() }\n+    pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n     pub fn call_site(&self) -> span {\n         match *self.backtrace {\n             Some(@ExpnInfo {call_site: cs, _}) => cs,"}, {"sha": "b3d65dfa9e2fa93e0a74e0db6a8fb8f72832c540", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -76,12 +76,12 @@ pub trait AstBuilder {\n     fn stmt_let(&self, sp: span, mutbl: bool, ident: ast::ident, ex: @ast::expr) -> @ast::stmt;\n \n     // blocks\n-    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@ast::expr>) -> ast::blk;\n-    fn blk_expr(&self, expr: @ast::expr) -> ast::blk;\n+    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@ast::expr>) -> ast::Block;\n+    fn blk_expr(&self, expr: @ast::expr) -> ast::Block;\n     fn blk_all(&self, span: span,\n                view_items: ~[ast::view_item],\n                stmts: ~[@ast::stmt],\n-               expr: Option<@ast::expr>) -> ast::blk;\n+               expr: Option<@ast::expr>) -> ast::Block;\n \n     // expressions\n     fn expr(&self, span: span, node: ast::expr_) -> @ast::expr;\n@@ -105,11 +105,11 @@ pub trait AstBuilder {\n     fn expr_method_call(&self, span: span,\n                         expr: @ast::expr, ident: ast::ident,\n                         args: ~[@ast::expr]) -> @ast::expr;\n-    fn expr_blk(&self, b: ast::blk) -> @ast::expr;\n+    fn expr_blk(&self, b: ast::Block) -> @ast::expr;\n \n-    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::field;\n-    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::field]) -> @ast::expr;\n-    fn expr_struct_ident(&self, span: span, id: ast::ident, fields: ~[ast::field]) -> @ast::expr;\n+    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field;\n+    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::Field]) -> @ast::expr;\n+    fn expr_struct_ident(&self, span: span, id: ast::ident, fields: ~[ast::Field]) -> @ast::expr;\n \n     fn expr_lit(&self, sp: span, lit: ast::lit_) -> @ast::expr;\n \n@@ -147,11 +147,11 @@ pub trait AstBuilder {\n     fn expr_if(&self, span: span,\n                cond: @ast::expr, then: @ast::expr, els: Option<@ast::expr>) -> @ast::expr;\n \n-    fn lambda_fn_decl(&self, span: span, fn_decl: ast::fn_decl, blk: ast::blk) -> @ast::expr;\n+    fn lambda_fn_decl(&self, span: span, fn_decl: ast::fn_decl, blk: ast::Block) -> @ast::expr;\n \n-    fn lambda(&self, span: span, ids: ~[ast::ident], blk: ast::blk) -> @ast::expr;\n-    fn lambda0(&self, span: span, blk: ast::blk) -> @ast::expr;\n-    fn lambda1(&self, span: span, blk: ast::blk, ident: ast::ident) -> @ast::expr;\n+    fn lambda(&self, span: span, ids: ~[ast::ident], blk: ast::Block) -> @ast::expr;\n+    fn lambda0(&self, span: span, blk: ast::Block) -> @ast::expr;\n+    fn lambda1(&self, span: span, blk: ast::Block, ident: ast::ident) -> @ast::expr;\n \n     fn lambda_expr(&self, span: span, ids: ~[ast::ident], blk: @ast::expr) -> @ast::expr;\n     fn lambda_expr_0(&self, span: span, expr: @ast::expr) -> @ast::expr;\n@@ -175,13 +175,13 @@ pub trait AstBuilder {\n                     inputs: ~[ast::arg],\n                     output: ast::Ty,\n                     generics: Generics,\n-                    body: ast::blk) -> @ast::item;\n+                    body: ast::Block) -> @ast::item;\n     fn item_fn(&self,\n                span: span,\n                name: ident,\n                inputs: ~[ast::arg],\n                output: ast::Ty,\n-               body: ast::blk) -> @ast::item;\n+               body: ast::Block) -> @ast::item;\n \n     fn variant(&self, span: span, name: ident, tys: ~[ast::Ty]) -> ast::variant;\n     fn item_enum_poly(&self,\n@@ -375,31 +375,31 @@ impl AstBuilder for @ExtCtxt {\n \n     fn stmt_let(&self, sp: span, mutbl: bool, ident: ast::ident, ex: @ast::expr) -> @ast::stmt {\n         let pat = self.pat_ident(sp, ident);\n-        let local = @respan(sp,\n-                            ast::local_ {\n-                                is_mutbl: mutbl,\n-                                ty: self.ty_infer(sp),\n-                                pat: pat,\n-                                init: Some(ex),\n-                                id: self.next_id(),\n-                            });\n+        let local = @ast::Local {\n+            is_mutbl: mutbl,\n+            ty: self.ty_infer(sp),\n+            pat: pat,\n+            init: Some(ex),\n+            id: self.next_id(),\n+            span: sp,\n+        };\n         let decl = respan(sp, ast::decl_local(local));\n         @respan(sp, ast::stmt_decl(@decl, self.next_id()))\n     }\n \n-    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@expr>) -> ast::blk {\n+    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@expr>) -> ast::Block {\n         self.blk_all(span, ~[], stmts, expr)\n     }\n \n-    fn blk_expr(&self, expr: @ast::expr) -> ast::blk {\n+    fn blk_expr(&self, expr: @ast::expr) -> ast::Block {\n         self.blk_all(expr.span, ~[], ~[], Some(expr))\n     }\n     fn blk_all(&self,\n                span: span,\n                view_items: ~[ast::view_item],\n                stmts: ~[@ast::stmt],\n-               expr: Option<@ast::expr>) -> ast::blk {\n-           ast::blk {\n+               expr: Option<@ast::expr>) -> ast::Block {\n+           ast::Block {\n                view_items: view_items,\n                stmts: stmts,\n                expr: expr,\n@@ -474,17 +474,17 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(span,\n                   ast::expr_method_call(self.next_id(), expr, ident, ~[], args, ast::NoSugar))\n     }\n-    fn expr_blk(&self, b: ast::blk) -> @ast::expr {\n+    fn expr_blk(&self, b: ast::Block) -> @ast::expr {\n         self.expr(b.span, ast::expr_block(b))\n     }\n-    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::field {\n-        respan(span, ast::field_ { ident: name, expr: e })\n+    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field {\n+        ast::Field { ident: name, expr: e, span: span }\n     }\n-    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::field]) -> @ast::expr {\n+    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::Field]) -> @ast::expr {\n         self.expr(span, ast::expr_struct(path, fields, None))\n     }\n     fn expr_struct_ident(&self, span: span,\n-                         id: ast::ident, fields: ~[ast::field]) -> @ast::expr {\n+                         id: ast::ident, fields: ~[ast::Field]) -> @ast::expr {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n@@ -595,23 +595,23 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(span, ast::expr_if(cond, self.blk_expr(then), els))\n     }\n \n-    fn lambda_fn_decl(&self, span: span, fn_decl: ast::fn_decl, blk: ast::blk) -> @ast::expr {\n+    fn lambda_fn_decl(&self, span: span, fn_decl: ast::fn_decl, blk: ast::Block) -> @ast::expr {\n         self.expr(span, ast::expr_fn_block(fn_decl, blk))\n     }\n-    fn lambda(&self, span: span, ids: ~[ast::ident], blk: ast::blk) -> @ast::expr {\n+    fn lambda(&self, span: span, ids: ~[ast::ident], blk: ast::Block) -> @ast::expr {\n         let fn_decl = self.fn_decl(\n             ids.map(|id| self.arg(span, *id, self.ty_infer(span))),\n             self.ty_infer(span));\n \n         self.expr(span, ast::expr_fn_block(fn_decl, blk))\n     }\n-    fn lambda0(&self, _span: span, blk: ast::blk) -> @ast::expr {\n+    fn lambda0(&self, _span: span, blk: ast::Block) -> @ast::expr {\n         let ext_cx = *self;\n         let blk_e = self.expr(blk.span, ast::expr_block(blk.clone()));\n         quote_expr!(|| $blk_e )\n     }\n \n-    fn lambda1(&self, _span: span, blk: ast::blk, ident: ast::ident) -> @ast::expr {\n+    fn lambda1(&self, _span: span, blk: ast::Block, ident: ast::ident) -> @ast::expr {\n         let ext_cx = *self;\n         let blk_e = self.expr(blk.span, ast::expr_block(blk.clone()));\n         quote_expr!(|$ident| $blk_e )\n@@ -674,7 +674,7 @@ impl AstBuilder for @ExtCtxt {\n                     inputs: ~[ast::arg],\n                     output: ast::Ty,\n                     generics: Generics,\n-                    body: ast::blk) -> @ast::item {\n+                    body: ast::Block) -> @ast::item {\n         self.item(span,\n                   name,\n                   ~[],\n@@ -690,7 +690,7 @@ impl AstBuilder for @ExtCtxt {\n                name: ident,\n                inputs: ~[ast::arg],\n                output: ast::Ty,\n-               body: ast::blk\n+               body: ast::Block\n               ) -> @ast::item {\n         self.item_fn_poly(\n             span,"}, {"sha": "af05f726860603a93992b854f4512108ad1fef69", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{blk, crate, expr_, expr_mac, mac_invoc_tt};\n+use ast::{Block, Crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast::{illegal_ctxt};\n use ast;\n@@ -395,10 +395,10 @@ pub fn new_name_finder() -> @Visitor<@mut ~[ast::ident]> {\n \n pub fn expand_block(extsbox: @mut SyntaxEnv,\n                     _cx: @ExtCtxt,\n-                    blk: &blk,\n+                    blk: &Block,\n                     fld: @ast_fold,\n-                    orig: @fn(&blk, @ast_fold) -> blk)\n-                 -> blk {\n+                    orig: @fn(&Block, @ast_fold) -> Block)\n+                 -> Block {\n     // see note below about treatment of exts table\n     with_exts_frame!(extsbox,false,orig(blk,fld))\n }\n@@ -691,7 +691,7 @@ pub fn std_macros() -> @str {\n // add a bunch of macros as though they were placed at the head of the\n // program (ick). This should run before cfg stripping.\n pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n-                         cfg: ast::crate_cfg, c: &crate) -> @crate {\n+                         cfg: ast::CrateConfig, c: &Crate) -> @Crate {\n     let sm = match parse_item_from_source_str(@\"<std-macros>\",\n                                               std_macros(),\n                                               cfg.clone(),\n@@ -718,7 +718,7 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n }\n \n pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n-                    cfg: ast::crate_cfg, c: &crate) -> @crate {\n+                    cfg: ast::CrateConfig, c: &Crate) -> @Crate {\n     // adding *another* layer of indirection here so that the block\n     // visitor can swap out one exts table for another for the duration\n     // of the block.  The cleaner alternative would be to thread the"}, {"sha": "1439f4cabab14cd3d5aa8cc62089fd283a0448c7", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -110,7 +110,7 @@ pub mod rt {\n         }\n     }\n \n-    impl ToSource for ast::blk {\n+    impl ToSource for ast::Block {\n         fn to_source(&self) -> @str {\n             pprust::block_to_str(self, get_ident_interner()).to_managed()\n         }\n@@ -238,7 +238,7 @@ pub mod rt {\n         }\n     }\n \n-    impl ToTokens for ast::blk {\n+    impl ToTokens for ast::Block {\n         fn to_tokens(&self, cx: @ExtCtxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source())\n         }"}, {"sha": "9d9155ff0d52173ffe05c6c9cc96deffeb08390e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -223,7 +223,7 @@ pub enum parse_result {\n \n pub fn parse_or_else(\n     sess: @mut ParseSess,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     rdr: @reader,\n     ms: ~[matcher]\n ) -> HashMap<ident, @named_match> {\n@@ -236,7 +236,7 @@ pub fn parse_or_else(\n \n pub fn parse(\n     sess: @mut ParseSess,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     rdr: @reader,\n     ms: &[matcher]\n ) -> parse_result {"}, {"sha": "f27e68641e3af6d0b9ae7b1d6e1df3c68063aa9e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -15,14 +15,14 @@ use parse::token;\n use opt_vec::OptVec;\n \n pub trait ast_fold {\n-    fn fold_crate(@self, &crate) -> crate;\n+    fn fold_crate(@self, &Crate) -> Crate;\n     fn fold_view_item(@self, &view_item) -> view_item;\n     fn fold_foreign_item(@self, @foreign_item) -> @foreign_item;\n     fn fold_item(@self, @item) -> Option<@item>;\n     fn fold_struct_field(@self, @struct_field) -> @struct_field;\n     fn fold_item_underscore(@self, &item_) -> item_;\n     fn fold_method(@self, @method) -> @method;\n-    fn fold_block(@self, &blk) -> blk;\n+    fn fold_block(@self, &Block) -> Block;\n     fn fold_stmt(@self, &stmt) -> Option<@stmt>;\n     fn fold_arm(@self, &arm) -> arm;\n     fn fold_pat(@self, @pat) -> @pat;\n@@ -34,7 +34,7 @@ pub trait ast_fold {\n     fn fold_variant(@self, &variant) -> variant;\n     fn fold_ident(@self, ident) -> ident;\n     fn fold_path(@self, &Path) -> Path;\n-    fn fold_local(@self, @local) -> @local;\n+    fn fold_local(@self, @Local) -> @Local;\n     fn map_exprs(@self, @fn(@expr) -> @expr, &[@expr]) -> ~[@expr];\n     fn new_id(@self, node_id) -> node_id;\n     fn new_span(@self, span) -> span;\n@@ -44,14 +44,14 @@ pub trait ast_fold {\n \n pub struct AstFoldFns {\n     //unlike the others, item_ is non-trivial\n-    fold_crate: @fn(&crate_, span, @ast_fold) -> (crate_, span),\n+    fold_crate: @fn(&Crate, @ast_fold) -> Crate,\n     fold_view_item: @fn(&view_item_, @ast_fold) -> view_item_,\n     fold_foreign_item: @fn(@foreign_item, @ast_fold) -> @foreign_item,\n     fold_item: @fn(@item, @ast_fold) -> Option<@item>,\n     fold_struct_field: @fn(@struct_field, @ast_fold) -> @struct_field,\n     fold_item_underscore: @fn(&item_, @ast_fold) -> item_,\n     fold_method: @fn(@method, @ast_fold) -> @method,\n-    fold_block: @fn(&blk, @ast_fold) -> blk,\n+    fold_block: @fn(&Block, @ast_fold) -> Block,\n     fold_stmt: @fn(&stmt_, span, @ast_fold) -> (Option<stmt_>, span),\n     fold_arm: @fn(&arm, @ast_fold) -> arm,\n     fold_pat: @fn(&pat_, span, @ast_fold) -> (pat_, span),\n@@ -63,7 +63,7 @@ pub struct AstFoldFns {\n     fold_variant: @fn(&variant_, span, @ast_fold) -> (variant_, span),\n     fold_ident: @fn(ident, @ast_fold) -> ident,\n     fold_path: @fn(&Path, @ast_fold) -> Path,\n-    fold_local: @fn(&local_, span, @ast_fold) -> (local_, span),\n+    fold_local: @fn(@Local, @ast_fold) -> @Local,\n     map_exprs: @fn(@fn(@expr) -> @expr, &[@expr]) -> ~[@expr],\n     new_id: @fn(node_id) -> node_id,\n     new_span: @fn(span) -> span\n@@ -196,14 +196,15 @@ pub fn fold_generics(generics: &Generics, fld: @ast_fold) -> Generics {\n               lifetimes: fold_lifetimes(&generics.lifetimes, fld)}\n }\n \n-pub fn noop_fold_crate(c: &crate_, fld: @ast_fold) -> crate_ {\n+pub fn noop_fold_crate(c: &Crate, fld: @ast_fold) -> Crate {\n     let fold_meta_item = |x| fold_meta_item_(x, fld);\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n-    crate_ {\n+    Crate {\n         module: fld.fold_mod(&c.module),\n         attrs: c.attrs.map(|x| fold_attribute(*x)),\n         config: c.config.map(|x| fold_meta_item(*x)),\n+        span: fld.new_span(c.span),\n     }\n }\n \n@@ -376,7 +377,7 @@ fn noop_fold_method(m: @method, fld: @ast_fold) -> @method {\n }\n \n \n-pub fn noop_fold_block(b: &blk, fld: @ast_fold) -> blk {\n+pub fn noop_fold_block(b: &Block, fld: @ast_fold) -> Block {\n     let view_items = b.view_items.map(|x| fld.fold_view_item(x));\n     let mut stmts = ~[];\n     for b.stmts.iter().advance |stmt| {\n@@ -385,7 +386,7 @@ pub fn noop_fold_block(b: &blk, fld: @ast_fold) -> blk {\n             Some(stmt) => stmts.push(stmt)\n         }\n     }\n-    ast::blk {\n+    ast::Block {\n         view_items: view_items,\n         stmts: stmts,\n         expr: b.expr.map(|x| fld.fold_expr(*x)),\n@@ -487,12 +488,10 @@ pub fn wrap<T>(f: @fn(&T, @ast_fold) -> T)\n }\n \n pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n-    fn fold_field_(field: field, fld: @ast_fold) -> field {\n-        spanned {\n-            node: ast::field_ {\n-                ident: fld.fold_ident(field.node.ident),\n-                expr: fld.fold_expr(field.node.expr),\n-            },\n+    fn fold_field_(field: Field, fld: @ast_fold) -> Field {\n+        ast::Field {\n+            ident: fld.fold_ident(field.ident),\n+            expr: fld.fold_expr(field.expr),\n             span: fld.new_span(field.span),\n         }\n     }\n@@ -771,13 +770,14 @@ fn noop_fold_path(p: &Path, fld: @ast_fold) -> Path {\n     }\n }\n \n-fn noop_fold_local(l: &local_, fld: @ast_fold) -> local_ {\n-    local_ {\n+fn noop_fold_local(l: @Local, fld: @ast_fold) -> @Local {\n+    @Local {\n         is_mutbl: l.is_mutbl,\n         ty: fld.fold_ty(&l.ty),\n         pat: fld.fold_pat(l.pat),\n         init: l.init.map(|e| fld.fold_expr(*e)),\n         id: fld.new_id(l.id),\n+        span: fld.new_span(l.span),\n     }\n }\n \n@@ -793,7 +793,7 @@ fn noop_span(sp: span) -> span { return sp; }\n \n pub fn default_ast_fold() -> ast_fold_fns {\n     @AstFoldFns {\n-        fold_crate: wrap(noop_fold_crate),\n+        fold_crate: noop_fold_crate,\n         fold_view_item: noop_fold_view_item,\n         fold_foreign_item: noop_fold_foreign_item,\n         fold_item: noop_fold_item,\n@@ -812,7 +812,7 @@ pub fn default_ast_fold() -> ast_fold_fns {\n         fold_variant: wrap(noop_fold_variant),\n         fold_ident: noop_fold_ident,\n         fold_path: noop_fold_path,\n-        fold_local: wrap(noop_fold_local),\n+        fold_local: noop_fold_local,\n         map_exprs: noop_map_exprs,\n         new_id: noop_id,\n         new_span: noop_span,\n@@ -821,9 +821,8 @@ pub fn default_ast_fold() -> ast_fold_fns {\n \n impl ast_fold for AstFoldFns {\n     /* naturally, a macro to write these would be nice */\n-    fn fold_crate(@self, c: &crate) -> crate {\n-        let (n, s) = (self.fold_crate)(&c.node, c.span, self as @ast_fold);\n-        spanned { node: n, span: (self.new_span)(s) }\n+    fn fold_crate(@self, c: &Crate) -> Crate {\n+        (self.fold_crate)(c, self as @ast_fold)\n     }\n     fn fold_view_item(@self, x: &view_item) -> view_item {\n         ast::view_item {\n@@ -856,7 +855,7 @@ impl ast_fold for AstFoldFns {\n     fn fold_method(@self, x: @method) -> @method {\n         (self.fold_method)(x, self as @ast_fold)\n     }\n-    fn fold_block(@self, x: &blk) -> blk {\n+    fn fold_block(@self, x: &Block) -> Block {\n         (self.fold_block)(x, self as @ast_fold)\n     }\n     fn fold_stmt(@self, x: &stmt) -> Option<@stmt> {\n@@ -916,9 +915,8 @@ impl ast_fold for AstFoldFns {\n     fn fold_path(@self, x: &Path) -> Path {\n         (self.fold_path)(x, self as @ast_fold)\n     }\n-    fn fold_local(@self, x: @local) -> @local {\n-        let (n, s) = (self.fold_local)(&x.node, x.span, self as @ast_fold);\n-        @spanned { node: n, span: (self.new_span)(s) }\n+    fn fold_local(@self, x: @Local) -> @Local {\n+        (self.fold_local)(x, self as @ast_fold)\n     }\n     fn map_exprs(@self,\n                  f: @fn(@expr) -> @expr,\n@@ -969,8 +967,8 @@ mod test {\n     }\n \n     // this version doesn't care about getting comments or docstrings in.\n-    fn fake_print_crate(s: @pprust::ps, crate: &ast::crate) {\n-        pprust::print_mod(s, &crate.node.module, crate.node.attrs);\n+    fn fake_print_crate(s: @pprust::ps, crate: &ast::Crate) {\n+        pprust::print_mod(s, &crate.module, crate.attrs);\n     }\n \n     // change every identifier to \"zz\""}, {"sha": "e31b0ccff80fa6c10c758427bde1f474ff89fc61", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -39,7 +39,7 @@ pub fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n pub fn expr_is_simple_block(e: @ast::expr) -> bool {\n     match e.node {\n         ast::expr_block(\n-            ast::blk { rules: ast::default_blk, _ }\n+            ast::Block { rules: ast::default_blk, _ }\n         ) => true,\n       _ => false\n     }"}, {"sha": "bd57f123cc5e2ae78b8456212ec3a789338e9984", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -76,19 +76,19 @@ pub fn new_parse_sess_special_handler(sh: @span_handler,\n \n pub fn parse_crate_from_file(\n     input: &Path,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n-) -> @ast::crate {\n+) -> @ast::Crate {\n     new_parser_from_file(sess, /*bad*/ cfg.clone(), input).parse_crate_mod()\n     // why is there no p.abort_if_errors here?\n }\n \n pub fn parse_crate_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n-) -> @ast::crate {\n+) -> @ast::Crate {\n     let p = new_parser_from_source_str(sess,\n                                        /*bad*/ cfg.clone(),\n                                        name,\n@@ -99,7 +99,7 @@ pub fn parse_crate_from_source_str(\n pub fn parse_expr_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n ) -> @ast::expr {\n     let p = new_parser_from_source_str(\n@@ -114,7 +114,7 @@ pub fn parse_expr_from_source_str(\n pub fn parse_item_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     attrs: ~[ast::Attribute],\n     sess: @mut ParseSess\n ) -> Option<@ast::item> {\n@@ -130,7 +130,7 @@ pub fn parse_item_from_source_str(\n pub fn parse_meta_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n ) -> @ast::MetaItem {\n     let p = new_parser_from_source_str(\n@@ -145,7 +145,7 @@ pub fn parse_meta_from_source_str(\n pub fn parse_stmt_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     attrs: ~[ast::Attribute],\n     sess: @mut ParseSess\n ) -> @ast::stmt {\n@@ -161,7 +161,7 @@ pub fn parse_stmt_from_source_str(\n pub fn parse_tts_from_source_str(\n     name: @str,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n ) -> ~[ast::token_tree] {\n     let p = new_parser_from_source_str(\n@@ -184,7 +184,7 @@ pub fn parse_from_source_str<T>(\n     f: &fn(&Parser) -> T,\n     name: @str, ss: codemap::FileSubstr,\n     source: @str,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     sess: @mut ParseSess\n ) -> T {\n     let p = new_parser_from_source_substr(\n@@ -212,7 +212,7 @@ pub fn next_node_id(sess: @mut ParseSess) -> node_id {\n \n // Create a new parser from a source string\n pub fn new_parser_from_source_str(sess: @mut ParseSess,\n-                                  cfg: ast::crate_cfg,\n+                                  cfg: ast::CrateConfig,\n                                   name: @str,\n                                   source: @str)\n                                -> Parser {\n@@ -222,7 +222,7 @@ pub fn new_parser_from_source_str(sess: @mut ParseSess,\n // Create a new parser from a source string where the origin\n // is specified as a substring of another file.\n pub fn new_parser_from_source_substr(sess: @mut ParseSess,\n-                                  cfg: ast::crate_cfg,\n+                                  cfg: ast::CrateConfig,\n                                   name: @str,\n                                   ss: codemap::FileSubstr,\n                                   source: @str)\n@@ -234,7 +234,7 @@ pub fn new_parser_from_source_substr(sess: @mut ParseSess,\n /// if the file doesn't exist\n pub fn new_parser_from_file(\n     sess: @mut ParseSess,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     path: &Path\n ) -> Parser {\n     filemap_to_parser(sess,file_to_filemap(sess,path,None),cfg)\n@@ -245,7 +245,7 @@ pub fn new_parser_from_file(\n /// On an error, use the given span as the source of the problem.\n pub fn new_sub_parser_from_file(\n     sess: @mut ParseSess,\n-    cfg: ast::crate_cfg,\n+    cfg: ast::CrateConfig,\n     path: &Path,\n     sp: span\n ) -> Parser {\n@@ -255,14 +255,14 @@ pub fn new_sub_parser_from_file(\n /// Given a filemap and config, return a parser\n pub fn filemap_to_parser(sess: @mut ParseSess,\n                          filemap: @FileMap,\n-                         cfg: ast::crate_cfg) -> Parser {\n+                         cfg: ast::CrateConfig) -> Parser {\n     tts_to_parser(sess,filemap_to_tts(sess,filemap),cfg)\n }\n \n // must preserve old name for now, because quote! from the *existing*\n // compiler expands into it\n pub fn new_parser_from_tts(sess: @mut ParseSess,\n-                     cfg: ast::crate_cfg,\n+                     cfg: ast::CrateConfig,\n                      tts: ~[ast::token_tree]) -> Parser {\n     tts_to_parser(sess,tts,cfg)\n }\n@@ -313,7 +313,7 @@ pub fn filemap_to_tts(sess: @mut ParseSess, filemap: @FileMap)\n // given tts and cfg, produce a parser\n pub fn tts_to_parser(sess: @mut ParseSess,\n                      tts: ~[ast::token_tree],\n-                     cfg: ast::crate_cfg) -> Parser {\n+                     cfg: ast::CrateConfig) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, None, tts);\n     Parser(sess, cfg, trdr as @reader)\n }\n@@ -551,7 +551,7 @@ mod test {\n                                         lifetimes: opt_vec::Empty,\n                                         ty_params: opt_vec::Empty,\n                                     },\n-                                    ast::blk {\n+                                    ast::Block {\n                                         view_items: ~[],\n                                         stmts: ~[@spanned{\n                                             node: ast::stmt_semi(@ast::expr{"}, {"sha": "a4fd4929400a8f44d5a2578b3eeed4bba8a449d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -16,9 +16,9 @@ use ast::{TyBareFn, TyClosure};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{provided, public, purity};\n use ast::{_mod, add, arg, arm, Attribute, bind_by_ref, bind_infer};\n-use ast::{bitand, bitor, bitxor, blk};\n+use ast::{bitand, bitor, bitxor, Block};\n use ast::{blk_check_mode, box};\n-use ast::{crate, crate_cfg, decl, decl_item};\n+use ast::{Crate, CrateConfig, decl, decl_item};\n use ast::{decl_local, default_blk, deref, div, enum_def, explicit_self};\n use ast::{expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assign, expr_assign_op, expr_binary, expr_block};\n@@ -29,14 +29,14 @@ use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_self, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n-use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n+use ast::{expr_vstore_mut_slice, expr_while, extern_fn, Field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n use ast::{ident, impure_fn, inherited, item, item_, item_static};\n use ast::{item_enum, item_fn, item_foreign_mod, item_impl};\n use ast::{item_mac, item_mod, item_struct, item_trait, item_ty, lit, lit_};\n use ast::{lit_bool, lit_float, lit_float_unsuffixed, lit_int};\n-use ast::{lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const};\n+use ast::{lit_int_unsuffixed, lit_nil, lit_str, lit_uint, Local, m_const};\n use ast::{m_imm, m_mutbl, mac_, mac_invoc_tt, matcher, match_nonterminal};\n use ast::{match_seq, match_tok, method, mt, mul, mutability};\n use ast::{named_field, neg, node_id, noreturn, not, pat, pat_box, pat_enum};\n@@ -261,7 +261,7 @@ struct ParsedItemsAndViewItems {\n /* ident is handled by common.rs */\n \n pub fn Parser(sess: @mut ParseSess,\n-              cfg: ast::crate_cfg,\n+              cfg: ast::CrateConfig,\n               rdr: @reader)\n            -> Parser {\n     let tok0 = rdr.next_token();\n@@ -299,7 +299,7 @@ pub fn Parser(sess: @mut ParseSess,\n // ooh, nasty mutable fields everywhere....\n pub struct Parser {\n     sess: @mut ParseSess,\n-    cfg: crate_cfg,\n+    cfg: CrateConfig,\n     // the current token:\n     token: @mut token::Token,\n     // the span of the current token:\n@@ -1498,15 +1498,16 @@ impl Parser {\n     }\n \n     // parse ident COLON expr\n-    pub fn parse_field(&self) -> field {\n+    pub fn parse_field(&self) -> Field {\n         let lo = self.span.lo;\n         let i = self.parse_ident();\n         self.expect(&token::COLON);\n         let e = self.parse_expr();\n-        spanned(lo, e.span.hi, ast::field_ {\n+        ast::Field {\n             ident: i,\n-            expr: e\n-        })\n+            expr: e,\n+            span: mk_sp(lo, e.span.hi),\n+        }\n     }\n \n     pub fn mk_expr(&self, lo: BytePos, hi: BytePos, node: expr_) -> @expr {\n@@ -2294,7 +2295,7 @@ impl Parser {\n         let lo = self.last_span.lo;\n         let decl = parse_decl();\n         let body = parse_body();\n-        let fakeblock = ast::blk {\n+        let fakeblock = ast::Block {\n             view_items: ~[],\n             stmts: ~[],\n             expr: Some(body),\n@@ -2460,7 +2461,7 @@ impl Parser {\n                 self.eat(&token::COMMA);\n             }\n \n-            let blk = ast::blk {\n+            let blk = ast::Block {\n                 view_items: ~[],\n                 stmts: ~[],\n                 expr: Some(expr),\n@@ -2916,7 +2917,7 @@ impl Parser {\n     }\n \n     // parse a local variable declaration\n-    fn parse_local(&self, is_mutbl: bool) -> @local {\n+    fn parse_local(&self, is_mutbl: bool) -> @Local {\n         let lo = self.span.lo;\n         let pat = self.parse_pat();\n \n@@ -2931,17 +2932,14 @@ impl Parser {\n         };\n         if self.eat(&token::COLON) { ty = self.parse_ty(false); }\n         let init = self.parse_initializer();\n-        @spanned(\n-            lo,\n-            self.last_span.hi,\n-            ast::local_ {\n-                is_mutbl: is_mutbl,\n-                ty: ty,\n-                pat: pat,\n-                init: init,\n-                id: self.get_id(),\n-            }\n-        )\n+        @ast::Local {\n+            is_mutbl: is_mutbl,\n+            ty: ty,\n+            pat: pat,\n+            init: init,\n+            id: self.get_id(),\n+            span: mk_sp(lo, self.last_span.hi),\n+        }\n     }\n \n     // parse a \"let\" stmt\n@@ -3077,7 +3075,7 @@ impl Parser {\n     }\n \n     // parse a block. No inner attrs are allowed.\n-    pub fn parse_block(&self) -> blk {\n+    pub fn parse_block(&self) -> Block {\n         maybe_whole!(self, nt_block);\n \n         let lo = self.span.lo;\n@@ -3091,7 +3089,7 @@ impl Parser {\n \n     // parse a block. Inner attrs are allowed.\n     fn parse_inner_attrs_and_block(&self)\n-        -> (~[Attribute], blk) {\n+        -> (~[Attribute], Block) {\n \n         maybe_whole!(pair_empty self, nt_block);\n \n@@ -3109,13 +3107,13 @@ impl Parser {\n     // I guess that also means \"already parsed the 'impure'\" if\n     // necessary, and this should take a qualifier.\n     // some blocks start with \"#{\"...\n-    fn parse_block_tail(&self, lo: BytePos, s: blk_check_mode) -> blk {\n+    fn parse_block_tail(&self, lo: BytePos, s: blk_check_mode) -> Block {\n         self.parse_block_tail_(lo, s, ~[])\n     }\n \n     // parse the rest of a block expression or function body\n     fn parse_block_tail_(&self, lo: BytePos, s: blk_check_mode,\n-                         first_item_attrs: ~[Attribute]) -> blk {\n+                         first_item_attrs: ~[Attribute]) -> Block {\n         let mut stmts = ~[];\n         let mut expr = None;\n \n@@ -3237,7 +3235,7 @@ impl Parser {\n \n         let hi = self.span.hi;\n         self.bump();\n-        ast::blk {\n+        ast::Block {\n             view_items: view_items,\n             stmts: stmts,\n             expr: expr,\n@@ -4946,18 +4944,21 @@ impl Parser {\n \n     // Parses a source module as a crate. This is the main\n     // entry point for the parser.\n-    pub fn parse_crate_mod(&self) -> @crate {\n+    pub fn parse_crate_mod(&self) -> @Crate {\n         let lo = self.span.lo;\n         // parse the crate's inner attrs, maybe (oops) one\n         // of the attrs of an item:\n         let (inner, next) = self.parse_inner_attrs_and_next();\n         let first_item_outer_attrs = next;\n         // parse the items inside the crate:\n         let m = self.parse_mod_items(token::EOF, first_item_outer_attrs);\n-        @spanned(lo, self.span.lo,\n-                 ast::crate_ { module: m,\n-                               attrs: inner,\n-                               config: self.cfg.clone() })\n+\n+        @ast::Crate {\n+            module: m,\n+            attrs: inner,\n+            config: self.cfg.clone(),\n+            span: mk_sp(lo, self.span.lo)\n+        }\n     }\n \n     pub fn parse_str(&self) -> @str {"}, {"sha": "2d15d0ab7e82b189840ad23c3cc0565ffeee7c97", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -99,7 +99,7 @@ pub enum Token {\n /// For interpolation during macro expansion.\n pub enum nonterminal {\n     nt_item(@ast::item),\n-    nt_block(ast::blk),\n+    nt_block(ast::Block),\n     nt_stmt(@ast::stmt),\n     nt_pat( @ast::pat),\n     nt_expr(@ast::expr),"}, {"sha": "8e2c24cacfed794839061f575f2e458e53f7d7c5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -33,7 +33,7 @@ use std::uint;\n \n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n-    node_block(@ps, &'self ast::blk),\n+    node_block(@ps, &'self ast::Block),\n     node_item(@ps, &'self ast::item),\n     node_expr(@ps, &'self ast::expr),\n     node_pat(@ps, &'self ast::pat),\n@@ -106,7 +106,7 @@ pub static default_columns: uint = 78u;\n pub fn print_crate(cm: @CodeMap,\n                    intr: @ident_interner,\n                    span_diagnostic: @diagnostic::span_handler,\n-                   crate: &ast::crate,\n+                   crate: &ast::Crate,\n                    filename: @str,\n                    in: @io::Reader,\n                    out: @io::Writer,\n@@ -140,8 +140,8 @@ pub fn print_crate(cm: @CodeMap,\n     print_crate_(s, crate);\n }\n \n-pub fn print_crate_(s: @ps, crate: &ast::crate) {\n-    print_mod(s, &crate.node.module, crate.node.attrs);\n+pub fn print_crate_(s: @ps, crate: &ast::Crate) {\n+    print_mod(s, &crate.module, crate.attrs);\n     print_remaining_comments(s);\n     eof(s.s);\n }\n@@ -200,7 +200,7 @@ pub fn fun_to_str(decl: &ast::fn_decl, purity: ast::purity, name: ast::ident,\n     }\n }\n \n-pub fn block_to_str(blk: &ast::blk, intr: @ident_interner) -> ~str {\n+pub fn block_to_str(blk: &ast::Block, intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         // containing cbox, will be closed by print-block at }\n@@ -910,22 +910,22 @@ pub fn print_stmt(s: @ps, st: &ast::stmt) {\n     maybe_print_trailing_comment(s, st.span, None);\n }\n \n-pub fn print_block(s: @ps, blk: &ast::blk) {\n+pub fn print_block(s: @ps, blk: &ast::Block) {\n     print_possibly_embedded_block(s, blk, block_normal, indent_unit);\n }\n \n-pub fn print_block_unclosed(s: @ps, blk: &ast::blk) {\n+pub fn print_block_unclosed(s: @ps, blk: &ast::Block) {\n     print_possibly_embedded_block_(s, blk, block_normal, indent_unit, &[],\n                                  false);\n }\n \n-pub fn print_block_unclosed_indent(s: @ps, blk: &ast::blk, indented: uint) {\n+pub fn print_block_unclosed_indent(s: @ps, blk: &ast::Block, indented: uint) {\n     print_possibly_embedded_block_(s, blk, block_normal, indented, &[],\n                                    false);\n }\n \n pub fn print_block_with_attrs(s: @ps,\n-                              blk: &ast::blk,\n+                              blk: &ast::Block,\n                               attrs: &[ast::Attribute]) {\n     print_possibly_embedded_block_(s, blk, block_normal, indent_unit, attrs,\n                                   true);\n@@ -934,15 +934,15 @@ pub fn print_block_with_attrs(s: @ps,\n pub enum embed_type { block_block_fn, block_normal, }\n \n pub fn print_possibly_embedded_block(s: @ps,\n-                                     blk: &ast::blk,\n+                                     blk: &ast::Block,\n                                      embedded: embed_type,\n                                      indented: uint) {\n     print_possibly_embedded_block_(\n         s, blk, embedded, indented, &[], true);\n }\n \n pub fn print_possibly_embedded_block_(s: @ps,\n-                                      blk: &ast::blk,\n+                                      blk: &ast::Block,\n                                       embedded: embed_type,\n                                       indented: uint,\n                                       attrs: &[ast::Attribute],\n@@ -977,7 +977,7 @@ pub fn print_possibly_embedded_block_(s: @ps,\n     (s.ann.post)(ann_node);\n }\n \n-pub fn print_if(s: @ps, test: &ast::expr, blk: &ast::blk,\n+pub fn print_if(s: @ps, test: &ast::expr, blk: &ast::Block,\n                 elseopt: Option<@ast::expr>, chk: bool) {\n     head(s, \"if\");\n     if chk { word_nbsp(s, \"check\"); }\n@@ -1103,14 +1103,14 @@ pub fn print_call_post(s: @ps,\n }\n \n pub fn print_expr(s: @ps, expr: &ast::expr) {\n-    fn print_field(s: @ps, field: &ast::field) {\n+    fn print_field(s: @ps, field: &ast::Field) {\n         ibox(s, indent_unit);\n-        print_ident(s, field.node.ident);\n+        print_ident(s, field.ident);\n         word_space(s, \":\");\n-        print_expr(s, field.node.expr);\n+        print_expr(s, field.expr);\n         end(s);\n     }\n-    fn get_span(field: &ast::field) -> codemap::span { return field.span; }\n+    fn get_span(field: &ast::Field) -> codemap::span { return field.span; }\n \n     maybe_print_comment(s, expr.span.lo);\n     ibox(s, indent_unit);\n@@ -1447,11 +1447,11 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n     end(s);\n }\n \n-pub fn print_local_decl(s: @ps, loc: &ast::local) {\n-    print_pat(s, loc.node.pat);\n-    match loc.node.ty.node {\n+pub fn print_local_decl(s: @ps, loc: &ast::Local) {\n+    print_pat(s, loc.pat);\n+    match loc.ty.node {\n       ast::ty_infer => (),\n-      _ => { word_space(s, \":\"); print_type(s, &loc.node.ty); }\n+      _ => { word_space(s, \":\"); print_type(s, &loc.ty); }\n     }\n }\n \n@@ -1463,15 +1463,15 @@ pub fn print_decl(s: @ps, decl: &ast::decl) {\n         ibox(s, indent_unit);\n         word_nbsp(s, \"let\");\n \n-        if loc.node.is_mutbl {\n+        if loc.is_mutbl {\n             word_nbsp(s, \"mut\");\n         }\n \n-        fn print_local(s: @ps, loc: &ast::local) {\n+        fn print_local(s: @ps, loc: &ast::Local) {\n             ibox(s, indent_unit);\n             print_local_decl(s, loc);\n             end(s);\n-            match loc.node.init {\n+            match loc.init {\n               Some(init) => {\n                 nbsp(s);\n                 word_space(s, \"=\");\n@@ -1492,7 +1492,7 @@ pub fn print_ident(s: @ps, ident: ast::ident) {\n     word(s.s, ident_to_str(&ident));\n }\n \n-pub fn print_for_decl(s: @ps, loc: &ast::local, coll: &ast::expr) {\n+pub fn print_for_decl(s: @ps, loc: &ast::Local, coll: &ast::expr) {\n     print_local_decl(s, loc);\n     space(s.s);\n     word_space(s, \"in\");"}, {"sha": "de97396e45377a8f55284eb219d3e63b2ca0c18d", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -33,7 +33,7 @@ pub fn string_to_parser(source_str: @str) -> Parser {\n     p\n }\n \n-pub fn string_to_crate (source_str : @str) -> @ast::crate {\n+pub fn string_to_crate (source_str : @str) -> @ast::Crate {\n     string_to_parser(source_str).parse_crate_mod()\n }\n "}, {"sha": "7e86adfcb6306f33112e007a5dfb21bb9ac38d0c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -75,8 +75,8 @@ pub struct Visitor<E> {\n     visit_view_item: @fn(&view_item, (E, vt<E>)),\n     visit_foreign_item: @fn(@foreign_item, (E, vt<E>)),\n     visit_item: @fn(@item, (E, vt<E>)),\n-    visit_local: @fn(@local, (E, vt<E>)),\n-    visit_block: @fn(&blk, (E, vt<E>)),\n+    visit_local: @fn(@Local, (E, vt<E>)),\n+    visit_block: @fn(&Block, (E, vt<E>)),\n     visit_stmt: @fn(@stmt, (E, vt<E>)),\n     visit_arm: @fn(&arm, (E, vt<E>)),\n     visit_pat: @fn(@pat, (E, vt<E>)),\n@@ -85,7 +85,7 @@ pub struct Visitor<E> {\n     visit_expr_post: @fn(@expr, (E, vt<E>)),\n     visit_ty: @fn(&Ty, (E, vt<E>)),\n     visit_generics: @fn(&Generics, (E, vt<E>)),\n-    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id, (E, vt<E>)),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &Block, span, node_id, (E, vt<E>)),\n     visit_ty_method: @fn(&ty_method, (E, vt<E>)),\n     visit_trait_method: @fn(&trait_method, (E, vt<E>)),\n     visit_struct_def: @fn(@struct_def, ident, &Generics, node_id, (E, vt<E>)),\n@@ -118,8 +118,8 @@ pub fn default_visitor<E:Clone>() -> visitor<E> {\n     };\n }\n \n-pub fn visit_crate<E:Clone>(c: &crate, (e, v): (E, vt<E>)) {\n-    (v.visit_mod)(&c.node.module, c.span, crate_node_id, (e, v));\n+pub fn visit_crate<E:Clone>(c: &Crate, (e, v): (E, vt<E>)) {\n+    (v.visit_mod)(&c.module, c.span, crate_node_id, (e, v));\n }\n \n pub fn visit_mod<E:Clone>(m: &_mod,\n@@ -136,10 +136,10 @@ pub fn visit_mod<E:Clone>(m: &_mod,\n \n pub fn visit_view_item<E>(_vi: &view_item, (_e, _v): (E, vt<E>)) { }\n \n-pub fn visit_local<E:Clone>(loc: &local, (e, v): (E, vt<E>)) {\n-    (v.visit_pat)(loc.node.pat, (e.clone(), v));\n-    (v.visit_ty)(&loc.node.ty, (e.clone(), v));\n-    match loc.node.init {\n+pub fn visit_local<E:Clone>(loc: &Local, (e, v): (E, vt<E>)) {\n+    (v.visit_pat)(loc.pat, (e.clone(), v));\n+    (v.visit_ty)(&loc.ty, (e.clone(), v));\n+    match loc.init {\n       None => (),\n       Some(ex) => (v.visit_expr)(ex, (e, v))\n     }\n@@ -386,7 +386,7 @@ pub fn visit_method_helper<E:Clone>(m: &method, (e, v): (E, vt<E>)) {\n                  (e, v));\n }\n \n-pub fn visit_fn<E:Clone>(fk: &fn_kind, decl: &fn_decl, body: &blk, _sp: span,\n+pub fn visit_fn<E:Clone>(fk: &fn_kind, decl: &fn_decl, body: &Block, _sp: span,\n                          _id: node_id, (e, v): (E, vt<E>)) {\n     visit_fn_decl(decl, (e.clone(), v));\n     let generics = generics_of_fn(fk);\n@@ -425,7 +425,7 @@ pub fn visit_struct_field<E:Clone>(sf: &struct_field, (e, v): (E, vt<E>)) {\n     (v.visit_ty)(&sf.node.ty, (e, v));\n }\n \n-pub fn visit_block<E:Clone>(b: &blk, (e, v): (E, vt<E>)) {\n+pub fn visit_block<E:Clone>(b: &Block, (e, v): (E, vt<E>)) {\n     for b.view_items.iter().advance |vi| {\n         (v.visit_view_item)(vi, (e.clone(), v));\n     }\n@@ -474,7 +474,7 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n         expr_struct(ref p, ref flds, base) => {\n             visit_path(p, (e.clone(), v));\n             for flds.iter().advance |f| {\n-                (v.visit_expr)(f.node.expr, (e.clone(), v));\n+                (v.visit_expr)(f.expr, (e.clone(), v));\n             }\n             visit_expr_opt(base, (e.clone(), v));\n         }\n@@ -583,8 +583,8 @@ pub struct SimpleVisitor {\n     visit_view_item: @fn(&view_item),\n     visit_foreign_item: @fn(@foreign_item),\n     visit_item: @fn(@item),\n-    visit_local: @fn(@local),\n-    visit_block: @fn(&blk),\n+    visit_local: @fn(@Local),\n+    visit_block: @fn(&Block),\n     visit_stmt: @fn(@stmt),\n     visit_arm: @fn(&arm),\n     visit_pat: @fn(@pat),\n@@ -593,7 +593,7 @@ pub struct SimpleVisitor {\n     visit_expr_post: @fn(@expr),\n     visit_ty: @fn(&Ty),\n     visit_generics: @fn(&Generics),\n-    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &Block, span, node_id),\n     visit_ty_method: @fn(&ty_method),\n     visit_trait_method: @fn(&trait_method),\n     visit_struct_def: @fn(@struct_def, ident, &Generics, node_id),\n@@ -653,11 +653,11 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(i);\n         visit_item(i, (e, v));\n     }\n-    fn v_local(f: @fn(@local), l: @local, (e, v): ((), vt<()>)) {\n+    fn v_local(f: @fn(@Local), l: @Local, (e, v): ((), vt<()>)) {\n         f(l);\n         visit_local(l, (e, v));\n     }\n-    fn v_block(f: @fn(&ast::blk), bl: &ast::blk, (e, v): ((), vt<()>)) {\n+    fn v_block(f: @fn(&ast::Block), bl: &ast::Block, (e, v): ((), vt<()>)) {\n         f(bl);\n         visit_block(bl, (e, v));\n     }\n@@ -718,10 +718,10 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         visit_generics(ps, (e, v));\n     }\n     fn v_fn(\n-        f: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n+        f: @fn(&fn_kind, &fn_decl, &Block, span, node_id),\n         fk: &fn_kind,\n         decl: &fn_decl,\n-        body: &blk,\n+        body: &Block,\n         sp: span,\n         id: node_id,\n         (e, v): ((), vt<()>)"}, {"sha": "d2cc726deab62756162593b27d11cd9f2dea5c4f", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -23,7 +23,7 @@ use syntax::print::*;\n \n \n trait fake_ext_ctxt {\n-    fn cfg() -> ast::crate_cfg;\n+    fn cfg() -> ast::Crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n     fn call_site() -> span;\n     fn ident_of(st: &str) -> ast::ident;\n@@ -32,7 +32,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::crate_cfg { ~[] }\n+    fn cfg() -> ast::Crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}, {"sha": "5f6e31151e8c57065f9ec7f1fe3519c78cdb3e03", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -22,7 +22,7 @@ use syntax::parse::parser;\n use syntax::print::*;\n \n trait fake_ext_ctxt {\n-    fn cfg() -> ast::crate_cfg;\n+    fn cfg() -> ast::Crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n     fn call_site() -> span;\n     fn ident_of(st: &str) -> ast::ident;\n@@ -31,7 +31,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::crate_cfg { ~[] }\n+    fn cfg() -> ast::Crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}, {"sha": "072eaff12659867652e044506b5aa86a723ee41e", "filename": "src/test/run-pass-fulldeps/issue-1926.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -32,18 +32,18 @@ fn new_parse_sess() -> parser::parse_sess {\n \n trait fake_ext_ctxt {\n     fn session() -> fake_session;\n-    fn cfg() -> ast::crate_cfg;\n+    fn cfg() -> ast::Crate_cfg;\n     fn parse_sess() -> parser::parse_sess;\n }\n \n-type fake_options = {cfg: ast::crate_cfg};\n+type fake_options = {cfg: ast::Crate_cfg};\n \n type fake_session = {opts: @fake_options,\n                      parse_sess: parser::parse_sess};\n \n impl of fake_ext_ctxt for fake_session {\n     fn session() -> fake_session {self}\n-    fn cfg() -> ast::crate_cfg { self.opts.cfg }\n+    fn cfg() -> ast::Crate_cfg { self.opts.cfg }\n     fn parse_sess() -> parser::parse_sess { self.parse_sess }\n }\n "}, {"sha": "2cca82263cd7002c2f9c15aee37009b44666a4d1", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b7fc14fe4444f0de91a474c70cbf248f96b763/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=52b7fc14fe4444f0de91a474c70cbf248f96b763", "patch": "@@ -24,7 +24,7 @@ use syntax::print::*;\n \n \n trait fake_ext_ctxt {\n-    fn cfg() -> ast::crate_cfg;\n+    fn cfg() -> ast::Crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n     fn call_site() -> span;\n     fn ident_of(st: &str) -> ast::ident;\n@@ -33,7 +33,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::crate_cfg { ~[] }\n+    fn cfg() -> ast::Crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}]}