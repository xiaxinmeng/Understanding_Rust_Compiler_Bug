{"sha": "a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjNlM2VhMTA5M2IxZDYyYjVhYzYwN2MxNDBhMTE5ZmQ4YTk0ZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-16T00:27:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-16T00:27:18Z"}, "message": "rustc: Cache results of ty::tag_variants", "tree": {"sha": "ca7d9588fc303c3356b45d0fff95f6089787c0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7d9588fc303c3356b45d0fff95f6089787c0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd", "html_url": "https://github.com/rust-lang/rust/commit/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c6272f860f919809a52f3cd937989a9446d90e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c6272f860f919809a52f3cd937989a9446d90e", "html_url": "https://github.com/rust-lang/rust/commit/68c6272f860f919809a52f3cd937989a9446d90e"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "0708ff78ff380c75a2afd08e23e39063da8c3cb8", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a1b3e3ea1093b1d62b5ac607c140a119fd8a94dd", "patch": "@@ -211,6 +211,9 @@ type mt = {ty: t, mut: ast::mutability};\n // the types of AST nodes.\n type creader_cache = hashmap<{cnum: int, pos: uint, len: uint}, ty::t>;\n \n+type tag_var_cache =\n+    @smallintmap::smallintmap<@mutable [variant_info]>;\n+\n tag cast_type {\n     /* cast may be ignored after substituting primitive with machine types\n        since expr already has the right type */\n@@ -234,7 +237,8 @@ type ctxt =\n       short_names_cache: hashmap<t, @str>,\n       needs_drop_cache: hashmap<t, bool>,\n       kind_cache: hashmap<t, ast::kind>,\n-      ast_ty_to_ty_cache: hashmap<@ast::ty, option::t<t>>};\n+      ast_ty_to_ty_cache: hashmap<@ast::ty, option::t<t>>,\n+      tag_var_cache: tag_var_cache};\n \n type ty_ctxt = ctxt;\n \n@@ -433,7 +437,8 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map,\n           needs_drop_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n           kind_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n           ast_ty_to_ty_cache:\n-              map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty)};\n+              map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty),\n+          tag_var_cache: @smallintmap::mk()};\n     populate_type_store(cx);\n     ret cx;\n }\n@@ -2720,6 +2725,11 @@ type variant_info = {args: [ty::t], ctor_ty: ty::t, id: ast::def_id};\n \n fn tag_variants(cx: ctxt, id: ast::def_id) -> [variant_info] {\n     if ast::local_crate != id.crate { ret csearch::get_tag_variants(cx, id); }\n+    assert (id.node >= 0);\n+    alt smallintmap::find(*cx.tag_var_cache, id.node as uint) {\n+      option::some(variants) { ret *variants; }\n+      _ { /* fallthrough */ }\n+    }\n     let item =\n         alt cx.items.find(id.node) {\n           some(i) { i }\n@@ -2729,7 +2739,7 @@ fn tag_variants(cx: ctxt, id: ast::def_id) -> [variant_info] {\n       ast_map::node_item(item) {\n         alt item.node {\n           ast::item_tag(variants, _) {\n-            let result: [variant_info] = [];\n+            let result: @mutable [variant_info] = @mutable [];\n             for variant: ast::variant in variants {\n                 let ctor_ty = node_id_to_monotype(cx, variant.node.id);\n                 let arg_tys: [t] = [];\n@@ -2739,12 +2749,13 @@ fn tag_variants(cx: ctxt, id: ast::def_id) -> [variant_info] {\n                     }\n                 }\n                 let did = variant.node.id;\n-                result +=\n+                *result +=\n                     [{args: arg_tys,\n                       ctor_ty: ctor_ty,\n                       id: ast_util::local_def(did)}];\n             }\n-            ret result;\n+            smallintmap::insert(*cx.tag_var_cache, id.node as uint, result);\n+            ret *result;\n           }\n         }\n       }"}]}