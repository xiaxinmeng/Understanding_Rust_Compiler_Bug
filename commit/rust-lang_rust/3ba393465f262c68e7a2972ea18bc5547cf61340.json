{"sha": "3ba393465f262c68e7a2972ea18bc5547cf61340", "node_id": "C_kwDOAAsO6NoAKDNiYTM5MzQ2NWYyNjJjNjhlN2EyOTcyZWExOGJjNTU0N2NmNjEzNDA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-19T09:33:46Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-20T22:22:20Z"}, "message": "Make some docs nicer wrt pointer offsets", "tree": {"sha": "3d175d577b026d5ee26efc8455d5f0c9ed6d4abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d175d577b026d5ee26efc8455d5f0c9ed6d4abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba393465f262c68e7a2972ea18bc5547cf61340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba393465f262c68e7a2972ea18bc5547cf61340", "html_url": "https://github.com/rust-lang/rust/commit/3ba393465f262c68e7a2972ea18bc5547cf61340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba393465f262c68e7a2972ea18bc5547cf61340/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c943bad02626dddc5e5135b23c77429b6e4a063", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c943bad02626dddc5e5135b23c77429b6e4a063", "html_url": "https://github.com/rust-lang/rust/commit/6c943bad02626dddc5e5135b23c77429b6e4a063"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "be21d8c722d78217c8f27617f09b5a183f6f0f40", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=3ba393465f262c68e7a2972ea18bc5547cf61340", "patch": "@@ -436,9 +436,9 @@ impl CString {\n     ///\n     /// unsafe {\n     ///     assert_eq!(b'f', *ptr as u8);\n-    ///     assert_eq!(b'o', *ptr.offset(1) as u8);\n-    ///     assert_eq!(b'o', *ptr.offset(2) as u8);\n-    ///     assert_eq!(b'\\0', *ptr.offset(3) as u8);\n+    ///     assert_eq!(b'o', *ptr.add(1) as u8);\n+    ///     assert_eq!(b'o', *ptr.add(2) as u8);\n+    ///     assert_eq!(b'\\0', *ptr.add(3) as u8);\n     ///\n     ///     // retake pointer to free memory\n     ///     let _ = CString::from_raw(ptr);"}, {"sha": "fe4dcafe14c322135343140011d6658e2ff6473b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3ba393465f262c68e7a2972ea18bc5547cf61340", "patch": "@@ -542,8 +542,8 @@ impl<T> Vec<T> {\n     ///\n     /// unsafe {\n     ///     // Overwrite memory with 4, 5, 6\n-    ///     for i in 0..len as isize {\n-    ///         ptr::write(p.offset(i), 4 + i);\n+    ///     for i in 0..len {\n+    ///         ptr::write(p.add(i), 4 + i);\n     ///     }\n     ///\n     ///     // Put everything back together into a Vec\n@@ -702,8 +702,8 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// unsafe {\n     ///     // Overwrite memory with 4, 5, 6\n-    ///     for i in 0..len as isize {\n-    ///         ptr::write(p.offset(i), 4 + i);\n+    ///     for i in 0..len {\n+    ///         ptr::write(p.add(i), 4 + i);\n     ///     }\n     ///\n     ///     // Put everything back together into a Vec"}, {"sha": "3c2a2418aadce17697efaddf4058eb5114668566", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3ba393465f262c68e7a2972ea18bc5547cf61340", "patch": "@@ -2211,7 +2211,7 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n ///     unsafe {\n ///         // The call to offset is always safe because `Vec` will never\n ///         // allocate more than `isize::MAX` bytes.\n-///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n+///         let dst_ptr = dst.as_mut_ptr().add(dst_len);\n ///         let src_ptr = src.as_ptr();\n ///\n ///         // Truncate `src` without dropping its contents. We do this first,"}, {"sha": "21ac9c5c7e3c1662948ac5340893c4034f848704", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba393465f262c68e7a2972ea18bc5547cf61340/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=3ba393465f262c68e7a2972ea18bc5547cf61340", "patch": "@@ -1555,7 +1555,7 @@ impl<T> AtomicPtr<T> {\n     /// previous pointer.\n     ///\n     /// This is equivalent to using [`wrapping_add`] and [`cast`] to atomically\n-    /// perform `ptr = ptr.cast::<u8>().wrapping_add(val).cast::<T>()`.\n+    /// perform `ptr = ptr.wrapping_byte_add(val)`.\n     ///\n     /// `fetch_byte_add` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note\n@@ -1592,7 +1592,7 @@ impl<T> AtomicPtr<T> {\n     /// previous pointer.\n     ///\n     /// This is equivalent to using [`wrapping_sub`] and [`cast`] to atomically\n-    /// perform `ptr = ptr.cast::<u8>().wrapping_sub(val).cast::<T>()`.\n+    /// perform `ptr = ptr.wrapping_byte_sub(val)`.\n     ///\n     /// `fetch_byte_sub` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note"}]}