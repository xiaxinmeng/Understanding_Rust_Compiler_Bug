{"sha": "7ef9eb321a0e3acf350af3866041ba75251d2884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZjllYjMyMWEwZTNhY2YzNTBhZjM4NjYwNDFiYTc1MjUxZDI4ODQ=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-18T22:44:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:44:11Z"}, "message": "Merge pull request #4 from rust-lang/master\n\nupdate from origin 2020-06-18", "tree": {"sha": "a75a537d742c221ba3c706ef66d54ae86c2e9a83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75a537d742c221ba3c706ef66d54ae86c2e9a83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef9eb321a0e3acf350af3866041ba75251d2884", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+47CRBK7hj4Ov3rIwAAdHIIAJuQbLAZB4w54oDt3cMy09p+\nLNBU4KYyb7NNVPIuRNMls87Qh0wqDKdtXVnlrg1oH0I6UbmnNAs1XwsG8o4/B8Yv\nIcMidK8Wuq/Yuq8+FOq2NKPmWvmP2SQ1rmY8neBTNdPCFEN50R8rr1rP4D/BkVXj\nzC2W2/SZsP90hVHywheyO7hnKaWvRdX82NxzxpOBWUDBQe2HpNlWuvrmsv8Da0Cy\ndEnh2hDq9KpKuQbZoKsgctPBaEjeWNzqO5VaK6wieGl4GOAjW7DwDP5fOYPgMR4U\n3uClRdtIUaRVjd30VTrHoEzKosUUfdhWqTwfvM5SPcXR/jYn5UyMTm/h0FUVuD4=\n=HPF2\n-----END PGP SIGNATURE-----\n", "payload": "tree a75a537d742c221ba3c706ef66d54ae86c2e9a83\nparent 395256a5dd74ccef046083d6e025a6d046379040\nparent e55d3f9c5213fe1a25366450127bdff67ad1eca2\nauthor Rich Kadel <richkadel@google.com> 1592520251 -0700\ncommitter GitHub <noreply@github.com> 1592520251 -0700\n\nMerge pull request #4 from rust-lang/master\n\nupdate from origin 2020-06-18"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef9eb321a0e3acf350af3866041ba75251d2884", "html_url": "https://github.com/rust-lang/rust/commit/7ef9eb321a0e3acf350af3866041ba75251d2884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef9eb321a0e3acf350af3866041ba75251d2884/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395256a5dd74ccef046083d6e025a6d046379040", "url": "https://api.github.com/repos/rust-lang/rust/commits/395256a5dd74ccef046083d6e025a6d046379040", "html_url": "https://github.com/rust-lang/rust/commit/395256a5dd74ccef046083d6e025a6d046379040"}, {"sha": "e55d3f9c5213fe1a25366450127bdff67ad1eca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d3f9c5213fe1a25366450127bdff67ad1eca2", "html_url": "https://github.com/rust-lang/rust/commit/e55d3f9c5213fe1a25366450127bdff67ad1eca2"}], "stats": {"total": 356, "additions": 223, "deletions": 133}, "files": [{"sha": "006682f50593662b5cef199b4ec7f4beece47062", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -912,7 +912,7 @@ Compatibility Notes\n [`Duration::mul_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f32\n [`Duration::mul_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f64\n [`any::type_name`]: https://doc.rust-lang.org/std/any/fn.type_name.html\n-[forge-platform-support]: https://forge.rust-lang.org/platform-support.html\n+[forge-platform-support]: https://forge.rust-lang.org/release/platform-support.html\n [pipeline-internals]: https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199\n \n Version 1.37.0 (2019-08-15)"}, {"sha": "c9c75aed7b0fba6246dd6b5595d34771d44d9af2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -244,6 +244,16 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, ca\n     if stage >= 1 {\n         cargo.rustflag(\"-Cembed-bitcode=yes\");\n     }\n+\n+    // By default, rustc does not include unwind tables unless they are required\n+    // for a particular target. They are not required by RISC-V targets, but\n+    // compiling the standard library with them means that users can get\n+    // backtraces without having to recompile the standard library themselves.\n+    //\n+    // This choice was discussed in https://github.com/rust-lang/rust/pull/69890\n+    if target.contains(\"riscv\") {\n+        cargo.rustflag(\"-Cforce-unwind-tables=yes\");\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "3726115357436166b5fa9e6cf05c616d9cc6d62e", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -149,7 +149,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"N\",\n         );\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n-        opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n+        let j_msg = format!(\n+            \"number of jobs to run in parallel; \\\n+             defaults to {} (this host's logical CPU count)\",\n+            num_cpus::get()\n+        );\n+        opts.optopt(\"j\", \"jobs\", &j_msg, \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n         opts.optopt(\n             \"\","}, {"sha": "161f5d5ffd8f5cfb34c768329a0007e4aa10c6d0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -554,7 +554,10 @@ impl Step for Clippy {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        builder.run(&mut cargo.into());\n+        // FIXME: Disable clippy tests for now, they're failing on master\n+        // (generally this would mean a toolstate failure but we don't have\n+        // toolstate for clippy anymore).\n+        // builder.run(&mut cargo.into());\n     }\n }\n "}, {"sha": "8740393288c48021800631de542eec2b15064587", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -272,6 +272,18 @@ impl Builder<'_> {\n     /// `rust.save-toolstates` in `config.toml`. If unspecified, nothing will be\n     /// done. The file is updated immediately after this function completes.\n     pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n+        // If we're in a dry run setting we don't want to save toolstates as\n+        // that means if we e.g. panic down the line it'll look like we tested\n+        // everything (but we actually haven't).\n+        if self.config.dry_run {\n+            return;\n+        }\n+        // Toolstate isn't tracked for clippy, but since most tools do, we avoid\n+        // checking in all the places we could save toolstate and just do so\n+        // here.\n+        if tool == \"clippy-driver\" {\n+            return;\n+        }\n         if let Some(ref path) = self.config.save_toolstates {\n             if let Some(parent) = path.parent() {\n                 // Ensure the parent directory always exists"}, {"sha": "b4b23a245e0aa928b0d7689e9ba8b07ba953f25c", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -14,11 +14,13 @@ python3 \"$X_PY\" test --no-fail-fast \\\n     src/doc/rust-by-example \\\n     src/doc/embedded-book \\\n     src/doc/edition-guide \\\n-    src/tools/clippy \\\n     src/tools/rls \\\n     src/tools/rustfmt \\\n     src/tools/miri \\\n \n set -e\n \n+# debugging: print out the saved toolstates\n+cat /tmp/toolstate/toolstates.json\n python3 \"$X_PY\" test check-tools\n+python3 \"$X_PY\" test src/tools/clippy"}, {"sha": "8bce980cadd1e46221d7c915625248a54cb68d7f", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -129,7 +129,7 @@ pub use crate::intrinsics::transmute;\n /// erring on the side of (double-)dropping.\n ///\n /// Also, `ManuallyDrop` prevents us from having to \"touch\" `v` after transferring the\n-/// ownership to `s` - the final step of interacting with `v` to dispoe of it without\n+/// ownership to `s` \u2014 the final step of interacting with `v` to dispose of it without\n /// running its destructor is entirely avoided.\n ///\n /// [drop]: fn.drop.html"}, {"sha": "c7009b76e814817042fb3bab5d9cea92f1ae7845", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -39,8 +39,7 @@ pub struct PanicInfo<'a> {\n impl<'a> PanicInfo<'a> {\n     #[unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                         and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]\n@@ -55,8 +54,7 @@ impl<'a> PanicInfo<'a> {\n \n     #[unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                         and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]\n@@ -244,8 +242,7 @@ impl<'a> Location<'a> {\n impl<'a> Location<'a> {\n     #![unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                          and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]"}, {"sha": "766c69a5f94206ae7944ae635c5f17fbe954c219", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -22,8 +22,7 @@\n #![allow(dead_code, missing_docs)]\n #![unstable(\n     feature = \"core_panic\",\n-    reason = \"internal details of the implementation of the `panic!` \\\n-              and related macros\",\n+    reason = \"internal details of the implementation of the `panic!` and related macros\",\n     issue = \"none\"\n )]\n "}, {"sha": "66c31cbebcc1efbea0181492aad8a29bcf312231", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 41, "deletions": 31, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -333,13 +333,6 @@ impl Default for DroplessArena {\n }\n \n impl DroplessArena {\n-    #[inline]\n-    fn align(&self, align: usize) {\n-        let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n-        self.ptr.set(final_address as *mut u8);\n-        assert!(self.ptr <= self.end);\n-    }\n-\n     #[inline(never)]\n     #[cold]\n     fn grow(&self, additional: usize) {\n@@ -370,30 +363,50 @@ impl DroplessArena {\n         }\n     }\n \n+    /// Allocates a byte slice with specified size and alignment from the\n+    /// current memory chunk. Returns `None` if there is no free space left to\n+    /// satisfy the request.\n     #[inline]\n-    pub fn alloc_raw(&self, bytes: usize, align: usize) -> &mut [u8] {\n-        unsafe {\n-            assert!(bytes != 0);\n-\n-            self.align(align);\n+    fn alloc_raw_without_grow(&self, bytes: usize, align: usize) -> Option<*mut u8> {\n+        let ptr = self.ptr.get() as usize;\n+        let end = self.end.get() as usize;\n+        // The allocation request fits into the current chunk iff:\n+        //\n+        // let aligned = align_to(ptr, align);\n+        // ptr <= aligned && aligned + bytes <= end\n+        //\n+        // Except that we work with fixed width integers and need to be careful\n+        // about potential overflow in the calcuation. If the overflow does\n+        // happen, then we definitely don't have enough free and need to grow\n+        // the arena.\n+        let aligned = ptr.checked_add(align - 1)? & !(align - 1);\n+        let new_ptr = aligned.checked_add(bytes)?;\n+        if new_ptr <= end {\n+            self.ptr.set(new_ptr as *mut u8);\n+            Some(aligned as *mut u8)\n+        } else {\n+            None\n+        }\n+    }\n \n-            let future_end = intrinsics::arith_offset(self.ptr.get(), bytes as isize);\n-            if (future_end as *mut u8) > self.end.get() {\n-                self.grow(bytes);\n+    #[inline]\n+    pub fn alloc_raw(&self, bytes: usize, align: usize) -> *mut u8 {\n+        assert!(bytes != 0);\n+        loop {\n+            if let Some(a) = self.alloc_raw_without_grow(bytes, align) {\n+                break a;\n             }\n-\n-            let ptr = self.ptr.get();\n-            // Set the pointer past ourselves\n-            self.ptr.set(intrinsics::arith_offset(self.ptr.get(), bytes as isize) as *mut u8);\n-            slice::from_raw_parts_mut(ptr, bytes)\n+            // No free space left. Allocate a new chunk to satisfy the request.\n+            // On failure the grow will panic or abort.\n+            self.grow(bytes);\n         }\n     }\n \n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         assert!(!mem::needs_drop::<T>());\n \n-        let mem = self.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n+        let mem = self.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n \n         unsafe {\n             // Write into uninitialized memory.\n@@ -418,13 +431,11 @@ impl DroplessArena {\n         assert!(mem::size_of::<T>() != 0);\n         assert!(!slice.is_empty());\n \n-        let mem = self.alloc_raw(slice.len() * mem::size_of::<T>(), mem::align_of::<T>()) as *mut _\n-            as *mut T;\n+        let mem = self.alloc_raw(slice.len() * mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n \n         unsafe {\n-            let arena_slice = slice::from_raw_parts_mut(mem, slice.len());\n-            arena_slice.copy_from_slice(slice);\n-            arena_slice\n+            mem.copy_from_nonoverlapping(slice.as_ptr(), slice.len());\n+            slice::from_raw_parts_mut(mem, slice.len())\n         }\n     }\n \n@@ -467,7 +478,7 @@ impl DroplessArena {\n                     return &mut [];\n                 }\n                 let size = len.checked_mul(mem::size_of::<T>()).unwrap();\n-                let mem = self.alloc_raw(size, mem::align_of::<T>()) as *mut _ as *mut T;\n+                let mem = self.alloc_raw(size, mem::align_of::<T>()) as *mut T;\n                 unsafe { self.write_from_iter(iter, len, mem) }\n             }\n             (_, _) => {\n@@ -482,7 +493,7 @@ impl DroplessArena {\n                         let len = vec.len();\n                         let start_ptr = self\n                             .alloc_raw(len * mem::size_of::<T>(), mem::align_of::<T>())\n-                            as *mut _ as *mut T;\n+                            as *mut T;\n                         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n                         vec.set_len(0);\n                         slice::from_raw_parts_mut(start_ptr, len)\n@@ -526,8 +537,7 @@ pub struct DropArena {\n impl DropArena {\n     #[inline]\n     pub unsafe fn alloc<T>(&self, object: T) -> &mut T {\n-        let mem =\n-            self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n+        let mem = self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n         // Write into uninitialized memory.\n         ptr::write(mem, object);\n         let result = &mut *mem;\n@@ -550,7 +560,7 @@ impl DropArena {\n         let start_ptr = self\n             .arena\n             .alloc_raw(len.checked_mul(mem::size_of::<T>()).unwrap(), mem::align_of::<T>())\n-            as *mut _ as *mut T;\n+            as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n         // Reserve space for the destructors so we can't panic while adding them"}, {"sha": "efcabc57e6f70908016b116a13699235f87f2420", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -280,7 +280,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n         match output_kind {\n             LinkOutputKind::DynamicNoPicExe => {\n-                if !self.is_ld {\n+                if !self.is_ld && self.sess.target.target.options.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -291,7 +291,7 @@ impl<'a> Linker for GccLinker<'a> {\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n                 self.cmd.arg(\"-static\");\n-                if !self.is_ld {\n+                if !self.is_ld && self.sess.target.target.options.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }"}, {"sha": "a15ac819be966b3a1c2ee2680919c12703ffb305", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -59,7 +59,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 88);\n+static_assert_size!(PredicateObligation<'_>, 48);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "ee9846c64b67c1033608b52baf62e00cf11061e1", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -142,10 +142,12 @@ fn predicate_obligation<'tcx>(\n     predicate: ty::Predicate<'tcx>,\n     span: Option<Span>,\n ) -> PredicateObligation<'tcx> {\n-    let mut cause = ObligationCause::dummy();\n-    if let Some(span) = span {\n-        cause.span = span;\n-    }\n+    let cause = if let Some(span) = span {\n+        ObligationCause::dummy_with_span(span)\n+    } else {\n+        ObligationCause::dummy()\n+    };\n+\n     Obligation { cause, param_env: ty::ParamEnv::empty(), recursion_depth: 0, predicate }\n }\n "}, {"sha": "a5482b7bdcfeb1a40c69a4b4483727fc093cfa97", "filename": "src/librustc_middle/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmacros.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -1,16 +1,20 @@\n #[macro_export]\n macro_rules! bug {\n-    () => ( bug!(\"impossible case reached\") );\n-    ($($message:tt)*) => ({\n-        $crate::util::bug::bug_fmt(file!(), line!(), format_args!($($message)*))\n-    })\n+    () => ( $crate::bug!(\"impossible case reached\") );\n+    ($msg:expr) => ({ $crate::util::bug::bug_fmt(::std::format_args!($msg)) });\n+    ($msg:expr,) => ({ $crate::bug!($msg) });\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::bug_fmt(::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n #[macro_export]\n macro_rules! span_bug {\n-    ($span:expr, $($message:tt)*) => ({\n-        $crate::util::bug::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n-    })\n+    ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });\n+    ($span:expr, $msg:expr,) => ({ $crate::span_bug!($span, $msg) });\n+    ($span:expr, $fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::span_bug_fmt($span, ::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "17ea84836bf0adda03fb96886e3a2f369b4900d8", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -20,7 +20,8 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n \n use std::borrow::Cow;\n-use std::fmt::Debug;\n+use std::fmt;\n+use std::ops::Deref;\n use std::rc::Rc;\n \n pub use self::select::{EvaluationCache, EvaluationResult, OverflowError, SelectionCache};\n@@ -80,8 +81,39 @@ pub enum Reveal {\n }\n \n /// The reason why we incurred this obligation; used for error reporting.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+///\n+/// As the happy path does not care about this struct, storing this on the heap\n+/// ends up increasing performance.\n+///\n+/// We do not want to intern this as there are a lot of obligation causes which\n+/// only live for a short period of time.\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {\n+    /// `None` for `ObligationCause::dummy`, `Some` otherwise.\n+    data: Option<Rc<ObligationCauseData<'tcx>>>,\n+}\n+\n+const DUMMY_OBLIGATION_CAUSE_DATA: ObligationCauseData<'static> =\n+    ObligationCauseData { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: MiscObligation };\n+\n+// Correctly format `ObligationCause::dummy`.\n+impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ObligationCauseData::fmt(self, f)\n+    }\n+}\n+\n+impl Deref for ObligationCause<'tcx> {\n+    type Target = ObligationCauseData<'tcx>;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &Self::Target {\n+        self.data.as_deref().unwrap_or(&DUMMY_OBLIGATION_CAUSE_DATA)\n+    }\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct ObligationCauseData<'tcx> {\n     pub span: Span,\n \n     /// The ID of the fn body that triggered this obligation. This is\n@@ -102,15 +134,24 @@ impl<'tcx> ObligationCause<'tcx> {\n         body_id: hir::HirId,\n         code: ObligationCauseCode<'tcx>,\n     ) -> ObligationCause<'tcx> {\n-        ObligationCause { span, body_id, code }\n+        ObligationCause { data: Some(Rc::new(ObligationCauseData { span, body_id, code })) }\n     }\n \n     pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {\n-        ObligationCause { span, body_id, code: MiscObligation }\n+        ObligationCause::new(span, body_id, MiscObligation)\n     }\n \n+    pub fn dummy_with_span(span: Span) -> ObligationCause<'tcx> {\n+        ObligationCause::new(span, hir::CRATE_HIR_ID, MiscObligation)\n+    }\n+\n+    #[inline(always)]\n     pub fn dummy() -> ObligationCause<'tcx> {\n-        ObligationCause { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: MiscObligation }\n+        ObligationCause { data: None }\n+    }\n+\n+    pub fn make_mut(&mut self) -> &mut ObligationCauseData<'tcx> {\n+        Rc::make_mut(self.data.get_or_insert_with(|| Rc::new(DUMMY_OBLIGATION_CAUSE_DATA)))\n     }\n \n     pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {"}, {"sha": "faaa576f17903d5187bebb574723b1956a57880a", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -232,11 +232,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n     type Lifted = traits::ObligationCause<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.code).map(|code| traits::ObligationCause {\n-            span: self.span,\n-            body_id: self.body_id,\n-            code,\n-        })\n+        tcx.lift(&self.code).map(|code| traits::ObligationCause::new(self.span, self.body_id, code))\n     }\n }\n "}, {"sha": "de2e1046f1cbbb60ea245fbe5655ed737ca21325", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -189,8 +189,7 @@ fn validate_hir_id_for_typeck_tables(\n         if hir_id.owner != hir_owner {\n             ty::tls::with(|tcx| {\n                 bug!(\n-                    \"node {} with HirId::owner {:?} cannot be placed in \\\n-                     TypeckTables with hir_owner {:?}\",\n+                    \"node {} with HirId::owner {:?} cannot be placed in TypeckTables with hir_owner {:?}\",\n                     tcx.hir().node_to_string(hir_id),\n                     hir_id.owner,\n                     hir_owner"}, {"sha": "76c72e4c2603d53f7d8673b4fe9e73c548351ed9", "filename": "src/librustc_middle/ty/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -55,7 +55,7 @@ impl<T: Copy> List<T> {\n             .dropless\n             .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n         unsafe {\n-            let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n+            let result = &mut *(mem as *mut List<T>);\n             // Write the length\n             result.len = slice.len();\n "}, {"sha": "9c3a97d8332f1992c4a2f58f1a83acff28dddadd", "filename": "src/librustc_middle/util/bug.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_middle%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Futil%2Fbug.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -3,34 +3,31 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n+use std::panic::Location;\n \n #[cold]\n #[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments<'_>) -> ! {\n+#[track_caller]\n+pub fn bug_fmt(args: fmt::Arguments<'_>) -> ! {\n     // this wrapper mostly exists so I don't have to write a fully\n     // qualified path of None::<Span> inside the bug!() macro definition\n-    opt_span_bug_fmt(file, line, None::<Span>, args);\n+    opt_span_bug_fmt(None::<Span>, args, Location::caller());\n }\n \n #[cold]\n #[inline(never)]\n-pub fn span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: S,\n-    args: fmt::Arguments<'_>,\n-) -> ! {\n-    opt_span_bug_fmt(file, line, Some(span), args);\n+#[track_caller]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(span: S, args: fmt::Arguments<'_>) -> ! {\n+    opt_span_bug_fmt(Some(span), args, Location::caller());\n }\n \n fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n     span: Option<S>,\n     args: fmt::Arguments<'_>,\n+    location: &Location<'_>,\n ) -> ! {\n     tls::with_opt(move |tcx| {\n-        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        let msg = format!(\"{}: {}\", location, args);\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),"}, {"sha": "7cf4fdfcf3c5b05d16539023286f104e26a137fe", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -1250,7 +1250,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 |infcx| {\n                     let mut obligations = ObligationAccumulator::default();\n \n-                    let dummy_body_id = ObligationCause::dummy().body_id;\n+                    let dummy_body_id = hir::CRATE_HIR_ID;\n                     let (output_ty, opaque_type_map) =\n                         obligations.add(infcx.instantiate_opaque_types(\n                             anon_owner_def_id,"}, {"sha": "fc17aa9c31c596ea014f95f8c9dedf18b5239300", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -586,6 +586,14 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(instance));\n                 }\n             }\n+            mir::Rvalue::ThreadLocalRef(def_id) => {\n+                assert!(self.tcx.is_thread_local_static(def_id));\n+                let instance = Instance::mono(self.tcx, def_id);\n+                if should_monomorphize_locally(self.tcx, &instance) {\n+                    trace!(\"collecting thread-local static {:?}\", def_id);\n+                    self.output.push(MonoItem::Static(def_id));\n+                }\n+            }\n             _ => { /* not interesting */ }\n         }\n "}, {"sha": "acadb5385c9cfa402b5473a2faa05eba5e2cb73f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -1222,7 +1222,11 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n                     movability == hir::Movability::Movable,\n                 )\n             }\n-            _ => bug!(),\n+            _ => {\n+                tcx.sess\n+                    .delay_span_bug(body.span, &format!(\"unexpected generator type {}\", gen_ty));\n+                return;\n+            }\n         };\n \n         // Compute GeneratorState<yield_ty, return_ty>"}, {"sha": "d7b3e7e15307a9345c1095847378ec17efa3ccda", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "b93b6fcf8002a0a950945fcb10ee480fd8de6d02", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "a16e7e31c6619efaa3a5943b9971766e42267866", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "e5147a12ed3204c9d2d203045c7be5daed11005e", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> TargetResult {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "dc056b55b38680540dae88c0c3cbcad44753b26f", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> TargetResult {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "106753ed809a5944fe365b3513fb8e7eac9419a6", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -84,7 +84,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 112);\n+static_assert_size!(PendingPredicateObligation<'_>, 72);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "61567aeb57cb0bfb4d2dda529a0ee5f4593f0f02", "filename": "src/librustc_trait_selection/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -48,7 +48,7 @@ pub fn can_type_implement_copy(\n                     continue;\n                 }\n                 let span = tcx.def_span(field.did);\n-                let cause = ObligationCause { span, ..ObligationCause::dummy() };\n+                let cause = ObligationCause::dummy_with_span(span);\n                 let ctx = traits::FulfillmentContext::new();\n                 match traits::fully_normalize(&infcx, ctx, cause, param_env, &ty) {\n                     Ok(ty) => {"}, {"sha": "90a9b876d8ddf3b9fafecd9220156be29d545e22", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -205,7 +205,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n                 if let Some(impl_item_span) =\n                     items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n                 {\n-                    cause.span = impl_item_span;\n+                    cause.make_mut().span = impl_item_span;\n                 }\n             }\n         }\n@@ -222,7 +222,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n                         items.iter().find(|i| i.ident == trait_assoc_item.ident).map(fix_span)\n                     })\n                 {\n-                    cause.span = impl_item_span;\n+                    cause.make_mut().span = impl_item_span;\n                 }\n             }\n         }\n@@ -273,7 +273,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     parent_trait_ref,\n                     parent_code: Rc::new(obligation.cause.code.clone()),\n                 };\n-                cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n+                cause.make_mut().code =\n+                    traits::ObligationCauseCode::DerivedObligation(derived_cause);\n             }\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx,"}, {"sha": "b39cfcb377595a45d7611d53a448ac70d588bb4e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -78,15 +78,16 @@ fn compare_predicate_entailment<'tcx>(\n     // `regionck_item` expects.\n     let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id.expect_local());\n \n-    let cause = ObligationCause {\n-        span: impl_m_span,\n-        body_id: impl_m_hir_id,\n-        code: ObligationCauseCode::CompareImplMethodObligation {\n+    // We sometimes modify the span further down.\n+    let mut cause = ObligationCause::new(\n+        impl_m_span,\n+        impl_m_hir_id,\n+        ObligationCauseCode::CompareImplMethodObligation {\n             item_name: impl_m.ident.name,\n             impl_item_def_id: impl_m.def_id,\n             trait_item_def_id: trait_m.def_id,\n         },\n-    };\n+    );\n \n     // This code is best explained by example. Consider a trait:\n     //\n@@ -280,7 +281,7 @@ fn compare_predicate_entailment<'tcx>(\n                 &infcx, param_env, &terr, &cause, impl_m, impl_sig, trait_m, trait_sig,\n             );\n \n-            let cause = ObligationCause { span: impl_err_span, ..cause };\n+            cause.make_mut().span = impl_err_span;\n \n             let mut diag = struct_span_err!(\n                 tcx.sess,\n@@ -965,8 +966,11 @@ crate fn compare_const_impl<'tcx>(\n         // Compute placeholder form of impl and trait const tys.\n         let impl_ty = tcx.type_of(impl_c.def_id);\n         let trait_ty = tcx.type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n-        let mut cause = ObligationCause::misc(impl_c_span, impl_c_hir_id);\n-        cause.code = ObligationCauseCode::CompareImplConstObligation;\n+        let mut cause = ObligationCause::new(\n+            impl_c_span,\n+            impl_c_hir_id,\n+            ObligationCauseCode::CompareImplConstObligation,\n+        );\n \n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty =\n@@ -992,7 +996,7 @@ crate fn compare_const_impl<'tcx>(\n \n             // Locate the Span containing just the type of the offending impl\n             match tcx.hir().expect_impl_item(impl_c_hir_id).kind {\n-                ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n+                ImplItemKind::Const(ref ty, _) => cause.make_mut().span = ty.span,\n                 _ => bug!(\"{:?} is not a impl const\", impl_c),\n             }\n \n@@ -1095,15 +1099,15 @@ fn compare_type_predicate_entailment(\n     // `ObligationCause` (and the `FnCtxt`). This is what\n     // `regionck_item` expects.\n     let impl_ty_hir_id = tcx.hir().as_local_hir_id(impl_ty.def_id.expect_local());\n-    let cause = ObligationCause {\n-        span: impl_ty_span,\n-        body_id: impl_ty_hir_id,\n-        code: ObligationCauseCode::CompareImplTypeObligation {\n+    let cause = ObligationCause::new(\n+        impl_ty_span,\n+        impl_ty_hir_id,\n+        ObligationCauseCode::CompareImplTypeObligation {\n             item_name: impl_ty.ident.name,\n             impl_item_def_id: impl_ty.def_id,\n             trait_item_def_id: trait_ty.def_id,\n         },\n-    };\n+    );\n \n     debug!(\"compare_type_predicate_entailment: trait_to_impl_substs={:?}\", trait_to_impl_substs);\n "}, {"sha": "c26acd7a47703828078b3c927d640473de3b8204", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -4218,7 +4218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n                     // We make sure that only *one* argument matches the obligation failure\n                     // and we assign the obligation's span to its expression's.\n-                    error.obligation.cause.span = args[ref_in].span;\n+                    error.obligation.cause.make_mut().span = args[ref_in].span;\n                     error.points_at_arg_span = true;\n                 }\n             }\n@@ -4261,7 +4261,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n                                         let ty = self.resolve_vars_if_possible(&ty);\n                                         if ty == predicate.skip_binder().self_ty() {\n-                                            error.obligation.cause.span = hir_ty.span;\n+                                            error.obligation.cause.make_mut().span = hir_ty.span;\n                                         }\n                                     }\n                                 }\n@@ -5689,7 +5689,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             // This makes the error point at the bound, but we want to point at the argument\n             if let Some(span) = spans.get(i) {\n-                obligation.cause.code = traits::BindingObligation(def_id, *span);\n+                obligation.cause.make_mut().code = traits::BindingObligation(def_id, *span);\n             }\n             self.register_predicate(obligation);\n         }"}, {"sha": "1681b73d0c25721a7d034d0a7aa711c56080af42", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -4338,6 +4338,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         }\n     }\n \n+    sidebar.push_str(&sidebar_assoc_items(it));\n+\n     sidebar.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementors\\\">Implementors</a>\");\n     if t.auto {\n         sidebar.push_str(\n@@ -4346,8 +4348,6 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         );\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n-\n     write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar)\n }\n "}, {"sha": "d22ac1d53858429dcc45c9fcbd9c16ce98926400", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -201,8 +201,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n                 if FIRST_PANIC.swap(false, Ordering::SeqCst) {\n                     let _ = writeln!(\n                         err,\n-                        \"note: run with `RUST_BACKTRACE=1` \\\n-                                           environment variable to display a backtrace\"\n+                        \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n                     );\n                 }\n             }\n@@ -454,10 +453,7 @@ fn rust_panic_with_hook(\n     // process real quickly as we don't want to try calling it again as it'll\n     // probably just panic again.\n     if panics > 2 {\n-        util::dumb_print(format_args!(\n-            \"thread panicked while processing \\\n-                                       panic. aborting.\\n\"\n-        ));\n+        util::dumb_print(format_args!(\"thread panicked while processing panic. aborting.\\n\"));\n         intrinsics::abort()\n     }\n \n@@ -489,10 +485,7 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        util::dumb_print(format_args!(\n-            \"thread panicked while panicking. \\\n-                                       aborting.\\n\"\n-        ));\n+        util::dumb_print(format_args!(\"thread panicked while panicking. aborting.\\n\"));\n         intrinsics::abort()\n     }\n "}, {"sha": "8a788a9265f63c224dde07486812c60b8c127284", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -147,10 +147,7 @@ impl TcpStream {\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"peer_addr failed\"))?;\n \n         let saddr = match ipaddr {\n-            Ipv4(ref addr) => SocketAddr::new(\n-                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n-                port,\n-            ),\n+            Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n                 return Err(io::Error::new(ErrorKind::Other, \"peer_addr failed\"));\n@@ -227,10 +224,7 @@ impl TcpListener {\n         let (handle, ipaddr, port) = abi::tcplistener::accept(self.0.port())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"accept failed\"))?;\n         let saddr = match ipaddr {\n-            Ipv4(ref addr) => SocketAddr::new(\n-                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n-                port,\n-            ),\n+            Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n                 return Err(io::Error::new(ErrorKind::Other, \"accept failed\"));"}, {"sha": "0ddefeca92b2e1835c80e9b01d9ecc7efc906b1c", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -1 +1 @@\n-Subproject commit 02e0d7fa5547f2b270b8b57cf4f4f8e177153c8d\n+Subproject commit 0ddefeca92b2e1835c80e9b01d9ecc7efc906b1c"}, {"sha": "fbd3413885f8f98651e05c82d5f1d43462dd5154", "filename": "src/test/ui/tls.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Ftest%2Fui%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef9eb321a0e3acf350af3866041ba75251d2884/src%2Ftest%2Fui%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftls.rs?ref=7ef9eb321a0e3acf350af3866041ba75251d2884", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// ignore-emscripten no threads support\n+// compile-flags: -O\n+\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static S: u32 = 222;\n+\n+fn main() {\n+    let local = &S as *const u32 as usize;\n+    let foreign = std::thread::spawn(|| &S as *const u32 as usize).join().unwrap();\n+    assert_ne!(local, foreign);\n+}"}]}