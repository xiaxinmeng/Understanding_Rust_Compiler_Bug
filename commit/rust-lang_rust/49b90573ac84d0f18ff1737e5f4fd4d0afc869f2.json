{"sha": "49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "node_id": "C_kwDOAAsO6NoAKDQ5YjkwNTczYWM4NGQwZjE4ZmYxNzM3ZTVmNGZkNGQwYWZjODY5ZjI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-30T23:05:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-05T04:20:16Z"}, "message": "Add some blank lines to the definition of `Res`.\n\nTo make the spacing consistent.\n\nAlso shorten an overly long comment line.", "tree": {"sha": "bb4eb00338ce7794cfe4bcaed007aa97e55d200b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4eb00338ce7794cfe4bcaed007aa97e55d200b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "html_url": "https://github.com/rust-lang/rust/commit/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebd3ab63aa08337bb4e4600358679262ce8d242", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd3ab63aa08337bb4e4600358679262ce8d242", "html_url": "https://github.com/rust-lang/rust/commit/0ebd3ab63aa08337bb4e4600358679262ce8d242"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "d5ac07f1e6315d23023a8679fca60331fa1d36c4", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "patch": "@@ -308,6 +308,7 @@ pub enum Res<Id = hir::HirId> {\n     ///\n     /// **Belongs to the type namespace.**\n     PrimTy(hir::PrimTy),\n+\n     /// The `Self` type, optionally with the [`DefId`] of the trait it belongs to and\n     /// optionally with the [`DefId`] of the item introducing the `Self` type alias.\n     ///\n@@ -355,7 +356,8 @@ pub enum Res<Id = hir::HirId> {\n     /// const fn baz<T>() -> usize { 10 }\n     /// ```\n     /// We do however allow `Self` in repeat expression even if it is generic to not break code\n-    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint:\n+    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat\n+    /// lint:\n     /// ```\n     /// fn foo<T>() {\n     ///     let _bar = [1_u8; std::mem::size_of::<*mut T>()];\n@@ -370,6 +372,7 @@ pub enum Res<Id = hir::HirId> {\n         /// from mentioning generics (i.e. when used in an anonymous constant).\n         alias_to: Option<(DefId, bool)>,\n     },\n+\n     /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`.\n     ///\n     /// **Belongs to the type namespace.**\n@@ -383,6 +386,7 @@ pub enum Res<Id = hir::HirId> {\n     ///\n     /// *See also [`Res::SelfTy`].*\n     SelfCtor(DefId),\n+\n     /// A local variable or function parameter.\n     ///\n     /// **Belongs to the value namespace.**"}]}