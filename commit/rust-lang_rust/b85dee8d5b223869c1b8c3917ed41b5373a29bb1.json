{"sha": "b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NWRlZThkNWIyMjM4NjljMWI4YzM5MTdlZDQxYjUzNzNhMjliYjE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-27T23:33:31Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:28Z"}, "message": "Resurrecting some of the logging in rust_chan.cpp", "tree": {"sha": "4e4b1248272347ed741e3a89baa8ef501f9ea844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4b1248272347ed741e3a89baa8ef501f9ea844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "html_url": "https://github.com/rust-lang/rust/commit/b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/comments", "author": null, "committer": null, "parents": [{"sha": "9ea8476faaa75fe9399d6124504d40edbc613eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea8476faaa75fe9399d6124504d40edbc613eea", "html_url": "https://github.com/rust-lang/rust/commit/9ea8476faaa75fe9399d6124504d40edbc613eea"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "c32e6b6cc5b6bbe230a2acd19b7a199d54852d9d", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "patch": "@@ -13,14 +13,14 @@ rust_chan::rust_chan(rust_kernel *kernel, maybe_proxy<rust_port> *port,\n     if (port) {\n         associate(port);\n     }\n-    // DLOG(task->sched, comm, \"new rust_chan(task=0x%\" PRIxPTR\n-    //     \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n-    //     (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n+    KLOG(kernel, comm, \"new rust_chan(task=0x%\" PRIxPTR\n+        \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n+        (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n }\n \n rust_chan::~rust_chan() {\n-    // DLOG(kernel->sched, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n-    //      (uintptr_t) this);\n+    KLOG(kernel, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n+         (uintptr_t) this);\n \n     // A(kernel->sched, is_associated() == false,\n     //   \"Channel must be disassociated before being freed.\");\n@@ -33,9 +33,9 @@ void rust_chan::associate(maybe_proxy<rust_port> *port) {\n     this->port = port;\n     if (port->is_proxy() == false) {\n         scoped_lock with(port->referent()->lock);\n-        // DLOG(kernel->sched, task,\n-        //     \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n-        //     this, port);\n+        KLOG(kernel, task,\n+            \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n+            this, port);\n         ++this->ref_count;\n         this->task = port->referent()->task;\n         this->task->ref();\n@@ -56,9 +56,9 @@ void rust_chan::disassociate() {\n \n     if (port->is_proxy() == false) {\n         scoped_lock with(port->referent()->lock);\n-        // DLOG(kernel->sched, task,\n-        //     \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n-        //     this, port->referent());\n+        KLOG(kernel, task,\n+             \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n+             this, port->referent());\n         --this->ref_count;\n         task->deref();\n         this->task = NULL;\n@@ -98,7 +98,7 @@ void rust_chan::send(void *sptr) {\n         buffer.dequeue(NULL);\n     } else {\n         if (target_port->task->blocked_on(target_port)) {\n-            // DLOG(sched, comm, \"dequeued in rendezvous_ptr\");\n+            KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n             buffer.dequeue(target_port->task->rendezvous_ptr);\n             target_port->task->rendezvous_ptr = 0;\n             target_port->task->wakeup(target_port);"}, {"sha": "a1b101ae9d40788ba1ec77d31f6333d4cb9826a3", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "patch": "@@ -1,11 +1,7 @@\n #include \"rust_internal.h\"\n \n-#define KLOG(...)                                          \\\n-  do {                                                     \\\n-      if (log_rt_kern >= log_note) {                       \\\n-          log(log_note, __VA_ARGS__);                      \\\n-      }                                                    \\\n-  } while (0)\n+#define KLOG_(...) \\\n+    KLOG(this, kern, __VA_ARGS__)\n \n rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _region(srv, true),\n@@ -32,8 +28,8 @@ rust_kernel::create_scheduler(int id) {\n     rust_handle<rust_scheduler> *handle = internal_get_sched_handle(sched);\n     message_queue->associate(handle);\n     message_queues.append(message_queue);\n-    KLOG(\"created scheduler: \" PTR \", id: %d, index: %d\",\n-         sched, id, sched->list_index);\n+    KLOG_(\"created scheduler: \" PTR \", id: %d, index: %d\",\n+          sched, id, sched->list_index);\n     _kernel_lock.signal_all();\n     _kernel_lock.unlock();\n     return sched;\n@@ -42,7 +38,7 @@ rust_kernel::create_scheduler(int id) {\n void\n rust_kernel::destroy_scheduler(rust_scheduler *sched) {\n     _kernel_lock.lock();\n-    KLOG(\"deleting scheduler: \" PTR \", name: %s, index: %d\",\n+    KLOG_(\"deleting scheduler: \" PTR \", name: %s, index: %d\",\n         sched, sched->name, sched->list_index);\n     sched->message_queue->disassociate();\n     rust_srv *srv = sched->srv;\n@@ -166,14 +162,14 @@ rust_kernel::start_kernel_loop() {\n \n void\n rust_kernel::run() {\n-    KLOG(\"started kernel loop\");\n+    KLOG_(\"started kernel loop\");\n     start_kernel_loop();\n-    KLOG(\"finished kernel loop\");\n+    KLOG_(\"finished kernel loop\");\n }\n \n void\n rust_kernel::terminate_kernel_loop() {\n-    KLOG(\"terminating kernel loop\");\n+    KLOG_(\"terminating kernel loop\");\n     _interrupt_kernel_loop = true;\n     signal_kernel_lock();\n     join();\n@@ -190,16 +186,16 @@ rust_kernel::~rust_kernel() {\n     // messages.\n     pump_message_queues();\n \n-    KLOG(\"freeing handles\");\n+    KLOG_(\"freeing handles\");\n \n     free_handles(_task_handles);\n-    KLOG(\"..task handles freed\");\n+    KLOG_(\"..task handles freed\");\n     free_handles(_port_handles);\n-    KLOG(\"..port handles freed\");\n+    KLOG_(\"..port handles freed\");\n     free_handles(_sched_handles);\n-    KLOG(\"..sched handles freed\");\n+    KLOG_(\"..sched handles freed\");\n \n-    KLOG(\"freeing queues\");\n+    KLOG_(\"freeing queues\");\n \n     rust_message_queue *queue = NULL;\n     while (message_queues.pop(&queue)) {\n@@ -228,7 +224,7 @@ rust_kernel::free_handles(hash_map<T*, rust_handle<T>* > &map) {\n     T* key;\n     rust_handle<T> *value;\n     while (map.pop(&key, &value)) {\n-        KLOG(\"...freeing \" PTR, value);\n+        KLOG_(\"...freeing \" PTR, value);\n         delete value;\n     }\n }"}, {"sha": "d14cb022bfdaa364f82b48313ec5e8ebcacd1512", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/b85dee8d5b223869c1b8c3917ed41b5373a29bb1/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "patch": "@@ -23,6 +23,15 @@ const uint32_t log_note = 1;\n         }                                                       \\\n     } while (0)\n \n+#define KLOG(k, field, ...) \\\n+    KLOG_LVL(k, field, log_note, __VA_ARGS__)\n+#define KLOG_LVL(k, field, lvl, ...)                          \\\n+    do {                                                      \\\n+        if (log_rt_##field >= lvl) {                          \\\n+            (k)->log(lvl, __VA_ARGS__);                       \\\n+        }                                                     \\\n+    } while (0)\n+\n struct rust_scheduler;\n struct rust_task;\n "}]}