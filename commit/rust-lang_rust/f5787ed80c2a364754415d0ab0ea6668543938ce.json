{"sha": "f5787ed80c2a364754415d0ab0ea6668543938ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Nzg3ZWQ4MGMyYTM2NDc1NDQxNWQwYWIwZWE2NjY4NTQzOTM4Y2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-27T22:38:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-27T22:38:34Z"}, "message": "Translate exit-task glue such that rustc's output programs exit properly.", "tree": {"sha": "ab9d806e5cc573ffe86937f5d5b04fc04a9393dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9d806e5cc573ffe86937f5d5b04fc04a9393dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5787ed80c2a364754415d0ab0ea6668543938ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5787ed80c2a364754415d0ab0ea6668543938ce", "html_url": "https://github.com/rust-lang/rust/commit/f5787ed80c2a364754415d0ab0ea6668543938ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5787ed80c2a364754415d0ab0ea6668543938ce/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f4d9089a413842c96e14e66462577bf14e76fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4d9089a413842c96e14e66462577bf14e76fb", "html_url": "https://github.com/rust-lang/rust/commit/a2f4d9089a413842c96e14e66462577bf14e76fb"}], "stats": {"total": 88, "additions": 71, "deletions": 17}, "files": [{"sha": "5e00ff32d906e7ede1317d4e17566f588b4d3089", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5787ed80c2a364754415d0ab0ea6668543938ce/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5787ed80c2a364754415d0ab0ea6668543938ce/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=f5787ed80c2a364754415d0ab0ea6668543938ce", "patch": "@@ -48,6 +48,10 @@ fn yield_glue_name() -> str {\n     ret \"rust_yield_glue\";\n }\n \n+fn exit_task_glue_name() -> str {\n+    ret \"rust_exit_task_glue\";\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "81b471c2ea883c26da065223a7fef6dc386a337c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 67, "deletions": 17, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f5787ed80c2a364754415d0ab0ea6668543938ce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5787ed80c2a364754415d0ab0ea6668543938ce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f5787ed80c2a364754415d0ab0ea6668543938ce", "patch": "@@ -25,6 +25,7 @@ import lib.llvm.True;\n \n type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef yield_glue,\n+                    ValueRef exit_task_glue,\n                     vec[ValueRef] upcall_glues);\n \n type trans_ctxt = rec(session.session sess,\n@@ -240,32 +241,48 @@ fn new_builder(BasicBlockRef llbb) -> builder {\n     ret builder(llbuild);\n }\n \n-fn trans_block(@fn_ctxt cx, &ast.block b, terminator term) {\n+fn new_block_ctxt(@fn_ctxt cx, terminator term) -> @block_ctxt {\n     let BasicBlockRef llbb =\n         llvm.LLVMAppendBasicBlock(cx.llfn, _str.buf(\"\"));\n-    auto bcx = @rec(llbb=llbb,\n-                    build=new_builder(llbb),\n-                    term=term,\n-                    fcx=cx);\n+    ret @rec(llbb=llbb,\n+             build=new_builder(llbb),\n+             term=term,\n+             fcx=cx);\n+}\n+\n+fn trans_block(@fn_ctxt cx, &ast.block b, terminator term) {\n+    auto bcx = (new_block_ctxt(cx, term));\n     for (@ast.stmt s in b) {\n         trans_stmt(bcx, *s);\n     }\n     bcx.term(cx, bcx.build);\n }\n \n-fn trans_fn(@trans_ctxt cx, &ast._fn f) {\n-    let vec[TypeRef] args = vec(T_ptr(T_int()), // outptr.\n-                                T_taskptr()     // taskptr\n+fn new_fn_ctxt(@trans_ctxt cx,\n+               str name,\n+               TypeRef T_out,\n+               vec[TypeRef] T_explicit_args) -> @fn_ctxt {\n+    let vec[TypeRef] args = vec(T_ptr(T_out), // outptr.\n+                                T_taskptr()   // taskptr\n                                 );\n-    let ValueRef llfn = decl_cdecl_fn(cx.llmod, cx.path, args, T_nil());\n+    args += T_explicit_args;\n+    let ValueRef llfn = decl_cdecl_fn(cx.llmod, name, args, T_nil());\n     cx.fns.insert(cx.path, llfn);\n     let ValueRef lloutptr = llvm.LLVMGetParam(llfn, 0u);\n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 1u);\n-    auto fcx = @rec(llfn=llfn,\n-                    lloutptr=lloutptr,\n-                    lltaskptr=lltaskptr,\n-                    tcx=cx);\n+    ret @rec(llfn=llfn,\n+             lloutptr=lloutptr,\n+             lltaskptr=lltaskptr,\n+             tcx=cx);\n+}\n+\n+fn trans_fn(@trans_ctxt cx, &ast._fn f) {\n+    let TypeRef out = T_int();\n+    let vec[TypeRef] args = vec();\n+\n+    auto fcx = new_fn_ctxt(cx, cx.path, out, args);\n     auto term = default_terminate;\n+\n     trans_block(fcx, f.body, term);\n }\n \n@@ -292,6 +309,24 @@ fn p2i(ValueRef v) -> ValueRef {\n     ret llvm.LLVMConstPtrToInt(v, T_int());\n }\n \n+fn trans_exit_task_glue(@trans_ctxt cx) {\n+    let vec[TypeRef] T_args = vec();\n+    let vec[ValueRef] V_args = vec();\n+    auto term = default_terminate;\n+\n+    auto llfn = cx.glues.exit_task_glue;\n+    let ValueRef lloutptr = C_null(T_int());\n+    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 0u);\n+    auto fcx = @rec(llfn=llfn,\n+                    lloutptr=lloutptr,\n+                    lltaskptr=lltaskptr,\n+                    tcx=cx);\n+\n+    auto bcx = new_block_ctxt(fcx, term);\n+    trans_upcall(bcx, \"upcall_exit\", V_args);\n+    bcx.term(fcx, bcx.build);\n+}\n+\n fn crate_constant(@trans_ctxt cx) -> ValueRef {\n \n     let ValueRef crate_ptr =\n@@ -306,9 +341,8 @@ fn crate_constant(@trans_ctxt cx) -> ValueRef {\n     let ValueRef yield_glue_off =\n         llvm.LLVMConstSub(p2i(cx.glues.yield_glue), crate_addr);\n \n-    // FIXME: we aren't generating the exit-task glue yet.\n-    // llvm.LLVMConstSub(p2i(cx.glues.exit_task_glue), crate_addr);\n-    let ValueRef exit_task_glue_off = C_null(T_int());\n+    let ValueRef exit_task_glue_off =\n+        llvm.LLVMConstSub(p2i(cx.glues.exit_task_glue), crate_addr);\n \n     let ValueRef crate_val =\n         C_struct(vec(C_null(T_int()),     // ptrdiff_t image_base_off\n@@ -373,6 +407,22 @@ fn trans_crate(session.session sess, ast.crate crate) {\n     auto glues = @rec(activate_glue = decl_glue(llmod,\n                                                 abi.activate_glue_name()),\n                       yield_glue = decl_glue(llmod, abi.yield_glue_name()),\n+                      /*\n+                       * Note: the signature passed to decl_cdecl_fn here\n+                       * looks unusual because it is. It corresponds neither\n+                       * to an upcall signature nor a normal rust-ABI\n+                       * signature. In fact it is a fake signature, that\n+                       * exists solely to acquire the task pointer as an\n+                       * argument to the upcall. It so happens that the\n+                       * runtime sets up the task pointer as the sole incoming\n+                       * argument to the frame that we return into when\n+                       * returning to the exit task glue. So this is the\n+                       * signature required to retrieve it.\n+                       */\n+                      exit_task_glue =\n+                      decl_cdecl_fn(llmod, abi.exit_task_glue_name(),\n+                                    vec(T_taskptr()), T_nil()),\n+\n                       upcall_glues =\n                       _vec.init_fn[ValueRef](bind decl_upcall(llmod, _),\n                                              abi.n_upcall_glues as uint));\n@@ -385,7 +435,7 @@ fn trans_crate(session.session sess, ast.crate crate) {\n                    path = \"_rust\");\n \n     trans_mod(cx, crate.module);\n-\n+    trans_exit_task_glue(cx);\n     trans_main_fn(cx, crate_constant(cx));\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));"}]}