{"sha": "964086e0d4874d7e60eb3607220e486ec4b51f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NDA4NmUwZDQ4NzRkN2U2MGViMzYwNzIyMGU0ODZlYzRiNTFmODY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-27T09:04:02Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-27T09:04:02Z"}, "message": "Merge #685\n\n685: Support attributes on let statements r=matklad a=DJMcNab\n\nFix #677.\n\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "9b51ccea5712afb89896dd42de030f4201e2a40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b51ccea5712afb89896dd42de030f4201e2a40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/964086e0d4874d7e60eb3607220e486ec4b51f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/964086e0d4874d7e60eb3607220e486ec4b51f86", "html_url": "https://github.com/rust-lang/rust/commit/964086e0d4874d7e60eb3607220e486ec4b51f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/964086e0d4874d7e60eb3607220e486ec4b51f86/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ffcf61884245ca515f08f8685dc324b9db727e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcf61884245ca515f08f8685dc324b9db727e53", "html_url": "https://github.com/rust-lang/rust/commit/ffcf61884245ca515f08f8685dc324b9db727e53"}, {"sha": "4d35cc387576be6645b12d24af09b1e9c3a5f65b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d35cc387576be6645b12d24af09b1e9c3a5f65b", "html_url": "https://github.com/rust-lang/rust/commit/4d35cc387576be6645b12d24af09b1e9c3a5f65b"}], "stats": {"total": 161, "additions": 125, "deletions": 36}, "files": [{"sha": "d27eb8b7e12664b9300a1e0c13bb3c7c5248f95e", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=964086e0d4874d7e60eb3607220e486ec4b51f86", "patch": "@@ -45,7 +45,6 @@ pub(crate) fn block(p: &mut Parser) {\n \n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n-            LET_KW => let_stmt(p),\n             // test nocontentexpr\n             // fn foo(){\n             //     ;;;some_expr();;;;{;;;};;;;Ok(())\n@@ -55,41 +54,54 @@ pub(crate) fn block(p: &mut Parser) {\n                 // test block_items\n                 // fn a() { fn b() {} }\n                 let m = p.start();\n-                match items::maybe_item(p, items::ItemFlavor::Mod) {\n-                    items::MaybeItem::Item(kind) => {\n-                        m.complete(p, kind);\n-                    }\n-                    items::MaybeItem::Modifiers => {\n-                        m.abandon(p);\n-                        p.error(\"expected an item\");\n-                    }\n-                    // test pub_expr\n-                    // fn foo() { pub 92; } //FIXME\n-                    items::MaybeItem::None => {\n-                        let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n-                        if p.at(R_CURLY) {\n+                let has_attrs = p.at(POUND);\n+                attributes::outer_attributes(p);\n+                if p.at(LET_KW) {\n+                    let_stmt(p, m);\n+                } else {\n+                    match items::maybe_item(p, items::ItemFlavor::Mod) {\n+                        items::MaybeItem::Item(kind) => {\n+                            m.complete(p, kind);\n+                        }\n+                        items::MaybeItem::Modifiers => {\n                             m.abandon(p);\n-                        } else {\n-                            // test no_semi_after_block\n-                            // fn foo() {\n-                            //     if true {}\n-                            //     loop {}\n-                            //     match () {}\n-                            //     while true {}\n-                            //     for _ in () {}\n-                            //     {}\n-                            //     {}\n-                            //     macro_rules! test {\n-                            //          () => {}\n-                            //     }\n-                            //     test!{}\n-                            // }\n-                            if is_blocklike {\n-                                p.eat(SEMI);\n+                            p.error(\"expected an item\");\n+                        }\n+                        // test pub_expr\n+                        // fn foo() { pub 92; } //FIXME\n+                        items::MaybeItem::None => {\n+                            if has_attrs {\n+                                m.abandon(p);\n+                                p.error(\n+                                    \"expected a let statement or an item after attributes in block\",\n+                                );\n                             } else {\n-                                p.expect(SEMI);\n+                                let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n+                                if p.at(R_CURLY) {\n+                                    m.abandon(p);\n+                                } else {\n+                                    // test no_semi_after_block\n+                                    // fn foo() {\n+                                    //     if true {}\n+                                    //     loop {}\n+                                    //     match () {}\n+                                    //     while true {}\n+                                    //     for _ in () {}\n+                                    //     {}\n+                                    //     {}\n+                                    //     macro_rules! test {\n+                                    //          () => {}\n+                                    //     }\n+                                    //     test!{}\n+                                    // }\n+                                    if is_blocklike {\n+                                        p.eat(SEMI);\n+                                    } else {\n+                                        p.expect(SEMI);\n+                                    }\n+                                    m.complete(p, EXPR_STMT);\n+                                }\n                             }\n-                            m.complete(p, EXPR_STMT);\n                         }\n                     }\n                 }\n@@ -106,9 +118,8 @@ pub(crate) fn block(p: &mut Parser) {\n     //     let c = 92;\n     //     let d: i32 = 92;\n     // }\n-    fn let_stmt(p: &mut Parser) {\n+    fn let_stmt(p: &mut Parser, m: Marker) {\n         assert!(p.at(LET_KW));\n-        let m = p.start();\n         p.bump();\n         patterns::pattern(p);\n         if p.at(COLON) {"}, {"sha": "18039cd3f8daa3b22ac0efd53a38ba0eef9ee152", "filename": "crates/ra_syntax/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs?ref=964086e0d4874d7e60eb3607220e486ec4b51f86", "patch": "@@ -36,6 +36,7 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n \n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemFlavor) {\n     let m = p.start();\n+    attributes::outer_attributes(p);\n     match maybe_item(p, flavor) {\n         MaybeItem::Item(kind) => {\n             m.complete(p, kind);\n@@ -79,7 +80,6 @@ pub(super) enum MaybeItem {\n }\n \n pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n-    attributes::outer_attributes(p);\n     opt_visibility(p);\n     if let Some(kind) = items_without_modifiers(p) {\n         return MaybeItem::Item(kind);"}, {"sha": "325a97aebdcb517839b91ca6af381f96275d5fbe", "filename": "crates/ra_syntax/tests/data/parser/ok/0044_let_attrs.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs?ref=964086e0d4874d7e60eb3607220e486ec4b51f86", "patch": "@@ -0,0 +1,5 @@\n+// https://github.com/rust-analyzer/rust-analyzer/issues/677\n+fn main() {\n+    #[cfg(feature = \"backtrace\")]\n+    let exit_code = panic::catch_unwind(move || main());\n+}"}, {"sha": "1f52f699b3fd84a0639c6026f5c121daf3e026a4", "filename": "crates/ra_syntax/tests/data/parser/ok/0044_let_attrs.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/964086e0d4874d7e60eb3607220e486ec4b51f86/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt?ref=964086e0d4874d7e60eb3607220e486ec4b51f86", "patch": "@@ -0,0 +1,73 @@\n+SOURCE_FILE@[0; 166)\n+  FN_DEF@[0; 165)\n+    COMMENT@[0; 60)\n+    WHITESPACE@[60; 61)\n+    FN_KW@[61; 63)\n+    WHITESPACE@[63; 64)\n+    NAME@[64; 68)\n+      IDENT@[64; 68) \"main\"\n+    PARAM_LIST@[68; 70)\n+      L_PAREN@[68; 69)\n+      R_PAREN@[69; 70)\n+    WHITESPACE@[70; 71)\n+    BLOCK@[71; 165)\n+      L_CURLY@[71; 72)\n+      WHITESPACE@[72; 77)\n+      LET_STMT@[77; 163)\n+        ATTR@[77; 106)\n+          POUND@[77; 78)\n+          TOKEN_TREE@[78; 106)\n+            L_BRACK@[78; 79)\n+            IDENT@[79; 82) \"cfg\"\n+            TOKEN_TREE@[82; 105)\n+              L_PAREN@[82; 83)\n+              IDENT@[83; 90) \"feature\"\n+              WHITESPACE@[90; 91)\n+              EQ@[91; 92)\n+              WHITESPACE@[92; 93)\n+              STRING@[93; 104)\n+              R_PAREN@[104; 105)\n+            R_BRACK@[105; 106)\n+        WHITESPACE@[106; 111)\n+        LET_KW@[111; 114)\n+        WHITESPACE@[114; 115)\n+        BIND_PAT@[115; 124)\n+          NAME@[115; 124)\n+            IDENT@[115; 124) \"exit_code\"\n+        WHITESPACE@[124; 125)\n+        EQ@[125; 126)\n+        WHITESPACE@[126; 127)\n+        CALL_EXPR@[127; 162)\n+          PATH_EXPR@[127; 146)\n+            PATH@[127; 146)\n+              PATH@[127; 132)\n+                PATH_SEGMENT@[127; 132)\n+                  NAME_REF@[127; 132)\n+                    IDENT@[127; 132) \"panic\"\n+              COLONCOLON@[132; 134)\n+              PATH_SEGMENT@[134; 146)\n+                NAME_REF@[134; 146)\n+                  IDENT@[134; 146) \"catch_unwind\"\n+          ARG_LIST@[146; 162)\n+            L_PAREN@[146; 147)\n+            LAMBDA_EXPR@[147; 161)\n+              MOVE_KW@[147; 151)\n+              WHITESPACE@[151; 152)\n+              PARAM_LIST@[152; 154)\n+                PIPE@[152; 153)\n+                PIPE@[153; 154)\n+              WHITESPACE@[154; 155)\n+              CALL_EXPR@[155; 161)\n+                PATH_EXPR@[155; 159)\n+                  PATH@[155; 159)\n+                    PATH_SEGMENT@[155; 159)\n+                      NAME_REF@[155; 159)\n+                        IDENT@[155; 159) \"main\"\n+                ARG_LIST@[159; 161)\n+                  L_PAREN@[159; 160)\n+                  R_PAREN@[160; 161)\n+            R_PAREN@[161; 162)\n+        SEMI@[162; 163)\n+      WHITESPACE@[163; 164)\n+      R_CURLY@[164; 165)\n+  WHITESPACE@[165; 166)"}]}