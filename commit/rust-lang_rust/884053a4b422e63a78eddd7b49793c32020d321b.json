{"sha": "884053a4b422e63a78eddd7b49793c32020d321b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NDA1M2E0YjQyMmU2M2E3OGVkZGQ3YjQ5NzkzYzMyMDIwZDMyMWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T09:48:34Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T16:12:32Z"}, "message": "Remove `ty::Binder::bind()`\n\nCo-authored-by: Noah Lev <camelidcamel@gmail.com>", "tree": {"sha": "52c2daf897a0c45ff34d94b5750ab3be66882dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c2daf897a0c45ff34d94b5750ab3be66882dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/884053a4b422e63a78eddd7b49793c32020d321b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDfOvAACgkQ2rpbBylh\nwYqKRg//Y+Kh9izOrqMc/pwzX36Wlxpl8qZY+4LJEgxFsmYw65Wu7FjZnok6XQlI\nrKNjz28Pjp11OKOgnSqouq5oCElUip0xLEMt4XYUADDY4uauXt28Y1voXclnh1uk\npodQQP58D0DHT1d6hj50AQuF2hNlMZFEurJuNwKL9BEl+vbcjVmrFwEw7bXWnmZC\nZhDpQeotSVYQ7+TRcmuX5TQ9ESoUHjFckadIkZZrYczok3eJtMI7B7aO9rE/c5yp\nvvHoXxfM8DSgNnXlvTDiWmJVIiHJxGx5QjHtpGuohpN52NM2OFs3av42n6uOYMnJ\nEggcWIn74WzKt0Zj4vesNgxaWB9aTBqrmPAHFoz3RWJHqjMaIIpbWLekCnLnZqyl\n34SaMRDh9buJ0rwIFLHCsiAh5YVEF3VXCq1EPPvRu9NRq1Eq3SeUj2EjeSYtcCuy\nHQLNsl5kydAR28SZ0lfjE6ZQjLz0PnQE6UWOS3taivHLfCu0FVl/OZZFZUtKd+mj\ncFovSsBB2dT3gJ4E7HKONUO8I5K72lE/V/K+gYAIK7d6q4RloWsO0DQmH8ZsYun0\niuIS7b+/xww7gZ6MVc9YkEvU6OsdO/yqQ6IT/HOZE1pNrHcA2zUg3BlQmTnF1gqq\nQkrqWhIMIhEXoIt3Ol/JTdkBTiz8H6aVX17gRHG/bPVY9HuGFYo=\n=5Odd\n-----END PGP SIGNATURE-----", "payload": "tree 52c2daf897a0c45ff34d94b5750ab3be66882dcb\nparent e28a93365abfa6b506f2017eac2f0971fc839306\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1625219314 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1625242352 +0900\n\nRemove `ty::Binder::bind()`\n\nCo-authored-by: Noah Lev <camelidcamel@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/884053a4b422e63a78eddd7b49793c32020d321b", "html_url": "https://github.com/rust-lang/rust/commit/884053a4b422e63a78eddd7b49793c32020d321b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/884053a4b422e63a78eddd7b49793c32020d321b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28a93365abfa6b506f2017eac2f0971fc839306", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28a93365abfa6b506f2017eac2f0971fc839306", "html_url": "https://github.com/rust-lang/rust/commit/e28a93365abfa6b506f2017eac2f0971fc839306"}], "stats": {"total": 148, "additions": 26, "deletions": 122}, "files": [{"sha": "a40210d5a3622c29f7033abfbae18cc676038252", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -754,88 +754,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub struct BoundVarsCollector<'tcx> {\n-    binder_index: ty::DebruijnIndex,\n-    vars: BTreeMap<u32, ty::BoundVariableKind>,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> BoundVarsCollector<'tcx> {\n-    pub fn new() -> Self {\n-        BoundVarsCollector {\n-            binder_index: ty::INNERMOST,\n-            vars: BTreeMap::new(),\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-\n-    pub fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or_else(|| 0);\n-        for i in 0..max {\n-            if let None = self.vars.get(&i) {\n-                panic!(\"Unknown variable: {:?}\", i);\n-            }\n-        }\n-\n-        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::CONTINUE;\n-        }\n-        use std::collections::btree_map::Entry;\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                match self.vars.entry(bound_ty.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Ty(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n-            ty::ReLateBound(index, _br) if *index == self.binder_index => {\n-                // If you hit this, you should be using `Binder::bind_with_vars` or `Binder::rebind`\n-                bug!(\"Trying to collect bound vars with a bound region: {:?} {:?}\", index, _br)\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n pub struct ValidateBoundVars<'tcx> {\n     bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     binder_index: ty::DebruijnIndex,"}, {"sha": "73f0811a5042999e7ba7e7c4e76ac543613cee29", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -5,7 +5,6 @@\n use self::TyKind::*;\n \n use crate::infer::canonical::Canonical;\n-use crate::ty::fold::BoundVarsCollector;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n@@ -970,13 +969,6 @@ where\n         Binder(value, ty::List::empty())\n     }\n \n-    /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n-    pub fn bind(value: T, tcx: TyCtxt<'tcx>) -> Binder<'tcx, T> {\n-        let mut collector = BoundVarsCollector::new();\n-        value.visit_with(&mut collector);\n-        Binder(value, collector.into_vars(tcx))\n-    }\n-\n     pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {\n         if cfg!(debug_assertions) {\n             let mut validator = ValidateBoundVars::new(vars);"}, {"sha": "6216ff6656e28f0a193125e4456c59bb5e7575cd", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -822,12 +822,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     let obligation = Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        Binder::bind(\n-                            TraitPredicate {\n-                                trait_ref: TraitRef::from_method(tcx, trait_id, substs),\n-                            },\n-                            tcx,\n-                        ),\n+                        Binder::dummy(TraitPredicate { trait_ref }),\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "352829234a41a2c25037fd4711bb34359ffe8b9c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -1301,7 +1301,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         ty: self_ty.ptr_metadata_ty(tcx),\n     };\n \n-    confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate, tcx), false)\n+    confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'tcx>("}, {"sha": "2e42d65cce29bef8d80f1c8663f8fd4cedda107a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -1694,7 +1694,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 };\n \n                 self.one_bound_for_assoc_type(\n-                    || traits::supertraits(tcx, ty::Binder::bind(trait_ref, tcx)),\n+                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref)),\n                     || \"Self\".to_string(),\n                     assoc_ident,\n                     span,"}, {"sha": "12d0c14a3d51ab0aabf043da72d51eac6098d8ef", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -222,12 +222,7 @@ fn compare_predicate_entailment<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-        let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n-            impl_m_span,\n-            infer::HigherRankedType,\n-            ty::Binder::bind(impl_m_own_bounds.predicates, tcx),\n-        );\n-        for predicate in impl_m_own_bounds {\n+        for predicate in impl_m_own_bounds.predicates {\n             let traits::Normalized { value: predicate, obligations } =\n                 traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n \n@@ -258,14 +253,14 @@ fn compare_predicate_entailment<'tcx>(\n         );\n         let impl_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, impl_sig);\n-        let impl_fty = tcx.mk_fn_ptr(ty::Binder::bind(impl_sig, tcx));\n+        let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n         let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n-        let trait_fty = tcx.mk_fn_ptr(ty::Binder::bind(trait_sig, tcx));\n+        let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n \n         debug!(\"compare_impl_method: trait_fty={:?}\", trait_fty);\n "}, {"sha": "75299bae5ddfd01b64f5c521f944ce383831d5f3", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         let (method_sig, method_predicates) =\n             self.normalize_associated_types_in(self.span, (method_sig, method_predicates));\n+        let method_sig = ty::Binder::dummy(method_sig);\n \n         // Make sure nobody calls `drop()` explicitly.\n         self.enforce_illegal_method_limitations(&pick);\n@@ -119,12 +120,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n         if illegal_sized_bound.is_none() {\n-            let method_ty = self.tcx.mk_fn_ptr(ty::Binder::bind(method_sig, self.tcx));\n-            self.add_obligations(method_ty, all_substs, method_predicates);\n+            self.add_obligations(self.tcx.mk_fn_ptr(method_sig), all_substs, method_predicates);\n         }\n \n         // Create the final `MethodCallee`.\n-        let callee = MethodCallee { def_id: pick.item.def_id, substs: all_substs, sig: method_sig };\n+        let callee = MethodCallee {\n+            def_id: pick.item.def_id,\n+            substs: all_substs,\n+            sig: method_sig.skip_binder(),\n+        };\n         ConfirmResult { callee, illegal_sized_bound }\n     }\n "}, {"sha": "2136d925423b912df2543b47aab578bd8de45022", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.extend(traits::predicates_for_generics(cause.clone(), self.param_env, bounds));\n \n         // Also add an obligation for the method type being well-formed.\n-        let method_ty = tcx.mk_fn_ptr(ty::Binder::bind(fn_sig, tcx));\n+        let method_ty = tcx.mk_fn_ptr(ty::Binder::dummy(fn_sig));\n         debug!(\n             \"lookup_in_trait_adjusted: matched method method_ty={:?} obligation={:?}\",\n             method_ty, obligation"}, {"sha": "dae112621895dd6b3d5d3177dceb8ab3b48a1f05", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -1087,14 +1087,10 @@ fn check_method_receiver<'fcx, 'tcx>(\n     debug!(\"check_method_receiver: sig={:?}\", sig);\n \n     let self_ty = fcx.normalize_associated_types_in(span, self_ty);\n-    let self_ty =\n-        fcx.tcx.liberate_late_bound_regions(method.def_id, ty::Binder::bind(self_ty, fcx.tcx));\n+    let self_ty = fcx.tcx.liberate_late_bound_regions(method.def_id, ty::Binder::dummy(self_ty));\n \n     let receiver_ty = sig.inputs()[0];\n-\n     let receiver_ty = fcx.normalize_associated_types_in(span, receiver_ty);\n-    let receiver_ty =\n-        fcx.tcx.liberate_late_bound_regions(method.def_id, ty::Binder::bind(receiver_ty, fcx.tcx));\n \n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {"}, {"sha": "b0e5453b7db924079e1c2f4dcb77d307faf42505", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884053a4b422e63a78eddd7b49793c32020d321b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=884053a4b422e63a78eddd7b49793c32020d321b", "patch": "@@ -1737,11 +1737,12 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                         ty::ReErased => tcx.lifetimes.re_static,\n                         _ => r,\n                     });\n+                    let fn_sig = ty::Binder::dummy(fn_sig);\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n                     let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n-                    let ret_ty = fn_sig.output();\n+                    let ret_ty = fn_sig.skip_binder().output();\n                     if ret_ty != tcx.ty_error() {\n                         if !ret_ty.is_closure() {\n                             let ret_ty_str = match ret_ty.kind() {\n@@ -1767,7 +1768,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     }\n                     diag.emit();\n \n-                    ty::Binder::bind(fn_sig, tcx)\n+                    fn_sig\n                 }\n                 None => <dyn AstConv<'_>>::ty_of_fn(\n                     &icx,\n@@ -1811,10 +1812,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id());\n             let inputs =\n                 data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n-            ty::Binder::bind(\n-                tcx.mk_fn_sig(inputs, ty, false, hir::Unsafety::Normal, abi::Abi::Rust),\n-                tcx,\n-            )\n+            ty::Binder::dummy(tcx.mk_fn_sig(\n+                inputs,\n+                ty,\n+                false,\n+                hir::Unsafety::Normal,\n+                abi::Abi::Rust,\n+            ))\n         }\n \n         Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n@@ -2098,7 +2102,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 param.bounds.iter().for_each(|bound| match bound {\n                     hir::GenericBound::Outlives(lt) => {\n                         let bound = <dyn AstConv<'_>>::ast_region_to_region(&icx, &lt, None);\n-                        let outlives = ty::Binder::bind(ty::OutlivesPredicate(region, bound), tcx);\n+                        let outlives = ty::Binder::dummy(ty::OutlivesPredicate(region, bound));\n                         predicates.insert((outlives.to_predicate(tcx), lt.span));\n                     }\n                     _ => bug!(),"}]}