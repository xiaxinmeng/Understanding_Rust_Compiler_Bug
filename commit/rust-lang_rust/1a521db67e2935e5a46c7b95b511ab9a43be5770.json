{"sha": "1a521db67e2935e5a46c7b95b511ab9a43be5770", "node_id": "C_kwDOAAsO6NoAKDFhNTIxZGI2N2UyOTM1ZTVhNDZjN2I5NWI1MTFhYjlhNDNiZTU3NzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T15:58:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T15:58:38Z"}, "message": "Auto merge of #108863 - JohnTitor:rollup-haydnsw, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108619 (Remove the option to disable `llvm-version-check`)\n - #108728 (infer: fix and improve comments)\n - #108731 (feat: impl better help for `.poll()` not found on `impl Future`)\n - #108774 (Greatly improve the error messages when `run-make/translation` fails)\n - #108805 (Update askama to 0.12 and improve whitespace control)\n - #108823 (Add tracking issue for cf-protection to unstable book)\n - #108855 (Custom MIR: Support `as` casts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "25bf0cc334ee589103d07f993231ac5ba1d947b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bf0cc334ee589103d07f993231ac5ba1d947b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a521db67e2935e5a46c7b95b511ab9a43be5770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a521db67e2935e5a46c7b95b511ab9a43be5770", "html_url": "https://github.com/rust-lang/rust/commit/1a521db67e2935e5a46c7b95b511ab9a43be5770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a521db67e2935e5a46c7b95b511ab9a43be5770/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160c2ebeca7b4e616962134f230de754fa5433b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/160c2ebeca7b4e616962134f230de754fa5433b1", "html_url": "https://github.com/rust-lang/rust/commit/160c2ebeca7b4e616962134f230de754fa5433b1"}, {"sha": "fddd861a7d00a183548633bfd65d885205ca5cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/fddd861a7d00a183548633bfd65d885205ca5cad", "html_url": "https://github.com/rust-lang/rust/commit/fddd861a7d00a183548633bfd65d885205ca5cad"}], "stats": {"total": 648, "additions": 386, "deletions": 262}, "files": [{"sha": "82530c019a91c217f286ebe5d21bf137ba3df61c", "filename": "Cargo.lock", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -132,47 +132,36 @@ checksum = \"5a2f58b0bb10c380af2b26e57212856b8c9a59e0925b4c20f4a174a49734eaf7\"\n \n [[package]]\n name = \"askama\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4d8f355701c672c2ba3d718acbd213f740beea577cc4eae66accdffe15be1882\"\n+checksum = \"47cbc3cf73fa8d9833727bbee4835ba5c421a0d65b72daf9a7b5d0e0f9cfb57e\"\n dependencies = [\n  \"askama_derive\",\n  \"askama_escape\",\n- \"askama_shared\",\n ]\n \n [[package]]\n name = \"askama_derive\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84704cab5b7ae0fd3a9f78ee5eb7b27f3749df445f04623db6633459ae283267\"\n-dependencies = [\n- \"askama_shared\",\n- \"proc-macro2\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"askama_escape\"\n-version = \"0.10.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9a1bb320f97e6edf9f756bf015900038e43c7700e059688e5724a928c8f3b8d5\"\n-\n-[[package]]\n-name = \"askama_shared\"\n version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dae03eebba55a2697a376e58b573a29fe36893157173ac8df312ad85f3c0e012\"\n+checksum = \"e80b5ad1afe82872b7aa3e9de9b206ecb85584aa324f0f60fa4c903ce935936b\"\n dependencies = [\n- \"askama_escape\",\n+ \"basic-toml\",\n+ \"mime\",\n+ \"mime_guess\",\n  \"nom\",\n  \"proc-macro2\",\n  \"quote\",\n  \"serde\",\n  \"syn\",\n- \"toml 0.5.7\",\n ]\n \n+[[package]]\n+name = \"askama_escape\"\n+version = \"0.10.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"619743e34b5ba4e9703bba34deac3427c72507c7159f5fd030aea8cac0cfe341\"\n+\n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n@@ -223,6 +212,15 @@ version = \"1.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b645a089122eccb6111b4f81cbc1a49f5900ac4666bb93ac027feaecf15607bf\"\n \n+[[package]]\n+name = \"basic-toml\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c0de75129aa8d0cceaf750b89013f0e08804d6ec61416da787b35ad0d7cddf1\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n@@ -2614,6 +2612,22 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"mime\"\n+version = \"0.3.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n+\n+[[package]]\n+name = \"mime_guess\"\n+version = \"2.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef\"\n+dependencies = [\n+ \"mime\",\n+ \"unicase\",\n+]\n+\n [[package]]\n name = \"minifier\"\n version = \"0.2.2\""}, {"sha": "e6d6586d5eefd6eb16503557075c3e3417342206", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -348,6 +348,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.downgrade_to_delayed_bug();\n         }\n \n+        if tcx.ty_is_opaque_future(rcvr_ty) && item_name.name == sym::poll {\n+            err.help(&format!(\n+                \"method `poll` found on `Pin<&mut {ty_str}>`, \\\n+                see documentation for `std::pin::Pin`\"\n+            ));\n+            err.help(\"self type must be pinned to call `Future::poll`, \\\n+                see https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#pinning-in-practice\"\n+            );\n+        }\n+\n         if let Mode::MethodCall = mode && let SelfSource::MethodCall(cal) = source {\n             self.suggest_await_before_method(\n                 &mut err, item_name, rcvr_ty, cal, span, expected.only_has_type(self),"}, {"sha": "fb067e7ac2135f24e4f3b76094f5b73ef239a1ac", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -114,24 +114,26 @@ pub struct InferCtxtInner<'tcx> {\n     float_unification_storage: ut::UnificationTableStorage<ty::FloatVid>,\n \n     /// Tracks the set of region variables and the constraints between them.\n+    ///\n     /// This is initially `Some(_)` but when\n     /// `resolve_regions_and_report_errors` is invoked, this gets set to `None`\n     /// -- further attempts to perform unification, etc., may fail if new\n     /// region constraints would've been added.\n     region_constraint_storage: Option<RegionConstraintStorage<'tcx>>,\n \n-    /// A set of constraints that regionck must validate. Each\n-    /// constraint has the form `T:'a`, meaning \"some type `T` must\n+    /// A set of constraints that regionck must validate.\n+    ///\n+    /// Each constraint has the form `T:'a`, meaning \"some type `T` must\n     /// outlive the lifetime 'a\". These constraints derive from\n     /// instantiated type parameters. So if you had a struct defined\n-    /// like\n+    /// like the following:\n     /// ```ignore (illustrative)\n-    ///     struct Foo<T:'static> { ... }\n+    /// struct Foo<T: 'static> { ... }\n     /// ```\n-    /// then in some expression `let x = Foo { ... }` it will\n+    /// In some expression `let x = Foo { ... }`, it will\n     /// instantiate the type parameter `T` with a fresh type `$0`. At\n     /// the same time, it will record a region obligation of\n-    /// `$0:'static`. This will get checked later by regionck. (We\n+    /// `$0: 'static`. This will get checked later by regionck. (We\n     /// can't generally check these things right away because we have\n     /// to wait until types are resolved.)\n     ///\n@@ -268,7 +270,7 @@ pub struct InferCtxt<'tcx> {\n     /// Caches the results of trait evaluation.\n     pub evaluation_cache: select::EvaluationCache<'tcx>,\n \n-    /// the set of predicates on which errors have been reported, to\n+    /// The set of predicates on which errors have been reported, to\n     /// avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FxIndexMap<Span, Vec<ty::Predicate<'tcx>>>>,\n \n@@ -291,7 +293,7 @@ pub struct InferCtxt<'tcx> {\n     tainted_by_errors: Cell<Option<ErrorGuaranteed>>,\n \n     /// Track how many errors were reported when this infcx is created.\n-    /// If the number of errors increases, that's also a sign (line\n+    /// If the number of errors increases, that's also a sign (like\n     /// `tainted_by_errors`) to avoid reporting certain kinds of errors.\n     // FIXME(matthewjasper) Merge into `tainted_by_errors`\n     err_count_on_creation: usize,\n@@ -313,7 +315,7 @@ pub struct InferCtxt<'tcx> {\n     /// During coherence we have to assume that other crates may add\n     /// additional impls which we currently don't know about.\n     ///\n-    /// To deal with this evaluation should be conservative\n+    /// To deal with this evaluation, we should be conservative\n     /// and consider the possibility of impls from outside this crate.\n     /// This comes up primarily when resolving ambiguity. Imagine\n     /// there is some trait reference `$0: Bar` where `$0` is an\n@@ -323,7 +325,7 @@ pub struct InferCtxt<'tcx> {\n     /// bound to some type that in a downstream crate that implements\n     /// `Bar`.\n     ///\n-    /// Outside of coherence we set this to false because we are only\n+    /// Outside of coherence, we set this to false because we are only\n     /// interested in types that the user could actually have written.\n     /// In other words, we consider `$0: Bar` to be unimplemented if\n     /// there is no type that the user could *actually name* that\n@@ -373,7 +375,7 @@ pub enum SubregionOrigin<'tcx> {\n     Subtype(Box<TypeTrace<'tcx>>),\n \n     /// When casting `&'a T` to an `&'b Trait` object,\n-    /// relating `'a` to `'b`\n+    /// relating `'a` to `'b`.\n     RelateObjectBound(Span),\n \n     /// Some type parameter was instantiated with the given type,\n@@ -384,7 +386,7 @@ pub enum SubregionOrigin<'tcx> {\n     /// that must outlive some other region.\n     RelateRegionParamBound(Span),\n \n-    /// Creating a pointer `b` to contents of another reference\n+    /// Creating a pointer `b` to contents of another reference.\n     Reborrow(Span),\n \n     /// (&'a &'b T) where a >= b\n@@ -398,7 +400,7 @@ pub enum SubregionOrigin<'tcx> {\n         trait_item_def_id: DefId,\n     },\n \n-    /// Checking that the bounds of a trait's associated type hold for a given impl\n+    /// Checking that the bounds of a trait's associated type hold for a given impl.\n     CheckAssociatedTypeBounds {\n         parent: Box<SubregionOrigin<'tcx>>,\n         impl_item_def_id: LocalDefId,\n@@ -435,32 +437,33 @@ pub enum LateBoundRegionConversionTime {\n     AssocTypeProjection(DefId),\n }\n \n-/// Reasons to create a region inference variable\n+/// Reasons to create a region inference variable.\n ///\n-/// See `error_reporting` module for more details\n+/// See `error_reporting` module for more details.\n #[derive(Copy, Clone, Debug)]\n pub enum RegionVariableOrigin {\n-    /// Region variables created for ill-categorized reasons,\n-    /// mostly indicates places in need of refactoring\n+    /// Region variables created for ill-categorized reasons.\n+    ///\n+    /// They mostly indicate places in need of refactoring.\n     MiscVariable(Span),\n \n-    /// Regions created by a `&P` or `[...]` pattern\n+    /// Regions created by a `&P` or `[...]` pattern.\n     PatternRegion(Span),\n \n-    /// Regions created by `&` operator\n+    /// Regions created by `&` operator.\n+    ///\n     AddrOfRegion(Span),\n-\n-    /// Regions created as part of an autoref of a method receiver\n+    /// Regions created as part of an autoref of a method receiver.\n     Autoref(Span),\n \n-    /// Regions created as part of an automatic coercion\n+    /// Regions created as part of an automatic coercion.\n     Coercion(Span),\n \n-    /// Region variables created as the values for early-bound regions\n+    /// Region variables created as the values for early-bound regions.\n     EarlyBoundRegion(Span, Symbol),\n \n     /// Region variables created for bound regions\n-    /// in a function or method that is called\n+    /// in a function or method that is called.\n     LateBoundRegion(Span, ty::BoundRegionKind, LateBoundRegionConversionTime),\n \n     UpvarRegion(ty::UpvarId, Span),\n@@ -534,7 +537,7 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n     }\n }\n \n-/// Used to configure inference contexts before their creation\n+/// Used to configure inference contexts before their creation.\n pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     defining_use_anchor: DefiningAnchor,\n@@ -835,9 +838,9 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Scan the constraints produced since `snapshot` began and returns:\n     ///\n-    /// - `None` -- if none of them involve \"region outlives\" constraints\n-    /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder\n-    /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders\n+    /// - `None` -- if none of them involves \"region outlives\" constraints.\n+    /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder.\n+    /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders.\n     pub fn region_constraints_added_in_snapshot(\n         &self,\n         snapshot: &CombinedSnapshot<'tcx>,\n@@ -1770,7 +1773,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     }\n }\n \n-/// Helper for `ty_or_const_infer_var_changed` (see comment on that), currently\n+/// Helper for [InferCtxt::ty_or_const_infer_var_changed] (see comment on that), currently\n /// used only for `traits::fulfill`'s list of `stalled_on` inference variables.\n #[derive(Copy, Clone, Debug)]\n pub enum TyOrConstInferVar<'tcx> {"}, {"sha": "09d2eb96d0f16e4644c19a3ea16c702fe0dd177b", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::tcx::PlaceTy;\n+use rustc_middle::ty::cast::mir_cast_kind;\n use rustc_middle::{mir::*, thir::*, ty};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -142,7 +143,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     }\n \n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n-        parse_by_kind!(self, expr_id, _, \"rvalue\",\n+        parse_by_kind!(self, expr_id, expr, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),\n             @call(\"mir_checked\", args) => {\n                 parse_by_kind!(self, args[0], _, \"binary op\",\n@@ -167,6 +168,12 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             ExprKind::Repeat { value, count } => Ok(\n                 Rvalue::Repeat(self.parse_operand(*value)?, *count)\n             ),\n+            ExprKind::Cast { source } => {\n+                let source = self.parse_operand(*source)?;\n+                let source_ty = source.ty(self.body.local_decls(), self.tcx);\n+                let cast_kind = mir_cast_kind(source_ty, expr.ty);\n+                Ok(Rvalue::Cast(cast_kind, source, expr.ty))\n+            },\n             _ => self.parse_operand(expr_id).map(Rvalue::Use),\n         )\n     }"}, {"sha": "a12c4e0700c8807f261fc602524f1c583415ffdf", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -75,11 +75,6 @@ changelog-seen = 2\n # or alternatively ...\n #ccache = \"/path/to/ccache\"\n \n-# If an external LLVM root is specified, we automatically check the version by\n-# default to make sure it's within the range that we're expecting, but setting\n-# this flag will indicate that this version check should not be done.\n-#version-check = true\n-\n # When true, link libstdc++ statically into the rustc_llvm.\n # This is useful if you don't want to use the dynamic version of that\n # library provided by LLVM."}, {"sha": "648eb553c78c181d84e606f278ace06f55347ccb", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -16,6 +16,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - `remote-test-server`'s `verbose` argument has been removed in favor of the `--verbose` flag\n - `remote-test-server`'s `remote` argument has been removed in favor of the `--bind` flag. Use `--bind 0.0.0.0:12345` to replicate the behavior of the `remote` argument.\n - `x.py fmt` now formats only files modified between the merge-base of HEAD and the last commit in the master branch of the rust-lang repository and the current working directory. To restore old behaviour, use `x.py fmt .`. The check mode is not affected by this change. [#105702](https://github.com/rust-lang/rust/pull/105702)\n+- The `llvm.version-check` config option has been removed. Older versions were never supported. If you still need to support older versions (e.g. you are applying custom patches), patch `check_llvm_version` in bootstrap to change the minimum version. [#108619](https://github.com/rust-lang/rust/pull/108619)\n \n ### Non-breaking changes\n "}, {"sha": "6e64bc20d20795fa095c6338455ba574e1abe143", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -118,7 +118,6 @@ pub struct Config {\n     pub llvm_optimize: bool,\n     pub llvm_thin_lto: bool,\n     pub llvm_release_debuginfo: bool,\n-    pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n     /// `None` if `llvm_from_ci` is true and we haven't yet downloaded llvm.\n     #[cfg(not(test))]\n@@ -672,7 +671,6 @@ define_config! {\n         tests: Option<bool> = \"tests\",\n         plugins: Option<bool> = \"plugins\",\n         ccache: Option<StringOrBool> = \"ccache\",\n-        version_check: Option<bool> = \"version-check\",\n         static_libstdcpp: Option<bool> = \"static-libstdcpp\",\n         ninja: Option<bool> = \"ninja\",\n         targets: Option<String> = \"targets\",\n@@ -804,7 +802,6 @@ impl Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n         config.ninja_in_file = true;\n-        config.llvm_version_check = true;\n         config.llvm_static_stdcpp = false;\n         config.backtrace = true;\n         config.rust_optimize = true;\n@@ -1166,7 +1163,6 @@ impl Config {\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_thin_lto, llvm.thin_lto);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);\n-            set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n             if let Some(v) = llvm.link_shared {\n                 config.llvm_link_shared.set(Some(v));"}, {"sha": "5278f0c10b3d20a1ba8f104ed4be73948b748fb5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -44,7 +44,6 @@ def v(*args):\n o(\"llvm-static-stdcpp\", \"llvm.static-libstdcpp\", \"statically link to libstdc++ for LLVM\")\n o(\"llvm-link-shared\", \"llvm.link-shared\", \"prefer shared linking to LLVM (llvm-config --link-shared)\")\n o(\"rpath\", \"rust.rpath\", \"build rpaths into rustc itself\")\n-o(\"llvm-version-check\", \"llvm.version-check\", \"check if the LLVM version is supported, build anyway\")\n o(\"codegen-tests\", \"rust.codegen-tests\", \"run the tests/codegen tests\")\n o(\"option-checking\", None, \"complain about unrecognized options in this configure script\")\n o(\"ninja\", \"llvm.ninja\", \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\")"}, {"sha": "909e7d83a1599ef1e26c68ee1d54ea4929ae8c80", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -520,10 +520,6 @@ impl Step for Llvm {\n }\n \n fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n-    if !builder.config.llvm_version_check {\n-        return;\n-    }\n-\n     if builder.config.dry_run() {\n         return;\n     }"}, {"sha": "efe5f5642b8af5de2d58fc2731e4fa467dffb6f6", "filename": "src/doc/unstable-book/src/compiler-flags/cf-protection.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -1,5 +1,9 @@\n # `cf-protection`\n \n+The tracking issue for this feature is: [#93754](https://github.com/rust-lang/rust/issues/93754).\n+\n+------------------------\n+\n This option enables control-flow enforcement technology (CET) on x86; a more detailed description of\n CET is available [here]. Similar to `clang`, this flag takes one of the following values:\n "}, {"sha": "6ca6edfd3c9fed181e88b7fef03e8f3aeb66bf5c", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -8,7 +8,7 @@ path = \"lib.rs\"\n \n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n-askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n+askama = { version = \"0.12\", default-features = false, features = [\"config\"] }\n itertools = \"0.10.1\"\n minifier = \"0.2.2\"\n once_cell = \"1.10.0\""}, {"sha": "2732c4bc61ef698dfefe1c6ebadf3e32f99a7cf1", "filename": "src/librustdoc/askama.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Faskama.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Faskama.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Faskama.toml?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -1,2 +1,3 @@\n [general]\n dirs = [\"html/templates\"]\n+whitespace = \"suppress\""}, {"sha": "72c516c93eb7fa6a9886ffaedb2c4bc356560576", "filename": "src/librustdoc/html/templates/STYLE.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -10,28 +10,29 @@ similar to [Jinja2](jinjadoc) and [Django](djangodoc) templates, and also to [As\n \n We want our rendered output to have as little unnecessary whitespace as\n possible, so that pages load quickly. To achieve that we use Tera's\n-[whitespace control] features. At the end of most lines, we put an empty comment\n-tag with the whitespace control characters: `{#- -#}`. This causes all\n-whitespace between the end of the line and the beginning of the next, including\n-indentation, to be omitted on render. Sometimes we want to preserve a single\n-space. In those cases we put the space at the end of the line, followed by\n-`{# -#}`, which is a directive to remove following whitespace but not preceding.\n-We also use the whitespace control characters in most instances of tags with\n-control flow, for example `{%- if foo -%}`.\n+[whitespace control] features. By default, whitespace characters are removed\n+around jinja tags (`{% %}` for example). At the end of most lines, we put an\n+empty comment tag: `{# #}`. This causes all whitespace between the end of the\n+line and the beginning of the next, including indentation, to be omitted on\n+render. Sometimes we want to preserve a single space. In those cases we put the\n+space at the end of the line, followed by `{#+ #}`, which is a directive to\n+remove following whitespace but not preceding. We also use the whitespace\n+control characters in most instances of tags with control flow, for example\n+`{% if foo %}`.\n \n [whitespace control]: https://tera.netlify.app/docs/#whitespace-control\n \n We want our templates to be readable, so we use indentation and newlines\n-liberally. We indent by four spaces after opening an HTML tag _or_ a Tera\n+liberally. We indent by four spaces after opening an HTML tag _or_ a Jinja\n tag. In most cases an HTML tag should be followed by a newline, but if the\n tag has simple contents and fits with its close tag on a single line, the\n contents don't necessarily need a new line.\n \n-Tera templates support quite sophisticated control flow. To keep our templates\n+Askama templates support quite sophisticated control flow. To keep our templates\n simple and understandable, we use only a subset: `if` and `for`. In particular\n-we avoid [assignments in the template logic](assignments) and [Tera\n+we avoid [assignments in the template logic](assignments) and [Askama\n macros](macros). This also may make things easier if we switch to a different\n Jinja-style template system, like Askama, in the future.\n \n-[assignments]: https://tera.netlify.app/docs/#assignments\n-[macros]: https://tera.netlify.app/docs/#macros\n+[assignments]: https://djc.github.io/askama/template_syntax.html#assignments\n+[macros]: https://djc.github.io/askama/template_syntax.html#macros"}, {"sha": "e896850fab6bdb0eb05b56b0706eef1526c54769", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 147, "deletions": 147, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -1,148 +1,148 @@\n-<!DOCTYPE html> {#- -#}\n-<html lang=\"en\"> {#- -#}\n-<head> {#- -#}\n-    <meta charset=\"utf-8\"> {#- -#}\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> {#- -#}\n-    <meta name=\"generator\" content=\"rustdoc\"> {#- -#}\n-    <meta name=\"description\" content=\"{{page.description}}\"> {#- -#}\n-    <title>{{page.title}}</title> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_regular}}\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_regular}}\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_medium}}\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_regular}}\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_bold}}\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_semibold}}\"> {#- -#}\n-    <link rel=\"stylesheet\" {# -#}\n-          href=\"{{static_root_path|safe}}{{files.normalize_css}}\"> {#- -#}\n-    <link rel=\"stylesheet\" {# -#}\n-          href=\"{{static_root_path|safe}}{{files.rustdoc_css}}\" {# -#}\n-          id=\"mainThemeStyle\"> {#- -#}\n-    <link rel=\"stylesheet\" id=\"themeStyle\" href=\"{{static_root_path|safe}}{{files.theme_light_css}}\"> {#- -#}\n-    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_dark_css}}\"> {#- -#}\n-    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_ayu_css}}\"> {#- -#}\n-    {%- for theme in themes -%}\n-        <link rel=\"stylesheet\" disabled href=\"{{page.root_path|safe}}{{theme}}{{page.resource_suffix}}.css\"> {#- -#}\n-    {%- endfor -%}\n-    {%- if !layout.default_settings.is_empty() -%}\n-    <script id=\"default-settings\" {# -#}\n-      {% for (k, v) in layout.default_settings %}\n+<!DOCTYPE html> {# #}\n+<html lang=\"en\"> {# #}\n+<head> {# #}\n+    <meta charset=\"utf-8\"> {# #}\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> {# #}\n+    <meta name=\"generator\" content=\"rustdoc\"> {# #}\n+    <meta name=\"description\" content=\"{{page.description}}\"> {# #}\n+    <title>{{page.title}}</title> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_regular}}\"> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_regular}}\"> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_medium}}\"> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_regular}}\"> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_bold}}\"> {# #}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_semibold}}\"> {# #}\n+    <link rel=\"stylesheet\" {#+ #}\n+          href=\"{{static_root_path|safe}}{{files.normalize_css}}\"> {# #}\n+    <link rel=\"stylesheet\" {#+ #}\n+          href=\"{{static_root_path|safe}}{{files.rustdoc_css}}\" {#+ #}\n+          id=\"mainThemeStyle\"> {# #}\n+    <link rel=\"stylesheet\" id=\"themeStyle\" href=\"{{static_root_path|safe}}{{files.theme_light_css}}\"> {# #}\n+    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_dark_css}}\"> {# #}\n+    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_ayu_css}}\"> {# #}\n+    {% for theme in themes %}\n+        <link rel=\"stylesheet\" disabled href=\"{{page.root_path|safe}}{{theme}}{{page.resource_suffix}}.css\"> {# #}\n+    {% endfor %}\n+    {% if !layout.default_settings.is_empty() %}\n+    <script id=\"default-settings\" {#+ #}\n+      {%~ for (k, v) in layout.default_settings ~%}\n         data-{{k}}=\"{{v}}\"\n-      {%- endfor -%}\n-    ></script> {#- -#}\n-    {%- endif -%}\n-    <script src=\"{{static_root_path|safe}}{{files.storage_js}}\"></script> {#- -#}\n-    {%- if page.css_class.contains(\"crate\") -%}\n-    <script defer src=\"{{page.root_path|safe}}crates{{page.resource_suffix}}.js\"></script> {#- -#}\n-    {%- else if page.css_class == \"source\" -%}\n-    <script defer src=\"{{static_root_path|safe}}{{files.source_script_js}}\"></script> {#- -#}\n-    <script defer src=\"{{page.root_path|safe}}source-files{{page.resource_suffix}}.js\"></script> {#- -#}\n-    {%- else if !page.css_class.contains(\"mod\") -%}\n-    <script defer src=\"sidebar-items{{page.resource_suffix}}.js\"></script> {#- -#}\n-    {%- endif -%}\n-    <script defer src=\"{{static_root_path|safe}}{{files.main_js}}\"></script> {#- -#}\n-    {%- if layout.scrape_examples_extension -%}\n-    <script defer src=\"{{static_root_path|safe}}{{files.scrape_examples_js}}\"></script> {#- -#}\n-    {%- endif -%}\n-    <noscript> {#- -#}\n-        <link rel=\"stylesheet\" {# -#}\n-           href=\"{{static_root_path|safe}}{{files.noscript_css}}\"> {#- -#}\n-    </noscript> {#- -#}\n-    {%- if layout.css_file_extension.is_some() -%}\n-        <link rel=\"stylesheet\" {# -#}\n-            href=\"{{static_root_path|safe}}theme{{page.resource_suffix}}.css\"> {#- -#}\n-    {%- endif -%}\n-    {%- if !layout.favicon.is_empty() -%}\n-        <link rel=\"icon\" href=\"{{layout.favicon}}\"> {#- -#}\n-    {%- else -%}\n-        <link rel=\"alternate icon\" type=\"image/png\" {# -#}\n-            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_16}}\"> {#- -#}\n-        <link rel=\"alternate icon\" type=\"image/png\" {# -#}\n-            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_32}}\"> {#- -#}\n-        <link rel=\"icon\" type=\"image/svg+xml\" {# -#}\n-            href=\"{{static_root_path|safe}}{{files.rust_favicon_svg}}\"> {#- -#}\n-    {%- endif -%}\n-    {{- layout.external_html.in_header|safe -}}\n-</head> {#- -#}\n-<body class=\"rustdoc {{page.css_class}}\"> {#- -#}\n-    <!--[if lte IE 11]> {#- -#}\n-    <div class=\"warning\"> {#- -#}\n-        This old browser is unsupported and will most likely display funky things. {#- -#}\n-    </div> {#- -#}\n-    <![endif]--> {#- -#}\n-    {{- layout.external_html.before_content|safe -}}\n-    {%- if page.css_class != \"source\" -%}\n-    <nav class=\"mobile-topbar\"> {#- -#}\n-        <button class=\"sidebar-menu-toggle\">&#9776;</button> {#- -#}\n-        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n-        {%- if !layout.logo.is_empty() -%}\n-            <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n-        {%- else -%}\n-            <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n-        {%- endif -%}\n-        </a> {#- -#}\n-        <h2></h2> {#- -#}\n-    </nav> {#- -#}\n-    {%- endif -%}\n-    <nav class=\"sidebar\"> {#- -#}\n-        {%- if page.css_class != \"source\" -%}\n-        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n-            {%- if !layout.logo.is_empty()  %}\n-                <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n-            {%- else -%}\n-                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n-            {%- endif -%}\n-        </a> {#- -#}\n-        {%- endif -%}\n-        {{- sidebar|safe -}}\n-    </nav> {#- -#}\n-    <main> {#- -#}\n-        {%- if page.css_class != \"source\" -%}<div class=\"width-limiter\">{%- endif -%}\n-            <nav class=\"sub\"> {#- -#}\n-                {%- if page.css_class == \"source\" -%}\n-                <a class=\"sub-logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n-                    {%- if !layout.logo.is_empty()  %}\n-                        <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n-                    {%- else -%}\n-                        <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n-                    {%- endif -%}\n-                </a> {#- -#}\n-                {%- endif -%}\n-                <form class=\"search-form\"> {#- -#}\n-                    <span></span> {#- This empty span is a hacky fix for Safari - See #93184 -#}\n-                    <input {# -#}\n-                        class=\"search-input\" {# -#}\n-                        name=\"search\" {# -#}\n-                        aria-label=\"Run search in the documentation\" {# -#}\n-                        autocomplete=\"off\" {# -#}\n-                        spellcheck=\"false\" {# -#}\n-                        placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n-                        type=\"search\"> {#- -#}\n-                    <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n-                        <a href=\"{{page.root_path|safe}}help.html\">?</a> {#- -#}\n-                    </div> {#- -#}\n-                    <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n-                        <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n-                            <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n-                            src=\"{{static_root_path|safe}}{{files.wheel_svg}}\"> {#- -#}\n-                        </a> {#- -#}\n-                    </div> {#- -#}\n-                </form> {#- -#}\n-            </nav> {#- -#}\n-            <section id=\"main-content\" class=\"content\">{{- content|safe -}}</section> {#- -#}\n-        {%- if page.css_class != \"source\" -%}</div>{%- endif -%}\n-    </main> {#- -#}\n-    {{- layout.external_html.after_content|safe -}}\n-    <div id=\"rustdoc-vars\" {# -#}\n-         data-root-path=\"{{page.root_path|safe}}\" {# -#}\n-         data-static-root-path=\"{{static_root_path|safe}}\" {# -#}\n-         data-current-crate=\"{{layout.krate}}\" {# -#}\n-         data-themes=\"{{themes|join(\",\") }}\" {# -#}\n-         data-resource-suffix=\"{{page.resource_suffix}}\" {# -#}\n-         data-rustdoc-version=\"{{rustdoc_version}}\" {# -#}\n-         data-search-js=\"{{files.search_js}}\" {# -#}\n-         data-settings-js=\"{{files.settings_js}}\" {# -#}\n-         data-settings-css=\"{{files.settings_css}}\" {# -#}\n-    > {#- -#}\n-    </div> {#- -#}\n-</body> {#- -#}\n-</html> {#- -#}\n+      {% endfor %}\n+    ></script> {# #}\n+    {% endif %}\n+    <script src=\"{{static_root_path|safe}}{{files.storage_js}}\"></script> {# #}\n+    {% if page.css_class.contains(\"crate\") %}\n+    <script defer src=\"{{page.root_path|safe}}crates{{page.resource_suffix}}.js\"></script> {# #}\n+    {% else if page.css_class == \"source\" %}\n+    <script defer src=\"{{static_root_path|safe}}{{files.source_script_js}}\"></script> {# #}\n+    <script defer src=\"{{page.root_path|safe}}source-files{{page.resource_suffix}}.js\"></script> {# #}\n+    {% else if !page.css_class.contains(\"mod\") %}\n+    <script defer src=\"sidebar-items{{page.resource_suffix}}.js\"></script> {# #}\n+    {% endif %}\n+    <script defer src=\"{{static_root_path|safe}}{{files.main_js}}\"></script> {# #}\n+    {% if layout.scrape_examples_extension %}\n+    <script defer src=\"{{static_root_path|safe}}{{files.scrape_examples_js}}\"></script> {# #}\n+    {% endif %}\n+    <noscript> {# #}\n+        <link rel=\"stylesheet\" {#+ #}\n+           href=\"{{static_root_path|safe}}{{files.noscript_css}}\"> {# #}\n+    </noscript> {# #}\n+    {% if layout.css_file_extension.is_some() %}\n+        <link rel=\"stylesheet\" {#+ #}\n+            href=\"{{static_root_path|safe}}theme{{page.resource_suffix}}.css\"> {# #}\n+    {% endif %}\n+    {% if !layout.favicon.is_empty() %}\n+        <link rel=\"icon\" href=\"{{layout.favicon}}\"> {# #}\n+    {% else %}\n+        <link rel=\"alternate icon\" type=\"image/png\" {#+ #}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_16}}\"> {# #}\n+        <link rel=\"alternate icon\" type=\"image/png\" {#+ #}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_32}}\"> {# #}\n+        <link rel=\"icon\" type=\"image/svg+xml\" {#+ #}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_svg}}\"> {# #}\n+    {% endif %}\n+    {{ layout.external_html.in_header|safe }}\n+</head> {# #}\n+<body class=\"rustdoc {{+page.css_class}}\"> {# #}\n+    <!--[if lte IE 11]> {# #}\n+    <div class=\"warning\"> {# #}\n+        This old browser is unsupported and will most likely display funky things. {# #}\n+    </div> {# #}\n+    <![endif]--> {# #}\n+    {{ layout.external_html.before_content|safe }}\n+    {% if page.css_class != \"source\" %}\n+    <nav class=\"mobile-topbar\"> {# #}\n+        <button class=\"sidebar-menu-toggle\">&#9776;</button> {# #}\n+        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {# #}\n+        {% if !layout.logo.is_empty() %}\n+            <img src=\"{{layout.logo}}\" alt=\"logo\"> {# #}\n+        {% else %}\n+            <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {# #}\n+        {% endif %}\n+        </a> {# #}\n+        <h2></h2> {# #}\n+    </nav> {# #}\n+    {% endif %}\n+    <nav class=\"sidebar\"> {# #}\n+        {% if page.css_class != \"source\" %}\n+        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {# #}\n+            {% if !layout.logo.is_empty() %}\n+                <img src=\"{{layout.logo}}\" alt=\"logo\"> {# #}\n+            {% else %}\n+                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {# #}\n+            {% endif %}\n+        </a> {# #}\n+        {% endif %}\n+        {{ sidebar|safe }}\n+    </nav> {# #}\n+    <main> {# #}\n+        {% if page.css_class != \"source\" %}<div class=\"width-limiter\">{% endif %}\n+            <nav class=\"sub\"> {# #}\n+                {% if page.css_class == \"source\" %}\n+                <a class=\"sub-logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {# #}\n+                    {% if !layout.logo.is_empty() %}\n+                        <img src=\"{{layout.logo}}\" alt=\"logo\"> {# #}\n+                    {% else %}\n+                        <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {# #}\n+                    {% endif %}\n+                </a> {# #}\n+                {% endif %}\n+                <form class=\"search-form\"> {# #}\n+                    <span></span> {# This empty span is a hacky fix for Safari - See #93184 #}\n+                    <input {#+ #}\n+                        class=\"search-input\" {#+ #}\n+                        name=\"search\" {#+ #}\n+                        aria-label=\"Run search in the documentation\" {#+ #}\n+                        autocomplete=\"off\" {#+ #}\n+                        spellcheck=\"false\" {#+ #}\n+                        placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {#+ #}\n+                        type=\"search\"> {# #}\n+                    <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {# #}\n+                        <a href=\"{{page.root_path|safe}}help.html\">?</a> {# #}\n+                    </div> {# #}\n+                    <div id=\"settings-menu\" tabindex=\"-1\"> {# #}\n+                        <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {# #}\n+                            <img width=\"22\" height=\"22\" alt=\"Change settings\" {#+ #}\n+                            src=\"{{static_root_path|safe}}{{files.wheel_svg}}\"> {# #}\n+                        </a> {# #}\n+                    </div> {# #}\n+                </form> {# #}\n+            </nav> {# #}\n+            <section id=\"main-content\" class=\"content\">{{ content|safe }}</section> {# #}\n+        {% if page.css_class != \"source\" %}</div>{% endif %}\n+    </main> {# #}\n+    {{ layout.external_html.after_content|safe }}\n+    <div id=\"rustdoc-vars\" {#+ #}\n+         data-root-path=\"{{page.root_path|safe}}\" {#+ #}\n+         data-static-root-path=\"{{static_root_path|safe}}\" {#+ #}\n+         data-current-crate=\"{{layout.krate}}\" {#+ #}\n+         data-themes=\"{{themes|join(\",\") }}\" {#+ #}\n+         data-resource-suffix=\"{{page.resource_suffix}}\" {#+ #}\n+         data-rustdoc-version=\"{{rustdoc_version}}\" {#+ #}\n+         data-search-js=\"{{files.search_js}}\" {#+ #}\n+         data-settings-js=\"{{files.settings_js}}\" {#+ #}\n+         data-settings-css=\"{{files.settings_css}}\" {#+ #}\n+    > {# #}\n+    </div> {# #}\n+</body> {# #}\n+</html> {# #}"}, {"sha": "edabac9a08231b055bfe95216d7c4a7b8f266d07", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -1,28 +1,28 @@\n-<div class=\"main-heading\"> {#- -#}\n-    <h1> {#- -#}\n-        {{-typ-}}\n-        {#- The breadcrumbs of the item path, like std::string -#}\n-        {%- for component in path_components -%}\n-        <a href=\"{{component.path|safe}}index.html\">{{component.name}}</a>::<wbr>\n-        {%- endfor -%}\n-        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n-        <button id=\"copy-path\" title=\"Copy item path to clipboard\"> {#- -#}\n-        <img src=\"{{static_root_path|safe}}{{clipboard_svg}}\" {# -#}\n-                width=\"19\" height=\"18\" {# -#}\n-                alt=\"Copy item path\"> {#- -#}\n-        </button> {#- -#}\n-    </h1> {#- -#}\n-    <span class=\"out-of-band\"> {#- -#}\n+<div class=\"main-heading\"> {# #}\n+    <h1> {# #}\n+        {{typ}}\n+        {# The breadcrumbs of the item path, like std::string #}\n+        {% for component in path_components %}\n+            <a href=\"{{component.path|safe}}index.html\">{{component.name}}</a>::<wbr>\n+        {% endfor %}\n+        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {# #}\n+        <button id=\"copy-path\" title=\"Copy item path to clipboard\"> {# #}\n+        <img src=\"{{static_root_path|safe}}{{clipboard_svg}}\" {#+ #}\n+                width=\"19\" height=\"18\" {#+ #}\n+                alt=\"Copy item path\"> {# #}\n+        </button> {# #}\n+    </h1> {# #}\n+    <span class=\"out-of-band\"> {# #}\n         {% if !stability_since_raw.is_empty() %}\n-        {{- stability_since_raw|safe }} \u00b7 {# -#}\n+        {{ stability_since_raw|safe +}} \u00b7 {#+ #}\n         {% endif %}\n-        {%- match src_href -%}\n-            {%- when Some with (href) -%}\n-                <a class=\"srclink\" href=\"{{href|safe}}\">source</a> \u00b7 {# -#}\n-            {%- else -%}\n-        {%- endmatch -%}\n-        <button id=\"toggle-all-docs\" title=\"collapse all docs\"> {#- -#}\n-            [<span>&#x2212;</span>] {#- -#}\n-        </button> {#- -#}\n-    </span> {#- -#}\n-</div> {#- -#}\n+        {% match src_href %}\n+            {% when Some with (href) %}\n+                <a class=\"srclink\" href=\"{{href|safe}}\">source</a> \u00b7 {#+ #}\n+            {% else %}\n+        {% endmatch %}\n+        <button id=\"toggle-all-docs\" title=\"collapse all docs\"> {# #}\n+            [<span>&#x2212;</span>] {# #}\n+        </button> {# #}\n+    </span> {# #}\n+</div> {# #}"}, {"sha": "d0b770783c1f12673665c903af3e2a02e5cd9e7d", "filename": "tests/mir-opt/building/custom/as_cast.float_to_int.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `float_to_int` after built\n+\n+fn float_to_int(_1: f32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:31\n+\n+    bb0: {\n+        _0 = _1 as i32 (FloatToInt);     // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "aaebff0d7673d82cfb822a3993f932ff4fca06e0", "filename": "tests/mir-opt/building/custom/as_cast.int_to_int.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `int_to_int` after built\n+\n+fn int_to_int(_1: u32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:26: +0:29\n+\n+    bb0: {\n+        _0 = _1 as i32 (IntToInt);       // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "f040cf53df4a8714b5251c291ffc8b0f005ac55d", "filename": "tests/mir-opt/building/custom/as_cast.int_to_ptr.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `int_to_ptr` after built\n+\n+fn int_to_ptr(_1: usize) -> *const i32 {\n+    let mut _0: *const i32;              // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:38\n+\n+    bb0: {\n+        _0 = _1 as *const i32 (PointerFromExposedAddress); // scope 0 at $DIR/as_cast.rs:+3:13: +3:34\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "b4b5ac6aa3b1e1a9759afd261f62815a448e3d45", "filename": "tests/mir-opt/building/custom/as_cast.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,43 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR as_cast.int_to_int.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn int_to_int(x: u32) -> i32 {\n+    mir!(\n+        {\n+            RET = x as i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR as_cast.float_to_int.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn float_to_int(x: f32) -> i32 {\n+    mir!(\n+        {\n+            RET = x as i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR as_cast.int_to_ptr.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn int_to_ptr(x: usize) -> *const i32 {\n+    mir!(\n+        {\n+            RET = x as *const i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(int_to_int(5), 5);\n+    assert_eq!(float_to_int(5.), 5);\n+    assert_eq!(int_to_ptr(0), std::ptr::null());\n+}"}, {"sha": "397fc542909ac1c6b8898a10071b5c2a2b465928", "filename": "tests/run-make/translation/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Ftranslation%2FMakefile?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -13,22 +13,22 @@ all: normal custom missing broken sysroot sysroot-invalid sysroot-missing\n \n # Check that the test works normally, using the built-in fallback bundle.\n normal: test.rs\n-\t$(RUSTC) $< 2>&1 | grep \"struct literal body without path\"\n+\t$(RUSTC) $< 2>&1 | $(CGREP) \"struct literal body without path\"\n \n # Check that a primary bundle can be loaded and will be preferentially used\n # where possible.\n custom: test.rs working.ftl\n-\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/working.ftl 2>&1 | grep \"this is a test message\"\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/working.ftl 2>&1 | $(CGREP) \"this is a test message\"\n \n # Check that a primary bundle with a broken message (e.g. a interpolated\n # variable is missing) will use the fallback bundle.\n missing: test.rs missing.ftl\n-\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/missing.ftl 2>&1 | grep \"struct literal body without path\"\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/missing.ftl 2>&1 | $(CGREP) \"struct literal body without path\"\n \n # Check that a primary bundle without the desired message will use the fallback\n # bundle.\n broken: test.rs broken.ftl\n-\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/broken.ftl 2>&1 | grep \"struct literal body without path\"\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/broken.ftl 2>&1 | $(CGREP) \"struct literal body without path\"\n \n # Check that a locale can be loaded from the sysroot given a language\n # identifier by making a local copy of the sysroot and adding the custom locale\n@@ -48,13 +48,13 @@ sysroot: test.rs working.ftl\n \tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n \tln -s $(CURDIR)/working.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n-\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | $(CGREP) \"this is a test message\"\n \n # Check that the compiler errors out when the sysroot requested cannot be\n # found. This test might start failing if there actually exists a Klingon\n # translation of rustc's error messages.\n-sysroot-missing: \n-\t$(RUSTC) $< -Ztranslate-lang=tlh 2>&1 | grep \"missing locale directory\"\n+sysroot-missing:\n+\t$(RUSTC) $< -Ztranslate-lang=tlh 2>&1 | $(CGREP) \"missing locale directory\"\n \n # Check that the compiler errors out when the directory for the locale in the\n # sysroot is actually a file.\n@@ -73,4 +73,4 @@ sysroot-invalid: test.rs working.ftl\n \tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n \tmkdir -p $(FAKEROOT)/share/locale\n \ttouch $(FAKEROOT)/share/locale/zh-CN\n-\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"`\\$sysroot/share/locales/\\$locale` is not a directory\"\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | $(CGREP) \"`\\$sysroot/share/locales/\\$locale` is not a directory\""}, {"sha": "efcb8b8ebab0a7ebbc326870a510d10d57de96f6", "filename": "tests/ui/async-await/issue-108572.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fui%2Fasync-await%2Fissue-108572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fui%2Fasync-await%2Fissue-108572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-108572.rs?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,12 @@\n+// edition: 2021\n+\n+use std::future::Future;\n+fn foo() -> impl Future<Output=()> {\n+    async { }\n+}\n+\n+fn main() {\n+    let fut = foo();\n+    fut.poll();\n+    //~^ ERROR no method named `poll` found for opaque type `impl Future<Output = ()>` in the current scope [E0599]\n+}"}, {"sha": "0dbcf4d660a98a1d74e7b0b8ca7402da4b3c7323", "filename": "tests/ui/async-await/issue-108572.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fui%2Fasync-await%2Fissue-108572.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a521db67e2935e5a46c7b95b511ab9a43be5770/tests%2Fui%2Fasync-await%2Fissue-108572.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-108572.stderr?ref=1a521db67e2935e5a46c7b95b511ab9a43be5770", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `poll` found for opaque type `impl Future<Output = ()>` in the current scope\n+  --> $DIR/issue-108572.rs:10:9\n+   |\n+LL |     fut.poll();\n+   |         ^^^^ method not found in `impl Future<Output = ()>`\n+   |\n+   = help: method `poll` found on `Pin<&mut impl Future<Output = ()>>`, see documentation for `std::pin::Pin`\n+   = help: self type must be pinned to call `Future::poll`, see https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#pinning-in-practice\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}