{"sha": "d6a220b70a375ae722c7d6c1c069fbf6298b6260", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTIyMGI3MGEzNzVhZTcyMmM3ZDZjMWMwNjlmYmY2Mjk4YjYyNjA=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-09-24T03:19:11Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-09-24T14:43:31Z"}, "message": "feat: support config. of leading match arm pipe", "tree": {"sha": "8bc037caad33a2023bc621442117b1f6fda08efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc037caad33a2023bc621442117b1f6fda08efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a220b70a375ae722c7d6c1c069fbf6298b6260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a220b70a375ae722c7d6c1c069fbf6298b6260", "html_url": "https://github.com/rust-lang/rust/commit/d6a220b70a375ae722c7d6c1c069fbf6298b6260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a220b70a375ae722c7d6c1c069fbf6298b6260/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b96254fbf1cbdae067cb3dbef903104bfc01d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b96254fbf1cbdae067cb3dbef903104bfc01d1", "html_url": "https://github.com/rust-lang/rust/commit/f6b96254fbf1cbdae067cb3dbef903104bfc01d1"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "bb86a379eb1f0bf7e26467a369776d075db84aa6", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=d6a220b70a375ae722c7d6c1c069fbf6298b6260", "patch": "@@ -91,6 +91,8 @@ create_config! {\n         \"Align enum variants discrims, if their diffs fit within threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n         the same line with the pattern of arms\";\n+    match_arm_leading_pipes: MatchArmLeadingPipe, MatchArmLeadingPipe::Never, true,\n+        \"Determines whether leading pipes are emitted on match arms\";\n     force_multiline_blocks: bool, false, false,\n         \"Force multiline closure bodies and match arms to be wrapped in a block\";\n     fn_args_layout: Density, Density::Tall, true,\n@@ -528,6 +530,7 @@ overflow_delimited_expr = false\n struct_field_align_threshold = 0\n enum_discrim_align_threshold = 0\n match_arm_blocks = true\n+match_arm_leading_pipes = \"Never\"\n force_multiline_blocks = false\n fn_args_layout = \"Tall\"\n brace_style = \"SameLineWhere\""}, {"sha": "028ad2d37572fbcfcd8699adebc04c19b27a6996", "filename": "src/config/options.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=d6a220b70a375ae722c7d6c1c069fbf6298b6260", "patch": "@@ -392,3 +392,14 @@ impl Edition {\n         }\n     }\n }\n+\n+/// Controls how rustfmt should handle leading pipes on match arms.\n+#[config_type]\n+pub enum MatchArmLeadingPipe {\n+    /// Place leading pipes on all match arms\n+    Always,\n+    /// Never emit leading pipes on match arms\n+    Never,\n+    /// Preserve any existing leading pipes\n+    Preserve,\n+}"}, {"sha": "7b691bf61006d5a0f67d04d9fdaf1636fd0df9ec", "filename": "src/matches.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a220b70a375ae722c7d6c1c069fbf6298b6260/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=d6a220b70a375ae722c7d6c1c069fbf6298b6260", "patch": "@@ -7,7 +7,7 @@ use rustc_span::{BytePos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, rewrite_comment};\n use crate::config::lists::*;\n-use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n+use crate::config::{Config, ControlBraceStyle, IndentStyle, MatchArmLeadingPipe, Version};\n use crate::expr::{\n     format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line, rewrite_cond,\n     ExprType, RhsTactics,\n@@ -55,7 +55,13 @@ impl<'a> Spanned for ArmWrapper<'a> {\n \n impl<'a> Rewrite for ArmWrapper<'a> {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        rewrite_match_arm(context, self.arm, shape, self.is_last)\n+        rewrite_match_arm(\n+            context,\n+            self.arm,\n+            shape,\n+            self.is_last,\n+            self.beginning_vert.is_some(),\n+        )\n     }\n }\n \n@@ -215,6 +221,7 @@ fn rewrite_match_arm(\n     arm: &ast::Arm,\n     shape: Shape,\n     is_last: bool,\n+    has_leading_pipe: bool,\n ) -> Option<String> {\n     let (missing_span, attrs_str) = if !arm.attrs.is_empty() {\n         if contains_skip(&arm.attrs) {\n@@ -232,9 +239,17 @@ fn rewrite_match_arm(\n         (mk_sp(arm.span().lo(), arm.span().lo()), String::new())\n     };\n \n+    // Leading pipe offset\n+    // 2 = `| `\n+    let (pipe_offset, pipe_str) = match context.config.match_arm_leading_pipes() {\n+        MatchArmLeadingPipe::Never => (0, \"\"),\n+        MatchArmLeadingPipe::Preserve if !has_leading_pipe => (0, \"\"),\n+        MatchArmLeadingPipe::Preserve | MatchArmLeadingPipe::Always => (2, \"| \"),\n+    };\n+\n     // Patterns\n     // 5 = ` => {`\n-    let pat_shape = shape.sub_width(5)?;\n+    let pat_shape = shape.sub_width(5)?.offset_left(pipe_offset)?;\n     let pats_str = arm.pat.rewrite(context, pat_shape)?;\n \n     // Guard\n@@ -251,7 +266,7 @@ fn rewrite_match_arm(\n     let lhs_str = combine_strs_with_missing_comments(\n         context,\n         &attrs_str,\n-        &format!(\"{}{}\", pats_str, guard_str),\n+        &format!(\"{}{}{}\", pipe_str, pats_str, guard_str),\n         missing_span,\n         shape,\n         false,"}]}