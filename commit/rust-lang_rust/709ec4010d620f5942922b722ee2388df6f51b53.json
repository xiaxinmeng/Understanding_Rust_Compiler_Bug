{"sha": "709ec4010d620f5942922b722ee2388df6f51b53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWVjNDAxMGQ2MjBmNTk0MjkyMmI3MjJlZTIzODhkZjZmNTFiNTM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:49:58Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:49:58Z"}, "message": "Rollup merge of #49871 - SimonSapin:int-bytes, r=sfackler\n\nAdd to_bytes and from_bytes to primitive integers\n\nDiscussion issue turned tracking issue: https://github.com/rust-lang/rust/issues/49792", "tree": {"sha": "867bc6ea8c97f70e232441ff2ae5aa4261b49a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867bc6ea8c97f70e232441ff2ae5aa4261b49a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709ec4010d620f5942922b722ee2388df6f51b53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrR3NYACgkQ/vbIBR0O\nATzmMRAAqO/IkqkuR1UvWgFLs7mAAO+2U7+GEDPIkBhW0I+dJabkQOX73JFCz6Ul\nj7Azuf6hXj4m9a7dXMk3HGRWoUrLLxj4jH0PrLmRl4s9bjqGrUwlNfaP6eJn+Ryr\nWC3Db/35G9AX74axTzjABjSXT/G70VAjPKzYXBvCNWN4KXr+2urTzUesaQcIcB00\nOQoPtAxmrUiBaCIsum/D6ty3iHt06myJZe1g9Omlio9PU471hRSiXcnYJjGQrx5j\nDyar23wEP74s3zFdlQUiYJ7WgBk5duwd55j/lEdEYQDyXX28T5Y9mTb/yoP1qfDL\n0/8Zek6XjpSbby/3jjJJ8qD14X75Gh9I39Jq1AHiAXqPzUzY3PH/33QALrE/dReg\nLWS87v2lwJgkj/9yhFQodiLpwpOiz5KGjDFiqEbPXz6b6czEbcsMY2kIgyl5TaTf\netla/0YaWIpLXVoEWq/q/K0aWCGTjAZRnwl3ScNdSL+4LWGgTBjXjpTr0cspLl5f\nuTLCOikC6KUpeXsFKoxi2N1GAi7htus2COrzvxQHK4tJamxojBoT7QatjA5/ZLE+\n/AlN2/v4WwXCO2gCjd5zY052PeG4zCXyZ5kJZRsAk+/9DOWj+ZRNyueuwj4YTKX5\n/GX3g9NZq0R17cFysuuAB/DMZ9sYr3scsSmLUI2tuo+ue8t4ios=\n=5dmz\n-----END PGP SIGNATURE-----", "payload": "tree 867bc6ea8c97f70e232441ff2ae5aa4261b49a15\nparent 9659f052a44659f30c31f889cba0ad2ba8d8372c\nparent 447299130a6a088af33152d2cef966c7ab3d7fdb\nauthor kennytm <kennytm@gmail.com> 1523702998 +0800\ncommitter kennytm <kennytm@gmail.com> 1523702998 +0800\n\nRollup merge of #49871 - SimonSapin:int-bytes, r=sfackler\n\nAdd to_bytes and from_bytes to primitive integers\n\nDiscussion issue turned tracking issue: https://github.com/rust-lang/rust/issues/49792\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709ec4010d620f5942922b722ee2388df6f51b53", "html_url": "https://github.com/rust-lang/rust/commit/709ec4010d620f5942922b722ee2388df6f51b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709ec4010d620f5942922b722ee2388df6f51b53/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9659f052a44659f30c31f889cba0ad2ba8d8372c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9659f052a44659f30c31f889cba0ad2ba8d8372c", "html_url": "https://github.com/rust-lang/rust/commit/9659f052a44659f30c31f889cba0ad2ba8d8372c"}, {"sha": "447299130a6a088af33152d2cef966c7ab3d7fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/447299130a6a088af33152d2cef966c7ab3d7fdb", "html_url": "https://github.com/rust-lang/rust/commit/447299130a6a088af33152d2cef966c7ab3d7fdb"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "f2e8caaad1485ac00e78b0629da906ffd3df866c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/709ec4010d620f5942922b722ee2388df6f51b53/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709ec4010d620f5942922b722ee2388df6f51b53/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=709ec4010d620f5942922b722ee2388df6f51b53", "patch": "@@ -15,6 +15,7 @@\n use convert::TryFrom;\n use fmt;\n use intrinsics;\n+use mem;\n #[allow(deprecated)] use nonzero::NonZero;\n use ops;\n use str::FromStr;\n@@ -1868,6 +1869,50 @@ $EndFeature, \"\n             #[inline]\n             pub fn is_negative(self) -> bool { self < 0 }\n         }\n+\n+        /// Return the memory representation of this integer as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use this after [`to_be`] or [`to_le`].\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let bytes = i32::min_value().to_be().to_bytes();\n+        /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            unsafe { mem::transmute(self) }\n+        }\n+\n+        /// Create an integer value from its memory representation as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use [`from_be`] or [`from_le`] after this.\n+        ///\n+        /// [`from_be`]: #method.from_be\n+        /// [`from_le`]: #method.from_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let int = i32::from_be(i32::from_bytes([0x80, 0, 0, 0]));\n+        /// assert_eq!(int, i32::min_value());\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            unsafe { mem::transmute(bytes) }\n+        }\n     }\n }\n \n@@ -3373,6 +3418,50 @@ $EndFeature, \"\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n         }\n+\n+        /// Return the memory representation of this integer as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use this after [`to_be`] or [`to_le`].\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let bytes = 0x1234_5678_u32.to_be().to_bytes();\n+        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            unsafe { mem::transmute(self) }\n+        }\n+\n+        /// Create an integer value from its memory representation as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use [`to_be`] or [`to_le`] after this.\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let int = u32::from_be(u32::from_bytes([0x12, 0x34, 0x56, 0x78]));\n+        /// assert_eq!(int, 0x1234_5678_u32);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            unsafe { mem::transmute(bytes) }\n+        }\n     }\n }\n "}]}