{"sha": "544b06d455a067ab54a850e34bdc7794f23c6734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGIwNmQ0NTVhMDY3YWI1NGE4NTBlMzRiZGM3Nzk0ZjIzYzY3MzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T11:33:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T11:34:23Z"}, "message": "Add a MIR visitor", "tree": {"sha": "9720f33370e1e99c42e9132ef9053ed98d86ec44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9720f33370e1e99c42e9132ef9053ed98d86ec44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544b06d455a067ab54a850e34bdc7794f23c6734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544b06d455a067ab54a850e34bdc7794f23c6734", "html_url": "https://github.com/rust-lang/rust/commit/544b06d455a067ab54a850e34bdc7794f23c6734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544b06d455a067ab54a850e34bdc7794f23c6734/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84829d51d9aa8e2623dabd4dcd4935d22008cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84829d51d9aa8e2623dabd4dcd4935d22008cb5", "html_url": "https://github.com/rust-lang/rust/commit/e84829d51d9aa8e2623dabd4dcd4935d22008cb5"}], "stats": {"total": 240, "additions": 240, "deletions": 0}, "files": [{"sha": "ed5df21d911935daa99b6efddae4927f319180e6", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/544b06d455a067ab54a850e34bdc7794f23c6734/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b06d455a067ab54a850e34bdc7794f23c6734/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=544b06d455a067ab54a850e34bdc7794f23c6734", "patch": "@@ -35,4 +35,5 @@ mod hair;\n pub mod repr;\n mod graphviz;\n pub mod tcx;\n+pub mod visit;\n "}, {"sha": "b4d6075d0adb7a23d5f5cee5493c6a8e0506d6ee", "filename": "src/librustc_mir/visit.rs", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/544b06d455a067ab54a850e34bdc7794f23c6734/src%2Flibrustc_mir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b06d455a067ab54a850e34bdc7794f23c6734/src%2Flibrustc_mir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fvisit.rs?ref=544b06d455a067ab54a850e34bdc7794f23c6734", "patch": "@@ -0,0 +1,239 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::middle::ty::Region;\n+use repr::*;\n+\n+pub trait Visitor<'tcx> {\n+    // Override these, and call `self.super_xxx` to revert back to the\n+    // default behavior.\n+\n+    fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n+        self.super_mir(mir);\n+    }\n+\n+    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n+        self.super_basic_block_data(block, data);\n+    }\n+\n+    fn visit_statement(&mut self, block: BasicBlock, statement: &Statement<'tcx>) {\n+        self.super_statement(block, statement);\n+    }\n+\n+    fn visit_assign(&mut self, block: BasicBlock, lvalue: &Lvalue<'tcx>, rvalue: &Rvalue<'tcx>) {\n+        self.super_assign(block, lvalue, rvalue);\n+    }\n+\n+    fn visit_terminator(&mut self, block: BasicBlock, terminator: &Terminator<'tcx>) {\n+        self.super_terminator(block, terminator);\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>) {\n+        self.super_rvalue(rvalue);\n+    }\n+\n+    fn visit_operand(&mut self, operand: &Operand<'tcx>) {\n+        self.super_operand(operand);\n+    }\n+\n+    fn visit_lvalue(&mut self, lvalue: &Lvalue<'tcx>, context: LvalueContext) {\n+        self.super_lvalue(lvalue, context);\n+    }\n+\n+    fn visit_branch(&mut self, source: BasicBlock, target: BasicBlock) {\n+        self.super_branch(source, target);\n+    }\n+\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>) {\n+        self.super_constant(constant);\n+    }\n+\n+    // The `super_xxx` methods comprise the default behavior and are\n+    // not meant to be overidden.\n+\n+    fn super_mir(&mut self, mir: &Mir<'tcx>) {\n+        for block in mir.all_basic_blocks() {\n+            let data = mir.basic_block_data(block);\n+            self.visit_basic_block_data(block, data);\n+        }\n+    }\n+\n+    fn super_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n+        for statement in &data.statements {\n+            self.visit_statement(block, statement);\n+        }\n+        self.visit_terminator(block, &data.terminator);\n+    }\n+\n+    fn super_statement(&mut self, block: BasicBlock, statement: &Statement<'tcx>) {\n+        match statement.kind {\n+            StatementKind::Assign(ref lvalue, ref rvalue) => {\n+                self.visit_assign(block, lvalue, rvalue);\n+            }\n+            StatementKind::Drop(_, ref lvalue) => {\n+                self.visit_lvalue(lvalue, LvalueContext::Drop);\n+            }\n+        }\n+    }\n+\n+    fn super_assign(&mut self, _block: BasicBlock, lvalue: &Lvalue<'tcx>, rvalue: &Rvalue<'tcx>) {\n+        self.visit_lvalue(lvalue, LvalueContext::Store);\n+        self.visit_rvalue(rvalue);\n+    }\n+\n+    fn super_terminator(&mut self, block: BasicBlock, terminator: &Terminator<'tcx>) {\n+        match *terminator {\n+            Terminator::Goto { target } |\n+            Terminator::Panic { target } => {\n+                self.visit_branch(block, target);\n+            }\n+\n+            Terminator::If { ref cond, ref targets } => {\n+                self.visit_operand(cond);\n+                for &target in &targets[..] {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+\n+            Terminator::Switch { ref discr, adt_def: _, ref targets } => {\n+                self.visit_lvalue(discr, LvalueContext::Inspect);\n+                for &target in targets {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+\n+            Terminator::Diverge |\n+            Terminator::Return => {\n+            }\n+\n+            Terminator::Call { ref data, ref targets } => {\n+                self.visit_lvalue(&data.destination, LvalueContext::Store);\n+                self.visit_operand(&data.func);\n+                for arg in &data.args {\n+                    self.visit_operand(arg);\n+                }\n+                for &target in &targets[..] {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn super_rvalue(&mut self, rvalue: &Rvalue<'tcx>) {\n+        match *rvalue {\n+            Rvalue::Use(ref operand) => {\n+                self.visit_operand(operand);\n+            }\n+\n+            Rvalue::Repeat(ref value, ref len) => {\n+                self.visit_operand(value);\n+                self.visit_operand(len);\n+            }\n+\n+            Rvalue::Ref(r, bk, ref path) => {\n+                self.visit_lvalue(path, LvalueContext::Borrow {\n+                    region: r,\n+                    kind: bk\n+                });\n+            }\n+\n+            Rvalue::Len(ref path) => {\n+                self.visit_lvalue(path, LvalueContext::Inspect);\n+            }\n+\n+            Rvalue::Cast(_, ref operand, _) => {\n+                self.visit_operand(operand);\n+            }\n+\n+            Rvalue::BinaryOp(_, ref lhs, ref rhs) => {\n+                self.visit_operand(lhs);\n+                self.visit_operand(rhs);\n+            }\n+\n+            Rvalue::UnaryOp(_, ref op) => {\n+                self.visit_operand(op);\n+            }\n+\n+            Rvalue::Box(_) => {\n+            }\n+\n+            Rvalue::Aggregate(_, ref operands) => {\n+                for operand in operands {\n+                    self.visit_operand(operand);\n+                }\n+            }\n+\n+            Rvalue::Slice { ref input, from_start, from_end } => {\n+                self.visit_lvalue(input, LvalueContext::Slice {\n+                    from_start: from_start,\n+                    from_end: from_end,\n+                });\n+            }\n+\n+            Rvalue::InlineAsm(_) => {\n+            }\n+        }\n+    }\n+\n+    fn super_operand(&mut self, operand: &Operand<'tcx>) {\n+        match *operand {\n+            Operand::Consume(ref lvalue) => {\n+                self.visit_lvalue(lvalue, LvalueContext::Consume);\n+            }\n+            Operand::Constant(ref constant) => {\n+                self.visit_constant(constant);\n+            }\n+        }\n+    }\n+\n+    fn super_lvalue(&mut self, lvalue: &Lvalue<'tcx>, _context: LvalueContext) {\n+        match *lvalue {\n+            Lvalue::Var(_) |\n+            Lvalue::Temp(_) |\n+            Lvalue::Arg(_) |\n+            Lvalue::Static(_) |\n+            Lvalue::ReturnPointer => {\n+            }\n+            Lvalue::Projection(ref proj) => {\n+                self.visit_lvalue(&proj.base, LvalueContext::Projection);\n+            }\n+        }\n+    }\n+\n+    fn super_branch(&mut self, _source: BasicBlock, _target: BasicBlock) {\n+    }\n+\n+    fn super_constant(&mut self, _constant: &Constant<'tcx>) {\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub enum LvalueContext {\n+    // Appears as LHS of an assignment or as dest of a call\n+    Store,\n+\n+    // Being dropped\n+    Drop,\n+\n+    // Being inspected in some way, like loading a len\n+    Inspect,\n+\n+    // Being borrowed\n+    Borrow { region: Region, kind: BorrowKind },\n+\n+    // Being sliced -- this should be same as being borrowed, probably\n+    Slice { from_start: usize, from_end: usize },\n+\n+    // Used as base for another lvalue, e.g. `x` in `x.y`\n+    Projection,\n+\n+    // Consumed as part of an operand\n+    Consume,\n+}"}]}