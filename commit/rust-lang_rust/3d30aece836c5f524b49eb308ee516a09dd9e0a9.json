{"sha": "3d30aece836c5f524b49eb308ee516a09dd9e0a9", "node_id": "C_kwDOAAsO6NoAKDNkMzBhZWNlODM2YzVmNTI0YjQ5ZWIzMDhlZTUxNmEwOWRkOWUwYTk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T16:11:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T17:37:37Z"}, "message": "clippy: cargo-miri", "tree": {"sha": "f6e79cc23fecfbf7f7a2b77058dcb192bf24e94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e79cc23fecfbf7f7a2b77058dcb192bf24e94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d30aece836c5f524b49eb308ee516a09dd9e0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d30aece836c5f524b49eb308ee516a09dd9e0a9", "html_url": "https://github.com/rust-lang/rust/commit/3d30aece836c5f524b49eb308ee516a09dd9e0a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d30aece836c5f524b49eb308ee516a09dd9e0a9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "151b6b13e0766c23833038db0a5b99a09562af53", "url": "https://api.github.com/repos/rust-lang/rust/commits/151b6b13e0766c23833038db0a5b99a09562af53", "html_url": "https://github.com/rust-lang/rust/commit/151b6b13e0766c23833038db0a5b99a09562af53"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "ba885d307a85f630b2e465ccbc88609025a28a46", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3d30aece836c5f524b49eb308ee516a09dd9e0a9/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d30aece836c5f524b49eb308ee516a09dd9e0a9/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=3d30aece836c5f524b49eb308ee516a09dd9e0a9", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::useless_format, clippy::derive_partial_eq_without_eq)]\n+\n mod version;\n \n use std::env;\n@@ -96,6 +98,9 @@ fn show_version() {\n     // Only use `option_env` on vergen variables to ensure the build succeeds\n     // when vergen failed to find the git info.\n     if let Some(sha) = option_env!(\"VERGEN_GIT_SHA_SHORT\") {\n+        // This `unwrap` can never fail because if VERGEN_GIT_SHA_SHORT exists, then so does\n+        // VERGEN_GIT_COMMIT_DATE.\n+        #[allow(clippy::option_env_unwrap)]\n         write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap())\n             .unwrap();\n     }\n@@ -135,16 +140,14 @@ impl<I: Iterator<Item = String>> Iterator for ArgSplitFlagValue<'_, I> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let arg = self.args.next()?;\n-        if arg.starts_with(self.name) {\n+        if let Some(suffix) = arg.strip_prefix(self.name) {\n             // Strip leading `name`.\n-            let suffix = &arg[self.name.len()..];\n             if suffix.is_empty() {\n                 // This argument is exactly `name`; the next one is the value.\n                 return self.args.next().map(Ok);\n-            } else if suffix.starts_with('=') {\n+            } else if let Some(suffix) = suffix.strip_prefix('=') {\n                 // This argument is `name=value`; get the value.\n-                // Strip leading `=`.\n-                return Some(Ok(suffix[1..].to_owned()));\n+                return Some(Ok(suffix.to_owned()));\n             }\n         }\n         Some(Err(arg))\n@@ -255,7 +258,7 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n     let line = out\n         .stderr\n         .lines()\n-        .nth(0)\n+        .next()\n         .expect(\"malformed `xargo --version` output: not at least one line\")\n         .expect(\"malformed `xargo --version` output: error reading first line\");\n     let (name, version) = {\n@@ -285,7 +288,7 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n         .expect(\"malformed `xargo --version` output: not a patch version piece\")\n         .parse()\n         .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n-    if !version_pieces.next().is_none() {\n+    if version_pieces.next().is_some() {\n         panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n     }\n     Some((major, minor, patch))\n@@ -311,7 +314,7 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n         println!(\"Running `{:?}` to {}.\", cmd, text);\n     }\n \n-    if cmd.status().expect(&format!(\"failed to execute {:?}\", cmd)).success().not() {\n+    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {:?}\", cmd)).success().not() {\n         show_error(format!(\"failed to {}\", text));\n     }\n }\n@@ -499,10 +502,11 @@ fn get_cargo_metadata() -> Metadata {\n     for arg in ArgSplitFlagValue::new(\n         env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n         config_flag,\n-    ) {\n-        if let Ok(config) = arg {\n-            cmd.arg(config_flag).arg(config);\n-        }\n+    )\n+    // Only look at `Ok`\n+    .flatten()\n+    {\n+        cmd.arg(config_flag).arg(arg);\n     }\n     let mut child = cmd\n         .stdin(process::Stdio::null())\n@@ -524,11 +528,11 @@ fn get_cargo_metadata() -> Metadata {\n /// Additionally, somewhere between cargo metadata and TyCtxt, '-' gets replaced with '_' so we\n /// make that same transformation here.\n fn local_crates(metadata: &Metadata) -> String {\n-    assert!(metadata.workspace_members.len() > 0);\n+    assert!(!metadata.workspace_members.is_empty());\n     let mut local_crates = String::new();\n     for member in &metadata.workspace_members {\n-        let name = member.split(\" \").nth(0).unwrap();\n-        let name = name.replace(\"-\", \"_\");\n+        let name = member.split(' ').next().unwrap();\n+        let name = name.replace('-', \"_\");\n         local_crates.push_str(&name);\n         local_crates.push(',');\n     }\n@@ -708,7 +712,7 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n                 get_arg_flag_value(\"--crate-name\").unwrap(),\n                 // This is technically a `-C` flag but the prefix seems unique enough...\n                 // (and cargo passes this before the filename so it should be unique)\n-                get_arg_flag_value(\"extra-filename\").unwrap_or(String::new()),\n+                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n                 suffix,\n             ));\n             path\n@@ -808,11 +812,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n         while let Some(arg) = args.next() {\n-            if arg.starts_with(emit_flag) {\n+            if let Some(val) = arg.strip_prefix(emit_flag) {\n                 // Patch this argument. First, extract its value.\n-                let val = &arg[emit_flag.len()..];\n-                assert!(val.starts_with(\"=\"), \"`cargo` should pass `--emit=X` as one argument\");\n-                let val = &val[1..];\n+                let val =\n+                    val.strip_prefix('=').expect(\"`cargo` should pass `--emit=X` as one argument\");\n                 let mut val: Vec<_> = val.split(',').collect();\n                 // Now make sure \"link\" is not in there, but \"metadata\" is.\n                 if let Some(i) = val.iter().position(|&s| s == \"link\") {\n@@ -937,12 +940,10 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     while let Some(arg) = args.next() {\n         if arg == \"--extern\" {\n             forward_patched_extern_arg(&mut args, &mut cmd);\n-        } else if arg.starts_with(error_format_flag) {\n-            let suffix = &arg[error_format_flag.len()..];\n+        } else if let Some(suffix) = arg.strip_prefix(error_format_flag) {\n             assert!(suffix.starts_with('='));\n             // Drop this argument.\n-        } else if arg.starts_with(json_flag) {\n-            let suffix = &arg[json_flag.len()..];\n+        } else if let Some(suffix) = arg.strip_prefix(json_flag) {\n             assert!(suffix.starts_with('='));\n             // Drop this argument.\n         } else {"}]}