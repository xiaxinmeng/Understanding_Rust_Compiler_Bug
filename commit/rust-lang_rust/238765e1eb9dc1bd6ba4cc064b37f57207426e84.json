{"sha": "238765e1eb9dc1bd6ba4cc064b37f57207426e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODc2NWUxZWI5ZGMxYmQ2YmE0Y2MwNjRiMzdmNTcyMDc0MjZlODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T01:41:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T01:41:22Z"}, "message": "Auto merge of #27103 - wthrowe:doc_format, r=alexcrichton\n\nThis fixes a couple of bugs visible on https://doc.rust-lang.org/nightly/std/marker/trait.Sync.html .  For example:\r\n* `impl<T> Sync for *const T` should read `impl<T> !Sync for *const T`\r\n* `impl<T> !Sync for Weak<T>` should read `impl<T> !Sync for Weak<T> where T: ?Sized`\r\n\r\nThis does change a struct in librustdoc and it seems that almost everything there is marked public, so if librustdoc has stability guarantees that could be a problem.  If it is, I'll find a way to rework the change to avoid modifying public structures.", "tree": {"sha": "19cc1495e7664218d59000d0dd4c79dd5514f04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19cc1495e7664218d59000d0dd4c79dd5514f04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238765e1eb9dc1bd6ba4cc064b37f57207426e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238765e1eb9dc1bd6ba4cc064b37f57207426e84", "html_url": "https://github.com/rust-lang/rust/commit/238765e1eb9dc1bd6ba4cc064b37f57207426e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238765e1eb9dc1bd6ba4cc064b37f57207426e84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118a5c4c342883606fd96b121d741b133caa0347", "url": "https://api.github.com/repos/rust-lang/rust/commits/118a5c4c342883606fd96b121d741b133caa0347", "html_url": "https://github.com/rust-lang/rust/commit/118a5c4c342883606fd96b121d741b133caa0347"}, {"sha": "a3e78f4151ee23ad3175402e81247302619c1df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e78f4151ee23ad3175402e81247302619c1df7", "html_url": "https://github.com/rust-lang/rust/commit/a3e78f4151ee23ad3175402e81247302619c1df7"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "2255a2e969f1a362df296884997b5d797c9a76ac", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=238765e1eb9dc1bd6ba4cc064b37f57207426e84", "patch": "@@ -540,6 +540,19 @@ impl fmt::Display for clean::Type {\n     }\n }\n \n+impl fmt::Display for clean::Impl {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"impl{} \", self.generics));\n+        if let Some(ref ty) = self.trait_ {\n+            try!(write!(f, \"{}{} for \",\n+                        if self.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n+                        *ty));\n+        }\n+        try!(write!(f, \"{}{}\", self.for_, WhereClause(&self.generics)));\n+        Ok(())\n+    }\n+}\n+\n impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {"}, {"sha": "57c0db8f96e665a8c1b0afc6bb8bee8bfcc12e97", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=238765e1eb9dc1bd6ba4cc064b37f57207426e84", "patch": "@@ -118,11 +118,8 @@ pub enum ExternalLocation {\n /// Metadata about an implementor of a trait.\n pub struct Implementor {\n     pub def_id: ast::DefId,\n-    pub generics: clean::Generics,\n-    pub trait_: clean::Type,\n-    pub for_: clean::Type,\n     pub stability: Option<clean::Stability>,\n-    pub polarity: Option<clean::ImplPolarity>,\n+    pub impl_: clean::Impl,\n }\n \n /// Metadata about implementations for a type.\n@@ -644,10 +641,7 @@ fn write_shared(cx: &Context,\n             // going on). If they're in different crates then the crate defining\n             // the trait will be interested in our implementation.\n             if imp.def_id.krate == did.krate { continue }\n-            try!(write!(&mut f, r#\"\"impl{} {}{} for {}\",\"#,\n-                        imp.generics,\n-                        if imp.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n-                        imp.trait_, imp.for_));\n+            try!(write!(&mut f, r#\"\"{}\",\"#, imp.impl_));\n         }\n         try!(writeln!(&mut f, r\"];\"));\n         try!(writeln!(&mut f, \"{}\", r\"\n@@ -888,11 +882,8 @@ impl DocFolder for Cache {\n                 Some(clean::ResolvedPath{ did, .. }) => {\n                     self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n                         def_id: item.def_id,\n-                        generics: i.generics.clone(),\n-                        trait_: i.trait_.as_ref().unwrap().clone(),\n-                        for_: i.for_.clone(),\n                         stability: item.stability.clone(),\n-                        polarity: i.polarity.clone(),\n+                        impl_: i.clone(),\n                     });\n                 }\n                 Some(..) | None => {}\n@@ -1910,8 +1901,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     match cache.implementors.get(&it.def_id) {\n         Some(implementors) => {\n             for i in implementors {\n-                try!(writeln!(w, \"<li><code>impl{} {} for {}{}</code></li>\",\n-                              i.generics, i.trait_, i.for_, WhereClause(&i.generics)));\n+                try!(writeln!(w, \"<li><code>{}</code></li>\", i.impl_));\n             }\n         }\n         None => {}\n@@ -2335,16 +2325,7 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                render_header: bool) -> fmt::Result {\n     if render_header {\n-        try!(write!(w, \"<h3 class='impl'><code>impl{} \",\n-                    i.impl_.generics));\n-        if let Some(clean::ImplPolarity::Negative) = i.impl_.polarity {\n-            try!(write!(w, \"!\"));\n-        }\n-        if let Some(ref ty) = i.impl_.trait_ {\n-            try!(write!(w, \"{} for \", *ty));\n-        }\n-        try!(write!(w, \"{}{}</code></h3>\", i.impl_.for_,\n-                    WhereClause(&i.impl_.generics)));\n+        try!(write!(w, \"<h3 class='impl'><code>{}</code></h3>\", i.impl_));\n         if let Some(ref dox) = i.dox {\n             try!(write!(w, \"<div class='docblock'>{}</div>\", Markdown(dox)));\n         }"}, {"sha": "6e8f80c8f5f9f1a2af5211223891e191dce930c4", "filename": "src/test/auxiliary/rustdoc-impl-parts-crosscrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs?ref=238765e1eb9dc1bd6ba4cc064b37f57207426e84", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+pub trait AnOibit {}\n+\n+impl AnOibit for .. {}"}, {"sha": "5fa2e03e0a88419519d8b931dbc6393161f45534", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=238765e1eb9dc1bd6ba4cc064b37f57207426e84", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-impl-parts-crosscrate.rs\n+// ignore-cross-compile\n+\n+#![feature(optin_builtin_traits)]\n+\n+extern crate rustdoc_impl_parts_crosscrate;\n+\n+pub struct Bar<T> { t: T }\n+\n+// The output file is html embeded in javascript, so the html tags\n+// aren't stripped by the processing script and we can't check for the\n+// full impl string.  Instead, just make sure something from each part\n+// is mentioned.\n+\n+// @has implementors/rustdoc_impl_parts_crosscrate/trait.AnOibit.js Bar\n+// @has - Send\n+// @has - !AnOibit\n+// @has - Copy\n+impl<T: Send> !rustdoc_impl_parts_crosscrate::AnOibit for Bar<T>\n+    where T: Copy {}"}, {"sha": "89c5e60e3431430611ffd6c0e49bff211575b6b8", "filename": "src/test/rustdoc/impl-parts.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238765e1eb9dc1bd6ba4cc064b37f57207426e84/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=238765e1eb9dc1bd6ba4cc064b37f57207426e84", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+pub trait AnOibit {}\n+\n+impl AnOibit for .. {}\n+\n+pub struct Foo<T> { field: T }\n+\n+// @has impl_parts/struct.Foo.html '//*[@class=\"impl\"]//code' \\\n+//     \"impl<T: Clone> !AnOibit for Foo<T> where T: Sync\"\n+// @has impl_parts/trait.AnOibit.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<T: Clone> !AnOibit for Foo<T> where T: Sync\"\n+impl<T: Clone> !AnOibit for Foo<T> where T: Sync {}"}]}