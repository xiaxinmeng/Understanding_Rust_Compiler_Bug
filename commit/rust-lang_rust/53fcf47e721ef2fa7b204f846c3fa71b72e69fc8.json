{"sha": "53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZmNmNDdlNzIxZWYyZmE3YjIwNGY4NDZjM2ZhNzFiNzJlNjlmYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T09:17:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T09:17:03Z"}, "message": "Auto merge of #1099 - RalfJung:os_str, r=RalfJung\n\ntweak and use OsStr interfaces", "tree": {"sha": "d78ab0a9ad1be1367be7eaaad4483be86caf35f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78ab0a9ad1be1367be7eaaad4483be86caf35f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "html_url": "https://github.com/rust-lang/rust/commit/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a", "html_url": "https://github.com/rust-lang/rust/commit/6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a"}, {"sha": "01f060b6da675d800d9874e5256f4a069e58d442", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f060b6da675d800d9874e5256f4a069e58d442", "html_url": "https://github.com/rust-lang/rust/commit/01f060b6da675d800d9874e5256f4a069e58d442"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "6f7f0ba329cec5092466be8c53e41d6e06ed9ea4", "filename": "src/eval.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "patch": "@@ -1,5 +1,7 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n+use std::ffi::OsStr;\n+\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n@@ -75,26 +77,15 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let argc = Scalar::from_uint(config.args.len() as u128, ecx.pointer_size());\n     // Third argument (`argv`): created from `config.args`.\n     let argv = {\n-        // For Windows, construct a command string with all the aguments (before we take apart `config.args`).\n-        let mut cmd = String::new();\n+        // Put each argument in memory, collect pointers.\n+        let mut argvs = Vec::<Scalar<Tag>>::new();\n         for arg in config.args.iter() {\n-            if !cmd.is_empty() {\n-                cmd.push(' ');\n-            }\n-            cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n-        }\n-        // Don't forget `0` terminator.\n-        cmd.push(std::char::from_u32(0).unwrap());\n-        // Collect the pointers to the individual strings.\n-        let mut argvs = Vec::<Pointer<Tag>>::new();\n-        for arg in config.args {\n-            // Add `0` terminator.\n-            let mut arg = arg.into_bytes();\n-            arg.push(0);\n-            argvs.push(\n-                ecx.memory\n-                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Env.into()),\n-            );\n+            // Make space for `0` terminator.\n+            let size = arg.len() as u64 + 1;\n+            let arg_type = tcx.mk_array(tcx.types.u8, size);\n+            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Env.into());\n+            ecx.write_os_str_to_c_string(OsStr::new(arg), arg_place.ptr, size)?;\n+            argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout = ecx.layout_of(\n@@ -107,7 +98,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         }\n         ecx.memory\n             .mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n-        // A pointer to that place is the argument.\n+        // A pointer to that place is the 3rd argument for main.\n         let argv = argvs_place.ptr;\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n@@ -127,6 +118,17 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         }\n         // Store command line as UTF-16 for Windows `GetCommandLineW`.\n         {\n+            // Construct a command string with all the aguments.\n+            let mut cmd = String::new();\n+            for arg in config.args.iter() {\n+                if !cmd.is_empty() {\n+                    cmd.push(' ');\n+                }\n+                cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n+            }\n+            // Don't forget `0` terminator.\n+            cmd.push(std::char::from_u32(0).unwrap());\n+\n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n             let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());"}, {"sha": "9f75c9b7fbe101cb3a8da79742c9cdc19f81c244", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "patch": "@@ -1,5 +1,5 @@\n use std::{mem, iter};\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsStr;\n \n use syntax::source_map::DUMMY_SP;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -453,9 +453,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n-    fn read_os_string_from_c_string(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n-        let bytes = self.eval_context_mut().memory.read_c_str(scalar)?;\n-        Ok(bytes_to_os_str(bytes)?.into())\n+    fn read_os_string_from_c_string<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n+        where 'tcx: 'a, 'mir: 'a\n+    {\n+        let this = self.eval_context_ref();\n+        let bytes = this.memory.read_c_str(scalar)?;\n+        bytes_to_os_str(bytes)\n     }\n \n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n@@ -501,7 +504,7 @@ fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]>\n }\n \n #[cfg(not(target_os = \"unix\"))]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n+fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n     let s = std::str::from_utf8(bytes)\n         .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n     Ok(&OsStr::new(s))"}, {"sha": "55ac7f780fae79a02bf8b913aecd7ecd9df1d10e", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fcf47e721ef2fa7b204f846c3fa71b72e69fc8/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=53fcf47e721ef2fa7b204f846c3fa71b72e69fc8", "patch": "@@ -140,8 +140,8 @@ pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'tcx>>;\n \n /// A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'mir, 'tcx> {\n-    fn eval_context_ref(&self) -> &MiriEvalContext<'mir, 'tcx>;\n-    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'mir, 'tcx>;\n+    fn eval_context_ref<'a>(&'a self) -> &'a MiriEvalContext<'mir, 'tcx>;\n+    fn eval_context_mut<'a>(&'a mut self) -> &'a mut MiriEvalContext<'mir, 'tcx>;\n }\n impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {\n     #[inline(always)]"}]}