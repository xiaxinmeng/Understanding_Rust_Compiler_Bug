{"sha": "5407a69aa4a816fdfd9cf6f659643f78659c1f88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDdhNjlhYTRhODE2ZmRmZDljZjZmNjU5NjQzZjc4NjU5YzFmODg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T22:54:48Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T22:54:59Z"}, "message": "Remove src field from ExternCrate", "tree": {"sha": "5c90cca0927ae80d70082e045ebdd9696920d5b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c90cca0927ae80d70082e045ebdd9696920d5b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5407a69aa4a816fdfd9cf6f659643f78659c1f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5407a69aa4a816fdfd9cf6f659643f78659c1f88", "html_url": "https://github.com/rust-lang/rust/commit/5407a69aa4a816fdfd9cf6f659643f78659c1f88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5407a69aa4a816fdfd9cf6f659643f78659c1f88/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c15cdbe070f49d708f34750df2632e38bd4846", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c15cdbe070f49d708f34750df2632e38bd4846", "html_url": "https://github.com/rust-lang/rust/commit/25c15cdbe070f49d708f34750df2632e38bd4846"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "1b8c82b8323f5ec58365a43f422d26af56144741", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5407a69aa4a816fdfd9cf6f659643f78659c1f88", "patch": "@@ -86,8 +86,6 @@ impl Clean<ExternalCrate> for CrateNum {\n     fn clean(&self, cx: &mut DocContext<'_>) -> ExternalCrate {\n         let tcx = cx.tcx;\n         let root = DefId { krate: *self, index: CRATE_DEF_INDEX };\n-        let krate_span = tcx.def_span(root);\n-        let krate_src = cx.sess().source_map().span_to_filename(krate_span);\n \n         // Collect all inner modules which are tagged as implementations of\n         // primitives.\n@@ -195,8 +193,8 @@ impl Clean<ExternalCrate> for CrateNum {\n         };\n \n         ExternalCrate {\n+            crate_num: *self,\n             name: tcx.crate_name(*self),\n-            src: krate_src,\n             attrs: tcx.get_attrs(root).clean(cx),\n             primitives,\n             keywords,"}, {"sha": "b24d441f0f85c6dfe6999f9438f58a9877f61faf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5407a69aa4a816fdfd9cf6f659643f78659c1f88", "patch": "@@ -72,13 +72,21 @@ crate struct TraitWithExtraInfo {\n \n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n+    crate crate_num: CrateNum,\n     crate name: Symbol,\n-    crate src: FileName,\n     crate attrs: Attributes,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     crate keywords: ThinVec<(DefId, Symbol)>,\n }\n \n+impl ExternalCrate {\n+    crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n+        let root = DefId { krate: self.crate_num, index: rustc_hir::def_id::CRATE_DEF_INDEX };\n+        let krate_span = tcx.def_span(root);\n+        tcx.sess.source_map().span_to_filename(krate_span)\n+    }\n+}\n+\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset."}, {"sha": "7d058f9e92c60944463016ab5491882e0873c619", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5407a69aa4a816fdfd9cf6f659643f78659c1f88", "patch": "@@ -54,7 +54,9 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         _ => unreachable!(),\n     }\n \n-    let ExternalCrate { name, src, primitives, keywords, .. } = LOCAL_CRATE.clean(cx);\n+    let local_crate = LOCAL_CRATE.clean(cx);\n+    let src = local_crate.src(cx.tcx);\n+    let ExternalCrate { name, primitives, keywords, .. } = local_crate;\n     {\n         let m = match *module.kind {\n             ItemKind::ModuleItem(ref mut m) => m,"}, {"sha": "5766ed7497d7f387e6f45b7dc68e093c883b42c3", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407a69aa4a816fdfd9cf6f659643f78659c1f88/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5407a69aa4a816fdfd9cf6f659643f78659c1f88", "patch": "@@ -155,7 +155,7 @@ impl Cache {\n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n         for &(n, ref e) in &krate.externs {\n-            let src_root = match e.src {\n+            let src_root = match e.src(tcx) {\n                 FileName::Real(ref p) => match p.local_path().parent() {\n                     Some(p) => p.to_path_buf(),\n                     None => PathBuf::new(),"}]}