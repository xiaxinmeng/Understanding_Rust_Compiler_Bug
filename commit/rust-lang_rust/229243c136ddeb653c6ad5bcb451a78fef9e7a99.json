{"sha": "229243c136ddeb653c6ad5bcb451a78fef9e7a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTI0M2MxMzZkZGViNjUzYzZhZDViY2I0NTFhNzhmZWY5ZTdhOTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:01Z"}, "message": "rollup merge of #21418: Aatch/assume-refcount\n\nThe reference count can never be 0, unless we're about to drop the data\ncompletely. Using the `assume` intrinsic allows us to inform LLVM about\nthat invariant, meaning it can avoid unnecessary drops.\n\n---\n\nBefore and after IR: https://gist.github.com/Aatch/3786d20df2edaad6a0e8\n\nGenerated from the example in #13018\n\nFixes #13018", "tree": {"sha": "ef3353036fa9f4edc604aa9099f2964f8d3cfa8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3353036fa9f4edc604aa9099f2964f8d3cfa8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/229243c136ddeb653c6ad5bcb451a78fef9e7a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/229243c136ddeb653c6ad5bcb451a78fef9e7a99", "html_url": "https://github.com/rust-lang/rust/commit/229243c136ddeb653c6ad5bcb451a78fef9e7a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/229243c136ddeb653c6ad5bcb451a78fef9e7a99/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "html_url": "https://github.com/rust-lang/rust/commit/a6780d8c6be311cd9a2e0cdda726469a04d21a9c"}, {"sha": "a7525bc4c8eb8507a5c248d29286e77133217cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7525bc4c8eb8507a5c248d29286e77133217cf3", "html_url": "https://github.com/rust-lang/rust/commit/a7525bc4c8eb8507a5c248d29286e77133217cf3"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "e651e375e3d5c69cfef8f20e436ea93dafb59689", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/229243c136ddeb653c6ad5bcb451a78fef9e7a99/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229243c136ddeb653c6ad5bcb451a78fef9e7a99/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=229243c136ddeb653c6ad5bcb451a78fef9e7a99", "patch": "@@ -160,6 +160,7 @@ use core::option::Option::{Some, None};\n use core::ptr::{self, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n+use core::intrinsics::assume;\n \n use heap::deallocate;\n \n@@ -905,10 +906,24 @@ trait RcBoxPtr<T> {\n     fn strong(&self) -> uint { self.inner().strong.get() }\n \n     #[inline]\n-    fn inc_strong(&self) { self.inner().strong.set(self.strong() + 1); }\n+    fn inc_strong(&self) {\n+        let strong = self.strong();\n+        // The reference count is always at least one unless we're about to drop the type\n+        // This allows the bulk of the destructor to be omitted in cases where we know that\n+        // the reference count must be > 0.\n+        unsafe { assume(strong > 0); }\n+        self.inner().strong.set(strong + 1);\n+    }\n \n     #[inline]\n-    fn dec_strong(&self) { self.inner().strong.set(self.strong() - 1); }\n+    fn dec_strong(&self) {\n+        let strong = self.strong();\n+        // The reference count is always at least one unless we're about to drop the type\n+        // This allows the bulk of the destructor to be omitted in cases where we know that\n+        // the reference count must be > 0\n+        unsafe { assume(strong > 0); }\n+        self.inner().strong.set(strong - 1);\n+    }\n \n     #[inline]\n     fn weak(&self) -> uint { self.inner().weak.get() }\n@@ -922,12 +937,30 @@ trait RcBoxPtr<T> {\n \n impl<T> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            assume(!self._ptr.is_null());\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n impl<T> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            assume(!self._ptr.is_null());\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}