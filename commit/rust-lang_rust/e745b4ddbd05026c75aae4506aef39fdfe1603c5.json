{"sha": "e745b4ddbd05026c75aae4506aef39fdfe1603c5", "node_id": "C_kwDOAAsO6NoAKGU3NDViNGRkYmQwNTAyNmM3NWFhZTQ1MDZhZWYzOWZkZmUxNjAzYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T19:37:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T19:37:43Z"}, "message": "Auto merge of #95767 - oli-obk:all_your_generics_belong_to_the_definitions, r=compiler-errors\n\nReport opaque type mismatches directly during borrowck of the function instead of within the `type_of` query.\n\nThis allows us to only store a single hidden type per opaque type instead of having to store one per set of substitutions.\n\nr? `@compiler-errors`\n\nThis does not affect diagnostics, because the diagnostic messages are exactly the same.", "tree": {"sha": "45a85dad2e61466b335770f089dbcddd6ef274f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a85dad2e61466b335770f089dbcddd6ef274f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e745b4ddbd05026c75aae4506aef39fdfe1603c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e745b4ddbd05026c75aae4506aef39fdfe1603c5", "html_url": "https://github.com/rust-lang/rust/commit/e745b4ddbd05026c75aae4506aef39fdfe1603c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e745b4ddbd05026c75aae4506aef39fdfe1603c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd38eea722c1f6f970a314435533e91cc2c14ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd38eea722c1f6f970a314435533e91cc2c14ffb", "html_url": "https://github.com/rust-lang/rust/commit/dd38eea722c1f6f970a314435533e91cc2c14ffb"}, {"sha": "7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "html_url": "https://github.com/rust-lang/rust/commit/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "927eb080b2008a687cbcc15143c694b2e0d78b57", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=e745b4ddbd05026c75aae4506aef39fdfe1603c5", "patch": "@@ -1,14 +1,15 @@\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Region, RegionVid};\n+use rustc_middle::ty::{self, OpaqueHiddenType, Region, RegionVid};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -43,7 +44,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    pub opaque_type_values: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -372,7 +373,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    opaque_type_values: &VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "fa07c4fa9491dfb7952c33c6d1feaa21373cc5f7", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=e745b4ddbd05026c75aae4506aef39fdfe1603c5", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -54,8 +55,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n-    ) -> VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> {\n-        let mut result: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> = VecMap::new();\n+    ) -> VecMap<DefId, OpaqueHiddenType<'tcx>> {\n+        let mut result: VecMap<DefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n         for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n             let substs = opaque_type_key.substs;\n             debug!(?concrete_type, ?substs);\n@@ -124,21 +125,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // back to the opaque type definition. E.g. we may have `OpaqueType<X, Y>` mapped to `(X, Y)`\n             // and `OpaqueType<Y, X>` mapped to `(Y, X)`, and those are the same, but we only know that\n             // once we convert the generic parameters to those of the opaque type.\n-            if let Some(prev) = result.get_mut(&opaque_type_key) {\n+            if let Some(prev) = result.get_mut(&opaque_type_key.def_id) {\n                 if prev.ty != ty {\n-                    let mut err = infcx.tcx.sess.struct_span_err(\n-                        concrete_type.span,\n-                        &format!(\"hidden type `{}` differed from previous `{}`\", ty, prev.ty),\n-                    );\n-                    err.span_note(prev.span, \"previous hidden type bound here\");\n-                    err.emit();\n+                    if !ty.references_error() {\n+                        prev.report_mismatch(\n+                            &OpaqueHiddenType { ty, span: concrete_type.span },\n+                            infcx.tcx,\n+                        );\n+                    }\n                     prev.ty = infcx.tcx.ty_error();\n                 }\n                 // Pick a better span if there is one.\n                 // FIXME(oli-obk): collect multiple spans for better diagnostics down the road.\n                 prev.span = prev.span.substitute_dummy(concrete_type.span);\n             } else {\n-                result.insert(opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span });\n+                result.insert(\n+                    opaque_type_key.def_id,\n+                    OpaqueHiddenType { ty, span: concrete_type.span },\n+                );\n             }\n         }\n         result"}, {"sha": "4d4eed179ca9decda55a9e01beaab400cffa4f26", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e745b4ddbd05026c75aae4506aef39fdfe1603c5", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::OpaqueTypeKey;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n@@ -242,7 +241,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "6e3dc92a2332f271adb32d280c06b6836e5067eb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e745b4ddbd05026c75aae4506aef39fdfe1603c5", "patch": "@@ -1112,6 +1112,26 @@ pub struct OpaqueHiddenType<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+impl<'tcx> OpaqueHiddenType<'tcx> {\n+    pub fn report_mismatch(&self, other: &Self, tcx: TyCtxt<'tcx>) {\n+        // Found different concrete types for the opaque type.\n+        let mut err = tcx.sess.struct_span_err(\n+            other.span,\n+            \"concrete type differs from previous defining opaque type use\",\n+        );\n+        err.span_label(other.span, format!(\"expected `{}`, got `{}`\", self.ty, other.ty));\n+        if self.span == other.span {\n+            err.span_label(\n+                self.span,\n+                \"this expression supplies two conflicting concrete types for the same opaque type\",\n+            );\n+        } else {\n+            err.span_note(self.span, \"previous use here\");\n+        }\n+        err.emit();\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// \"Universes\" are used during type- and trait-checking in the\n     /// presence of `for<..>` binders to control what sets of names are"}, {"sha": "785538ab0df3d621c3517d5094f06230968cbd33", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745b4ddbd05026c75aae4506aef39fdfe1603c5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e745b4ddbd05026c75aae4506aef39fdfe1603c5", "patch": "@@ -356,7 +356,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner)\n                         .concrete_opaque_types\n-                        .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .get(&def_id.to_def_id())\n                         .copied()\n                         .map(|concrete| concrete.ty)\n                         .unwrap_or_else(|| {\n@@ -591,31 +591,17 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for &(opaque_type_key, concrete_type) in concrete_opaque_types {\n-                if opaque_type_key.def_id != self.def_id {\n+            for &(def_id, concrete_type) in concrete_opaque_types {\n+                if def_id != self.def_id {\n                     // Ignore constraints for other opaque types.\n                     continue;\n                 }\n \n-                debug!(?concrete_type, ?opaque_type_key.substs, \"found constraint\");\n+                debug!(?concrete_type, \"found constraint\");\n \n                 if let Some(prev) = self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n-                        // Found different concrete types for the opaque type.\n-                        let mut err = self.tcx.sess.struct_span_err(\n-                            concrete_type.span,\n-                            \"concrete type differs from previous defining opaque type use\",\n-                        );\n-                        err.span_label(\n-                            concrete_type.span,\n-                            format!(\"expected `{}`, got `{}`\", prev.ty, concrete_type.ty),\n-                        );\n-                        if prev.span == concrete_type.span {\n-                            err.span_label(prev.span, \"this expression supplies two conflicting concrete types for the same opaque type\");\n-                        } else {\n-                            err.span_note(prev.span, \"previous use here\");\n-                        }\n-                        err.emit();\n+                        prev.report_mismatch(&concrete_type, self.tcx);\n                     }\n                 } else {\n                     self.found = Some(concrete_type);"}]}