{"sha": "c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMWM0NGFiYzAzYzUyYTBmZDhkZDU4ZmNjODBkNTcxY2I2OWU3MGU=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-11-09T04:35:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-22T22:43:18Z"}, "message": "std: add fs::mkdir(), rng.gen_str(), tempfile::mkdtemp()\n\nSigned-off-by: Elly Jones <elly@leptoquark.net>", "tree": {"sha": "1aca7bfc21b993a53375802fa64693eb7ccd7fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aca7bfc21b993a53375802fa64693eb7ccd7fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "html_url": "https://github.com/rust-lang/rust/commit/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a936f78d987debe7cb46a9ec13377cef76645cda", "url": "https://api.github.com/repos/rust-lang/rust/commits/a936f78d987debe7cb46a9ec13377cef76645cda", "html_url": "https://github.com/rust-lang/rust/commit/a936f78d987debe7cb46a9ec13377cef76645cda"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "b15ec23c5b712c5016cd556f47ce6bcec399b2fa", "filename": "src/lib/fs.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -4,6 +4,7 @@ Module: fs\n File system manipulation\n */\n \n+import os;\n import os::getcwd;\n import os_fs;\n \n@@ -115,6 +116,28 @@ fn file_is_dir(p: path) -> bool {\n     ret str::as_buf(p, {|buf| rustrt::rust_file_is_dir(buf) != 0 });\n }\n \n+/*\n+Function: make_dir\n+\n+Creates a directory at the specific path.\n+*/\n+fn make_dir(p: path, mode: int) -> bool {\n+    ret mkdir(p, mode);\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn mkdir(_p: path, _mode: int) -> bool {\n+        // FIXME: turn mode into something useful?\n+        let noctx = ptr::null<os::kernel32::LPSECURITY_ATTRIBUTES>();\n+        ret str::as_buf(_p, {|buf| os::kernel32::CreateDirectory(buf, noctx) });\n+    }\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    fn mkdir(_p: path, _mode: int) -> bool {\n+        ret str::as_buf(_p, {|buf| os::libc::mkdir(buf, _mode) == 0 });\n+    }\n+}\n+\n /*\n Function: list_dir\n "}, {"sha": "093fe542ca97afe52df6e948cdc7f6fd3045ae08", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -51,6 +51,7 @@ native mod libc {\n     fn pipe(buf: *mutable fd_t) -> c_int;\n     fn waitpid(pid: pid_t, &status: c_int, options: c_int) -> pid_t;\n     fn readlink(path: str::sbuf, buf: str::sbuf, bufsize: size_t) -> ssize_t;\n+    fn mkdir(path: str::sbuf, mode: int) -> int;\n }\n \n mod libc_constants {"}, {"sha": "e2209f15d2e91ca1992b4a0089c6becb83fb01b1", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -40,10 +40,11 @@ native mod libc {\n     type dirent;\n     fn readdir(d: dir) -> dirent;\n     fn getenv(n: str::sbuf) -> str::sbuf;\n-    fn setenv(n: str::sbuf, v: str::sbuf, overwrite: c_int) -> c_int;\n-    fn unsetenv(n: str::sbuf) -> c_int;\n-    fn pipe(buf: *mutable fd_t) -> c_int;\n-    fn waitpid(pid: pid_t, &status: c_int, options: c_int) -> pid_t;\n+    fn setenv(n: str::sbuf, v: str::sbuf, overwrite: int) -> int;\n+    fn unsetenv(n: str::sbuf) -> int;\n+    fn pipe(buf: *mutable int) -> int;\n+    fn waitpid(pid: int, &status: int, options: int) -> int;\n+    fn mkdir(s: str::sbuf, mode: int) -> int;\n }\n \n mod libc_constants {"}, {"sha": "0f8117e901a0d7b621e85b9ca9f9c2e514f525f4", "filename": "src/lib/rand.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frand.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -32,6 +32,13 @@ type rng = obj {\n     Return the next random float\n     */\n     fn next_float() -> float;\n+\n+    /*\n+    Method: gen_str\n+\n+    Return a random string composed of A-Z, a-z, 0-9.\n+    */\n+    fn gen_str(len: uint) -> str;\n };\n \n resource rand_res(c: rustrt::rctx) { rustrt::rand_free(c); }\n@@ -53,6 +60,19 @@ fn mk_rng() -> rng {\n           let scale = u32::max_value as float;\n           ret ((u1 / scale + u2) / scale + u3) / scale;\n         }\n+        fn gen_str(len: uint) -> str {\n+            let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n+                          \"abcdefghijklmnopqrstuvwxyz\" +\n+                          \"0123456789\";\n+            let s = \"\";\n+            let i = 0u;\n+            while (i < len) {\n+                let n = rustrt::rand_next(**c) as uint % str::char_len(charset);\n+                s = s + str::from_char(str::char_at(charset, n));\n+                i += 1u;\n+            }\n+            s\n+        }\n     }\n     ret rt_rng(@rand_res(rustrt::rand_new()));\n }"}, {"sha": "ac15964c6fa8b6438a1fd8ae54abd4fc7b5c7344", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -13,7 +13,7 @@ export ctypes, either, option, result, four, tri, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n export ebml, dbg, getopts, json, math, rand, sha1, term, time, unsafe;\n-export extfmt, test;\n+export extfmt, test, tempfile;\n // FIXME: generic_os and os_fs shouldn't be exported\n export generic_os, os, os_fs;\n \n@@ -79,6 +79,7 @@ mod json;\n mod math;\n mod rand;\n mod sha1;\n+mod tempfile;\n mod term;\n mod time;\n mod unsafe;"}, {"sha": "1d29169ecc4d38ed004cabf662d29a443b75df53", "filename": "src/lib/tempfile.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftempfile.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -0,0 +1,23 @@\n+/*\n+Module: tempfile\n+\n+Temporary files and directories\n+*/\n+\n+import fs;\n+import option;\n+import option::{none, some};\n+import rand;\n+\n+fn mkdtemp(prefix: str, suffix: str) -> option::t<str> {\n+    let r = rand::mk_rng();\n+    let i = 0u;\n+    while (i < 1000u) {\n+        let s = prefix + r.gen_str(16u) + suffix;\n+        if fs::make_dir(s, 0x1c0) {  // FIXME: u+rwx\n+            ret some(s);\n+        }\n+        i += 1u;\n+    }\n+    ret none;\n+}"}, {"sha": "6befe626817df74867dc1332c9ce9e00ab13e5e2", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11c44abc03c52a0fd8dd58fcc80d571cb69e70e/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=c11c44abc03c52a0fd8dd58fcc80d571cb69e70e", "patch": "@@ -41,15 +41,19 @@ mod libc_constants {\n type DWORD = u32;\n type HMODULE = uint;\n type LPTSTR = str::sbuf;\n+type LPCTSTR = str::sbuf;\n \n #[abi = \"stdcall\"]\n native mod kernel32 {\n+    type LPSECURITY_ATTRIBUTES;\n     fn GetEnvironmentVariableA(n: str::sbuf, v: str::sbuf, nsize: uint) ->\n        uint;\n     fn SetEnvironmentVariableA(n: str::sbuf, v: str::sbuf) -> int;\n     fn GetModuleFileNameA(hModule: HMODULE,\n                           lpFilename: LPTSTR,\n                           nSize: DWORD) -> DWORD;\n+    fn CreateDirectory(lpPathName: LPCTSTR,\n+                       lpSecurityAttributes: LPSECURITY_ATTRIBUTES) -> bool;\n }\n \n // FIXME turn into constants"}]}