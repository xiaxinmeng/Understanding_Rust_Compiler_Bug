{"sha": "931514cfb67d9e84c587bdeee82602d499c3b435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTUxNGNmYjY3ZDllODRjNTg3YmRlZWU4MjYwMmQ0OTljM2I0MzU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-02T21:02:22Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-02T21:02:22Z"}, "message": "Remove commented-out code and old comments that accidentally snuck in", "tree": {"sha": "236b13b9747c59187ea32c1bcd0eafbe2858ebf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236b13b9747c59187ea32c1bcd0eafbe2858ebf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931514cfb67d9e84c587bdeee82602d499c3b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931514cfb67d9e84c587bdeee82602d499c3b435", "html_url": "https://github.com/rust-lang/rust/commit/931514cfb67d9e84c587bdeee82602d499c3b435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931514cfb67d9e84c587bdeee82602d499c3b435/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4ef74c9bdd2179199c02d7cbe58266c849b057", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4ef74c9bdd2179199c02d7cbe58266c849b057", "html_url": "https://github.com/rust-lang/rust/commit/3d4ef74c9bdd2179199c02d7cbe58266c849b057"}], "stats": {"total": 48, "additions": 4, "deletions": 44}, "files": [{"sha": "f7bdeecb20c5a7ffa253c238c9ca9102b1c9925a", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=931514cfb67d9e84c587bdeee82602d499c3b435", "patch": "@@ -85,8 +85,7 @@ const tag_item_field: uint = 0x44u;\n const tag_class_mut: uint = 0x45u;\n \n const tag_region_param: uint = 0x46u;\n-const tag_mod_impl_use: uint = 0x47u;\n-const tag_mod_impl_iface: uint = 0x48u;\n+const tag_mod_impl_iface: uint = 0x47u;\n /*\n   iface items contain tag_item_iface_method elements,\n   impl items contain tag_item_impl_method elements, and classes\n@@ -95,7 +94,7 @@ const tag_mod_impl_iface: uint = 0x48u;\n   both, tag_item_iface_method and tag_item_impl_method have to be two\n   different tags.\n  */\n-const tag_item_impl_method: uint = 0x49u;\n+const tag_item_impl_method: uint = 0x48u;\n \n // used to encode crate_ctxt side tables\n enum astencode_tag { // Reserves 0x50 -- 0x6f"}, {"sha": "01b07265638bc7d820da7279acbe5736b39adc83", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=931514cfb67d9e84c587bdeee82602d499c3b435", "patch": "@@ -417,24 +417,8 @@ fn get_impls_for_mod(cdata: cmd, m_id: ast::node_id,\n     let mod_item = lookup_item(m_id, data);\n     let mut result = [];\n     ebml::tagged_docs(mod_item, tag_mod_impl) {|doc|\n-        /*\n-          Pair of an item did and an iface did.\n-          The second one is unneeded if the first id names\n-          an impl; disambiguates if it's a class\n-        */\n-        let did = parse_def_id(ebml::doc_data(ebml::get_doc(doc,\n-                                                      tag_mod_impl_use)));\n+        let did = parse_def_id(ebml::doc_data(doc));\n         let local_did = translate_def_id(cdata, did);\n-        /*\n-        // iface is optional\n-        let iface_did = option::map(ebml::maybe_get_doc(doc,\n-                                           tag_mod_impl_iface)) {|d|\n-                                     parse_def_id(ebml::doc_data(d))};\n-        option::iter(iface_did) {|x|\n-                let _local_iface_did = translate_def_id(cdata, x);\n-        };\n-        */\n-        // CONFUSED -- previous code is pointless\n           // The impl may be defined in a different crate. Ask the caller\n           // to give us the metadata\n         let impl_cdata = get_cdata(local_did.crate);\n@@ -444,8 +428,6 @@ fn get_impls_for_mod(cdata: cmd, m_id: ast::node_id,\n         if alt name { some(n) { n == nm } none { true } } {\n            let base_tps = item_ty_param_count(item);\n            result += [@{\n-                   // here, we need to... reconstruct the iface_ref?\n-                   // probz broken\n                 did: local_did, ident: nm,\n                 methods: item_impl_methods(impl_cdata, item, base_tps)\n             }];"}, {"sha": "5a3e43e778438f3c89befe0ba8c7d749290d0c34", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931514cfb67d9e84c587bdeee82602d499c3b435/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=931514cfb67d9e84c587bdeee82602d499c3b435", "patch": "@@ -372,8 +372,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n                 ebml_w.start_tag(tag_mod_impl);\n             /* If did stands for an iface\n                ref, we need to map it to its parent class */\n-                ebml_w.start_tag(tag_mod_impl_use);\n-                let iface_ty = alt ecx.ccx.tcx.items.get(i.did.node) {\n+                alt ecx.ccx.tcx.items.get(i.did.node) {\n                   ast_map::node_item(it@@{node: cl@item_class(*),_},_) {\n                     ebml_w.wr_str(def_to_str(local_def(it.id)));\n                     some(ty::lookup_item_type(ecx.ccx.tcx, i.did).ty)\n@@ -388,26 +387,6 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n                   }\n                 };\n                 ebml_w.end_tag();\n-\n-                /*\n-                /* Write the iface did if it exists */\n-                option::iter(iface_ty) {|i|\n-                alt ty::get(i).struct {\n-                  ty::ty_iface(did, tys) {\n-                    // FIXME: tys?\n-                      ebml_w.start_tag(tag_mod_impl_iface);\n-                     ebml_w.wr_str(def_to_str(did));\n-                     ebml_w.end_tag();\n-\n-                  }\n-                  t {\n-                      ecx.ccx.tcx.sess.bug(#fmt(\"Expected item to implement \\\n-                       an iface, but found %s\",\n-                       util::ppaux::ty_to_str(ecx.ccx.tcx, i)));\n-                  }\n-                }}\n-                */\n-                ebml_w.end_tag();\n             } // if\n             } // for\n       } // list::cons alt"}]}