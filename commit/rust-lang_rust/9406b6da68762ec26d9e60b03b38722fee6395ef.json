{"sha": "9406b6da68762ec26d9e60b03b38722fee6395ef", "node_id": "C_kwDOAAsO6NoAKDk0MDZiNmRhNjg3NjJlYzI2ZDllNjBiMDNiMzg3MjJmZWU2Mzk1ZWY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T17:58:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T17:58:14Z"}, "message": "fmt", "tree": {"sha": "7877b12fa8e002e456c624c30f312b09d9aea2a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7877b12fa8e002e456c624c30f312b09d9aea2a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9406b6da68762ec26d9e60b03b38722fee6395ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9406b6da68762ec26d9e60b03b38722fee6395ef", "html_url": "https://github.com/rust-lang/rust/commit/9406b6da68762ec26d9e60b03b38722fee6395ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9406b6da68762ec26d9e60b03b38722fee6395ef/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1d5a495718027ed28d20491223adc16f29cfc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1d5a495718027ed28d20491223adc16f29cfc5", "html_url": "https://github.com/rust-lang/rust/commit/0b1d5a495718027ed28d20491223adc16f29cfc5"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "8aeeb044d3c17c250b835806ea005cf8aa1bf207", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9406b6da68762ec26d9e60b03b38722fee6395ef/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9406b6da68762ec26d9e60b03b38722fee6395ef/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=9406b6da68762ec26d9e60b03b38722fee6395ef", "patch": "@@ -761,17 +761,19 @@ fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n             \"WARNING: Ignoring `RUSTC` environment variable; set `MIRI` if you want to control the binary used as the driver.\"\n         );\n     }\n-    // Build scripts (and also cargo: https://github.com/rust-lang/cargo/issues/10885) will invoke `rustc` even when `RUSTC_WRAPPER` is set.\n-    // To make sure everything is coherent, we want that to be the Miri driver, but acting as rustc, on the target level.\n-    // (Target, rather than host, is needed for cross-interpretation situations.) This is not a\n-    // perfect emulation of real rustc (it might be unable to produce binaries since the sysroot is\n-    // check-only), but it's as close as we can get, and it's good enough for autocfg.\n+    // Build scripts (and also cargo: https://github.com/rust-lang/cargo/issues/10885) will invoke\n+    // `rustc` even when `RUSTC_WRAPPER` is set. To make sure everything is coherent, we want that\n+    // to be the Miri driver, but acting as rustc, on the target level. (Target, rather than host,\n+    // is needed for cross-interpretation situations.) This is not a perfect emulation of real rustc\n+    // (it might be unable to produce binaries since the sysroot is check-only), but it's as close\n+    // as we can get, and it's good enough for autocfg.\n     //\n     // In `main`, we need the value of `RUSTC` to distinguish RUSTC_WRAPPER invocations from rustdoc\n     // or TARGET_RUNNER invocations, so we canonicalize it here to make it exceedingly unlikely that\n-    // there would be a collision with other invocations of cargo-miri (as rustdoc or as runner).\n-    // We explicitly do this even if RUSTC_STAGE is set, since for these builds we do *not* want the\n-    // bootstrap `rustc` thing in our way! Instead, we have MIRI_HOST_SYSROOT to use for host builds.\n+    // there would be a collision with other invocations of cargo-miri (as rustdoc or as runner). We\n+    // explicitly do this even if RUSTC_STAGE is set, since for these builds we do *not* want the\n+    // bootstrap `rustc` thing in our way! Instead, we have MIRI_HOST_SYSROOT to use for host\n+    // builds.\n     cmd.env(\"RUSTC\", &fs::canonicalize(find_miri()).unwrap());\n     cmd.env(\"MIRI_BE_RUSTC\", \"target\"); // we better remember to *unset* this in the other phases!\n \n@@ -850,7 +852,8 @@ fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     let verbose = std::env::var(\"MIRI_VERBOSE\")\n         .map_or(0, |verbose| verbose.parse().expect(\"verbosity flag must be an integer\"));\n     let target_crate = is_target_crate();\n-    let print = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\"); // whether this is cargo/xargo invoking rustc to get some infos\n+    // Determine whether this is cargo/xargo invoking rustc to get some infos.\n+    let info_query = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\");\n \n     let store_json = |info: CrateRunInfo| {\n         // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n@@ -872,7 +875,7 @@ fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n         info.store(&out_filename(\"\", \".exe\"));\n     };\n \n-    let runnable_crate = !print && is_runnable_crate();\n+    let runnable_crate = !info_query && is_runnable_crate();\n \n     if runnable_crate && target_crate {\n         assert!(\n@@ -934,7 +937,7 @@ fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     let mut emit_link_hack = false;\n     // Arguments are treated very differently depending on whether this crate is\n     // for interpretation by Miri, or for use by a build script / proc macro.\n-    if !print && target_crate {\n+    if !info_query && target_crate {\n         // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n         while let Some(arg) = args.next() {\n@@ -968,8 +971,9 @@ fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n     } else {\n-        // For host crates (but not when we are printing), we might still have to set the sysroot.\n-        if !print {\n+        // For host crates (but not when we are just printing some info),\n+        // we might still have to set the sysroot.\n+        if !info_query {\n             // When we're running `cargo-miri` from `x.py` we need to pass the sysroot explicitly\n             // due to bootstrap complications.\n             if let Some(sysroot) = std::env::var_os(\"MIRI_HOST_SYSROOT\") {\n@@ -990,7 +994,7 @@ fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     // Run it.\n     if verbose > 0 {\n         eprintln!(\n-            \"[cargo-miri rustc] target_crate={target_crate} runnable_crate={runnable_crate} print={print}\"\n+            \"[cargo-miri rustc] target_crate={target_crate} runnable_crate={runnable_crate} info_query={info_query}\"\n         );\n     }\n     debug_cmd(\"[cargo-miri rustc]\", verbose, &cmd);\n@@ -1030,7 +1034,9 @@ fn phase_runner(mut binary_args: impl Iterator<Item = String>, phase: RunnerPhas\n \n     let binary = binary_args.next().unwrap();\n     let file = File::open(&binary)\n-        .unwrap_or_else(|_| show_error(format!(\"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n+        .unwrap_or_else(|_| show_error(format!(\n+            \"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary\n+        )));\n     let file = BufReader::new(file);\n \n     let info = serde_json::from_reader(file).unwrap_or_else(|_| {"}]}