{"sha": "b039f0d1baa34b7d53117085438769cc3402e112", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzlmMGQxYmFhMzRiN2Q1MzExNzA4NTQzODc2OWNjMzQwMmUxMTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T09:44:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T09:44:46Z"}, "message": "Simplify", "tree": {"sha": "2e41f0f53b488a162c4e86b93de3b2b49eb7fdd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e41f0f53b488a162c4e86b93de3b2b49eb7fdd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b039f0d1baa34b7d53117085438769cc3402e112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b039f0d1baa34b7d53117085438769cc3402e112", "html_url": "https://github.com/rust-lang/rust/commit/b039f0d1baa34b7d53117085438769cc3402e112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b039f0d1baa34b7d53117085438769cc3402e112/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751b8792a2db3a744b22f5261d4136e671b14835", "url": "https://api.github.com/repos/rust-lang/rust/commits/751b8792a2db3a744b22f5261d4136e671b14835", "html_url": "https://github.com/rust-lang/rust/commit/751b8792a2db3a744b22f5261d4136e671b14835"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "7533bb319a5545ce2646a9642261d8dfa0abd778", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b039f0d1baa34b7d53117085438769cc3402e112/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b039f0d1baa34b7d53117085438769cc3402e112/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=b039f0d1baa34b7d53117085438769cc3402e112", "patch": "@@ -12,7 +12,6 @@ use parking_lot::RwLock;\n use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n-use stdx::format_to;\n \n use crate::{\n     config::Config,\n@@ -82,7 +81,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n-    workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n impl GlobalState {\n@@ -233,26 +232,6 @@ impl GlobalStateSnapshot {\n             ProjectWorkspace::Json { .. } => None,\n         })\n     }\n-\n-    pub(crate) fn status(&self) -> String {\n-        let mut buf = String::new();\n-        if self.workspaces.is_empty() {\n-            buf.push_str(\"no workspaces\\n\")\n-        } else {\n-            buf.push_str(\"workspaces:\\n\");\n-            for w in self.workspaces.iter() {\n-                format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n-            }\n-        }\n-        buf.push_str(\"\\nanalysis:\\n\");\n-        buf.push_str(\n-            &self\n-                .analysis\n-                .status()\n-                .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n-        );\n-        buf\n-    }\n }\n \n pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {"}, {"sha": "6c21f25fe42bbefc1b388a13764db667a2fc5f64", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b039f0d1baa34b7d53117085438769cc3402e112/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b039f0d1baa34b7d53117085438769cc3402e112/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b039f0d1baa34b7d53117085438769cc3402e112", "patch": "@@ -39,7 +39,20 @@ use crate::{\n \n pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n-    let mut buf = snap.status();\n+\n+    let mut buf = String::new();\n+    if snap.workspaces.is_empty() {\n+        buf.push_str(\"no workspaces\\n\")\n+    } else {\n+        buf.push_str(\"workspaces:\\n\");\n+        for w in snap.workspaces.iter() {\n+            format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n+        }\n+    }\n+    buf.push_str(\"\\nanalysis:\\n\");\n+    buf.push_str(\n+        &snap.analysis.status().unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n+    );\n     format_to!(buf, \"\\n\\nrequests:\\n\");\n     let requests = snap.latest_requests.read();\n     for (is_last, r) in requests.iter() {"}]}