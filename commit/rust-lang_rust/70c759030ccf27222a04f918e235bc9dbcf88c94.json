{"sha": "70c759030ccf27222a04f918e235bc9dbcf88c94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzc1OTAzMGNjZjI3MjIyYTA0ZjkxOGUyMzViYzlkYmNmODhjOTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T21:00:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T21:00:50Z"}, "message": "rustc: Alias fix part 2 -- Check that the aliasness of function parameters matches. Add a test case.", "tree": {"sha": "e8e0439b47606fe6500df7e9c3e455c4ef35a82c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e0439b47606fe6500df7e9c3e455c4ef35a82c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c759030ccf27222a04f918e235bc9dbcf88c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c759030ccf27222a04f918e235bc9dbcf88c94", "html_url": "https://github.com/rust-lang/rust/commit/70c759030ccf27222a04f918e235bc9dbcf88c94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c759030ccf27222a04f918e235bc9dbcf88c94/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b33de819ce723d40dec6552a3be8b7cfb2cf6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b33de819ce723d40dec6552a3be8b7cfb2cf6b", "html_url": "https://github.com/rust-lang/rust/commit/b2b33de819ce723d40dec6552a3be8b7cfb2cf6b"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "4a630af1b5b1a01b83bcd654f7bb92921f2e9521", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=70c759030ccf27222a04f918e235bc9dbcf88c94", "patch": "@@ -2098,14 +2098,17 @@ mod Unify {\n             auto expected_input = expected_inputs.(i);\n             auto actual_input = actual_inputs.(i);\n \n-            // This should be safe, I think?\n-            // FIXME: It's not. At all.\n+            // Unify the result modes. \"mo_either\" unifies with both modes.\n             auto result_mode;\n-            if (expected_input.mode == mo_alias ||\n-                    actual_input.mode == mo_alias) {\n-                result_mode = mo_alias;\n+            if (expected_input.mode == mo_either) {\n+                result_mode = actual_input.mode;\n+            } else if (actual_input.mode == mo_either) {\n+                result_mode = expected_input.mode;\n+            } else if (expected_input.mode != actual_input.mode) {\n+                ret fn_common_res_err(ures_err(terr_arg_count,\n+                                               expected, actual));\n             } else {\n-                result_mode = mo_val;\n+                result_mode = expected_input.mode;\n             }\n \n             auto result = unify_step(cx, actual_input.ty, expected_input.ty);"}, {"sha": "cdee187d0f58908bc6d7346d6ca111e809975a59", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=70c759030ccf27222a04f918e235bc9dbcf88c94", "patch": "@@ -1766,17 +1766,15 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     auto a_0 = check_expr(fcx, a);\n                     args_0 += vec(some[@ast.expr](a_0));\n \n-                    // FIXME: this breaks aliases. We need a ty_fn_arg.\n-                    auto arg_ty = rec(mode=mo_val,\n+                    auto arg_ty = rec(mode=mo_either,\n                                       ty=expr_ty(fcx.ccx.tcx, a_0));\n                     Vec.push[arg](arg_tys_0, arg_ty);\n                 }\n                 case (none[@ast.expr]) {\n                     args_0 += vec(none[@ast.expr]);\n \n-                    // FIXME: breaks aliases too?\n                     auto typ = next_ty_var(fcx.ccx);\n-                    Vec.push[arg](arg_tys_0, rec(mode=mo_val, ty=typ));\n+                    Vec.push[arg](arg_tys_0, rec(mode=mo_either, ty=typ));\n                 }\n             }\n         }"}, {"sha": "88b7d9385c3a0314575e6715f78f61afe7604720", "filename": "src/test/compile-fail/aliasness-mismatch.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c759030ccf27222a04f918e235bc9dbcf88c94/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs?ref=70c759030ccf27222a04f918e235bc9dbcf88c94", "patch": "@@ -0,0 +1,15 @@\n+// -*- rust -*-\n+// xfail-stage0\n+\n+// error-pattern: mismatched types\n+\n+fn f(&int x) { log_err x; }\n+fn h(int x) { log_err x; }\n+fn main() {\n+  let fn(int x) g = f;\n+  g(10);\n+  g = h;\n+  g(10);\n+}\n+\n+"}]}