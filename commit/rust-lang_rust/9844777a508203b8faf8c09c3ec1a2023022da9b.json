{"sha": "9844777a508203b8faf8c09c3ec1a2023022da9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDQ3NzdhNTA4MjAzYjhmYWY4YzA5YzNlYzFhMjAyMzAyMmRhOWI=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2017-10-20T12:59:55Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2017-10-30T23:09:23Z"}, "message": "typeck: suggest use of match_default_bindings feature\n\nFixes #45383.\nUpdates #42640.", "tree": {"sha": "47659cad6d3ec175930420fd1a77a83324023dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47659cad6d3ec175930420fd1a77a83324023dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9844777a508203b8faf8c09c3ec1a2023022da9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/uKQcsWiEQj1Z6uEHB6YzI4Xu4kFAln3sSMACgkQHB6YzI4X\nu4mbeQ//ZU5vEOIJJF8xxRSp/QYLtAnZZQXjVOb4i9PARoJ/+e1zNmFQ8KDFFMY2\nZi3tcgN9WO4gmu25EKqEINa6NQ3VtMuBJ9vavC4BUJ4vOO6tz+RPah4Pz71T0Rsw\nk8H7ASGjg/McGpyai4Q8mV16DmuL5vbSENqEMKt4bVsDP3PhQ4c5pWymYIMTYSAE\nkgknOdyAWGBpX1x4ECqudOguNplfhvwqm9q7mqKnKQarPocwaVTtBvGh40LUV9Is\nIRQP4wRtj/5C1H9uf5ToZFVmj50rw3ZHNZ/fqemg4eVSYDB9y8UF6tLrpzetqbt9\nOXb34bIJb9r/iE60N9IAYkND7MRZpLYAl0xBMWF2RC7zer3Le2ppEjd+4Hw4tysx\nqFPvUnnSEOwDjaPu9Ipmq+Gm8+xH48ITV/7gS64OwQ2RMRDYbWNqCKUuS95fgjfG\naYUec+iDiE0DEEAjESxzdk2l/XmnBBo9szn3H0dQHAjwBrSGH/SDiAfcg+tJrTaQ\nB4w7KPbwnbQxLxOTajmvPRCh6gfz/U7YNHgQqgmuQDH8CeZ2O5BMSe0aPhtAzLtu\nVt3PMbH3IDgvQzf5uGNP7dHyPPtU+TQhcPxcITSDuM2+1BYliDALgubkMIGA08AL\ni0mrvo6bNoDOLDbhelPLRvfdq9lRLC4lbFzkCWiQznrHv4YehMQ=\n=bxFe\n-----END PGP SIGNATURE-----", "payload": "tree 47659cad6d3ec175930420fd1a77a83324023dc6\nparent f0fe716dbcbf2363ab8f929325d32a17e51039d0\nauthor Tamir Duberstein <tamird@gmail.com> 1508504395 -0400\ncommitter Tamir Duberstein <tamird@gmail.com> 1509404963 -0400\n\ntypeck: suggest use of match_default_bindings feature\n\nFixes #45383.\nUpdates #42640.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9844777a508203b8faf8c09c3ec1a2023022da9b", "html_url": "https://github.com/rust-lang/rust/commit/9844777a508203b8faf8c09c3ec1a2023022da9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9844777a508203b8faf8c09c3ec1a2023022da9b/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fe716dbcbf2363ab8f929325d32a17e51039d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe716dbcbf2363ab8f929325d32a17e51039d0", "html_url": "https://github.com/rust-lang/rust/commit/f0fe716dbcbf2363ab8f929325d32a17e51039d0"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "e25f7d796689de5866d4d7eb40a67048a9b85f96", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -23,6 +23,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n use syntax::codemap::Spanned;\n+use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n@@ -68,7 +69,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::Binding(..) |\n             PatKind::Ref(..) => false,\n         };\n-        if is_non_ref_pat && tcx.sess.features.borrow().match_default_bindings {\n+        if is_non_ref_pat {\n             debug!(\"pattern is non reference pattern\");\n             let mut exp_ty = self.resolve_type_vars_with_obligations(&expected);\n \n@@ -113,10 +114,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             };\n             if pat_adjustments.len() > 0 {\n-                debug!(\"default binding mode is now {:?}\", def_bm);\n-                self.inh.tables.borrow_mut()\n-                    .pat_adjustments_mut()\n-                    .insert(pat.hir_id, pat_adjustments);\n+                if tcx.sess.features.borrow().match_default_bindings {\n+                    debug!(\"default binding mode is now {:?}\", def_bm);\n+                    self.inh.tables.borrow_mut()\n+                        .pat_adjustments_mut()\n+                        .insert(pat.hir_id, pat_adjustments);\n+                } else {\n+                    let mut err = feature_gate::feature_err(\n+                        &tcx.sess.parse_sess,\n+                        \"match_default_bindings\",\n+                        pat.span,\n+                        feature_gate::GateIssue::Language,\n+                        \"non-reference pattern used to match a reference\",\n+                    );\n+                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(pat.span) {\n+                        err.span_suggestion(pat.span, \"consider using\", format!(\"&{}\", &snippet));\n+                    }\n+                    err.emit();\n+                }\n             }\n         }\n \n@@ -325,8 +340,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(mut err) = err {\n                                 if is_arg {\n                                     if let PatKind::Binding(..) = inner.node {\n-                                        if let Ok(snippet) = self.sess().codemap()\n-                                                                        .span_to_snippet(pat.span)\n+                                        if let Ok(snippet) = tcx.sess.codemap()\n+                                                                     .span_to_snippet(pat.span)\n                                         {\n                                             err.help(&format!(\"did you mean `{}: &{}`?\",\n                                                               &snippet[1..],"}, {"sha": "e43290bb1541654bf293cc0fcb8a91f2ef451d12", "filename": "src/test/compile-fail/E0029.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0029.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -17,6 +17,7 @@ fn main() {\n         //~| NOTE ranges require char or numeric types\n         //~| NOTE start type: &'static str\n         //~| NOTE end type: &'static str\n+        //~| ERROR non-reference pattern used to match a reference\n         _ => {}\n     }\n }"}, {"sha": "4ee2c1e2936a85a2f168e053486dad28964a6481", "filename": "src/test/compile-fail/feature-gate-match_default_bindings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-match_default_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-match_default_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-match_default_bindings.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -10,7 +10,8 @@\n \n pub fn main() {\n     match &Some(3) {\n-        Some(n) => {}, //~ ERROR mismatched types [E0308]\n+        Some(n) => {},\n+        //~^ ERROR non-reference pattern used to match a reference\n         _ => panic!(),\n     }\n }"}, {"sha": "6fdf8802e385e5a1079cae3602d508c86a35109e", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -16,7 +16,6 @@ struct Slice<T> {\n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n-    //~| expected type `&str`\n     //~| found type `Slice<_>`\n-    //~| expected &str, found struct `Slice`\n+    //~| ERROR non-reference pattern used to match a reference\n }"}, {"sha": "092aaa769550538ad296bc2e50b2012754d3bad8", "filename": "src/test/compile-fail/issue-20261.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -10,7 +10,8 @@\n \n fn main() {\n     // NB: this (almost) typechecks when default binding modes are enabled.\n-    for (ref i,) in [].iter() { //~ ERROR mismatched types [E0308]\n+    for (ref i,) in [].iter() {\n+        //~^ ERROR non-reference pattern used to match a reference\n         i.clone();\n     }\n }"}, {"sha": "f246d6e75df8d85f69accebef365aac6c91d4f73", "filename": "src/test/compile-fail/keyword-false-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-false-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-false-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-false-as-identifier.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let false = \"foo\"; //~ error: mismatched types\n+    let false = 22; //~ error: mismatched types\n }"}, {"sha": "b50fc68bed6be587c24f1d525165931dfd543fb6", "filename": "src/test/compile-fail/keyword-self-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let Self = \"foo\"; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+    let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n }"}, {"sha": "54dac771f01ed8818fbfa72ad10777734a7c815d", "filename": "src/test/compile-fail/keyword-super-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let super = \"foo\"; //~ ERROR failed to resolve. There are too many initial `super`s\n+    let super = 22; //~ ERROR failed to resolve. There are too many initial `super`s\n }"}, {"sha": "b09d09db560f511c50287114900105c63e52795d", "filename": "src/test/compile-fail/keyword-true-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-true-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fkeyword-true-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-true-as-identifier.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let true = \"foo\"; //~ error: mismatched types\n+    let true = 22; //~ error: mismatched types\n }"}, {"sha": "355ff6404cea79cf798ca80aea8d9866add32032", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -15,13 +15,15 @@ fn main() {\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: &'static str\n     //~| end type: &'static str\n+    //~| ERROR non-reference pattern used to match a reference\n \n     match \"wow\" {\n         10 ... \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: {integer}\n     //~| end type: &'static str\n+    //~| ERROR non-reference pattern used to match a reference\n \n     match 5 {\n         'c' ... 100 => { }"}, {"sha": "fed68da0068898cef0eb6e55816396a6ed54262a", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -19,7 +19,7 @@ fn main() {\n \n     // Note that this one works with default binding modes.\n     match &[0, 1, 2] {\n-        [..] => {} //~ ERROR expected an array or slice, found `&[{integer}; 3]` [E0529]\n+        [..] => {} //~ ERROR non-reference pattern used to match a reference\n     };\n \n     match &[0, 1, 2] {"}, {"sha": "d49ce56ccf6e7da054241efd45d181d93f3082ee", "filename": "src/test/compile-fail/pat-slice-old-style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fpat-slice-old-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fcompile-fail%2Fpat-slice-old-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-slice-old-style.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -17,8 +17,9 @@ fn slice_pat(x: &[u8]) {\n     // OLD!\n     match x {\n         [a, b..] => {},\n-        //~^ ERROR expected an array or slice, found `&[u8]`\n-        //~| HELP the semantics of slice patterns changed recently; see issue #23121\n+        //~^ ERROR non-reference pattern used to match a reference\n+        //~| HELP add #![feature(match_default_bindings)] to the crate attributes to enable\n+        //~| HELP consider using\n         _ => panic!(),\n     }\n }"}, {"sha": "ca06825d0ad8bdbf49ab0728cfe659445de1e8a9", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -14,13 +14,21 @@ error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n+error: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/closure-arg-count.rs:17:24\n+   |\n+17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |                        ^^^^^^^^^^^^^^^ help: consider using: `&(tuple, tuple2)`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n error[E0308]: mismatched types\n   --> $DIR/closure-arg-count.rs:17:24\n    |\n 17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n-   |                        ^^^^^^^^^^^^^^^ expected &{integer}, found tuple\n+   |                        ^^^^^^^^^^^^^^^ expected integral variable, found tuple\n    |\n-   = note: expected type `&{integer}`\n+   = note: expected type `{integer}`\n               found type `(_, _)`\n \n error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n@@ -65,5 +73,5 @@ error[E0593]: closure is expected to take a single 2-tuple as argument, but it t\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "52ff817dff48833443af296f13793cdbda052a50", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    if let Some(y) = &Some(22) {\n+      println!(\"{}\", y);\n+    }\n+}"}, {"sha": "0594f865f327e72e6fa677729d0418a7d52f7285", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9844777a508203b8faf8c09c3ec1a2023022da9b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr?ref=9844777a508203b8faf8c09c3ec1a2023022da9b", "patch": "@@ -0,0 +1,10 @@\n+error: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/suggestion.rs:12:12\n+   |\n+12 |     if let Some(y) = &Some(22) {\n+   |            ^^^^^^^ help: consider using: `&Some(y)`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}