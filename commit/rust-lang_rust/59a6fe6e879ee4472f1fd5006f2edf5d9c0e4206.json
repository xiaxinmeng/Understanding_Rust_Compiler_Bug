{"sha": "59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YTZmZTZlODc5ZWU0NDcyZjFmZDUwMDZmMmVkZjVkOWMwZTQyMDY=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-09T08:08:20Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-21T08:55:43Z"}, "message": "Remove the optimization in ptr_swap_n\n\nIt can be revisted later after the mem::swap optimizations land.", "tree": {"sha": "a451b7dca6b8fefbdbe70428d56546f9bef0b2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a451b7dca6b8fefbdbe70428d56546f9bef0b2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206", "html_url": "https://github.com/rust-lang/rust/commit/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc84895266920cb519b6c4086e35c7ac99fe210", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc84895266920cb519b6c4086e35c7ac99fe210", "html_url": "https://github.com/rust-lang/rust/commit/ebc84895266920cb519b6c4086e35c7ac99fe210"}], "stats": {"total": 48, "additions": 3, "deletions": 45}, "files": [{"sha": "3b9ae5652c5d1cf05005fe788a24af41f9bffdd7", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=59a6fe6e879ee4472f1fd5006f2edf5d9c0e4206", "patch": "@@ -104,51 +104,9 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n     }\n }\n \n-unsafe fn ptr_swap_u8(a: *mut u8, b: *mut u8, n: usize) {\n-    for i in 0..n {\n-        ptr::swap(a.offset(i as isize), b.offset(i as isize));\n-    }\n-}\n-unsafe fn ptr_swap_u16(a: *mut u16, b: *mut u16, n: usize) {\n-    for i in 0..n {\n-        ptr::swap(a.offset(i as isize), b.offset(i as isize));\n-    }\n-}\n-unsafe fn ptr_swap_u32(a: *mut u32, b: *mut u32, n: usize) {\n-    for i in 0..n {\n-        ptr::swap(a.offset(i as isize), b.offset(i as isize));\n-    }\n-}\n-unsafe fn ptr_swap_u64(a: *mut u64, b: *mut u64, n: usize) {\n-    for i in 0..n {\n-        ptr::swap(a.offset(i as isize), b.offset(i as isize));\n-    }\n-}\n-\n unsafe fn ptr_swap_n<T>(a: *mut T, b: *mut T, n: usize) {\n-    // Doing this as a generic is 16% & 40% slower in two of the `String`\n-    // benchmarks, as (based on the block names) LLVM doesn't vectorize it.\n-    // Since this is just operating on raw memory, dispatch to a version\n-    // with appropriate alignment.  Helps with code size as well, by\n-    // avoiding monomorphizing different unrolled loops for `i32`,\n-    // `u32`, `f32`, `[u32; 1]`, etc.\n-    let size_of_t = mem::size_of::<T>();\n-    let align_of_t = mem::align_of::<T>();\n-\n-    let a64 = mem::align_of::<u64>();\n-    if a64 == 8 && align_of_t % a64 == 0 {\n-        return ptr_swap_u64(a as *mut u64, b as *mut u64, n * (size_of_t / 8));\n-    }\n-\n-    let a32 = mem::align_of::<u32>();\n-    if a32 == 4 && align_of_t % a32 == 0 {\n-        return ptr_swap_u32(a as *mut u32, b as *mut u32, n * (size_of_t / 4));\n-    }\n-\n-    let a16 = mem::align_of::<u16>();\n-    if a16 == 2 && align_of_t % a16 == 0 {\n-        return ptr_swap_u16(a as *mut u16, b as *mut u16, n * (size_of_t / 2));\n+    for i in 0..n {\n+        // These are nonoverlapping, so use mem::swap instead of ptr::swap\n+        mem::swap(&mut *a.offset(i as isize), &mut *b.offset(i as isize));\n     }\n-\n-    ptr_swap_u8(a as *mut u8, b as *mut u8, n * size_of_t);\n }"}]}