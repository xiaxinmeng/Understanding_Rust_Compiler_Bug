{"sha": "45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjQwODFlNjFhMWExNWUyYjViOWM1YTA5OTc2ZmRkZmZkYWM5ZGM=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-21T21:25:24Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-24T21:44:00Z"}, "message": "Rename `core::failure::begin_unwind` to `fail_impl`, refs #16114", "tree": {"sha": "54fd18241b68a76fb3a77abde4dae4fecb89a28f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54fd18241b68a76fb3a77abde4dae4fecb89a28f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "html_url": "https://github.com/rust-lang/rust/commit/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a01da9460a9e7a8be88896e9da0306fd47823a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a01da9460a9e7a8be88896e9da0306fd47823a1", "html_url": "https://github.com/rust-lang/rust/commit/9a01da9460a9e7a8be88896e9da0306fd47823a1"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "8cea7abe9636a7e47e7f9c22453ffe7e9f01d4d0", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "patch": "@@ -16,7 +16,7 @@\n //! interface for failure is:\n //!\n //! ```ignore\n-//! fn begin_unwind(fmt: &fmt::Arguments, &(&'static str, uint)) -> !;\n+//! fn fail_impl(fmt: &fmt::Arguments, &(&'static str, uint)) -> !;\n //! ```\n //!\n //! This definition allows for failing with any general message, but it does not\n@@ -39,7 +39,7 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     let ref file_line = (file, line);\n     format_args!(|args| -> () {\n-        begin_unwind(args, file_line);\n+        fail_impl(args, file_line);\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n@@ -50,33 +50,33 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n fn fail_bounds_check(file_line: &(&'static str, uint),\n                      index: uint, len: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file_line);\n+        fail_impl(args, file_line);\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n     unsafe { intrinsics::abort() }\n }\n \n #[cold] #[inline(never)]\n-pub fn begin_unwind_string(msg: &str, file: &(&'static str, uint)) -> ! {\n-    format_args!(|fmt| begin_unwind(fmt, file), \"{}\", msg)\n+pub fn fail_impl_string(msg: &str, file: &(&'static str, uint)) -> ! {\n+    format_args!(|fmt| fail_impl(fmt, file), \"{}\", msg)\n }\n \n #[cold] #[inline(never)]\n-pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n+pub fn fail_impl(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n \n         #[cfg(stage0)]\n         #[lang = \"begin_unwind\"]\n-        fn begin_unwind(fmt: &fmt::Arguments, file: &'static str,\n+        fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;\n \n         #[cfg(not(stage0))]\n         #[lang = \"fail_fmt\"]\n-        fn begin_unwind(fmt: &fmt::Arguments, file: &'static str,\n+        fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;\n \n     }\n     let (file, line) = *file_line;\n-    unsafe { begin_unwind(fmt, file, line) }\n+    unsafe { fail_impl(fmt, file, line) }\n }\n "}, {"sha": "ccc5f8651e935a3a4c95f92e55683488d560895d", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "patch": "@@ -18,7 +18,7 @@ macro_rules! fail(\n     );\n     ($msg:expr) => ({\n         static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::core::failure::begin_unwind_string($msg, &_FILE_LINE)\n+        ::core::failure::fail_impl_string($msg, &_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n@@ -40,7 +40,7 @@ macro_rules! fail(\n         #[inline(always)]\n         fn _run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n             static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::core::failure::begin_unwind(fmt, &_FILE_LINE)\n+            ::core::failure::fail_impl(fmt, &_FILE_LINE)\n         }\n         format_args!(_run_fmt, $fmt, $($arg)*)\n     });"}]}