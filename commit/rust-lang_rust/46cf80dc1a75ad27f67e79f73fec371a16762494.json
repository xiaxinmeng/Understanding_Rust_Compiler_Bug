{"sha": "46cf80dc1a75ad27f67e79f73fec371a16762494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2Y4MGRjMWE3NWFkMjdmNjdlNzlmNzNmZWMzNzFhMTY3NjI0OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T05:34:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T05:34:40Z"}, "message": "Auto merge of #75004 - Aaron1011:move-probably-equal, r=petrochenkov\n\nMove 'probably equal' methods to librustc_parse\n\nThis is preparation for PR #73084", "tree": {"sha": "fcf98c012c7250e16db2da5e2f56f8c97fcbd1ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf98c012c7250e16db2da5e2f56f8c97fcbd1ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46cf80dc1a75ad27f67e79f73fec371a16762494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46cf80dc1a75ad27f67e79f73fec371a16762494", "html_url": "https://github.com/rust-lang/rust/commit/46cf80dc1a75ad27f67e79f73fec371a16762494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46cf80dc1a75ad27f67e79f73fec371a16762494/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8141873e6d50a0a0829fd756b0a16a92b27cfe22", "url": "https://api.github.com/repos/rust-lang/rust/commits/8141873e6d50a0a0829fd756b0a16a92b27cfe22", "html_url": "https://github.com/rust-lang/rust/commit/8141873e6d50a0a0829fd756b0a16a92b27cfe22"}, {"sha": "183947f6ba11041bb9905c63cdfa393078164184", "url": "https://api.github.com/repos/rust-lang/rust/commits/183947f6ba11041bb9905c63cdfa393078164184", "html_url": "https://github.com/rust-lang/rust/commit/183947f6ba11041bb9905c63cdfa393078164184"}], "stats": {"total": 371, "additions": 187, "deletions": 184}, "files": [{"sha": "017433317584c778785b801395c6789c3908dc95", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46cf80dc1a75ad27f67e79f73fec371a16762494/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/46cf80dc1a75ad27f67e79f73fec371a16762494/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=46cf80dc1a75ad27f67e79f73fec371a16762494", "patch": "@@ -3808,6 +3808,7 @@ dependencies = [\n  \"rustc_lexer\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"smallvec 1.4.0\",\n  \"tracing\",\n  \"unicode-normalization\",\n ]"}, {"sha": "fcd1eea922c2ae38acbf21b9c9ccb3c0ef50cc2c", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=46cf80dc1a75ad27f67e79f73fec371a16762494", "patch": "@@ -673,62 +673,6 @@ impl Token {\n \n         Some(Token::new(kind, self.span.to(joint.span)))\n     }\n-\n-    // See comments in `Nonterminal::to_tokenstream` for why we care about\n-    // *probably* equal here rather than actual equality\n-    crate fn probably_equal_for_proc_macro(&self, other: &Token) -> bool {\n-        if mem::discriminant(&self.kind) != mem::discriminant(&other.kind) {\n-            return false;\n-        }\n-        match (&self.kind, &other.kind) {\n-            (&Eq, &Eq)\n-            | (&Lt, &Lt)\n-            | (&Le, &Le)\n-            | (&EqEq, &EqEq)\n-            | (&Ne, &Ne)\n-            | (&Ge, &Ge)\n-            | (&Gt, &Gt)\n-            | (&AndAnd, &AndAnd)\n-            | (&OrOr, &OrOr)\n-            | (&Not, &Not)\n-            | (&Tilde, &Tilde)\n-            | (&At, &At)\n-            | (&Dot, &Dot)\n-            | (&DotDot, &DotDot)\n-            | (&DotDotDot, &DotDotDot)\n-            | (&DotDotEq, &DotDotEq)\n-            | (&Comma, &Comma)\n-            | (&Semi, &Semi)\n-            | (&Colon, &Colon)\n-            | (&ModSep, &ModSep)\n-            | (&RArrow, &RArrow)\n-            | (&LArrow, &LArrow)\n-            | (&FatArrow, &FatArrow)\n-            | (&Pound, &Pound)\n-            | (&Dollar, &Dollar)\n-            | (&Question, &Question)\n-            | (&Whitespace, &Whitespace)\n-            | (&Comment, &Comment)\n-            | (&Eof, &Eof) => true,\n-\n-            (&BinOp(a), &BinOp(b)) | (&BinOpEq(a), &BinOpEq(b)) => a == b,\n-\n-            (&OpenDelim(a), &OpenDelim(b)) | (&CloseDelim(a), &CloseDelim(b)) => a == b,\n-\n-            (&DocComment(a), &DocComment(b)) | (&Shebang(a), &Shebang(b)) => a == b,\n-\n-            (&Literal(a), &Literal(b)) => a == b,\n-\n-            (&Lifetime(a), &Lifetime(b)) => a == b,\n-            (&Ident(a, b), &Ident(c, d)) => {\n-                b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n-            }\n-\n-            (&Interpolated(..), &Interpolated(..)) => false,\n-\n-            _ => panic!(\"forgot to add a token?\"),\n-        }\n-    }\n }\n \n impl PartialEq<TokenKind> for Token {"}, {"sha": "9d0199078fa6a354eb4ee9f51305aa95fbb4e4fa", "filename": "src/librustc_ast/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_ast%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_ast%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftokenstream.rs?ref=46cf80dc1a75ad27f67e79f73fec371a16762494", "patch": "@@ -21,8 +21,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n-use log::debug;\n-\n use std::{iter, mem};\n \n /// When the main rust parser encounters a syntax-extension invocation, it\n@@ -68,23 +66,6 @@ impl TokenTree {\n         }\n     }\n \n-    // See comments in `Nonterminal::to_tokenstream` for why we care about\n-    // *probably* equal here rather than actual equality\n-    //\n-    // This is otherwise the same as `eq_unspanned`, only recursing with a\n-    // different method.\n-    pub fn probably_equal_for_proc_macro(&self, other: &TokenTree) -> bool {\n-        match (self, other) {\n-            (TokenTree::Token(token), TokenTree::Token(token2)) => {\n-                token.probably_equal_for_proc_macro(token2)\n-            }\n-            (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-                delim == delim2 && tts.probably_equal_for_proc_macro(&tts2)\n-            }\n-            _ => false,\n-        }\n-    }\n-\n     /// Retrieves the TokenTree's span.\n     pub fn span(&self) -> Span {\n         match self {\n@@ -307,112 +288,6 @@ impl TokenStream {\n         t1.next().is_none() && t2.next().is_none()\n     }\n \n-    // See comments in `Nonterminal::to_tokenstream` for why we care about\n-    // *probably* equal here rather than actual equality\n-    //\n-    // This is otherwise the same as `eq_unspanned`, only recursing with a\n-    // different method.\n-    pub fn probably_equal_for_proc_macro(&self, other: &TokenStream) -> bool {\n-        // When checking for `probably_eq`, we ignore certain tokens that aren't\n-        // preserved in the AST. Because they are not preserved, the pretty\n-        // printer arbitrarily adds or removes them when printing as token\n-        // streams, making a comparison between a token stream generated from an\n-        // AST and a token stream which was parsed into an AST more reliable.\n-        fn semantic_tree(tree: &TokenTree) -> bool {\n-            if let TokenTree::Token(token) = tree {\n-                if let\n-                    // The pretty printer tends to add trailing commas to\n-                    // everything, and in particular, after struct fields.\n-                    | token::Comma\n-                    // The pretty printer emits `NoDelim` as whitespace.\n-                    | token::OpenDelim(DelimToken::NoDelim)\n-                    | token::CloseDelim(DelimToken::NoDelim)\n-                    // The pretty printer collapses many semicolons into one.\n-                    | token::Semi\n-                    // The pretty printer collapses whitespace arbitrarily and can\n-                    // introduce whitespace from `NoDelim`.\n-                    | token::Whitespace\n-                    // The pretty printer can turn `$crate` into `::crate_name`\n-                    | token::ModSep = token.kind {\n-                    return false;\n-                }\n-            }\n-            true\n-        }\n-\n-        // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n-        //\n-        // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n-        // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n-        // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n-        // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n-        // when determining if two `TokenStream`s are 'probably equal'.\n-        //\n-        // Therefore, we use `break_two_token_op` to convert all tokens\n-        // to the 'unglued' form (if it exists). This ensures that two\n-        // `TokenStream`s which differ only in how their tokens are glued\n-        // will be considered 'probably equal', which allows us to keep spans.\n-        //\n-        // This is important when the original `TokenStream` contained\n-        // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n-        // will be omitted when we pretty-print, which can cause the original\n-        // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n-        // leading to some tokens being 'glued' together in one stream but not\n-        // the other. See #68489 for more details.\n-        fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n-            // In almost all cases, we should have either zero or one levels\n-            // of 'unglueing'. However, in some unusual cases, we may need\n-            // to iterate breaking tokens mutliple times. For example:\n-            // '[BinOpEq(Shr)] => [Gt, Ge] -> [Gt, Gt, Eq]'\n-            let mut token_trees: SmallVec<[_; 2]>;\n-            if let TokenTree::Token(token) = &tree {\n-                let mut out = SmallVec::<[_; 2]>::new();\n-                out.push(token.clone());\n-                // Iterate to fixpoint:\n-                // * We start off with 'out' containing our initial token, and `temp` empty\n-                // * If we are able to break any tokens in `out`, then `out` will have\n-                //   at least one more element than 'temp', so we will try to break tokens\n-                //   again.\n-                // * If we cannot break any tokens in 'out', we are done\n-                loop {\n-                    let mut temp = SmallVec::<[_; 2]>::new();\n-                    let mut changed = false;\n-\n-                    for token in out.into_iter() {\n-                        if let Some((first, second)) = token.kind.break_two_token_op() {\n-                            temp.push(Token::new(first, DUMMY_SP));\n-                            temp.push(Token::new(second, DUMMY_SP));\n-                            changed = true;\n-                        } else {\n-                            temp.push(token);\n-                        }\n-                    }\n-                    out = temp;\n-                    if !changed {\n-                        break;\n-                    }\n-                }\n-                token_trees = out.into_iter().map(TokenTree::Token).collect();\n-                if token_trees.len() != 1 {\n-                    debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n-                }\n-            } else {\n-                token_trees = SmallVec::new();\n-                token_trees.push(tree);\n-            }\n-            token_trees.into_iter()\n-        }\n-\n-        let mut t1 = self.trees().filter(semantic_tree).flat_map(break_tokens);\n-        let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n-        for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-            if !t1.probably_equal_for_proc_macro(&t2) {\n-                return false;\n-            }\n-        }\n-        t1.next().is_none() && t2.next().is_none()\n-    }\n-\n     pub fn map_enumerated<F: FnMut(usize, TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n         TokenStream(Lrc::new(\n             self.0"}, {"sha": "25144bd610d3e11b3cce06a00cc1ec6b4565bc22", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=46cf80dc1a75ad27f67e79f73fec371a16762494", "patch": "@@ -21,3 +21,4 @@ rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_ast = { path = \"../librustc_ast\" }\n unicode-normalization = \"0.1.11\"\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "3319ca44da467caa38ad8226e918fc5d4a767ed1", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 185, "deletions": 3, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cf80dc1a75ad27f67e79f73fec371a16762494/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=46cf80dc1a75ad27f67e79f73fec371a16762494", "patch": "@@ -7,14 +7,16 @@\n #![feature(or_patterns)]\n \n use rustc_ast::ast;\n-use rustc_ast::token::{self, Nonterminal};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token};\n use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::{FileName, SourceFile, Span};\n+use rustc_span::{symbol::kw, FileName, SourceFile, Span, DUMMY_SP};\n \n+use smallvec::SmallVec;\n+use std::mem;\n use std::path::Path;\n use std::str;\n \n@@ -306,7 +308,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokens.probably_equal_for_proc_macro(&tokens_for_real) {\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real) {\n             return tokens;\n         }\n         info!(\n@@ -319,6 +321,186 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     tokens_for_real\n }\n \n+// See comments in `Nonterminal::to_tokenstream` for why we care about\n+// *probably* equal here rather than actual equality\n+//\n+// This is otherwise the same as `eq_unspanned`, only recursing with a\n+// different method.\n+pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &TokenStream) -> bool {\n+    // When checking for `probably_eq`, we ignore certain tokens that aren't\n+    // preserved in the AST. Because they are not preserved, the pretty\n+    // printer arbitrarily adds or removes them when printing as token\n+    // streams, making a comparison between a token stream generated from an\n+    // AST and a token stream which was parsed into an AST more reliable.\n+    fn semantic_tree(tree: &TokenTree) -> bool {\n+        if let TokenTree::Token(token) = tree {\n+            if let\n+                // The pretty printer tends to add trailing commas to\n+                // everything, and in particular, after struct fields.\n+                | token::Comma\n+                // The pretty printer emits `NoDelim` as whitespace.\n+                | token::OpenDelim(DelimToken::NoDelim)\n+                | token::CloseDelim(DelimToken::NoDelim)\n+                // The pretty printer collapses many semicolons into one.\n+                | token::Semi\n+                // The pretty printer collapses whitespace arbitrarily and can\n+                // introduce whitespace from `NoDelim`.\n+                | token::Whitespace\n+                // The pretty printer can turn `$crate` into `::crate_name`\n+                | token::ModSep = token.kind {\n+                return false;\n+            }\n+        }\n+        true\n+    }\n+\n+    // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n+    //\n+    // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n+    // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n+    // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n+    // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n+    // when determining if two `TokenStream`s are 'probably equal'.\n+    //\n+    // Therefore, we use `break_two_token_op` to convert all tokens\n+    // to the 'unglued' form (if it exists). This ensures that two\n+    // `TokenStream`s which differ only in how their tokens are glued\n+    // will be considered 'probably equal', which allows us to keep spans.\n+    //\n+    // This is important when the original `TokenStream` contained\n+    // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n+    // will be omitted when we pretty-print, which can cause the original\n+    // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n+    // leading to some tokens being 'glued' together in one stream but not\n+    // the other. See #68489 for more details.\n+    fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n+        // In almost all cases, we should have either zero or one levels\n+        // of 'unglueing'. However, in some unusual cases, we may need\n+        // to iterate breaking tokens mutliple times. For example:\n+        // '[BinOpEq(Shr)] => [Gt, Ge] -> [Gt, Gt, Eq]'\n+        let mut token_trees: SmallVec<[_; 2]>;\n+        if let TokenTree::Token(token) = &tree {\n+            let mut out = SmallVec::<[_; 2]>::new();\n+            out.push(token.clone());\n+            // Iterate to fixpoint:\n+            // * We start off with 'out' containing our initial token, and `temp` empty\n+            // * If we are able to break any tokens in `out`, then `out` will have\n+            //   at least one more element than 'temp', so we will try to break tokens\n+            //   again.\n+            // * If we cannot break any tokens in 'out', we are done\n+            loop {\n+                let mut temp = SmallVec::<[_; 2]>::new();\n+                let mut changed = false;\n+\n+                for token in out.into_iter() {\n+                    if let Some((first, second)) = token.kind.break_two_token_op() {\n+                        temp.push(Token::new(first, DUMMY_SP));\n+                        temp.push(Token::new(second, DUMMY_SP));\n+                        changed = true;\n+                    } else {\n+                        temp.push(token);\n+                    }\n+                }\n+                out = temp;\n+                if !changed {\n+                    break;\n+                }\n+            }\n+            token_trees = out.into_iter().map(TokenTree::Token).collect();\n+            if token_trees.len() != 1 {\n+                debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n+            }\n+        } else {\n+            token_trees = SmallVec::new();\n+            token_trees.push(tree);\n+        }\n+        token_trees.into_iter()\n+    }\n+\n+    let mut t1 = first.trees().filter(semantic_tree).flat_map(break_tokens);\n+    let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n+    for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n+        if !tokentree_probably_equal_for_proc_macro(&t1, &t2) {\n+            return false;\n+        }\n+    }\n+    t1.next().is_none() && t2.next().is_none()\n+}\n+\n+// See comments in `Nonterminal::to_tokenstream` for why we care about\n+// *probably* equal here rather than actual equality\n+//\n+// This is otherwise the same as `eq_unspanned`, only recursing with a\n+// different method.\n+fn tokentree_probably_equal_for_proc_macro(first: &TokenTree, other: &TokenTree) -> bool {\n+    match (first, other) {\n+        (TokenTree::Token(token), TokenTree::Token(token2)) => {\n+            token_probably_equal_for_proc_macro(token, token2)\n+        }\n+        (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n+            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2)\n+        }\n+        _ => false,\n+    }\n+}\n+\n+// See comments in `Nonterminal::to_tokenstream` for why we care about\n+// *probably* equal here rather than actual equality\n+fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n+    if mem::discriminant(&first.kind) != mem::discriminant(&other.kind) {\n+        return false;\n+    }\n+    use rustc_ast::token::TokenKind::*;\n+    match (&first.kind, &other.kind) {\n+        (&Eq, &Eq)\n+        | (&Lt, &Lt)\n+        | (&Le, &Le)\n+        | (&EqEq, &EqEq)\n+        | (&Ne, &Ne)\n+        | (&Ge, &Ge)\n+        | (&Gt, &Gt)\n+        | (&AndAnd, &AndAnd)\n+        | (&OrOr, &OrOr)\n+        | (&Not, &Not)\n+        | (&Tilde, &Tilde)\n+        | (&At, &At)\n+        | (&Dot, &Dot)\n+        | (&DotDot, &DotDot)\n+        | (&DotDotDot, &DotDotDot)\n+        | (&DotDotEq, &DotDotEq)\n+        | (&Comma, &Comma)\n+        | (&Semi, &Semi)\n+        | (&Colon, &Colon)\n+        | (&ModSep, &ModSep)\n+        | (&RArrow, &RArrow)\n+        | (&LArrow, &LArrow)\n+        | (&FatArrow, &FatArrow)\n+        | (&Pound, &Pound)\n+        | (&Dollar, &Dollar)\n+        | (&Question, &Question)\n+        | (&Whitespace, &Whitespace)\n+        | (&Comment, &Comment)\n+        | (&Eof, &Eof) => true,\n+\n+        (&BinOp(a), &BinOp(b)) | (&BinOpEq(a), &BinOpEq(b)) => a == b,\n+\n+        (&OpenDelim(a), &OpenDelim(b)) | (&CloseDelim(a), &CloseDelim(b)) => a == b,\n+\n+        (&DocComment(a), &DocComment(b)) | (&Shebang(a), &Shebang(b)) => a == b,\n+\n+        (&Literal(a), &Literal(b)) => a == b,\n+\n+        (&Lifetime(a), &Lifetime(b)) => a == b,\n+        (&Ident(a, b), &Ident(c, d)) => {\n+            b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n+        }\n+\n+        (&Interpolated(..), &Interpolated(..)) => false,\n+\n+        _ => panic!(\"forgot to add a token?\"),\n+    }\n+}\n+\n fn prepend_attrs(\n     sess: &ParseSess,\n     attrs: &[ast::Attribute],"}]}