{"sha": "500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGM5MDljNzZhNTE2NWUzZTNjNmZmMmVhY2MwMDljOTBmMDhiYmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T19:17:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T19:17:36Z"}, "message": "internal: diagnostic code is mandatory", "tree": {"sha": "5b57ca5243009f6a63cb6f3d37acb524b8cd2c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b57ca5243009f6a63cb6f3d37acb524b8cd2c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "html_url": "https://github.com/rust-lang/rust/commit/500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b404b91da68556141ad39fffcef2865f073dd3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b404b91da68556141ad39fffcef2865f073dd3d1", "html_url": "https://github.com/rust-lang/rust/commit/b404b91da68556141ad39fffcef2865f073dd3d1"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "815a633e5ea9608a0f81cd25248fe3ae4ec2c680", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "patch": "@@ -51,28 +51,26 @@ impl DiagnosticCode {\n \n #[derive(Debug)]\n pub struct Diagnostic {\n-    // pub name: Option<String>,\n+    pub code: DiagnosticCode,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n-    pub fixes: Option<Vec<Assist>>,\n     pub unused: bool,\n-    pub code: Option<DiagnosticCode>,\n     pub experimental: bool,\n+    pub fixes: Option<Vec<Assist>>,\n }\n \n impl Diagnostic {\n     fn new(code: &'static str, message: impl Into<String>, range: TextRange) -> Diagnostic {\n         let message = message.into();\n-        let code = Some(DiagnosticCode(code));\n-        Self {\n+        Diagnostic {\n+            code: DiagnosticCode(code),\n             message,\n             range,\n             severity: Severity::Error,\n-            fixes: None,\n             unused: false,\n-            code,\n             experimental: false,\n+            fixes: None,\n         }\n     }\n \n@@ -181,15 +179,8 @@ pub(crate) fn diagnostics(\n     }\n \n     res.retain(|d| {\n-        if let Some(code) = d.code {\n-            if ctx.config.disabled.contains(code.as_str()) {\n-                return false;\n-            }\n-        }\n-        if ctx.config.disable_experimental && d.experimental {\n-            return false;\n-        }\n-        true\n+        !ctx.config.disabled.contains(d.code.as_str())\n+            && !(ctx.config.disable_experimental && d.experimental)\n     });\n \n     res"}, {"sha": "977b464140e58e5720f9059a752ccc7b6baca543", "filename": "crates/ide/src/diagnostics/unresolved_module.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs?ref=500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "patch": "@@ -65,9 +65,14 @@ mod baz {}\n             expect![[r#\"\n                 [\n                     Diagnostic {\n+                        code: DiagnosticCode(\n+                            \"unresolved-module\",\n+                        ),\n                         message: \"unresolved module\",\n                         range: 0..8,\n                         severity: Error,\n+                        unused: false,\n+                        experimental: false,\n                         fixes: Some(\n                             [\n                                 Assist {\n@@ -98,13 +103,6 @@ mod baz {}\n                                 },\n                             ],\n                         ),\n-                        unused: false,\n-                        code: Some(\n-                            DiagnosticCode(\n-                                \"unresolved-module\",\n-                            ),\n-                        ),\n-                        experimental: false,\n                     },\n                 ]\n             \"#]],"}, {"sha": "ccf66294f16b447336f24f87173b4b801196a0f3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500c909c76a5165e3e3c6ff2eacc009c90f08bbe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "patch": "@@ -1229,14 +1229,13 @@ pub(crate) fn publish_diagnostics(\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),\n             severity: Some(to_proto::diagnostic_severity(d.severity)),\n-            code: d.code.map(|d| d.as_str().to_owned()).map(NumberOrString::String),\n-            code_description: d.code.and_then(|code| {\n-                lsp_types::Url::parse(&format!(\n+            code: Some(NumberOrString::String(d.code.as_str().to_string())),\n+            code_description: Some(lsp_types::CodeDescription {\n+                href: lsp_types::Url::parse(&format!(\n                     \"https://rust-analyzer.github.io/manual.html#{}\",\n-                    code.as_str()\n+                    d.code.as_str()\n                 ))\n-                .ok()\n-                .map(|href| lsp_types::CodeDescription { href })\n+                .unwrap(),\n             }),\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,"}]}