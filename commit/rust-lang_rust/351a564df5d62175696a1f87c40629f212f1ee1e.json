{"sha": "351a564df5d62175696a1f87c40629f212f1ee1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MWE1NjRkZjVkNjIxNzU2OTZhMWY4N2M0MDYyOWYyMTJmMWVlMWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-14T01:08:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T01:29:14Z"}, "message": "libnum: Remove all uses of `~str` from `libnum`", "tree": {"sha": "751c444f333d465d11aa20ae6bbd377755bf8aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/751c444f333d465d11aa20ae6bbd377755bf8aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351a564df5d62175696a1f87c40629f212f1ee1e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351a564df5d62175696a1f87c40629f212f1ee1e", "html_url": "https://github.com/rust-lang/rust/commit/351a564df5d62175696a1f87c40629f212f1ee1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351a564df5d62175696a1f87c40629f212f1ee1e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef82469464ec733dd7cbd19c9f6e7c6f9d0e7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef82469464ec733dd7cbd19c9f6e7c6f9d0e7b1", "html_url": "https://github.com/rust-lang/rust/commit/1ef82469464ec733dd7cbd19c9f6e7c6f9d0e7b1"}], "stats": {"total": 166, "additions": 85, "deletions": 81}, "files": [{"sha": "9f66f767f20e70da9a86f7dc0fd8fd64d238c498", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 43, "deletions": 40, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=351a564df5d62175696a1f87c40629f212f1ee1e", "patch": "@@ -1865,60 +1865,60 @@ mod biguint_tests {\n         assert!(((one << 64) + one).is_odd());\n     }\n \n-    fn to_str_pairs() -> Vec<(BigUint, Vec<(uint, ~str)>)> {\n+    fn to_str_pairs() -> Vec<(BigUint, Vec<(uint, StrBuf)>)> {\n         let bits = BigDigit::bits;\n         vec!(( Zero::zero(), vec!(\n-            (2, \"0\".to_owned()), (3, \"0\".to_owned())\n+            (2, \"0\".to_strbuf()), (3, \"0\".to_strbuf())\n         )), ( BigUint::from_slice([ 0xff ]), vec!(\n-            (2,  \"11111111\".to_owned()),\n-            (3,  \"100110\".to_owned()),\n-            (4,  \"3333\".to_owned()),\n-            (5,  \"2010\".to_owned()),\n-            (6,  \"1103\".to_owned()),\n-            (7,  \"513\".to_owned()),\n-            (8,  \"377\".to_owned()),\n-            (9,  \"313\".to_owned()),\n-            (10, \"255\".to_owned()),\n-            (11, \"212\".to_owned()),\n-            (12, \"193\".to_owned()),\n-            (13, \"168\".to_owned()),\n-            (14, \"143\".to_owned()),\n-            (15, \"120\".to_owned()),\n-            (16, \"ff\".to_owned())\n+            (2,  \"11111111\".to_strbuf()),\n+            (3,  \"100110\".to_strbuf()),\n+            (4,  \"3333\".to_strbuf()),\n+            (5,  \"2010\".to_strbuf()),\n+            (6,  \"1103\".to_strbuf()),\n+            (7,  \"513\".to_strbuf()),\n+            (8,  \"377\".to_strbuf()),\n+            (9,  \"313\".to_strbuf()),\n+            (10, \"255\".to_strbuf()),\n+            (11, \"212\".to_strbuf()),\n+            (12, \"193\".to_strbuf()),\n+            (13, \"168\".to_strbuf()),\n+            (14, \"143\".to_strbuf()),\n+            (15, \"120\".to_strbuf()),\n+            (16, \"ff\".to_strbuf())\n         )), ( BigUint::from_slice([ 0xfff ]), vec!(\n-            (2,  \"111111111111\".to_owned()),\n-            (4,  \"333333\".to_owned()),\n-            (16, \"fff\".to_owned())\n+            (2,  \"111111111111\".to_strbuf()),\n+            (4,  \"333333\".to_strbuf()),\n+            (16, \"fff\".to_strbuf())\n         )), ( BigUint::from_slice([ 1, 2 ]), vec!(\n             (2,\n-             \"10\".to_owned() +\n-             \"0\".repeat(bits - 1) + \"1\"),\n+             format_strbuf!(\"10{}1\", \"0\".repeat(bits - 1))),\n             (4,\n-             \"2\".to_owned() +\n-             \"0\".repeat(bits / 2 - 1) + \"1\"),\n+             format_strbuf!(\"2{}1\", \"0\".repeat(bits / 2 - 1))),\n             (10, match bits {\n-                32 => \"8589934593\".to_owned(), 16 => \"131073\".to_owned(), _ => fail!()\n+                32 => \"8589934593\".to_strbuf(),\n+                16 => \"131073\".to_strbuf(),\n+                _ => fail!()\n             }),\n             (16,\n-             \"2\".to_owned() +\n-             \"0\".repeat(bits / 4 - 1) + \"1\")\n+             format_strbuf!(\"2{}1\", \"0\".repeat(bits / 4 - 1)))\n         )), ( BigUint::from_slice([ 1, 2, 3 ]), vec!(\n             (2,\n-             \"11\".to_owned() +\n-             \"0\".repeat(bits - 2) + \"10\" +\n-             \"0\".repeat(bits - 1) + \"1\"),\n+             format_strbuf!(\"11{}10{}1\",\n+                            \"0\".repeat(bits - 2),\n+                            \"0\".repeat(bits - 1))),\n             (4,\n-             \"3\".to_owned() +\n-             \"0\".repeat(bits / 2 - 1) + \"2\" +\n-             \"0\".repeat(bits / 2 - 1) + \"1\"),\n+             format_strbuf!(\"3{}2{}1\",\n+                            \"0\".repeat(bits / 2 - 1),\n+                            \"0\".repeat(bits / 2 - 1))),\n             (10, match bits {\n-                32 => \"55340232229718589441\".to_owned(),\n-                16 => \"12885032961\".to_owned(),\n+                32 => \"55340232229718589441\".to_strbuf(),\n+                16 => \"12885032961\".to_strbuf(),\n                 _ => fail!()\n             }),\n-            (16, \"3\".to_owned() +\n-             \"0\".repeat(bits / 4 - 1) + \"2\" +\n-             \"0\".repeat(bits / 4 - 1) + \"1\")\n+            (16,\n+             format_strbuf!(\"3{}2{}1\",\n+                            \"0\".repeat(bits / 4 - 1),\n+                            \"0\".repeat(bits / 4 - 1)))\n         )) )\n     }\n \n@@ -1929,7 +1929,8 @@ mod biguint_tests {\n             let &(ref n, ref rs) = num_pair;\n             for str_pair in rs.iter() {\n                 let &(ref radix, ref str) = str_pair;\n-                assert_eq!(&n.to_str_radix(*radix), str);\n+                assert_eq!(n.to_str_radix(*radix).as_slice(),\n+                           str.as_slice());\n             }\n         }\n     }\n@@ -1941,7 +1942,9 @@ mod biguint_tests {\n             let &(ref n, ref rs) = num_pair;\n             for str_pair in rs.iter() {\n                 let &(ref radix, ref str) = str_pair;\n-                assert_eq!(n, &FromStrRadix::from_str_radix(*str, *radix).unwrap());\n+                assert_eq!(n,\n+                           &FromStrRadix::from_str_radix(str.as_slice(),\n+                                                         *radix).unwrap());\n             }\n         }\n "}, {"sha": "b82c4d177ba02e18a4dce036930f0f77b812ec75", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=351a564df5d62175696a1f87c40629f212f1ee1e", "patch": "@@ -348,15 +348,15 @@ mod test {\n \n     #[test]\n     fn test_to_str() {\n-        fn test(c : Complex64, s: ~str) {\n-            assert_eq!(c.to_str(), s);\n+        fn test(c : Complex64, s: StrBuf) {\n+            assert_eq!(c.to_str().to_strbuf(), s);\n         }\n-        test(_0_0i, \"0+0i\".to_owned());\n-        test(_1_0i, \"1+0i\".to_owned());\n-        test(_0_1i, \"0+1i\".to_owned());\n-        test(_1_1i, \"1+1i\".to_owned());\n-        test(_neg1_1i, \"-1+1i\".to_owned());\n-        test(-_neg1_1i, \"1-1i\".to_owned());\n-        test(_05_05i, \"0.5+0.5i\".to_owned());\n+        test(_0_0i, \"0+0i\".to_strbuf());\n+        test(_1_0i, \"1+0i\".to_strbuf());\n+        test(_0_1i, \"0+1i\".to_strbuf());\n+        test(_1_1i, \"1+1i\".to_strbuf());\n+        test(_neg1_1i, \"-1+1i\".to_strbuf());\n+        test(-_neg1_1i, \"1-1i\".to_strbuf());\n+        test(_05_05i, \"0.5+0.5i\".to_strbuf());\n     }\n }"}, {"sha": "bffca79f351d4d0cc2fadb1ea912a2d4e8b48248", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a564df5d62175696a1f87c40629f212f1ee1e/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=351a564df5d62175696a1f87c40629f212f1ee1e", "patch": "@@ -555,16 +555,16 @@ mod test {\n \n     #[test]\n     fn test_to_from_str() {\n-        fn test(r: Rational, s: ~str) {\n-            assert_eq!(FromStr::from_str(s), Some(r));\n-            assert_eq!(r.to_str(), s);\n+        fn test(r: Rational, s: StrBuf) {\n+            assert_eq!(FromStr::from_str(s.as_slice()), Some(r));\n+            assert_eq!(r.to_str().to_strbuf(), s);\n         }\n-        test(_1, \"1/1\".to_owned());\n-        test(_0, \"0/1\".to_owned());\n-        test(_1_2, \"1/2\".to_owned());\n-        test(_3_2, \"3/2\".to_owned());\n-        test(_2, \"2/1\".to_owned());\n-        test(_neg1_2, \"-1/2\".to_owned());\n+        test(_1, \"1/1\".to_strbuf());\n+        test(_0, \"0/1\".to_strbuf());\n+        test(_1_2, \"1/2\".to_strbuf());\n+        test(_3_2, \"3/2\".to_strbuf());\n+        test(_2, \"2/1\".to_strbuf());\n+        test(_neg1_2, \"-1/2\".to_strbuf());\n     }\n     #[test]\n     fn test_from_str_fail() {\n@@ -581,30 +581,31 @@ mod test {\n \n     #[test]\n     fn test_to_from_str_radix() {\n-        fn test(r: Rational, s: ~str, n: uint) {\n-            assert_eq!(FromStrRadix::from_str_radix(s, n), Some(r));\n-            assert_eq!(r.to_str_radix(n), s);\n+        fn test(r: Rational, s: StrBuf, n: uint) {\n+            assert_eq!(FromStrRadix::from_str_radix(s.to_owned(), n),\n+                       Some(r));\n+            assert_eq!(r.to_str_radix(n).to_strbuf(), s);\n         }\n-        fn test3(r: Rational, s: ~str) { test(r, s, 3) }\n-        fn test16(r: Rational, s: ~str) { test(r, s, 16) }\n-\n-        test3(_1, \"1/1\".to_owned());\n-        test3(_0, \"0/1\".to_owned());\n-        test3(_1_2, \"1/2\".to_owned());\n-        test3(_3_2, \"10/2\".to_owned());\n-        test3(_2, \"2/1\".to_owned());\n-        test3(_neg1_2, \"-1/2\".to_owned());\n-        test3(_neg1_2 / _2, \"-1/11\".to_owned());\n-\n-        test16(_1, \"1/1\".to_owned());\n-        test16(_0, \"0/1\".to_owned());\n-        test16(_1_2, \"1/2\".to_owned());\n-        test16(_3_2, \"3/2\".to_owned());\n-        test16(_2, \"2/1\".to_owned());\n-        test16(_neg1_2, \"-1/2\".to_owned());\n-        test16(_neg1_2 / _2, \"-1/4\".to_owned());\n-        test16(Ratio::new(13,15), \"d/f\".to_owned());\n-        test16(_1_2*_1_2*_1_2*_1_2, \"1/10\".to_owned());\n+        fn test3(r: Rational, s: StrBuf) { test(r, s, 3) }\n+        fn test16(r: Rational, s: StrBuf) { test(r, s, 16) }\n+\n+        test3(_1, \"1/1\".to_strbuf());\n+        test3(_0, \"0/1\".to_strbuf());\n+        test3(_1_2, \"1/2\".to_strbuf());\n+        test3(_3_2, \"10/2\".to_strbuf());\n+        test3(_2, \"2/1\".to_strbuf());\n+        test3(_neg1_2, \"-1/2\".to_strbuf());\n+        test3(_neg1_2 / _2, \"-1/11\".to_strbuf());\n+\n+        test16(_1, \"1/1\".to_strbuf());\n+        test16(_0, \"0/1\".to_strbuf());\n+        test16(_1_2, \"1/2\".to_strbuf());\n+        test16(_3_2, \"3/2\".to_strbuf());\n+        test16(_2, \"2/1\".to_strbuf());\n+        test16(_neg1_2, \"-1/2\".to_strbuf());\n+        test16(_neg1_2 / _2, \"-1/4\".to_strbuf());\n+        test16(Ratio::new(13,15), \"d/f\".to_strbuf());\n+        test16(_1_2*_1_2*_1_2*_1_2, \"1/10\".to_strbuf());\n     }\n \n     #[test]"}]}