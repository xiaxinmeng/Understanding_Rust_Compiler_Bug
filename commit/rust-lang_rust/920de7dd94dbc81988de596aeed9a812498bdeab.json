{"sha": "920de7dd94dbc81988de596aeed9a812498bdeab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMGRlN2RkOTRkYmM4MTk4OGRlNTk2YWVlZDlhODEyNDk4YmRlYWI=", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-03-22T19:39:22Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-04-26T05:11:46Z"}, "message": "Document Hasher spec decision from #42951", "tree": {"sha": "92156d95bbf488549a694bc729dee8069661e596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92156d95bbf488549a694bc729dee8069661e596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920de7dd94dbc81988de596aeed9a812498bdeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920de7dd94dbc81988de596aeed9a812498bdeab", "html_url": "https://github.com/rust-lang/rust/commit/920de7dd94dbc81988de596aeed9a812498bdeab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920de7dd94dbc81988de596aeed9a812498bdeab/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6c98e4d6f6338dac2357b9433af8ef2a6ba320", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c98e4d6f6338dac2357b9433af8ef2a6ba320", "html_url": "https://github.com/rust-lang/rust/commit/1a6c98e4d6f6338dac2357b9433af8ef2a6ba320"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "20eb955ff6c0dc49b20ad848b8a08c690e2b0feb", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/920de7dd94dbc81988de596aeed9a812498bdeab/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920de7dd94dbc81988de596aeed9a812498bdeab/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=920de7dd94dbc81988de596aeed9a812498bdeab", "patch": "@@ -175,6 +175,21 @@ pub trait Hash {\n \n     /// Feeds a slice of this type into the given [`Hasher`].\n     ///\n+    /// This method is meant as a convenience, but its implementation is\n+    /// also explicitly left unspecified. It isn't guaranteed to be\n+    /// equivalent to repeated calls of [`hash`] and implementations of\n+    /// [`Hash`] should keep that in mind and call [`hash`] themselves\n+    /// if the slice isn't treated as a whole unit in the [`PartialEq`]\n+    /// implementation.\n+    ///\n+    /// For example, a [`VecDeque`] implementation might na\u00efvely call\n+    /// [`as_slices`] and then [`hash_slice`] on each slice, but this\n+    /// is wrong since the two slices can change with a call to\n+    /// [`make_contiguous`] without affecting the [`PartialEq`]\n+    /// result. Since these slices aren't treated as singular\n+    /// units, and instead part of a larger deque, this method cannot\n+    /// be used.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -186,6 +201,12 @@ pub trait Hash {\n     /// Hash::hash_slice(&numbers, &mut hasher);\n     /// println!(\"Hash is {:x}!\", hasher.finish());\n     /// ```\n+    ///\n+    /// [`VecDeque`]: ../../std/collections/struct.VecDeque.html\n+    /// [`as_slices`]: ../../std/collections/struct.VecDeque.html#method.as_slices\n+    /// [`make_contiguous`]: ../../std/collections/struct.VecDeque.html#method.make_contiguous\n+    /// [`hash`]: Hash::hash\n+    /// [`hash_slice`]: Hash::hash_slice\n     #[stable(feature = \"hash_slice\", since = \"1.3.0\")]\n     fn hash_slice<H: Hasher>(data: &[Self], state: &mut H)\n     where\n@@ -221,6 +242,11 @@ pub use macros::Hash;\n /// instance (with [`write`] and [`write_u8`] etc.). Most of the time, `Hasher`\n /// instances are used in conjunction with the [`Hash`] trait.\n ///\n+/// This trait makes no assumptions about how the various `write_*` methods are\n+/// defined and implementations of [`Hash`] should not assume that they work one\n+/// way or another. You cannot assume, for example, that a [`write_u32`] call is\n+/// equivalent to four calls of [`write_u8`].\n+///\n /// # Examples\n ///\n /// ```\n@@ -240,6 +266,7 @@ pub use macros::Hash;\n /// [`finish`]: Hasher::finish\n /// [`write`]: Hasher::write\n /// [`write_u8`]: Hasher::write_u8\n+/// [`write_u32`]: Hasher::write_u32\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hasher {\n     /// Returns the hash value for the values written so far."}]}