{"sha": "8f7ba7a05864d9828e13433aca27f8baa43054fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmN2JhN2EwNTg2NGQ5ODI4ZTEzNDMzYWNhMjdmOGJhYTQzMDU0ZmQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-07T17:29:56Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:01:03Z"}, "message": "Clarify conditions for exhaustive integer range matching", "tree": {"sha": "1fa8ed022f532b23efd4a6f6ff0644320098be40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa8ed022f532b23efd4a6f6ff0644320098be40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f7ba7a05864d9828e13433aca27f8baa43054fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7ba7a05864d9828e13433aca27f8baa43054fd", "html_url": "https://github.com/rust-lang/rust/commit/8f7ba7a05864d9828e13433aca27f8baa43054fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f7ba7a05864d9828e13433aca27f8baa43054fd/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75685bef621a062a44110bed52b95cf7ce1beb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75685bef621a062a44110bed52b95cf7ce1beb7", "html_url": "https://github.com/rust-lang/rust/commit/c75685bef621a062a44110bed52b95cf7ce1beb7"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "4e511c17d4f2c55b50faf07459d682605382ca4e", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ba7a05864d9828e13433aca27f8baa43054fd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ba7a05864d9828e13433aca27f8baa43054fd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=8f7ba7a05864d9828e13433aca27f8baa43054fd", "patch": "@@ -630,6 +630,17 @@ impl<'tcx> Constructor<'tcx> {\n         }\n     }\n \n+    // Whether to evaluate a constructor using exhaustive integer matching. This is true if the\n+    // constructor is a range or constant with an integer type.\n+    fn is_range_and_should_match_exhaustively(&self, tcx: TyCtxt<'tcx>) -> bool {\n+        let ty = match self {\n+            ConstantValue(value, _) => value.ty,\n+            ConstantRange(_, _, ty, _, _) => ty,\n+            _ => return false,\n+        };\n+        IntRange::should_treat_range_exhaustively(tcx, ty)\n+    }\n+\n     fn variant_index_for_adt<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n@@ -1280,6 +1291,13 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n+    fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+        // Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching`\n+        // feature is enabled.\n+        IntRange::is_integral(ty)\n+            && (!ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching)\n+    }\n+\n     #[inline]\n     fn integral_size_and_signed_bias(tcx: TyCtxt<'tcx>, ty: Ty<'_>) -> Option<(Size, u128)> {\n         match ty.kind {\n@@ -1857,21 +1875,6 @@ fn slice_pat_covered_by_const<'tcx>(\n     Ok(true)\n }\n \n-// Whether to evaluate a constructor using exhaustive integer matching. This is true if the\n-// constructor is a range or constant with an integer type.\n-fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>) -> bool {\n-    let ty = match ctor {\n-        ConstantValue(value, _) => value.ty,\n-        ConstantRange(_, _, ty, _, _) => ty,\n-        _ => return false,\n-    };\n-    if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.kind {\n-        !ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching\n-    } else {\n-        false\n-    }\n-}\n-\n /// For exhaustive integer matching, some constructors are grouped within other constructors\n /// (namely integer typed values are grouped within ranges). However, when specialising these\n /// constructors, we want to be specialising for the underlying constructors (the integers), not\n@@ -1923,7 +1926,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n \n     for ctor in ctors.into_iter() {\n         match ctor {\n-            ConstantRange(..) if should_treat_range_exhaustively(tcx, &ctor) => {\n+            ConstantRange(..) if ctor.is_range_and_should_match_exhaustively(tcx) => {\n                 // We only care about finding all the subranges within the range of the constructor\n                 // range. Anything else is irrelevant, because it is guaranteed to result in\n                 // `NotUseful`, which is the default case anyway, and can be ignored.\n@@ -2342,7 +2345,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             // If the constructor is a:\n             // - Single value: add a row if the pattern contains the constructor.\n             // - Range: add a row if the constructor intersects the pattern.\n-            if should_treat_range_exhaustively(cx.tcx, constructor) {\n+            if constructor.is_range_and_should_match_exhaustively(cx.tcx) {\n                 match (\n                     IntRange::from_ctor(cx.tcx, cx.param_env, constructor),\n                     IntRange::from_pat(cx.tcx, cx.param_env, pat),"}]}