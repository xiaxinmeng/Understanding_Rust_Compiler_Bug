{"sha": "b7a741b5d0df5a57680aab14b4b6150803082983", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTc0MWI1ZDBkZjVhNTc2ODBhYWIxNGI0YjYxNTA4MDMwODI5ODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-26T22:07:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-26T22:07:15Z"}, "message": "rustc: Combine and unify regions", "tree": {"sha": "c58d8214ea331d9d1cbbcdb2e068337d1c09757a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58d8214ea331d9d1cbbcdb2e068337d1c09757a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a741b5d0df5a57680aab14b4b6150803082983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a741b5d0df5a57680aab14b4b6150803082983", "html_url": "https://github.com/rust-lang/rust/commit/b7a741b5d0df5a57680aab14b4b6150803082983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a741b5d0df5a57680aab14b4b6150803082983/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03086c53044a055f38b9d1038cecb40cfd2b8998", "url": "https://api.github.com/repos/rust-lang/rust/commits/03086c53044a055f38b9d1038cecb40cfd2b8998", "html_url": "https://github.com/rust-lang/rust/commit/03086c53044a055f38b9d1038cecb40cfd2b8998"}], "stats": {"total": 125, "additions": 88, "deletions": 37}, "files": [{"sha": "c0692e7c4a5aa21207028d8495f3403ec714f833", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 52, "deletions": 37, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b7a741b5d0df5a57680aab14b4b6150803082983/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a741b5d0df5a57680aab14b4b6150803082983/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=b7a741b5d0df5a57680aab14b4b6150803082983", "patch": "@@ -409,39 +409,9 @@ impl unify_methods for infer_ctxt {\n     }\n \n     fn regions(a: ty::region, b: ty::region) -> ures {\n-        alt (a, b) {\n-          (ty::re_var(_), _) | (_, ty::re_var(_)) {\n-            self.uok()  // FIXME: We need region variables!\n-          }\n-          (ty::re_inferred, _) | (_, ty::re_inferred) {\n-            fail \"tried to unify inferred regions\"\n-          }\n-          (ty::re_param(_), ty::re_param(_)) |\n-          (ty::re_self, ty::re_self) {\n-            if a == b {\n-                self.uok()\n-            } else {\n-                self.uerr(ty::terr_regions_differ(false, a, b))\n-            }\n-          }\n-          (ty::re_param(_), ty::re_block(_)) |\n-          (ty::re_self, ty::re_block(_)) {\n-            self.uok()\n-          }\n-          (ty::re_block(_), ty::re_param(_)) |\n-          (ty::re_block(_), ty::re_self) {\n-            self.uerr(ty::terr_regions_differ(false, a, b))\n-          }\n-          (ty::re_block(superblock), ty::re_block(subblock)) {\n-            // The region corresponding to an outer block is a subtype of the\n-            // region corresponding to an inner block.\n-            let rm = self.tcx.region_map;\n-            if region::scope_contains(rm, subblock, superblock) {\n-                self.uok()\n-            } else {\n-                self.uerr(ty::terr_regions_differ(false, a, b))\n-            }\n-          }\n+        alt combine_or_unify_regions(self.tcx, a, b, false) {\n+            ok(_)   { self.uok()   }\n+            err(e)  { self.uerr(e) }\n         }\n     }\n \n@@ -1214,6 +1184,47 @@ fn c_tys<C:combine>(\n     }\n }\n \n+fn combine_or_unify_regions(tcx: ty::ctxt,\n+                            a: ty::region,\n+                            b: ty::region,\n+                            contravariant_combine: bool) -> cres<ty::region> {\n+    alt (a, b) {\n+      (ty::re_var(_), _) | (_, ty::re_var(_)) {\n+        ok(a)   // FIXME: We need region variables!\n+      }\n+      (ty::re_inferred, _) | (_, ty::re_inferred) {\n+        fail \"tried to combine or unify inferred regions\"\n+      }\n+      (ty::re_param(_), ty::re_param(_)) |\n+      (ty::re_self, ty::re_self) {\n+        if a == b {\n+            ok(a)\n+        } else {\n+            err(ty::terr_regions_differ(false, a, b))\n+        }\n+      }\n+      (ty::re_param(_), ty::re_block(_)) |\n+      (ty::re_self, ty::re_block(_)) {\n+        ok(a)\n+      }\n+      (ty::re_block(_), ty::re_param(_)) |\n+      (ty::re_block(_), ty::re_self) {\n+        err(ty::terr_regions_differ(false, a, b))\n+      }\n+      (ty::re_block(block_a), ty::re_block(block_b)) {\n+        // The region corresponding to an outer block is a subtype of the\n+        // region corresponding to an inner block.\n+        let rm = tcx.region_map;\n+        let nca_opt = region::nearest_common_ancestor(rm, block_a, block_b);\n+        alt nca_opt {\n+            some(nca) if nca == block_b { ok(a) }\n+            some(nca) if contravariant_combine { ok(ty::re_block(nca)) }\n+            _ { err(ty::terr_regions_differ(false, a, b)) }\n+        }\n+      }\n+    }\n+}\n+\n impl of combine for lub {\n     fn infcx() -> infer_ctxt { *self }\n \n@@ -1232,10 +1243,6 @@ impl of combine for lub {\n         ok(b)\n     }\n \n-    fn c_regions(a: ty::region, _b: ty::region) -> cres<ty::region> {\n-        ok(a) // FIXME\n-    }\n-\n     fn c_mts(a: ty::mt, b: ty::mt) -> cres<ty::mt> {\n         let tcx = self.infcx().tcx;\n \n@@ -1302,6 +1309,10 @@ impl of combine for lub {\n           }\n         }\n     }\n+\n+    fn c_regions(a: ty::region, b: ty::region) -> cres<ty::region> {\n+        ret combine_or_unify_regions(self.tcx, a, b, true);\n+    }\n }\n \n impl of combine for glb {\n@@ -1410,4 +1421,8 @@ impl of combine for glb {\n           }\n         }\n     }\n+\n+    fn c_regions(a: ty::region, b: ty::region) -> cres<ty::region> {\n+        ret combine_or_unify_regions(self.tcx, a, b, false);\n+    }\n }"}, {"sha": "7afe2c266246a8ff277b577f5f2d4720a6c468c8", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7a741b5d0df5a57680aab14b4b6150803082983/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a741b5d0df5a57680aab14b4b6150803082983/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=b7a741b5d0df5a57680aab14b4b6150803082983", "patch": "@@ -84,6 +84,42 @@ fn scope_contains(region_map: @region_map, superscope: ast::node_id,\n     ret true;\n }\n \n+fn nearest_common_ancestor(region_map: @region_map, scope_a: ast::node_id,\n+                           scope_b: ast::node_id) -> option<ast::node_id> {\n+\n+    fn ancestors_of(region_map: @region_map, scope: ast::node_id)\n+                    -> [ast::node_id] {\n+        let mut result = [scope];\n+        let mut scope = scope;\n+        loop {\n+            alt region_map.parents.find(scope) {\n+                none { ret result; }\n+                some(superscope) {\n+                    result += [superscope];\n+                    scope = superscope;\n+                }\n+            }\n+        }\n+    }\n+\n+    if scope_a == scope_b { ret some(scope_a); }\n+\n+    let a_ancestors = ancestors_of(region_map, scope_a);\n+    let b_ancestors = ancestors_of(region_map, scope_b);\n+    let mut a_index = vec::len(a_ancestors) - 1u;\n+    let mut b_index = vec::len(b_ancestors) - 1u;\n+    while a_ancestors[a_index] == b_ancestors[b_index] {\n+        a_index -= 1u;\n+        b_index -= 1u;\n+    }\n+\n+    if a_index == vec::len(a_ancestors) {\n+        ret none;\n+    }\n+\n+    ret some(a_ancestors[a_index + 1u]);\n+}\n+\n fn get_inferred_region(cx: ctxt, sp: syntax::codemap::span) -> ty::region {\n     // We infer to the caller region if we're at item scope\n     // and to the block region if we're at block scope."}]}