{"sha": "d68c585b017303348a8187def7aa7687397e4725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGM1ODViMDE3MzAzMzQ4YTgxODdkZWY3YWE3Njg3Mzk3ZTQ3MjU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-03T20:39:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-03T20:39:52Z"}, "message": "Rollup merge of #38077 - GuillaumeGomez:ipaddr_doc, r=frewsxcv\n\nAdd missing examples for IpAddr enum\n\nr? @frewsxcv", "tree": {"sha": "57fd86ca9931ab3020026a1eb8a0c84cde67baaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57fd86ca9931ab3020026a1eb8a0c84cde67baaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68c585b017303348a8187def7aa7687397e4725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68c585b017303348a8187def7aa7687397e4725", "html_url": "https://github.com/rust-lang/rust/commit/d68c585b017303348a8187def7aa7687397e4725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68c585b017303348a8187def7aa7687397e4725/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf299315f6840fab93154d5a7af05f13980c7199", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf299315f6840fab93154d5a7af05f13980c7199", "html_url": "https://github.com/rust-lang/rust/commit/cf299315f6840fab93154d5a7af05f13980c7199"}, {"sha": "336e5dd33de28830410e0ffcda9339af619c2f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/336e5dd33de28830410e0ffcda9339af619c2f9b", "html_url": "https://github.com/rust-lang/rust/commit/336e5dd33de28830410e0ffcda9339af619c2f9b"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "c1e610f33fb705777a5979bc601832c6833bb819", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d68c585b017303348a8187def7aa7687397e4725/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68c585b017303348a8187def7aa7687397e4725/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=d68c585b017303348a8187def7aa7687397e4725", "patch": "@@ -79,8 +79,18 @@ pub enum Ipv6MulticastScope {\n \n impl IpAddr {\n     /// Returns true for the special 'unspecified' address ([IPv4], [IPv6]).\n+    ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_unspecified\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_unspecified\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)).is_unspecified(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)).is_unspecified(), true);\n+    /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n         match *self {\n@@ -90,8 +100,18 @@ impl IpAddr {\n     }\n \n     /// Returns true if this is a loopback address ([IPv4], [IPv6]).\n+    ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_loopback\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_loopback\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).is_loopback(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1)).is_loopback(), true);\n+    /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_loopback(&self) -> bool {\n         match *self {\n@@ -101,8 +121,23 @@ impl IpAddr {\n     }\n \n     /// Returns true if the address appears to be globally routable ([IPv4], [IPv6]).\n+    ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_global\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_global\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(IpAddr::V4(Ipv4Addr::new(80, 9, 12, 3)).is_global(), true);\n+    ///     assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(),\n+    ///                true);\n+    /// }\n+    /// ```\n     pub fn is_global(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_global(),\n@@ -111,8 +146,18 @@ impl IpAddr {\n     }\n \n     /// Returns true if this is a multicast address ([IPv4], [IPv6]).\n+    ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_multicast\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_multicast\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(224, 254, 0, 0)).is_multicast(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0)).is_multicast(), true);\n+    /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_multicast(&self) -> bool {\n         match *self {\n@@ -122,8 +167,23 @@ impl IpAddr {\n     }\n \n     /// Returns true if this address is in a range designated for documentation ([IPv4], [IPv6]).\n+    ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_documentation\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_documentation\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_documentation(), true);\n+    ///     assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0))\n+    ///                       .is_documentation(), true);\n+    /// }\n+    /// ```\n     pub fn is_documentation(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_documentation(),\n@@ -132,6 +192,20 @@ impl IpAddr {\n     }\n \n     /// Returns true if this address is a valid IPv4 address, false if it's a valid IPv6 address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ipaddr_checker)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv4(), true);\n+    ///     assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv4(),\n+    ///                false);\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ipaddr_checker\", issue = \"36949\")]\n     pub fn is_ipv4(&self) -> bool {\n         match *self {\n@@ -141,6 +215,20 @@ impl IpAddr {\n     }\n \n     /// Returns true if this address is a valid IPv6 address, false if it's a valid IPv4 address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ipaddr_checker)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv6(), false);\n+    ///     assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv6(),\n+    ///                true);\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ipaddr_checker\", issue = \"36949\")]\n     pub fn is_ipv6(&self) -> bool {\n         match *self {"}]}