{"sha": "986852911464df87088007e64780165cc538f9b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Njg1MjkxMTQ2NGRmODcwODgwMDdlNjQ3ODAxNjVjYzUzOGY5Yjk=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-04-06T23:30:18Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-04-07T00:20:23Z"}, "message": "Add `Sync` to the bounds in `io::Error`\n\nThis allows `io::Error` values to be stored in `Arc` properly.\n\nBecause this requires `Sync` of any value passed to `io::Error::new()`\nand modifies the relevant `convert::From` impls, this is a\n\n[breaking-change]\n\nFixes #24049.", "tree": {"sha": "004cda3bcaba29ffbf697686331c9c870ffaa011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004cda3bcaba29ffbf697686331c9c870ffaa011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986852911464df87088007e64780165cc538f9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986852911464df87088007e64780165cc538f9b9", "html_url": "https://github.com/rust-lang/rust/commit/986852911464df87088007e64780165cc538f9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986852911464df87088007e64780165cc538f9b9/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab8669ddad0432ef7279cc7f7b0b20d32785314", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab8669ddad0432ef7279cc7f7b0b20d32785314", "html_url": "https://github.com/rust-lang/rust/commit/aab8669ddad0432ef7279cc7f7b0b20d32785314"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "e2704581a5d0176710bf5d7b30d43caf04c79a30", "filename": "src/libstd/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/986852911464df87088007e64780165cc538f9b9/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986852911464df87088007e64780165cc538f9b9/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=986852911464df87088007e64780165cc538f9b9", "patch": "@@ -50,7 +50,7 @@\n use boxed::Box;\n use convert::From;\n use fmt::{self, Debug, Display};\n-use marker::Send;\n+use marker::{Send, Sync};\n use num;\n use option::Option;\n use option::Option::None;\n@@ -81,15 +81,15 @@ impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + 'a> From<E> for Box<Error + Send + 'a> {\n-    fn from(err: E) -> Box<Error + Send + 'a> {\n+impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<Error + Send + Sync + 'a> {\n+    fn from(err: E) -> Box<Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<String> for Box<Error + Send> {\n-    fn from(err: String) -> Box<Error + Send> {\n+impl From<String> for Box<Error + Send + Sync> {\n+    fn from(err: String) -> Box<Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n \n@@ -108,8 +108,8 @@ impl From<String> for Box<Error + Send> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> From<&'b str> for Box<Error + Send + 'a> {\n-    fn from(err: &'b str) -> Box<Error + Send + 'a> {\n+impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a> {\n+    fn from(err: &'b str) -> Box<Error + Send + Sync + 'a> {\n         From::from(String::from_str(err))\n     }\n }"}, {"sha": "192ac1da30a03fec7f81ccf1fbbe8fea71462f0c", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/986852911464df87088007e64780165cc538f9b9/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986852911464df87088007e64780165cc538f9b9/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=986852911464df87088007e64780165cc538f9b9", "patch": "@@ -12,7 +12,7 @@ use boxed::Box;\n use convert::Into;\n use error;\n use fmt;\n-use marker::Send;\n+use marker::{Send, Sync};\n use option::Option::{self, Some, None};\n use result;\n use sys;\n@@ -46,7 +46,7 @@ enum Repr {\n #[derive(Debug)]\n struct Custom {\n     kind: ErrorKind,\n-    error: Box<error::Error+Send>,\n+    error: Box<error::Error+Send+Sync>,\n }\n \n /// A list specifying general categories of I/O error.\n@@ -146,7 +146,7 @@ impl Error {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<E>(kind: ErrorKind, error: E) -> Error\n-        where E: Into<Box<error::Error+Send>>\n+        where E: Into<Box<error::Error+Send+Sync>>\n     {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n@@ -217,3 +217,8 @@ impl error::Error for Error {\n         }\n     }\n }\n+\n+fn _assert_error_is_sync_send() {\n+    fn _is_sync_send<T: Sync+Send>() {}\n+    _is_sync_send::<Error>();\n+}"}]}