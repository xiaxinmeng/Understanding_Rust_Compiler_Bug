{"sha": "9c34c140a76f4ddd26c6042e2d847827fee304b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzRjMTQwYTc2ZjRkZGQyNmM2MDQyZTJkODQ3ODI3ZmVlMzA0YjY=", "commit": {"author": {"name": "Tri Vo", "email": "trong@google.com", "date": "2021-02-08T07:48:21Z"}, "committer": {"name": "Tri Vo", "email": "trong@google.com", "date": "2021-02-08T08:24:45Z"}, "message": "HWASan documentation", "tree": {"sha": "764c5f600c3c21bd6878587492c3bc666fc00eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764c5f600c3c21bd6878587492c3bc666fc00eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c34c140a76f4ddd26c6042e2d847827fee304b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c34c140a76f4ddd26c6042e2d847827fee304b6", "html_url": "https://github.com/rust-lang/rust/commit/9c34c140a76f4ddd26c6042e2d847827fee304b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c34c140a76f4ddd26c6042e2d847827fee304b6/comments", "author": null, "committer": null, "parents": [{"sha": "c7d9bffe76477a2f79c468b07e5eaf82525eea99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d9bffe76477a2f79c468b07e5eaf82525eea99", "html_url": "https://github.com/rust-lang/rust/commit/c7d9bffe76477a2f79c468b07e5eaf82525eea99"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "4f7a101d2acbd09a30404b845a46691b16bbb2a2", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9c34c140a76f4ddd26c6042e2d847827fee304b6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c34c140a76f4ddd26c6042e2d847827fee304b6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=9c34c140a76f4ddd26c6042e2d847827fee304b6", "patch": "@@ -7,12 +7,15 @@ The tracking issue for this feature is: [#39699](https://github.com/rust-lang/ru\n This feature allows for use of one of following sanitizers:\n \n * [AddressSanitizer][clang-asan] a fast memory error detector.\n+* [HWAddressSanitizer][clang-hwasan] a memory error detector similar to\n+  AddressSanitizer, but based on partial hardware assistance.\n * [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n-To enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=leak`,\n-`-Zsanitizer=memory` or `-Zsanitizer=thread`.\n+To enable a sanitizer compile with `-Zsanitizer=address`,\n+`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory` or\n+`-Zsanitizer=thread`.\n \n # AddressSanitizer\n \n@@ -174,6 +177,86 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n ==39249==ABORTING\n ```\n \n+# HWAddressSanitizer\n+\n+HWAddressSanitizer is a newer variant of AddressSanitizer that consumes much\n+less memory.\n+\n+HWAddressSanitizer is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+\n+HWAddressSanitizer requires `tagged-globals` target feature to instrument\n+globals. To enable this target feature compile with `-C\n+target-feature=+tagged-globals`\n+\n+## Example\n+\n+Heap buffer overflow:\n+\n+```rust\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}\n+```\n+\n+```shell\n+$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C\n+linker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\n+aarch64-unknown-linux-gnu\n+```\n+\n+```shell\n+$ ./main\n+==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\n+READ of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n+    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n+    ...\n+\n+[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n+0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\n+allocated here:\n+    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n+    ...\n+\n+Thread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\n+Memory tags around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+Tags for short granules around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+See https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\n+Registers where the failure occurred (pc 0xaaaae0ae4a98):\n+    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n+    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n+    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n+    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n+    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n+    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n+    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n+    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\n+SUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n+```\n+\n # LeakSanitizer\n \n LeakSanitizer is run-time memory leak detector.\n@@ -321,11 +404,13 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n \n * [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n * [AddressSanitizer in Clang][clang-asan]\n+* [HWAddressSanitizer in Clang][clang-hwasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n * [ThreadSanitizer in Clang][clang-tsan]\n \n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n+[clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}]}