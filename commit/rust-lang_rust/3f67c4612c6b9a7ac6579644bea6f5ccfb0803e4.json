{"sha": "3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjdjNDYxMmM2YjlhN2FjNjU3OTY0NGJlYTZmNWNjZmIwODAzZTQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T21:31:02Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T21:31:02Z"}, "message": "Refactor writing ByValPair to pointers.", "tree": {"sha": "7736ed9ed47b5fc028b845fb4a56fd5b8f04814f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7736ed9ed47b5fc028b845fb4a56fd5b8f04814f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "html_url": "https://github.com/rust-lang/rust/commit/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1094f6c1e59f5cc87c354c7790cbf96c377b53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1094f6c1e59f5cc87c354c7790cbf96c377b53f", "html_url": "https://github.com/rust-lang/rust/commit/b1094f6c1e59f5cc87c354c7790cbf96c377b53f"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "0380c0b01822c89e22e465a9c7822124667fc28d", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "patch": "@@ -1073,20 +1073,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Value::ByRef(ptr) => Ok(ptr),\n \n             Value::ByVal(primval) => {\n-                let size = self.type_size(ty);\n-                let align = self.type_align(ty);\n-                let ptr = self.memory.allocate(size, align)?;\n+                let ptr = self.alloc_ptr(ty)?;\n                 self.memory.write_primval(ptr, primval)?;\n                 Ok(ptr)\n             }\n \n             Value::ByValPair(a, b) => {\n-                let size = self.type_size(ty);\n-                let align = self.type_align(ty);\n-                let ptr = self.memory.allocate(size, align)?;\n-                let ptr_size = self.memory.pointer_size() as isize;\n-                self.memory.write_primval(ptr, a)?;\n-                self.memory.write_primval(ptr.offset(ptr_size), b)?;\n+                let ptr = self.alloc_ptr(ty)?;\n+                self.write_pair_to_ptr(a, b, ptr, ty)?;\n                 Ok(ptr)\n             }\n         }\n@@ -1190,16 +1184,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match value {\n             Value::ByRef(ptr) => self.copy(ptr, dest, dest_ty),\n             Value::ByVal(primval) => self.memory.write_primval(dest, primval),\n-            Value::ByValPair(a, b) => {\n-                assert_eq!(self.get_field_count(dest_ty)?, 2);\n-                let field_0 = self.get_field_offset(dest_ty, 0)?.bytes() as isize;\n-                let field_1 = self.get_field_offset(dest_ty, 1)?.bytes() as isize;\n-                self.memory.write_primval(dest.offset(field_0), a)?;\n-                self.memory.write_primval(dest.offset(field_1), b)\n-            }\n+            Value::ByValPair(a, b) => self.write_pair_to_ptr(a, b, dest, dest_ty),\n         }\n     }\n \n+    fn write_pair_to_ptr(\n+        &mut self,\n+        a: PrimVal,\n+        b: PrimVal,\n+        ptr: Pointer,\n+        ty: Ty<'tcx>\n+    ) -> EvalResult<'tcx, ()> {\n+        assert_eq!(self.get_field_count(ty)?, 2);\n+        let field_0 = self.get_field_offset(ty, 0)?.bytes() as isize;\n+        let field_1 = self.get_field_offset(ty, 1)?.bytes() as isize;\n+        self.memory.write_primval(ptr.offset(field_0), a)?;\n+        self.memory.write_primval(ptr.offset(field_1), b)?;\n+        Ok(())\n+    }\n+\n     fn read_value(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n         use syntax::ast::FloatTy;\n "}]}