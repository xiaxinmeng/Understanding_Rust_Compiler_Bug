{"sha": "0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzc0M2VkMTJlN2NhNzJlY2E1OWVmMmE2ZWFkY2ZhYmYzODViNGE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-02T14:32:01Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-23T11:09:58Z"}, "message": "Use ConstCx in the promoted collector", "tree": {"sha": "bceba78ad99ba8e4d706865d0a0905c2978548a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bceba78ad99ba8e4d706865d0a0905c2978548a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "html_url": "https://github.com/rust-lang/rust/commit/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f7a59eaa2a6c71487373964ffeccf539de5228", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7a59eaa2a6c71487373964ffeccf539de5228", "html_url": "https://github.com/rust-lang/rust/commit/f0f7a59eaa2a6c71487373964ffeccf539de5228"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "ab5a0d99b75d7e6a341ca9caf20e0c6d45a2eef9", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "patch": "@@ -62,7 +62,8 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         let def_id = src.def_id();\n \n         let mut rpo = traversal::reverse_postorder(body);\n-        let (temps, all_candidates) = collect_temps_and_candidates(tcx, body, &mut rpo);\n+        let ccx = ConstCx::new(tcx, def_id, body);\n+        let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n \n         let promotable_candidates = validate_candidates(tcx, body, def_id, &temps, &all_candidates);\n \n@@ -139,8 +140,7 @@ fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Vec<usize>> {\n }\n \n struct Collector<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n+    ccx: &'a ConstCx<'a, 'tcx>,\n     temps: IndexVec<Local, TempState>,\n     candidates: Vec<Candidate>,\n     span: Span,\n@@ -150,7 +150,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n     fn visit_local(&mut self, &index: &Local, context: PlaceContext, location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n-        match self.body.local_kind(index) {\n+        match self.ccx.body.local_kind(index) {\n             LocalKind::Temp | LocalKind::ReturnPointer => {}\n             LocalKind::Arg | LocalKind::Var => return,\n         }\n@@ -203,7 +203,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n             Rvalue::Ref(..) => {\n                 self.candidates.push(Candidate::Ref(location));\n             }\n-            Rvalue::Repeat(..) if self.tcx.features().const_in_array_repeat_expressions => {\n+            Rvalue::Repeat(..) if self.ccx.tcx.features().const_in_array_repeat_expressions => {\n                 // FIXME(#49147) only promote the element when it isn't `Copy`\n                 // (so that code that can copy it at runtime is unaffected).\n                 self.candidates.push(Candidate::Repeat(location));\n@@ -216,10 +216,10 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n         self.super_terminator_kind(kind, location);\n \n         if let TerminatorKind::Call { ref func, .. } = *kind {\n-            if let ty::FnDef(def_id, _) = func.ty(self.body, self.tcx).kind {\n-                let fn_sig = self.tcx.fn_sig(def_id);\n+            if let ty::FnDef(def_id, _) = func.ty(self.ccx.body, self.ccx.tcx).kind {\n+                let fn_sig = self.ccx.tcx.fn_sig(def_id);\n                 if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                    let name = self.tcx.item_name(def_id);\n+                    let name = self.ccx.tcx.item_name(def_id);\n                     // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n                     if name.as_str().starts_with(\"simd_shuffle\") {\n                         self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n@@ -228,7 +228,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n                     }\n                 }\n \n-                if let Some(constant_args) = args_required_const(self.tcx, def_id) {\n+                if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n                     for index in constant_args {\n                         self.candidates.push(Candidate::Argument { bb: location.block, index });\n                     }\n@@ -243,16 +243,14 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n }\n \n pub fn collect_temps_and_candidates(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n+    ccx: &ConstCx<'mir, 'tcx>,\n     rpo: &mut ReversePostorder<'_, 'tcx>,\n ) -> (IndexVec<Local, TempState>, Vec<Candidate>) {\n     let mut collector = Collector {\n-        tcx,\n-        body,\n-        temps: IndexVec::from_elem(TempState::Undefined, &body.local_decls),\n+        temps: IndexVec::from_elem(TempState::Undefined, &ccx.body.local_decls),\n         candidates: vec![],\n-        span: body.span,\n+        span: ccx.body.span,\n+        ccx,\n     };\n     for (bb, data) in rpo {\n         collector.visit_basic_block_data(bb, data);\n@@ -1151,7 +1149,7 @@ crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n     operand: &Operand<'tcx>,\n ) -> bool {\n     let mut rpo = traversal::reverse_postorder(&ccx.body);\n-    let (temps, _) = collect_temps_and_candidates(ccx.tcx, &ccx.body, &mut rpo);\n+    let (temps, _) = collect_temps_and_candidates(&ccx, &mut rpo);\n     let validator = Validator { ccx, temps: &temps, explicit: false };\n \n     let should_promote = validator.validate_operand(operand).is_ok();"}]}