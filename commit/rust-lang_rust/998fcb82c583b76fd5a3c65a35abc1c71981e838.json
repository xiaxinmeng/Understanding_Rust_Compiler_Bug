{"sha": "998fcb82c583b76fd5a3c65a35abc1c71981e838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OGZjYjgyYzU4M2I3NmZkNWEzYzY1YTM1YWJjMWM3MTk4MWU4Mzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-10T01:36:55Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-10T01:36:55Z"}, "message": "Reword and reformat various parts.", "tree": {"sha": "756846d5de53d56d72218d494239bd0a0641e451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756846d5de53d56d72218d494239bd0a0641e451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/998fcb82c583b76fd5a3c65a35abc1c71981e838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/998fcb82c583b76fd5a3c65a35abc1c71981e838", "html_url": "https://github.com/rust-lang/rust/commit/998fcb82c583b76fd5a3c65a35abc1c71981e838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/998fcb82c583b76fd5a3c65a35abc1c71981e838/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69ad6703f769b47c07edb8a87d4a2ce6ade1d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69ad6703f769b47c07edb8a87d4a2ce6ade1d31", "html_url": "https://github.com/rust-lang/rust/commit/a69ad6703f769b47c07edb8a87d4a2ce6ade1d31"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "02c86a2a676aca1d6f09fd89555eaea4d4ca4040", "filename": "tex/paper/miri.tex", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/998fcb82c583b76fd5a3c65a35abc1c71981e838/tex%2Fpaper%2Fmiri.tex", "raw_url": "https://github.com/rust-lang/rust/raw/998fcb82c583b76fd5a3c65a35abc1c71981e838/tex%2Fpaper%2Fmiri.tex", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tex%2Fpaper%2Fmiri.tex?ref=998fcb82c583b76fd5a3c65a35abc1c71981e838", "patch": "@@ -9,6 +9,12 @@\n \\usepackage{relsize}\n \\usepackage{xcolor}\n \n+\\setmonofont{Source Code Pro}[\n+  BoldFont={* Medium},\n+  BoldItalicFont={* Medium Italic},\n+  Scale=MatchLowercase,\n+]\n+\n \\newcommand{\\rust}[1]{\\mintinline{rust}{#1}}\n \n \\begin{document}\n@@ -20,6 +26,8 @@\n \\date{April 8th, 2016}\n \\maketitle\n \n+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n+\n \\section{Abstract}\n \n The increasing need for safe low-level code in contexts like operating systems and browsers is\n@@ -37,58 +45,65 @@ \\section{Abstract}\n surprisingly effective approach for supporting a large proportion of Rust's features in compile-time\n execution.\n \n+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n+\n \\section{Background}\n \n-The Rust compiler (\\texttt{rustc}) generates an instance of \\rust{Mir} [\\autoref{fig:mir}] for each\n-function. Each \\rust{Mir} structure represents a control-flow graph for a given function, and\n-contains a list of ``basic blocks'' which in turn contain a list of statements followed by a single\n-terminator. Each statement is of the form \\rust{lvalue = rvalue}. An \\rust{Lvalue} is used for\n-referencing variables and calculating addresses such as when dereferencing pointers, accessing\n-fields, or indexing arrays. An \\rust{Rvalue} represents the core set of operations possible in MIR,\n-including reading a value from an lvalue, performing math operations, creating new pointers,\n-structs, and arrays, and so on. Finally, a terminator decides where control will flow next,\n-optionally based on a boolean or some other condition.\n+The Rust compiler generates an instance of \\rust{Mir} for each function [\\autoref{fig:mir}]. Each\n+\\rust{Mir} structure represents a control-flow graph for a given function, and contains a list of\n+``basic blocks'' which in turn contain a list of statements followed by a single terminator. Each\n+statement is of the form \\rust{lvalue = rvalue}. An \\rust{Lvalue} is used for referencing variables\n+and calculating addresses such as when dereferencing pointers, accessing fields, or indexing arrays.\n+An \\rust{Rvalue} represents the core set of operations possible in MIR, including reading a value\n+from an lvalue, performing math operations, creating new pointers, structs, and arrays, and so on.\n+Finally, a terminator decides where control will flow next, optionally based on a boolean or some\n+other condition.\n \n \\begin{figure}[ht]\n   \\begin{minted}[autogobble]{rust}\n     struct Mir {\n-      basic_blocks: Vec<BasicBlockData>,\n-      // ...\n+        basic_blocks: Vec<BasicBlockData>,\n+        // ...\n     }\n+\n     struct BasicBlockData {\n-      statements: Vec<Statement>,\n-      terminator: Terminator,\n-      // ...\n+        statements: Vec<Statement>,\n+        terminator: Terminator,\n+        // ...\n     }\n+\n     struct Statement {\n-      lvalue: Lvalue,\n-      rvalue: Rvalue\n+        lvalue: Lvalue,\n+        rvalue: Rvalue\n     }\n+\n     enum Terminator {\n-      Goto { target: BasicBlock },\n-      If {\n-        cond: Operand,\n-        targets: [BasicBlock; 2]\n-      },\n-      // ...\n+        Goto { target: BasicBlock },\n+        If {\n+            cond: Operand,\n+            targets: [BasicBlock; 2]\n+        },\n+        // ...\n     }\n   \\end{minted}\n   \\caption{MIR (simplified)}\n   \\label{fig:mir}\n \\end{figure}\n \n+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n+\n \\section{First implementation}\n \n \\subsection{Basic operation}\n \n-Initially, I wrote a simple version of Miri that was quite capable despite its flaws. The structure\n-of the interpreter essentially mirrors the structure of MIR itself. Miri starts executing a function\n-by iterating the list of statements in the starting basic block, matching over the lvalue to produce\n-a pointer and matching over the rvalue to decide what to write into that pointer. Evaluating the\n-rvalue may generally involve reads (such as for the left and right hand side of a binary operation)\n-or construction of new values. Upon reaching the terminator, a similar matching is done and a new\n-basic block is selected. Finally, Miri returns to the top of the main interpreter loop and this\n-entire process repeats, reading statements from the new block.\n+Initially, I wrote a simple version of Miri\\footnote{\\url{https://github.com/tsion/miri}} that was\n+quite capable despite its flaws. The structure of the interpreter closely mirrors the structure of\n+MIR itself. It starts executing a function by iterating the statement list in the starting basic\n+block, matching over the lvalue to produce a pointer and matching over the rvalue to decide what to\n+write into that pointer. Evaluating the rvalue may involve reads (such as for the two sides of a\n+binary operation) or construction of new values. Upon reaching the terminator, a similar matching is\n+done and a new basic block is selected. Finally, Miri returns to the top of the main interpreter\n+loop and this entire process repeats, reading statements from the new block.\n \n \\subsection{Function calls}\n \n@@ -102,9 +117,9 @@ \\subsection{Function calls}\n that Miri called returns, rendering the call stack empty.\n \n It should be noted that Miri does not itself recurse when a function is called; it merely pushes a\n-virtual stack frame and jumps to the top of the interpreter loop. This property implies that Miri\n-can interpret deeply recursive programs without crashing. Alternately, Miri could set a stack\n-depth limit and return an error when a program exceeds it.\n+virtual stack frame and jumps to the top of the interpreter loop. Consequently, Miri can interpret\n+deeply recursive programs without crashing. It could also set a stack depth limit and report an\n+error when a program exceeds it.\n \n \\subsection{Flaws}\n \n@@ -127,7 +142,7 @@ \\subsection{Flaws}\n \n \\section{Data layout}\n \n-\\blindtext\n+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n \n \\section{Future work}\n "}]}