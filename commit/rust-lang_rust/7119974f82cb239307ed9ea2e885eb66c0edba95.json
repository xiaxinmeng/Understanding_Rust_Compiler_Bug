{"sha": "7119974f82cb239307ed9ea2e885eb66c0edba95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTk5NzRmODJjYjIzOTMwN2VkOWVhMmU4ODVlYjY2YzBlZGJhOTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-20T13:19:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:06:28Z"}, "message": "Move unsafe destructor check from kind.rs into wf.rs", "tree": {"sha": "99e64cda462319d774008198af11bd34e4fde020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e64cda462319d774008198af11bd34e4fde020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7119974f82cb239307ed9ea2e885eb66c0edba95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7119974f82cb239307ed9ea2e885eb66c0edba95", "html_url": "https://github.com/rust-lang/rust/commit/7119974f82cb239307ed9ea2e885eb66c0edba95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7119974f82cb239307ed9ea2e885eb66c0edba95/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31623b0e42e73ef2c9411445d3172e2e9c9e467", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31623b0e42e73ef2c9411445d3172e2e9c9e467", "html_url": "https://github.com/rust-lang/rust/commit/c31623b0e42e73ef2c9411445d3172e2e9c9e467"}], "stats": {"total": 161, "additions": 78, "deletions": 83}, "files": [{"sha": "a3ca3802e47f843e7c73145acdede3ad8cbd261a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -130,7 +130,6 @@ register_diagnostics!(\n     E0121,\n     E0122,\n     E0124,\n-    E0125,\n     E0126,\n     E0127,\n     E0128,"}, {"sha": "b065e09692c60fe193e1c862ee62efd3ecbbc19d", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -9,15 +9,11 @@\n // except according to those terms.\n \n use middle::mem_categorization::Typer;\n-use middle::subst;\n use middle::ty;\n-use middle::ty_fold::TypeFoldable;\n-use middle::ty_fold;\n use util::ppaux::{ty_to_string};\n use util::ppaux::UserString;\n \n use syntax::ast::*;\n-use syntax::attr;\n use syntax::codemap::Span;\n use syntax::print::pprust::{expr_to_string, ident_to_string};\n use syntax::visit::Visitor;\n@@ -48,10 +44,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         check_ty(self, t);\n     }\n \n-    fn visit_item(&mut self, i: &Item) {\n-        check_item(self, i);\n-    }\n-\n     fn visit_pat(&mut self, p: &Pat) {\n         check_pat(self, p);\n     }\n@@ -65,79 +57,6 @@ pub fn check_crate(tcx: &ty::ctxt) {\n     tcx.sess.abort_if_errors();\n }\n \n-struct EmptySubstsFolder<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>\n-}\n-impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for EmptySubstsFolder<'a, 'tcx> {\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n-        self.tcx\n-    }\n-    fn fold_substs(&mut self, _: &subst::Substs) -> subst::Substs {\n-        subst::Substs::empty()\n-    }\n-}\n-\n-fn check_struct_safe_for_destructor(cx: &mut Context,\n-                                    span: Span,\n-                                    struct_did: DefId) {\n-    let struct_tpt = ty::lookup_item_type(cx.tcx, struct_did);\n-    if !struct_tpt.generics.has_type_params(subst::TypeSpace)\n-      && !struct_tpt.generics.has_region_params(subst::TypeSpace) {\n-        let mut folder = EmptySubstsFolder { tcx: cx.tcx };\n-        if !ty::type_is_sendable(cx.tcx, struct_tpt.ty.fold_with(&mut folder)) {\n-            span_err!(cx.tcx.sess, span, E0125,\n-                      \"cannot implement a destructor on a \\\n-                       structure or enumeration that does not satisfy Send\");\n-            span_note!(cx.tcx.sess, span,\n-                       \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n-                        to force the compiler to allow this\");\n-        }\n-    } else {\n-        span_err!(cx.tcx.sess, span, E0141,\n-                  \"cannot implement a destructor on a structure \\\n-                   with type parameters\");\n-        span_note!(cx.tcx.sess, span,\n-                   \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n-                    to force the compiler to allow this\");\n-    }\n-}\n-\n-fn check_impl_of_trait(cx: &mut Context, it: &Item, trait_ref: &TraitRef, self_type: &Ty) {\n-    let ast_trait_def = *cx.tcx.def_map.borrow()\n-                              .find(&trait_ref.ref_id)\n-                              .expect(\"trait ref not in def map!\");\n-    let trait_def_id = ast_trait_def.def_id();\n-\n-    // If this is a destructor, check kinds.\n-    if cx.tcx.lang_items.drop_trait() == Some(trait_def_id) &&\n-        !attr::contains_name(it.attrs.as_slice(), \"unsafe_destructor\")\n-    {\n-        match self_type.node {\n-            TyPath(_, ref bounds, path_node_id) => {\n-                assert!(bounds.is_none());\n-                let struct_def = cx.tcx.def_map.borrow().get_copy(&path_node_id);\n-                let struct_did = struct_def.def_id();\n-                check_struct_safe_for_destructor(cx, self_type.span, struct_did);\n-            }\n-            _ => {\n-                cx.tcx.sess.span_bug(self_type.span,\n-                    \"the self type for the Drop trait impl is not a path\");\n-            }\n-        }\n-    }\n-}\n-\n-fn check_item(cx: &mut Context, item: &Item) {\n-    match item.node {\n-        ItemImpl(_, Some(ref trait_ref), ref self_type, _) => {\n-            check_impl_of_trait(cx, item, trait_ref, &**self_type);\n-        }\n-        _ => {}\n-    }\n-\n-    visit::walk_item(cx, item)\n-}\n-\n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the NodeId for some expression that creates the\n // closure."}, {"sha": "4ce32383525a394d35d196ed5e672e19bac99f05", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -69,6 +69,9 @@ pub enum ObligationCauseCode {\n     /// Obligation incurred due to an object cast.\n     ObjectCastObligation(/* Object type */ ty::t),\n \n+    /// To implement drop, type must be sendable.\n+    DropTrait,\n+\n     /// Various cases where expressions must be sized/copy/etc:\n     AssignmentLhsSized,        // L = X implies that L is Sized\n     StructInitializerSized,    // S { ... } must be Sized"}, {"sha": "e0bf04a1cc3b37864383e6e10f3311c1031da9b9", "filename": "src/librustc/middle/typeck/check/vtable2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -390,5 +390,13 @@ fn note_obligation_cause(fcx: &FnCtxt,\n                 obligation.cause.span,\n                 \"structs must have a statically known size to be initialized\");\n         }\n+        traits::DropTrait => {\n+            span_note!(tcx.sess, obligation.cause.span,\n+                      \"cannot implement a destructor on a \\\n+                      structure or enumeration that does not satisfy Send\");\n+            span_note!(tcx.sess, obligation.cause.span,\n+                       \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n+                       to force the compiler to allow this\");\n+        }\n     }\n }"}, {"sha": "8a7de70ea2b5b939c17183f4c51fd7207371cd1c", "filename": "src/librustc/middle/typeck/check/wf.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::subst;\n use middle::subst::{Subst};\n use middle::traits;\n use middle::ty;\n@@ -21,6 +22,7 @@ use util::ppaux::Repr;\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::ast_util::{local_def};\n+use syntax::attr;\n use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -165,6 +167,22 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             };\n             let trait_ref = (*trait_ref).subst(fcx.tcx(), &fcx.inh.param_env.free_substs);\n \n+            // There are special rules that apply to drop.\n+            if\n+                fcx.tcx().lang_items.drop_trait() == Some(trait_ref.def_id) &&\n+                !attr::contains_name(item.attrs.as_slice(), \"unsafe_destructor\")\n+            {\n+                match ty::get(self_ty).sty {\n+                    ty::ty_struct(def_id, _) |\n+                    ty::ty_enum(def_id, _) => {\n+                        check_struct_safe_for_destructor(fcx, item.span, self_ty, def_id);\n+                    }\n+                    _ => {\n+                        // Coherence already reports an error in this case.\n+                    }\n+                }\n+            }\n+\n             // We are stricter on the trait-ref in an impl than the\n             // self-type.  In particular, we enforce region\n             // relationships. The reason for this is that (at least\n@@ -362,3 +380,31 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n         t // we're not folding to produce a new type, so just return `t` here\n     }\n }\n+\n+///////////////////////////////////////////////////////////////////////////\n+// Special drop trait checking\n+\n+fn check_struct_safe_for_destructor(fcx: &FnCtxt,\n+                                    span: Span,\n+                                    self_ty: ty::t,\n+                                    struct_did: ast::DefId) {\n+    let struct_tpt = ty::lookup_item_type(fcx.tcx(), struct_did);\n+    if !struct_tpt.generics.has_type_params(subst::TypeSpace)\n+        && !struct_tpt.generics.has_region_params(subst::TypeSpace)\n+    {\n+        let cause = traits::ObligationCause::new(span, traits::DropTrait);\n+        fcx.register_obligation(\n+            traits::obligation_for_builtin_bound(\n+                fcx.tcx(),\n+                cause,\n+                self_ty,\n+                ty::BoundSend));\n+    } else {\n+        span_err!(fcx.tcx().sess, span, E0141,\n+                  \"cannot implement a destructor on a structure \\\n+                       with type parameters\");\n+            span_note!(fcx.tcx().sess, span,\n+                       \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n+                        to force the compiler to allow this\");\n+    }\n+}"}, {"sha": "e50bb8fbede657c63e537e6d596fa771a392c4eb", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7119974f82cb239307ed9ea2e885eb66c0edba95/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=7119974f82cb239307ed9ea2e885eb66c0edba95", "patch": "@@ -16,7 +16,27 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-//~^ ERROR cannot implement a destructor on a structure or enumeration that does not satisfy Send\n+//~^ ERROR the trait `core::kinds::Send` is not implemented for the type `Foo`\n+//~^^ NOTE cannot implement a destructor on a structure or enumeration that does not satisfy Send\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+struct Bar<'a> {\n+    f: &'a int,\n+}\n+\n+impl<'a> Drop for Bar<'a> {\n+//~^ ERROR E0141\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+struct Baz {\n+    f: &'static int,\n+}\n+\n+impl Drop for Baz {\n     fn drop(&mut self) {\n     }\n }"}]}