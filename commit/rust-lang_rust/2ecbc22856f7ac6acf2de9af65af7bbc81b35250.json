{"sha": "2ecbc22856f7ac6acf2de9af65af7bbc81b35250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlY2JjMjI4NTZmN2FjNmFjZjJkZTlhZjY1YWY3YmJjODFiMzUyNTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-01T01:39:43Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-01T14:56:13Z"}, "message": "fix a few more typeck normalization cases\n\nI'll like @nikomatsakis or someone to look at the unsolved variable\ncase.", "tree": {"sha": "b93979dc5ab2db82ed4df61883876a060246762d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93979dc5ab2db82ed4df61883876a060246762d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ecbc22856f7ac6acf2de9af65af7bbc81b35250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ecbc22856f7ac6acf2de9af65af7bbc81b35250", "html_url": "https://github.com/rust-lang/rust/commit/2ecbc22856f7ac6acf2de9af65af7bbc81b35250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ecbc22856f7ac6acf2de9af65af7bbc81b35250/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ff9aa83fa014f77ffe8fa5a12268a033c95694", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ff9aa83fa014f77ffe8fa5a12268a033c95694", "html_url": "https://github.com/rust-lang/rust/commit/34ff9aa83fa014f77ffe8fa5a12268a033c95694"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "c42ef05bc5a7799d15ce1406c512961891c9b26b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ecbc22856f7ac6acf2de9af65af7bbc81b35250/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ecbc22856f7ac6acf2de9af65af7bbc81b35250/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2ecbc22856f7ac6acf2de9af65af7bbc81b35250", "patch": "@@ -2092,10 +2092,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             Neither => {\n                                 if let Some(default) = default_map.get(ty) {\n                                     let default = default.clone();\n+                                    let default_ty = self.normalize_associated_types_in(\n+                                        default.origin_span, &default.ty);\n                                     match self.eq_types(false,\n                                                         &self.misc(default.origin_span),\n                                                         ty,\n-                                                        default.ty) {\n+                                                        default_ty) {\n                                         Ok(ok) => self.register_infer_ok_obligations(ok),\n                                         Err(_) => conflicts.push((*ty, default)),\n                                     }\n@@ -4396,7 +4398,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else if !infer_types && def.has_default {\n                 // No type parameter provided, but a default exists.\n                 let default = self.tcx.item_type(def.def_id);\n-                default.subst_spanned(self.tcx, substs, Some(span))\n+                self.normalize_ty(\n+                    span,\n+                    default.subst_spanned(self.tcx, substs, Some(span))\n+                )\n             } else {\n                 // No type parameters were provided, we can infer all.\n                 // This can also be reached in some error cases:"}]}