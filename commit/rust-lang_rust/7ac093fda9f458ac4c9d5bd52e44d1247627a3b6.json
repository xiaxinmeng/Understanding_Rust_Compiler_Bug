{"sha": "7ac093fda9f458ac4c9d5bd52e44d1247627a3b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzA5M2ZkYTlmNDU4YWM0YzlkNWJkNTJlNDRkMTI0NzYyN2EzYjY=", "commit": {"author": {"name": "Dillon Amburgey", "email": "dillona@dillona.com", "date": "2020-04-25T19:43:19Z"}, "committer": {"name": "Dillon Amburgey", "email": "dillona@dillona.com", "date": "2020-04-25T20:30:48Z"}, "message": "Detect git version before attempting to use --progress\n\nOtherwise each update is run twice and errors are printed", "tree": {"sha": "1ab09398fc96bc9fe2546ab8880f64a5fe616318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab09398fc96bc9fe2546ab8880f64a5fe616318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6", "html_url": "https://github.com/rust-lang/rust/commit/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6/comments", "author": {"login": "dillona", "id": 135138, "node_id": "MDQ6VXNlcjEzNTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillona", "html_url": "https://github.com/dillona", "followers_url": "https://api.github.com/users/dillona/followers", "following_url": "https://api.github.com/users/dillona/following{/other_user}", "gists_url": "https://api.github.com/users/dillona/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillona/subscriptions", "organizations_url": "https://api.github.com/users/dillona/orgs", "repos_url": "https://api.github.com/users/dillona/repos", "events_url": "https://api.github.com/users/dillona/events{/privacy}", "received_events_url": "https://api.github.com/users/dillona/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dillona", "id": 135138, "node_id": "MDQ6VXNlcjEzNTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillona", "html_url": "https://github.com/dillona", "followers_url": "https://api.github.com/users/dillona/followers", "following_url": "https://api.github.com/users/dillona/following{/other_user}", "gists_url": "https://api.github.com/users/dillona/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillona/subscriptions", "organizations_url": "https://api.github.com/users/dillona/orgs", "repos_url": "https://api.github.com/users/dillona/repos", "events_url": "https://api.github.com/users/dillona/events{/privacy}", "received_events_url": "https://api.github.com/users/dillona/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659951c4a0d7450e43f61c61c0e87d0ceae17087", "url": "https://api.github.com/repos/rust-lang/rust/commits/659951c4a0d7450e43f61c61c0e87d0ceae17087", "html_url": "https://github.com/rust-lang/rust/commit/659951c4a0d7450e43f61c61c0e87d0ceae17087"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "2aa3f9c7ec04b3859d5b4a47264a9b36e1ccf874", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7ac093fda9f458ac4c9d5bd52e44d1247627a3b6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7ac093fda9f458ac4c9d5bd52e44d1247627a3b6", "patch": "@@ -2,6 +2,7 @@\n import argparse\n import contextlib\n import datetime\n+import distutils.version\n import hashlib\n import os\n import re\n@@ -331,6 +332,7 @@ def __init__(self):\n         self.use_locked_deps = ''\n         self.use_vendored_sources = ''\n         self.verbose = False\n+        self.git_version = None\n \n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -743,15 +745,13 @@ def update_submodule(self, module, checked_out, recorded_submodules):\n \n         run([\"git\", \"submodule\", \"-q\", \"sync\", module],\n             cwd=self.rust_root, verbose=self.verbose)\n-        try:\n-            run([\"git\", \"submodule\", \"update\",\n-                 \"--init\", \"--recursive\", \"--progress\", module],\n-                cwd=self.rust_root, verbose=self.verbose, exception=True)\n-        except RuntimeError:\n-            # Some versions of git don't support --progress.\n-            run([\"git\", \"submodule\", \"update\",\n-                 \"--init\", \"--recursive\", module],\n-                cwd=self.rust_root, verbose=self.verbose)\n+\n+        update_args = [\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\"]\n+        if self.git_version >= distutils.version.LooseVersion(\"2.11.0\"):\n+            update_args.append(\"--progress\")\n+        update_args.append(module)\n+        run(update_args, cwd=self.rust_root, verbose=self.verbose, exception=True)\n+\n         run([\"git\", \"reset\", \"-q\", \"--hard\"],\n             cwd=module_path, verbose=self.verbose)\n         run([\"git\", \"clean\", \"-qdfx\"],\n@@ -763,9 +763,13 @@ def update_submodules(self):\n                 self.get_toml('submodules') == \"false\":\n             return\n \n-        # check the existence of 'git' command\n+        default_encoding = sys.getdefaultencoding()\n+\n+        # check the existence and version of 'git' command\n         try:\n-            subprocess.check_output(['git', '--version'])\n+            git_version_output = subprocess.check_output(['git', '--version'])\n+            git_version_str = git_version_output.strip().split()[2].decode(default_encoding)\n+            self.git_version = distutils.version.LooseVersion(git_version_str)\n         except (subprocess.CalledProcessError, OSError):\n             print(\"error: `git` is not found, please make sure it's installed and in the path.\")\n             sys.exit(1)"}]}