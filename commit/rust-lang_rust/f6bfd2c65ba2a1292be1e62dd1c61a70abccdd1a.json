{"sha": "f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YmZkMmM2NWJhMmExMjkyYmUxZTYyZGQxYzYxYTcwYWJjY2RkMWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-25T06:11:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-25T06:14:42Z"}, "message": "librustc: Remove cross borrowing from mutable `Box`es to `&mut`.\n\nThis will break code like:\n\n    fn f(x: &mut int) {}\n\n    let mut a = box 1i;\n    f(a);\n\nChange it to:\n\n    fn f(x: &mut int) {}\n\n    let mut a = box 1i;\n    f(&mut *a);\n\nRFC 33; issue #10504.\n\n[breaking-change]", "tree": {"sha": "efdda7183699eaa7975d895e34bb6269c5f20323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efdda7183699eaa7975d895e34bb6269c5f20323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "html_url": "https://github.com/rust-lang/rust/commit/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a93beef7f692b34168ad69633f56483d38ad8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a93beef7f692b34168ad69633f56483d38ad8fc", "html_url": "https://github.com/rust-lang/rust/commit/7a93beef7f692b34168ad69633f56483d38ad8fc"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "0ae0f9068931d743da4e27ca71bffa60c2b427d7", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -156,12 +156,12 @@ impl<T> DList<T> {\n     fn push_front_node(&mut self, mut new_head: Box<Node<T>>) {\n         match self.list_head {\n             None => {\n-                self.list_tail = Rawlink::some(new_head);\n+                self.list_tail = Rawlink::some(&mut *new_head);\n                 self.list_head = link_with_prev(new_head, Rawlink::none());\n             }\n             Some(ref mut head) => {\n                 new_head.prev = Rawlink::none();\n-                head.prev = Rawlink::some(new_head);\n+                head.prev = Rawlink::some(&mut *new_head);\n                 mem::swap(head, &mut new_head);\n                 head.next = Some(new_head);\n             }\n@@ -188,7 +188,7 @@ impl<T> DList<T> {\n         match self.list_tail.resolve() {\n             None => return self.push_front_node(new_tail),\n             Some(tail) => {\n-                self.list_tail = Rawlink::some(new_tail);\n+                self.list_tail = Rawlink::some(&mut *new_tail);\n                 tail.next = link_with_prev(new_tail, Rawlink::some(tail));\n             }\n         }\n@@ -379,7 +379,7 @@ impl<T> DList<T> {\n     #[inline]\n     pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n         let head_raw = match self.list_head {\n-            Some(ref mut h) => Rawlink::some(*h),\n+            Some(ref mut h) => Rawlink::some(&mut **h),\n             None => Rawlink::none(),\n         };\n         MutItems{\n@@ -530,7 +530,7 @@ impl<'a, A> MutItems<'a, A> {\n                     Some(prev) => prev,\n                 };\n                 let node_own = prev_node.next.take_unwrap();\n-                ins_node.next = link_with_prev(node_own, Rawlink::some(ins_node));\n+                ins_node.next = link_with_prev(node_own, Rawlink::some(&mut *ins_node));\n                 prev_node.next = link_with_prev(ins_node, Rawlink::some(prev_node));\n                 self.list.length += 1;\n             }"}, {"sha": "78770b6db8d057a598c53b4dc9ed35e74745736b", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -482,7 +482,7 @@ fn mut_deref<K, V>(x: &mut Option<Box<TreeNode<K, V>>>)\n              -> *mut TreeNode<K, V> {\n     match *x {\n         Some(ref mut n) => {\n-            let n: &mut TreeNode<K, V> = *n;\n+            let n: &mut TreeNode<K, V> = &mut **n;\n             n as *mut TreeNode<K, V>\n         }\n         None => ptr::mut_null()"}, {"sha": "4a35dde08eb5c6913d2f9ff7a681feed2d4887f7", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -183,7 +183,7 @@ mod tests {\n         let mut b = box 7u;\n \n         let a_r = &mut a as &mut Any;\n-        let tmp: &mut uint = b;\n+        let tmp: &mut uint = &mut *b;\n         let b_r = tmp as &mut Any;\n \n         match a_r.as_mut::<uint>() {"}, {"sha": "f8272e5f2376e9b24b81561de1dc26b41c009017", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -641,7 +641,7 @@ impl Scheduler {\n             };\n \n             let (current_task_context, next_task_context) =\n-                Scheduler::get_contexts(current_task, next_task);\n+                Scheduler::get_contexts(current_task, &mut *next_task);\n \n             // Done with everything - put the next task in TLS. This\n             // works because due to transmute the borrow checker"}, {"sha": "f8efb3c38c2002eec6156bce21005d34e8d38425", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -248,7 +248,12 @@ impl<'f> Coerce<'f> {\n         let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n \n         let inner_ty = match *sty_a {\n-            ty::ty_box(typ) | ty::ty_uniq(typ) => typ,\n+            ty::ty_box(typ) | ty::ty_uniq(typ) => {\n+                if mt_b.mutbl == ast::MutMutable {\n+                    return Err(ty::terr_mutability)\n+                }\n+                typ\n+            }\n             ty::ty_rptr(_, mt_a) => mt_a.ty,\n             _ => {\n                 return self.subtype(a, b);"}, {"sha": "e9891533ac8bff6d0a6e05a7eead8e733e9e1165", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -599,7 +599,7 @@ mod tests {\n \n         let mut sh = box Sha256::new();\n \n-        test_hash(sh, tests.as_slice());\n+        test_hash(&mut *sh, tests.as_slice());\n     }\n \n     /// Feed 1,000,000 'a's into the digest with varying input sizes and check that the result is"}, {"sha": "35865e65612e43f54370107ad45b98cde7360e5c", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -899,7 +899,7 @@ mod tests {\n             });\n         }\n         {\n-            access_shared(sharedstate, &x, mode2, 10);\n+            access_shared(&mut *sharedstate, &x, mode2, 10);\n             let _ = rx.recv();\n \n             assert_eq!(*sharedstate, 20);"}, {"sha": "fe0744e5e7c379eb4b896ff71475c87a96616bbd", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -115,16 +115,16 @@ impl Table {\n                     count: 0,\n                     next: None,\n                 };\n-                c.f(entry);\n+                c.f(&mut *entry);\n                 item.next = Some(entry);\n             }\n             Some(ref mut entry) => {\n                 if entry.code == key {\n-                    c.f(*entry);\n+                    c.f(&mut **entry);\n                     return;\n                 }\n \n-                Table::search_remainder(*entry, key, c)\n+                Table::search_remainder(&mut **entry, key, c)\n             }\n         }\n     }\n@@ -139,7 +139,7 @@ impl Table {\n                     count: 0,\n                     next: None,\n                 };\n-                c.f(entry);\n+                c.f(&mut *entry);\n                 *self.items.get_mut(index as uint) = Some(entry);\n                 return;\n             }\n@@ -148,11 +148,11 @@ impl Table {\n         {\n             let entry = &mut *self.items.get_mut(index as uint).get_mut_ref();\n             if entry.code == key {\n-                c.f(*entry);\n+                c.f(&mut **entry);\n                 return;\n             }\n \n-            Table::search_remainder(*entry, key, c)\n+            Table::search_remainder(&mut **entry, key, c)\n         }\n     }\n "}, {"sha": "f0988bcfcf4eee4fc2fe23ffd93aa11d0e0c2a51", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -138,7 +138,7 @@ impl Sudoku {\n             let mut avail = box Colors::new(start_color);\n \n             // drop colors already in use in neighbourhood\n-            self.drop_colors(avail, row, col);\n+            self.drop_colors(&mut *avail, row, col);\n \n             // find first remaining color that is available\n             let next = avail.next();"}, {"sha": "e556b1bc184e3e207bdf9cc64c455e8f63bde492", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -34,7 +34,7 @@ fn pre_freeze_cond() {\n     if cond() {\n         _w = &v;\n     }\n-    borrow_mut(v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn pre_freeze_else() {\n@@ -46,7 +46,7 @@ fn pre_freeze_else() {\n     if cond() {\n         _w = &v;\n     } else {\n-        borrow_mut(v);\n+        borrow_mut(&mut *v);\n     }\n }\n "}, {"sha": "561d8c679a1a444b6ea16e03cd32802360b08406", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -53,7 +53,7 @@ fn loop_aliased_mut() {\n     let mut w = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -65,7 +65,7 @@ fn while_aliased_mut() {\n     let mut w = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -78,11 +78,11 @@ fn loop_aliased_mut_break() {\n     let mut w = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(v);\n+        borrow_mut(&mut *v);\n         _x = &v;\n         break;\n     }\n-    borrow_mut(v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_break() {\n@@ -92,11 +92,11 @@ fn while_aliased_mut_break() {\n     let mut w = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(v);\n+        borrow_mut(&mut *v);\n         _x = &v;\n         break;\n     }\n-    borrow_mut(v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {"}, {"sha": "7ad2d9040940ceca723de4e88e9060fca3d2e457", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -30,14 +30,14 @@ fn pre_freeze() {\n \n     let mut v = box 3;\n     let _w = &v;\n-    borrow_mut(v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn post_freeze() {\n     // In this instance, the const alias starts after the borrow.\n \n     let mut v = box 3;\n-    borrow_mut(v);\n+    borrow_mut(&mut *v);\n     let _w = &v;\n }\n "}, {"sha": "1600043acbfbbab518d66a671fffea92f40bcdb1", "filename": "src/test/compile-fail/lint-allocation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -11,9 +11,7 @@\n #![deny(unnecessary_allocation)]\n \n fn f(_: &int) {}\n-fn g(_: &mut int) {}\n \n fn main() {\n     f(box 1); //~ ERROR unnecessary allocation, use & instead\n-    g(box 1); //~ ERROR unnecessary allocation, use &mut instead\n }"}, {"sha": "657c2832c4931a582cc9e146c11c3f3042841d60", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(_: &mut int) {}\n+\n+fn main() {\n+    let mut x = box 3i;\n+    f(x)    //~ ERROR mismatched types\n+}\n+"}, {"sha": "1bf29fb34825ec05b13184498221826ce82a86db", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=f6bfd2c65ba2a1292be1e62dd1c61a70abccdd1a", "patch": "@@ -29,8 +29,8 @@ fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n \n pub fn main() {\n     let mut ints = box Ints {sum: box 0, values: Vec::new()};\n-    add_int(ints, 22);\n-    add_int(ints, 44);\n+    add_int(&mut *ints, 22);\n+    add_int(&mut *ints, 44);\n \n     iter_ints(ints, |i| {\n         println!(\"int = {}\", *i);"}]}