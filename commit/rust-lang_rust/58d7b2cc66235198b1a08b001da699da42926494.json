{"sha": "58d7b2cc66235198b1a08b001da699da42926494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDdiMmNjNjYyMzUxOThiMWEwOGIwMDFkYTY5OWRhNDI5MjY0OTQ=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T17:34:10Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T19:01:09Z"}, "message": "Extract literals into constants", "tree": {"sha": "5d934b6423188fa2e74c4a6f7bcbd23a53f9720e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d934b6423188fa2e74c4a6f7bcbd23a53f9720e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d7b2cc66235198b1a08b001da699da42926494", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzAsnUACgkQKTh7Wnqv\nhj8XnQf/U8sY0rEYSdWd4o1IoLJw6XhckpEun7KJ+wCGFIY4HBIEK++8AudM//Wv\nksYX20U7lSNtZuNGN3SUgnN4RqEuAAThSkGS239sa6RyA9O5Fm0dEzODVyz7AjxK\n2L41ufWeiPi8p/ik4N3Y0wjPX4tC9fm6uvEj3jeCBPB1+bMUfpQg/QuvYm19Ixyk\nBtG1GNlhch/Jan+L8SxPrkujLbuc9hGfjL4xkJca3r2E8Owx8EhN0vPZVb6WAEaS\n5Hi6D36kpoveWtwTCn2fH86BGT5rIEcnjxplzh8b4Ae6LU9sSHSHHDrgHRQYUcKT\n0bMhxsaD2ALKbV7EakEh+LLUukBczw==\n=DRt/\n-----END PGP SIGNATURE-----", "payload": "tree 5d934b6423188fa2e74c4a6f7bcbd23a53f9720e\nparent add473667a480b67862cde7a90901dae5173beae\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556127250 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556132469 +0200\n\nExtract literals into constants\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d7b2cc66235198b1a08b001da699da42926494", "html_url": "https://github.com/rust-lang/rust/commit/58d7b2cc66235198b1a08b001da699da42926494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d7b2cc66235198b1a08b001da699da42926494/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add473667a480b67862cde7a90901dae5173beae", "url": "https://api.github.com/repos/rust-lang/rust/commits/add473667a480b67862cde7a90901dae5173beae", "html_url": "https://github.com/rust-lang/rust/commit/add473667a480b67862cde7a90901dae5173beae"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "5a90c1f2aaaf22bcd142165eb27c47404dba3953", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58d7b2cc66235198b1a08b001da699da42926494/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d7b2cc66235198b1a08b001da699da42926494/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=58d7b2cc66235198b1a08b001da699da42926494", "patch": "@@ -11,13 +11,15 @@ pub(crate) fn apply_newline_style(\n     formatted_text: &mut String,\n     raw_input_text: &str,\n ) {\n+    const WINDOWS_NEWLINE: &str = \"\\r\\n\";\n+\n     match effective_newline_style(newline_style, raw_input_text) {\n         EffectiveNewlineStyle::Windows => {\n             let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n             for c in formatted_text.chars() {\n                 match c {\n-                    '\\n' => transformed.push_str(\"\\r\\n\"),\n-                    '\\r' => continue,\n+                    LINE_FEED => transformed.push_str(WINDOWS_NEWLINE),\n+                    CARRIAGE_RETURN => continue,\n                     c => transformed.push(c),\n                 }\n             }\n@@ -27,6 +29,9 @@ pub(crate) fn apply_newline_style(\n     }\n }\n \n+const LINE_FEED: char = '\\n';\n+const CARRIAGE_RETURN: char = '\\r';\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum EffectiveNewlineStyle {\n     Windows,\n@@ -46,9 +51,9 @@ fn effective_newline_style(\n }\n \n fn auto_detect_newline_style(raw_input_text: &str) -> EffectiveNewlineStyle {\n-    if let Some(pos) = raw_input_text.find('\\n') {\n+    if let Some(pos) = raw_input_text.find(LINE_FEED) {\n         let pos = pos.saturating_sub(1);\n-        if let Some('\\r') = raw_input_text.chars().nth(pos) {\n+        if let Some(CARRIAGE_RETURN) = raw_input_text.chars().nth(pos) {\n             EffectiveNewlineStyle::Windows\n         } else {\n             EffectiveNewlineStyle::Unix"}]}