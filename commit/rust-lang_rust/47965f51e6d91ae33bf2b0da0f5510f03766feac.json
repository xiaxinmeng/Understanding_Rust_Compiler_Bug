{"sha": "47965f51e6d91ae33bf2b0da0f5510f03766feac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTY1ZjUxZTZkOTFhZTMzYmYyYjBkYTBmNTUxMGYwMzc2NmZlYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-19T16:09:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-19T16:09:42Z"}, "message": "Auto merge of #39180 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 11 pull requests\n\n- Successful merges: #38457, #38922, #38970, #39039, #39091, #39115, #39121, #39149, #39150, #39151, #39165\n- Failed merges:", "tree": {"sha": "ff736fc78a6f5abd28bedd30820a8a1eb689824a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff736fc78a6f5abd28bedd30820a8a1eb689824a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47965f51e6d91ae33bf2b0da0f5510f03766feac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47965f51e6d91ae33bf2b0da0f5510f03766feac", "html_url": "https://github.com/rust-lang/rust/commit/47965f51e6d91ae33bf2b0da0f5510f03766feac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47965f51e6d91ae33bf2b0da0f5510f03766feac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c42ac173bee900979870ed986c760596d1fbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c42ac173bee900979870ed986c760596d1fbdb", "html_url": "https://github.com/rust-lang/rust/commit/74c42ac173bee900979870ed986c760596d1fbdb"}, {"sha": "3946079d3793eb3324d650d8bdc7e826bdbe2689", "url": "https://api.github.com/repos/rust-lang/rust/commits/3946079d3793eb3324d650d8bdc7e826bdbe2689", "html_url": "https://github.com/rust-lang/rust/commit/3946079d3793eb3324d650d8bdc7e826bdbe2689"}], "stats": {"total": 278, "additions": 236, "deletions": 42}, "files": [{"sha": "a2241c20d7419d23cd01dd09b64891929ce2e96b", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -3371,7 +3371,7 @@ Version 1.0.0-alpha (2015-01-09)\n       platforms.\n     * Rust comes with rust-gdb and rust-lldb scripts that launch their\n       respective debuggers with Rust-appropriate pretty-printing.\n-    * The Windows installation of Rust is distributed with the the\n+    * The Windows installation of Rust is distributed with the\n       MinGW components currently required to link binaries on that\n       platform.\n "}, {"sha": "e704f400d49e3eae9c37af7d65e8154b2867d367", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -181,7 +181,7 @@ impl<T> [T] {\n         core_slice::SliceExt::len(self)\n     }\n \n-    /// Returns true if the slice has a length of 0.\n+    /// Returns `true` if the slice has a length of 0.\n     ///\n     /// # Example\n     ///\n@@ -342,15 +342,22 @@ impl<T> [T] {\n         core_slice::SliceExt::last_mut(self)\n     }\n \n-    /// Returns the element of a slice at the given index, or `None` if the\n-    /// index is out of bounds.\n+    /// Returns a reference to an element or subslice depending on the type of\n+    /// index.\n+    ///\n+    /// - If given a position, returns a reference to the element at that\n+    ///   position or `None` if out of bounds.\n+    /// - If given a range, returns the subslice corresponding to that range,\n+    ///   or `None` if out of bounds.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// let v = [10, 40, 30];\n     /// assert_eq!(Some(&40), v.get(1));\n+    /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));\n     /// assert_eq!(None, v.get(3));\n+    /// assert_eq!(None, v.get(0..4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -360,7 +367,10 @@ impl<T> [T] {\n         core_slice::SliceExt::get(self, index)\n     }\n \n-    /// Returns a mutable reference to the element at the given index.\n+    /// Returns a mutable reference to an element or subslice depending on the\n+    /// type of index (see [`get()`]) or `None` if the index is out of bounds.\n+    ///\n+    /// [`get()`]: #method.get\n     ///\n     /// # Examples\n     ///\n@@ -372,7 +382,6 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(x, &[0, 42, 2]);\n     /// ```\n-    /// or `None` if the index is out of bounds\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n@@ -381,8 +390,8 @@ impl<T> [T] {\n         core_slice::SliceExt::get_mut(self, index)\n     }\n \n-    /// Returns a pointer to the element at the given index, without doing\n-    /// bounds checking. So use it very carefully!\n+    /// Returns a reference to an element or subslice, without doing bounds\n+    /// checking. So use it very carefully!\n     ///\n     /// # Examples\n     ///\n@@ -401,8 +410,8 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n \n-    /// Returns an unsafe mutable pointer to the element in index. So use it\n-    /// very carefully!\n+    /// Returns a mutable reference to an element or subslice, without doing\n+    /// bounds checking. So use it very carefully!\n     ///\n     /// # Examples\n     ///\n@@ -540,12 +549,8 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let x = &mut [1, 2, 4];\n-    /// {\n-    ///     let iterator = x.iter_mut();\n-    ///\n-    ///     for elem in iterator {\n-    ///         *elem += 2;\n-    ///     }\n+    /// for elem in x.iter_mut() {\n+    ///     *elem += 2;\n     /// }\n     /// assert_eq!(x, &[3, 4, 6]);\n     /// ```\n@@ -880,7 +885,7 @@ impl<T> [T] {\n         core_slice::SliceExt::rsplitn_mut(self, n, pred)\n     }\n \n-    /// Returns true if the slice contains an element with the given value.\n+    /// Returns `true` if the slice contains an element with the given value.\n     ///\n     /// # Examples\n     ///\n@@ -896,7 +901,7 @@ impl<T> [T] {\n         core_slice::SliceExt::contains(self, x)\n     }\n \n-    /// Returns true if `needle` is a prefix of the slice.\n+    /// Returns `true` if `needle` is a prefix of the slice.\n     ///\n     /// # Examples\n     ///\n@@ -907,14 +912,23 @@ impl<T> [T] {\n     /// assert!(!v.starts_with(&[50]));\n     /// assert!(!v.starts_with(&[10, 50]));\n     /// ```\n+    ///\n+    /// Always returns `true` if `needle` is an empty slice:\n+    ///\n+    /// ```\n+    /// let v = &[10, 40, 30];\n+    /// assert!(v.starts_with(&[]));\n+    /// let v: &[u8] = &[];\n+    /// assert!(v.starts_with(&[]));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with(&self, needle: &[T]) -> bool\n         where T: PartialEq\n     {\n         core_slice::SliceExt::starts_with(self, needle)\n     }\n \n-    /// Returns true if `needle` is a suffix of the slice.\n+    /// Returns `true` if `needle` is a suffix of the slice.\n     ///\n     /// # Examples\n     ///\n@@ -925,6 +939,15 @@ impl<T> [T] {\n     /// assert!(!v.ends_with(&[50]));\n     /// assert!(!v.ends_with(&[50, 30]));\n     /// ```\n+    ///\n+    /// Always returns `true` if `needle` is an empty slice:\n+    ///\n+    /// ```\n+    /// let v = &[10, 40, 30];\n+    /// assert!(v.ends_with(&[]));\n+    /// let v: &[u8] = &[];\n+    /// assert!(v.ends_with(&[]));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ends_with(&self, needle: &[T]) -> bool\n         where T: PartialEq"}, {"sha": "d3a940c811b8842c7d63033e648ff0e82ae7ce89", "filename": "src/librustc/dep_graph/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fthread.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -56,7 +56,7 @@ pub struct DepGraphThreadData {\n     // current buffer, where we accumulate messages\n     messages: VecCell<DepMessage>,\n \n-    // whence to receive new buffer when full\n+    // where to receive new buffer when full\n     swap_in: Receiver<Vec<DepMessage>>,\n \n     // where to send buffer when full"}, {"sha": "0d180e6ad76fda1be666cb41e66e7c0f53bd3083", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -1454,6 +1454,40 @@ struct Prince<'kiss, 'SnowWhite: 'kiss> { // You say here that 'kiss must live\n ```\n \"##,\n \n+E0491: r##\"\n+A reference has a longer lifetime than the data it references.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0491\n+// struct containing a reference requires a lifetime parameter,\n+// because the data the reference points to must outlive the struct (see E0106)\n+struct Struct<'a> {\n+    ref_i32: &'a i32,\n+}\n+\n+// However, a nested struct like this, the signature itself does not tell\n+// whether 'a outlives 'b or the other way around.\n+// So it could be possible that 'b of reference outlives 'a of the data.\n+struct Nested<'a, 'b> {\n+    ref_struct: &'b Struct<'a>, // compile error E0491\n+}\n+```\n+\n+To fix this issue, you can specify a bound to the lifetime like below:\n+\n+```\n+struct Struct<'a> {\n+    ref_i32: &'a i32,\n+}\n+\n+// 'a: 'b means 'a outlives 'b\n+struct Nested<'a: 'b, 'b> {\n+    ref_struct: &'b Struct<'a>,\n+}\n+```\n+\"##,\n+\n E0496: r##\"\n A lifetime name is shadowing another lifetime name. Erroneous code example:\n \n@@ -1697,7 +1731,6 @@ register_diagnostics! {\n     E0488, // lifetime of variable does not enclose its declaration\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566  // conflicting representation hints\n }"}, {"sha": "92395e3c381aae77b362f756070df562984847a7", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -190,7 +190,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                     ty.uninhabited_from(visited, tcx)\n                 }\n             }\n-            TyRef(_, ref tm) => tm.ty.uninhabited_from(visited, tcx),\n+            TyRef(_, ref tm) => {\n+                if tcx.sess.features.borrow().never_type {\n+                    tm.ty.uninhabited_from(visited, tcx)\n+                } else {\n+                    DefIdForest::empty()\n+                }\n+            }\n \n             _ => DefIdForest::empty(),\n         }"}, {"sha": "e13434db5d886341ddc1abd0f65ee2a93407e78d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -716,6 +716,16 @@ fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n         }\n     }\n \n+    for predicate in generics.where_clause.predicates.iter() {\n+        match *predicate {\n+            hir::WherePredicate::BoundPredicate(..) => {\n+                warn = true;\n+            }\n+            hir::WherePredicate::RegionPredicate(..) => { }\n+            hir::WherePredicate::EqPredicate(..) => { }\n+        }\n+    }\n+\n     if warn {\n         // According to accepted RFC #XXX, we should\n         // eventually accept these, but it will not be"}, {"sha": "06402cc0e8e93a085f0b39d8d0029fc8629a559b", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -81,7 +81,8 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n-/// [`BufReader`]: ../io/struct.BufReader.html\n+/// [`Read`]: ../io/trait.Read.html\n+/// [`BufReader<R>`]: ../io/struct.BufReader.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,"}, {"sha": "d79a9a202d9e4f0c4b28fffaedc3f7872d284ae2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -458,23 +458,38 @@ pub mod builtin {\n \n     /// Parse a file as an expression or an item according to the context.\n     ///\n-    /// The file is located relative to the current file. (similarly to how\n-    /// modules are found)\n+    /// The file is located relative to the current file (similarly to how\n+    /// modules are found).\n     ///\n     /// Using this macro is often a bad idea, because if the file is\n     /// parsed as an expression, it is going to be placed in the\n-    /// surrounding code unhygenically. This could result in variables\n+    /// surrounding code unhygienically. This could result in variables\n     /// or functions being different from what the file expected if\n     /// there are variables or functions that have the same name in\n     /// the current file.\n     ///\n     /// # Examples\n     ///\n+    /// Assume there are two files in the same directory with the following\n+    /// contents:\n+    ///\n+    /// File 'my_str.in':\n+    ///\n     /// ```ignore\n-    /// fn foo() {\n-    ///     include!(\"/path/to/a/file\")\n+    /// \"Hello World!\"\n+    /// ```\n+    ///\n+    /// File 'main.rs':\n+    ///\n+    /// ```ignore\n+    /// fn main() {\n+    ///     let my_str = include!(\"my_str.in\");\n+    ///     println!(\"{}\", my_str);\n     /// }\n     /// ```\n+    ///\n+    /// Compiling 'main.rs' and running the resulting binary will print \"Hello\n+    /// World!\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }"}, {"sha": "fb75201cea5a58a2cf51d3dfc1644346d57d2b20", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -689,10 +689,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        cfg_fn!(omit_gdb_pretty_printer_section))),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n-     Gated(Stability::Unstable,\n+     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\"),\n            \"dropck_parametricity\",\n-           \"unsafe_destructor_blind_to_params has unstable semantics \\\n-            and may be removed in the future\",\n+           \"unsafe_destructor_blind_to_params has been replaced by \\\n+            may_dangle and will be removed in the future\",\n            cfg_fn!(dropck_parametricity))),\n     (\"may_dangle\",\n      Normal,"}, {"sha": "70ec561439c61a314471ac2cebd4b230fadd1cd7", "filename": "src/test/compile-fail/feature-gate-dropck-ugeh-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh-2.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(deprecated)]\n+#![feature(dropck_parametricity)]\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    #[unsafe_destructor_blind_to_params]\n+    //~^ ERROR use of deprecated attribute `dropck_parametricity`\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "360895d30b0b7e39866ea4ba4e754299dbf1fb84", "filename": "src/test/compile-fail/feature-gate-dropck-ugeh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -27,7 +27,7 @@ struct Foo<T> { data: Vec<T> }\n \n impl<T> Drop for Foo<T> {\n     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-    //~^ ERROR unsafe_destructor_blind_to_params has unstable semantics\n+    //~^ ERROR unsafe_destructor_blind_to_params has been replaced\n     fn drop(&mut self) { }\n }\n "}, {"sha": "ac15bd9d15b04ee2e137b1669900aef76be72a9c", "filename": "src/test/compile-fail/issue-17994.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n trait Tr {}\n-type Huh<T> where T: Tr = isize; //~ ERROR type parameter `T` is unused\n+type Huh<T> where T: Tr = isize; //~  ERROR type parameter `T` is unused\n+                                 //~| WARNING E0122\n fn main() {}"}, {"sha": "2e8a740f89394d28cc093c678188a5c4f26e9195", "filename": "src/test/compile-fail/issue-39122.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fissue-39122.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fissue-39122.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39122.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Foo<T: std::ops::Add> = T; //~ WARNING E0122\n+\n+type Bar<T> where T: std::ops::Add = T; //~ WARNING E0122"}, {"sha": "92d96595fd780a5f157cfe1dd82e6a6140381a22", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -89,6 +89,7 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n+        //~| WARNING E0122\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "8f246eddbcde498dba0c5f7e9a0c701c7b708618", "filename": "src/test/compile-fail/uninhabited-reference-type-feature-gated.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Void {}\n+\n+fn main() {\n+    let x: Result<u32, &'static Void> = Ok(23);\n+    let _ = match x {   //~ ERROR non-exhaustive\n+        Ok(n) => n,\n+    };\n+}\n+"}, {"sha": "c457fed7ecd52984b3504a0bc8ff0cc6bd165f98", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "df56ccccca3f55744fcea41f7d3e1e78532f7866", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "e538700f0f84c59e7af5f49d670070e25d86906f", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "c476e9fe0796fa71438c99e307252e86f36c7ca0", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "f33dfac07d2033e3718b8d57b46c2ee9e1545be5", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // ignore-lldb\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "d9763aedd7c15a168c2a8db3a1acdeb92bbd822b", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "6212caa69538dcb2af0f27c8387f359137f84763", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "f85cd6a50f51982c522c7cdc698fdd42b6222ebf", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "844e9405ba55c888c21afa9a8b522f9f08ae7bec", "filename": "src/test/debuginfo/union-smoke.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "e8eb4315007afd62dacced6cd298c50c3384a9d9", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // min-lldb-version: 310\n+// ignore-gdb-version: 7.11.90 - 7.12\n \n // compile-flags:-g\n "}, {"sha": "033b185a0ef06f3a6a00735009b74c50c04b11f2", "filename": "src/test/run-pass/empty-types-in-patterns.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -55,6 +55,11 @@ fn main() {\n         Err(e) => match e {},\n     };\n \n+    let x: Result<u32, &!> = Ok(123);\n+    match x {\n+        Ok(y) => y,\n+    };\n+\n     bar(&[]);\n }\n "}, {"sha": "ac1ac1c2f6c088e6ec6f0be258931673834b6d75", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -73,19 +73,29 @@ impl EarlyProps {\n                 return false;\n             }\n \n-            if parse_name_directive(line, \"ignore-gdb\") {\n+            if !line.contains(\"ignore-gdb-version\") &&\n+               parse_name_directive(line, \"ignore-gdb\") {\n                 return true;\n             }\n \n             if let Some(actual_version) = config.gdb_version {\n                 if line.contains(\"min-gdb-version\") {\n-                    let min_version = line.trim()\n-                        .split(' ')\n-                        .last()\n-                        .expect(\"Malformed GDB version directive\");\n+                    let (start_ver, end_ver) = extract_gdb_version_range(line);\n+\n+                    if start_ver != end_ver {\n+                        panic!(\"Expected single GDB version\")\n+                    }\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    actual_version < extract_gdb_version(min_version).unwrap()\n+                    actual_version < start_ver\n+                } else if line.contains(\"ignore-gdb-version\") {\n+                    let (min_version, max_version) = extract_gdb_version_range(line);\n+\n+                    if max_version < min_version {\n+                        panic!(\"Malformed GDB version range: max < min\")\n+                    }\n+\n+                    actual_version >= min_version && actual_version <= max_version\n                 } else {\n                     false\n                 }\n@@ -94,6 +104,34 @@ impl EarlyProps {\n             }\n         }\n \n+        // Takes a directive of the form \"ignore-gdb-version <version1> [- <version2>]\",\n+        // returns the numeric representation of <version1> and <version2> as\n+        // tuple: (<version1> as u32, <version2> as u32)\n+        // If the <version2> part is omitted, the second component of the tuple\n+        // is the same as <version1>.\n+        fn extract_gdb_version_range(line: &str) -> (u32, u32) {\n+            const ERROR_MESSAGE: &'static str = \"Malformed GDB version directive\";\n+\n+            let range_components = line.split(' ')\n+                                       .flat_map(|word| word.split('-'))\n+                                       .filter(|word| word.len() > 0)\n+                                       .skip_while(|word| extract_gdb_version(word).is_none())\n+                                       .collect::<Vec<&str>>();\n+\n+            match range_components.len() {\n+                1 => {\n+                    let v = extract_gdb_version(range_components[0]).unwrap();\n+                    (v, v)\n+                }\n+                2 => {\n+                    let v_min = extract_gdb_version(range_components[0]).unwrap();\n+                    let v_max = extract_gdb_version(range_components[1]).expect(ERROR_MESSAGE);\n+                    (v_min, v_max)\n+                }\n+                _ => panic!(ERROR_MESSAGE),\n+            }\n+        }\n+\n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n             if config.mode != common::DebugInfoLldb {\n                 return false;"}, {"sha": "8c9982d1d4e39bcabb04e9b30822a1f69cd2e1d4", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47965f51e6d91ae33bf2b0da0f5510f03766feac/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=47965f51e6d91ae33bf2b0da0f5510f03766feac", "patch": "@@ -587,7 +587,6 @@ fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n         return Some(((major * 1000) + minor) * 1000 + patch);\n     }\n \n-    println!(\"Could not extract GDB version from line '{}'\", full_version_line);\n     None\n }\n \n@@ -624,8 +623,6 @@ fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n                 }).collect::<String>();\n                 if !vers.is_empty() { return Some(vers) }\n             }\n-            println!(\"Could not extract LLDB version from line '{}'\",\n-                     full_version_line);\n         }\n     }\n     None"}]}