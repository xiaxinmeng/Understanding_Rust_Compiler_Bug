{"sha": "56c6c65186ef37ef1592515f5f7b0062acb49153", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YzZjNjUxODZlZjM3ZWYxNTkyNTE1ZjVmN2IwMDYyYWNiNDkxNTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-09T02:00:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-09T02:00:59Z"}, "message": "Add preliminary test of walking data pointers via reflection.", "tree": {"sha": "355a0d5ad5b8368832e0a89dd2b5c6855559d857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355a0d5ad5b8368832e0a89dd2b5c6855559d857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56c6c65186ef37ef1592515f5f7b0062acb49153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56c6c65186ef37ef1592515f5f7b0062acb49153", "html_url": "https://github.com/rust-lang/rust/commit/56c6c65186ef37ef1592515f5f7b0062acb49153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56c6c65186ef37ef1592515f5f7b0062acb49153/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f2926144d63600e8c0788c135ae3c4fcfa85e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f2926144d63600e8c0788c135ae3c4fcfa85e0", "html_url": "https://github.com/rust-lang/rust/commit/45f2926144d63600e8c0788c135ae3c4fcfa85e0"}], "stats": {"total": 303, "additions": 303, "deletions": 0}, "files": [{"sha": "dc5b6ea60e848497063c57ca495f0ff7c3921f8a", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/56c6c65186ef37ef1592515f5f7b0062acb49153/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c6c65186ef37ef1592515f5f7b0062acb49153/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=56c6c65186ef37ef1592515f5f7b0062acb49153", "patch": "@@ -0,0 +1,303 @@\n+import libc::c_void;\n+\n+iface data_cursor {\n+    fn set_ptr(p: *c_void);\n+    fn get_ptr() -> *c_void;\n+}\n+\n+enum my_visitor = @{\n+    mut ptr: *c_void,\n+    mut vals: [str]\n+};\n+\n+impl methods for my_visitor {\n+    fn get<T>(f: fn(T)) {\n+        unsafe {\n+            f(*(self.ptr as *T));\n+        }\n+    }\n+}\n+\n+impl of data_cursor for my_visitor {\n+    fn set_ptr(p: *c_void) { self.ptr = p; }\n+    fn get_ptr() -> *c_void { self.ptr }\n+}\n+\n+impl of intrinsic::ty_visitor for my_visitor {\n+\n+    fn visit_bot() -> bool { true }\n+    fn visit_nil() -> bool { true }\n+    fn visit_bool() -> bool {\n+        self.get::<bool>() {|b|\n+            self.vals += [bool::to_str(b)];\n+        }\n+        true\n+    }\n+    fn visit_int() -> bool {\n+        self.get::<int>() {|i|\n+            self.vals += [int::to_str(i, 10u)];\n+        }\n+        true\n+    }\n+    fn visit_i8() -> bool { true }\n+    fn visit_i16() -> bool { true }\n+    fn visit_i32() -> bool { true }\n+    fn visit_i64() -> bool { true }\n+\n+    fn visit_uint() -> bool { true }\n+    fn visit_u8() -> bool { true }\n+    fn visit_u16() -> bool { true }\n+    fn visit_u32() -> bool { true }\n+    fn visit_u64() -> bool { true }\n+\n+    fn visit_float() -> bool { true }\n+    fn visit_f32() -> bool { true }\n+    fn visit_f64() -> bool { true }\n+\n+    fn visit_char() -> bool { true }\n+    fn visit_str() -> bool { true }\n+\n+    fn visit_estr_box() -> bool { true }\n+    fn visit_estr_uniq() -> bool { true }\n+    fn visit_estr_slice() -> bool { true }\n+    fn visit_estr_fixed(_sz: uint) -> bool { true }\n+\n+    fn visit_enter_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_enter_rptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_rptr(_mtbl: uint) -> bool { true }\n+\n+    fn visit_enter_vec(_mtbl: uint) -> bool { true }\n+    fn visit_leave_vec(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+    fn visit_leave_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+\n+    fn visit_enter_rec(_n_fields: uint) -> bool { true }\n+    fn visit_enter_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n+    fn visit_leave_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n+    fn visit_leave_rec(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_class(_n_fields: uint) -> bool { true }\n+    fn visit_enter_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n+    fn visit_leave_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n+    fn visit_leave_class(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_tup(_n_fields: uint) -> bool { true }\n+    fn visit_enter_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+    fn visit_enter_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_leave_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_enter_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+\n+    fn visit_enter_enum(_n_variants: uint) -> bool { true }\n+    fn visit_enter_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n+    fn visit_enter_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n+    fn visit_leave_enum(_n_variants: uint) -> bool { true }\n+\n+    fn visit_iface() -> bool { true }\n+    fn visit_enter_res() -> bool { true }\n+    fn visit_leave_res() -> bool { true }\n+    fn visit_var() -> bool { true }\n+    fn visit_var_integral() -> bool { true }\n+    fn visit_param(_i: uint) -> bool { true }\n+    fn visit_self() -> bool { true }\n+    fn visit_type() -> bool { true }\n+    fn visit_opaque_box() -> bool { true }\n+    fn visit_enter_constr() -> bool { true }\n+    fn visit_leave_constr() -> bool { true }\n+    fn visit_closure_ptr(_ck: uint) -> bool { true }\n+}\n+\n+enum data_visitor<V:intrinsic::ty_visitor data_cursor> = {\n+    inner: V\n+};\n+\n+fn align_to<T>(size: uint, align: uint) -> uint {\n+    ((size + align) - 1u) & !(align - 1u)\n+}\n+\n+impl dv<V: intrinsic::ty_visitor data_cursor> of\n+    intrinsic::ty_visitor for data_visitor<V> {\n+\n+    fn move_ptr(f: fn(*c_void) -> *c_void) {\n+        self.inner.set_ptr(f(self.inner.get_ptr()));\n+    }\n+\n+    fn bump(sz: uint) {\n+        self.move_ptr() {|p|\n+            ((p as uint) + sz) as *c_void\n+        }\n+    }\n+\n+    fn align_to<T>() {\n+        self.move_ptr() {|p|\n+            align_to::<T>(p as uint,\n+                          sys::min_align_of::<T>()) as *c_void\n+        }\n+    }\n+\n+    fn bump_past<T>() {\n+        self.bump(sys::size_of::<T>());\n+    }\n+\n+    fn visit_bot() -> bool {\n+        self.align_to::<bool>();\n+        self.inner.visit_bot();\n+        self.bump_past::<bool>();\n+        true\n+    }\n+    fn visit_nil() -> bool { true }\n+    fn visit_bool() -> bool {\n+        self.align_to::<bool>();\n+        self.inner.visit_bool();\n+        self.bump_past::<bool>();\n+        true\n+    }\n+    fn visit_int() -> bool {\n+        self.align_to::<int>();\n+        self.inner.visit_int();\n+        self.bump_past::<int>();\n+        true\n+    }\n+    fn visit_i8() -> bool { true }\n+    fn visit_i16() -> bool { true }\n+    fn visit_i32() -> bool { true }\n+    fn visit_i64() -> bool { true }\n+\n+    fn visit_uint() -> bool { true }\n+    fn visit_u8() -> bool { true }\n+    fn visit_u16() -> bool { true }\n+    fn visit_u32() -> bool { true }\n+    fn visit_u64() -> bool { true }\n+\n+    fn visit_float() -> bool { true }\n+    fn visit_f32() -> bool { true }\n+    fn visit_f64() -> bool { true }\n+\n+    fn visit_char() -> bool { true }\n+    fn visit_str() -> bool { true }\n+\n+    fn visit_estr_box() -> bool { true }\n+    fn visit_estr_uniq() -> bool { true }\n+    fn visit_estr_slice() -> bool { true }\n+    fn visit_estr_fixed(_sz: uint) -> bool { true }\n+\n+    fn visit_enter_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_enter_rptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_rptr(_mtbl: uint) -> bool { true }\n+\n+    fn visit_enter_vec(_mtbl: uint) -> bool { true }\n+    fn visit_leave_vec(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+    fn visit_leave_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+\n+    fn visit_enter_rec(_n_fields: uint) -> bool { true }\n+    fn visit_enter_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n+    fn visit_leave_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n+    fn visit_leave_rec(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_class(_n_fields: uint) -> bool { true }\n+    fn visit_enter_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n+    fn visit_leave_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n+    fn visit_leave_class(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_tup(_n_fields: uint) -> bool { true }\n+    fn visit_enter_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+    fn visit_enter_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_leave_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_enter_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+\n+    fn visit_enter_enum(_n_variants: uint) -> bool { true }\n+    fn visit_enter_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n+    fn visit_enter_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n+    fn visit_leave_enum(_n_variants: uint) -> bool { true }\n+\n+    fn visit_iface() -> bool { true }\n+    fn visit_enter_res() -> bool { true }\n+    fn visit_leave_res() -> bool { true }\n+    fn visit_var() -> bool { true }\n+    fn visit_var_integral() -> bool { true }\n+    fn visit_param(_i: uint) -> bool { true }\n+    fn visit_self() -> bool { true }\n+    fn visit_type() -> bool { true }\n+    fn visit_opaque_box() -> bool { true }\n+    fn visit_enter_constr() -> bool { true }\n+    fn visit_leave_constr() -> bool { true }\n+    fn visit_closure_ptr(_ck: uint) -> bool { true }\n+}\n+\n+fn main() {\n+    let r = (1,2,3,true,false);\n+    let p = ptr::addr_of(r) as *c_void;\n+    let u = my_visitor(@{mut ptr: p,\n+                         mut vals: []});\n+    let v = data_visitor({inner: u});\n+    let vv = v as intrinsic::ty_visitor;\n+    intrinsic::visit_ty::<(int,int,int,bool,bool)>(vv);\n+\n+    for u.vals.each {|s|\n+        io::println(#fmt(\"val: %s\", s));\n+    }\n+    assert u.vals == [\"1\", \"2\", \"3\", \"true\", \"false\"];\n+\n+ }"}]}