{"sha": "a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDcwZDFiNGFkOWM4MmIwODJkM2UxNWE4Yjk2NTI4OTYyNWQ4ZTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-02T21:03:23Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-03T03:54:45Z"}, "message": "Add visit_projection_elem method to visitors", "tree": {"sha": "0f49d2b05ba01336eab175f0b04c4c8696d0039d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f49d2b05ba01336eab175f0b04c4c8696d0039d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2VcQUACgkQiMlBzaHU\nZDKZtBAAj48EE9Cu41dek+owUwXxu4XLTa4UV6RfdiFhsPSbnl8E1PCXnKroHI6U\nkW/40J/FV2scj1RxdsAJ2kEug+1cXwLZRNkAAEl2DKh2l/+3fvB1AXOC3FQ0rTcK\nMVINv+nq3O7d6CMzGLzTjzoFZC0C26Tu0lt6xxtCLQezvj0Sd0OBhhrm0ON3qY5+\nomMneV9bXAaPKqntHomnFDJRQwF+7HRfdC0zwSv48kIN79nkRJeo2bq3or0Qvyi1\njhwf5VX6zKPjxGUgaO//3wMfdkzXPbBYCrzGLdK2QFWwvvyUXXEk5XN1yQuHoFsr\nZEpxYK2jJ2TjyBW5DTDmXQkv7SC1azMeQJCWWKLAROd+fo0U7kafAgt4rr9XP+sg\niSWPS5yE5x246RhWGWCIdeBjdsxK7DMrmBUTyXkSoNsKlE4288DwDTYq6PSvuBET\ndrS2A/fR3/WL+2JCnZmqc2RwwovaWGe4KZxACacyM9gw7PVKPu0MKP78SS9zeZG+\nJji7P8PjNXTnUNSYbXPdi1EoWjZ0O2cXGf1DDWOxZC2yvsnEa3qq6aRZAiYt6CUU\nCkW7k7Ym5OHJS4Owd7eCGa2J8rTxXTGdBIC35u45r6lo5UfvSJBZKI44ON7gqII3\nY0qSG1nBxKRisC785mGQm60EcCJbRsXXABz9vpSrtLFqC9LNjGs=\n=5xZ1\n-----END PGP SIGNATURE-----", "payload": "tree 0f49d2b05ba01336eab175f0b04c4c8696d0039d\nparent f2023ac599c38a59f86552089e6791c5a73412d3\nauthor Santiago Pastorino <spastorino@gmail.com> 1570050203 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1570074885 -0300\n\nAdd visit_projection_elem method to visitors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "html_url": "https://github.com/rust-lang/rust/commit/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2023ac599c38a59f86552089e6791c5a73412d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2023ac599c38a59f86552089e6791c5a73412d3", "html_url": "https://github.com/rust-lang/rust/commit/f2023ac599c38a59f86552089e6791c5a73412d3"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "7236b17999948a27f8eaabfecc9faa4b4f411303", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "patch": "@@ -166,6 +166,15 @@ macro_rules! make_mir_visitor {\n                 self.super_projection(base, projection, context, location);\n             }\n \n+            fn visit_projection_elem(&mut self,\n+                                     base: & $($mutability)? PlaceBase<'tcx>,\n+                                     proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     context: PlaceContext,\n+                                     location: Location) {\n+                self.super_projection_elem(base, proj_base, elem, context, location);\n+            }\n+\n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n@@ -727,25 +736,33 @@ macro_rules! make_mir_visitor {\n                                 location: Location) {\n                 if let [proj_base @ .., elem] = projection {\n                     self.visit_projection(base, proj_base, context, location);\n+                    self.visit_projection_elem(base, proj_base, elem, context, location);\n+                }\n+            }\n \n-                    match elem {\n-                        ProjectionElem::Field(_field, ty) => {\n-                            self.visit_ty(ty, TyContext::Location(location));\n-                        }\n-                        ProjectionElem::Index(local) => {\n-                            self.visit_local(\n-                                local,\n-                                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                                location\n-                            );\n-                        }\n-                        ProjectionElem::Deref |\n-                        ProjectionElem::Subslice { from: _, to: _ } |\n-                        ProjectionElem::ConstantIndex { offset: _,\n-                                                        min_length: _,\n-                                                        from_end: _ } |\n-                        ProjectionElem::Downcast(_, _) => {\n-                        }\n+            fn super_projection_elem(&mut self,\n+                                     _base: & $($mutability)? PlaceBase<'tcx>,\n+                                     _proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     _context: PlaceContext,\n+                                     location: Location) {\n+                match elem {\n+                    ProjectionElem::Field(_field, ty) => {\n+                        self.visit_ty(ty, TyContext::Location(location));\n+                    }\n+                    ProjectionElem::Index(local) => {\n+                        self.visit_local(\n+                            local,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                            location\n+                        );\n+                    }\n+                    ProjectionElem::Deref |\n+                    ProjectionElem::Subslice { from: _, to: _ } |\n+                    ProjectionElem::ConstantIndex { offset: _,\n+                                                    min_length: _,\n+                                                    from_end: _ } |\n+                    ProjectionElem::Downcast(_, _) => {\n                     }\n                 }\n             }"}]}