{"sha": "fc93e4719c2ced744d75f0c281bb7ba29844bedd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTNlNDcxOWMyY2VkNzQ0ZDc1ZjBjMjgxYmI3YmEyOTg0NGJlZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T04:29:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T04:29:45Z"}, "message": "Auto merge of #80960 - Dylan-DPC:rollup-89tri8x, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #78901 (diagnostics: Note capturing closures can't be coerced to fns)\n - #79588 (Provide more information for HRTB lifetime errors involving closures)\n - #80232 (Remove redundant def_id lookups)\n - #80662 (Added support for i386-unknown-linux-gnu and i486-unknown-linux-gnu)\n - #80736 (use Once instead of Mutex to manage capture resolution)\n - #80796 (Update to LLVM 11.0.1)\n - #80859 (Fix --pretty=expanded with --remap-path-prefix)\n - #80922 (Revert \"Auto merge of #76896 - spastorino:codegen-inline-fns2)\n - #80924 (Fix rustdoc --test-builder argument parsing)\n - #80935 (Rename `rustc_middle::lint::LevelSource` to `LevelAndSource`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8f137593f07f9ad050e78a3d37ce120357870e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f137593f07f9ad050e78a3d37ce120357870e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc93e4719c2ced744d75f0c281bb7ba29844bedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e4719c2ced744d75f0c281bb7ba29844bedd", "html_url": "https://github.com/rust-lang/rust/commit/fc93e4719c2ced744d75f0c281bb7ba29844bedd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e4719c2ced744d75f0c281bb7ba29844bedd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150d1fee04856ff158e34e8d687a7fe59e97ef33", "url": "https://api.github.com/repos/rust-lang/rust/commits/150d1fee04856ff158e34e8d687a7fe59e97ef33", "html_url": "https://github.com/rust-lang/rust/commit/150d1fee04856ff158e34e8d687a7fe59e97ef33"}, {"sha": "5b90fe1c3094050eecbb7be7440b398e98d0caa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b90fe1c3094050eecbb7be7440b398e98d0caa2", "html_url": "https://github.com/rust-lang/rust/commit/5b90fe1c3094050eecbb7be7440b398e98d0caa2"}], "stats": {"total": 762, "additions": 661, "deletions": 101}, "files": [{"sha": "40e6fc2c19db08292a20982646b9fe6dd6d226f7", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -37,7 +37,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/11.0-2020-10-12\n+\tbranch = rustc/11.0-2021-01-05\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "b7edc24bc4a1a1f2425ce659bcfa904d3619f71c", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -363,8 +363,15 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n \n fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     let src_name = input.source_name();\n-    let src =\n-        String::clone(&sess.source_map().get_source_file(&src_name).unwrap().src.as_ref().unwrap());\n+    let src = String::clone(\n+        &sess\n+            .source_map()\n+            .get_source_file(&src_name)\n+            .expect(\"get_source_file\")\n+            .src\n+            .as_ref()\n+            .expect(\"src\"),\n+    );\n     (src, src_name)\n }\n "}, {"sha": "5d56744805f893c9882819d5a5f0a36d3e16dcf8", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -98,7 +98,7 @@ pub(super) fn note_and_explain_region(\n         // uh oh, hope no user ever sees THIS\n         ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), None),\n \n-        ty::RePlaceholder(_) => (\"any other region\".to_string(), None),\n+        ty::RePlaceholder(_) => return,\n \n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user.\n@@ -1675,6 +1675,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.check_and_note_conflicting_crates(diag, terr);\n         self.tcx.note_and_explain_type_err(diag, terr, cause, span, body_owner_def_id.to_def_id());\n \n+        if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values {\n+            if let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind() {\n+                if let Some(def_id) = def_id.as_local() {\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let span = self.tcx.hir().span(hir_id);\n+                    diag.span_note(span, \"this closure does not fulfill the lifetime requirements\");\n+                }\n+            }\n+        }\n+\n         // It reads better to have the error origin as the final\n         // thing.\n         self.note_error_origin(diag, cause, exp_found);"}, {"sha": "c88869abc29e4d0b797752466059b61e45f6104c", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1,6 +1,7 @@\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n \n@@ -107,14 +108,37 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, &terr);\n-                note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\");\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"...does not necessarily outlive \",\n-                    sub,\n-                    \"\",\n-                );\n+                match (sub, sup) {\n+                    (ty::RePlaceholder(_), ty::RePlaceholder(_)) => {}\n+                    (ty::RePlaceholder(_), _) => {\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"\",\n+                            sup,\n+                            \" doesn't meet the lifetime requirements\",\n+                        );\n+                    }\n+                    (_, ty::RePlaceholder(_)) => {\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"the required lifetime does not necessarily outlive \",\n+                            sub,\n+                            \"\",\n+                        );\n+                    }\n+                    _ => {\n+                        note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\");\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"...does not necessarily outlive \",\n+                            sub,\n+                            \"\",\n+                        );\n+                    }\n+                }\n                 err\n             }\n             infer::Reborrow(span) => {\n@@ -286,13 +310,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         sup: Region<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         // I can't think how to do better than this right now. -nikomatsakis\n+        debug!(?placeholder_origin, ?sub, ?sup, \"report_placeholder_failure\");\n         match placeholder_origin {\n+            infer::Subtype(box ref trace)\n+                if matches!(\n+                    &trace.cause.code.peel_derives(),\n+                    ObligationCauseCode::BindingObligation(..)\n+                ) =>\n+            {\n+                // Hack to get around the borrow checker because trace.cause has an `Rc`.\n+                if let ObligationCauseCode::BindingObligation(_, span) =\n+                    &trace.cause.code.peel_derives()\n+                {\n+                    let span = *span;\n+                    let mut err = self.report_concrete_failure(placeholder_origin, sub, sup);\n+                    err.span_note(span, \"the lifetime requirement is introduced here\");\n+                    err\n+                } else {\n+                    unreachable!()\n+                }\n+            }\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsPlaceholderMismatch;\n-                self.report_and_explain_type_error(trace, &terr)\n+                return self.report_and_explain_type_error(trace, &terr);\n             }\n-\n-            _ => self.report_concrete_failure(placeholder_origin, sub, sup),\n+            _ => return self.report_concrete_failure(placeholder_origin, sub, sup),\n         }\n     }\n }"}, {"sha": "37bdc878b16cdbd55d2c027dbdae8bab001700d8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::lint::LevelSource;\n+use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n     struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n@@ -106,9 +106,9 @@ impl<'s> LintLevelsBuilder<'s> {\n     /// diagnostic with no change to `specs`.\n     fn insert_spec(\n         &mut self,\n-        specs: &mut FxHashMap<LintId, LevelSource>,\n+        specs: &mut FxHashMap<LintId, LevelAndSource>,\n         id: LintId,\n-        (level, src): LevelSource,\n+        (level, src): LevelAndSource,\n     ) {\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a"}, {"sha": "80c87dddd5614888eb329dc5a8fea11fc19f8c40", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -46,7 +46,7 @@ impl LintLevelSource {\n }\n \n /// A tuple of a lint level and its source.\n-pub type LevelSource = (Level, LintLevelSource);\n+pub type LevelAndSource = (Level, LintLevelSource);\n \n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n@@ -57,11 +57,11 @@ pub enum LintSet {\n     CommandLine {\n         // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n         // flag.\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n     },\n \n     Node {\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n         parent: u32,\n     },\n }\n@@ -75,9 +75,9 @@ impl LintLevelSets {\n         &self,\n         lint: &'static Lint,\n         idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n-    ) -> LevelSource {\n+    ) -> LevelAndSource {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -113,7 +113,7 @@ impl LintLevelSets {\n         &self,\n         id: LintId,\n         mut idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n     ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n@@ -157,7 +157,7 @@ impl LintLevelMap {\n         lint: &'static Lint,\n         id: HirId,\n         session: &Session,\n-    ) -> Option<LevelSource> {\n+    ) -> Option<LevelAndSource> {\n         self.id_to_set.get(&id).map(|idx| self.sets.get_lint_level(lint, *idx, None, session))\n     }\n }"}, {"sha": "f810f6a56a5207cc4d8fac2e957f48288a437397", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::{dep_constructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n+use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -78,6 +79,14 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self, tcx: TyCtxt<'tcx>) -> InstantiationMode {\n+        let generate_cgu_internal_copies = tcx\n+            .sess\n+            .opts\n+            .debugging_opts\n+            .inline_in_all_cgus\n+            .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n+            && !tcx.sess.link_dead_code();\n+\n         match *self {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n@@ -90,26 +99,21 @@ impl<'tcx> MonoItem<'tcx> {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }\n \n-                let generate_cgu_internal_copies = tcx\n-                    .sess\n-                    .opts\n-                    .debugging_opts\n-                    .inline_in_all_cgus\n-                    .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-                    && !tcx.sess.link_dead_code();\n-\n                 // At this point we don't have explicit linkage and we're an\n-                // inlined function. If we should generate local copies for each CGU,\n-                // then return `LocalCopy`, otherwise we'll just generate one copy\n-                // and share it with all CGUs in this crate.\n+                // inlined function. If we're inlining into all CGUs then we'll\n+                // be creating a local copy per CGU.\n                 if generate_cgu_internal_copies {\n-                    InstantiationMode::LocalCopy\n-                } else {\n-                    // Finally, if we've reached this point, then we should optimize for\n-                    // compilation speed. In that regard, we will ignore any `#[inline]`\n-                    // annotations on the function and simply codegen it as usual. This could\n-                    // conflict with upstream crates as it could be an exported symbol.\n-                    InstantiationMode::GloballyShared { may_conflict: true }\n+                    return InstantiationMode::LocalCopy;\n+                }\n+\n+                // Finally, if this is `#[inline(always)]` we're sure to respect\n+                // that with an inline copy per CGU, but otherwise we'll be\n+                // creating one copy of this `#[inline]` function which may\n+                // conflict with upstream crates as it could be an exported\n+                // symbol.\n+                match tcx.codegen_fn_attrs(instance.def_id()).inline {\n+                    InlineAttr::Always => InstantiationMode::LocalCopy,\n+                    _ => InstantiationMode::GloballyShared { may_conflict: true },\n                 }\n             }\n             MonoItem::Static(..) | MonoItem::GlobalAsm(..) => {"}, {"sha": "041c040f0b7e26a73d36df81a3b9a552d560db3e", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -92,8 +92,7 @@ impl<'tcx> Const<'tcx> {\n                 let item_id = tcx.hir().get_parent_node(hir_id);\n                 let item_def_id = tcx.hir().local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n-                let index =\n-                    generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id).to_def_id()];\n+                let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }"}, {"sha": "625a0989ab353804689861c76371d9c198bbd7a0", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -813,8 +813,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let item_id = cx.tcx.hir().get_parent_node(hir_id);\n             let item_def_id = cx.tcx.hir().local_def_id(item_id);\n             let generics = cx.tcx.generics_of(item_def_id);\n-            let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n-            let index = generics.param_def_id_to_index[&local_def_id.to_def_id()];\n+            let index = generics.param_def_id_to_index[&def_id];\n             let name = cx.tcx.hir().name(hir_id);\n             let val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {"}, {"sha": "a7b8c8ba1d49213807a91ffa3bd583645405062e", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -872,8 +872,10 @@ impl SourceMap {\n     }\n \n     pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {\n+        // Remap filename before lookup\n+        let filename = self.path_mapping().map_filename_prefix(filename).0;\n         for sf in self.files.borrow().source_files.iter() {\n-            if *filename == sf.name {\n+            if filename == sf.name {\n                 return Some(sf.clone());\n             }\n         }\n@@ -1041,4 +1043,15 @@ impl FilePathMapping {\n \n         (path, false)\n     }\n+\n+    fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {\n+        match file {\n+            FileName::Real(realfile) => {\n+                let path = realfile.local_path();\n+                let (path, mapped) = self.map_prefix(path.to_path_buf());\n+                (FileName::Real(RealFileName::Named(path)), mapped)\n+            }\n+            other => (other.clone(), false),\n+        }\n+    }\n }"}, {"sha": "f329b2d2c88588c0e045455a68b4982ba7d37340", "filename": "compiler/rustc_target/src/spec/i386_unknown_linux_gnu.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,8 @@\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::i686_unknown_linux_gnu::target();\n+    base.cpu = \"i386\".to_string();\n+    base.llvm_target = \"i386-unknown-linux-gnu\".to_string();\n+    base\n+}"}, {"sha": "5d96a558cb72ae1d5c1510e791018043b3e5f609", "filename": "compiler/rustc_target/src/spec/i486_unknown_linux_gnu.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,8 @@\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::i686_unknown_linux_gnu::target();\n+    base.cpu = \"i486\".to_string();\n+    base.llvm_target = \"i486-unknown-linux-gnu\".to_string();\n+    base\n+}"}, {"sha": "c22f001744639fd6543cc211908f2a294fe8c5c6", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -32,6 +32,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n             return;\n         }\n+        self.suggest_no_capture_closure(err, expected, expr_ty);\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);"}, {"sha": "9fbf330fe02086a52bd61cff54610dee5f5eae45", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,7 +2,7 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, Span};\n+use rustc_span::{self, MultiSpan, Span};\n \n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -287,6 +287,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// When encountering a closure that captures variables, where a FnPtr is expected,\n+    /// suggest a non-capturing closure\n+    pub(in super::super) fn suggest_no_capture_closure(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if let (ty::FnPtr(_), ty::Closure(def_id, _)) = (expected.kind(), found.kind()) {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(*def_id) {\n+                // Report upto four upvars being captured to reduce the amount error messages\n+                // reported back to the user.\n+                let spans_and_labels = upvars\n+                    .iter()\n+                    .take(4)\n+                    .map(|(var_hir_id, upvar)| {\n+                        let var_name = self.tcx.hir().name(*var_hir_id).to_string();\n+                        let msg = format!(\"`{}` captured here\", var_name);\n+                        (upvar.span, msg)\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                let mut multi_span: MultiSpan =\n+                    spans_and_labels.iter().map(|(sp, _)| *sp).collect::<Vec<_>>().into();\n+                for (sp, label) in spans_and_labels {\n+                    multi_span.push_span_label(sp, label);\n+                }\n+                err.span_note(multi_span, \"closures can only be coerced to `fn` types if they do not capture any variables\");\n+            }\n+        }\n+    }\n+\n     /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n     pub(in super::super) fn suggest_calling_boxed_future_when_appropriate(\n         &self,"}, {"sha": "95e18ef2a654343b71f3f96063b956a11c2c94fa", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -95,11 +95,12 @@ mod tests;\n // a backtrace or actually symbolizing it.\n \n use crate::backtrace_rs::{self, BytesOrWideString};\n+use crate::cell::UnsafeCell;\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n-use crate::sync::Mutex;\n+use crate::sync::Once;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n \n@@ -132,7 +133,7 @@ pub enum BacktraceStatus {\n enum Inner {\n     Unsupported,\n     Disabled,\n-    Captured(Mutex<Capture>),\n+    Captured(LazilyResolvedCapture),\n }\n \n struct Capture {\n@@ -171,12 +172,11 @@ enum BytesOrWide {\n \n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut capture = match &self.inner {\n+        let capture = match &self.inner {\n             Inner::Unsupported => return fmt.write_str(\"<unsupported>\"),\n             Inner::Disabled => return fmt.write_str(\"<disabled>\"),\n-            Inner::Captured(c) => c.lock().unwrap(),\n+            Inner::Captured(c) => c.force(),\n         };\n-        capture.resolve();\n \n         let frames = &capture.frames[capture.actual_start..];\n \n@@ -331,7 +331,7 @@ impl Backtrace {\n         let inner = if frames.is_empty() {\n             Inner::Unsupported\n         } else {\n-            Inner::Captured(Mutex::new(Capture {\n+            Inner::Captured(LazilyResolvedCapture::new(Capture {\n                 actual_start: actual_start.unwrap_or(0),\n                 frames,\n                 resolved: false,\n@@ -355,12 +355,11 @@ impl Backtrace {\n \n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut capture = match &self.inner {\n+        let capture = match &self.inner {\n             Inner::Unsupported => return fmt.write_str(\"unsupported backtrace\"),\n             Inner::Disabled => return fmt.write_str(\"disabled backtrace\"),\n-            Inner::Captured(c) => c.lock().unwrap(),\n+            Inner::Captured(c) => c.force(),\n         };\n-        capture.resolve();\n \n         let full = fmt.alternate();\n         let (frames, style) = if full {\n@@ -404,6 +403,33 @@ impl fmt::Display for Backtrace {\n     }\n }\n \n+struct LazilyResolvedCapture {\n+    sync: Once,\n+    capture: UnsafeCell<Capture>,\n+}\n+\n+impl LazilyResolvedCapture {\n+    fn new(capture: Capture) -> Self {\n+        LazilyResolvedCapture { sync: Once::new(), capture: UnsafeCell::new(capture) }\n+    }\n+\n+    fn force(&self) -> &Capture {\n+        self.sync.call_once(|| {\n+            // SAFETY: This exclusive reference can't overlap with any others\n+            // `Once` guarantees callers will block until this closure returns\n+            // `Once` also guarantees only a single caller will enter this closure\n+            unsafe { &mut *self.capture.get() }.resolve();\n+        });\n+\n+        // SAFETY: This shared reference can't overlap with the exclusive reference above\n+        unsafe { &*self.capture.get() }\n+    }\n+}\n+\n+// SAFETY: Access to the inner value is synchronized using a thread-safe `Once`\n+// So long as `Capture` is `Sync`, `LazilyResolvedCapture` is too\n+unsafe impl Sync for LazilyResolvedCapture where Capture: Sync {}\n+\n impl Capture {\n     fn resolve(&mut self) {\n         // If we're already resolved, nothing to do!"}, {"sha": "31cf0f702185c9ca47e0df66821f302b673d0334", "filename": "library/std/src/backtrace/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -3,7 +3,7 @@ use super::*;\n #[test]\n fn test_debug() {\n     let backtrace = Backtrace {\n-        inner: Inner::Captured(Mutex::new(Capture {\n+        inner: Inner::Captured(LazilyResolvedCapture::new(Capture {\n             actual_start: 1,\n             resolved: true,\n             frames: vec![\n@@ -54,4 +54,7 @@ fn test_debug() {\n     \\n]\";\n \n     assert_eq!(format!(\"{:#?}\", backtrace), expected);\n+\n+    // Format the backtrace a second time, just to make sure lazily resolved state is stable\n+    assert_eq!(format!(\"{:#?}\", backtrace), expected);\n }"}, {"sha": "efcb006870c5a76f4b8010bbe5c39d5f474165c4", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -412,11 +412,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"test-builder\", |o| {\n-            o.optflag(\n-                \"\",\n-                \"test-builder\",\n-                \"specified the rustc-like binary to use as the test builder\",\n-            )\n+            o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n         unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n     ]"}, {"sha": "f9a8d70b6e0365ac2172ca6b7f1de0341297458d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1 +1 @@\n-Subproject commit fb115ee43b77601b237717c21ab0a8f5b5b9d50a\n+Subproject commit f9a8d70b6e0365ac2172ca6b7f1de0341297458d"}, {"sha": "8124141418bc3cfbe53396a658f9e5077fbccc84", "filename": "src/test/incremental/hygiene/load_cached_hygiene.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1,5 +1,5 @@\n // revisions:rpass1 rpass2\n-// compile-flags: -Z query-dep-graph -O\n+// compile-flags: -Z query-dep-graph\n // aux-build:cached_hygiene.rs\n \n // This tests the folllowing scenario\n@@ -19,12 +19,7 @@\n // the metadata. Specifically, we were not resetting `orig_id`\n // for an `EpxnData` generate in the current crate, which would cause\n // us to serialize the `ExpnId` pointing to a garbage location in\n-// the metadata.o\n-\n-// NOTE: We're explicitly passing the `-O` optimization flag because if optimizations are not\n-// enabled, then rustc will ignore the `#[inline(always)]` attribute which means we do not load\n-// the optimized mir for the unmodified function to be loaded and so the CGU containing that\n-// function will be reused.\n+// the metadata.\n \n #![feature(rustc_attrs)]\n "}, {"sha": "b01f02444eae8dfa516799efc3e30177dee12b19", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1,18 +1,11 @@\n // revisions:rpass1 rpass2 rpass3\n-// compile-flags: -Z query-dep-graph -g -O\n+// compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n // ignore-asmjs wasm2js does not support source maps yet\n-\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n \n-// NOTE: We're explicitly passing the `-O` optimization flag because if no optimizations are\n-// requested, rustc will ignore the `#[inline]` attribute. This is a performance optimization for\n-// non-optimized builds which causes us to generate fewer copies of inlined functions when\n-// runtime performance doesn't matter. Without this flag, the function will go into a different\n-// CGU which can be reused by this crate.\n-\n #![feature(rustc_attrs)]\n \n #![rustc_partition_reused(module=\"main\", cfg=\"rpass2\")]"}, {"sha": "6dbc19e9d9c6cd6e452bb2a688f6bc371fbdbf74", "filename": "src/test/pretty/expanded-and-path-remap-80832.pp", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,13 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::v1::*;\n+#[macro_use]\n+extern crate std;\n+// Test for issue 80832\n+//\n+// pretty-mode:expanded\n+// pp-exact:expanded-and-path-remap-80832.pp\n+// compile-flags: --remap-path-prefix {{src-base}}=the/src\n+\n+fn main() { }"}, {"sha": "f48441fbc5755ce3c28f376609b07f250e16a1eb", "filename": "src/test/pretty/expanded-and-path-remap-80832.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,7 @@\n+// Test for issue 80832\n+//\n+// pretty-mode:expanded\n+// pp-exact:expanded-and-path-remap-80832.pp\n+// compile-flags: --remap-path-prefix {{src-base}}=the/src\n+\n+fn main() {}"}, {"sha": "0cab955f6442bb70d3acb8063ed645666a9ba414", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -1,12 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=0\n-\tif ![cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b']; then \\\n-\t\techo \"not found call instruction when one was expected\"; \\\n-\t\texit 1; \\\n-\tfi\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=1\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n \tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\"}, {"sha": "7c958a80be3953d617b9f50ad15a0c9635a91402", "filename": "src/test/rustdoc/issue-80893.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Frustdoc%2Fissue-80893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Frustdoc%2Fissue-80893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80893.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --test -Z unstable-options --test-builder true\n+\n+/// ```no_run\n+/// This tests that `--test-builder` is accepted as a flag by rustdoc.\n+/// ```\n+pub struct Foo;"}, {"sha": "e2847b6b72b8638f741e7a8d9ff8f71ee9d2f682", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,10 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `&'a ()`\n               found type `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:15:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2b53802fea793366b9b228d51e86e16d1eb261d7", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -8,6 +8,11 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-1.rs:6:39\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |                                       ^ `a` captured here\n \n error: aborting due to previous error\n "}, {"sha": "ed9f87a2c94a8cc5807f07b61a966aabe34e840f", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -8,6 +8,11 @@ LL |     let bar: fn() -> u8 = || { b };\n    |\n    = note: expected fn pointer `fn() -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-2.rs:6:32\n+   |\n+LL |     let bar: fn() -> u8 = || { b };\n+   |                                ^ `b` captured here\n \n error: aborting due to previous error\n "}, {"sha": "275bff645dba644965a56dca64fd9e159e5dc82a", "filename": "src/test/ui/closures/closure-no-fn-4.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let b = 2;\n+    let _: fn(usize) -> usize = match true {\n+        true => |a| a + 1,\n+        false => |a| a - b,\n+        //~^ ERROR `match` arms have incompatible types\n+    };\n+}"}, {"sha": "89798ec5dd34f4d947c829d8d1f32b805d297a14", "filename": "src/test/ui/closures/closure-no-fn-4.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure-no-fn-4.rs:5:18\n+   |\n+LL |       let _: fn(usize) -> usize = match true {\n+   |  _________________________________-\n+LL | |         true => |a| a + 1,\n+   | |                 --------- this is found to be of type `fn(usize) -> usize`\n+LL | |         false => |a| a - b,\n+   | |                  ^^^^^^^^^ expected fn pointer, found closure\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `fn(usize) -> usize`\n+                 found closure `[closure@$DIR/closure-no-fn-4.rs:5:18: 5:27]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-4.rs:5:26\n+   |\n+LL |         false => |a| a - b,\n+   |                          ^ `b` captured here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "43e3e977e34abd716b60b70064abb5e7ab2fd581", "filename": "src/test/ui/closures/closure-no-fn-5.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,12 @@\n+// When providing diagnostics about not being able to coerce a capturing-closure\n+// to fn type, we want to report only upto 4 captures.\n+\n+fn main() {\n+    let a = 0u8;\n+    let b = 0u8;\n+    let c = 0u8;\n+    let d = 0u8;\n+    let e = 0u8;\n+    let bar: fn() -> u8 = || { a; b; c; d; e };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "1f373f10489e634fbf44ce5118f806a3ebfa24fd", "filename": "src/test/ui/closures/closure-no-fn-5.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-no-fn-5.rs:10:27\n+   |\n+LL |     let bar: fn() -> u8 = || { a; b; c; d; e };\n+   |              ----------   ^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn() -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-5.rs:10:27: 10:47]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-5.rs:10:32\n+   |\n+LL |     let bar: fn() -> u8 = || { a; b; c; d; e };\n+   |                                ^  ^  ^  ^ `d` captured here\n+   |                                |  |  |\n+   |                                |  |  `c` captured here\n+   |                                |  `b` captured here\n+   |                                `a` captured here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "37813879ce7529d96fb4f656b6683c7654df9045", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -8,6 +8,11 @@ LL |     call_bare(f)\n    |\n    = note: expected fn pointer `for<'r> fn(&'r str)`\n                  found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-reform-bad.rs:10:43\n+   |\n+LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n+   |                                           ^^^^^^ `string` captured here\n \n error: aborting due to previous error\n "}, {"sha": "d19b07acbf175c3aa8ed7e88fbe87ed4e847e0b0", "filename": "src/test/ui/closures/print/closure-print-verbose.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -8,6 +8,11 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n                  found closure `[main::{closure#0} closure_substs=(unavailable)]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-print-verbose.rs:10:39\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |                                       ^ `a` captured here\n \n error: aborting due to previous error\n "}, {"sha": "52b51bb943aa62f437f729e5e1e92c45d9ff6066", "filename": "src/test/ui/extern/extern-compare-with-return-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,8 +2,9 @@\n // Tests that we can compare various kinds of extern fn signatures.\n #![allow(non_camel_case_types)]\n \n-extern fn voidret1() {}\n-extern fn voidret2() {}\n+// `dbg!()` differentiates these functions to ensure they won't be merged.\n+extern fn voidret1() { dbg!() }\n+extern fn voidret2() { dbg!() }\n \n extern fn uintret() -> usize { 22 }\n "}, {"sha": "63411b59280bba93d7042f7e52bee46ba601122e", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,19 +2,47 @@ error[E0308]: mismatched types\n   --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n+note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined on the body at 11:15\n+  --> $DIR/resume-arg-late-bound.rs:11:15\n+   |\n+LL |       let gen = |arg: &mut bool| {\n+   |  _______________^\n+LL | |         yield ();\n+LL | |         *arg = true;\n+LL | |     };\n+   | |_____^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/resume-arg-late-bound.rs:8:17\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n+note: the anonymous lifetime #1 defined on the body at 11:15 doesn't meet the lifetime requirements\n+  --> $DIR/resume-arg-late-bound.rs:11:15\n+   |\n+LL |       let gen = |arg: &mut bool| {\n+   |  _______________^\n+LL | |         yield ();\n+LL | |         *arg = true;\n+LL | |     };\n+   | |_____^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/resume-arg-late-bound.rs:8:17\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed810d443bef7f098f209e71dceb32decdb9b5a8", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,19 +2,39 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Bar<&'a isize>`\n               found type `Bar<&'b isize>`\n+note: the required lifetime does not necessarily outlive the lifetime `'b` as defined on the function body at 39:21\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |\n+LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Bar<&'a isize>`\n               found type `Bar<&'b isize>`\n+note: the lifetime `'b` as defined on the function body at 39:21 doesn't meet the lifetime requirements\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |\n+LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5c641be2d47c3126ca959929ce93a0d48db7a2e", "filename": "src/test/ui/issues/issue-26217.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -3,8 +3,6 @@ error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n    |\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^\n-   |\n-   = note: type must outlive any other region\n \n error: aborting due to previous error\n "}, {"sha": "7699e97da99ad2f4a9ed4939dba35963f9f6b6cc", "filename": "src/test/ui/issues/issue-57843.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -6,6 +6,11 @@ LL |     Foo(Box::new(|_| ()));\n    |\n    = note: expected type `FnOnce<(&'a bool,)>`\n               found type `FnOnce<(&bool,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57843.rs:23:18\n+   |\n+LL |     Foo(Box::new(|_| ()));\n+   |                  ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4970c579e7b9857962f8d608d6447fc4ee2f94b4", "filename": "src/test/ui/lifetimes/issue-79187-2.nll.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,44 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-79187-2.rs:9:24\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |                  -   - ^ returning this value requires that `'1` must outlive `'2`\n+   |                  |   |\n+   |                  |   return type of closure is &'2 i32\n+   |                  let's call the lifetime of this reference `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-79187-2.rs:10:34\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |                  -        -      ^ returning this value requires that `'1` must outlive `'2`\n+   |                  |        |\n+   |                  |        let's call the lifetime of this reference `'2`\n+   |                  let's call the lifetime of this reference `'1`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:9:5\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:10:5\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "29d108facab3fc775bcd6f9f9c6b97aeb9f43621", "filename": "src/test/ui/lifetimes/issue-79187-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,23 @@\n+trait Foo {}\n+\n+impl<F> Foo for F where F: Fn(&i32) -> &i32 {}\n+\n+fn take_foo(_: impl Foo) {}\n+\n+fn main() {\n+    take_foo(|a| a); //~ ERROR mismatched types\n+    take_foo(|a: &i32| a); //~ ERROR mismatched types\n+    take_foo(|a: &i32| -> &i32 { a }); //~ ERROR mismatched types\n+\n+    // OK\n+    take_foo(identity(|a| a));\n+    take_foo(identity(|a: &i32| a));\n+    take_foo(identity(|a: &i32| -> &i32 { a }));\n+\n+    fn identity<F>(t: F) -> F\n+    where\n+        F: Fn(&i32) -> &i32,\n+    {\n+        t\n+    }\n+}"}, {"sha": "a156c74fb3304e1beaeb29b2a0db0f756f144275", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,60 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'r> Fn<(&'r i32,)>`\n+              found type `Fn<(&i32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:8:14\n+   |\n+LL |     take_foo(|a| a);\n+   |              ^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:9:5\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n+note: the anonymous lifetime #1 defined on the body at 9:14 doesn't meet the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:9:14\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |              ^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:10:5\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n+note: the anonymous lifetime #1 defined on the body at 10:14 doesn't meet the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:10:14\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "aa8809dbc95f7794401bbe8363be29fee3dbc822", "filename": "src/test/ui/lifetimes/issue-79187.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bf331d8a6068e5861867161a0e6b4b1da18cc34b", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,6 @@\n+fn thing(x: impl FnOnce(&u32)) {}\n+\n+fn main() {\n+    let f = |_| ();\n+    thing(f); //~ERROR mismatched types\n+}"}, {"sha": "63f501e08fce4ead09fcd54677196dcb4069f226", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `FnOnce<(&u32,)>`\n+              found type `FnOnce<(&u32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187.rs:4:13\n+   |\n+LL |     let f = |_| ();\n+   |             ^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187.rs:1:18\n+   |\n+LL | fn thing(x: impl FnOnce(&u32)) {}\n+   |                  ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "02ba60f7f4b737635a730c4a386784fa80d9e3d9", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -26,37 +26,77 @@ error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n+note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(*mut &u32,)>`\n               found type `FnOnce<(*mut &'a u32,)>`\n+note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n+note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(*mut &u32,)>`\n               found type `FnOnce<(*mut &'a u32,)>`\n+note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c41bece3c196fd2becd3c5745064363bfe4a91bf", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,10 +2,20 @@ error[E0308]: mismatched types\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL |     baz(|_| ());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(&'r (),)>`\n               found type `Fn<(&(),)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/closure-mismatch.rs:8:9\n+   |\n+LL |     baz(|_| ());\n+   |         ^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-mismatch.rs:5:11\n+   |\n+LL | fn baz<T: Foo>(_: T) {}\n+   |           ^^^\n \n error: aborting due to previous error\n "}, {"sha": "be1dd1a8524c803bebced010c2bc5140cb950b66", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -18,6 +18,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -27,6 +32,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9d9293e958eeb909069a44a2c25923ae3c513559", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -6,6 +6,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -15,6 +20,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -24,6 +34,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -33,6 +48,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -42,6 +62,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ecf3a96b5a8dcaf1bdf41823e7d64de11e847ca5", "filename": "src/test/ui/unboxed-closures/issue-30906.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e4719c2ced744d75f0c281bb7ba29844bedd/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr?ref=fc93e4719c2ced744d75f0c281bb7ba29844bedd", "patch": "@@ -2,10 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-30906.rs:15:5\n    |\n LL |     test(Compose(f, |_| {}));\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(&'x str,)>`\n               found type `FnOnce<(&str,)>`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-30906.rs:3:12\n+   |\n+LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}