{"sha": "1c7ab18c08109753b795bff83dd838ac8e4cdb70", "node_id": "C_kwDOAAsO6NoAKDFjN2FiMThjMDgxMDk3NTNiNzk1YmZmODNkZDgzOGFjOGU0Y2RiNzA", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-19T09:14:55Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-21T11:37:32Z"}, "message": "Rename `drop_copy` lint to `dropping_copy_types`", "tree": {"sha": "d04414ef8f18c0677f2435b117eb2775922c4614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04414ef8f18c0677f2435b117eb2775922c4614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7ab18c08109753b795bff83dd838ac8e4cdb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7ab18c08109753b795bff83dd838ac8e4cdb70", "html_url": "https://github.com/rust-lang/rust/commit/1c7ab18c08109753b795bff83dd838ac8e4cdb70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7ab18c08109753b795bff83dd838ac8e4cdb70/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77014a608a97884e547d4215517ccd4babb2088", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77014a608a97884e547d4215517ccd4babb2088", "html_url": "https://github.com/rust-lang/rust/commit/d77014a608a97884e547d4215517ccd4babb2088"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "169c1fbe2acaf3533483b30e3db8d045531e52f5", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -525,7 +525,7 @@ lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned v\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+lint_dropping_copy_types = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n "}, {"sha": "e61adc61e5ecf77c3ca1dc2e77fec1f33cd83d82", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -58,7 +58,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// The `dropping_copy_types` lint checks for calls to `std::mem::drop` with a value\n     /// that derives the Copy trait.\n     ///\n     /// ### Example\n@@ -76,7 +76,7 @@ declare_lint! {\n     /// Calling `std::mem::drop` [does nothing for types that\n     /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n     /// value will be copied and moved into the function on invocation.\n-    pub DROP_COPY,\n+    pub DROPPING_COPY_TYPES,\n     Warn,\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n@@ -109,7 +109,7 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROPPING_COPY_TYPES, FORGET_COPY]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -129,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n                     cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(DROPPING_COPY_TYPES, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n                 }\n                 sym::mem_forget if is_copy => {\n                     cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });"}, {"sha": "278c0bc32e95563bf8a5a80a7ce08b30953c0f66", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -673,7 +673,7 @@ pub struct DropRefDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_drop_copy)]\n+#[diag(lint_dropping_copy_types)]\n #[note]\n pub struct DropCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,"}, {"sha": "afbfd6d362dc9c2d7092bcf445efb37ef6669751", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -968,7 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n-/// # #![cfg_attr(not(bootstrap), allow(drop_copy))]\n+/// # #![cfg_attr(not(bootstrap), allow(dropping_copy_types))]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///"}, {"sha": "9a7b39e1544ebab84a974220af53aa5babe569b0", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                // early return for uplifted lints: drop_ref, dropping_copy_types, forget_ref, forget_copy\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => return,\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,"}, {"sha": "308e40abf6a2597e665a32521738c536622b6a12", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -33,7 +33,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n-    (\"clippy::drop_copy\", \"drop_copy\"),\n+    (\"clippy::drop_copy\", \"dropping_copy_types\"),\n     (\"clippy::drop_ref\", \"drop_ref\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),"}, {"sha": "4ef6f0ca92f2dae22939a1ab32a22efa426b1908", "filename": "src/tools/clippy/tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "8633e422805a6c54427cffdbf1702ecfe52a1f6f", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -30,7 +30,7 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n #![allow(forget_copy)]\n@@ -77,7 +77,7 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n-#![warn(drop_copy)]\n+#![warn(dropping_copy_types)]\n #![warn(drop_ref)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]"}, {"sha": "07b33b4da95b3c4d8d63f0fe3d366ac51a44cc32", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -30,7 +30,7 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n #![allow(forget_copy)]"}, {"sha": "20e7d96b7209be5db936e028a7e8e511a56455ee", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -186,11 +186,11 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n   --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_copy)]\n-   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n   --> $DIR/rename.rs:81:9"}, {"sha": "d622b2fa7d81207576d4b5dda90548f7beb254e7", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,6 +1,6 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "ca825901372c5eb05b5d6ea1e80297ea1ce7a89b", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test printing allocations that contain single-byte provenance.\n "}, {"sha": "6e13a9ea8369bdd7124cbfcb1ff8cd0ade8b4ce7", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     let array = [(); usize::MAX];"}, {"sha": "ebd8e1d55945f9bea073c9e71519b14898824086", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::convert::identity;\n "}, {"sha": "78e965cc4bc7b577ee3513301d5aa191e389df14", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "9acb1ec5e43a68ff52945fc9c46cf220c1dfc970", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n struct A { a: isize, b: Box<isize> }\n "}, {"sha": "5e4c19ff38b20bf4544267d6428826bdb5f03970", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(drop_ref, dropping_copy_types)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "fce97d9ba2370ddbc859b666f4181bf0cf661bce", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     use ::std::mem;"}, {"sha": "a52900311ea65f0f5f8518abfb7795a0cc9e1635", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // needs-unwind\n \n-#![allow(drop_ref, drop_copy)]\n+#![allow(drop_ref, dropping_copy_types)]\n \n static mut CHECK: usize = 0;\n "}, {"sha": "137a407931a1761fdf537afd28add1c82d305ad9", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -4,7 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "aac6e591e688cc60d1f113a371cdceb0d1af59f4", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -5,7 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(drop_ref, dropping_copy_types)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "a5dde3912cc00efb54f2952971a5a5beadf3c5fd", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "195166f975b638dc0352f87f7279cd3f36537829", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,5 +1,5 @@\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // run-pass\n "}, {"sha": "721bb7281c0ffee5eddcbcc46a4b9bbf76651fb7", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n macro mac() {\n     mod m {"}, {"sha": "2937320e5d833b05776b2ed0e0103a2369191803", "filename": "tests/ui/lint/dropping_copy_types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(drop_copy)]\n+#![warn(dropping_copy_types)]\n \n use std::mem::drop;\n use std::vec::Vec;", "previous_filename": "tests/ui/lint/drop_copy.rs"}, {"sha": "dc5c6211e7112d258619763c2005535a6f44c0bd", "filename": "tests/ui/lint/dropping_copy_types.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.stderr?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:34:5\n+  --> $DIR/dropping_copy_types.rs:34:5\n    |\n LL |     drop(s1);\n    |     ^^^^^--^\n@@ -8,13 +8,13 @@ LL |     drop(s1);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/drop_copy.rs:3:9\n+  --> $DIR/dropping_copy_types.rs:3:9\n    |\n-LL | #![warn(drop_copy)]\n-   |         ^^^^^^^^^\n+LL | #![warn(dropping_copy_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:35:5\n+  --> $DIR/dropping_copy_types.rs:35:5\n    |\n LL |     drop(s2);\n    |     ^^^^^--^\n@@ -24,7 +24,7 @@ LL |     drop(s2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:36:5\n+  --> $DIR/dropping_copy_types.rs:36:5\n    |\n LL |     drop(s3);\n    |     ^^^^^--^\n@@ -35,7 +35,7 @@ LL |     drop(s3);\n    = note: `#[warn(drop_ref)]` on by default\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:37:5\n+  --> $DIR/dropping_copy_types.rs:37:5\n    |\n LL |     drop(s4);\n    |     ^^^^^--^\n@@ -45,7 +45,7 @@ LL |     drop(s4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:38:5\n+  --> $DIR/dropping_copy_types.rs:38:5\n    |\n LL |     drop(s5);\n    |     ^^^^^--^\n@@ -55,7 +55,7 @@ LL |     drop(s5);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:50:5\n+  --> $DIR/dropping_copy_types.rs:50:5\n    |\n LL |     drop(a2);\n    |     ^^^^^--^\n@@ -65,7 +65,7 @@ LL |     drop(a2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:52:5\n+  --> $DIR/dropping_copy_types.rs:52:5\n    |\n LL |     drop(a4);\n    |     ^^^^^--^\n@@ -75,7 +75,7 @@ LL |     drop(a4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:71:13\n+  --> $DIR/dropping_copy_types.rs:71:13\n    |\n LL |             drop(println_and(13));\n    |             ^^^^^---------------^\n@@ -85,7 +85,7 @@ LL |             drop(println_and(13));\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:74:14\n+  --> $DIR/dropping_copy_types.rs:74:14\n    |\n LL |         3 if drop(println_and(14)) == () => (),\n    |              ^^^^^---------------^\n@@ -95,7 +95,7 @@ LL |         3 if drop(println_and(14)) == () => (),\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:76:14\n+  --> $DIR/dropping_copy_types.rs:76:14\n    |\n LL |         4 => drop(2),\n    |              ^^^^^-^", "previous_filename": "tests/ui/lint/drop_copy.stderr"}, {"sha": "ba635e6638c8c13c3426bb3b4971638019bd71a4", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, dropping_copy_types)]\n \n use std::ops::AddAssign;\n "}, {"sha": "10810388d2033ba1b37c5b2e8b52dc7ab6cd8b93", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -4,7 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "39df7de5a7fbb9dc51322ada7f290032a7cd7c51", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "2e9eff59386de53497a70c29ff598deba9873caf", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -5,7 +5,7 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()"}, {"sha": "398cc0a0ee6e2a0d32c9eebff5b0142d28be50fb", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![allow(drop_ref)]\n \n fn main() {"}, {"sha": "6184a58b8869678c4d90cb3ea00d05f6dab7035a", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![allow(drop_ref)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #![feature(box_patterns)]\n "}, {"sha": "1df51c0edd911538647b301d6d21068ca4342311", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -2,7 +2,7 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "f38a6e674da99513460ea819594329fa6efee88a", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n // build-pass\n // ignore-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n async fn wait() {}\n "}, {"sha": "6adc14f9b99e1cb1857fc292f119079ae56a9d54", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -6,7 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "0c1e931444162034e05a5bef42913c1e0f9a871d", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::PhantomData;\n "}, {"sha": "542be3942b7eecd380cc983bb27bfb7ffd380cb8", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -4,7 +4,7 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone, Debug)]\n struct Unit;"}, {"sha": "209b91af1ddfb6a023cf86969511c4e463478d2c", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "ef3c2db696af2d5186ab26ff135519b857cefc7a", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "c6268dba567f73f74f5af0f254181b70324dc9a3", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -12,7 +12,7 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub mod before {\n     #[no_mangle]"}, {"sha": "af25010e3bd282bb9907f05112625152a62c9168", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -1,5 +1,5 @@\n #![allow(dead_code)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,"}, {"sha": "2ce0b6b0df8f06423f4ba2d5a3b2e54f23606184", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -6,7 +6,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n trait A {\n     type B;"}, {"sha": "7b7f4a4efdb85d2472a819b8095b4343012ad61f", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7ab18c08109753b795bff83dd838ac8e4cdb70/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=1c7ab18c08109753b795bff83dd838ac8e4cdb70", "patch": "@@ -2,7 +2,7 @@\n // Check tautalogically false `Copy` bounds\n \n #![feature(trivial_bounds)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(drop_ref, dropping_copy_types)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}]}