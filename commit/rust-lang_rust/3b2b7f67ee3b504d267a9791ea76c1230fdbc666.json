{"sha": "3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMmI3ZjY3ZWUzYjUwNGQyNjdhOTc5MWVhNzZjMTIzMGZkYmM2NjY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-05T11:30:28Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T04:52:25Z"}, "message": "Add StructParts to reduce the number of args", "tree": {"sha": "0c10c33d1a7f2a28e90eb7fbce46a5118227017f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c10c33d1a7f2a28e90eb7fbce46a5118227017f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "html_url": "https://github.com/rust-lang/rust/commit/3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b2b7f67ee3b504d267a9791ea76c1230fdbc666/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "318f9c89e0eb9fbc2bfbcdb372e7853716783e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/318f9c89e0eb9fbc2bfbcdb372e7853716783e83", "html_url": "https://github.com/rust-lang/rust/commit/318f9c89e0eb9fbc2bfbcdb372e7853716783e83"}], "stats": {"total": 157, "additions": 73, "deletions": 84}, "files": [{"sha": "3e79cf3c1cea9043161fda7b27f3205e0d8ddae1", "filename": "src/items.rs", "status": "modified", "additions": 69, "deletions": 51, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/3b2b7f67ee3b504d267a9791ea76c1230fdbc666/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2b7f67ee3b504d267a9791ea76c1230fdbc666/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "patch": "@@ -411,6 +411,13 @@ impl<'a> FmtVisitor<'a> {\n         None\n     }\n \n+    pub fn visit_struct(&mut self, struct_parts: &StructParts) {\n+        let is_tuple = struct_parts.def.is_tuple();\n+        let rewrite = format_struct(&self.get_context(), struct_parts, self.block_indent, None)\n+            .map(|s| if is_tuple { s + \";\" } else { s });\n+        self.push_rewrite(struct_parts.span, rewrite);\n+    }\n+\n     pub fn visit_enum(\n         &mut self,\n         ident: ast::Ident,\n@@ -529,12 +536,7 @@ impl<'a> FmtVisitor<'a> {\n                 // FIXME: Should limit the width, as we have a trailing comma\n                 format_struct(\n                     &context,\n-                    \"\",\n-                    field.node.name,\n-                    &ast::Visibility::Inherited,\n-                    &field.node.data,\n-                    None,\n-                    field.span,\n+                    &StructParts::from_variant(field),\n                     indent,\n                     Some(self.config.struct_variant_width()),\n                 )?\n@@ -855,40 +857,62 @@ fn rewrite_trait_ref(\n     }\n }\n \n-pub fn format_struct(\n-    context: &RewriteContext,\n-    item_name: &str,\n+pub struct StructParts<'a> {\n+    prefix: &'a str,\n     ident: ast::Ident,\n-    vis: &ast::Visibility,\n-    struct_def: &ast::VariantData,\n-    generics: Option<&ast::Generics>,\n+    vis: &'a ast::Visibility,\n+    def: &'a ast::VariantData,\n+    generics: Option<&'a ast::Generics>,\n     span: Span,\n+}\n+\n+impl<'a> StructParts<'a> {\n+    fn format_header(&self) -> String {\n+        format_header(self.prefix, self.ident, self.vis)\n+    }\n+\n+    fn from_variant(variant: &'a ast::Variant) -> Self {\n+        StructParts {\n+            prefix: \"\",\n+            ident: variant.node.name,\n+            vis: &ast::Visibility::Inherited,\n+            def: &variant.node.data,\n+            generics: None,\n+            span: variant.span,\n+        }\n+    }\n+\n+    pub fn from_item(item: &'a ast::Item) -> Self {\n+        let (prefix, def, generics) = match item.node {\n+            ast::ItemKind::Struct(ref def, ref generics) => (\"struct \", def, generics),\n+            ast::ItemKind::Union(ref def, ref generics) => (\"union \", def, generics),\n+            _ => unreachable!(),\n+        };\n+        StructParts {\n+            prefix: prefix,\n+            ident: item.ident,\n+            vis: &item.vis,\n+            def: def,\n+            generics: Some(generics),\n+            span: item.span,\n+        }\n+    }\n+}\n+\n+fn format_struct(\n+    context: &RewriteContext,\n+    struct_parts: &StructParts,\n     offset: Indent,\n     one_line_width: Option<usize>,\n ) -> Option<String> {\n-    match *struct_def {\n-        ast::VariantData::Unit(..) => Some(format_unit_struct(item_name, ident, vis)),\n-        ast::VariantData::Tuple(ref fields, _) => format_tuple_struct(\n-            context,\n-            item_name,\n-            ident,\n-            vis,\n-            fields,\n-            generics,\n-            span,\n-            offset,\n-        ),\n-        ast::VariantData::Struct(ref fields, _) => format_struct_struct(\n-            context,\n-            item_name,\n-            ident,\n-            vis,\n-            fields,\n-            generics,\n-            span,\n-            offset,\n-            one_line_width,\n-        ),\n+    match *struct_parts.def {\n+        ast::VariantData::Unit(..) => Some(format_unit_struct(struct_parts)),\n+        ast::VariantData::Tuple(ref fields, _) => {\n+            format_tuple_struct(context, struct_parts, fields, offset)\n+        }\n+        ast::VariantData::Struct(ref fields, _) => {\n+            format_struct_struct(context, struct_parts, fields, offset, one_line_width)\n+        }\n     }\n }\n \n@@ -1050,30 +1074,27 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n     }\n }\n \n-fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> String {\n-    format!(\"{};\", format_header(item_name, ident, vis))\n+fn format_unit_struct(p: &StructParts) -> String {\n+    format!(\"{};\", format_header(p.prefix, p.ident, p.vis))\n }\n \n pub fn format_struct_struct(\n     context: &RewriteContext,\n-    item_name: &str,\n-    ident: ast::Ident,\n-    vis: &ast::Visibility,\n+    struct_parts: &StructParts,\n     fields: &[ast::StructField],\n-    generics: Option<&ast::Generics>,\n-    span: Span,\n     offset: Indent,\n     one_line_width: Option<usize>,\n ) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n+    let span = struct_parts.span;\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = struct_parts.format_header();\n     result.push_str(&header_str);\n \n     let header_hi = span.lo() + BytePos(header_str.len() as u32);\n     let body_lo = context.codemap.span_after(span, \"{\");\n \n-    let generics_str = match generics {\n+    let generics_str = match struct_parts.generics {\n         Some(g) => format_generics(\n             context,\n             g,\n@@ -1174,17 +1195,14 @@ fn get_bytepos_after_visibility(\n \n fn format_tuple_struct(\n     context: &RewriteContext,\n-    item_name: &str,\n-    ident: ast::Ident,\n-    vis: &ast::Visibility,\n+    struct_parts: &StructParts,\n     fields: &[ast::StructField],\n-    generics: Option<&ast::Generics>,\n-    span: Span,\n     offset: Indent,\n ) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n+    let span = struct_parts.span;\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = struct_parts.format_header();\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n@@ -1207,7 +1225,7 @@ fn format_tuple_struct(\n         }\n     };\n \n-    let where_clause_str = match generics {\n+    let where_clause_str = match struct_parts.generics {\n         Some(generics) => {\n             let budget = context.budget(last_line_width(&header_str));\n             let shape = Shape::legacy(budget, offset);"}, {"sha": "adcdb120ee374b65fd9ff1e74c3066e70e32bd55", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3b2b7f67ee3b504d267a9791ea76c1230fdbc666/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2b7f67ee3b504d267a9791ea76c1230fdbc666/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "patch": "@@ -23,9 +23,8 @@ use comment::{contains_comment, recover_missing_comment_in_span, remove_trailing\n               CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n-use items::{format_impl, format_struct, format_struct_struct, format_trait,\n-            rewrite_associated_impl_type, rewrite_associated_type, rewrite_static,\n-            rewrite_type_alias, FnSig, StaticParts};\n+use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n+            rewrite_static, rewrite_type_alias, FnSig, StaticParts, StructParts};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n             SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n@@ -345,22 +344,8 @@ impl<'a> FmtVisitor<'a> {\n                 let rw = rewrite_extern_crate(&self.get_context(), item);\n                 self.push_rewrite(item.span, rw);\n             }\n-            ast::ItemKind::Struct(ref def, ref generics) => {\n-                let rewrite = format_struct(\n-                    &self.get_context(),\n-                    \"struct \",\n-                    item.ident,\n-                    &item.vis,\n-                    def,\n-                    Some(generics),\n-                    item.span,\n-                    self.block_indent,\n-                    None,\n-                ).map(|s| match *def {\n-                    ast::VariantData::Tuple(..) => s + \";\",\n-                    _ => s,\n-                });\n-                self.push_rewrite(item.span, rewrite);\n+            ast::ItemKind::Struct(..) | ast::ItemKind::Union(..) => {\n+                self.visit_struct(&StructParts::from_item(item));\n             }\n             ast::ItemKind::Enum(ref def, ref generics) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n@@ -429,20 +414,6 @@ impl<'a> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(item.span, rewrite);\n             }\n-            ast::ItemKind::Union(ref def, ref generics) => {\n-                let rewrite = format_struct_struct(\n-                    &self.get_context(),\n-                    \"union \",\n-                    item.ident,\n-                    &item.vis,\n-                    def.fields(),\n-                    Some(generics),\n-                    item.span,\n-                    self.block_indent,\n-                    None,\n-                );\n-                self.push_rewrite(item.span, rewrite);\n-            }\n             ast::ItemKind::GlobalAsm(..) => {\n                 let snippet = Some(self.snippet(item.span));\n                 self.push_rewrite(item.span, snippet);"}]}