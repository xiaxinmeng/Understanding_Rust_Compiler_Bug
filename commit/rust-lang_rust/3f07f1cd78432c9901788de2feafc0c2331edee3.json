{"sha": "3f07f1cd78432c9901788de2feafc0c2331edee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDdmMWNkNzg0MzJjOTkwMTc4OGRlMmZlYWZjMGMyMzMxZWRlZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T23:22:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T23:22:03Z"}, "message": "Auto merge of #66211 - kinnison:kinnison/fix-66159, r=GuillaumeGomez\n\nFix ICE when documentation includes intra-doc-link\n\nWhen collecting intra-doc-links we could trigger the loading of extra crates into the crate store due to name resolution finding crates referred to in documentation but not in code.  This might be due to\nconfiguration differences or simply referring to something else.\n\nThis would cause an ICE because the newly loaded crate metadata existed in a crate store associated with the rustdoc global context, but the resolver had its own crate store cloned just before the documentation processing began and as such it could try and look up crates in a store which lacked them.\n\nIn this PR, I add support for `--extern-private` to the `rustdoc` tool so that it is supported for `compiletest` to then pass the crates in; and then I fix the issue by forcing the resolver to look over all the crates before we then lower the input ready for processing into documentation.\n\nThe first commit (the `--extern-private`) could be replaced with a commit which adds support for `--extern` to `compiletest` if preferred, though I think that adding `--extern-private` to `rustdoc` is more useful anyway since it makes the CLI a little more like `rustc`'s which might help reduce surprise for someone running it by hand or in their own test code.\n\nThe PR is meant to fix #66159 though it may also fix #65840.\n\ncc @GuillaumeGomez", "tree": {"sha": "b9bb6495f9a6c2aac74355d31ae1e9fe28fb8a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bb6495f9a6c2aac74355d31ae1e9fe28fb8a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f07f1cd78432c9901788de2feafc0c2331edee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f07f1cd78432c9901788de2feafc0c2331edee3", "html_url": "https://github.com/rust-lang/rust/commit/3f07f1cd78432c9901788de2feafc0c2331edee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f07f1cd78432c9901788de2feafc0c2331edee3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "html_url": "https://github.com/rust-lang/rust/commit/ded5ee0013f6126f885baf5e072c20ba8b86ee6a"}, {"sha": "33ded3ec7f5dbc133f9371b101310ea606663762", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ded3ec7f5dbc133f9371b101310ea606663762", "html_url": "https://github.com/rust-lang/rust/commit/33ded3ec7f5dbc133f9371b101310ea606663762"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "3e1c57182b9f5cdd97dfb3cddb27a62def97ea0c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3f07f1cd78432c9901788de2feafc0c2331edee3", "patch": "@@ -608,10 +608,12 @@ fn parse_extern_html_roots(\n /// Extracts `--extern CRATE=PATH` arguments from `matches` and\n /// returns a map mapping crate names to their paths or else an\n /// error message.\n+/// Also handles `--extern-private` which for the purposes of rustdoc\n+/// we can treat as `--extern`\n // FIXME(eddyb) This shouldn't be duplicated with `rustc::session`.\n fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n     let mut externs: BTreeMap<_, ExternEntry> = BTreeMap::new();\n-    for arg in &matches.opt_strs(\"extern\") {\n+    for arg in matches.opt_strs(\"extern\").iter().chain(matches.opt_strs(\"extern-private\").iter()) {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n         let location = parts.next().map(|s| s.to_string());"}, {"sha": "a40325448b10b8b20675a29a5f3138cdc128348b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3f07f1cd78432c9901788de2feafc0c2331edee3", "patch": "@@ -1,5 +1,6 @@\n use rustc_lint;\n use rustc::session::{self, config};\n+use rustc::hir::def::Namespace::TypeNS;\n use rustc::hir::def_id::{DefId, DefIndex, CrateNum, LOCAL_CRATE};\n use rustc::hir::HirId;\n use rustc::middle::cstore::CrateStore;\n@@ -13,11 +14,13 @@ use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n use rustc_resolve as resolve;\n \n+use syntax::ast::CRATE_NODE_ID;\n use syntax::source_map;\n use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::symbol::sym;\n+use syntax_pos::DUMMY_SP;\n use errors;\n use errors::emitter::{Emitter, EmitterWriter};\n \n@@ -246,6 +249,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         ..\n     } = options;\n \n+    let extern_names: Vec<String> = externs.iter().map(|(s,_)| s).cloned().collect();\n+\n     // Add the rustdoc cfg into the doc build.\n     cfgs.push(\"doc\".to_string());\n \n@@ -344,7 +349,25 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // We need to hold on to the complete resolver, so we cause everything to be\n         // cloned for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture.\n-        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.borrow().clone();\n+        let resolver = {\n+            let parts = abort_on_err(compiler.expansion(), sess).peek();\n+            let resolver = parts.1.borrow();\n+\n+            // Before we actually clone it, let's force all the extern'd crates to\n+            // actually be loaded, just in case they're only referred to inside\n+            // intra-doc-links\n+            resolver.borrow_mut().access(|resolver| {\n+                for extern_name in &extern_names {\n+                    resolver.resolve_str_path_error(DUMMY_SP, extern_name, TypeNS, CRATE_NODE_ID)\n+                        .unwrap_or_else(\n+                            |()| panic!(\"Unable to resolve external crate {}\", extern_name)\n+                        );\n+                }\n+            });\n+\n+            // Now we're good to clone the resolver because everything should be loaded\n+            resolver.clone()\n+        };\n \n         if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "4f102dbf128f49d4d0ef910514ce6a4df5e1e7fe", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3f07f1cd78432c9901788de2feafc0c2331edee3", "patch": "@@ -143,6 +143,10 @@ fn opts() -> Vec<RustcOptGroup> {\n         stable(\"extern\", |o| {\n             o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME[=PATH]\")\n         }),\n+        stable(\"extern-private\", |o| {\n+            o.optmulti(\"\", \"extern-private\",\n+                       \"pass an --extern to rustc (compatibility only)\", \"NAME=PATH\")\n+        }),\n         unstable(\"extern-html-root-url\", |o| {\n             o.optmulti(\"\", \"extern-html-root-url\",\n                        \"base URL to use for dependencies\", \"NAME=URL\")"}, {"sha": "2f3d069bd51c36665d483943ee79d60dded77367", "filename": "src/test/rustdoc/auxiliary/issue-66159-1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs?ref=3f07f1cd78432c9901788de2feafc0c2331edee3", "patch": "@@ -0,0 +1,2 @@\n+/// This will be referred to by the test docstring\n+pub struct Something;"}, {"sha": "88eca7338707c27746afe4d5799e7fb5fd6d839e", "filename": "src/test/rustdoc/issue-66159.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07f1cd78432c9901788de2feafc0c2331edee3/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=3f07f1cd78432c9901788de2feafc0c2331edee3", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:issue-66159-1.rs\n+// extern-private:issue_66159_1\n+\n+// The issue was an ICE which meant that we never actually generated the docs\n+// so if we have generated the docs, we're okay.\n+// Since we don't generate the docs for the auxilliary files, we can't actually\n+// verify that the struct is linked correctly.\n+\n+// @has issue_66159/index.html\n+//! [issue_66159_1::Something]"}]}