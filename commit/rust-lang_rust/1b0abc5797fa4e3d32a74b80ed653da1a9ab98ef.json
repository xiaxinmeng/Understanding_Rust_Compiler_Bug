{"sha": "1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGFiYzU3OTdmYTRlM2QzMmE3NGI4MGVkNjUzZGExYTlhYjk4ZWY=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T17:10:23Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T17:10:23Z"}, "message": "small refactorings to 'src/shims/os_str.rs' & 'src/shims/env.rs'", "tree": {"sha": "fdc49610b4f188085ef7cc7575a1d9ef71fdfbc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc49610b4f188085ef7cc7575a1d9ef71fdfbc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "html_url": "https://github.com/rust-lang/rust/commit/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1667ded0d2bc0044f84f2e56aa77f76986199058", "url": "https://api.github.com/repos/rust-lang/rust/commits/1667ded0d2bc0044f84f2e56aa77f76986199058", "html_url": "https://github.com/rust-lang/rust/commit/1667ded0d2bc0044f84f2e56aa77f76986199058"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "350d76bc9dacdd3b45b3d86f091518859a0d1f03", "filename": "src/shims/env.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "patch": "@@ -125,7 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n-                HowWasBufferSize(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n+                windows_check_buffer_size(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n             }\n             None => {\n                 let envvar_not_found = this.eval_windows(\"ERROR_ENVVAR_NOT_FOUND\")?;\n@@ -317,7 +317,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return 0\n         match env::current_dir() {\n             Ok(cwd) =>\n-                return Ok(HowWasBufferSize(this.write_path_to_wide_str(&cwd, buf, size)?)),\n+                return Ok(windows_check_buffer_size(this.write_path_to_wide_str(&cwd, buf, size)?)),\n             Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n         Ok(0)\n@@ -400,16 +400,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-// Local helper function to be used in Windows shims\n-#[allow(non_snake_case)]\n-fn HowWasBufferSize((success, len): (bool, u64)) -> u32 {\n+/// Check whether an operation that writes to a target buffer was successful.\n+/// Accordingly select return value.\n+/// Local helper function to be used in Windows shims.\n+fn windows_check_buffer_size((success, len): (bool, u64)) -> u32 {\n     if success {\n-        // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n+        // If the function succeeds, the return value is the number of characters stored in the target buffer,\n         // not including the terminating null character.\n         u32::try_from(len).unwrap()\n     } else {\n-        // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n-        // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n+        // If the target buffer was not large enough to hold the data, the return value is the buffer size, in characters,\n+        // required to hold the string and its terminating null character.\n         u32::try_from(len.checked_add(1).unwrap()).unwrap()\n     }\n }"}, {"sha": "74932ef6ca4ed2ea1cc4efa58f8a87707654cad7", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 53, "deletions": 52, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=1b0abc5797fa4e3d32a74b80ed653da1a9ab98ef", "patch": "@@ -13,6 +13,53 @@ use rustc::ty::layout::LayoutOf;\n \n use crate::*;\n \n+/// Represent how path separator conversion should be done.\n+enum Pathconversion {\n+    HostToTarget,\n+    TargetToHost,\n+}\n+\n+/// Perform path separator conversion if needed.\n+fn convert_path_separator<'a>(\n+    os_str: &'a OsStr,\n+    target_os: &str,\n+    direction: Pathconversion,\n+) -> Cow<'a, OsStr> {\n+    #[cfg(windows)]\n+    return if target_os == \"windows\" {\n+        // Windows-on-Windows, all fine.\n+        Cow::Borrowed(os_str)\n+    } else {\n+        // Unix target, Windows host.\n+        let (from, to) = match direction {\n+            Pathconversion::HostToTarget => ('\\\\', '/'),\n+            Pathconversion::TargetToHost => ('/', '\\\\'),\n+        };\n+        let converted = os_str\n+            .encode_wide()\n+            .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n+            .collect::<Vec<_>>();\n+        Cow::Owned(OsString::from_wide(&converted))\n+    };\n+    #[cfg(unix)]\n+    return if target_os == \"windows\" {\n+        // Windows target, Unix host.\n+        let (from, to) = match direction {\n+            Pathconversion::HostToTarget => ('/', '\\\\'),\n+            Pathconversion::TargetToHost => ('\\\\', '/'),\n+        };\n+        let converted = os_str\n+            .as_bytes()\n+            .iter()\n+            .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n+            .collect::<Vec<_>>();\n+        Cow::Owned(OsString::from_vec(converted))\n+    } else {\n+        // Unix-on-Unix, all is fine.\n+        Cow::Borrowed(os_str)\n+    };\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n@@ -177,9 +224,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'mir: 'a,\n     {\n         let this = self.eval_context_ref();\n-        let os_str: &'a OsStr = this.read_os_str_from_c_str(scalar)?;\n+        let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, PathConversionDirection::TargetToHost) {\n+        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -188,9 +235,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Read a null-terminated sequence of `u16`s, and perform path separator conversion if needed.\n     fn read_path_from_wide_str(&self, scalar: Scalar<Tag>) -> InterpResult<'tcx, PathBuf> {\n         let this = self.eval_context_ref();\n-        let os_str: OsString = this.read_os_str_from_wide_str(scalar)?;\n+        let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, PathConversionDirection::TargetToHost)))\n+        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost)))\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -202,7 +249,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, PathConversionDirection::HostToTarget);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -215,53 +262,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, PathConversionDirection::HostToTarget);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }\n-\n-enum PathConversionDirection {\n-    HostToTarget,\n-    TargetToHost,\n-}\n-\n-/// Perform path separator conversion if needed.\n-fn convert_path_separator<'a>(\n-    os_str: &'a OsStr,\n-    target_os: &str,\n-    direction: PathConversionDirection,\n-) -> Cow<'a, OsStr> {\n-    #[cfg(windows)]\n-    return if target_os == \"windows\" {\n-        // Windows-on-Windows, all fine.\n-        Cow::Borrowed(os_str)\n-    } else {\n-        // Unix target, Windows host.\n-        let (from, to) = match direction {\n-            PathConversionDirection::HostToTarget => ('\\\\', '/'),\n-            PathConversionDirection::TargetToHost => ('/', '\\\\'),\n-        };\n-        let converted = os_str\n-            .encode_wide()\n-            .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_wide(&converted))\n-    };\n-    #[cfg(unix)]\n-    return if target_os == \"windows\" {\n-        // Windows target, Unix host.\n-        let (from, to) = match direction {\n-            PathConversionDirection::HostToTarget => ('/', '\\\\'),\n-            PathConversionDirection::TargetToHost => ('\\\\', '/'),\n-        };\n-        let converted = os_str\n-            .as_bytes()\n-            .iter()\n-            .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_vec(converted))\n-    } else {\n-        // Unix-on-Unix, all is fine.\n-        Cow::Borrowed(os_str)\n-    };\n-}"}]}