{"sha": "926c5e4cde09470ecfcdae562e802e5abbddb17c", "node_id": "C_kwDOAAsO6NoAKDkyNmM1ZTRjZGUwOTQ3MGVjZmNkYWU1NjJlODAyZTVhYmJkZGIxN2M", "commit": {"author": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2023-01-30T17:42:40Z"}, "committer": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2023-01-30T17:42:40Z"}, "message": "multiple_unsafe_ops_per_block: don't lint in external macros", "tree": {"sha": "e93853ec2e23478b31ae0a97459db81681cad7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93853ec2e23478b31ae0a97459db81681cad7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/926c5e4cde09470ecfcdae562e802e5abbddb17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/926c5e4cde09470ecfcdae562e802e5abbddb17c", "html_url": "https://github.com/rust-lang/rust/commit/926c5e4cde09470ecfcdae562e802e5abbddb17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/926c5e4cde09470ecfcdae562e802e5abbddb17c/comments", "author": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "html_url": "https://github.com/rust-lang/rust/commit/8fb0041f4739dc350e8d74608313bcb7c4c5e20d"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "191da3085be2ec0e765357481c598f9fdc8285f3", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/926c5e4cde09470ecfcdae562e802e5abbddb17c/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c5e4cde09470ecfcdae562e802e5abbddb17c/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=926c5e4cde09470ecfcdae562e802e5abbddb17c", "patch": "@@ -10,6 +10,7 @@ use hir::{\n use rustc_ast::Mutability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -66,7 +67,7 @@ declare_lint_pass!(MultipleUnsafeOpsPerBlock => [MULTIPLE_UNSAFE_OPS_PER_BLOCK])\n \n impl<'tcx> LateLintPass<'tcx> for MultipleUnsafeOpsPerBlock {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n-        if !matches!(block.rules, BlockCheckMode::UnsafeBlock(_)) {\n+        if !matches!(block.rules, BlockCheckMode::UnsafeBlock(_)) || in_external_macro(cx.tcx.sess, block.span) {\n             return;\n         }\n         let mut unsafe_ops = vec![];"}, {"sha": "f74a614eefe9a3d3d247bbe59797973e28495e8f", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=926c5e4cde09470ecfcdae562e802e5abbddb17c", "patch": "@@ -149,3 +149,13 @@ macro_rules! almost_complete_range {\n         let _ = '0'..'9';\n     };\n }\n+\n+#[macro_export]\n+macro_rules! unsafe_macro {\n+    () => {\n+        unsafe {\n+            *core::ptr::null::<()>();\n+            *core::ptr::null::<()>();\n+        }\n+    };\n+}"}, {"sha": "4511bc99c3c71a92c63a641cb45c12b850ac58e3", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=926c5e4cde09470ecfcdae562e802e5abbddb17c", "patch": "@@ -1,9 +1,13 @@\n+// aux-build:macro_rules.rs\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use core::arch::asm;\n \n fn raw_ptr() -> *const () {\n@@ -107,4 +111,9 @@ unsafe fn read_char_good(ptr: *const u8) -> char {\n     unsafe { core::char::from_u32_unchecked(int_value) }\n }\n \n+// no lint\n+fn issue10259() {\n+    unsafe_macro!();\n+}\n+\n fn main() {}"}, {"sha": "303aeb7aee0c569e721df718eb05719bad372718", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/926c5e4cde09470ecfcdae562e802e5abbddb17c/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=926c5e4cde09470ecfcdae562e802e5abbddb17c", "patch": "@@ -1,5 +1,5 @@\n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:32:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:36:5\n    |\n LL | /     unsafe {\n LL | |         STATIC += 1;\n@@ -8,19 +8,19 @@ LL | |     }\n    | |_____^\n    |\n note: modification of a mutable static occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:33:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:37:9\n    |\n LL |         STATIC += 1;\n    |         ^^^^^^^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:34:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:38:9\n    |\n LL |         not_very_safe();\n    |         ^^^^^^^^^^^^^^^\n    = note: `-D clippy::multiple-unsafe-ops-per-block` implied by `-D warnings`\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:41:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:45:5\n    |\n LL | /     unsafe {\n LL | |         drop(u.u);\n@@ -29,18 +29,18 @@ LL | |     }\n    | |_____^\n    |\n note: union field access occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:42:14\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:46:14\n    |\n LL |         drop(u.u);\n    |              ^^^\n note: raw pointer dereference occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:43:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:47:9\n    |\n LL |         *raw_ptr();\n    |         ^^^^^^^^^^\n \n error: this `unsafe` block contains 3 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:48:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:52:5\n    |\n LL | /     unsafe {\n LL | |         asm!(\"nop\");\n@@ -50,23 +50,23 @@ LL | |     }\n    | |_____^\n    |\n note: inline assembly used here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:49:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:53:9\n    |\n LL |         asm!(\"nop\");\n    |         ^^^^^^^^^^^\n note: unsafe method call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:50:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:54:9\n    |\n LL |         sample.not_very_safe();\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n note: modification of a mutable static occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:51:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:55:9\n    |\n LL |         STATIC = 0;\n    |         ^^^^^^^^^^\n \n error: this `unsafe` block contains 6 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:57:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:61:5\n    |\n LL | /     unsafe {\n LL | |         drop(u.u);\n@@ -78,49 +78,49 @@ LL | |     }\n    | |_____^\n    |\n note: union field access occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:58:14\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:62:14\n    |\n LL |         drop(u.u);\n    |              ^^^\n note: access of a mutable static occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:59:14\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:63:14\n    |\n LL |         drop(STATIC);\n    |              ^^^^^^\n note: unsafe method call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:60:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:64:9\n    |\n LL |         sample.not_very_safe();\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:61:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:65:9\n    |\n LL |         not_very_safe();\n    |         ^^^^^^^^^^^^^^^\n note: raw pointer dereference occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:62:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:66:9\n    |\n LL |         *raw_ptr();\n    |         ^^^^^^^^^^\n note: inline assembly used here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:63:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:67:9\n    |\n LL |         asm!(\"nop\");\n    |         ^^^^^^^^^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:101:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:105:5\n    |\n LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:101:14\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:105:14\n    |\n LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: raw pointer dereference occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:101:39\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:105:39\n    |\n LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |                                       ^^^^^^^^^^^^^^^^^^"}]}