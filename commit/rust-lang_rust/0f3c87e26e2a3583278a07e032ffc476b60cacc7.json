{"sha": "0f3c87e26e2a3583278a07e032ffc476b60cacc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmM2M4N2UyNmUyYTM1ODMyNzhhMDdlMDMyZmZjNDc2YjYwY2FjYzc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-04T11:04:47Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-04T11:07:29Z"}, "message": "Revise path.rs API to not allocate ~str so much.\n\nNote that I left dirname as returning ~str, because both of its\nimplementations work by calling dir_path, which produces a new path,\nand thus we cannot borrow the result from &'a self passed to dirname\n(because the new path returned by dir_path will not live long enough\nto satisfy the lifetime 'a).", "tree": {"sha": "e142400ec67c0dd53faac97d3d586d199ef6357d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e142400ec67c0dd53faac97d3d586d199ef6357d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3c87e26e2a3583278a07e032ffc476b60cacc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3c87e26e2a3583278a07e032ffc476b60cacc7", "html_url": "https://github.com/rust-lang/rust/commit/0f3c87e26e2a3583278a07e032ffc476b60cacc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3c87e26e2a3583278a07e032ffc476b60cacc7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ff31558480f2bf0dea71a0c3e2880387edb826", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ff31558480f2bf0dea71a0c3e2880387edb826", "html_url": "https://github.com/rust-lang/rust/commit/64ff31558480f2bf0dea71a0c3e2880387edb826"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "d95c7b65101f60b31de56b7c88227d7cb8acfbd7", "filename": "src/libstd/path.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0f3c87e26e2a3583278a07e032ffc476b60cacc7/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3c87e26e2a3583278a07e032ffc476b60cacc7/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0f3c87e26e2a3583278a07e032ffc476b60cacc7", "patch": "@@ -28,7 +28,7 @@ use option::{None, Option, Some};\n use str::{OwnedStr, Str, StrSlice, StrVector};\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n-use vec::{OwnedVector, ImmutableVector, OwnedCopyableVector};\n+use vec::{Vector, OwnedVector, ImmutableVector, OwnedCopyableVector};\n \n #[cfg(windows)]\n pub use Path = self::WindowsPath;\n@@ -65,17 +65,17 @@ pub trait GenericPath {\n     fn dirname(&self) -> ~str;\n     /// Returns the file component of `self`, as a string option.\n     /// Returns None if `self` names a directory.\n-    fn filename(&self) -> Option<~str>;\n+    fn filename<'a>(&'a self) -> Option<&'a str>;\n     /// Returns the stem of the file component of `self`, as a string option.\n     /// The stem is the slice of a filename starting at 0 and ending just before\n     /// the last '.' in the name.\n     /// Returns None if `self` names a directory.\n-    fn filestem(&self) -> Option<~str>;\n+    fn filestem<'a>(&'a self) -> Option<&'a str>;\n     /// Returns the type of the file component of `self`, as a string option.\n     /// The file type is the slice of a filename starting just after the last\n     /// '.' in the name and ending at the last index in the filename.\n     /// Returns None if `self` names a directory.\n-    fn filetype(&self) -> Option<~str>;\n+    fn filetype<'a>(&'a self) -> Option<&'a str>;\n \n     /// Returns a new path consisting of `self` with the parent directory component replaced\n     /// with the given string.\n@@ -163,7 +163,7 @@ pub trait GenericPath {\n         result\n     }\n \n-    fn components(self) -> ~[~str];\n+    fn components<'a>(&'a self) -> &'a [~str];\n }\n \n #[cfg(target_os = \"linux\")]\n@@ -600,31 +600,31 @@ impl GenericPath for PosixPath {\n         }\n     }\n \n-    fn filename(&self) -> Option<~str> {\n+    fn filename<'a>(&'a self) -> Option<&'a str> {\n         match self.components.len() {\n             0 => None,\n-            n => Some(self.components[n - 1].clone()),\n+            n => Some(self.components[n - 1].as_slice()),\n         }\n     }\n \n-    fn filestem(&self) -> Option<~str> {\n+    fn filestem<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) => Some(f.slice_to(p).to_owned()),\n-                    None => Some((*f).clone()),\n+                    Some(p) => Some(f.slice_to(p)),\n+                    None => Some((*f)),\n                 }\n             }\n         }\n     }\n \n-    fn filetype(&self) -> Option<~str> {\n+    fn filetype<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) if p < f.len() => Some(f.slice_from(p).to_owned()),\n+                    Some(p) if p < f.len() => Some(f.slice_from(p)),\n                     _ => None,\n                 }\n             }\n@@ -670,7 +670,7 @@ impl GenericPath for PosixPath {\n     fn file_path(&self) -> PosixPath {\n         let cs = match self.filename() {\n           None => ~[],\n-          Some(ref f) => ~[(*f).clone()]\n+          Some(ref f) => ~[(*f).to_owned()]\n         };\n         PosixPath {\n             is_absolute: false,\n@@ -756,7 +756,7 @@ impl GenericPath for PosixPath {\n              self.is_ancestor_of(&other.pop()))\n     }\n \n-   fn components(self) -> ~[~str] { self.components }\n+   fn components<'a>(&'a self) -> &'a [~str] { self.components.as_slice() }\n }\n \n \n@@ -842,31 +842,31 @@ impl GenericPath for WindowsPath {\n         }\n     }\n \n-    fn filename(&self) -> Option<~str> {\n+    fn filename<'a>(&'a self) -> Option<&'a str> {\n         match self.components.len() {\n             0 => None,\n-            n => Some(self.components[n - 1].clone()),\n+            n => Some(self.components[n - 1].as_slice()),\n         }\n     }\n \n-    fn filestem(&self) -> Option<~str> {\n+    fn filestem<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) => Some(f.slice_to(p).to_owned()),\n-                    None => Some((*f).clone()),\n+                    Some(p) => Some(f.slice_to(p)),\n+                    None => Some((*f)),\n                 }\n             }\n         }\n     }\n \n-    fn filetype(&self) -> Option<~str> {\n+    fn filetype<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n           None => None,\n           Some(ref f) => {\n             match f.rfind('.') {\n-                Some(p) if p < f.len() => Some(f.slice_from(p).to_owned()),\n+                Some(p) if p < f.len() => Some(f.slice_from(p)),\n                 _ => None,\n             }\n           }\n@@ -916,7 +916,7 @@ impl GenericPath for WindowsPath {\n             is_absolute: false,\n             components: match self.filename() {\n                 None => ~[],\n-                Some(ref f) => ~[(*f).clone()],\n+                Some(ref f) => ~[(*f).to_owned()],\n             }\n         }\n     }\n@@ -1049,7 +1049,7 @@ impl GenericPath for WindowsPath {\n              self.is_ancestor_of(&other.pop()))\n     }\n \n-   fn components(self) -> ~[~str] { self.components }\n+   fn components<'a>(&'a self) -> &'a [~str] { self.components.as_slice() }\n }\n \n pub fn normalize(components: &[~str]) -> ~[~str] {\n@@ -1143,10 +1143,10 @@ mod tests {\n     #[test]\n     fn test_filetype_foo_bar() {\n         let wp = PosixPath(\"foo.bar\");\n-        assert_eq!(wp.filetype(), Some(~\".bar\"));\n+        assert_eq!(wp.filetype(), Some(\".bar\"));\n \n         let wp = WindowsPath(\"foo.bar\");\n-        assert_eq!(wp.filetype(), Some(~\".bar\"));\n+        assert_eq!(wp.filetype(), Some(\".bar\"));\n     }\n \n     #[test]"}]}