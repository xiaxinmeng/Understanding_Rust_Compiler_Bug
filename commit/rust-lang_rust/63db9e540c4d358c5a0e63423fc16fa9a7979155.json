{"sha": "63db9e540c4d358c5a0e63423fc16fa9a7979155", "node_id": "C_kwDOAAsO6NoAKDYzZGI5ZTU0MGM0ZDM1OGM1YTBlNjM0MjNmYzE2ZmE5YTc5NzkxNTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-07T20:43:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T21:09:40Z"}, "message": "Replace a `spawn_unchecked` with `spawn_scoped`.", "tree": {"sha": "7718c1dc44f6cfddaf5bc063a8383854fe925ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7718c1dc44f6cfddaf5bc063a8383854fe925ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63db9e540c4d358c5a0e63423fc16fa9a7979155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63db9e540c4d358c5a0e63423fc16fa9a7979155", "html_url": "https://github.com/rust-lang/rust/commit/63db9e540c4d358c5a0e63423fc16fa9a7979155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63db9e540c4d358c5a0e63423fc16fa9a7979155/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec409f95bf52c5891084e309fed91fa9b6ce10b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec409f95bf52c5891084e309fed91fa9b6ce10b4", "html_url": "https://github.com/rust-lang/rust/commit/ec409f95bf52c5891084e309fed91fa9b6ce10b4"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "6d0fffc152c3c2fbe752034bc1d51cfa0e186399", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63db9e540c4d358c5a0e63423fc16fa9a7979155/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63db9e540c4d358c5a0e63423fc16fa9a7979155/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=63db9e540c4d358c5a0e63423fc16fa9a7979155", "patch": "@@ -136,20 +136,24 @@ pub(crate) fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     f: F,\n ) -> R {\n     // The thread pool is a single thread in the non-parallel compiler.\n-    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n-    if let Some(size) = get_stack_size() {\n-        cfg = cfg.stack_size(size);\n-    }\n+    thread::scope(|s| {\n+        let mut builder = thread::Builder::new().name(\"rustc\".to_string());\n+        if let Some(size) = get_stack_size() {\n+            builder = builder.stack_size(size);\n+        }\n \n-    let f = move || rustc_span::create_session_globals_then(edition, f);\n+        // `unwrap` is ok here because `spawn_scoped` only panics if the thread\n+        // name contains null bytes.\n+        let r = builder\n+            .spawn_scoped(s, move || rustc_span::create_session_globals_then(edition, f))\n+            .unwrap()\n+            .join();\n \n-    // This avoids the need for `'static` bounds.\n-    //\n-    // SAFETY: join() is called immediately, so any closure captures are still alive.\n-    match unsafe { cfg.spawn_unchecked(f) }.unwrap().join() {\n-        Ok(v) => v,\n-        Err(e) => panic::resume_unwind(e),\n-    }\n+        match r {\n+            Ok(v) => v,\n+            Err(e) => panic::resume_unwind(e),\n+        }\n+    })\n }\n \n /// Creates a new thread and forwards information in thread locals to it."}]}