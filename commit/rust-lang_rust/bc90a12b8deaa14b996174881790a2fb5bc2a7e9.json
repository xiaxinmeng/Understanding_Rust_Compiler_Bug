{"sha": "bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTBhMTJiOGRlYWExNGI5OTYxNzQ4ODE3OTBhMmZiNWJjMmE3ZTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-10T08:26:55Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-10T08:26:55Z"}, "message": "Format union", "tree": {"sha": "6664d9107aac01b8a624459f51b166e8963cb96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6664d9107aac01b8a624459f51b166e8963cb96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "html_url": "https://github.com/rust-lang/rust/commit/bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5350f71f41d65d30417b71209da945e31106a640", "url": "https://api.github.com/repos/rust-lang/rust/commits/5350f71f41d65d30417b71209da945e31106a640", "html_url": "https://github.com/rust-lang/rust/commit/5350f71f41d65d30417b71209da945e31106a640"}], "stats": {"total": 408, "additions": 405, "deletions": 3}, "files": [{"sha": "a5e35e144fbd3e56fc50006e8fad9fc0416cdc85", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "patch": "@@ -1053,7 +1053,7 @@ fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility)\n     format!(\"{};\", format_header(item_name, ident, vis))\n }\n \n-fn format_struct_struct(\n+pub fn format_struct_struct(\n     context: &RewriteContext,\n     item_name: &str,\n     ident: ast::Ident,"}, {"sha": "800f46374ecf29bc5465918e6f3ba57e510797fc", "filename": "src/visitor.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "patch": "@@ -426,8 +426,19 @@ impl<'a> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(item.span, rewrite);\n             }\n-            ast::ItemKind::Union(..) => {\n-                // FIXME(#1157): format union definitions.\n+            ast::ItemKind::Union(ref def, ref generics) => {\n+                let rewrite = ::items::format_struct_struct(\n+                    &self.get_context(),\n+                    \"union \",\n+                    item.ident,\n+                    &item.vis,\n+                    def.fields(),\n+                    Some(generics),\n+                    item.span,\n+                    self.block_indent,\n+                    None,\n+                );\n+                self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::GlobalAsm(..) => {\n                 let snippet = Some(self.snippet(item.span));"}, {"sha": "107be79873c57b35ffd33c602e03b9a89ef81d72", "filename": "tests/source/unions.rs", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/tests%2Fsource%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/tests%2Fsource%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funions.rs?ref=bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "patch": "@@ -0,0 +1,195 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+                                                                       /// A Doc comment\n+#[AnAttribute]\n+pub union Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    #[AnAttribute]\n+    g: SomeOtherType,\n+      /// A doc comment on a field\n+    h: AThirdType,\n+    pub i: TypeForPublicField\n+}\n+\n+// #1029\n+pub union Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+union X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub union Writebatch<K: Key> {\n+    #[allow(dead_code)] //only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n+// With a where clause and generics.\n+pub union Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+union Baz {\n+\n+    a: A,  // Comment A\n+    b: B, // Comment B\n+    c: C,   // Comment C\n+\n+}\n+\n+union Baz {\n+    a: A,  // Comment A\n+\n+    b: B, // Comment B\n+\n+\n+\n+\n+    c: C,   // Comment C\n+}\n+\n+union Baz {\n+\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+\n+\n+    \n+    d: D\n+\n+}\n+\n+union Baz\n+{\n+    // Comment A\n+    a: A,\n+    \n+    // Comment B\n+b: B,\n+    // Comment C\n+      c: C,}\n+\n+pub union State<F: FnMut() -> time::Timespec> { now: F }\n+\n+pub union State<F: FnMut() -> ()> { now: F }\n+\n+pub union State<F: FnMut()> { now: F }\n+\n+union Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n+                    foo: i32}\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+union FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    //Another pre comment\n+    #[attr1]\n+    #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC\n+}\n+\n+union Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<K, V>>,\n+                                                     Type,\n+                                                     NodeType>,\n+}\n+\n+mod m {\n+    union X<T> where T: Sized {\n+        a: T,\n+    }\n+}\n+\n+union Issue677 {\n+    pub ptr: *const libc::c_void,\n+    pub trace: fn(  obj: \n+          *const libc::c_void, tracer   : *mut   JSTracer   ),\n+}\n+\n+union Foo {}\n+union Foo {\n+    }\n+union Foo {\n+    // comment\n+    }\n+union Foo {\n+    // trailing space ->    \n+\n+\n+    }\n+union Foo { /* comment */ }\n+\n+union LongUnion {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+union Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<Key, Value>>,\n+                                                                         Type,\n+                                                                         NodeType>,\n+}\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}\n+\n+// Vertical alignment\n+union Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32, // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32, // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32, // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32, // comment6\n+\n+    aaaaaaa: u32, /* multi\n+     * line\n+     * comment\n+     */\n+    b: u32, // hi\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    // separate\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    // separate\n+    please_do_not_push_this_comment3: u32, // comment3\n+}"}, {"sha": "bd6328173b52557f99fac038567ab659aa60af05", "filename": "tests/target/unions.rs", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc90a12b8deaa14b996174881790a2fb5bc2a7e9/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=bc90a12b8deaa14b996174881790a2fb5bc2a7e9", "patch": "@@ -0,0 +1,196 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+/// A Doc comment\n+#[AnAttribute]\n+pub union Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    #[AnAttribute]\n+    g: SomeOtherType,\n+    /// A doc comment on a field\n+    h: AThirdType,\n+    pub i: TypeForPublicField,\n+}\n+\n+// #1029\n+pub union Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+union X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub union Writebatch<K: Key> {\n+    #[allow(dead_code)] // only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n+// With a where clause and generics.\n+pub union Foo<'a, Y: Baz>\n+where\n+    X: Whatever,\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+union Baz {\n+    a: A, // Comment A\n+    b: B, // Comment B\n+    c: C, // Comment C\n+}\n+\n+union Baz {\n+    a: A, // Comment A\n+\n+    b: B, // Comment B\n+\n+    c: C, // Comment C\n+}\n+\n+union Baz {\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+    d: D,\n+}\n+\n+union Baz {\n+    // Comment A\n+    a: A,\n+\n+    // Comment B\n+    b: B,\n+    // Comment C\n+    c: C,\n+}\n+\n+pub union State<F: FnMut() -> time::Timespec> {\n+    now: F,\n+}\n+\n+pub union State<F: FnMut() -> ()> {\n+    now: F,\n+}\n+\n+pub union State<F: FnMut()> {\n+    now: F,\n+}\n+\n+union Palette {\n+    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// that color\n+    foo: i32,\n+}\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+union FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    // Another pre comment\n+    #[attr1]\n+    #[attr2]\n+    pub id: usize, /* CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC\n+                    * CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC */\n+}\n+\n+union Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<K, V>>, Type, NodeType>,\n+}\n+\n+mod m {\n+    union X<T>\n+    where\n+        T: Sized,\n+    {\n+        a: T,\n+    }\n+}\n+\n+union Issue677 {\n+    pub ptr: *const libc::c_void,\n+    pub trace: fn(obj: *const libc::c_void, tracer: *mut JSTracer),\n+}\n+\n+union Foo {}\n+union Foo {}\n+union Foo {\n+    // comment\n+}\n+union Foo {\n+    // trailing space ->\n+}\n+union Foo { /* comment */ }\n+\n+union LongUnion {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+union Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<Key, Value>>, Type, NodeType>,\n+}\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}\n+\n+// Vertical alignment\n+union Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32,  // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32,  // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32,     // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32,  // comment6\n+\n+    aaaaaaa: u32, /* multi\n+                   * line\n+                   * comment\n+                   * */\n+    b: u32, // hi\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    // separate\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    // separate\n+    please_do_not_push_this_comment3: u32, // comment3\n+}"}]}