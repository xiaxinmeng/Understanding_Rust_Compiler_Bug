{"sha": "eb9e5e711d3eef1998ff24ac2bc57386662652e9", "node_id": "C_kwDOAAsO6NoAKGViOWU1ZTcxMWQzZWVmMTk5OGZmMjRhYzJiYzU3Mzg2NjYyNjUyZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T07:27:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T07:27:01Z"}, "message": "Auto merge of #105880 - Nilstrieb:make-newtypes-less-not-rust, r=oli-obk\n\nImprove syntax of `newtype_index`\n\nThis makes it more like proper Rust and also makes the implementation a lot simpler.\n\nMostly just turns weird flags in the body into proper attributes.\n\nIt should probably also be converted to an attribute macro instead of function-like, but that can be done in a future PR.", "tree": {"sha": "10d0607d0ca60fd9f25fedfde0cf1a025b9de3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d0607d0ca60fd9f25fedfde0cf1a025b9de3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9e5e711d3eef1998ff24ac2bc57386662652e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9e5e711d3eef1998ff24ac2bc57386662652e9", "html_url": "https://github.com/rust-lang/rust/commit/eb9e5e711d3eef1998ff24ac2bc57386662652e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9e5e711d3eef1998ff24ac2bc57386662652e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f42e58effa3871dda6a41e250dea60cf88868ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f42e58effa3871dda6a41e250dea60cf88868ca", "html_url": "https://github.com/rust-lang/rust/commit/7f42e58effa3871dda6a41e250dea60cf88868ca"}, {"sha": "8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "html_url": "https://github.com/rust-lang/rust/commit/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e"}], "stats": {"total": 450, "additions": 182, "deletions": 268}, "files": [{"sha": "31596a1e9bf889ca1f684fcca0c20673add5c558", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -2554,10 +2554,9 @@ pub enum AttrStyle {\n }\n \n rustc_index::newtype_index! {\n-    pub struct AttrId {\n-        ENCODABLE = custom\n-        DEBUG_FORMAT = \"AttrId({})\"\n-    }\n+    #[custom_encodable]\n+    #[debug_format = \"AttrId({})]\"]\n+    pub struct AttrId {}\n }\n \n impl<S: Encoder> Encodable<S> for AttrId {"}, {"sha": "daa82996b3d11f52a9fead380c10c879ac7e9896", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -8,9 +8,8 @@ rustc_index::newtype_index! {\n     /// This is later turned into [`DefId`] and `HirId` for the HIR.\n     ///\n     /// [`DefId`]: rustc_span::def_id::DefId\n-    pub struct NodeId {\n-        DEBUG_FORMAT = \"NodeId({})\"\n-    }\n+    #[debug_format = \"NodeId({})\"]\n+    pub struct NodeId {}\n }\n \n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeMapEntry, NodeId);"}, {"sha": "1f0b8adeaf16c1ecbe31529b0f0ea6efe0ec5371", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -115,13 +115,11 @@ impl<'tcx> fmt::Debug for OutlivesConstraint<'tcx> {\n }\n \n rustc_index::newtype_index! {\n-    pub struct OutlivesConstraintIndex {\n-        DEBUG_FORMAT = \"OutlivesConstraintIndex({})\"\n-    }\n+    #[debug_format = \"OutlivesConstraintIndex({})\"]\n+    pub struct OutlivesConstraintIndex {}\n }\n \n rustc_index::newtype_index! {\n-    pub struct ConstraintSccIndex {\n-        DEBUG_FORMAT = \"ConstraintSccIndex({})\"\n-    }\n+    #[debug_format = \"ConstraintSccIndex({})\"]\n+    pub struct ConstraintSccIndex {}\n }"}, {"sha": "8c4885770ad37b6d009eb450d82a7e2b47a4d057", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -108,9 +108,8 @@ impl_visitable! {\n }\n \n rustc_index::newtype_index! {\n-    pub struct BorrowIndex {\n-        DEBUG_FORMAT = \"bw{}\"\n-    }\n+    #[debug_format = \"bw{}\"]\n+    pub struct BorrowIndex {}\n }\n \n /// `Borrows` stores the data used in the analyses that track the flow"}, {"sha": "288b7d85be2d41d4d5e89fe1eab90f597f1668bd", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -20,9 +20,8 @@ pub struct LocationTable {\n }\n \n rustc_index::newtype_index! {\n-    pub struct LocationIndex {\n-        DEBUG_FORMAT = \"LocationIndex({})\"\n-    }\n+    #[debug_format = \"LocationIndex({})\"]\n+    pub struct LocationIndex {}\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "b63e286676ff48fc2129344547850f320da554d0", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -55,9 +55,8 @@ pub(crate) struct NllMemberConstraint<'tcx> {\n }\n \n rustc_index::newtype_index! {\n-    pub(crate) struct NllMemberConstraintIndex {\n-        DEBUG_FORMAT = \"MemberConstraintIndex({})\"\n-    }\n+    #[debug_format = \"MemberConstraintIndex({})\"]\n+    pub(crate) struct NllMemberConstraintIndex {}\n }\n \n impl Default for MemberConstraintSet<'_, ty::RegionVid> {"}, {"sha": "c3dfeedc205f7e8e4a4841fea994ea2abf79070f", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -90,12 +90,14 @@ impl RegionValueElements {\n rustc_index::newtype_index! {\n     /// A single integer representing a `Location` in the MIR control-flow\n     /// graph. Constructed efficiently from `RegionValueElements`.\n-    pub struct PointIndex { DEBUG_FORMAT = \"PointIndex({})\" }\n+    #[debug_format = \"PointIndex({})\"]\n+    pub struct PointIndex {}\n }\n \n rustc_index::newtype_index! {\n     /// A single integer representing a `ty::Placeholder`.\n-    pub struct PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" }\n+    #[debug_format = \"PlaceholderIndex({})\"]\n+    pub struct PlaceholderIndex {}\n }\n \n /// An individual element in a region value -- the value of a"}, {"sha": "8023ef60d205290478d37c467291d88c17ac093b", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -46,7 +46,7 @@ struct Appearance {\n }\n \n rustc_index::newtype_index! {\n-    pub struct AppearanceIndex { .. }\n+    pub struct AppearanceIndex {}\n }\n \n impl vll::LinkElem for Appearance {"}, {"sha": "94a8c1fc051dd6f3bb9aedcab3b33a74e0adca80", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -22,7 +22,7 @@ struct PreOrderFrame<Iter> {\n }\n \n rustc_index::newtype_index! {\n-    struct PreorderIndex { .. }\n+    struct PreorderIndex {}\n }\n \n pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {"}, {"sha": "03bcaa6946825baac7073958262ddd75f7bd3bf2", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -138,7 +138,7 @@ rustc_index::newtype_index! {\n     /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n     /// tree or hash map.\n     #[derive(HashStable_Generic)]\n-    pub struct ItemLocalId { .. }\n+    pub struct ItemLocalId {}\n }\n \n impl ItemLocalId {"}, {"sha": "a9331af4eab32f622d7ccec1340604df7faa32b9", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -198,10 +198,10 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n             // entire graph when there are many connected regions.\n \n             rustc_index::newtype_index! {\n-                pub struct RegionId {\n-                    ENCODABLE = custom\n-                }\n+                #[custom_encodable]\n+                pub struct RegionId {}\n             }\n+\n             struct ConnectedRegion {\n                 idents: SmallVec<[Symbol; 8]>,\n                 impl_blocks: FxHashSet<usize>,"}, {"sha": "6f26afcaf1680abfd0bc4c4a4e80dd4a86be7023", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/arg_matrix.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -4,15 +4,13 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::error::TypeError;\n \n rustc_index::newtype_index! {\n-    pub(crate) struct ExpectedIdx {\n-        DEBUG_FORMAT = \"ExpectedIdx({})\",\n-    }\n+    #[debug_format = \"ExpectedIdx({})\"]\n+    pub(crate) struct ExpectedIdx {}\n }\n \n rustc_index::newtype_index! {\n-    pub(crate) struct ProvidedIdx {\n-        DEBUG_FORMAT = \"ProvidedIdx({})\",\n-    }\n+    #[debug_format = \"ProvidedIdx({})\"]\n+    pub(crate) struct ProvidedIdx {}\n }\n \n impl ExpectedIdx {"}, {"sha": "2f55ea939fc0b2bcff4edfe08ac44de843f2efe1", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -96,15 +96,13 @@ fn for_each_consumable<'tcx>(hir: Map<'tcx>, place: TrackedValue, mut f: impl Fn\n }\n \n rustc_index::newtype_index! {\n-    pub struct PostOrderId {\n-        DEBUG_FORMAT = \"id({})\",\n-    }\n+    #[debug_format = \"id({})\"]\n+    pub struct PostOrderId {}\n }\n \n rustc_index::newtype_index! {\n-    pub struct TrackedValueIndex {\n-        DEBUG_FORMAT = \"hidx({})\",\n-    }\n+    #[debug_format = \"hidx({})\"]\n+    pub struct TrackedValueIndex {}\n }\n \n /// Identifies a value whose drop state we need to track."}, {"sha": "cb0f0db220d97b6505b46030d497787eb6f53a81", "filename": "compiler/rustc_index/src/vec/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -3,7 +3,10 @@\n // Allows the macro invocation below to work\n use crate as rustc_index;\n \n-rustc_macros::newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n+rustc_macros::newtype_index! {\n+    #[max = 0xFFFF_FFFA]\n+    struct MyIdx {}\n+}\n \n #[test]\n fn index_size_is_optimized() {"}, {"sha": "c46edc33ff40ccd13ac18c7fbc43a15a49a6de96", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -357,15 +357,13 @@ impl<'tcx> SccUniverse<'tcx> {\n }\n \n rustc_index::newtype_index! {\n-    struct LeakCheckNode {\n-        DEBUG_FORMAT = \"LeakCheckNode({})\"\n-    }\n+    #[debug_format = \"LeakCheckNode({})\"]\n+    struct LeakCheckNode {}\n }\n \n rustc_index::newtype_index! {\n-    struct LeakCheckScc {\n-        DEBUG_FORMAT = \"LeakCheckScc({})\"\n-    }\n+    #[debug_format = \"LeakCheckScc({})\"]\n+    struct LeakCheckScc {}\n }\n \n /// Represents the graph of constraints. For each `R1: R2` constraint we create"}, {"sha": "e9d3d44a3f9f9f6e6fede79abd3d00190aa2bd1d", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -39,9 +39,9 @@ struct LintLevelSets {\n }\n \n rustc_index::newtype_index! {\n+    #[custom_encodable] // we don't need encoding\n     struct LintStackIndex {\n-        ENCODABLE = custom, // we don't need encoding\n-        const COMMAND_LINE = 0,\n+        const COMMAND_LINE = 0;\n     }\n }\n "}, {"sha": "153473de6244952770385d1f5233ac4106a17168", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 53, "deletions": 102, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -1,35 +1,15 @@\n use proc_macro2::{Span, TokenStream};\n use quote::quote;\n use syn::parse::*;\n-use syn::punctuated::Punctuated;\n use syn::*;\n \n-mod kw {\n-    syn::custom_keyword!(derive);\n-    syn::custom_keyword!(DEBUG_FORMAT);\n-    syn::custom_keyword!(MAX);\n-    syn::custom_keyword!(ENCODABLE);\n-    syn::custom_keyword!(custom);\n-    syn::custom_keyword!(ORD_IMPL);\n-}\n-\n-#[derive(Debug)]\n-enum DebugFormat {\n-    // The user will provide a custom `Debug` impl, so we shouldn't generate\n-    // one\n-    Custom,\n-    // Use the specified format string in the generated `Debug` impl\n-    // By default, this is \"{}\"\n-    Format(String),\n-}\n-\n // We parse the input and emit the output in a single step.\n // This field stores the final macro output\n struct Newtype(TokenStream);\n \n impl Parse for Newtype {\n     fn parse(input: ParseStream<'_>) -> Result<Self> {\n-        let attrs = input.call(Attribute::parse_outer)?;\n+        let mut attrs = input.call(Attribute::parse_outer)?;\n         let vis: Visibility = input.parse()?;\n         input.parse::<Token![struct]>()?;\n         let name: Ident = input.parse()?;\n@@ -39,93 +19,68 @@ impl Parse for Newtype {\n \n         // Any additional `#[derive]` macro paths to apply\n         let mut derive_paths: Vec<Path> = Vec::new();\n-        let mut debug_format: Option<DebugFormat> = None;\n+        let mut debug_format: Option<Lit> = None;\n         let mut max = None;\n         let mut consts = Vec::new();\n         let mut encodable = true;\n         let mut ord = true;\n \n-        // Parse an optional trailing comma\n-        let try_comma = || -> Result<()> {\n-            if body.lookahead1().peek(Token![,]) {\n-                body.parse::<Token![,]>()?;\n-            }\n-            Ok(())\n-        };\n-\n-        if body.lookahead1().peek(Token![..]) {\n-            body.parse::<Token![..]>()?;\n-        } else {\n-            loop {\n-                if body.lookahead1().peek(kw::derive) {\n-                    body.parse::<kw::derive>()?;\n-                    let derives;\n-                    bracketed!(derives in body);\n-                    let derives: Punctuated<Path, Token![,]> =\n-                        derives.parse_terminated(Path::parse)?;\n-                    try_comma()?;\n-                    derive_paths.extend(derives);\n-                    continue;\n-                }\n-                if body.lookahead1().peek(kw::DEBUG_FORMAT) {\n-                    body.parse::<kw::DEBUG_FORMAT>()?;\n-                    body.parse::<Token![=]>()?;\n-                    let new_debug_format = if body.lookahead1().peek(kw::custom) {\n-                        body.parse::<kw::custom>()?;\n-                        DebugFormat::Custom\n-                    } else {\n-                        let format_str: LitStr = body.parse()?;\n-                        DebugFormat::Format(format_str.value())\n-                    };\n-                    try_comma()?;\n-                    if let Some(old) = debug_format.replace(new_debug_format) {\n-                        panic!(\"Specified multiple debug format options: {:?}\", old);\n-                    }\n-                    continue;\n-                }\n-                if body.lookahead1().peek(kw::MAX) {\n-                    body.parse::<kw::MAX>()?;\n-                    body.parse::<Token![=]>()?;\n-                    let val: Lit = body.parse()?;\n-                    try_comma()?;\n-                    if let Some(old) = max.replace(val) {\n-                        panic!(\"Specified multiple MAX: {:?}\", old);\n-                    }\n-                    continue;\n-                }\n-                if body.lookahead1().peek(kw::ENCODABLE) {\n-                    body.parse::<kw::ENCODABLE>()?;\n-                    body.parse::<Token![=]>()?;\n-                    body.parse::<kw::custom>()?;\n-                    try_comma()?;\n+        attrs.retain(|attr| match attr.path.get_ident() {\n+            Some(ident) => match &*ident.to_string() {\n+                \"custom_encodable\" => {\n                     encodable = false;\n-                    continue;\n+                    false\n                 }\n-                if body.lookahead1().peek(kw::ORD_IMPL) {\n-                    body.parse::<kw::ORD_IMPL>()?;\n-                    body.parse::<Token![=]>()?;\n-                    body.parse::<kw::custom>()?;\n+                \"no_ord_impl\" => {\n                     ord = false;\n-                    continue;\n+                    false\n                 }\n+                \"max\" => {\n+                    let Ok(Meta::NameValue(literal) )= attr.parse_meta() else {\n+                        panic!(\"#[max = NUMBER] attribute requires max value\");\n+                    };\n+\n+                    if let Some(old) = max.replace(literal.lit) {\n+                        panic!(\"Specified multiple max: {:?}\", old);\n+                    }\n \n-                // We've parsed everything that the user provided, so we're done\n-                if body.is_empty() {\n-                    break;\n+                    false\n                 }\n+                \"debug_format\" => {\n+                    let Ok(Meta::NameValue(literal) )= attr.parse_meta() else {\n+                        panic!(\"#[debug_format = FMT] attribute requires a format\");\n+                    };\n+\n+                    if let Some(old) = debug_format.replace(literal.lit) {\n+                        panic!(\"Specified multiple debug format options: {:?}\", old);\n+                    }\n \n-                // Otherwise, we are parsing a user-defined constant\n-                let const_attrs = body.call(Attribute::parse_outer)?;\n-                body.parse::<Token![const]>()?;\n-                let const_name: Ident = body.parse()?;\n-                body.parse::<Token![=]>()?;\n-                let const_val: Expr = body.parse()?;\n-                try_comma()?;\n-                consts.push(quote! { #(#const_attrs)* #vis const #const_name: #name = #name::from_u32(#const_val); });\n+                    false\n+                }\n+                _ => true,\n+            },\n+            _ => true,\n+        });\n+\n+        loop {\n+            // We've parsed everything that the user provided, so we're done\n+            if body.is_empty() {\n+                break;\n             }\n+\n+            // Otherwise, we are parsing a user-defined constant\n+            let const_attrs = body.call(Attribute::parse_outer)?;\n+            body.parse::<Token![const]>()?;\n+            let const_name: Ident = body.parse()?;\n+            body.parse::<Token![=]>()?;\n+            let const_val: Expr = body.parse()?;\n+            body.parse::<Token![;]>()?;\n+            consts.push(quote! { #(#const_attrs)* #vis const #const_name: #name = #name::from_u32(#const_val); });\n         }\n \n-        let debug_format = debug_format.unwrap_or(DebugFormat::Format(\"{}\".to_string()));\n+        let debug_format =\n+            debug_format.unwrap_or_else(|| Lit::Str(LitStr::new(\"{}\", Span::call_site())));\n+\n         // shave off 256 indices at the end to allow space for packing these indices into enums\n         let max = max.unwrap_or_else(|| Lit::Int(LitInt::new(\"0xFFFF_FF00\", Span::call_site())));\n \n@@ -180,18 +135,14 @@ impl Parse for Newtype {\n             quote! {}\n         };\n \n-        let debug_impl = match debug_format {\n-            DebugFormat::Custom => quote! {},\n-            DebugFormat::Format(format) => {\n-                quote! {\n-                    impl ::std::fmt::Debug for #name {\n-                        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n-                            write!(fmt, #format, self.as_u32())\n-                        }\n-                    }\n+        let debug_impl = quote! {\n+            impl ::std::fmt::Debug for #name {\n+                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+                    write!(fmt, #debug_format, self.as_u32())\n                 }\n             }\n         };\n+\n         let spec_partial_eq_impl = if let Lit::Int(max) = &max {\n             if let Ok(max_val) = max.base10_parse::<u32>() {\n                 quote! {"}, {"sha": "94ca38c0e758ff2bf9615572b552e2f7b85d10eb", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -147,9 +147,8 @@ rustc_index::newtype_index! {\n     ///\n     /// * The subscope with `first_statement_index == 1` is scope of `c`,\n     ///   and thus does not include EXPR_2, but covers the `...`.\n-    pub struct FirstStatementIndex {\n-        derive [HashStable]\n-    }\n+    #[derive(HashStable)]\n+    pub struct FirstStatementIndex {}\n }\n \n // compilation error if size of `ScopeData` is not the same as a `u32`"}, {"sha": "e7bb3ab0bc352d6016fb83389c9df33aa0c14553", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -10,10 +10,10 @@ rustc_index::newtype_index! {\n     /// CounterValueReference.as_u32() (which ascend from 1) or an ExpressionOperandId.as_u32()\n     /// (which _*descend*_ from u32::MAX). Id value `0` (zero) represents a virtual counter with a\n     /// constant value of `0`.\n+    #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"ExpressionOperandId({})\"]\n     pub struct ExpressionOperandId {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"ExpressionOperandId({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n \n@@ -32,11 +32,10 @@ impl ExpressionOperandId {\n }\n \n rustc_index::newtype_index! {\n-    pub struct CounterValueReference {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"CounterValueReference({})\",\n-        MAX = 0xFFFF_FFFF,\n-    }\n+    #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"CounterValueReference({})\"]\n+    pub struct CounterValueReference {}\n }\n \n impl CounterValueReference {\n@@ -56,33 +55,30 @@ rustc_index::newtype_index! {\n     /// InjectedExpressionId.as_u32() converts to ExpressionOperandId.as_u32()\n     ///\n     /// Values descend from u32::MAX.\n-    pub struct InjectedExpressionId {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"InjectedExpressionId({})\",\n-        MAX = 0xFFFF_FFFF,\n-    }\n+    #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"InjectedExpressionId({})\"]\n+    pub struct InjectedExpressionId {}\n }\n \n rustc_index::newtype_index! {\n     /// InjectedExpressionIndex.as_u32() translates to u32::MAX - ExpressionOperandId.as_u32()\n     ///\n     /// Values ascend from 0.\n-    pub struct InjectedExpressionIndex {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"InjectedExpressionIndex({})\",\n-        MAX = 0xFFFF_FFFF,\n-    }\n+    #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"InjectedExpressionIndex({})\"]\n+    pub struct InjectedExpressionIndex {}\n }\n \n rustc_index::newtype_index! {\n     /// MappedExpressionIndex values ascend from zero, and are recalculated indexes based on their\n     /// array position in the LLVM coverage map \"Expressions\" array, which is assembled during the\n     /// \"mapgen\" process. They cannot be computed algorithmically, from the other `newtype_index`s.\n-    pub struct MappedExpressionIndex {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"MappedExpressionIndex({})\",\n-        MAX = 0xFFFF_FFFF,\n-    }\n+    #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"MappedExpressionIndex({})\"]\n+    pub struct MappedExpressionIndex {}\n }\n \n impl From<CounterValueReference> for ExpressionOperandId {"}, {"sha": "ffdf61d424422a5b19010a98bc599873a52a1c72", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -654,10 +654,10 @@ impl SourceInfo {\n // Variables and temps\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n+    #[debug_format = \"_{}\"]\n     pub struct Local {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"_{}\",\n-        const RETURN_PLACE = 0,\n+        const RETURN_PLACE = 0;\n     }\n }\n \n@@ -1146,10 +1146,10 @@ rustc_index::newtype_index! {\n     ///     https://rustc-dev-guide.rust-lang.org/appendix/background.html#what-is-a-dataflow-analysis\n     /// [`CriticalCallEdges`]: ../../rustc_const_eval/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n     /// [guide-mir]: https://rustc-dev-guide.rust-lang.org/mir/\n+    #[derive(HashStable)]\n+    #[debug_format = \"bb{}\"]\n     pub struct BasicBlock {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"bb{}\",\n-        const START_BLOCK = 0,\n+        const START_BLOCK = 0;\n     }\n }\n \n@@ -1530,10 +1530,9 @@ rustc_index::newtype_index! {\n     /// [wrapper]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#newtype\n     /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n     /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n-    pub struct Field {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"field[{}]\"\n-    }\n+    #[derive(HashStable)]\n+    #[debug_format = \"field[{}]\"]\n+    pub struct Field {}\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -1757,10 +1756,10 @@ impl Debug for Place<'_> {\n // Scopes\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n+    #[debug_format = \"scope[{}]\"]\n     pub struct SourceScope {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"scope[{}]\",\n-        const OUTERMOST_SOURCE_SCOPE = 0,\n+        const OUTERMOST_SOURCE_SCOPE = 0;\n     }\n }\n \n@@ -2755,10 +2754,9 @@ impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n }\n \n rustc_index::newtype_index! {\n-    pub struct Promoted {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"promoted[{}]\"\n-    }\n+    #[derive(HashStable)]\n+    #[debug_format = \"promoted[{}]\"]\n+    pub struct Promoted {}\n }\n \n impl<'tcx> Debug for Constant<'tcx> {"}, {"sha": "a8a4532223c2d901a47e1cf1f18cb21a718538e7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -130,10 +130,9 @@ pub struct UnsafetyCheckResult {\n }\n \n rustc_index::newtype_index! {\n-    pub struct GeneratorSavedLocal {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"_{}\",\n-    }\n+    #[derive(HashStable)]\n+    #[debug_format = \"_{}\"]\n+    pub struct GeneratorSavedLocal {}\n }\n \n /// The layout of generator state."}, {"sha": "ac903010c8d31bba0e158db5016516709d3b5b38", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -35,9 +35,8 @@ macro_rules! thir_with_elements {\n         $(\n             newtype_index! {\n                 #[derive(HashStable)]\n-                pub struct $id {\n-                    DEBUG_FORMAT = $format\n-                }\n+                #[debug_format = $format]\n+                pub struct $id {}\n             }\n         )*\n "}, {"sha": "30073b541ecbd0e5c09a32e0c91bcd028a6fa770", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -99,12 +99,6 @@ impl<'tcx> fmt::Debug for ty::ConstVid<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::RegionVid {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"'_#{}r\", self.index())\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths!(fmt::Display::fmt(self, f))"}, {"sha": "e13b68c83b57c140f51b3eeabc290fe1ca2250fb", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -1378,9 +1378,8 @@ pub struct ConstVid<'tcx> {\n rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n     #[derive(HashStable)]\n-    pub struct RegionVid {\n-        DEBUG_FORMAT = custom,\n-    }\n+    #[debug_format = \"'_#{}r\"]\n+    pub struct RegionVid {}\n }\n \n impl Atom for RegionVid {\n@@ -1391,7 +1390,7 @@ impl Atom for RegionVid {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n-    pub struct BoundVar { .. }\n+    pub struct BoundVar {}\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]"}, {"sha": "136a4906c58de7f1c607e70a90af645b43381c4b", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -608,10 +608,10 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n+    #[debug_format = \"UserType({})\"]\n     pub struct UserTypeAnnotationIndex {\n-        derive [HashStable]\n-        DEBUG_FORMAT = \"UserType({})\",\n-        const START_INDEX = 0,\n+        const START_INDEX = 0;\n     }\n }\n "}, {"sha": "c785dfb500fc9f93d95b6d6beef972391f0ad6d1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -372,7 +372,7 @@ struct CFG<'tcx> {\n }\n \n rustc_index::newtype_index! {\n-    struct ScopeId { .. }\n+    struct ScopeId {}\n }\n \n #[derive(Debug)]"}, {"sha": "c92634a609de0f762df392231779f6510bc5a72e", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -185,7 +185,7 @@ pub(crate) enum BreakableTarget {\n }\n \n rustc_index::newtype_index! {\n-    struct DropIdx { .. }\n+    struct DropIdx {}\n }\n \n const ROOT_NODE: DropIdx = DropIdx::from_u32(0);"}, {"sha": "9b053985bedf6823f13a47fe5f5a6d5770cc38b8", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -14,9 +14,8 @@ use self::abs_domain::{AbstractElem, Lift};\n mod abs_domain;\n \n rustc_index::newtype_index! {\n-    pub struct MovePathIndex {\n-        DEBUG_FORMAT = \"mp{}\"\n-    }\n+    #[debug_format = \"mp{}\"]\n+    pub struct MovePathIndex {}\n }\n \n impl polonius_engine::Atom for MovePathIndex {\n@@ -26,15 +25,13 @@ impl polonius_engine::Atom for MovePathIndex {\n }\n \n rustc_index::newtype_index! {\n-    pub struct MoveOutIndex {\n-        DEBUG_FORMAT = \"mo{}\"\n-    }\n+    #[debug_format = \"mo{}\"]\n+    pub struct MoveOutIndex {}\n }\n \n rustc_index::newtype_index! {\n-    pub struct InitIndex {\n-        DEBUG_FORMAT = \"in{}\"\n-    }\n+    #[debug_format = \"in{}\"]\n+    pub struct InitIndex {}\n }\n \n impl MoveOutIndex {"}, {"sha": "78d28f1ebab7ce345d5082169bb0b80e4c34045b", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -282,9 +282,9 @@ impl graph::WithPredecessors for CoverageGraph {\n \n rustc_index::newtype_index! {\n     /// A node in the control-flow graph of CoverageGraph.\n+    #[debug_format = \"bcb{}\"]\n     pub(super) struct BasicCoverageBlock {\n-        DEBUG_FORMAT = \"bcb{}\",\n-        const START_BCB = 0,\n+        const START_BCB = 0;\n     }\n }\n "}, {"sha": "b49432b79962bd3c288ec770a85fe2d1d1e5483c", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -108,15 +108,13 @@ use std::rc::Rc;\n mod rwu_table;\n \n rustc_index::newtype_index! {\n-    pub struct Variable {\n-        DEBUG_FORMAT = \"v({})\",\n-    }\n+    #[debug_format = \"v({})\"]\n+    pub struct Variable {}\n }\n \n rustc_index::newtype_index! {\n-    pub struct LiveNode {\n-        DEBUG_FORMAT = \"ln({})\",\n-    }\n+    #[debug_format = \"ln({})\"]\n+    pub struct LiveNode {}\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]"}, {"sha": "52957ee0222387b62747d335e3429016184cf0bf", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -37,7 +37,7 @@ pub struct DepGraph<K: DepKind> {\n }\n \n rustc_index::newtype_index! {\n-    pub struct DepNodeIndex { .. }\n+    pub struct DepNodeIndex {}\n }\n \n impl DepNodeIndex {\n@@ -974,7 +974,7 @@ pub struct WorkProduct {\n \n // Index type for `DepNodeData`'s edges.\n rustc_index::newtype_index! {\n-    struct EdgeIndex { .. }\n+    struct EdgeIndex {}\n }\n \n /// `CurrentDepGraph` stores the dependency graph for the current session. It"}, {"sha": "a918328d4130ea08257536e8f432ca0c42396a32", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -27,9 +27,8 @@ use smallvec::SmallVec;\n // unused so that we can store multiple index types in `CompressedHybridIndex`,\n // and use those bits to encode which index type it contains.\n rustc_index::newtype_index! {\n-    pub struct SerializedDepNodeIndex {\n-        MAX = 0x7FFF_FFFF\n-    }\n+    #[max = 0x7FFF_FFFF]\n+    pub struct SerializedDepNodeIndex {}\n }\n \n /// Data for use when recompiling the **current crate**."}, {"sha": "221f65b66e6d4b77a1a0f63bc27acf3905e718b5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -10,10 +10,9 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n \n rustc_index::newtype_index! {\n-    pub struct CrateNum {\n-        ENCODABLE = custom\n-        DEBUG_FORMAT = \"crate{}\"\n-    }\n+    #[custom_encodable]\n+    #[debug_format = \"crate{}\"]\n+    pub struct CrateNum {}\n }\n \n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n@@ -194,13 +193,12 @@ rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned\n     /// shorthand for a particular DefPath.\n+    #[custom_encodable] // (only encodable in metadata)\n+    #[debug_format = \"DefIndex({})\"]\n     pub struct DefIndex {\n-        ENCODABLE = custom // (only encodable in metadata)\n-\n-        DEBUG_FORMAT = \"DefIndex({})\",\n         /// The crate root is always assigned index 0 by the AST Map code,\n         /// thanks to `NodeCollector::new`.\n-        const CRATE_DEF_INDEX = 0,\n+        const CRATE_DEF_INDEX = 0;\n     }\n }\n "}, {"sha": "c2d8287f2431dc3faa5cad0a1b0070e97257dc72", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -61,9 +61,8 @@ pub struct SyntaxContextData {\n \n rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n-    pub struct ExpnIndex {\n-        ENCODABLE = custom\n-    }\n+    #[custom_encodable]\n+    pub struct ExpnIndex {}\n }\n \n /// A unique ID associated with a macro invocation and expansion.\n@@ -82,11 +81,10 @@ impl fmt::Debug for ExpnId {\n \n rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n-    pub struct LocalExpnId {\n-        ENCODABLE = custom\n-        ORD_IMPL = custom\n-        DEBUG_FORMAT = \"expn{}\"\n-    }\n+    #[custom_encodable]\n+    #[no_ord_impl]\n+    #[debug_format = \"expn{}\"]\n+    pub struct LocalExpnId {}\n }\n \n // To ensure correctness of incremental compilation,"}, {"sha": "f23959b6e476d2fdc89f51b337fe62cbb5ce7a41", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -1802,7 +1802,7 @@ impl fmt::Display for MacroRulesNormalizedIdent {\n pub struct Symbol(SymbolIndex);\n \n rustc_index::newtype_index! {\n-    struct SymbolIndex { .. }\n+    struct SymbolIndex {}\n }\n \n impl Symbol {"}, {"sha": "88a0a1f8ecfdedafd60a8d9f6f516f488f06ca79", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -20,9 +20,8 @@ impl ToJson for Endian {\n }\n \n rustc_index::newtype_index! {\n-    pub struct VariantIdx {\n-        derive [HashStable_Generic]\n-    }\n+    #[derive(HashStable_Generic)]\n+    pub struct VariantIdx {}\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, HashStable_Generic)]"}, {"sha": "dd36a5c7a2169af3af0ed9e267b46d5e0cfabd0b", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9e5e711d3eef1998ff24ac2bc57386662652e9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=eb9e5e711d3eef1998ff24ac2bc57386662652e9", "patch": "@@ -301,9 +301,9 @@ rustc_index::newtype_index! {\n     ///\n     /// [dbi]: https://en.wikipedia.org/wiki/De_Bruijn_index\n     #[derive(HashStable_Generic)]\n+    #[debug_format = \"DebruijnIndex({})\"]\n     pub struct DebruijnIndex {\n-        DEBUG_FORMAT = \"DebruijnIndex({})\",\n-        const INNERMOST = 0,\n+        const INNERMOST = 0;\n     }\n }\n \n@@ -499,9 +499,8 @@ pub struct FloatVarValue(pub FloatTy);\n \n rustc_index::newtype_index! {\n     /// A **ty**pe **v**ariable **ID**.\n-    pub struct TyVid {\n-        DEBUG_FORMAT = \"_#{}t\"\n-    }\n+    #[debug_format = \"_#{}t\"]\n+    pub struct TyVid {}\n }\n \n /// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.\n@@ -788,9 +787,8 @@ rustc_index::newtype_index! {\n     /// type -- an idealized representative of \"types in general\" that we\n     /// use for checking generic functions.\n     #[derive(HashStable_Generic)]\n-    pub struct UniverseIndex {\n-        DEBUG_FORMAT = \"U{}\",\n-    }\n+    #[debug_format = \"U{}\"]\n+    pub struct UniverseIndex {}\n }\n \n impl UniverseIndex {"}]}