{"sha": "1708219940806d3620fb1cc10a0a673f7bfbbe45", "node_id": "C_kwDOAAsO6NoAKDE3MDgyMTk5NDA4MDZkMzYyMGZiMWNjMTBhMGE2NzNmN2JmYmJlNDU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T16:18:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T16:18:17Z"}, "message": "Rollup merge of #89029 - notriddle:notriddle/issue-89013, r=estebank\n\nfeat(rustc_parse): recover from pre-RFC-2000 const generics syntax\n\nFixes #89013", "tree": {"sha": "c123a2b666324698e0d9ff08851503c245e6c0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c123a2b666324698e0d9ff08851503c245e6c0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1708219940806d3620fb1cc10a0a673f7bfbbe45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVzTKCRBK7hj4Ov3rIwAARYEIAIYcmhn4hQ50S7XiwGM6g2Gl\n9uysN8Vm3VFrYBPmcx2Toz88zD/csbqbhMB+FUbNnKkxWS95mrY86ZrOgXxXPyof\nFTiJhyeW/EMZ0ZQXJgFwFoKBFLVs8Eu0mOeW4np4RN+EAdCB5eV97DHSLbPSMGgO\nljw9jAvAAhKbaqkk76WbgCt5y6BW8ApoI/SlE+lFPQQyyOAbtElIgxxFGuTxnpEJ\npgUBImUfaa9FJH7BRp+/c2ljrA8WG7NeoH0ZnBP0bE8f7fZiX+Az3+QeCkR/v86C\n/aGu/t1LRMA7OqencNHYIQ0ohva+aOm2e6apy/7EFzdlvFGpfQ1t+KfwfDNr4o4=\n=0Uzg\n-----END PGP SIGNATURE-----\n", "payload": "tree c123a2b666324698e0d9ff08851503c245e6c0ca\nparent 6f1e93058137eb606cbee5ef778d30b379903f7c\nparent 105b60f2501fac061284ea7f5fbb8fb3f8134a92\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633105097 -0700\ncommitter GitHub <noreply@github.com> 1633105097 -0700\n\nRollup merge of #89029 - notriddle:notriddle/issue-89013, r=estebank\n\nfeat(rustc_parse): recover from pre-RFC-2000 const generics syntax\n\nFixes #89013\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1708219940806d3620fb1cc10a0a673f7bfbbe45", "html_url": "https://github.com/rust-lang/rust/commit/1708219940806d3620fb1cc10a0a673f7bfbbe45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1708219940806d3620fb1cc10a0a673f7bfbbe45/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1e93058137eb606cbee5ef778d30b379903f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e93058137eb606cbee5ef778d30b379903f7c", "html_url": "https://github.com/rust-lang/rust/commit/6f1e93058137eb606cbee5ef778d30b379903f7c"}, {"sha": "105b60f2501fac061284ea7f5fbb8fb3f8134a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/105b60f2501fac061284ea7f5fbb8fb3f8134a92", "html_url": "https://github.com/rust-lang/rust/commit/105b60f2501fac061284ea7f5fbb8fb3f8134a92"}], "stats": {"total": 186, "additions": 180, "deletions": 6}, "files": [{"sha": "9c275b316c545473680efcea1499e2e4e8dd2e1c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -384,6 +384,16 @@ impl GenericArgs<'_> {\n         self.args.iter().any(|arg| matches!(arg, GenericArg::Type(_)))\n     }\n \n+    pub fn has_err(&self) -> bool {\n+        self.args.iter().any(|arg| match arg {\n+            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err),\n+            _ => false,\n+        }) || self.bindings.iter().any(|arg| match arg.kind {\n+            TypeBindingKind::Equality { ty } => matches!(ty.kind, TyKind::Err),\n+            _ => false,\n+        })\n+    }\n+\n     #[inline]\n     pub fn num_type_params(&self) -> usize {\n         self.args.iter().filter(|arg| matches!(arg, GenericArg::Type(_))).count()"}, {"sha": "c7d080a80fe6f843c07895d292f16ae33e501ccd", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -495,20 +495,28 @@ impl<'a> Parser<'a> {\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n                 let before_next = self.token.span.shrink_to_lo();\n-                self.struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\")\n-                    .span_suggestion(\n+                let mut err = self\n+                    .struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\");\n+                if matches!(self.token.kind, token::Comma | token::Gt) {\n+                    err.span_suggestion(\n                         self.sess.source_map().next_point(eq).to(before_next),\n                         \"to constrain the associated type, add a type after `=`\",\n                         \" TheType\".to_string(),\n                         Applicability::HasPlaceholders,\n-                    )\n-                    .span_suggestion(\n+                    );\n+                    err.span_suggestion(\n                         eq.to(before_next),\n                         &format!(\"remove the `=` if `{}` is a type\", ident),\n                         String::new(),\n                         Applicability::MaybeIncorrect,\n                     )\n-                    .emit();\n+                } else {\n+                    err.span_label(\n+                        self.token.span,\n+                        &format!(\"expected type, found {}\", super::token_descr(&self.token)),\n+                    )\n+                };\n+                return Err(err);\n             }\n         }\n         Ok(self.mk_ty(span, ast::TyKind::Err))\n@@ -572,6 +580,25 @@ impl<'a> Parser<'a> {\n                     return self.recover_const_arg(start, err).map(Some);\n                 }\n             }\n+        } else if self.eat_keyword_noexpect(kw::Const) {\n+            // Detect and recover from the old, pre-RFC2000 syntax for const generics.\n+            let mut err = self.struct_span_err(\n+                start,\n+                \"expected lifetime, type, or constant, found keyword `const`\",\n+            );\n+            if self.check_const_arg() {\n+                err.span_suggestion_verbose(\n+                    start.until(self.token.span),\n+                    \"the `const` keyword is only needed in the definition of the type\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.emit();\n+                GenericArg::Const(self.parse_const_arg()?)\n+            } else {\n+                let after_kw_const = self.token.span;\n+                return self.recover_const_arg(after_kw_const, err).map(Some);\n+            }\n         } else {\n             return Ok(None);\n         };"}, {"sha": "456d3fe7b2f6aa8cf2d27a2d20de4513b71c45d5", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -600,7 +600,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     def_id,\n                 )\n                 .diagnostic()\n-                .emit();\n+                .emit_unless(gen_args.has_err());\n \n                 false\n             };"}, {"sha": "99d8e9dea910d2976c2b3707974b9ad5ec72fc50", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<const 3> for Bar {\n+//~^ERROR expected lifetime, type, or constant, found keyword `const`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ddddd86ab9c06b3f79997f791dabd0f6572652a6", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,14 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013-no-assoc.rs:9:10\n+   |\n+LL | impl Foo<const 3> for Bar {\n+   |          ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<const 3> for Bar {\n+LL + impl Foo<3> for Bar {\n+   | \n+\n+error: aborting due to previous error\n+"}, {"sha": "19e0f38d320c4e915bdd9c1c76e10881fb866aeb", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,17 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = 3> for Bar {\n+//~^ ERROR cannot constrain an associated constant to a value\n+//~| ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bbca92ad63a91ab7a0d0ae15859c8211ff534053", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,18 @@\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          -^^^-\n+   |          |   |\n+   |          |   ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          ^^^^^ associated type not allowed here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "0ec6762b6e282596a17524ccc5a877def103e2a3", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = type 3> for Bar {\n+//~^ERROR missing type to the right of `=`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f0d0d90c774f8a5981dddb63ff0ef20059b52059", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,8 @@\n+error: missing type to the right of `=`\n+  --> $DIR/issue-89013-type.rs:9:13\n+   |\n+LL | impl Foo<N = type 3> for Bar {\n+   |             ^---- expected type, found keyword `type`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca1158a2f6d16140cccb9e3578ffa4862be26a90", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,18 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = const 3> for Bar {\n+//~^ ERROR expected lifetime, type, or constant, found keyword `const`\n+//~| ERROR cannot constrain an associated constant to a value\n+//~| ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "85379d3f06e4b46722a0a2d5ed9aac717fb74580", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1708219940806d3620fb1cc10a0a673f7bfbbe45/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=1708219940806d3620fb1cc10a0a673f7bfbbe45", "patch": "@@ -0,0 +1,30 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013.rs:9:14\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |              ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<N = const 3> for Bar {\n+LL + impl Foo<N = 3> for Bar {\n+   | \n+\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          -^^^^^^^^^-\n+   |          |         |\n+   |          |         ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          ^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0229`."}]}