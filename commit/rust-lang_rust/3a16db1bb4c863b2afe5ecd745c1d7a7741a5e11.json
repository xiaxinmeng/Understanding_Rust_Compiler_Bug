{"sha": "3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "node_id": "C_kwDOAAsO6NoAKDNhMTZkYjFiYjRjODYzYjJhZmU1ZWNkNzQ1YzFkN2E3NzQxYTVlMTE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-18T17:49:18Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-18T18:14:39Z"}, "message": "rustdoc: create variants list outside of template", "tree": {"sha": "24aada46259e669a71091d4d5b44f789d9bd1ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24aada46259e669a71091d4d5b44f789d9bd1ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "html_url": "https://github.com/rust-lang/rust/commit/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9746b94766e1dca4c4ee39da46a03a41d3fcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9746b94766e1dca4c4ee39da46a03a41d3fcd8", "html_url": "https://github.com/rust-lang/rust/commit/5f9746b94766e1dca4c4ee39da46a03a41d3fcd8"}], "stats": {"total": 123, "additions": 60, "deletions": 63}, "files": [{"sha": "3ccc694fd2a758e578ebb265dc0994d069a38dfa", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 53, "deletions": 56, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "patch": "@@ -5,15 +5,13 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::middle::stability;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n+use rustc_middle::ty::layout::LayoutError;\n use rustc_middle::ty::{self, Adt, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_target::abi::{LayoutS, Primitive, TagEncoding, VariantIdx, Variants};\n-use std::borrow::Borrow;\n+use rustc_target::abi::{Primitive, TagEncoding, Variants};\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n@@ -1940,9 +1938,9 @@ fn document_type_layout<'a, 'cx: 'a>(\n ) -> impl fmt::Display + 'a + Captures<'cx> {\n     #[derive(Template)]\n     #[template(path = \"type_layout.html\")]\n-    struct TypeLayout<'a, 'cx> {\n-        cx: &'a Context<'cx>,\n-        ty_def_id: DefId,\n+    struct TypeLayout<'cx> {\n+        variants: Vec<(Symbol, TypeLayoutSize)>,\n+        type_layout_size: Result<TypeLayoutSize, LayoutError<'cx>>,\n     }\n \n     #[derive(Template)]\n@@ -1953,62 +1951,61 @@ fn document_type_layout<'a, 'cx: 'a>(\n         size: u64,\n     }\n \n-    impl<'a, 'cx: 'a> TypeLayout<'a, 'cx> {\n-        fn variants<'b: 'a>(&'b self) -> Option<&'b IndexVec<VariantIdx, LayoutS>> {\n-            if let Variants::Multiple { variants, .. } =\n-                    self.type_layout().unwrap().layout.variants() && !variants.is_empty() {\n-                Some(&variants)\n-            } else {\n-                None\n-            }\n-        }\n-        fn type_layout<'b: 'a>(&'b self) -> Result<TyAndLayout<'cx>, LayoutError<'cx>> {\n-            let tcx = self.cx.tcx();\n-            let param_env = tcx.param_env(self.ty_def_id);\n-            let ty = tcx.type_of(self.ty_def_id).subst_identity();\n-            tcx.layout_of(param_env.and(ty))\n+    display_fn(move |f| {\n+        if !cx.shared.show_type_layout {\n+            return Ok(());\n         }\n-        fn variant_name<'b: 'a>(&'b self, index: VariantIdx) -> Symbol {\n-            let Adt(adt, _) = self.type_layout().unwrap().ty.kind() else {\n-                span_bug!(self.cx.tcx().def_span(self.ty_def_id), \"not an adt\")\n-            };\n-            adt.variant(index).name\n-        }\n-        fn tag_size<'b: 'a>(&'b self) -> u64 {\n-            if let Variants::Multiple { variants, tag, tag_encoding, .. } =\n-                    self.type_layout().unwrap().layout.variants() && !variants.is_empty() {\n-                if let TagEncoding::Niche { .. } = tag_encoding {\n-                    0\n-                } else if let Primitive::Int(i, _) = tag.primitive() {\n-                    i.size().bytes()\n-                } else {\n-                    span_bug!(self.cx.tcx().def_span(self.ty_def_id), \"tag is neither niche nor int\")\n-                }\n+\n+        let variants = {\n+            let tcx = cx.tcx();\n+            let param_env = tcx.param_env(ty_def_id);\n+            let ty = tcx.type_of(ty_def_id).subst_identity();\n+            let type_layout = tcx.layout_of(param_env.and(ty));\n+            if let Ok(type_layout) = type_layout &&\n+                let Variants::Multiple { variants, tag, tag_encoding, .. } =\n+                    type_layout.layout.variants() &&\n+                !variants.is_empty()\n+            {\n+                let tag_size =\n+                    if let TagEncoding::Niche { .. } = tag_encoding {\n+                        0\n+                    } else if let Primitive::Int(i, _) = tag.primitive() {\n+                        i.size().bytes()\n+                    } else {\n+                        span_bug!(cx.tcx().def_span(ty_def_id), \"tag is neither niche nor int\")\n+                    };\n+                let variants = variants\n+                    .iter_enumerated()\n+                    .map(|(variant_idx, variant_layout)| {\n+                        let Adt(adt, _) = type_layout.ty.kind() else {\n+                            span_bug!(cx.tcx().def_span(ty_def_id), \"not an adt\")\n+                        };\n+                        let name = adt.variant(variant_idx).name;\n+                        let is_unsized = variant_layout.abi.is_unsized();\n+                        let is_uninhabited = variant_layout.abi.is_uninhabited();\n+                        let size = variant_layout.size.bytes() - tag_size;\n+                        let type_layout_size = TypeLayoutSize { is_unsized, is_uninhabited, size };\n+                        (name, type_layout_size)\n+                    }).collect();\n+                variants\n             } else {\n-                0\n+                Vec::new()\n             }\n-        }\n-        fn write_size<'b: 'a>(\n-            &'b self,\n-            layout: &'b LayoutS,\n-            tag_size: u64,\n-        ) -> impl fmt::Display + Captures<'cx> + Captures<'b> {\n-            display_fn(move |f| {\n+        };\n+\n+        let type_layout_size = {\n+            let tcx = cx.tcx();\n+            let param_env = tcx.param_env(ty_def_id);\n+            let ty = tcx.type_of(ty_def_id).subst_identity();\n+            tcx.layout_of(param_env.and(ty)).map(|layout| {\n                 let is_unsized = layout.abi.is_unsized();\n                 let is_uninhabited = layout.abi.is_uninhabited();\n-                let size = layout.size.bytes() - tag_size;\n-                TypeLayoutSize { is_unsized, is_uninhabited, size }.render_into(f).unwrap();\n-                Ok(())\n+                let size = layout.size.bytes();\n+                TypeLayoutSize { is_unsized, is_uninhabited, size }\n             })\n-        }\n-    }\n-\n-    display_fn(move |f| {\n-        if !cx.shared.show_type_layout {\n-            return Ok(());\n-        }\n+        };\n \n-        Ok(TypeLayout { cx, ty_def_id }.render_into(f).unwrap())\n+        Ok(TypeLayout { variants, type_layout_size }.render_into(f).unwrap())\n     })\n }\n "}, {"sha": "9e2c2049e31bb61c19737c51cb22d8d4134f0e2f", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=3a16db1bb4c863b2afe5ecd745c1d7a7741a5e11", "patch": "@@ -2,8 +2,8 @@ <h2 id=\"layout\" class=\"small-section-header\">  {# #}\n     Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n </h2> {# #}\n <div class=\"docblock\"> {# #}\n-    {% match self.type_layout() %}\n-        {% when Ok(ty_layout) %}\n+    {% match type_layout_size %}\n+        {% when Ok(type_layout_size) %}\n             <div class=\"warning\"> {# #}\n                 <p> {# #}\n                     <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n@@ -14,14 +14,14 @@ <h2 id=\"layout\" class=\"small-section-header\">  {# #}\n                     chapter for details on type layout guarantees. {# #}\n                 </p> {# #}\n             </div> {# #}\n-            <p><strong>Size:</strong> {{ self.write_size(ty_layout.layout.0.borrow(), 0) | safe }}</p> {# #}\n-            {% if let Some(variants) = self.variants() %}\n+            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+            {% if !variants.is_empty() %}\n                 <p><strong>Size for each variant:</strong></p> {# #}\n                 <ul> {# #}\n-                    {% for (index, layout) in variants.iter_enumerated() %}\n+                    {% for (name, layout_size) in variants %}\n                         <li> {# #}\n-                            <code>{{ self.variant_name(index.clone()) }}</code>: {#+ #}\n-                            {{ self.write_size(layout, self.tag_size()) | safe }}\n+                            <code>{{ name }}</code>: {#+ #}\n+                            {{ layout_size|safe }}\n                         </li> {# #}\n                     {% endfor %}\n                 </ul> {# #}"}]}