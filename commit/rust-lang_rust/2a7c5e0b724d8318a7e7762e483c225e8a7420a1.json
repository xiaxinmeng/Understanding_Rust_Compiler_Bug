{"sha": "2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhN2M1ZTBiNzI0ZDgzMThhN2U3NzYyZTQ4M2MyMjVlOGE3NDIwYTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T22:28:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T17:32:35Z"}, "message": "syntax: Remove usage of io_error in tests", "tree": {"sha": "59b1cdf662cc23707721e09f1080da870301136b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b1cdf662cc23707721e09f1080da870301136b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "html_url": "https://github.com/rust-lang/rust/commit/2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f2dfa8f632542bfb7260ca4b0aadce24061592", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f2dfa8f632542bfb7260ca4b0aadce24061592", "html_url": "https://github.com/rust-lang/rust/commit/94f2dfa8f632542bfb7260ca4b0aadce24061592"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "ae93c235ad23c9fbe0dd65db92a5052cd0df21ae", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "patch": "@@ -957,14 +957,13 @@ mod test {\n     use ast_util;\n     use codemap;\n     use codemap::Spanned;\n-    use fold;\n     use fold::*;\n     use ext::base::{CrateLoader, MacroCrate};\n     use parse;\n     use parse::token::{fresh_mark, gensym, intern};\n     use parse::token;\n     use util::parser_testing::{string_to_crate, string_to_crate_and_sess};\n-    use util::parser_testing::{string_to_pat, string_to_tts, strs_to_idents};\n+    use util::parser_testing::{string_to_pat, strs_to_idents};\n     use visit;\n     use visit::Visitor;\n \n@@ -1253,14 +1252,14 @@ mod test {\n                     let varref_name = mtwt_resolve(varref.segments[0].identifier);\n                     let varref_marks = mtwt_marksof(varref.segments[0].identifier.ctxt,\n                                                     invalid_name);\n-                    if (!(varref_name==binding_name)){\n+                    if !(varref_name==binding_name) {\n                         println!(\"uh oh, should match but doesn't:\");\n                         println!(\"varref: {:?}\",varref);\n                         println!(\"binding: {:?}\", bindings[binding_idx]);\n                         ast_util::display_sctable(get_sctable());\n                     }\n                     assert_eq!(varref_name,binding_name);\n-                    if (bound_ident_check) {\n+                    if bound_ident_check {\n                         // we're checking bound-identifier=?, and the marks\n                         // should be the same, too:\n                         assert_eq!(varref_marks,binding_marks.clone());\n@@ -1269,7 +1268,7 @@ mod test {\n                     let fail = (varref.segments.len() == 1)\n                         && (mtwt_resolve(varref.segments[0].identifier) == binding_name);\n                     // temp debugging:\n-                    if (fail) {\n+                    if fail {\n                         println!(\"failure on test {}\",test_idx);\n                         println!(\"text of test case: \\\"{}\\\"\", teststr);\n                         println!(\"\");"}, {"sha": "297ec6acf51052d9008ba418ab63e82aacca4bb9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "patch": "@@ -861,15 +861,17 @@ pub fn noop_fold_stmt<T: Folder>(s: &Stmt, folder: &mut T) -> SmallVector<@Stmt>\n \n #[cfg(test)]\n mod test {\n+    use std::io;\n     use ast;\n     use util::parser_testing::{string_to_crate, matches_codepattern};\n     use parse::token;\n     use print::pprust;\n     use super::*;\n \n     // this version doesn't care about getting comments or docstrings in.\n-    fn fake_print_crate(s: &mut pprust::State, crate: &ast::Crate) {\n-        pprust::print_mod(s, &crate.module, crate.attrs);\n+    fn fake_print_crate(s: &mut pprust::State,\n+                        crate: &ast::Crate) -> io::IoResult<()> {\n+        pprust::print_mod(s, &crate.module, crate.attrs)\n     }\n \n     // change every identifier to \"zz\""}, {"sha": "aa22f47221bfa629044aad5135bcb1e28775b20f", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7c5e0b724d8318a7e7762e483c225e8a7420a1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=2a7c5e0b724d8318a7e7762e483c225e8a7420a1", "patch": "@@ -101,30 +101,30 @@ pub fn matches_codepattern(a : &str, b : &str) -> bool {\n     let mut idx_a = 0;\n     let mut idx_b = 0;\n     loop {\n-        if (idx_a == a.len() && idx_b == b.len()) {\n+        if idx_a == a.len() && idx_b == b.len() {\n             return true;\n         }\n-        else if (idx_a == a.len()) {return false;}\n-        else if (idx_b == b.len()) {\n+        else if idx_a == a.len() {return false;}\n+        else if idx_b == b.len() {\n             // maybe the stuff left in a is all ws?\n-            if (is_whitespace(a.char_at(idx_a))) {\n-                return (scan_for_non_ws_or_end(a,idx_a) == a.len());\n+            if is_whitespace(a.char_at(idx_a)) {\n+                return scan_for_non_ws_or_end(a,idx_a) == a.len();\n             } else {\n                 return false;\n             }\n         }\n         // ws in both given and pattern:\n-        else if (is_whitespace(a.char_at(idx_a))\n-           && is_whitespace(b.char_at(idx_b))) {\n+        else if is_whitespace(a.char_at(idx_a))\n+           && is_whitespace(b.char_at(idx_b)) {\n             idx_a = scan_for_non_ws_or_end(a,idx_a);\n             idx_b = scan_for_non_ws_or_end(b,idx_b);\n         }\n         // ws in given only:\n-        else if (is_whitespace(a.char_at(idx_a))) {\n+        else if is_whitespace(a.char_at(idx_a)) {\n             idx_a = scan_for_non_ws_or_end(a,idx_a);\n         }\n         // *don't* silently eat ws in expected only.\n-        else if (a.char_at(idx_a) == b.char_at(idx_b)) {\n+        else if a.char_at(idx_a) == b.char_at(idx_b) {\n             idx_a += 1;\n             idx_b += 1;\n         }"}]}