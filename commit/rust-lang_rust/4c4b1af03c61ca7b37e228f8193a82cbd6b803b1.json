{"sha": "4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNGIxYWYwM2M2MWNhN2IzN2UyMjhmODE5M2E4MmNiZDZiODAzYjE=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-13T15:45:58Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-13T15:45:58Z"}, "message": "Merge pull request #928 from oli-obk/unnecessary_operation\n\nadd a companion lint to `no_effect` with suggestions for partially (in-)effective statements", "tree": {"sha": "510c23ea858a88c776dfab5d8f1cdd3b59dd200d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510c23ea858a88c776dfab5d8f1cdd3b59dd200d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "html_url": "https://github.com/rust-lang/rust/commit/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecca55cd9f84ffb9097bbcbb0904b686e225b211", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecca55cd9f84ffb9097bbcbb0904b686e225b211", "html_url": "https://github.com/rust-lang/rust/commit/ecca55cd9f84ffb9097bbcbb0904b686e225b211"}, {"sha": "1e897f1552aa490f821b7ebef949fa6ee873a04f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e897f1552aa490f821b7ebef949fa6ee873a04f", "html_url": "https://github.com/rust-lang/rust/commit/1e897f1552aa490f821b7ebef949fa6ee873a04f"}], "stats": {"total": 208, "additions": 161, "deletions": 47}, "files": [{"sha": "6e27b3909d33c131a6ecb47371d3f238202f4947", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -215,6 +215,7 @@ All notable changes to this project will be documented in this file.\n [`unicode_not_nfc`]: https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc\n [`unit_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#unit_cmp\n [`unnecessary_mut_passed`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed\n+[`unnecessary_operation`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation\n [`unneeded_field_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern\n [`unsafe_removed_from_name`]: https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name\n [`unstable_as_mut_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice"}, {"sha": "c7a839dc8031855cac70d03d9cd7dde474e47232", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 149 lints included in this crate:\n+There are 150 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -154,6 +154,7 @@ name\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                   | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n+[unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                       | warn    | outer expressions with no effect\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | Struct fields are bound to a wildcard instead of using `..`\n [unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                 | warn    | unsafe removed from name\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop"}, {"sha": "f1c815f0df0451d228639b5226f6c5d74e7ffff6", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -519,6 +519,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n         no_effect::NO_EFFECT,\n+        no_effect::UNNECESSARY_OPERATION,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,"}, {"sha": "593a6c4ad591687bf353a33943b4838187acb915", "filename": "src/no_effect.rs", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -1,7 +1,8 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, PathResolution};\n use rustc::hir::{Expr, Expr_, Stmt, StmtSemi};\n-use utils::{in_macro, span_lint};\n+use utils::{in_macro, span_lint, snippet_opt, span_lint_and_then};\n+use std::ops::Deref;\n \n /// **What it does:** This lint checks for statements which have no effect.\n ///\n@@ -16,6 +17,19 @@ declare_lint! {\n     \"statements with no effect\"\n }\n \n+/// **What it does:** This lint checks for expression statements that can be reduced to a sub-expression\n+///\n+/// **Why is this bad?** Expressions by themselves often have no side-effects. Having such expressions reduces redability.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `compute_array()[0];`\n+declare_lint! {\n+    pub UNNECESSARY_OPERATION,\n+    Warn,\n+    \"outer expressions with no effect\"\n+}\n+\n fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n     if in_macro(cx, expr.span) {\n         return false;\n@@ -68,7 +82,7 @@ pub struct NoEffectPass;\n \n impl LintPass for NoEffectPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NO_EFFECT)\n+        lint_array!(NO_EFFECT, UNNECESSARY_OPERATION)\n     }\n }\n \n@@ -77,7 +91,65 @@ impl LateLintPass for NoEffectPass {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if has_no_effect(cx, expr) {\n                 span_lint(cx, NO_EFFECT, stmt.span, \"statement with no effect\");\n+            } else if let Some(reduced) = reduce_expression(cx, expr) {\n+                let mut snippet = String::new();\n+                for e in reduced {\n+                    if in_macro(cx, e.span) {\n+                        return;\n+                    }\n+                    if let Some(snip) = snippet_opt(cx, e.span) {\n+                        snippet.push_str(&snip);\n+                        snippet.push(';');\n+                    } else {\n+                        return;\n+                    }\n+                }\n+                span_lint_and_then(cx, UNNECESSARY_OPERATION, stmt.span, \"statement can be reduced\", |db| {\n+                    db.span_suggestion(stmt.span, \"replace it with\", snippet);\n+                });\n+            }\n+        }\n+    }\n+}\n+\n+\n+fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Expr>> {\n+    if in_macro(cx, expr.span) {\n+        return None;\n+    }\n+    match expr.node {\n+        Expr_::ExprIndex(ref a, ref b) |\n+        Expr_::ExprBinary(_, ref a, ref b) => Some(vec![&**a, &**b]),\n+        Expr_::ExprVec(ref v) |\n+        Expr_::ExprTup(ref v) => Some(v.iter().map(Deref::deref).collect()),\n+        Expr_::ExprRepeat(ref inner, _) |\n+        Expr_::ExprCast(ref inner, _) |\n+        Expr_::ExprType(ref inner, _) |\n+        Expr_::ExprUnary(_, ref inner) |\n+        Expr_::ExprField(ref inner, _) |\n+        Expr_::ExprTupField(ref inner, _) |\n+        Expr_::ExprAddrOf(_, ref inner) |\n+        Expr_::ExprBox(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        Expr_::ExprStruct(_, ref fields, ref base) => Some(fields.iter().map(|f| &f.expr).chain(base).map(Deref::deref).collect()),\n+        Expr_::ExprCall(ref callee, ref args) => {\n+            match cx.tcx.def_map.borrow().get(&callee.id).map(PathResolution::full_def) {\n+                Some(Def::Struct(..)) |\n+                Some(Def::Variant(..)) => Some(args.iter().map(Deref::deref).collect()),\n+                _ => None,\n+            }\n+        }\n+        Expr_::ExprBlock(ref block) => {\n+            if block.stmts.is_empty() {\n+                block.expr.as_ref().and_then(|e| if e.span == expr.span {\n+                    // in case of compiler-inserted signaling blocks\n+                    reduce_expression(cx, e)\n+                } else {\n+                    Some(vec![e])\n+                })\n+            } else {\n+                None\n             }\n         }\n+        _ => None,\n     }\n }"}, {"sha": "f1e4a692800c083f5d353637b3025862d6316a79", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n fn main() {\n     const Z: u32 = 0;\n "}, {"sha": "5479c55e11e030ae824155757a22b023746dd6ec", "filename": "tests/compile-fail/arithmetic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farithmetic.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(integer_arithmetic, float_arithmetic)]\n-#![allow(unused, shadow_reuse, shadow_unrelated, no_effect)]\n+#![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]\n fn main() {\n     let i = 1i32;\n     1 + i; //~ERROR integer arithmetic detected\n@@ -11,17 +11,17 @@ fn main() {\n     i / 2; // no error, this is part of the expression in the preceding line\n     i - 2 + 2 - i; //~ERROR integer arithmetic detected\n     -i; //~ERROR integer arithmetic detected\n-    \n+\n     i & 1; // no wrapping\n-    i | 1; \n+    i | 1;\n     i ^ 1;\n     i >> 1;\n     i << 1;\n-    \n+\n     let f = 1.0f32;\n-    \n+\n     f * 2.0; //~ERROR floating-point arithmetic detected\n-    \n+\n     1.0 + f; //~ERROR floating-point arithmetic detected\n     f * 2.0; //~ERROR floating-point arithmetic detected\n     f / 2.0; //~ERROR floating-point arithmetic detected"}, {"sha": "dacb72ee8ac3e27624d4d44109018f6ad2b87fa8", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(indexing_slicing)]\n #![deny(out_of_bounds_indexing)]\n-#![allow(no_effect)]\n+#![allow(no_effect, unnecessary_operation)]\n \n fn main() {\n     let x = [1,2,3,4];"}, {"sha": "79772840c73dbfb8977482857f8e0cb901acda79", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -5,7 +5,7 @@ const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n #[deny(bad_bit_mask)]\n-#[allow(ineffective_bit_mask, identity_op, no_effect)]\n+#[allow(ineffective_bit_mask, identity_op, no_effect, unnecessary_operation)]\n fn main() {\n     let x = 5;\n \n@@ -45,7 +45,7 @@ fn main() {\n }\n \n #[deny(ineffective_bit_mask)]\n-#[allow(bad_bit_mask, no_effect)]\n+#[allow(bad_bit_mask, no_effect, unnecessary_operation)]\n fn ineffective() {\n     let x = 5;\n "}, {"sha": "d0ea5f40789d934167a6131c8eddd7445910e1ec", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n-#[allow(no_effect)]\n+#[allow(no_effect, unnecessary_operation)]\n fn main() {\n     // Test cast_precision_loss\n     1i32 as f32; //~ERROR casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)"}, {"sha": "8d173665a2429fb241ebe4159063fefb112049fb", "filename": "tests/compile-fail/cmp_nan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_nan.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cmp_nan)]\n-#[allow(float_cmp, no_effect)]\n+#[allow(float_cmp, no_effect, unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n     x == std::f32::NAN; //~ERROR doomed comparison with NAN"}, {"sha": "f7c7824e9d1cddb1c326c9f3a6028ddc521bd08f", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cmp_owned)]\n+#[allow(unnecessary_operation)]\n fn main() {\n     fn with_to_string(x : &str) {\n         x != \"foo\".to_string();"}, {"sha": "bbdd73dc0c8f40a07d78a175ec1f87c1d02e7b14", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin, inclusive_range_syntax)]\n #![plugin(clippy)]\n \n-#![allow(dead_code, no_effect)]\n+#![allow(dead_code, no_effect, unnecessary_operation)]\n #![allow(let_and_return)]\n #![allow(needless_return)]\n #![allow(unused_variables)]"}, {"sha": "768eadd00eba26b32a4b4944ce649204e5ce9446", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -3,7 +3,7 @@\n \n #[deny(eq_op)]\n #[allow(identity_op)]\n-#[allow(no_effect, unused_variables)]\n+#[allow(no_effect, unused_variables, unnecessary_operation)]\n #[deny(nonminimal_bool)]\n fn main() {\n     // simple values and comparisons"}, {"sha": "85df1ded5ace7b7f35272b54825b676265821cdc", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(float_cmp)]\n-#![allow(unused, no_effect)]\n+#![allow(unused, no_effect, unnecessary_operation)]\n \n use std::ops::Add;\n "}, {"sha": "329c4a6bbf465251378efef0c21645b27d6c0098", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -5,7 +5,7 @@ const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n-#[allow(eq_op, no_effect)]\n+#[allow(eq_op, no_effect, unnecessary_operation)]\n #[deny(identity_op)]\n fn main() {\n     let x = 0;"}, {"sha": "9635f3afede968a3eeee3d3f000123d2b1232e92", "filename": "tests/compile-fail/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(invalid_upcast_comparisons)]\n-#![allow(unused, eq_op, no_effect)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n fn main() {\n     let zero: u32 = 0;\n     let u8_max: u8 = 255;"}, {"sha": "88a1e7c4cf24e1f3d84b0cb4229efdfeefc7c0a0", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -341,6 +341,7 @@ struct MyErrorWithParam<T> {\n     x: T\n }\n \n+#[allow(unnecessary_operation)]\n fn starts_with() {\n     \"\".chars().next() == Some(' ');\n     //~^ ERROR starts_with"}, {"sha": "496c1c60d5f11f87bd0bbf482770dc67635addf6", "filename": "tests/compile-fail/modulo_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodulo_one.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(modulo_one)]\n-#![allow(no_effect)]\n+#![allow(no_effect, unnecessary_operation)]\n \n fn main() {\n     10 % 1; //~ERROR any number modulo 1 will be 0"}, {"sha": "865574eaec02b4fc85ab336f0ab366927b973844", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(unused, no_effect)]\n+#![allow(unused, no_effect, unnecessary_operation)]\n \n //#![plugin(regex_macros)]\n //extern crate regex;"}, {"sha": "90c63c5f2632e6105bd698968b169adb8270dc6a", "filename": "tests/compile-fail/neg_multiply.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneg_multiply.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,23 +2,23 @@\n \n #![plugin(clippy)]\n #![deny(neg_multiply)]\n-#![allow(no_effect)]\n+#![allow(no_effect, unnecessary_operation)]\n \n use std::ops::Mul;\n \n struct X;\n \n impl Mul<isize> for X {\n     type Output = X;\n-    \n+\n     fn mul(self, _r: isize) -> Self {\n         self\n     }\n }\n \n impl Mul<X> for isize {\n     type Output = X;\n-    \n+\n     fn mul(self, _r: X) -> X {\n         X\n     }\n@@ -34,7 +34,7 @@ fn main() {\n     //~^ ERROR Negation by multiplying with -1\n \n     -1 * -1; // should be ok\n-    \n+\n     X * -1; // should be ok\n     -1 * X; // should also be ok\n }"}, {"sha": "ce6daa8d5625247afc576f90c04c820e7b95329c", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin, box_syntax, inclusive_range_syntax)]\n #![plugin(clippy)]\n \n-#![deny(no_effect)]\n+#![deny(no_effect, unnecessary_operation)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n \n@@ -50,22 +50,59 @@ fn main() {\n \n     // Do not warn\n     get_number();\n-    Tuple(get_number());\n-    Struct { field: get_number() };\n-    Struct { ..get_struct() };\n-    Enum::Tuple(get_number());\n-    Enum::Struct { field: get_number() };\n-    5 + get_number();\n-    *&get_number();\n-    &get_number();\n-    (5, 6, get_number());\n-    box get_number();\n-    get_number()..;\n-    ..get_number();\n-    5..get_number();\n-    [42, get_number()];\n-    [42, 55][get_number() as usize];\n-    (42, get_number()).1;\n-    [get_number(); 55];\n-    [42; 55][get_number() as usize];\n+\n+    Tuple(get_number()); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    Struct { field: get_number() }; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    Struct { ..get_struct() }; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    Enum::Tuple(get_number()); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    Enum::Struct { field: get_number() }; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    5 + get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION 5;get_number();\n+    *&get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION &get_number();\n+    &get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    (5, 6, get_number()); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION 5;6;get_number();\n+    box get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    get_number()..; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    ..get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    5..get_number(); //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION 5;get_number();\n+    [42, get_number()]; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION 42;get_number();\n+    [42, 55][get_number() as usize]; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION [42, 55];get_number() as usize;\n+    (42, get_number()).1; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION 42;get_number();\n+    [get_number(); 55]; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n+    [42; 55][get_number() as usize]; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION [42; 55];get_number() as usize;\n }"}, {"sha": "13095ee6bfb4191e547f76c65cce4c142187fcd9", "filename": "tests/compile-fail/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4b1af03c61ca7b37e228f8193a82cbd6b803b1/tests%2Fcompile-fail%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funit_cmp.rs?ref=4c4b1af03c61ca7b37e228f8193a82cbd6b803b1", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(unit_cmp)]\n-#![allow(no_effect)]\n+#![allow(no_effect, unnecessary_operation)]\n \n #[derive(PartialEq)]\n pub struct ContainsUnit(()); // should be fine"}]}