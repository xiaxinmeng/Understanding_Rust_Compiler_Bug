{"sha": "27e0f7a8864ebd64eda4737f74b1324a98da2e95", "node_id": "C_kwDOAAsO6NoAKDI3ZTBmN2E4ODY0ZWJkNjRlZGE0NzM3Zjc0YjEzMjRhOThkYTJlOTU", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-23T20:35:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-23T20:35:47Z"}, "message": "rename IfEqBound to IfEq", "tree": {"sha": "b4b038766d8f8ab2068a4da29595304c8219b2a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b038766d8f8ab2068a4da29595304c8219b2a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e0f7a8864ebd64eda4737f74b1324a98da2e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e0f7a8864ebd64eda4737f74b1324a98da2e95", "html_url": "https://github.com/rust-lang/rust/commit/27e0f7a8864ebd64eda4737f74b1324a98da2e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e0f7a8864ebd64eda4737f74b1324a98da2e95/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893b919e64b59c04dbd7c88e74ba138ff8e22a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/893b919e64b59c04dbd7c88e74ba138ff8e22a64", "html_url": "https://github.com/rust-lang/rust/commit/893b919e64b59c04dbd7c88e74ba138ff8e22a64"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d45cdc0c990f796de40d3ff947670b87b7fe457a", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=27e0f7a8864ebd64eda4737f74b1324a98da2e95", "patch": "@@ -1191,8 +1191,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"eval_verify_bound(lower_bound={:?}, verify_bound={:?})\", lower_bound, verify_bound);\n \n         match verify_bound {\n-            VerifyBound::IfEqBound(verify_if_eq_b) => {\n-                self.eval_if_eq_bound(infcx, param_env, generic_ty, lower_bound, *verify_if_eq_b)\n+            VerifyBound::IfEq(verify_if_eq_b) => {\n+                self.eval_if_eq(infcx, param_env, generic_ty, lower_bound, *verify_if_eq_b)\n             }\n \n             VerifyBound::IsEmpty => {\n@@ -1229,7 +1229,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n-    fn eval_if_eq_bound(\n+    fn eval_if_eq(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -1239,7 +1239,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> bool {\n         let generic_ty = self.normalize_to_scc_representatives(infcx.tcx, generic_ty);\n         let verify_if_eq_b = self.normalize_to_scc_representatives(infcx.tcx, verify_if_eq_b);\n-        match test_type_match::extract_verify_if_eq_bound(\n+        match test_type_match::extract_verify_if_eq(\n             infcx.tcx,\n             param_env,\n             &verify_if_eq_b,"}, {"sha": "9fa374a53fcaef4ce37187c4c98f8d31e063e786", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=27e0f7a8864ebd64eda4737f74b1324a98da2e95", "patch": "@@ -822,8 +822,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         min: ty::Region<'tcx>,\n     ) -> bool {\n         match bound {\n-            VerifyBound::IfEqBound(verify_if_eq_b) => {\n-                match test_type_match::extract_verify_if_eq_bound(\n+            VerifyBound::IfEq(verify_if_eq_b) => {\n+                match test_type_match::extract_verify_if_eq(\n                     self.tcx(),\n                     self.param_env,\n                     verify_if_eq_b,"}, {"sha": "efb889cdefbd3507f87335d2bef583f462dc013f", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=27e0f7a8864ebd64eda4737f74b1324a98da2e95", "patch": "@@ -35,7 +35,7 @@ use crate::infer::region_constraints::VerifyIfEq;\n /// very late in inference and hence cannot make use of the normal inference\n /// machinery.\n #[tracing::instrument(level = \"Debug\", skip(tcx, param_env))]\n-pub fn extract_verify_if_eq_bound<'tcx>(\n+pub fn extract_verify_if_eq<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     verify_if_eq_b: &ty::Binder<'tcx, VerifyIfEq<'tcx>>,"}, {"sha": "ce3da267b00f5f54e9472e90336d4c0b04050b41", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=27e0f7a8864ebd64eda4737f74b1324a98da2e95", "patch": "@@ -173,7 +173,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                     VerifyBound::OutlivedBy(r)\n                 } else {\n                     let verify_if_eq_b = binder.map_bound(|ty::OutlivesPredicate(ty, bound)| VerifyIfEq { ty, bound });\n-                    VerifyBound::IfEqBound(verify_if_eq_b)\n+                    VerifyBound::IfEq(verify_if_eq_b)\n                 }\n             });\n "}, {"sha": "f93c9a31be67518c722e406eec564e7c01954377", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f7a8864ebd64eda4737f74b1324a98da2e95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=27e0f7a8864ebd64eda4737f74b1324a98da2e95", "patch": "@@ -228,7 +228,7 @@ pub enum VerifyBound<'tcx> {\n     ///     }\n     /// }\n     /// ```\n-    IfEqBound(ty::Binder<'tcx, VerifyIfEq<'tcx>>),\n+    IfEq(ty::Binder<'tcx, VerifyIfEq<'tcx>>),\n \n     /// Given a region `R`, expands to the function:\n     ///\n@@ -807,7 +807,7 @@ impl<'tcx> GenericKind<'tcx> {\n impl<'tcx> VerifyBound<'tcx> {\n     pub fn must_hold(&self) -> bool {\n         match self {\n-            VerifyBound::IfEqBound(..) => false,\n+            VerifyBound::IfEq(..) => false,\n             VerifyBound::OutlivedBy(re) => re.is_static(),\n             VerifyBound::IsEmpty => false,\n             VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),\n@@ -817,7 +817,7 @@ impl<'tcx> VerifyBound<'tcx> {\n \n     pub fn cannot_hold(&self) -> bool {\n         match self {\n-            VerifyBound::IfEqBound(..) => false,\n+            VerifyBound::IfEq(..) => false,\n             VerifyBound::IsEmpty => false,\n             VerifyBound::OutlivedBy(_) => false,\n             VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),"}]}