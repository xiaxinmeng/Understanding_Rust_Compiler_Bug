{"sha": "b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MGM2NzczYzJmMWE1YTM0OTkwMDA0Y2JlOWIyOWE3NTc1ZTJmN2U=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-30T12:38:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-30T12:38:38Z"}, "message": "Box ast::path values\n\nIt seems inefficient to copy them around. Let's measure whether that's actually\n> the case", "tree": {"sha": "e806179dd1c8f102bbc44d7268e3e855f7b97333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e806179dd1c8f102bbc44d7268e3e855f7b97333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "html_url": "https://github.com/rust-lang/rust/commit/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "586a685eecd7786679e93cf0040a0558f47877da", "url": "https://api.github.com/repos/rust-lang/rust/commits/586a685eecd7786679e93cf0040a0558f47877da", "html_url": "https://github.com/rust-lang/rust/commit/586a685eecd7786679e93cf0040a0558f47877da"}], "stats": {"total": 205, "additions": 102, "deletions": 103}, "files": [{"sha": "e520e68b93b7deb1aa42336afb072dc758e1f730", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -235,17 +235,17 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::ty {\n     let test_fn_ty: ast::ty = nospan(\n         ast::ty_path(\n-            nospan({\n+            @nospan({\n                 global: false,\n                 idents: [\"std\", \"test\", \"default_test_fn\"],\n                 types: []\n             }),\n             cx.next_node_id()));\n \n-    let test_desc_ty_path: ast::path =\n-        nospan({global: false,\n-                idents: [\"std\", \"test\", \"test_desc\"],\n-                types: [@test_fn_ty]});\n+    let test_desc_ty_path =\n+        @nospan({global: false,\n+                 idents: [\"std\", \"test\", \"test_desc\"],\n+                 types: [@test_fn_ty]});\n \n     let test_desc_ty: ast::ty =\n         nospan(ast::ty_path(test_desc_ty_path, cx.next_node_id()));\n@@ -284,7 +284,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let name_field: ast::field =\n         nospan({mut: ast::imm, ident: \"name\", expr: @name_expr});\n \n-    let fn_path: ast::path = nospan({global: false, idents: path, types: []});\n+    let fn_path = @nospan({global: false, idents: path, types: []});\n \n     let fn_expr: ast::expr =\n         {id: cx.next_node_id(),\n@@ -414,17 +414,17 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n \n     // Get the args passed to main so we can pass the to test_main\n-    let args_path: ast::path =\n-        nospan({global: false, idents: [\"args\"], types: []});\n+    let args_path =\n+        @nospan({global: false, idents: [\"args\"], types: []});\n \n     let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n \n     let args_path_expr: ast::expr =\n         {id: cx.next_node_id(), node: args_path_expr_, span: dummy_sp()};\n \n     // Call __test::test to generate the vector of test_descs\n-    let test_path: ast::path =\n-        nospan({global: false, idents: [\"tests\"], types: []});\n+    let test_path =\n+        @nospan({global: false, idents: [\"tests\"], types: []});\n \n     let test_path_expr_: ast::expr_ = ast::expr_path(test_path);\n \n@@ -437,10 +437,10 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n         {id: cx.next_node_id(), node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n-    let test_main_path: ast::path =\n-        nospan({global: false,\n-                idents: [\"std\", \"test\", \"test_main\"],\n-                types: []});\n+    let test_main_path =\n+        @nospan({global: false,\n+                 idents: [\"std\", \"test\", \"test_main\"],\n+                 types: []});\n \n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n "}, {"sha": "40f5fc64c7ba185f65944e73ee3471d56541ac69", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -83,7 +83,7 @@ fn parse_ty_constrs(st: @pstate, sd: str_def) -> [@ty::type_constr] {\n         do  {\n             next(st);\n             let one: @ty::type_constr =\n-                parse_constr::<path>(st, sd, parse_ty_constr_arg);\n+                parse_constr::<@path>(st, sd, parse_ty_constr_arg);\n             rslt += [one];\n         } while peek(st) as char == ';'\n       }\n@@ -92,7 +92,7 @@ fn parse_ty_constrs(st: @pstate, sd: str_def) -> [@ty::type_constr] {\n     ret rslt;\n }\n \n-fn parse_path(st: @pstate, sd: str_def) -> ast::path {\n+fn parse_path(st: @pstate, sd: str_def) -> @ast::path {\n     let idents: [ast::ident] = [];\n     fn is_last(c: char) -> bool { ret c == '(' || c == ':'; }\n     idents += [parse_ident_(st, sd, is_last)];\n@@ -101,8 +101,8 @@ fn parse_path(st: @pstate, sd: str_def) -> ast::path {\n           ':' { next(st); next(st); }\n           c {\n             if c == '(' {\n-                ret respan(ast_util::dummy_sp(),\n-                           {global: false, idents: idents, types: []});\n+                ret @respan(ast_util::dummy_sp(),\n+                            {global: false, idents: idents, types: []});\n             } else { idents += [parse_ident_(st, sd, is_last)]; }\n           }\n         }\n@@ -138,7 +138,7 @@ fn parse_constr_arg(st: @pstate, _sd: str_def) -> ast::fn_constr_arg {\n }\n \n fn parse_ty_constr_arg(st: @pstate, sd: str_def) ->\n-   ast::constr_arg_general_<path> {\n+   ast::constr_arg_general_<@path> {\n     alt peek(st) as char {\n       '*' { st.pos += 1u; ret ast::carg_base; }\n       c { ret ast::carg_ident(parse_path(st, sd)); }\n@@ -149,9 +149,9 @@ fn parse_constr<copy T>(st: @pstate, sd: str_def, pser: arg_parser<T>) ->\n    @ty::constr_general<T> {\n     let sp = ast_util::dummy_sp(); // FIXME: use a real span\n     let args: [@sp_constr_arg<T>] = [];\n-    let pth: path = parse_path(st, sd);\n+    let pth = parse_path(st, sd);\n     let ignore: char = next(st) as char;\n-    assert (ignore as char == '(');\n+    assert (ignore == '(');\n     let def = parse_def(st, sd);\n     let an_arg: constr_arg_general_<T>;\n     do  {"}, {"sha": "5cd05a833f4e583204bc6e84f9b85ee2000df39b", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -16,8 +16,7 @@ tag copied { not_allowed; copied; not_copied; }\n tag invalid_reason { overwritten; val_taken; }\n type invalid = {reason: invalid_reason,\n                 node_id: node_id,\n-                sp: span, path:\n-                ast::path};\n+                sp: span, path: @ast::path};\n \n tag unsafe_ty { contains(ty::t); mut_contains(ty::t); }\n \n@@ -374,7 +373,7 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n     visit::visit_block(blk, {bs: new_bs with sc}, v);\n }\n \n-fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n+fn check_var(cx: ctx, ex: @ast::expr, p: @ast::path, id: ast::node_id,\n              assign: bool, sc: scope) {\n     let def = cx.tcx.def_map.get(id);\n     if !def_is_local(def, false) { ret; }\n@@ -445,7 +444,7 @@ fn check_loop(cx: ctx, sc: scope, checker: block()) {\n     *sc.invalid = new_invalid;\n }\n \n-fn test_scope(cx: ctx, sc: scope, b: binding, p: ast::path) {\n+fn test_scope(cx: ctx, sc: scope, b: binding, p: @ast::path) {\n     let prob = find_invalid(b.node_id, *sc.invalid);\n     alt b.root_var {\n       some(dn) {"}, {"sha": "1807085ffc47d9deccf738402dec3f5d219c20d5", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -44,7 +44,7 @@ tag scope {\n type scopes = list<scope>;\n \n tag import_state {\n-    todo(ast::node_id, ast::ident, [ast::ident], codemap::span, scopes);\n+    todo(ast::node_id, ast::ident, @[ast::ident], codemap::span, scopes);\n     resolving(span);\n     resolved(option::t<def>, /* value */\n              option::t<def>, /* type */\n@@ -172,7 +172,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n             for ident in idents {\n                 e.imports.insert(ident.node.id,\n                                  todo(ident.node.id, ident.node.name,\n-                                      mod_path + [ident.node.name],\n+                                      @(*mod_path + [ident.node.name]),\n                                       ident.span, sc));\n             }\n           }\n@@ -214,7 +214,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n         alt vi.node {\n           //if it really is a glob import, that is\n           ast::view_item_import_glob(path, _) {\n-            let imp = follow_import(*e, sc, path, vi.span);\n+            let imp = follow_import(*e, sc, *path, vi.span);\n             if option::is_some(imp) {\n                 let glob = {def: option::get(imp), item: vi};;\n                 alt list::head(sc) {\n@@ -243,7 +243,7 @@ fn resolve_imports(e: env) {\n     e.imports.values {|v|\n         alt v {\n           todo(node_id, name, path, span, scopes) {\n-            resolve_import(e, local_def(node_id), name, path, span, scopes);\n+            resolve_import(e, local_def(node_id), name, *path, span, scopes);\n           }\n           resolved(_, _, _, _, _) { }\n         }\n@@ -304,7 +304,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           _ { }\n         }\n     }\n-    fn walk_constr(e: @env, p: ast::path, sp: span, id: node_id, sc: scopes,\n+    fn walk_constr(e: @env, p: @ast::path, sp: span, id: node_id, sc: scopes,\n                    _v: vt<scopes>) {\n         maybe_insert(e, id, lookup_path_strict(*e, sc, sp, p.node, ns_value));\n     }\n@@ -966,7 +966,7 @@ fn found_view_item(e: env, vi: @ast::view_item) -> option::t<def> {\n fn lookup_import(e: env, defid: def_id, ns: namespace) -> option::t<def> {\n     alt e.imports.get(defid.node) {\n       todo(node_id, name, path, span, scopes) {\n-        resolve_import(e, local_def(node_id), name, path, span, scopes);\n+        resolve_import(e, local_def(node_id), name, *path, span, scopes);\n         ret lookup_import(e, defid, ns);\n       }\n       resolving(sp) {"}, {"sha": "237b00899536f19673aa9e39651291cd95ca9809", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -2967,7 +2967,7 @@ fn trans_local_var(cx: @block_ctxt, def: ast::def) -> lval_result {\n     }\n }\n \n-fn trans_path(cx: @block_ctxt, p: ast::path, id: ast::node_id)\n+fn trans_path(cx: @block_ctxt, p: @ast::path, id: ast::node_id)\n     -> lval_maybe_callee {\n     ret trans_var(cx, p.span, bcx_tcx(cx).def_map.get(id), id);\n }"}, {"sha": "b910dce220f744e5d647e44e735133bafec3b281", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -194,7 +194,7 @@ tag constraint {\n \n     // FIXME: really only want it to be mutable during collect_locals.\n     // freeze it after that.\n-    cpred(path, @mutable [pred_args]);\n+    cpred(@path, @mutable [pred_args]);\n }\n \n // An ninit variant has a node_id because it refers to a local var.\n@@ -204,7 +204,7 @@ tag constraint {\n // and give ninit a constraint saying it's local.\n tag tsconstr {\n     ninit(node_id, ident);\n-    npred(path, def_id, [@constr_arg_use]);\n+    npred(@path, def_id, [@constr_arg_use]);\n }\n \n type sp_constr = spanned<tsconstr>;\n@@ -773,7 +773,7 @@ fn replace(subst: subst, d: pred_args) -> [constr_arg_general_<inst>] {\n     ret rslt;\n }\n \n-fn path_to_ident(cx: ty::ctxt, p: path) -> ident {\n+fn path_to_ident(cx: ty::ctxt, p: @path) -> ident {\n     alt vec::last(p.node.idents) {\n       none. { cx.sess.span_fatal(p.span, \"Malformed path\"); }\n       some(i) { ret i; }"}, {"sha": "d0ac63704d7823bfa642499f47c4689b21e46c15", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -191,7 +191,7 @@ fn join_then_else(fcx: fn_ctxt, antec: @expr, conseq: blk,\n }\n \n fn gen_if_local(fcx: fn_ctxt, lhs: @expr, rhs: @expr, larger_id: node_id,\n-                new_var: node_id, pth: path) {\n+                new_var: node_id, pth: @path) {\n     alt node_id_to_def(fcx.ccx, new_var) {\n       some(d) {\n         alt d {"}, {"sha": "ed84520a6b9ca66d67265bc7a8597106889d8099", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -27,7 +27,7 @@ fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     }\n }\n \n-fn handle_move_or_copy(fcx: fn_ctxt, post: poststate, rhs_path: path,\n+fn handle_move_or_copy(fcx: fn_ctxt, post: poststate, rhs_path: @path,\n                        rhs_id: node_id, instlhs: inst, init_op: init_op) {\n     forbid_upvar(fcx, rhs_id, rhs_path.span, op_to_oper_ty(init_op));\n "}, {"sha": "5a290f7efc6d8722b7c4ab0eb1dbfe5412d67d0d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -274,7 +274,7 @@ tag sty {\n // In the middle end, constraints have a def_id attached, referring\n // to the definition of the operator in the constraint.\n type constr_general<ARG> = spanned<constr_general_<ARG, def_id>>;\n-type type_constr = constr_general<path>;\n+type type_constr = constr_general<@path>;\n type constr = constr_general<uint>;\n \n // Data structures used in type unification"}, {"sha": "fc0a4de5245daa535f0174d01124679002d9970a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -130,8 +130,9 @@ fn ty_param_kinds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n \n // Instantiates the given path, which must refer to an item with the given\n // number of type parameters and type.\n-fn instantiate_path(fcx: @fn_ctxt, pth: ast::path, tpt: ty_param_kinds_and_ty,\n-                    sp: span) -> ty_param_substs_opt_and_ty {\n+fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n+                    tpt: ty_param_kinds_and_ty, sp: span)\n+    -> ty_param_substs_opt_and_ty {\n     let ty_param_count = vec::len(tpt.kinds);\n     let bind_result =\n         bind_params_in_type(sp, fcx.ccx.tcx, bind next_ty_var_id(fcx), tpt.ty,\n@@ -2586,7 +2587,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n                                ast::def_arg(local_def(args[i].id),\n                                             args[i].mode));\n                           {id: arg_occ_node_id,\n-                           node: ast::expr_path(respan(a.span, p)),\n+                           node: ast::expr_path(@respan(a.span, p)),\n                            span: a.span}\n                       } else {\n                           fcx.ccx.tcx.sess.span_bug(a.span,"}, {"sha": "9c7b9ef422de9be05f71285e4469eded86d16cb8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -61,7 +61,7 @@ tag crate_directive_ {\n     cdir_src_mod(ident, [attribute]);\n     cdir_dir_mod(ident, [@crate_directive], [attribute]);\n     cdir_view_item(@view_item);\n-    cdir_syntax(path);\n+    cdir_syntax(@path);\n }\n \n type crate_directive = spanned<crate_directive_>;\n@@ -87,7 +87,7 @@ tag pat_ {\n     pat_wild;\n     pat_bind(ident);\n     pat_lit(@lit);\n-    pat_tag(path, [@pat]);\n+    pat_tag(@path, [@pat]);\n     pat_rec([field_pat], bool);\n     pat_tup([@pat]);\n     pat_box(@pat);\n@@ -208,7 +208,7 @@ tag expr_ {\n     expr_assign_op(binop, @expr, @expr);\n     expr_field(@expr, ident);\n     expr_index(@expr, @expr);\n-    expr_path(path);\n+    expr_path(@path);\n     expr_fail(option::t<@expr>);\n     expr_break;\n     expr_cont;\n@@ -241,7 +241,7 @@ tag blk_sort {\n type mac = spanned<mac_>;\n \n tag mac_ {\n-    mac_invoc(path, @expr, option::t<str>);\n+    mac_invoc(@path, @expr, option::t<str>);\n     mac_embed_type(@ty);\n     mac_embed_block(blk);\n     mac_ellipsis;\n@@ -328,7 +328,7 @@ tag ty_ {\n     ty_fn(proto, [ty_arg], @ty, ret_style, [@constr]);\n     ty_obj([ty_method]);\n     ty_tup([@ty]);\n-    ty_path(path, node_id);\n+    ty_path(@path, node_id);\n     ty_type;\n     ty_constr(@ty, [@ty_constr]);\n     ty_mac(mac);\n@@ -352,7 +352,7 @@ tag constr_arg_general_<T> { carg_base; carg_ident(T); carg_lit(@lit); }\n \n type fn_constr_arg = constr_arg_general_<uint>;\n type sp_constr_arg<T> = spanned<constr_arg_general_<T>>;\n-type ty_constr_arg = sp_constr_arg<path>;\n+type ty_constr_arg = sp_constr_arg<@path>;\n type constr_arg = spanned<fn_constr_arg>;\n \n // Constrained types' args are parameterized by paths, since\n@@ -361,14 +361,14 @@ type constr_arg = spanned<fn_constr_arg>;\n // constrained type, is * (referring to the base record)\n \n type constr_general_<ARG, ID> =\n-    {path: path, args: [@spanned<constr_arg_general_<ARG>>], id: ID};\n+    {path: @path, args: [@spanned<constr_arg_general_<ARG>>], id: ID};\n \n // In the front end, constraints have a node ID attached.\n // Typeck turns this to a def_id, using the output of resolve.\n type constr_general<ARG> = spanned<constr_general_<ARG, node_id>>;\n type constr_ = constr_general_<uint, node_id>;\n type constr = spanned<constr_general_<uint, node_id>>;\n-type ty_constr_ = ast::constr_general_<ast::path, ast::node_id>;\n+type ty_constr_ = constr_general_<@path, node_id>;\n type ty_constr = spanned<ty_constr_>;\n \n /* The parser generates ast::constrs; resolve generates\n@@ -447,9 +447,9 @@ type import_ident = spanned<import_ident_>;\n \n tag view_item_ {\n     view_item_use(ident, [@meta_item], node_id);\n-    view_item_import(ident, simple_path, node_id);\n-    view_item_import_glob(simple_path, node_id);\n-    view_item_import_from(simple_path, [import_ident], node_id);\n+    view_item_import(ident, @simple_path, node_id);\n+    view_item_import_glob(@simple_path, node_id);\n+    view_item_import_from(@simple_path, [import_ident], node_id);\n     view_item_export([ident], node_id);\n }\n "}, {"sha": "da7b5a449534e29d0dd580b93a2bf156b8adce53", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -14,7 +14,7 @@ fn mk_sp(lo: uint, hi: uint) -> span {\n // make this a const, once the compiler supports it\n fn dummy_sp() -> span { ret mk_sp(0u, 0u); }\n \n-fn path_name(p: path) -> str { path_name_i(p.node.idents) }\n+fn path_name(p: @path) -> str { path_name_i(p.node.idents) }\n \n fn path_name_i(idents: [ident]) -> str { str::connect(idents, \"::\") }\n "}, {"sha": "711a180c9a0e5e9b79c2ac908fa33f74eba29549", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -17,8 +17,8 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n     }\n \n     ret @{id: cx.next_id(),\n-          node:\n-              ast::expr_path({node: {global: false, idents: [res], types: []},\n-                              span: sp}),\n+          node: ast::expr_path(@{node: {global: false, idents: [res],\n+                                        types: []},\n+                                 span: sp}),\n           span: sp};\n }"}, {"sha": "1aac14c96683487b2d78790558a5f048f5379d47", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -67,7 +67,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n     fn make_path_expr(cx: ext_ctxt, sp: span, idents: [ast::ident]) ->\n        @ast::expr {\n         let path = {global: false, idents: idents, types: []};\n-        let sp_path = {node: path, span: sp};\n+        let sp_path = @{node: path, span: sp};\n         let pathexpr = ast::expr_path(sp_path);\n         ret @{id: cx.next_id(), node: pathexpr, span: sp};\n     }"}, {"sha": "96d214584e77f1552baf9d2d9047b846538727df", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -14,7 +14,7 @@ import ast::{ident, path, ty, blk_, expr, path_, expr_path,\n \n export add_new_extension;\n \n-fn path_to_ident(pth: path) -> option::t<ident> {\n+fn path_to_ident(pth: @path) -> option::t<ident> {\n     if vec::len(pth.node.idents) == 1u && vec::len(pth.node.types) == 0u {\n         ret some(pth.node.idents[0u]);\n     }\n@@ -30,7 +30,7 @@ tag arb_depth<T> { leaf(T); seq(@[arb_depth<T>], span); }\n \n tag matchable {\n     match_expr(@expr);\n-    match_path(path);\n+    match_path(@path);\n     match_ident(ast::spanned<ident>);\n     match_ty(@ty);\n     match_block(ast::blk);\n@@ -360,10 +360,10 @@ fn transcribe_expr(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n             }\n             alt follow_for_trans(cx, b.find(p.node.idents[0]), idx_path) {\n               some(match_ident(id)) {\n-                expr_path(respan(id.span,\n-                                 {global: false,\n-                                  idents: [id.node],\n-                                  types: []}))\n+                expr_path(@respan(id.span,\n+                                  {global: false,\n+                                   idents: [id.node],\n+                                   types: []}))\n               }\n               some(match_path(a_pth)) { expr_path(a_pth) }\n               some(match_expr(a_exp)) { a_exp.node }\n@@ -502,7 +502,7 @@ fn specialize_match(m: matchable) -> matchable {\n }\n \n /* pattern_to_selectors helper functions */\n-fn p_t_s_r_path(cx: ext_ctxt, p: path, s: selector, b: binders) {\n+fn p_t_s_r_path(cx: ext_ctxt, p: @path, s: selector, b: binders) {\n     alt path_to_ident(p) {\n       some(p_id) {\n         fn select(cx: ext_ctxt, m: matchable) -> match_result {"}, {"sha": "4f26667800b9c009e9177b2d58c551bd8bbe5d50", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -67,7 +67,7 @@ type a_f =\n      fold_native_mod: fn@(native_mod) -> native_mod,\n      fold_variant: fn@(variant) -> variant,\n      fold_ident: fn@(&&ident) -> ident,\n-     fold_path: fn@(path) -> path,\n+     fold_path: fn@(@path) -> @path,\n      fold_local: fn@(&&@local) -> @local,\n      map_exprs: fn@(fn@(&&@expr) -> @expr, [@expr]) -> [@expr],\n      new_id: fn@(node_id) -> node_id,\n@@ -97,7 +97,7 @@ fn nf_mod_dummy(_m: _mod) -> _mod { fail; }\n fn nf_native_mod_dummy(_n: native_mod) -> native_mod { fail; }\n fn nf_variant_dummy(_v: variant) -> variant { fail; }\n fn nf_ident_dummy(&&_i: ident) -> ident { fail; }\n-fn nf_path_dummy(_p: path) -> path { fail; }\n+fn nf_path_dummy(_p: @path) -> @path { fail; }\n fn nf_obj_field_dummy(_o: obj_field) -> obj_field { fail; }\n fn nf_local_dummy(&&_o: @local) -> @local { fail; }\n \n@@ -630,8 +630,8 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n     fn f_ident(afp: ast_fold_precursor, f: ast_fold, &&x: ident) -> ident {\n         ret afp.fold_ident(x, f);\n     }\n-    fn f_path(afp: ast_fold_precursor, f: ast_fold, x: path) -> path {\n-        ret {node: afp.fold_path(x.node, f), span: afp.new_span(x.span)};\n+    fn f_path(afp: ast_fold_precursor, f: ast_fold, x: @path) -> @path {\n+        ret @{node: afp.fold_path(x.node, f), span: afp.new_span(x.span)};\n     }\n     fn f_local(afp: ast_fold_precursor, f: ast_fold, &&x: @local) -> @local {\n         ret @{node: afp.fold_local(x.node, f), span: afp.new_span(x.span)};"}, {"sha": "6d751dff645509dd0f732a3403984b0a567cde15", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -354,7 +354,7 @@ fn parse_type_constr_arg(p: parser) -> @ast::ty_constr_arg {\n     if p.peek() == token::DOT {\n         // \"*...\" notation for record fields\n         p.bump();\n-        let pth: ast::path = parse_path(p);\n+        let pth = parse_path(p);\n         carg = ast::carg_ident(pth);\n     }\n     // No literals yet, I guess?\n@@ -430,10 +430,10 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool)\n       ast::ty_path(pth, ann) {\n         let hi = p.get_hi_pos();\n         ret @spanned(lo, hi,\n-                     ast::ty_path(spanned(lo, hi,\n-                                          {global: pth.node.global,\n-                                           idents: pth.node.idents,\n-                                           types: seq}), ann));\n+                     ast::ty_path(@spanned(lo, hi,\n+                                           {global: pth.node.global,\n+                                            idents: pth.node.idents,\n+                                            types: seq}), ann));\n       }\n       _ { p.fatal(\"type parameter instantiation only allowed for paths\"); }\n     }\n@@ -697,7 +697,7 @@ fn is_plain_ident(p: parser) -> bool {\n     ret alt p.peek() { token::IDENT(_, false) { true } _ { false } };\n }\n \n-fn parse_path(p: parser) -> ast::path {\n+fn parse_path(p: parser) -> @ast::path {\n     let lo = p.get_lo_pos();\n     let hi = lo;\n \n@@ -722,10 +722,10 @@ fn parse_path(p: parser) -> ast::path {\n           _ { break; }\n         }\n     }\n-    ret spanned(lo, hi, {global: global, idents: ids, types: []});\n+    ret @spanned(lo, hi, {global: global, idents: ids, types: []});\n }\n \n-fn parse_path_and_ty_param_substs(p: parser) -> ast::path {\n+fn parse_path_and_ty_param_substs(p: parser) -> @ast::path {\n     let lo = p.get_lo_pos();\n     let path = parse_path(p);\n     if p.peek() == token::MOD_SEP {\n@@ -734,11 +734,10 @@ fn parse_path_and_ty_param_substs(p: parser) -> ast::path {\n         let seq =\n             parse_seq_lt_gt(some(token::COMMA), {|p| parse_ty(p, false)}, p);\n         let hi = seq.span.hi;\n-        path =\n-            spanned(lo, hi,\n-                    {global: path.node.global,\n-                     idents: path.node.idents,\n-                     types: seq.node});\n+        path = @spanned(lo, hi,\n+                        {global: path.node.global,\n+                         idents: path.node.idents,\n+                         types: seq.node});\n     }\n     ret path;\n }\n@@ -2331,18 +2330,18 @@ fn parse_rest_import_name(p: parser, first: ast::ident,\n         if option::is_some(from_idents) {\n             p.fatal(\"can't rename import list\");\n         }\n-        ret ast::view_item_import(i, identifiers, p.get_id());\n+        ret ast::view_item_import(i, @identifiers, p.get_id());\n       }\n       _ {\n         if glob {\n-            ret ast::view_item_import_glob(identifiers, p.get_id());\n+            ret ast::view_item_import_glob(@identifiers, p.get_id());\n         } else if option::is_some(from_idents) {\n-            ret ast::view_item_import_from(identifiers,\n+            ret ast::view_item_import_from(@identifiers,\n                                            option::get(from_idents),\n                                            p.get_id());\n         } else {\n             let len = vec::len(identifiers);\n-            ret ast::view_item_import(identifiers[len - 1u], identifiers,\n+            ret ast::view_item_import(identifiers[len - 1u], @identifiers,\n                                       p.get_id());\n         }\n       }"}, {"sha": "9cd20cc87af54b39b93b01c05fe85ad55aab01f4", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -86,7 +86,7 @@ fn stmt_to_str(s: ast::stmt) -> str { be to_str(s, print_stmt); }\n \n fn item_to_str(i: @ast::item) -> str { be to_str(i, print_item); }\n \n-fn path_to_str(p: ast::path) -> str {\n+fn path_to_str(&&p: @ast::path) -> str {\n     be to_str(p, bind print_path(_, _, false));\n }\n \n@@ -1038,7 +1038,7 @@ fn print_for_decl(s: ps, loc: @ast::local, coll: @ast::expr) {\n     print_expr(s, coll);\n }\n \n-fn print_path(s: ps, path: ast::path, colons_before_params: bool) {\n+fn print_path(s: ps, &&path: @ast::path, colons_before_params: bool) {\n     maybe_print_comment(s, path.span.lo);\n     if path.node.global { word(s.s, \"::\"); }\n     let first = true;\n@@ -1213,19 +1213,19 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       }\n       ast::view_item_import(id, ids, _) {\n         head(s, \"import\");\n-        if !str::eq(id, ids[vec::len(ids) - 1u]) {\n+        if !str::eq(id, ids[vec::len(*ids) - 1u]) {\n             word_space(s, id);\n             word_space(s, \"=\");\n         }\n         let first = true;\n-        for elt: ast::ident in ids {\n+        for elt: ast::ident in *ids {\n             if first { first = false; } else { word(s.s, \"::\"); }\n             word(s.s, elt);\n         }\n       }\n       ast::view_item_import_from(mod_path, idents, _) {\n         head(s, \"import\");\n-        for elt: ast::ident in mod_path { word(s.s, elt); word(s.s, \"::\"); }\n+        for elt: ast::ident in *mod_path { word(s.s, elt); word(s.s, \"::\"); }\n         word(s.s, \"{\");\n         commasep(s, inconsistent, idents,\n                  fn (s: ps, w: ast::import_ident) { word(s.s, w.node.name) });\n@@ -1234,7 +1234,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       ast::view_item_import_glob(ids, _) {\n         head(s, \"import\");\n         let first = true;\n-        for elt: ast::ident in ids {\n+        for elt: ast::ident in *ids {\n             if first { first = false; } else { word(s.s, \"::\"); }\n             word(s.s, elt);\n         }\n@@ -1602,11 +1602,11 @@ fn proto_to_str(p: ast::proto) -> str {\n }\n \n fn ty_constr_to_str(c: @ast::ty_constr) -> str {\n-    fn ty_constr_path_to_str(p: ast::path) -> str { \"*.\" + path_to_str(p) }\n+    fn ty_constr_path_to_str(&&p: @ast::path) -> str { \"*.\" + path_to_str(p) }\n \n     ret path_to_str(c.node.path) +\n-            constr_args_to_str::<ast::path>(ty_constr_path_to_str,\n-                                            c.node.args);\n+            constr_args_to_str::<@ast::path>(ty_constr_path_to_str,\n+                                             c.node.args);\n }\n \n "}, {"sha": "4ba8fec9807a4b1acabc98ba9df3895422479e10", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -30,7 +30,7 @@ type visitor<E> =\n       visit_decl: fn@(@decl, E, vt<E>),\n       visit_expr: fn@(@expr, E, vt<E>),\n       visit_ty: fn@(@ty, E, vt<E>),\n-      visit_constr: fn@(path, span, node_id, E, vt<E>),\n+      visit_constr: fn@(@path, span, node_id, E, vt<E>),\n       visit_fn: fn@(_fn, [ty_param], span, fn_ident, node_id, E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {\n@@ -149,15 +149,15 @@ fn visit_ty<E>(t: @ty, e: E, v: vt<E>) {\n       ty_type. {/* no-op */ }\n       ty_constr(t, cs) {\n         v.visit_ty(t, e, v);\n-        for tc: @spanned<constr_general_<path, node_id>> in cs {\n+        for tc: @spanned<constr_general_<@path, node_id>> in cs {\n             v.visit_constr(tc.node.path, tc.span, tc.node.id, e, v);\n         }\n       }\n       ty_infer. {/* no-op */ }\n     }\n }\n \n-fn visit_constr<E>(_operator: path, _sp: span, _id: node_id, _e: E,\n+fn visit_constr<E>(_operator: @path, _sp: span, _id: node_id, _e: E,\n                    _v: vt<E>) {\n     // default\n }\n@@ -354,7 +354,7 @@ type simple_visitor =\n       visit_decl: fn@(@decl),\n       visit_expr: fn@(@expr),\n       visit_ty: fn@(@ty),\n-      visit_constr: fn@(path, span, node_id),\n+      visit_constr: fn@(@path, span, node_id),\n       visit_fn: fn@(_fn, [ty_param], span, fn_ident, node_id)};\n \n fn simple_ignore_ty(_t: @ty) {}\n@@ -372,7 +372,7 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_decl: fn(_d: @decl) { },\n           visit_expr: fn(_e: @expr) { },\n           visit_ty: simple_ignore_ty,\n-          visit_constr: fn(_p: path, _sp: span, _id: node_id) { },\n+          visit_constr: fn(_p: @path, _sp: span, _id: node_id) { },\n           visit_fn:\n               fn(_f: _fn, _tps: [ty_param], _sp: span, _ident: fn_ident,\n                   _id: node_id) {\n@@ -429,8 +429,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(ty);\n         visit_ty(ty, e, v);\n     }\n-    fn v_constr(f: fn@(path, span, node_id), pt: path, sp: span, id: node_id,\n-                &&e: (), v: vt<()>) {\n+    fn v_constr(f: fn@(@path, span, node_id), pt: @path, sp: span,\n+                id: node_id, &&e: (), v: vt<()>) {\n         f(pt, sp, id);\n         visit_constr(pt, sp, id, e, v);\n     }"}, {"sha": "d8183b897ab28e84a6ffc687e7e5c31122475d98", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40c6773c2f1a5a34990004cbe9b29a7575e2f7e/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=b40c6773c2f1a5a34990004cbe9b29a7575e2f7e", "patch": "@@ -161,10 +161,10 @@ fn constrs_str(constrs: [@constr]) -> str {\n     ret s;\n }\n \n-fn ty_constr_to_str<Q>(c: @ast::spanned<ast::constr_general_<ast::path, Q>>)\n+fn ty_constr_to_str<Q>(c: @ast::spanned<ast::constr_general_<@ast::path, Q>>)\n    -> str {\n     ret path_to_str(c.node.path) +\n-            constr_args_to_str::<ast::path>(path_to_str, c.node.args);\n+            constr_args_to_str::<@ast::path>(path_to_str, c.node.args);\n }\n \n // Local Variables:"}]}