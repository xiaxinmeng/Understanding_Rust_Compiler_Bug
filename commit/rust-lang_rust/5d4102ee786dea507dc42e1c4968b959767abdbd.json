{"sha": "5d4102ee786dea507dc42e1c4968b959767abdbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNDEwMmVlNzg2ZGVhNTA3ZGM0MmUxYzQ5NjhiOTU5NzY3YWJkYmQ=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-12T07:50:09Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T09:46:37Z"}, "message": "BinOpKind", "tree": {"sha": "bf890fa7033496298c44a79800196b812261e38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf890fa7033496298c44a79800196b812261e38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4102ee786dea507dc42e1c4968b959767abdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4102ee786dea507dc42e1c4968b959767abdbd", "html_url": "https://github.com/rust-lang/rust/commit/5d4102ee786dea507dc42e1c4968b959767abdbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4102ee786dea507dc42e1c4968b959767abdbd/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd17e4fa2ba4bad31c15c50300c32235a715223", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd17e4fa2ba4bad31c15c50300c32235a715223", "html_url": "https://github.com/rust-lang/rust/commit/1bd17e4fa2ba4bad31c15c50300c32235a715223"}], "stats": {"total": 508, "additions": 260, "deletions": 248}, "files": [{"sha": "0ab7a3388637c70c1a2c7e544594cd997d259969", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -57,19 +57,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n         match expr.node {\n             hir::ExprKind::Binary(ref op, ref l, ref r) => {\n                 match op.node {\n-                    hir::BiAnd\n-                    | hir::BiOr\n-                    | hir::BiBitAnd\n-                    | hir::BiBitOr\n-                    | hir::BiBitXor\n-                    | hir::BiShl\n-                    | hir::BiShr\n-                    | hir::BiEq\n-                    | hir::BiLt\n-                    | hir::BiLe\n-                    | hir::BiNe\n-                    | hir::BiGe\n-                    | hir::BiGt => return,\n+                    hir::BinOpKind::And\n+                    | hir::BinOpKind::Or\n+                    | hir::BinOpKind::BitAnd\n+                    | hir::BinOpKind::BitOr\n+                    | hir::BinOpKind::BitXor\n+                    | hir::BinOpKind::Shl\n+                    | hir::BinOpKind::Shr\n+                    | hir::BinOpKind::Eq\n+                    | hir::BinOpKind::Lt\n+                    | hir::BinOpKind::Le\n+                    | hir::BinOpKind::Ne\n+                    | hir::BinOpKind::Ge\n+                    | hir::BinOpKind::Gt => return,\n                     _ => (),\n                 }\n                 let (l_ty, r_ty) = (cx.tables.expr_ty(l), cx.tables.expr_ty(r));"}, {"sha": "53b4904fa96aa8c67c78b68de78c67c3d22e4c11", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -175,18 +175,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             cx,\n                             ty,\n                             rty.into(),\n-                            Add: BiAdd,\n-                            Sub: BiSub,\n-                            Mul: BiMul,\n-                            Div: BiDiv,\n-                            Rem: BiRem,\n-                            And: BiAnd,\n-                            Or: BiOr,\n-                            BitAnd: BiBitAnd,\n-                            BitOr: BiBitOr,\n-                            BitXor: BiBitXor,\n-                            Shr: BiShr,\n-                            Shl: BiShl\n+                            Add: BinOpKind::Add,\n+                            Sub: BinOpKind::Sub,\n+                            Mul: BinOpKind::Mul,\n+                            Div: BinOpKind::Div,\n+                            Rem: BinOpKind::Rem,\n+                            And: BinOpKind::And,\n+                            Or: BinOpKind::Or,\n+                            BitAnd: BinOpKind::BitAnd,\n+                            BitOr: BinOpKind::BitOr,\n+                            BitXor: BinOpKind::BitXor,\n+                            Shr: BinOpKind::Shr,\n+                            Shl: BinOpKind::Shl\n                         ) {\n                             span_lint_and_then(\n                                 cx,\n@@ -224,13 +224,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                         // a = b commutative_op a\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n                             match op.node {\n-                                hir::BiAdd\n-                                | hir::BiMul\n-                                | hir::BiAnd\n-                                | hir::BiOr\n-                                | hir::BiBitXor\n-                                | hir::BiBitAnd\n-                                | hir::BiBitOr => {\n+                                hir::BinOpKind::Add\n+                                | hir::BinOpKind::Mul\n+                                | hir::BinOpKind::And\n+                                | hir::BinOpKind::Or\n+                                | hir::BinOpKind::BitXor\n+                                | hir::BinOpKind::BitAnd\n+                                | hir::BinOpKind::BitOr => {\n                                     lint(assignee, l);\n                                 },\n                                 _ => {},\n@@ -244,11 +244,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n     }\n }\n \n-fn is_commutative(op: hir::BinOp_) -> bool {\n-    use rustc::hir::BinOp_::*;\n+fn is_commutative(op: hir::BinOpKind) -> bool {\n+    use rustc::hir::BinOpKind::*;\n     match op {\n-        BiAdd | BiMul | BiAnd | BiOr | BiBitXor | BiBitAnd | BiBitOr | BiEq | BiNe => true,\n-        BiSub | BiDiv | BiRem | BiShl | BiShr | BiLt | BiLe | BiGe | BiGt => false,\n+        Add | Mul | And | Or | BitXor | BitAnd | BitOr | Eq | Ne => true,\n+        Sub | Div | Rem | Shl | Shr | Lt | Le | Ge | Gt => false,\n     }\n }\n "}, {"sha": "25d5e4d4db1d573b986d902bad7008fa23cad5a2", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -120,9 +120,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n         }\n         if_chain! {\n             if let ExprKind::Binary(ref op, ref left, ref right) = e.node;\n-            if BinOp_::BiEq == op.node;\n+            if BinOpKind::Eq == op.node;\n             if let ExprKind::Binary(ref op1, ref left1, ref right1) = left.node;\n-            if BinOp_::BiBitAnd == op1.node;\n+            if BinOpKind::BitAnd == op1.node;\n             if let ExprKind::Lit(ref lit) = right1.node;\n             if let LitKind::Int(n, _) = lit.node;\n             if let ExprKind::Lit(ref lit1) = right.node;\n@@ -143,22 +143,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n     }\n }\n \n-fn invert_cmp(cmp: BinOp_) -> BinOp_ {\n+fn invert_cmp(cmp: BinOpKind) -> BinOpKind {\n     match cmp {\n-        BiEq => BiEq,\n-        BiNe => BiNe,\n-        BiLt => BiGt,\n-        BiGt => BiLt,\n-        BiLe => BiGe,\n-        BiGe => BiLe,\n-        _ => BiOr, // Dummy\n+        BinOpKind::Eq => BinOpKind::Eq,\n+        BinOpKind::Ne => BinOpKind::Ne,\n+        BinOpKind::Lt => BinOpKind::Gt,\n+        BinOpKind::Gt => BinOpKind::Lt,\n+        BinOpKind::Le => BinOpKind::Ge,\n+        BinOpKind::Ge => BinOpKind::Le,\n+        _ => BinOpKind::Or, // Dummy\n     }\n }\n \n \n-fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u128, span: Span) {\n+fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOpKind, cmp_value: u128, span: Span) {\n     if let ExprKind::Binary(ref op, ref left, ref right) = bit_op.node {\n-        if op.node != BiBitAnd && op.node != BiBitOr {\n+        if op.node != BinOpKind::BitAnd && op.node != BinOpKind::BitOr {\n             return;\n         }\n         fetch_int_literal(cx, right)\n@@ -167,10 +167,10 @@ fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u12\n     }\n }\n \n-fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u128, cmp_value: u128, span: Span) {\n+fn check_bit_mask(cx: &LateContext, bit_op: BinOpKind, cmp_op: BinOpKind, mask_value: u128, cmp_value: u128, span: Span) {\n     match cmp_op {\n-        BiEq | BiNe => match bit_op {\n-            BiBitAnd => if mask_value & cmp_value != cmp_value {\n+        BinOpKind::Eq | BinOpKind::Ne => match bit_op {\n+            BinOpKind::BitAnd => if mask_value & cmp_value != cmp_value {\n                 if cmp_value != 0 {\n                     span_lint(\n                         cx,\n@@ -186,7 +186,7 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             } else if mask_value == 0 {\n                 span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n             },\n-            BiBitOr => if mask_value | cmp_value != cmp_value {\n+            BinOpKind::BitOr => if mask_value | cmp_value != cmp_value {\n                 span_lint(\n                     cx,\n                     BAD_BIT_MASK,\n@@ -200,8 +200,8 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             },\n             _ => (),\n         },\n-        BiLt | BiGe => match bit_op {\n-            BiBitAnd => if mask_value < cmp_value {\n+        BinOpKind::Lt | BinOpKind::Ge => match bit_op {\n+            BinOpKind::BitAnd => if mask_value < cmp_value {\n                 span_lint(\n                     cx,\n                     BAD_BIT_MASK,\n@@ -215,7 +215,7 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             } else if mask_value == 0 {\n                 span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n             },\n-            BiBitOr => if mask_value >= cmp_value {\n+            BinOpKind::BitOr => if mask_value >= cmp_value {\n                 span_lint(\n                     cx,\n                     BAD_BIT_MASK,\n@@ -229,11 +229,11 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             } else {\n                 check_ineffective_lt(cx, span, mask_value, cmp_value, \"|\");\n             },\n-            BiBitXor => check_ineffective_lt(cx, span, mask_value, cmp_value, \"^\"),\n+            BinOpKind::BitXor => check_ineffective_lt(cx, span, mask_value, cmp_value, \"^\"),\n             _ => (),\n         },\n-        BiLe | BiGt => match bit_op {\n-            BiBitAnd => if mask_value <= cmp_value {\n+        BinOpKind::Le | BinOpKind::Gt => match bit_op {\n+            BinOpKind::BitAnd => if mask_value <= cmp_value {\n                 span_lint(\n                     cx,\n                     BAD_BIT_MASK,\n@@ -247,7 +247,7 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             } else if mask_value == 0 {\n                 span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n             },\n-            BiBitOr => if mask_value > cmp_value {\n+            BinOpKind::BitOr => if mask_value > cmp_value {\n                 span_lint(\n                     cx,\n                     BAD_BIT_MASK,\n@@ -261,7 +261,7 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n             } else {\n                 check_ineffective_gt(cx, span, mask_value, cmp_value, \"|\");\n             },\n-            BiBitXor => check_ineffective_gt(cx, span, mask_value, cmp_value, \"^\"),\n+            BinOpKind::BitXor => check_ineffective_gt(cx, span, mask_value, cmp_value, \"^\"),\n             _ => (),\n         },\n         _ => (),"}, {"sha": "e23978ebc1d476e8c6ab04c45561eb3542fb4055", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -84,7 +84,7 @@ struct Hir2Qmm<'a, 'tcx: 'a, 'v> {\n }\n \n impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n-    fn extract(&mut self, op: BinOp_, a: &[&'v Expr], mut v: Vec<Bool>) -> Result<Vec<Bool>, String> {\n+    fn extract(&mut self, op: BinOpKind, a: &[&'v Expr], mut v: Vec<Bool>) -> Result<Vec<Bool>, String> {\n         for a in a {\n             if let ExprKind::Binary(binop, ref lhs, ref rhs) = a.node {\n                 if binop.node == op {\n@@ -103,8 +103,8 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n             match e.node {\n                 ExprKind::Unary(UnNot, ref inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => match binop.node {\n-                    BiOr => return Ok(Bool::Or(self.extract(BiOr, &[lhs, rhs], Vec::new())?)),\n-                    BiAnd => return Ok(Bool::And(self.extract(BiAnd, &[lhs, rhs], Vec::new())?)),\n+                    BinOpKind::Or => return Ok(Bool::Or(self.extract(BinOpKind::Or, &[lhs, rhs], Vec::new())?)),\n+                    BinOpKind::And => return Ok(Bool::And(self.extract(BinOpKind::And, &[lhs, rhs], Vec::new())?)),\n                     _ => (),\n                 },\n                 ExprKind::Lit(ref lit) => match lit.node {\n@@ -137,12 +137,12 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                         }\n                     };\n                     match binop.node {\n-                        BiEq => mk_expr(BiNe),\n-                        BiNe => mk_expr(BiEq),\n-                        BiGt => mk_expr(BiLe),\n-                        BiGe => mk_expr(BiLt),\n-                        BiLt => mk_expr(BiGe),\n-                        BiLe => mk_expr(BiGt),\n+                        BinOpKind::Eq => mk_expr(BinOpKind::Ne),\n+                        BinOpKind::Ne => mk_expr(BinOpKind::Eq),\n+                        BinOpKind::Gt => mk_expr(BinOpKind::Le),\n+                        BinOpKind::Ge => mk_expr(BinOpKind::Lt),\n+                        BinOpKind::Lt => mk_expr(BinOpKind::Ge),\n+                        BinOpKind::Le => mk_expr(BinOpKind::Gt),\n                         _ => continue,\n                     }\n                 },\n@@ -185,12 +185,12 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }\n \n                 match binop.node {\n-                    BiEq => Some(\" != \"),\n-                    BiNe => Some(\" == \"),\n-                    BiLt => Some(\" >= \"),\n-                    BiGt => Some(\" <= \"),\n-                    BiLe => Some(\" > \"),\n-                    BiGe => Some(\" < \"),\n+                    BinOpKind::Eq => Some(\" != \"),\n+                    BinOpKind::Ne => Some(\" == \"),\n+                    BinOpKind::Lt => Some(\" >= \"),\n+                    BinOpKind::Gt => Some(\" <= \"),\n+                    BinOpKind::Le => Some(\" > \"),\n+                    BinOpKind::Ge => Some(\" < \"),\n                     _ => None,\n                 }.and_then(|op| Some(format!(\"{}{}{}\", self.snip(lhs)?, op, self.snip(rhs)?)))\n             },\n@@ -441,7 +441,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n             return;\n         }\n         match e.node {\n-            ExprKind::Binary(binop, _, _) if binop.node == BiOr || binop.node == BiAnd => self.bool_expr(e),\n+            ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => self.bool_expr(e),\n             ExprKind::Unary(UnNot, ref inner) => if self.cx.tables.node_types()[inner.hir_id].is_bool() {\n                 self.bool_expr(e);\n             } else {"}, {"sha": "aaa924e95b1ec923b0f306c8879eebcada2d7521", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n                     if body.arguments.len() == 1;\n                     if let Some(argname) = get_pat_name(&body.arguments[0].pat);\n                     if let ExprKind::Binary(ref op, ref l, ref r) = body.value.node;\n-                    if op.node == BiEq;\n+                    if op.node == BinOpKind::Eq;\n                     if match_type(cx,\n                                walk_ptrs_ty(cx.tables.expr_ty(&filter_args[0])),\n                                &paths::SLICE_ITER);"}, {"sha": "d7323337f2472023314bf207c19a5b103da1bc87", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -340,84 +340,84 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                         let r = sext(self.tcx, r, ity);\n                         let zext = |n: i128| Constant::Int(unsext(self.tcx, n, ity));\n                         match op.node {\n-                            BiAdd => l.checked_add(r).map(zext),\n-                            BiSub => l.checked_sub(r).map(zext),\n-                            BiMul => l.checked_mul(r).map(zext),\n-                            BiDiv if r != 0 => l.checked_div(r).map(zext),\n-                            BiRem if r != 0 => l.checked_rem(r).map(zext),\n-                            BiShr => l.checked_shr(r as u128 as u32).map(zext),\n-                            BiShl => l.checked_shl(r as u128 as u32).map(zext),\n-                            BiBitXor => Some(zext(l ^ r)),\n-                            BiBitOr => Some(zext(l | r)),\n-                            BiBitAnd => Some(zext(l & r)),\n-                            BiEq => Some(Constant::Bool(l == r)),\n-                            BiNe => Some(Constant::Bool(l != r)),\n-                            BiLt => Some(Constant::Bool(l < r)),\n-                            BiLe => Some(Constant::Bool(l <= r)),\n-                            BiGe => Some(Constant::Bool(l >= r)),\n-                            BiGt => Some(Constant::Bool(l > r)),\n+                            BinOpKind::Add => l.checked_add(r).map(zext),\n+                            BinOpKind::Sub => l.checked_sub(r).map(zext),\n+                            BinOpKind::Mul => l.checked_mul(r).map(zext),\n+                            BinOpKind::Div if r != 0 => l.checked_div(r).map(zext),\n+                            BinOpKind::Rem if r != 0 => l.checked_rem(r).map(zext),\n+                            BinOpKind::Shr => l.checked_shr(r as u128 as u32).map(zext),\n+                            BinOpKind::Shl => l.checked_shl(r as u128 as u32).map(zext),\n+                            BinOpKind::BitXor => Some(zext(l ^ r)),\n+                            BinOpKind::BitOr => Some(zext(l | r)),\n+                            BinOpKind::BitAnd => Some(zext(l & r)),\n+                            BinOpKind::Eq => Some(Constant::Bool(l == r)),\n+                            BinOpKind::Ne => Some(Constant::Bool(l != r)),\n+                            BinOpKind::Lt => Some(Constant::Bool(l < r)),\n+                            BinOpKind::Le => Some(Constant::Bool(l <= r)),\n+                            BinOpKind::Ge => Some(Constant::Bool(l >= r)),\n+                            BinOpKind::Gt => Some(Constant::Bool(l > r)),\n                             _ => None,\n                         }\n                     }\n                     ty::TyUint(_) => {\n                         match op.node {\n-                            BiAdd => l.checked_add(r).map(Constant::Int),\n-                            BiSub => l.checked_sub(r).map(Constant::Int),\n-                            BiMul => l.checked_mul(r).map(Constant::Int),\n-                            BiDiv => l.checked_div(r).map(Constant::Int),\n-                            BiRem => l.checked_rem(r).map(Constant::Int),\n-                            BiShr => l.checked_shr(r as u32).map(Constant::Int),\n-                            BiShl => l.checked_shl(r as u32).map(Constant::Int),\n-                            BiBitXor => Some(Constant::Int(l ^ r)),\n-                            BiBitOr => Some(Constant::Int(l | r)),\n-                            BiBitAnd => Some(Constant::Int(l & r)),\n-                            BiEq => Some(Constant::Bool(l == r)),\n-                            BiNe => Some(Constant::Bool(l != r)),\n-                            BiLt => Some(Constant::Bool(l < r)),\n-                            BiLe => Some(Constant::Bool(l <= r)),\n-                            BiGe => Some(Constant::Bool(l >= r)),\n-                            BiGt => Some(Constant::Bool(l > r)),\n+                            BinOpKind::Add => l.checked_add(r).map(Constant::Int),\n+                            BinOpKind::Sub => l.checked_sub(r).map(Constant::Int),\n+                            BinOpKind::Mul => l.checked_mul(r).map(Constant::Int),\n+                            BinOpKind::Div => l.checked_div(r).map(Constant::Int),\n+                            BinOpKind::Rem => l.checked_rem(r).map(Constant::Int),\n+                            BinOpKind::Shr => l.checked_shr(r as u32).map(Constant::Int),\n+                            BinOpKind::Shl => l.checked_shl(r as u32).map(Constant::Int),\n+                            BinOpKind::BitXor => Some(Constant::Int(l ^ r)),\n+                            BinOpKind::BitOr => Some(Constant::Int(l | r)),\n+                            BinOpKind::BitAnd => Some(Constant::Int(l & r)),\n+                            BinOpKind::Eq => Some(Constant::Bool(l == r)),\n+                            BinOpKind::Ne => Some(Constant::Bool(l != r)),\n+                            BinOpKind::Lt => Some(Constant::Bool(l < r)),\n+                            BinOpKind::Le => Some(Constant::Bool(l <= r)),\n+                            BinOpKind::Ge => Some(Constant::Bool(l >= r)),\n+                            BinOpKind::Gt => Some(Constant::Bool(l > r)),\n                             _ => None,\n                         }\n                     },\n                     _ => None,\n                 }\n             },\n             (Constant::F32(l), Some(Constant::F32(r))) => match op.node {\n-                BiAdd => Some(Constant::F32(l + r)),\n-                BiSub => Some(Constant::F32(l - r)),\n-                BiMul => Some(Constant::F32(l * r)),\n-                BiDiv => Some(Constant::F32(l / r)),\n-                BiRem => Some(Constant::F32(l % r)),\n-                BiEq => Some(Constant::Bool(l == r)),\n-                BiNe => Some(Constant::Bool(l != r)),\n-                BiLt => Some(Constant::Bool(l < r)),\n-                BiLe => Some(Constant::Bool(l <= r)),\n-                BiGe => Some(Constant::Bool(l >= r)),\n-                BiGt => Some(Constant::Bool(l > r)),\n+                BinOpKind::Add => Some(Constant::F32(l + r)),\n+                BinOpKind::Sub => Some(Constant::F32(l - r)),\n+                BinOpKind::Mul => Some(Constant::F32(l * r)),\n+                BinOpKind::Div => Some(Constant::F32(l / r)),\n+                BinOpKind::Rem => Some(Constant::F32(l % r)),\n+                BinOpKind::Eq => Some(Constant::Bool(l == r)),\n+                BinOpKind::Ne => Some(Constant::Bool(l != r)),\n+                BinOpKind::Lt => Some(Constant::Bool(l < r)),\n+                BinOpKind::Le => Some(Constant::Bool(l <= r)),\n+                BinOpKind::Ge => Some(Constant::Bool(l >= r)),\n+                BinOpKind::Gt => Some(Constant::Bool(l > r)),\n                 _ => None,\n             },\n             (Constant::F64(l), Some(Constant::F64(r))) => match op.node {\n-                BiAdd => Some(Constant::F64(l + r)),\n-                BiSub => Some(Constant::F64(l - r)),\n-                BiMul => Some(Constant::F64(l * r)),\n-                BiDiv => Some(Constant::F64(l / r)),\n-                BiRem => Some(Constant::F64(l % r)),\n-                BiEq => Some(Constant::Bool(l == r)),\n-                BiNe => Some(Constant::Bool(l != r)),\n-                BiLt => Some(Constant::Bool(l < r)),\n-                BiLe => Some(Constant::Bool(l <= r)),\n-                BiGe => Some(Constant::Bool(l >= r)),\n-                BiGt => Some(Constant::Bool(l > r)),\n+                BinOpKind::Add => Some(Constant::F64(l + r)),\n+                BinOpKind::Sub => Some(Constant::F64(l - r)),\n+                BinOpKind::Mul => Some(Constant::F64(l * r)),\n+                BinOpKind::Div => Some(Constant::F64(l / r)),\n+                BinOpKind::Rem => Some(Constant::F64(l % r)),\n+                BinOpKind::Eq => Some(Constant::Bool(l == r)),\n+                BinOpKind::Ne => Some(Constant::Bool(l != r)),\n+                BinOpKind::Lt => Some(Constant::Bool(l < r)),\n+                BinOpKind::Le => Some(Constant::Bool(l <= r)),\n+                BinOpKind::Ge => Some(Constant::Bool(l >= r)),\n+                BinOpKind::Gt => Some(Constant::Bool(l > r)),\n                 _ => None,\n             },\n             (l, r) => match (op.node, l, r) {\n-                (BiAnd, Constant::Bool(false), _) => Some(Constant::Bool(false)),\n-                (BiOr, Constant::Bool(true), _) => Some(Constant::Bool(true)),\n-                (BiAnd, Constant::Bool(true), Some(r)) | (BiOr, Constant::Bool(false), Some(r)) => Some(r),\n-                (BiBitXor, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l ^ r)),\n-                (BiBitAnd, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l & r)),\n-                (BiBitOr, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l | r)),\n+                (BinOpKind::And, Constant::Bool(false), _) => Some(Constant::Bool(false)),\n+                (BinOpKind::Or, Constant::Bool(true), _) => Some(Constant::Bool(true)),\n+                (BinOpKind::And, Constant::Bool(true), Some(r)) | (BinOpKind::Or, Constant::Bool(false), Some(r)) => Some(r),\n+                (BinOpKind::BitXor, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l ^ r)),\n+                (BinOpKind::BitAnd, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l & r)),\n+                (BinOpKind::BitOr, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l | r)),\n                 _ => None,\n             },\n         }"}, {"sha": "b1b667d046ca7e738f6d90395ac6bbd4e3595ed3", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n             ExprKind::Binary(op, _, _) => {\n                 walk_expr(self, e);\n                 match op.node {\n-                    BiAnd | BiOr => self.short_circuits += 1,\n+                    BinOpKind::And | BinOpKind::Or => self.short_circuits += 1,\n                     _ => (),\n                 }\n             },"}, {"sha": "e2ea5723a98e0a7303237127cfc1c58744249ee3", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> DoubleComparisonPass {\n     fn check_binop(\n         &self,\n         cx: &LateContext<'a, 'tcx>,\n-        op: BinOp_,\n+        op: BinOpKind,\n         lhs: &'tcx Expr,\n         rhs: &'tcx Expr,\n         span: Span,\n@@ -67,10 +67,10 @@ impl<'a, 'tcx> DoubleComparisonPass {\n             }}\n         }\n         match (op, lkind, rkind) {\n-            (BiOr, BiEq, BiLt) | (BiOr, BiLt, BiEq) => lint_double_comparison!(<=),\n-            (BiOr, BiEq, BiGt) | (BiOr, BiGt, BiEq) => lint_double_comparison!(>=),\n-            (BiOr, BiLt, BiGt) | (BiOr, BiGt, BiLt) => lint_double_comparison!(!=),\n-            (BiAnd, BiLe, BiGe) | (BiAnd, BiGe, BiLe) => lint_double_comparison!(==),\n+            (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Lt) | (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Eq) => lint_double_comparison!(<=),\n+            (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Eq) => lint_double_comparison!(>=),\n+            (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Lt) => lint_double_comparison!(!=),\n+            (BinOpKind::And, BinOpKind::Le, BinOpKind::Ge) | (BinOpKind::And, BinOpKind::Ge, BinOpKind::Le) => lint_double_comparison!(==),\n             _ => (),\n         };\n     }"}, {"sha": "d374973e35b4d84f7531a26423d567f0da81c0c2", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -38,7 +38,7 @@ impl LintPass for DurationSubsec {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n-            if let ExprKind::Binary(Spanned { node: BiDiv, .. }, ref left, ref right) = expr.node;\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, ref left, ref right) = expr.node;\n             if let ExprKind::MethodCall(ref method_path, _ , ref args) = left.node;\n             if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.tables, right);"}, {"sha": "f58b499d8065688f0e9d192dd50053afd3775403", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -66,20 +66,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 return;\n             }\n             let (trait_id, requires_ref) = match op.node {\n-                BiAdd => (cx.tcx.lang_items().add_trait(), false),\n-                BiSub => (cx.tcx.lang_items().sub_trait(), false),\n-                BiMul => (cx.tcx.lang_items().mul_trait(), false),\n-                BiDiv => (cx.tcx.lang_items().div_trait(), false),\n-                BiRem => (cx.tcx.lang_items().rem_trait(), false),\n+                BinOpKind::Add => (cx.tcx.lang_items().add_trait(), false),\n+                BinOpKind::Sub => (cx.tcx.lang_items().sub_trait(), false),\n+                BinOpKind::Mul => (cx.tcx.lang_items().mul_trait(), false),\n+                BinOpKind::Div => (cx.tcx.lang_items().div_trait(), false),\n+                BinOpKind::Rem => (cx.tcx.lang_items().rem_trait(), false),\n                 // don't lint short circuiting ops\n-                BiAnd | BiOr => return,\n-                BiBitXor => (cx.tcx.lang_items().bitxor_trait(), false),\n-                BiBitAnd => (cx.tcx.lang_items().bitand_trait(), false),\n-                BiBitOr => (cx.tcx.lang_items().bitor_trait(), false),\n-                BiShl => (cx.tcx.lang_items().shl_trait(), false),\n-                BiShr => (cx.tcx.lang_items().shr_trait(), false),\n-                BiNe | BiEq => (cx.tcx.lang_items().eq_trait(), true),\n-                BiLt | BiLe | BiGe | BiGt => (cx.tcx.lang_items().ord_trait(), true),\n+                BinOpKind::And | BinOpKind::Or => return,\n+                BinOpKind::BitXor => (cx.tcx.lang_items().bitxor_trait(), false),\n+                BinOpKind::BitAnd => (cx.tcx.lang_items().bitand_trait(), false),\n+                BinOpKind::BitOr => (cx.tcx.lang_items().bitor_trait(), false),\n+                BinOpKind::Shl => (cx.tcx.lang_items().shl_trait(), false),\n+                BinOpKind::Shr => (cx.tcx.lang_items().shr_trait(), false),\n+                BinOpKind::Ne | BinOpKind::Eq => (cx.tcx.lang_items().eq_trait(), true),\n+                BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ge | BinOpKind::Gt => (cx.tcx.lang_items().ord_trait(), true),\n             };\n             if let Some(trait_id) = trait_id {\n                 #[allow(match_same_arms)]\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n \n fn is_valid_operator(op: BinOp) -> bool {\n     match op.node {\n-        BiSub | BiDiv | BiEq | BiLt | BiLe | BiGt | BiGe | BiNe | BiAnd | BiOr | BiBitXor | BiBitAnd | BiBitOr => true,\n+        BinOpKind::Sub | BinOpKind::Div | BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Gt | BinOpKind::Ge | BinOpKind::Ne | BinOpKind::And | BinOpKind::Or | BinOpKind::BitXor | BinOpKind::BitAnd | BinOpKind::BitOr => true,\n         _ => false,\n     }\n }"}, {"sha": "acede5d1a132fdd2698e9f73276de8092a793706", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -38,11 +38,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {\n             match cmp.node {\n-                BiMul | BiBitAnd => {\n+                BinOpKind::Mul | BinOpKind::BitAnd => {\n                     check(cx, left, e.span);\n                     check(cx, right, e.span);\n                 },\n-                BiDiv => check(cx, left, e.span),\n+                BinOpKind::Div => check(cx, left, e.span),\n                 _ => (),\n             }\n         }"}, {"sha": "250ae92ea591807198ebc61bb04b1578ad224a78", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -229,7 +229,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> St\n             walk_expr(vis, expr);\n         },\n         ExprKind::Binary(op, _, _) | ExprKind::AssignOp(op, _, _) => {\n-            if op.node == BiAnd || op.node == BiOr {\n+            if op.node == BinOpKind::And || op.node == BinOpKind::Or {\n                 // x && y and x || y always evaluate x first, so these are\n                 // strictly sequenced.\n             } else {"}, {"sha": "92e07401818eb5dd2d7d4900c293dceba2da79f5", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -38,17 +38,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {\n             match cmp.node {\n-                BiAdd | BiBitOr | BiBitXor => {\n+                BinOpKind::Add | BinOpKind::BitOr | BinOpKind::BitXor => {\n                     check(cx, left, 0, e.span, right.span);\n                     check(cx, right, 0, e.span, left.span);\n                 },\n-                BiShl | BiShr | BiSub => check(cx, right, 0, e.span, left.span),\n-                BiMul => {\n+                BinOpKind::Shl | BinOpKind::Shr | BinOpKind::Sub => check(cx, right, 0, e.span, left.span),\n+                BinOpKind::Mul => {\n                     check(cx, left, 1, e.span, right.span);\n                     check(cx, right, 1, e.span, left.span);\n                 },\n-                BiDiv => check(cx, right, 1, e.span, left.span),\n-                BiBitAnd => {\n+                BinOpKind::Div => check(cx, right, 1, e.span, left.span),\n+                BinOpKind::BitAnd => {\n                     check(cx, left, -1, e.span, right.span);\n                     check(cx, right, -1, e.span, left.span);\n                 },"}, {"sha": "3b73e78d1a79ff1ea9d49a4f7746e1bc981eeed1", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -81,24 +81,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n \n         if let ExprKind::Binary(Spanned { node: cmp, .. }, ref left, ref right) = expr.node {\n             match cmp {\n-                BiEq => {\n+                BinOpKind::Eq => {\n                     check_cmp(cx, expr.span, left, right, \"\", 0); // len == 0\n                     check_cmp(cx, expr.span, right, left, \"\", 0); // 0 == len\n                 },\n-                BiNe => {\n+                BinOpKind::Ne => {\n                     check_cmp(cx, expr.span, left, right, \"!\", 0); // len != 0\n                     check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 != len\n                 },\n-                BiGt => {\n+                BinOpKind::Gt => {\n                     check_cmp(cx, expr.span, left, right, \"!\", 0); // len > 0\n                     check_cmp(cx, expr.span, right, left, \"\", 1); // 1 > len\n                 },\n-                BiLt => {\n+                BinOpKind::Lt => {\n                     check_cmp(cx, expr.span, left, right, \"\", 1); // len < 1\n                     check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 < len\n                 },\n-                BiGe => check_cmp(cx, expr.span, left, right, \"!\", 1), // len <= 1\n-                BiLe => check_cmp(cx, expr.span, right, left, \"!\", 1), // 1 >= len\n+                BinOpKind::Ge => check_cmp(cx, expr.span, left, right, \"!\", 1), // len <= 1\n+                BinOpKind::Le => check_cmp(cx, expr.span, right, left, \"!\", 1), // 1 >= len\n                 _ => (),\n             }\n         }"}, {"sha": "5095ddfda2587a134da90517f52f244d466ffa2d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -771,7 +771,7 @@ fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var:\n \n         let offset = match idx.node {\n             ExprKind::Binary(op, ref lhs, ref rhs) => match op.node {\n-                BinOp_::BiAdd => {\n+                BinOpKindAdd => {\n                     let offset_opt = if same_var(cx, lhs, var) {\n                         extract_offset(cx, rhs, var)\n                     } else if same_var(cx, rhs, var) {\n@@ -782,7 +782,7 @@ fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var:\n \n                     offset_opt.map(Offset::positive)\n                 },\n-                BinOp_::BiSub if same_var(cx, lhs, var) => extract_offset(cx, rhs, var).map(Offset::negative),\n+                BinOpKind::Sub if same_var(cx, lhs, var) => extract_offset(cx, rhs, var).map(Offset::negative),\n                 _ => None,\n             },\n             ExprKind::Path(..) => if same_var(cx, idx, var) {\n@@ -1884,7 +1884,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                 match parent.node {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {\n                         if lhs.id == expr.id {\n-                            if op.node == BiAdd && is_integer_literal(rhs, 1) {\n+                            if op.node == BinOpKind::Add && is_integer_literal(rhs, 1) {\n                                 *state = match *state {\n                                     VarState::Initial if self.depth == 0 => VarState::IncrOnce,\n                                     _ => VarState::DontWarn,"}, {"sha": "d1740081e67de274f34696e31ad45d3adf5aab2e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -789,12 +789,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     _ => (),\n                 }\n             },\n-            hir::ExprKind::Binary(op, ref lhs, ref rhs) if op.node == hir::BiEq || op.node == hir::BiNe => {\n+            hir::ExprKind::Binary(op, ref lhs, ref rhs) if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne => {\n                 let mut info = BinaryExprInfo {\n                     expr,\n                     chain: lhs,\n                     other: rhs,\n-                    eq: op.node == hir::BiEq,\n+                    eq: op.node == hir::BinOpKind::Eq,\n                 };\n                 lint_binary_expr_with_method_call(cx, &mut info);\n             },\n@@ -1274,7 +1274,7 @@ fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::E\n     fn check_fold_with_op(\n         cx: &LateContext,\n         fold_args: &[hir::Expr],\n-        op: hir::BinOp_,\n+        op: hir::BinOpKind,\n         replacement_method_name: &str,\n         replacement_has_args: bool) {\n \n@@ -1332,16 +1332,16 @@ fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::E\n         hir::ExprKind::Lit(ref lit) => {\n             match lit.node {\n                 ast::LitKind::Bool(false) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiOr, \"any\", true\n+                    cx, fold_args, hir::BinOpKind::Or, \"any\", true\n                 ),\n                 ast::LitKind::Bool(true) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiAnd, \"all\", true\n+                    cx, fold_args, hir::BinOpKind::And, \"all\", true\n                 ),\n                 ast::LitKind::Int(0, _) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiAdd, \"sum\", false\n+                    cx, fold_args, hir::BinOpKindAdd, \"sum\", false\n                 ),\n                 ast::LitKind::Int(1, _) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiMul, \"product\", false\n+                    cx, fold_args, hir::BinOpKind::Mul, \"product\", false\n                 ),\n                 _ => return\n             }"}, {"sha": "f8f8aae46f8f0ee88ed9c0411de3004f69e94981", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -305,15 +305,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_chain! {\n             if let StmtSemi(ref expr, _) = s.node;\n             if let ExprKind::Binary(ref binop, ref a, ref b) = expr.node;\n-            if binop.node == BiAnd || binop.node == BiOr;\n+            if binop.node == BinOpKind::And || binop.node == BinOpKind::Or;\n             if let Some(sugg) = Sugg::hir_opt(cx, a);\n             then {\n                 span_lint_and_then(cx,\n                     SHORT_CIRCUIT_STATEMENT,\n                     s.span,\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n-                        let sugg = if binop.node == BiOr { !sugg } else { sugg };\n+                        let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n                         db.span_suggestion(s.span, \"replace it with\",\n                                            format!(\"if {} {{ {}; }}\", sugg, &snippet(cx, b.span, \"..\")));\n                     });\n@@ -339,7 +339,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     check_to_owned(cx, left, right);\n                     check_to_owned(cx, right, left);\n                 }\n-                if (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n+                if (op == BinOpKind::Eq || op == BinOpKind::Ne) && (is_float(cx, left) || is_float(cx, right)) {\n                     if is_allowed(cx, left) || is_allowed(cx, right) {\n                         return;\n                     }\n@@ -367,7 +367,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         );\n                         db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n                     });\n-                } else if op == BiRem && is_integer_literal(right, 1) {\n+                } else if op == BinOpKind::Rem && is_integer_literal(right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n                 }\n             },"}, {"sha": "db019bdce8899969ba0634751e6558593feeea37", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -123,7 +123,7 @@ impl LintPass for BoolComparison {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use self::Expression::*;\n-        if let ExprKind::Binary(Spanned { node: BiEq, .. }, ref left_side, ref right_side) = e.node {\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => {\n                     let hint = snippet(cx, right_side.span, \"..\").into_owned();"}, {"sha": "e0374b80dd810a490150e3af3f2f2c442cbdef80", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n             if !in_external_macro(cx, expr.span);\n             if let ExprKind::Unary(UnOp::UnNot, ref inner) = expr.node;\n             if let ExprKind::Binary(ref op, ref left, _) = inner.node;\n-            if let BinOp_::BiLe | BinOp_::BiGe | BinOp_::BiLt | BinOp_::BiGt = op.node;\n+            if let BinOpKind::Le | BinOpKind::Ge | BinOpKind::Lt | BinOpKind::Gt = op.node;\n \n             then {\n "}, {"sha": "e30ac8695dc8fef99eabd772f29eaf88668f8b91", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -33,7 +33,7 @@ impl LintPass for NegMultiply {\n #[allow(match_same_arms)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(Spanned { node: BiMul, .. }, ref l, ref r) = e.node {\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref l, ref r) = e.node {\n             match (&l.node, &r.node) {\n                 (&ExprKind::Unary(..), &ExprKind::Unary(..)) => (),\n                 (&ExprKind::Unary(UnNeg, ref lit), _) => check_mul(cx, e.span, lit, r),"}, {"sha": "7dc2ab734dca3ac54a005d568445d9f9cc0bb45a", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -133,7 +133,7 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n     }\n     match expr.node {\n         ExprKind::Index(ref a, ref b) => Some(vec![&**a, &**b]),\n-        ExprKind::Binary(ref binop, ref a, ref b) if binop.node != BiAnd && binop.node != BiOr => {\n+        ExprKind::Binary(ref binop, ref a, ref b) if binop.node != BinOpKind::And && binop.node != BinOpKind::Or => {\n             Some(vec![&**a, &**b])\n         },\n         ExprKind::Array(ref v) | ExprKind::Tup(ref v) => Some(v.iter().collect()),"}, {"sha": "4887edea2f39ba27324b02b0ebce5cbd9b2a3640", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -42,14 +42,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n             if cx.tables.expr_ty(ident1).is_integral();\n             if cx.tables.expr_ty(ident2).is_integral();\n             then {\n-                if let BinOp_::BiLt = op.node {\n-                    if let BinOp_::BiAdd = op2.node {\n+                if let BinOpKind::Lt = op.node {\n+                    if let BinOpKindAdd = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                     }\n                 }\n-                if let BinOp_::BiGt = op.node {\n-                    if let BinOp_::BiSub = op2.node {\n+                if let BinOpKind::Gt = op.node {\n+                    if let BinOpKind::Sub = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                     }\n@@ -67,14 +67,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n             if cx.tables.expr_ty(ident1).is_integral();\n             if cx.tables.expr_ty(ident2).is_integral();\n             then {\n-                if let BinOp_::BiGt = op.node {\n-                    if let BinOp_::BiAdd = op2.node {\n+                if let BinOpKind::Gt = op.node {\n+                    if let BinOpKindAdd = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                     }\n                 }\n-                if let BinOp_::BiLt = op.node {\n-                    if let BinOp_::BiSub = op2.node {\n+                if let BinOpKind::Lt = op.node {\n+                    if let BinOpKind::Sub = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                     }"}, {"sha": "2ecdf983e6bdafd76ad6f91d7a4bdd1bc9d00e69", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n \n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Binary(ref op, ref l, ref r) = expr.node {\n-            if (op.node == BiEq || op.node == BiNe) && (is_null_path(l) || is_null_path(r)) {\n+            if (op.node == BinOpKind::Eq || op.node == BinOpKind::Ne) && (is_null_path(l) || is_null_path(r)) {\n                 span_lint(\n                     cx,\n                     CMP_NULL,"}, {"sha": "2fb3bf5182cd8b546ac5731a152a734378d10e1c", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -184,7 +184,7 @@ fn has_step_by(cx: &LateContext, expr: &Expr) -> bool {\n \n fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n     match expr.node {\n-        ExprKind::Binary(Spanned { node: BiAdd, .. }, ref lhs, ref rhs) => if is_integer_literal(lhs, 1) {\n+        ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref lhs, ref rhs) => if is_integer_literal(lhs, 1) {\n             Some(rhs)\n         } else if is_integer_literal(rhs, 1) {\n             Some(lhs)\n@@ -197,7 +197,7 @@ fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n \n fn y_minus_one(expr: &Expr) -> Option<&Expr> {\n     match expr.node {\n-        ExprKind::Binary(Spanned { node: BiSub, .. }, ref lhs, ref rhs) if is_integer_literal(rhs, 1) => Some(lhs),\n+        ExprKind::Binary(Spanned { node: BinOpKind::Sub, .. }, ref lhs, ref rhs) if is_integer_literal(rhs, 1) => Some(lhs),\n         _ => None,\n     }\n }"}, {"sha": "40f5c66ce1582b69bcb9887ae400bd5e371090bb", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -82,7 +82,7 @@ impl LintPass for StringAdd {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(Spanned { node: BiAdd, .. }, ref left, _) = e.node {\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) = e.node {\n             if is_string(cx, left) {\n                 if !is_allowed(cx, STRING_ADD_ASSIGN, e.id) {\n                     let parent = get_parent_expr(cx, e);\n@@ -122,7 +122,7 @@ fn is_string(cx: &LateContext, e: &Expr) -> bool {\n \n fn is_add(cx: &LateContext, src: &Expr, target: &Expr) -> bool {\n     match src.node {\n-        ExprKind::Binary(Spanned { node: BiAdd, .. }, ref left, _) => SpanlessEq::new(cx).eq_expr(target, left),\n+        ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) => SpanlessEq::new(cx).eq_expr(target, left),\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty()\n                 && block"}, {"sha": "ce2ef951a4330c8af0e1e999325cb83d19625808", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -59,10 +59,10 @@ impl LintPass for SuspiciousImpl {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        use rustc::hir::BinOp_::*;\n+        use rustc::hir::BinOpKind::*;\n         if let hir::ExprKind::Binary(binop, _, _) = expr.node {\n             match binop.node {\n-                BiEq | BiLt | BiLe | BiNe | BiGe | BiGt => return,\n+                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt => return,\n                 _ => {},\n             }\n             // Check if the binary expression is part of another bi/unary expression\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                 expr,\n                 binop.node,\n                 &[\"Add\", \"Sub\", \"Mul\", \"Div\"],\n-                &[BiAdd, BiSub, BiMul, BiDiv],\n+                &[BinOpKind::Add, BinOpKind::Sub, BinOpKind::Mul, BinOpKind::Div],\n             ) {\n                 span_lint(\n                     cx,\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                     \"ShrAssign\",\n                 ],\n                 &[\n-                    BiAdd, BiSub, BiMul, BiDiv, BiBitAnd, BiBitOr, BiBitXor, BiRem, BiShl, BiShr\n+                    BinOpKind::Add, BinOpKind::Sub, BinOpKind::Mul, BinOpKind::Div, BinOpKind::BitAnd, BinOpKind::BitOr, BinOpKind::BitXor, BinOpKind::Rem, BinOpKind::Shl, BinOpKind::Shr\n                 ],\n             ) {\n                 span_lint(\n@@ -144,9 +144,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n fn check_binop<'a>(\n     cx: &LateContext,\n     expr: &hir::Expr,\n-    binop: hir::BinOp_,\n+    binop: hir::BinOpKind,\n     traits: &[&'a str],\n-    expected_ops: &[hir::BinOp_],\n+    expected_ops: &[hir::BinOpKind],\n ) -> Option<&'a str> {\n     let mut trait_ids = vec![];\n     let [krate, module] = crate::utils::paths::OPS_MODULE;"}, {"sha": "5b88c517abb99b93f926d726ab1365cdcd688327", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n             let op = cmp.node;\n             if op.is_comparison() && is_unit(cx.tables.expr_ty(left)) {\n                 let result = match op {\n-                    BiEq | BiLe | BiGe => \"true\",\n+                    BinOpKind::Eq | BinOpKind::Le | BinOpKind::Ge => \"true\",\n                     _ => \"false\",\n                 };\n                 span_lint(\n@@ -1374,7 +1374,7 @@ fn is_cast_between_fixed_and_target<'a, 'tcx>(\n \n fn detect_absurd_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    op: BinOp_,\n+    op: BinOpKind,\n     lhs: &'tcx Expr,\n     rhs: &'tcx Expr,\n ) -> Option<(ExtremeExpr<'tcx>, AbsurdComparisonResult)> {"}, {"sha": "fcc3c2f68c1ce86fde16dfe161c510a5b5f63b60", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -80,7 +80,7 @@ fn collect_unwrap_info<'a, 'tcx: 'a>(\n ) -> Vec<UnwrapInfo<'tcx>> {\n     if let ExprKind::Binary(op, left, right) = &expr.node {\n         match (invert, op.node) {\n-            (false, BinOp_::BiAnd) | (false, BinOp_::BiBitAnd) | (true, BinOp_::BiOr) | (true, BinOp_::BiBitOr) => {\n+            (false, BinOpKind::And) | (false, BinOpKind::BitAnd) | (true, BinOpKind::Or) | (true, BinOpKind::BitOr) => {\n                 let mut unwrap_info = collect_unwrap_info(cx, left, invert);\n                 unwrap_info.append(&mut collect_unwrap_info(cx, right, invert));\n                 return unwrap_info;"}, {"sha": "2ea3636f15abcfbdbf243b034dec4747cafa8758", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -240,7 +240,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let left_pat = self.next(\"left\");\n                 let right_pat = self.next(\"right\");\n                 println!(\"Binary(ref {}, ref {}, ref {}) = {};\", op_pat, left_pat, right_pat, current);\n-                println!(\"    if BinOp_::{:?} == {}.node;\", op.node, op_pat);\n+                println!(\"    if BinOpKind::{:?} == {}.node;\", op.node, op_pat);\n                 self.current = left_pat;\n                 self.visit_expr(left);\n                 self.current = right_pat;\n@@ -385,7 +385,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let target_pat = self.next(\"target\");\n                 let value_pat = self.next(\"value\");\n                 println!(\"AssignOp(ref {}, ref {}, ref {}) = {};\", op_pat, target_pat, value_pat, current);\n-                println!(\"    if BinOp_::{:?} == {}.node;\", op.node, op_pat);\n+                println!(\"    if BinOpKind::{:?} == {}.node;\", op.node, op_pat);\n                 self.current = target_pat;\n                 self.visit_expr(target);\n                 self.current = value_pat;"}, {"sha": "35f41d400ad8417db4f416f14f3ed81d908c3de4", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -2,7 +2,7 @@\n \n #![deny(missing_docs_in_private_items)]\n \n-use rustc::hir::{BinOp_, Expr};\n+use rustc::hir::{BinOpKind, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n /// Represent a normalized comparison operator.\n@@ -19,14 +19,14 @@ pub enum Rel {\n \n /// Put the expression in the form  `lhs < rhs`, `lhs <= rhs`, `lhs == rhs` or\n /// `lhs != rhs`.\n-pub fn normalize_comparison<'a>(op: BinOp_, lhs: &'a Expr, rhs: &'a Expr) -> Option<(Rel, &'a Expr, &'a Expr)> {\n+pub fn normalize_comparison<'a>(op: BinOpKind, lhs: &'a Expr, rhs: &'a Expr) -> Option<(Rel, &'a Expr, &'a Expr)> {\n     match op {\n-        BinOp_::BiLt => Some((Rel::Lt, lhs, rhs)),\n-        BinOp_::BiLe => Some((Rel::Le, lhs, rhs)),\n-        BinOp_::BiGt => Some((Rel::Lt, rhs, lhs)),\n-        BinOp_::BiGe => Some((Rel::Le, rhs, lhs)),\n-        BinOp_::BiEq => Some((Rel::Eq, rhs, lhs)),\n-        BinOp_::BiNe => Some((Rel::Ne, rhs, lhs)),\n+        BinOpKind::Lt => Some((Rel::Lt, lhs, rhs)),\n+        BinOpKind::Le => Some((Rel::Le, lhs, rhs)),\n+        BinOpKind::Gt => Some((Rel::Lt, rhs, lhs)),\n+        BinOpKind::Ge => Some((Rel::Le, rhs, lhs)),\n+        BinOpKind::Eq => Some((Rel::Eq, rhs, lhs)),\n+        BinOpKind::Ne => Some((Rel::Ne, rhs, lhs)),\n         _ => None,\n     }\n }"}, {"sha": "75b7fd9e2fe3773f44fc6217121586a5d2cac65f", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -9,7 +9,7 @@ use syntax::ast;\n use crate::utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n \n /// Convert a hir binary operator to the corresponding `ast` type.\n-pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {\n+pub fn binop(op: hir::BinOpKind) -> ast::BinOpKind {\n     match op {\n         hir::BinOpKind::Eq => ast::BinOpKind::Eq,\n         hir::BinOpKind::Ge => ast::BinOpKind::Ge,"}, {"sha": "5ff847a53b43da442cab187c7227c3fc7cc7c9a3", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -280,14 +280,26 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n }\n \n-fn swap_binop<'a>(binop: BinOp_, lhs: &'a Expr, rhs: &'a Expr) -> Option<(BinOp_, &'a Expr, &'a Expr)> {\n+fn swap_binop<'a>(binop: BinOpKind, lhs: &'a Expr, rhs: &'a Expr) -> Option<(BinOpKind, &'a Expr, &'a Expr)> {\n     match binop {\n-        BiAdd | BiMul | BiBitXor | BiBitAnd | BiEq | BiNe | BiBitOr => Some((binop, rhs, lhs)),\n-        BiLt => Some((BiGt, rhs, lhs)),\n-        BiLe => Some((BiGe, rhs, lhs)),\n-        BiGe => Some((BiLe, rhs, lhs)),\n-        BiGt => Some((BiLt, rhs, lhs)),\n-        BiShl | BiShr | BiRem | BiSub | BiDiv | BiAnd | BiOr => None,\n+        BinOpKind::Add |\n+        BinOpKind::Mul |\n+        BinOpKind::Eq |\n+        BinOpKind::Ne |\n+        BinOpKind::BitAnd |\n+        BinOpKind::BitXor |\n+        BinOpKind::BitOr => Some((binop, rhs, lhs)),\n+        BinOpKind::Lt => Some((BinOpKind::Gt, rhs, lhs)),\n+        BinOpKind::Le => Some((BinOpKind::Ge, rhs, lhs)),\n+        BinOpKind::Ge => Some((BinOpKind::Le, rhs, lhs)),\n+        BinOpKind::Gt => Some((BinOpKind::Lt, rhs, lhs)),\n+        BinOpKind::Shl |\n+        BinOpKind::Shr |\n+        BinOpKind::Rem |\n+        BinOpKind::Sub |\n+        BinOpKind::Div |\n+        BinOpKind::And |\n+        BinOpKind::Or => None,\n     }\n }\n "}, {"sha": "27362bd9be9af98965e156edc44065406157d661", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -382,21 +382,21 @@ fn associativity(op: &AssocOp) -> Associativity {\n \n /// Convert a `hir::BinOp` to the corresponding assigning binary operator.\n fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n-    use rustc::hir::BinOp_::*;\n+    use rustc::hir::BinOpKind::*;\n     use syntax::parse::token::BinOpToken::*;\n \n     AssocOp::AssignOp(match op.node {\n-        BiAdd => Plus,\n-        BiBitAnd => And,\n-        BiBitOr => Or,\n-        BiBitXor => Caret,\n-        BiDiv => Slash,\n-        BiMul => Star,\n-        BiRem => Percent,\n-        BiShl => Shl,\n-        BiShr => Shr,\n-        BiSub => Minus,\n-        BiAnd | BiEq | BiGe | BiGt | BiLe | BiLt | BiNe | BiOr => panic!(\"This operator does not exist\"),\n+        BinOpKind::Add => Plus,\n+        BinOpKind::BitAnd => And,\n+        BinOpKind::BitOr => Or,\n+        BinOpKind::BitXor => Caret,\n+        BinOpKind::Div => Slash,\n+        BinOpKind::Mul => Star,\n+        BinOpKind::Rem => Percent,\n+        BinOpKind::Shl => Shl,\n+        BinOpKind::Shr => Shr,\n+        BinOpKind::Sub => Minus,\n+        BinOpKind::And | BinOpKind::Eq | BinOpKind::Ge | BinOpKind::Gt | BinOpKind::Le | BinOpKind::Lt | BinOpKind::Ne | BinOpKind::Or => panic!(\"This operator does not exist\"),\n     })\n }\n "}, {"sha": "5232d5714f1351bb0be34d910f52cd5496ac7574", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         // check for instances of 0.0/0.0\n         if_chain! {\n             if let ExprKind::Binary(ref op, ref left, ref right) = expr.node;\n-            if let BinOp_::BiDiv = op.node;\n+            if let BinOpKind::Div = op.node;\n             // TODO - constant_simple does not fold many operations involving floats.\n             // That's probably fine for this lint - it's pretty unlikely that someone would\n             // do something like 0.0/(2.0 - 2.0), but it would be nice to warn on that case too."}, {"sha": "9f6fce2495a3dfdbfd82e10957744fc8e93341d6", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -25,23 +25,23 @@ impl Mul for Foo {\n     type Output = Foo;\n \n     fn mul(self, other: Foo) -> Foo {\n-        Foo(self.0 * other.0 % 42) // OK: BiRem part of BiExpr as parent node\n+        Foo(self.0 * other.0 % 42) // OK: BinOpKind::Rem part of BiExpr as parent node\n     }\n }\n \n impl Sub for Foo {\n     type Output = Foo;\n \n     fn sub(self, other: Self) -> Self {\n-        Foo(self.0 * other.0 - 42) // OK: BiMul part of BiExpr as child node\n+        Foo(self.0 * other.0 - 42) // OK: BinOpKind::Mul part of BiExpr as child node\n     }\n }\n \n impl Div for Foo {\n     type Output = Foo;\n \n     fn div(self, other: Self) -> Self {\n-        Foo(do_nothing(self.0 + other.0) / 42) // OK: BiAdd part of BiExpr as child node\n+        Foo(do_nothing(self.0 + other.0) / 42) // OK: BinOpKind::Add part of BiExpr as child node\n     }\n }\n "}, {"sha": "b311604c0c87eafd4bbc4172d4b9b13d92f02da4", "filename": "tests/ui/trailing_zeros.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4102ee786dea507dc42e1c4968b959767abdbd/tests%2Fui%2Ftrailing_zeros.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5d4102ee786dea507dc42e1c4968b959767abdbd/tests%2Fui%2Ftrailing_zeros.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.stdout?ref=5d4102ee786dea507dc42e1c4968b959767abdbd", "patch": "@@ -1,8 +1,8 @@\n if_chain! {\n     if let ExprKind::Binary(ref op, ref left, ref right) = expr.node;\n-    if BinOp_::BiEq == op.node;\n+    if BinOpKind::Eq == op.node;\n     if let ExprKind::Binary(ref op1, ref left1, ref right1) = left.node;\n-    if BinOp_::BiBitAnd == op1.node;\n+    if BinOpKind::BitAnd == op1.node;\n     if let ExprKind::Path(ref path) = left1.node;\n     if match_qpath(path, &[\"x\"]);\n     if let ExprKind::Lit(ref lit) = right1.node;"}]}