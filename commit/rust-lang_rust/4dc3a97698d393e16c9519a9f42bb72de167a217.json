{"sha": "4dc3a97698d393e16c9519a9f42bb72de167a217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzNhOTc2OThkMzkzZTE2Yzk1MTlhOWY0MmJiNzJkZTE2N2EyMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T01:55:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T01:55:48Z"}, "message": "auto merge of #9258 : thestinger/rust/doc, r=catamorphism\n\nCloses #9144", "tree": {"sha": "c5996b3929c654c7fd43f05aad1e19dd6a0c1613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5996b3929c654c7fd43f05aad1e19dd6a0c1613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc3a97698d393e16c9519a9f42bb72de167a217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc3a97698d393e16c9519a9f42bb72de167a217", "html_url": "https://github.com/rust-lang/rust/commit/4dc3a97698d393e16c9519a9f42bb72de167a217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc3a97698d393e16c9519a9f42bb72de167a217/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460021bdf2106ee76daf7d81ec7e50e972e26901", "url": "https://api.github.com/repos/rust-lang/rust/commits/460021bdf2106ee76daf7d81ec7e50e972e26901", "html_url": "https://github.com/rust-lang/rust/commit/460021bdf2106ee76daf7d81ec7e50e972e26901"}, {"sha": "e12c3bfbf999bb565b45b58ae9475d60c9e63ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12c3bfbf999bb565b45b58ae9475d60c9e63ceb", "html_url": "https://github.com/rust-lang/rust/commit/e12c3bfbf999bb565b45b58ae9475d60c9e63ceb"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "9ebb3384c611395f3097667026cf19ee21e3c6af", "filename": "doc/rust.md", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4dc3a97698d393e16c9519a9f42bb72de167a217/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4dc3a97698d393e16c9519a9f42bb72de167a217/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=4dc3a97698d393e16c9519a9f42bb72de167a217", "patch": "@@ -962,24 +962,76 @@ parameters to allow methods with that trait to be called on values\n of that type.\n \n \n-#### Unsafe functions\n-\n-Unsafe functions are those containing unsafe operations that are not contained in an [`unsafe` block](#unsafe-blocks).\n-Such a function must be prefixed with the keyword `unsafe`.\n+#### Unsafety\n \n Unsafe operations are those that potentially violate the memory-safety guarantees of Rust's static semantics.\n-Specifically, the following operations are considered unsafe:\n+\n+The following language level features cannot be used in the safe subset of Rust:\n \n   - Dereferencing a [raw pointer](#pointer-types).\n-  - Casting a [raw pointer](#pointer-types) to a safe pointer type.\n-  - Calling an unsafe function.\n+  - Calling an unsafe function (including an intrinsic or foreign function).\n \n-##### Unsafe blocks\n+##### Unsafe functions\n \n-A block of code can also be prefixed with the `unsafe` keyword, to permit a sequence of unsafe operations in an otherwise-safe function.\n-This facility exists because the static semantics of Rust are a necessary approximation of the dynamic semantics.\n-When a programmer has sufficient conviction that a sequence of unsafe operations is actually safe, they can encapsulate that sequence (taken as a whole) within an `unsafe` block. The compiler will consider uses of such code \"safe\", to the surrounding context.\n+Unsafe functions are functions that are not safe in all contexts and/or for all possible inputs.\n+Such a function must be prefixed with the keyword `unsafe`.\n+\n+##### Unsafe blocks\n \n+A block of code can also be prefixed with the `unsafe` keyword, to permit calling `unsafe` functions\n+or dereferencing raw pointers within a safe function.\n+\n+When a programmer has sufficient conviction that a sequence of potentially unsafe operations is\n+actually safe, they can encapsulate that sequence (taken as a whole) within an `unsafe` block. The\n+compiler will consider uses of such code safe, in the surrounding context.\n+\n+Unsafe blocks are used to wrap foreign libraries, make direct use of hardware or implement features\n+not directly present in the language. For example, Rust provides the language features necessary to\n+implement memory-safe concurrency in the language but the implementation of tasks and message\n+passing is in the standard library.\n+\n+Rust's type system is a conservative approximation of the dynamic safety requirements, so in some\n+cases there is a performance cost to using safe code.  For example, a doubly-linked list is not a\n+tree structure and can only be represented with managed or reference-counted pointers in safe code.\n+By using `unsafe` blocks to represent the reverse links as raw pointers, it can be implemented with\n+only owned pointers.\n+\n+##### Behavior considered unsafe\n+\n+This is a list of behavior which is forbidden in all Rust code. Type checking provides the guarantee\n+that these issues are never caused by safe code. An `unsafe` block or function is responsible for\n+never invoking this behaviour or exposing an API making it possible for it to occur in safe code.\n+\n+* Data races\n+* Dereferencing a null/dangling raw pointer\n+* Mutating an immutable value/reference, if it is not marked as non-`Freeze`\n+* Reads of [undef](http://llvm.org/docs/LangRef.html#undefined-values) (uninitialized) memory\n+* Breaking the [pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules)\n+  with raw pointers (a subset of the rules used by C)\n+* Invoking undefined behavior via compiler intrinsics:\n+    * Indexing outside of the bounds of an object with `std::ptr::offset` (`offset` intrinsic), with\n+      the exception of one byte past the end which is permitted.\n+    * Using `std::ptr::copy_nonoverlapping_memory` (`memcpy32`/`memcpy64` instrinsics) on\n+      overlapping buffers\n+* Invalid values in primitive types, even in private fields/locals:\n+    * Dangling/null pointers in non-raw pointers, or slices\n+    * A value other than `false` (0) or `true` (1) in a `bool`\n+    * A discriminant in an `enum` not included in the type definition\n+    * A value in a `char` which is a surrogate or above `char::MAX`\n+    * non-UTF-8 byte sequences in a `str`\n+\n+##### Behaviour not considered unsafe\n+\n+This is a list of behaviour not considered *unsafe* in Rust terms, but that may be undesired.\n+\n+* Deadlocks\n+* Reading data from private fields (`std::repr`, `format!(\"{:?}\", x)`)\n+* Leaks due to reference count cycles, even in the global heap\n+* Exiting without calling destructors\n+* Sending signals\n+* Accessing/modifying the file system\n+* Unsigned integer overflow (well-defined as wrapping)\n+* Signed integer overflow (well-defined as two's complement representation wrapping)\n \n #### Diverging functions\n "}]}