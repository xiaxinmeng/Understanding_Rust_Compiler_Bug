{"sha": "b67f4283b3d04ef8e0504503123001cf642ec325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2N2Y0MjgzYjNkMDRlZjhlMDUwNDUwMzEyMzAwMWNmNjQyZWMzMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T15:30:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T15:30:32Z"}, "message": "Auto merge of #45065 - arielb1:not-correct, r=nikomatsakis\n\nfix logic error in #44269's `prune_cache_value_obligations`\n\nWe want to retain obligations that *contain* inference variables, not\nobligations that *don't contain* them, in order to fix #43132. Because\nof surrounding changes to inference, the ICE doesn't occur in its\noriginal case, but I believe it could still be made to occur on master.\n\nMaybe I should try to write a new test case? Certainly not right now\n(I'm mainly trying to get us a beta that we can ship) but maybe before\nwe land this PR on nightly?\n\nThis seems to cause a 10% performance regression in my imprecise\nattempt to benchmark item-body checking for #43613, but it's better to\nbe slow and right than fast and wrong. If we want to recover that, I\nthink we can change the constrained-type-parameter code to actually\ngive a list of projections that are important for resolving inference\nvariables and filter everything else out.", "tree": {"sha": "ec1b3a143b5c297fe43f382d27c3e17bc25cba50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1b3a143b5c297fe43f382d27c3e17bc25cba50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67f4283b3d04ef8e0504503123001cf642ec325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67f4283b3d04ef8e0504503123001cf642ec325", "html_url": "https://github.com/rust-lang/rust/commit/b67f4283b3d04ef8e0504503123001cf642ec325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67f4283b3d04ef8e0504503123001cf642ec325/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "html_url": "https://github.com/rust-lang/rust/commit/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c"}, {"sha": "91fdadba6103b6926ff0c886a6a5da002a80994a", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fdadba6103b6926ff0c886a6a5da002a80994a", "html_url": "https://github.com/rust-lang/rust/commit/91fdadba6103b6926ff0c886a6a5da002a80994a"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "0fa1b32ceb7f66931276e1c3d62d162f6474feb5", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b67f4283b3d04ef8e0504503123001cf642ec325/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67f4283b3d04ef8e0504503123001cf642ec325/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b67f4283b3d04ef8e0504503123001cf642ec325", "patch": "@@ -638,7 +638,7 @@ fn prune_cache_value_obligations<'a, 'gcx, 'tcx>(infcx: &'a InferCtxt<'a, 'gcx,\n                   // but we have `T: Foo<X = ?1>` and `?1: Bar<X =\n                   // ?0>`).\n                   ty::Predicate::Projection(ref data) =>\n-                      !infcx.any_unresolved_type_vars(&data.ty()),\n+                      infcx.any_unresolved_type_vars(&data.ty()),\n \n                   // We are only interested in `T: Foo<X = U>` predicates, whre\n                   // `U` references one of `unresolved_type_vars`. =)"}]}