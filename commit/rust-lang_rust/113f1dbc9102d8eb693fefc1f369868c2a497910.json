{"sha": "113f1dbc9102d8eb693fefc1f369868c2a497910", "node_id": "C_kwDOAAsO6NoAKDExM2YxZGJjOTEwMmQ4ZWI2OTNmZWZjMWYzNjk4NjhjMmE0OTc5MTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T14:08:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T14:08:56Z"}, "message": "Auto merge of #12880 - palango:while-fixup, r=Veykril\n\nAdd syntax fixup for while loops\n\nPart of https://github.com/rust-lang/rust-analyzer/issues/12777\n\nThis is a first iteration to gather some feedback. In particular I'm not sure if the curly braces should be added here, but I couldn't get the test to work without them. Any hints welcome!", "tree": {"sha": "e2b04d05171ed6481389567f032b461d262f2b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b04d05171ed6481389567f032b461d262f2b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113f1dbc9102d8eb693fefc1f369868c2a497910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113f1dbc9102d8eb693fefc1f369868c2a497910", "html_url": "https://github.com/rust-lang/rust/commit/113f1dbc9102d8eb693fefc1f369868c2a497910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113f1dbc9102d8eb693fefc1f369868c2a497910/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c0ac26456093b71837e20b0ff51655e0c230f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c0ac26456093b71837e20b0ff51655e0c230f7", "html_url": "https://github.com/rust-lang/rust/commit/c6c0ac26456093b71837e20b0ff51655e0c230f7"}, {"sha": "c16e4f260fb6b915767d18a59ab395cb46d82449", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16e4f260fb6b915767d18a59ab395cb46d82449", "html_url": "https://github.com/rust-lang/rust/commit/c16e4f260fb6b915767d18a59ab395cb46d82449"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "e46f43a878fe13c7597b2d0a23e456d35a537587", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 108, "deletions": 2, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/113f1dbc9102d8eb693fefc1f369868c2a497910/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113f1dbc9102d8eb693fefc1f369868c2a497910/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=113f1dbc9102d8eb693fefc1f369868c2a497910", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use mbe::{SyntheticToken, SyntheticTokenId, TokenMap};\n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, HasLoopBody},\n     match_ast, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n };\n use tt::Subtree;\n@@ -142,8 +142,59 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                         ]);\n                     }\n                 },\n+                ast::WhileExpr(it) => {\n+                    if it.condition().is_none() {\n+                        // insert placeholder token after the while token\n+                        let while_token = match it.while_token() {\n+                            Some(t) => t,\n+                            None => continue,\n+                        };\n+                        append.insert(while_token.into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::IDENT,\n+                                text: \"__ra_fixup\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                    if it.loop_body().is_none() {\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n+                ast::LoopExpr(it) => {\n+                    if it.loop_body().is_none() {\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n                 // FIXME: foo::\n-                // FIXME: for, loop, match etc.\n+                // FIXME: for, match etc.\n                 _ => (),\n             }\n         }\n@@ -376,6 +427,61 @@ fn foo() {\n             // the {} gets parsed as the condition, I think?\n             expect![[r#\"\n fn foo () {if {} {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn fixup_while_1() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn fixup_while_2() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while foo\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while foo {}}\n+\"#]],\n+        )\n+    }\n+    #[test]\n+    fn fixup_while_3() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while {}\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn fixup_loop() {\n+        check(\n+            r#\"\n+fn foo() {\n+    loop\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {loop {}}\n \"#]],\n         )\n     }"}]}