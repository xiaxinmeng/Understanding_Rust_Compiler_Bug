{"sha": "1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZDczNWQzYzFkN2FhYTllMDI2Y2U3NGVhMzQxYTI5MWZjZTkxZmQ=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-06T22:59:27Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-07T10:51:10Z"}, "message": "Fix broken tests", "tree": {"sha": "472586b4e35fa515691fd3bdc43758edf081eab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472586b4e35fa515691fd3bdc43758edf081eab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "html_url": "https://github.com/rust-lang/rust/commit/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/comments", "author": null, "committer": null, "parents": [{"sha": "fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb19205b1bfd565ca11132eb7deb64e0338d5ecd", "html_url": "https://github.com/rust-lang/rust/commit/fb19205b1bfd565ca11132eb7deb64e0338d5ecd"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c36b717ea0055f58f181bd60f8ad3792e4ecd61b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "patch": "@@ -964,7 +964,7 @@ mod test {\n     }\n \n     // this version doesn't care about getting comments or docstrings in.\n-    fn fake_print_crate(s: @pprust::ps, crate: ast::crate) {\n+    fn fake_print_crate(s: @pprust::ps, crate: &ast::crate) {\n         pprust::print_mod(s, &crate.node.module, crate.node.attrs);\n     }\n \n@@ -995,7 +995,7 @@ mod test {\n         let ast = string_to_crate(@\"#[a] mod b {fn c (d : e, f : g) {h!(i,j,k);l;m}}\");\n         assert_pred!(matches_codepattern,\n                      \"matches_codepattern\",\n-                     pprust::to_str(zz_fold.fold_crate(ast),fake_print_crate,\n+                     pprust::to_str(&zz_fold.fold_crate(ast),fake_print_crate,\n                                     token::get_ident_interner()),\n                      ~\"#[a]mod zz{fn zz(zz:zz,zz:zz){zz!(zz,zz,zz);zz;zz}}\");\n     }\n@@ -1007,7 +1007,7 @@ mod test {\n => (g $(d $d $e)+))} \");\n         assert_pred!(matches_codepattern,\n                      \"matches_codepattern\",\n-                     pprust::to_str(zz_fold.fold_crate(ast),fake_print_crate,\n+                     pprust::to_str(&zz_fold.fold_crate(ast),fake_print_crate,\n                                     token::get_ident_interner()),\n                      ~\"zz!zz((zz$zz:zz$(zz $zz:zz)zz+=>(zz$(zz$zz$zz)+)))\");\n     }"}, {"sha": "fdf3f0e639ea1923548e337246ab15cf28757143", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "patch": "@@ -482,15 +482,15 @@ mod test {\n         assert_eq!(parser.parse_arg_general(true),\n                    ast::arg{\n                        is_mutbl: false,\n-                       ty: @ast::Ty{id:3, // fixme\n+                       ty: ast::Ty{id:3, // fixme\n                                     node: ast::ty_path(ast::Path{\n                                         span:sp(4,4), // this is bizarre...\n                                         // check this in the original parser?\n                                         global:false,\n                                         idents:~[str_to_ident(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       @None, 2),\n+                                                       None, 2),\n                                     span:sp(4,7)},\n                        pat: @ast::pat{id:1,\n                                       node: ast::pat_ident(ast::bind_infer,\n@@ -519,14 +519,14 @@ mod test {\n                             node: ast::item_fn(ast::fn_decl{\n                                 inputs: ~[ast::arg{\n                                     is_mutbl: false,\n-                                    ty: @ast::Ty{id:3, // fixme\n+                                    ty: ast::Ty{id:3, // fixme\n                                                 node: ast::ty_path(ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n                                         idents:~[str_to_ident(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       @None, 2),\n+                                                       None, 2),\n                                                 span:sp(10,13)},\n                                     pat: @ast::pat{id:1, // fixme\n                                                    node: ast::pat_ident(\n@@ -542,7 +542,7 @@ mod test {\n                                                   span: sp(6,7)},\n                                     id: 4 // fixme\n                                 }],\n-                                output: @ast::Ty{id:5, // fixme\n+                                output: ast::Ty{id:5, // fixme\n                                                  node: ast::ty_nil,\n                                                  span:sp(15,15)}, // not sure\n                                 cf: ast::return_val"}, {"sha": "b545c56778e90d7be141cef85f0affd2fb82b581", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd735d3c1d7aaa9e026ce74ea341a291fce91fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1fd735d3c1d7aaa9e026ce74ea341a291fce91fd", "patch": "@@ -2272,7 +2272,7 @@ mod test {\n \n         let decl = ast::fn_decl {\n             inputs: ~[],\n-            output: @ast::Ty {id: 0,\n+            output: ast::Ty {id: 0,\n                               node: ast::ty_nil,\n                               span: codemap::dummy_sp()},\n             cf: ast::return_val"}]}