{"sha": "f3d93b6c625a0837cd6f2bedc713436e56856b5d", "node_id": "C_kwDOAAsO6NoAKGYzZDkzYjZjNjI1YTA4MzdjZDZmMmJlZGM3MTM0MzZlNTY4NTZiNWQ", "commit": {"author": {"name": "cole", "email": "cole@swift-mail.com", "date": "2022-06-04T22:05:33Z"}, "committer": {"name": "cole", "email": "cole@swift-mail.com", "date": "2022-06-04T22:05:33Z"}, "message": "Allow unstable items to be re-exported unstably without requiring the feature be enabled", "tree": {"sha": "6c70a63b336294ef2621b5befbba23265b6efe48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c70a63b336294ef2621b5befbba23265b6efe48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d93b6c625a0837cd6f2bedc713436e56856b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d93b6c625a0837cd6f2bedc713436e56856b5d", "html_url": "https://github.com/rust-lang/rust/commit/f3d93b6c625a0837cd6f2bedc713436e56856b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d93b6c625a0837cd6f2bedc713436e56856b5d/comments", "author": {"login": "semicoleon", "id": 6548738, "node_id": "MDQ6VXNlcjY1NDg3Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6548738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semicoleon", "html_url": "https://github.com/semicoleon", "followers_url": "https://api.github.com/users/semicoleon/followers", "following_url": "https://api.github.com/users/semicoleon/following{/other_user}", "gists_url": "https://api.github.com/users/semicoleon/gists{/gist_id}", "starred_url": "https://api.github.com/users/semicoleon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semicoleon/subscriptions", "organizations_url": "https://api.github.com/users/semicoleon/orgs", "repos_url": "https://api.github.com/users/semicoleon/repos", "events_url": "https://api.github.com/users/semicoleon/events{/privacy}", "received_events_url": "https://api.github.com/users/semicoleon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semicoleon", "id": 6548738, "node_id": "MDQ6VXNlcjY1NDg3Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6548738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semicoleon", "html_url": "https://github.com/semicoleon", "followers_url": "https://api.github.com/users/semicoleon/followers", "following_url": "https://api.github.com/users/semicoleon/following{/other_user}", "gists_url": "https://api.github.com/users/semicoleon/gists{/gist_id}", "starred_url": "https://api.github.com/users/semicoleon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semicoleon/subscriptions", "organizations_url": "https://api.github.com/users/semicoleon/orgs", "repos_url": "https://api.github.com/users/semicoleon/repos", "events_url": "https://api.github.com/users/semicoleon/events{/privacy}", "received_events_url": "https://api.github.com/users/semicoleon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a437b2ca081bc12425a3318cb66aade9824cbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a437b2ca081bc12425a3318cb66aade9824cbae", "html_url": "https://github.com/rust-lang/rust/commit/0a437b2ca081bc12425a3318cb66aade9824cbae"}], "stats": {"total": 185, "additions": 174, "deletions": 11}, "files": [{"sha": "62e0fec06615ed347df5916e3ad23aef13395c09", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -9,10 +9,9 @@ use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::{self, HirId};\n+use rustc_hir::{self as hir, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n use rustc_session::lint::{BuiltinLintDiagnostics, Level, Lint, LintBuffer};\n@@ -306,6 +305,14 @@ fn suggestion_for_allocator_api(\n     None\n }\n \n+/// An override option for eval_stability.\n+pub enum AllowUnstable {\n+    /// Don't emit an unstable error for the item\n+    Yes,\n+    /// Handle the item normally\n+    No,\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates the stability of an item.\n     ///\n@@ -322,6 +329,28 @@ impl<'tcx> TyCtxt<'tcx> {\n         id: Option<HirId>,\n         span: Span,\n         method_span: Option<Span>,\n+    ) -> EvalResult {\n+        self.eval_stability_allow_unstable(def_id, id, span, method_span, AllowUnstable::No)\n+    }\n+\n+    /// Evaluates the stability of an item.\n+    ///\n+    /// Returns `EvalResult::Allow` if the item is stable, or unstable but the corresponding\n+    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending\n+    /// unstable feature otherwise.\n+    ///\n+    /// If `id` is `Some(_)`, this function will also check if the item at `def_id` has been\n+    /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n+    /// `id`.\n+    ///\n+    /// Pass `AllowUnstable::Yes` to `allow_unstable` to force an unstable item to be allowed. Deprecation warnings will be emitted normally.\n+    pub fn eval_stability_allow_unstable(\n+        self,\n+        def_id: DefId,\n+        id: Option<HirId>,\n+        span: Span,\n+        method_span: Option<Span>,\n+        allow_unstable: AllowUnstable,\n     ) -> EvalResult {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n@@ -419,6 +448,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n \n+                if matches!(allow_unstable, AllowUnstable::Yes) {\n+                    return EvalResult::Allow;\n+                }\n+\n                 let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);\n                 EvalResult::Deny { feature, reason, issue, suggestion, is_soft }\n             }\n@@ -445,11 +478,38 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: Span,\n         method_span: Option<Span>,\n     ) {\n-        self.check_optional_stability(def_id, id, span, method_span, |span, def_id| {\n-            // The API could be uncallable for other reasons, for example when a private module\n-            // was referenced.\n-            self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n-        })\n+        self.check_stability_allow_unstable(def_id, id, span, method_span, AllowUnstable::No)\n+    }\n+\n+    /// Checks if an item is stable or error out.\n+    ///\n+    /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n+    /// exist, emits an error.\n+    ///\n+    /// This function will also check if the item is deprecated.\n+    /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n+    ///\n+    /// Pass `AllowUnstable::Yes` to `allow_unstable` to force an unstable item to be allowed. Deprecation warnings will be emitted normally.\n+    pub fn check_stability_allow_unstable(\n+        self,\n+        def_id: DefId,\n+        id: Option<HirId>,\n+        span: Span,\n+        method_span: Option<Span>,\n+        allow_unstable: AllowUnstable,\n+    ) {\n+        self.check_optional_stability(\n+            def_id,\n+            id,\n+            span,\n+            method_span,\n+            allow_unstable,\n+            |span, def_id| {\n+                // The API could be uncallable for other reasons, for example when a private module\n+                // was referenced.\n+                self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n+            },\n+        )\n     }\n \n     /// Like `check_stability`, except that we permit items to have custom behaviour for\n@@ -462,14 +522,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         id: Option<HirId>,\n         span: Span,\n         method_span: Option<Span>,\n+        allow_unstable: AllowUnstable,\n         unmarked: impl FnOnce(Span, DefId),\n     ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit();\n             })\n         };\n-        match self.eval_stability(def_id, id, span, method_span) {\n+        match self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable) {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(\n                 self.sess,"}, {"sha": "144a60faad265610c7e937d137b0370119ef2cf4", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -9,10 +9,10 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n+use rustc_hir::{FieldDef, Generics, HirId, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_middle::middle::stability::{DeprecationEntry, Index};\n+use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n use rustc_middle::ty::{self, query::Providers, TyCtxt};\n use rustc_session::lint;\n use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n@@ -807,12 +807,46 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             let method_span = path.segments.last().map(|s| s.ident.span);\n-            self.tcx.check_stability(def_id, Some(id), path.span, method_span)\n+            self.tcx.check_stability_allow_unstable(\n+                def_id,\n+                Some(id),\n+                path.span,\n+                method_span,\n+                if is_unstable_reexport(self.tcx, id) {\n+                    AllowUnstable::Yes\n+                } else {\n+                    AllowUnstable::No\n+                },\n+            )\n         }\n         intravisit::walk_path(self, path)\n     }\n }\n \n+/// Check whether a path is a `use` item that has been marked as unstable.\n+///\n+/// See issue #94972 for details on why this is a special case\n+fn is_unstable_reexport<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId) -> bool {\n+    // Get the LocalDefId so we can lookup the item to check the kind.\n+    let Some(def_id) = tcx.hir().opt_local_def_id(id) else { return false; };\n+\n+    let Some(stab) = tcx.stability().local_stability(def_id) else {\n+        return false;\n+    };\n+\n+    if stab.level.is_stable() {\n+        // The re-export is not marked as unstable, don't override\n+        return false;\n+    }\n+\n+    // If this is a path that isn't a use, we don't need to do anything special\n+    if !matches!(tcx.hir().item(hir::ItemId { def_id }).kind, ItemKind::Use(..)) {\n+        return false;\n+    }\n+\n+    true\n+}\n+\n struct CheckTraitImplStable<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fully_stable: bool,"}, {"sha": "18a1cab76d98e9ee1518c3a73d6ebe59907475db", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -24,6 +24,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs};\n+use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, EarlyBinder, Ty, TyCtxt, TypeFoldable};\n@@ -426,6 +427,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             Some(arg.id()),\n                             arg.span(),\n                             None,\n+                            AllowUnstable::No,\n                             |_, _| {\n                                 // Default generic parameters may not be marked\n                                 // with stability attributes, i.e. when the"}, {"sha": "937913954a7910d937ccfe4031d068592c702b1b", "filename": "src/test/ui/stability-attribute/allow-unstable-reexport.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.rs?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -0,0 +1,30 @@\n+// Allow an unstable re-export without requiring a feature gate.\n+// #94972\n+\n+// aux-build:lint-stability.rs\n+// aux-build:lint-stability-reexport.rs\n+#![feature(staged_api)]\n+#![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n+\n+extern crate lint_stability;\n+extern crate lint_stability_reexport;\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+pub use lint_stability::unstable;\n+\n+// We want to confirm that using a re-export through another crate behaves\n+// the same way as using an item directly\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+pub use lint_stability_reexport::unstable_text;\n+\n+// Ensure items which aren't marked as unstable can't re-export unstable items\n+#[stable(feature = \"lint_stability\", since = \"1.0.0\")]\n+pub use lint_stability::unstable as unstable2;\n+//~^ ERROR use of unstable library feature 'unstable_test_feature'\n+\n+fn main() {\n+    // Since we didn't enable the feature in this crate, we still can't\n+    // use these items, even though they're in scope from the `use`s which are now allowed.\n+    unstable(); //~ ERROR use of unstable library feature 'unstable_test_feature'\n+    unstable_text(); //~ ERROR use of unstable library feature 'unstable_test_feature'\n+}"}, {"sha": "a11da9dc8a7beb290a5212ac2b575359da47c7fc", "filename": "src/test/ui/stability-attribute/allow-unstable-reexport.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-unstable-reexport.stderr?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/allow-unstable-reexport.rs:22:9\n+   |\n+LL | pub use lint_stability::unstable as unstable2;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/allow-unstable-reexport.rs:28:5\n+   |\n+LL |     unstable();\n+   |     ^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature': text\n+  --> $DIR/allow-unstable-reexport.rs:29:5\n+   |\n+LL |     unstable_text();\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9884731d562e9fc5c749c8fb80b490bb347d989c", "filename": "src/test/ui/stability-attribute/auxiliary/lint-stability-reexport.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d93b6c625a0837cd6f2bedc713436e56856b5d/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability-reexport.rs?ref=f3d93b6c625a0837cd6f2bedc713436e56856b5d", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n+\n+extern crate lint_stability;\n+\n+// Re-exporting without enabling the feature \"unstable_test_feature\" in this crate\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+pub use lint_stability::unstable_text;"}]}