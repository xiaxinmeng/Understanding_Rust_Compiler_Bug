{"sha": "526fae75413392dcfd05256145c5503011d9c89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNmZhZTc1NDEzMzkyZGNmZDA1MjU2MTQ1YzU1MDMwMTFkOWM4OWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T21:06:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T21:06:31Z"}, "message": "GetProcAddress: basic validation for hModule argument", "tree": {"sha": "a21e777732f0ec4187a45059853c17145dc7dddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a21e777732f0ec4187a45059853c17145dc7dddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526fae75413392dcfd05256145c5503011d9c89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526fae75413392dcfd05256145c5503011d9c89a", "html_url": "https://github.com/rust-lang/rust/commit/526fae75413392dcfd05256145c5503011d9c89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526fae75413392dcfd05256145c5503011d9c89a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09decb398f86ebfb7938b5aca39202acb50d45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09decb398f86ebfb7938b5aca39202acb50d45e", "html_url": "https://github.com/rust-lang/rust/commit/f09decb398f86ebfb7938b5aca39202acb50d45e"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "60448406a67de829817b640e9b146bca504e258e", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/526fae75413392dcfd05256145c5503011d9c89a/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526fae75413392dcfd05256145c5503011d9c89a/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=526fae75413392dcfd05256145c5503011d9c89a", "patch": "@@ -206,6 +206,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n+            // Dynamic symbol loading\n+            \"GetProcAddress\" => {\n+                #[allow(non_snake_case)]\n+                let &[hModule, lpProcName] = check_arg_count(args)?;\n+                this.read_scalar(hModule)?.not_undef()?;\n+                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n+                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n+                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n+                    this.write_scalar(Scalar::from(ptr), dest)?;\n+                } else {\n+                    this.write_null(dest)?;\n+                }\n+            }\n+\n             // Miscellaneous\n             \"SystemFunction036\" => {\n                 // The actual name of 'RtlGenRandom'\n@@ -258,17 +272,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Pretend this does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"GetProcAddress\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n-                #[allow(non_snake_case)]\n-                let &[_hModule, lpProcName] = check_arg_count(args)?;\n-                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n-                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n-                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n-                    this.write_scalar(Scalar::from(ptr), dest)?;\n-                } else {\n-                    this.write_null(dest)?;\n-                }\n-            }\n             \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_hConsoleOutput, _wAttribute] = check_arg_count(args)?;"}]}