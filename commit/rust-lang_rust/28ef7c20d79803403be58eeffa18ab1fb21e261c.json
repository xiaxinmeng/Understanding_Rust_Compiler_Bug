{"sha": "28ef7c20d79803403be58eeffa18ab1fb21e261c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWY3YzIwZDc5ODAzNDAzYmU1OGVlZmZhMThhYjFmYjIxZTI2MWM=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-12T14:24:48Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-17T14:24:56Z"}, "message": "hir_ty: deal with TypeRef::Macro in HirFormatter", "tree": {"sha": "8fc1bc1b94bec220d6ab1c1bb4c67d6676b20244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fc1bc1b94bec220d6ab1c1bb4c67d6676b20244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ef7c20d79803403be58eeffa18ab1fb21e261c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ef7c20d79803403be58eeffa18ab1fb21e261c", "html_url": "https://github.com/rust-lang/rust/commit/28ef7c20d79803403be58eeffa18ab1fb21e261c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ef7c20d79803403be58eeffa18ab1fb21e261c/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf3b4f1e208247c9d171273dabff9c6b3c98a240", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3b4f1e208247c9d171273dabff9c6b3c98a240", "html_url": "https://github.com/rust-lang/rust/commit/cf3b4f1e208247c9d171273dabff9c6b3c98a240"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "62500602a717623ae1ead7331eb6273b3b8aec30", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28ef7c20d79803403be58eeffa18ab1fb21e261c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ef7c20d79803403be58eeffa18ab1fb21e261c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=28ef7c20d79803403be58eeffa18ab1fb21e261c", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{hygiene::Hygiene, name::AsName, ExpansionInfo};\n+use hir_expand::{name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -854,8 +854,7 @@ impl<'a> SemanticsScope<'a> {\n     /// Resolve a path as-if it was written at the given scope. This is\n     /// necessary a heuristic, as it doesn't take hygiene into account.\n     pub fn speculative_resolve(&self, path: &ast::Path) -> Option<PathResolution> {\n-        let hygiene = Hygiene::new(self.db.upcast(), self.file_id);\n-        let ctx = body::LowerCtx::with_hygiene(&hygiene);\n+        let ctx = body::LowerCtx::new(self.db.upcast(), self.file_id);\n         let path = Path::from_src(path.clone(), &ctx)?;\n         resolve_hir_path(self.db, &self.resolver, &path)\n     }"}, {"sha": "4fb7d9cf2fd7da7fbab1c96ec749ca16cf7c7e7e", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28ef7c20d79803403be58eeffa18ab1fb21e261c/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ef7c20d79803403be58eeffa18ab1fb21e261c/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=28ef7c20d79803403be58eeffa18ab1fb21e261c", "patch": "@@ -9,6 +9,7 @@ use std::{\n \n use chalk_ir::BoundVar;\n use hir_def::{\n+    body,\n     db::DefDatabase,\n     find_path,\n     generics::TypeParamProvenance,\n@@ -18,7 +19,7 @@ use hir_def::{\n     visibility::Visibility,\n     AssocContainerId, Lookup, ModuleId, TraitId,\n };\n-use hir_expand::name::Name;\n+use hir_expand::{hygiene::Hygiene, name::Name};\n \n use crate::{\n     const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n@@ -997,7 +998,19 @@ impl HirDisplay for TypeRef {\n                 write!(f, \"dyn \")?;\n                 f.write_joined(bounds, \" + \")?;\n             }\n-            TypeRef::Error | TypeRef::Macro(_) => write!(f, \"{{error}}\")?,\n+            TypeRef::Macro(macro_call) => {\n+                let macro_call = macro_call.to_node(f.db.upcast());\n+                let ctx = body::LowerCtx::with_hygiene(&Hygiene::new_unhygienic());\n+                match macro_call.path() {\n+                    Some(path) => match Path::from_src(path, &ctx) {\n+                        Some(path) => path.hir_fmt(f)?,\n+                        None => write!(f, \"{{macro}}\")?,\n+                    },\n+                    None => write!(f, \"{{macro}}\")?,\n+                }\n+                write!(f, \"!(..)\")?;\n+            }\n+            TypeRef::Error => write!(f, \"{{error}}\")?,\n         }\n         Ok(())\n     }"}]}