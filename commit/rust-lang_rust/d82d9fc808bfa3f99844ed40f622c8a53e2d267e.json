{"sha": "d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmQ5ZmM4MDhiZmEzZjk5ODQ0ZWQ0MGY2MjJjOGE1M2UyZDI2N2U=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-07T18:41:32Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-13T22:14:07Z"}, "message": "utils: Add CodeMapSpanUtils trait for span_* methods\n\nThis commit adds a CodeMapSpanUtils extension trait on CodeMap, and\nmoves some functions to methods there:\n  - span_after\n  - span_after_last\n  - span_before\n\nThis better reflects them being lookup methods on the codemap.", "tree": {"sha": "7ab35a3dce6c6039d64d7bb2fc5043ea2d21c379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab35a3dce6c6039d64d7bb2fc5043ea2d21c379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "html_url": "https://github.com/rust-lang/rust/commit/d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80db099558e1a15352b7e7911aa3e3d002baa210", "url": "https://api.github.com/repos/rust-lang/rust/commits/80db099558e1a15352b7e7911aa3e3d002baa210", "html_url": "https://github.com/rust-lang/rust/commit/80db099558e1a15352b7e7911aa3e3d002baa210"}], "stats": {"total": 145, "additions": 75, "deletions": 70}, "files": [{"sha": "10d8330f51a467616b2583e8561ab0a29a55b867", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -20,7 +20,7 @@ use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n use string::{StringFormat, rewrite_string};\n-use utils::{span_after, span_before, extra_offset, last_line_width, wrap_str, binary_search,\n+use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n             first_line_width, semicolon_for_stmt};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle};\n@@ -39,7 +39,7 @@ impl Rewrite for ast::Expr {\n         let result = match self.node {\n             ast::Expr_::ExprVec(ref expr_vec) => {\n                 rewrite_array(expr_vec.iter().map(|e| &**e),\n-                              mk_sp(span_after(self.span, \"[\", context.codemap), self.span.hi),\n+                              mk_sp(context.codemap.span_after(self.span, \"[\"), self.span.hi),\n                               context,\n                               width,\n                               offset)\n@@ -332,7 +332,7 @@ fn rewrite_closure(capture: ast::CaptureClause,\n                                  |arg| span_lo_for_arg(arg),\n                                  |arg| span_hi_for_arg(arg),\n                                  |arg| arg.rewrite(context, budget, argument_offset),\n-                                 span_after(span, \"|\", context.codemap),\n+                                 context.codemap.span_after(span, \"|\"),\n                                  body.span.lo);\n     let item_vec = arg_items.collect::<Vec<_>>();\n     let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, horizontal_budget);\n@@ -660,9 +660,9 @@ fn rewrite_if_else(context: &RewriteContext,\n \n     let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n \n-    let between_if_cond = mk_sp(span_after(span, \"if\", context.codemap),\n+    let between_if_cond = mk_sp(context.codemap.span_after(span, \"if\"),\n                                 pat.map_or(cond.span.lo,\n-                                           |_| span_before(span, \"let\", context.codemap)));\n+                                           |_| context.codemap.span_before(span, \"let\")));\n \n     let between_if_cond_comment = extract_comment(between_if_cond, &context, offset, width);\n \n@@ -707,17 +707,17 @@ fn rewrite_if_else(context: &RewriteContext,\n         };\n \n         let between_if_else_block = mk_sp(if_block.span.hi,\n-                                          span_before(mk_sp(if_block.span.hi, else_block.span.lo),\n-                                                      \"else\",\n-                                                      context.codemap));\n+                                          context.codemap.span_before(mk_sp(if_block.span.hi,\n+                                                                            else_block.span.lo),\n+                                                                      \"else\"));\n         let between_if_else_block_comment = extract_comment(between_if_else_block,\n                                                             &context,\n                                                             offset,\n                                                             width);\n \n-        let after_else = mk_sp(span_after(mk_sp(if_block.span.hi, else_block.span.lo),\n-                                          \"else\",\n-                                          context.codemap),\n+        let after_else = mk_sp(context.codemap\n+                                      .span_after(mk_sp(if_block.span.hi, else_block.span.lo),\n+                                                  \"else\"),\n                                else_block.span.lo);\n         let after_else_comment = extract_comment(after_else, &context, offset, width);\n \n@@ -863,9 +863,8 @@ fn rewrite_match(context: &RewriteContext,\n     let arm_indent = nested_context.block_indent;\n     let arm_indent_str = arm_indent.to_string(context.config);\n \n-    let open_brace_pos = span_after(mk_sp(cond.span.hi, arm_start_pos(&arms[0])),\n-                                    \"{\",\n-                                    context.codemap);\n+    let open_brace_pos = context.codemap\n+                                .span_after(mk_sp(cond.span.hi, arm_start_pos(&arms[0])), \"{\");\n \n     for (i, arm) in arms.iter().enumerate() {\n         // Make sure we get the stuff between arms.\n@@ -1275,7 +1274,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         None => return Err(Ordering::Greater),\n     };\n \n-    let span_lo = span_after(span, \"(\", context.codemap);\n+    let span_lo = context.codemap.span_after(span, \"(\");\n     let span = mk_sp(span_lo, span.hi);\n \n     let extra_offset = extra_offset(&callee_str, offset);\n@@ -1461,7 +1460,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                                      }\n                                  }\n                              },\n-                             span_after(span, \"{\", context.codemap),\n+                             context.codemap.span_after(span, \"{\"),\n                              span.hi);\n     let item_vec = items.collect::<Vec<_>>();\n \n@@ -1569,7 +1568,7 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n         return items.next().unwrap().rewrite(context, budget, indent).map(|s| format!(\"({},)\", s));\n     }\n \n-    let list_lo = span_after(span, \"(\", context.codemap);\n+    let list_lo = context.codemap.span_after(span, \"(\");\n     let items = itemize_list(context.codemap,\n                              items,\n                              \")\","}, {"sha": "8fa0347329c846d30cd3da077bf276ba58727e8c", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -11,7 +11,7 @@\n use Indent;\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n use types::rewrite_path;\n-use utils::span_after;\n+use utils::CodeMapSpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n \n use syntax::ast;\n@@ -130,7 +130,7 @@ pub fn rewrite_use_list(width: usize,\n                                 |vpi| vpi.span.lo,\n                                 |vpi| vpi.span.hi,\n                                 rewrite_path_item,\n-                                span_after(span, \"{\", context.codemap),\n+                                context.codemap.span_after(span, \"{\"),\n                                 span.hi);\n         items.extend(iter);\n         items"}, {"sha": "4ba0897ef620da425c1a56fc1f84c6a0c6637fe9", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -11,9 +11,8 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use Indent;\n-use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines,\n-            span_after_last};\n+use utils::{CodeMapSpanUtils, format_mutability, format_visibility, contains_skip, end_typaram,\n+            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n@@ -452,7 +451,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         result.push_str(format_unsafety(unsafety));\n         result.push_str(\"impl\");\n \n-        let lo = span_after(item.span, \"impl\", context.codemap);\n+        let lo = context.codemap.span_after(item.span, \"impl\");\n         let hi = match *trait_ref {\n             Some(ref tr) => tr.path.span.lo,\n             None => self_ty.span.lo,\n@@ -633,7 +632,7 @@ fn format_struct_struct(context: &RewriteContext,\n     let header_str = format_header(item_name, ident, vis);\n     result.push_str(&header_str);\n \n-    let body_lo = span_after(span, \"{\", context.codemap);\n+    let body_lo = context.codemap.span_after(span, \"{\");\n \n     let generics_str = match generics {\n         Some(g) => {\n@@ -680,7 +679,7 @@ fn format_struct_struct(context: &RewriteContext,\n                              },\n                              |field| field.node.ty.span.hi,\n                              |field| field.rewrite(context, item_budget, item_indent),\n-                             span_after(span, \"{\", context.codemap),\n+                             context.codemap.span_after(span, \"{\"),\n                              span.hi);\n     // 1 = ,\n     let budget = context.config.max_width - offset.width() + context.config.tab_spaces - 1;\n@@ -762,7 +761,7 @@ fn format_tuple_struct(context: &RewriteContext,\n                              },\n                              |field| field.node.ty.span.hi,\n                              |field| field.rewrite(context, item_budget, item_indent),\n-                             span_after(span, \"(\", context.codemap),\n+                             context.codemap.span_after(span, \"(\"),\n                              span.hi);\n     let body = try_opt!(format_item_list(items, item_budget, item_indent, context.config));\n     result.push_str(&body);\n@@ -798,7 +797,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n     result.push_str(&ident.to_string());\n \n     let generics_indent = indent + result.len();\n-    let generics_span = mk_sp(span_after(span, \"type\", context.codemap), ty.span.lo);\n+    let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n     let generics_width = context.config.max_width - \" =\".len();\n     let generics_str = try_opt!(rewrite_generics(context,\n                                                  generics,\n@@ -1152,7 +1151,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let args_start = generics.ty_params\n                              .last()\n                              .map_or(span.lo, |tp| end_typaram(tp));\n-    let args_span = mk_sp(span_after(mk_sp(args_start, span.hi), \"(\", context.codemap),\n+    let args_span = mk_sp(context.codemap.span_after(mk_sp(args_start, span.hi), \"(\"),\n                           span_for_return(&fd.output).lo);\n     let arg_str = try_opt!(rewrite_args(context,\n                                         &fd.inputs,\n@@ -1304,7 +1303,7 @@ fn rewrite_args(context: &RewriteContext,\n     if args.len() >= min_args || variadic {\n         let comment_span_start = if min_args == 2 {\n             let reduced_span = mk_sp(span.lo, args[1].ty.span.lo);\n-            span_after_last(reduced_span, \",\", context.codemap)\n+            context.codemap.span_after_last(reduced_span, \",\")\n         } else {\n             span.lo\n         };\n@@ -1316,7 +1315,7 @@ fn rewrite_args(context: &RewriteContext,\n \n         let variadic_arg = if variadic {\n             let variadic_span = mk_sp(args.last().unwrap().ty.span.hi, span.hi);\n-            let variadic_start = span_after(variadic_span, \"...\", context.codemap) - BytePos(3);\n+            let variadic_start = context.codemap.span_after(variadic_span, \"...\") - BytePos(3);\n             Some(ArgumentKind::Variadic(variadic_start))\n         } else {\n             None\n@@ -1476,7 +1475,7 @@ fn rewrite_generics(context: &RewriteContext,\n                              |&(sp, _)| sp.hi,\n                              // FIXME: don't clone\n                              |&(_, ref str)| str.clone(),\n-                             span_after(span, \"<\", context.codemap),\n+                             context.codemap.span_after(span, \"<\"),\n                              span.hi);\n     let list_str = try_opt!(format_item_list(items, h_budget, offset, context.config));\n "}, {"sha": "324c68d750af5e345c4457dd236b2a2e4758fb2f", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -28,7 +28,7 @@ use Indent;\n use rewrite::RewriteContext;\n use expr::{rewrite_call, rewrite_array};\n use comment::FindUncommented;\n-use utils::{wrap_str, span_after};\n+use utils::{CodeMapSpanUtils, wrap_str};\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n \n@@ -104,9 +104,8 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             // Format macro invocation as array literal.\n             let extra_offset = macro_name.len();\n             let rewrite = try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                                 mk_sp(span_after(mac.span,\n-                                                                  original_style.opener(),\n-                                                                  context.codemap),\n+                                                 mk_sp(context.codemap.span_after(mac.span,\n+                                                                  original_style.opener()),\n                                                        mac.span.hi - BytePos(1)),\n                                                  context,\n                                                  try_opt!(width.checked_sub(extra_offset)),"}, {"sha": "b176327ab15cb7b8e121f23475f28f98d489474b", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -10,7 +10,7 @@\n \n use Indent;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, format_mutability, span_after};\n+use utils::{CodeMapSpanUtils, wrap_str, format_mutability};\n use lists::{format_item_list, itemize_list};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use types::rewrite_path;\n@@ -84,7 +84,7 @@ impl Rewrite for Pat {\n                                                      |item| item.span.lo,\n                                                      |item| item.span.hi,\n                                                      |item| item.rewrite(context, width, offset),\n-                                                     span_after(self.span, \"(\", context.codemap),\n+                                                     context.codemap.span_after(self.span, \"(\"),\n                                                      self.span.hi);\n                             Some(format!(\"{}({})\",\n                                          path_str,\n@@ -141,7 +141,7 @@ impl Rewrite for Pat {\n                                          |f| f.span.lo,\n                                          |f| f.span.hi,\n                                          |f| f.node.rewrite(context, budget, offset),\n-                                         span_after(self.span, \"{\", context.codemap),\n+                                         context.codemap.span_after(self.span, \"{\"),\n                                          self.span.hi);\n                 let mut field_string = try_opt!(format_item_list(items,\n                                                                  budget,"}, {"sha": "917a3839d5441a6a7dd54e257a11c943d8e87ddb", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -19,7 +19,7 @@ use syntax::abi;\n use {Indent, Spanned};\n use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, span_after, format_mutability, wrap_str};\n+use utils::{CodeMapSpanUtils, extra_offset, format_mutability, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n \n@@ -183,7 +183,7 @@ fn rewrite_segment(expr_context: bool,\n                                  .collect::<Vec<_>>();\n \n             let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n-            let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi), \"<\", context.codemap);\n+            let list_lo = context.codemap.span_after(codemap::mk_sp(*span_lo, span_hi), \"<\");\n             let separator = if expr_context {\n                 \"::\"\n             } else {\n@@ -246,7 +246,7 @@ fn format_function_type<'a, I>(inputs: I,\n     let budget = try_opt!(width.checked_sub(2));\n     // 1 for (\n     let offset = offset + 1;\n-    let list_lo = span_after(span, \"(\", context.codemap);\n+    let list_lo = context.codemap.span_after(span, \"(\");\n     let items = itemize_list(context.codemap,\n                              inputs,\n                              \")\","}, {"sha": "5c2bca734324520fb6748fe3d75f22d230663641", "filename": "src/utils.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -20,42 +20,50 @@ use rewrite::{Rewrite, RewriteContext};\n \n use SKIP_ANNOTATION;\n \n-// Computes the length of a string's last line, minus offset.\n-#[inline]\n-pub fn extra_offset(text: &str, offset: Indent) -> usize {\n-    match text.rfind('\\n') {\n-        // 1 for newline character\n-        Some(idx) => text.len() - idx - 1 - offset.width(),\n-        None => text.len(),\n-    }\n+pub trait CodeMapSpanUtils {\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos;\n }\n \n-#[inline]\n-pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n-    let snippet = codemap.span_to_snippet(original).unwrap();\n-    let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n+impl CodeMapSpanUtils for CodeMap {\n+    #[inline]\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n \n-    original.lo + BytePos(offset as u32)\n-}\n+        original.lo + BytePos(offset as u32)\n+    }\n \n-#[inline]\n-pub fn span_before(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n-    let snippet = codemap.span_to_snippet(original).unwrap();\n-    let offset = snippet.find_uncommented(needle).unwrap();\n+    #[inline]\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let mut offset = 0;\n \n-    original.lo + BytePos(offset as u32)\n-}\n+        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n+            offset += additional_offset + needle.len();\n+        }\n \n-#[inline]\n-pub fn span_after_last(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n-    let snippet = codemap.span_to_snippet(original).unwrap();\n-    let mut offset = 0;\n+        original.lo + BytePos(offset as u32)\n+    }\n+\n+    #[inline]\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap();\n \n-    while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n-        offset += additional_offset + needle.len();\n+        original.lo + BytePos(offset as u32)\n     }\n+}\n \n-    original.lo + BytePos(offset as u32)\n+// Computes the length of a string's last line, minus offset.\n+#[inline]\n+pub fn extra_offset(text: &str, offset: Indent) -> usize {\n+    match text.rfind('\\n') {\n+        // 1 for newline character\n+        Some(idx) => text.len() - idx - 1 - offset.width(),\n+        None => text.len(),\n+    }\n }\n \n #[inline]"}, {"sha": "76cdf54394652d392ac78f3cb0738579788e9ae4", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d9fc808bfa3f99844ed40f622c8a53e2d267e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d82d9fc808bfa3f99844ed40f622c8a53e2d267e", "patch": "@@ -16,7 +16,7 @@ use syntax::visit;\n use strings::string_buffer::StringBuffer;\n \n use Indent;\n-use utils;\n+use utils::{self, CodeMapSpanUtils};\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n@@ -450,7 +450,7 @@ impl<'a> FmtVisitor<'a> {\n         if is_internal {\n             self.buffer.push_str(\" {\");\n             // Hackery to account for the closing }.\n-            let mod_lo = ::utils::span_after(s, \"{\", self.codemap);\n+            let mod_lo = self.codemap.span_after(s, \"{\");\n             let body_snippet = self.snippet(codemap::mk_sp(mod_lo, m.inner.hi - BytePos(1)));\n             let body_snippet = body_snippet.trim();\n             if body_snippet.is_empty() {"}]}