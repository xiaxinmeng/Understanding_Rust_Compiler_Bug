{"sha": "cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNmVlZGRkNGRjZWZhNGI3MWJiNGI2YmIwODdkMDVhZDhlODIxNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-11T06:26:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-11T06:26:03Z"}, "message": "Auto merge of #54969 - Manishearth:rollup, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #54747 (codegen_llvm: verify that inline assembly operands are scalars)\n - #54848 (Better Diagnostic for Trait Object Capture)\n - #54850 (Fix #54707 - parse_trait_item_ now handles interpolated blocks as function body decls)\n - #54858 (second round of refactorings for universes)\n - #54862 (Implement RFC 2539: cfg_attr with multiple attributes)\n - #54869 (Fix mobile docs)\n - #54870 (Stabilize tool lints)\n - #54893 (Fix internal compiler error on malformed match arm pattern.)\n - #54904 (Stabilize the `Option::replace` method)\n\nFailed merges:\n\n - #54909 ( Add chalk rules related to associated type defs)\n\nr? @ghost", "tree": {"sha": "4c9b6b6174dcbb0390563ca52365f1c3220c7af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c9b6b6174dcbb0390563ca52365f1c3220c7af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "html_url": "https://github.com/rust-lang/rust/commit/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "html_url": "https://github.com/rust-lang/rust/commit/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97"}, {"sha": "be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "html_url": "https://github.com/rust-lang/rust/commit/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f"}], "stats": {"total": 837, "additions": 597, "deletions": 240}, "files": [{"sha": "2719587f20e8a742956282f79388c844a4141030", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -270,7 +270,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.7.0\"\n+version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1898,7 +1898,7 @@ dependencies = [\n  \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -2434,7 +2434,7 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -3195,7 +3195,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f159dfd43363c4d08055a07703eb7a3406b0dac4d0584d96965a3262db3c9d16\"\n \"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\"\n-\"checksum chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25ce2f28f55ed544a2a3756b7acf41dd7d6f27acffb2086439950925506af7d0\"\n+\"checksum chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6749eb72e7d4355d944a99f15fbaea701b978c18c5e184a025fcde942b0c9779\"\n \"checksum chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"295635afd6853aa9f20baeb7f0204862440c0fe994c5a253d5f479dac41d047e\"\n \"checksum chrono 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6962c635d530328acc53ac6a955e83093fedc91c5809dfac1fa60fa470830a37\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "6365d3e71c61616616519446b001db51c03782b2", "filename": "src/doc/unstable-book/src/language-features/cfg-attr-multi.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,20 @@\n+# `cfg_attr_multi`\n+\n+The tracking issue for this feature is: [#54881]\n+The RFC for this feature is: [#2539]\n+\n+[#54881]: https://github.com/rust-lang/rust/issues/54881\n+[#2539]: https://github.com/rust-lang/rfcs/pull/2539\n+\n+------------------------\n+\n+This feature flag lets you put multiple attributes into a `cfg_attr` attribute.\n+\n+Example:\n+\n+```rust,ignore\n+#[cfg_attr(all(), must_use, optimize)]\n+```\n+\n+Because `cfg_attr` resolves before procedural macros, this does not affect\n+macro resolution at all.\n\\ No newline at end of file"}, {"sha": "5c0d33b5ab0c492f6b3712165e5496cee3bf4fbd", "filename": "src/doc/unstable-book/src/language-features/tool-lints.md", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftool-lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftool-lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftool-lints.md?ref=9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "patch": "@@ -1,35 +0,0 @@\n-# `tool_lints`\n-\n-The tracking issue for this feature is: [#44690]\n-\n-[#44690]: https://github.com/rust-lang/rust/issues/44690\n-\n-------------------------\n-\n-Tool lints let you use scoped lints, to `allow`, `warn`, `deny` or `forbid` lints of\n-certain tools.\n-\n-Currently `clippy` is the only available lint tool.\n-\n-It is recommended for lint tools to implement the scoped lints like this:\n-\n-- `#[_(TOOL_NAME::lintname)]`: for lint names\n-- `#[_(TOOL_NAME::lintgroup)]`: for groups of lints\n-- `#[_(TOOL_NAME::all)]`: for (almost[^1]) all lints\n-\n-## An example\n-\n-```rust\n-#![feature(tool_lints)]\n-\n-#![warn(clippy::pedantic)]\n-\n-#[allow(clippy::filter_map)]\n-fn main() {\n-    let v = vec![0; 10];\n-    let _ = v.into_iter().filter(|&x| x < 1).map(|x| x + 1).collect::<Vec<_>>();\n-    println!(\"No filter_map()!\");\n-}\n-```\n-\n-[^1]: Some defined lint groups can be excluded here."}, {"sha": "cf1c77041b91fe24dcf4e92361ad7f018a26cee1", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -867,8 +867,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_replace)]\n-    ///\n     /// let mut x = Some(2);\n     /// let old = x.replace(5);\n     /// assert_eq!(x, Some(5));\n@@ -880,7 +878,7 @@ impl<T> Option<T> {\n     /// assert_eq!(old, None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_replace\", issue = \"51998\")]\n+    #[stable(feature = \"option_replace\", since = \"1.31.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         mem::replace(self, Some(value))\n     }"}, {"sha": "0beb60a127097b18204197aa7491b321cd717792", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -39,7 +39,6 @@\n #![feature(reverse_bits)]\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n-#![feature(option_replace)]\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n "}, {"sha": "d0ec8640ce9ef3edcf4a1e9aa07e42a64cbbf398", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -31,7 +31,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.6\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-chalk-engine = { version = \"0.7.0\", default-features=false }\n+chalk-engine = { version = \"0.8.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"0.6.5\", features = [\"union\"] }\n "}, {"sha": "f51a3e71d0741f9eb68aeaa1a4f8381906aabe40", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -1370,7 +1370,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Goal::*;\n+        use traits::GoalKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {"}, {"sha": "950754a07ab09787b94e05db5ca8b381a2e9ae29", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -18,11 +18,10 @@ use lint::context::CheckLintNameResult;\n use lint::{self, Lint, LintId, Level, LintSource};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n-use session::{config::nightly_options, Session};\n+use session::Session;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n-use syntax::feature_gate;\n use syntax::symbol::Symbol;\n use util::nodemap::FxHashMap;\n \n@@ -228,28 +227,14 @@ impl<'a> LintLevelsBuilder<'a> {\n                     }\n                 };\n                 let tool_name = if let Some(lint_tool) = word.is_scoped() {\n-                    let gate_feature = !self.sess.features_untracked().tool_lints;\n-                    let known_tool = attr::is_known_lint_tool(lint_tool);\n-                    if gate_feature {\n-                        feature_gate::emit_feature_err(\n-                            &sess.parse_sess,\n-                            \"tool_lints\",\n-                            word.span,\n-                            feature_gate::GateIssue::Language,\n-                            &format!(\"scoped lint `{}` is experimental\", word.ident),\n-                        );\n-                    }\n-                    if !known_tool {\n+                    if !attr::is_known_lint_tool(lint_tool) {\n                         span_err!(\n                             sess,\n                             lint_tool.span,\n                             E0710,\n                             \"an unknown tool name found in scoped lint: `{}`\",\n                             word.ident\n                         );\n-                    }\n-\n-                    if gate_feature || !known_tool {\n                         continue;\n                     }\n \n@@ -299,13 +284,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                                     \"change it to\",\n                                     new_lint_name.to_string(),\n                                     Applicability::MachineApplicable,\n-                                );\n-\n-                                if nightly_options::is_nightly_build() {\n-                                    err.emit();\n-                                } else {\n-                                    err.cancel();\n-                                }\n+                                ).emit();\n \n                                 let src = LintSource::Node(Symbol::intern(&new_lint_name), li.span);\n                                 for id in ids {"}, {"sha": "6e4abee32c0771e3b87ef9c016a0ed0b0df48672", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -318,31 +318,33 @@ pub enum QuantifierKind {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Goal<'tcx> {\n-    Implies(Clauses<'tcx>, &'tcx Goal<'tcx>),\n-    And(&'tcx Goal<'tcx>, &'tcx Goal<'tcx>),\n-    Not(&'tcx Goal<'tcx>),\n+pub enum GoalKind<'tcx> {\n+    Implies(Clauses<'tcx>, Goal<'tcx>),\n+    And(Goal<'tcx>, Goal<'tcx>),\n+    Not(Goal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n-    Quantified(QuantifierKind, ty::Binder<&'tcx Goal<'tcx>>),\n+    Quantified(QuantifierKind, ty::Binder<Goal<'tcx>>),\n     CannotProve,\n }\n \n+pub type Goal<'tcx> = &'tcx GoalKind<'tcx>;\n+\n pub type Goals<'tcx> = &'tcx List<Goal<'tcx>>;\n \n impl<'tcx> DomainGoal<'tcx> {\n-    pub fn into_goal(self) -> Goal<'tcx> {\n-        Goal::DomainGoal(self)\n+    pub fn into_goal(self) -> GoalKind<'tcx> {\n+        GoalKind::DomainGoal(self)\n     }\n }\n \n-impl<'tcx> Goal<'tcx> {\n+impl<'tcx> GoalKind<'tcx> {\n     pub fn from_poly_domain_goal<'a>(\n         domain_goal: PolyDomainGoal<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ) -> Goal<'tcx> {\n+    ) -> GoalKind<'tcx> {\n         match domain_goal.no_late_bound_regions() {\n             Some(p) => p.into_goal(),\n-            None => Goal::Quantified(\n+            None => GoalKind::Quantified(\n                 QuantifierKind::Universal,\n                 domain_goal.map_bound(|p| tcx.mk_goal(p.into_goal()))\n             ),"}, {"sha": "1524f89af291d05b8738bdbe3df0b9b29152bff7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -469,7 +469,7 @@ impl fmt::Display for traits::QuantifierKind {\n \n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::Goal::*;\n+        use traits::GoalKind::*;\n \n         match self {\n             Implies(hypotheses, goal) => {\n@@ -598,25 +598,25 @@ CloneTypeFoldableAndLiftImpls! {\n }\n \n EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n-        (traits::Goal::Implies)(hypotheses, goal),\n-        (traits::Goal::And)(goal1, goal2),\n-        (traits::Goal::Not)(goal),\n-        (traits::Goal::DomainGoal)(domain_goal),\n-        (traits::Goal::Quantified)(qkind, goal),\n-        (traits::Goal::CannotProve),\n+    impl<'tcx> TypeFoldable<'tcx> for traits::GoalKind<'tcx> {\n+        (traits::GoalKind::Implies)(hypotheses, goal),\n+        (traits::GoalKind::And)(goal1, goal2),\n+        (traits::GoalKind::Not)(goal),\n+        (traits::GoalKind::DomainGoal)(domain_goal),\n+        (traits::GoalKind::Quantified)(qkind, goal),\n+        (traits::GoalKind::CannotProve),\n     }\n }\n \n EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::Goal<'a> {\n-        type Lifted = traits::Goal<'tcx>;\n-        (traits::Goal::Implies)(hypotheses, goal),\n-        (traits::Goal::And)(goal1, goal2),\n-        (traits::Goal::Not)(goal),\n-        (traits::Goal::DomainGoal)(domain_goal),\n-        (traits::Goal::Quantified)(kind, goal),\n-        (traits::Goal::CannotProve),\n+    impl<'a, 'tcx> Lift<'tcx> for traits::GoalKind<'a> {\n+        type Lifted = traits::GoalKind<'tcx>;\n+        (traits::GoalKind::Implies)(hypotheses, goal),\n+        (traits::GoalKind::And)(goal1, goal2),\n+        (traits::GoalKind::Not)(goal),\n+        (traits::GoalKind::DomainGoal)(domain_goal),\n+        (traits::GoalKind::Quantified)(kind, goal),\n+        (traits::GoalKind::CannotProve),\n     }\n }\n \n@@ -633,7 +633,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<traits::Goal<'tcx>> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx traits::Goal<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let v = (**self).fold_with(folder);\n         folder.tcx().mk_goal(v)"}, {"sha": "3d4ae572d0b81fb0880f6bc76a8c98c08075ef37", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -36,7 +36,7 @@ use mir::interpret::Allocation;\n use ty::subst::{CanonicalSubsts, Kind, Substs, Subst};\n use ty::ReprOptions;\n use traits;\n-use traits::{Clause, Clauses, Goal, Goals};\n+use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TyKind, List};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n@@ -143,7 +143,8 @@ pub struct CtxtInterners<'tcx> {\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     const_: InternedSet<'tcx, Const<'tcx>>,\n     clauses: InternedSet<'tcx, List<Clause<'tcx>>>,\n-    goals: InternedSet<'tcx, List<Goal<'tcx>>>,\n+    goal: InternedSet<'tcx, GoalKind<'tcx>>,\n+    goal_list: InternedSet<'tcx, List<Goal<'tcx>>>,\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n@@ -159,7 +160,8 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             predicates: Default::default(),\n             const_: Default::default(),\n             clauses: Default::default(),\n-            goals: Default::default(),\n+            goal: Default::default(),\n+            goal_list: Default::default(),\n         }\n     }\n \n@@ -1731,9 +1733,9 @@ impl<'a, 'tcx> Lift<'tcx> for Region<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a Goal<'a> {\n-    type Lifted = &'tcx Goal<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Goal<'tcx>> {\n+impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n+    type Lifted = Goal<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Goal<'tcx>> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n@@ -2304,6 +2306,12 @@ impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n     }\n }\n \n+impl<'tcx: 'lcx, 'lcx> Borrow<GoalKind<'lcx>> for Interned<'tcx, GoalKind<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a GoalKind<'lcx> {\n+        &self.0\n+    }\n+}\n+\n impl<'tcx: 'lcx, 'lcx> Borrow<[ExistentialPredicate<'lcx>]>\n     for Interned<'tcx, List<ExistentialPredicate<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a [ExistentialPredicate<'lcx>] {\n@@ -2419,7 +2427,8 @@ pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n \n direct_interners!('tcx,\n     region: mk_region(|r: &RegionKind| r.keep_in_local_tcx()) -> RegionKind,\n-    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>\n+    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>,\n+    goal: mk_goal(|c: &GoalKind<'_>| keep_local(c)) -> GoalKind<'tcx>\n );\n \n macro_rules! slice_interners {\n@@ -2438,7 +2447,7 @@ slice_interners!(\n     type_list: _intern_type_list(Ty),\n     substs: _intern_substs(Kind),\n     clauses: _intern_clauses(Clause),\n-    goals: _intern_goals(Goal)\n+    goal_list: _intern_goals(Goal)\n );\n \n // This isn't a perfect fit: CanonicalVarInfo slices are always\n@@ -2818,10 +2827,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         iter.intern_with(|xs| self.intern_goals(xs))\n     }\n \n-    pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal<'_> {\n-        &self.intern_goals(&[goal])[0]\n-    }\n-\n     pub fn lint_hir<S: Into<MultiSpan>>(self,\n                                         lint: &'static Lint,\n                                         hir_id: HirId,"}, {"sha": "10a90dfc8a8cf936a56662820ca3300e8600c0be", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -148,7 +148,10 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+            &ty::UnnormalizedProjection(ref data) => {\n+                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_projection_ty(data);\n+            },\n \n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_PROJECTION);"}, {"sha": "0514bd20c985a2fa802ba1f879c026820be7f6cf", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -21,7 +21,6 @@\n #![feature(box_syntax)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n-#![feature(option_replace)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "16f0f11757a1278661d0e67be407d28fd1eed9ca", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -16,5 +16,5 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-chalk-engine = { version = \"0.7.0\", default-features=false }\n+chalk-engine = { version = \"0.8.0\", default-features=false }\n smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "dea3aa4372a332f6252cd7be466fa29edbfea7ed", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -19,6 +19,7 @@ use rustc::traits::{\n     ExClauseFold,\n     ExClauseLift,\n     Goal,\n+    GoalKind,\n     ProgramClause,\n     QuantifierKind\n };\n@@ -92,7 +93,7 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type DomainGoal = DomainGoal<'tcx>;\n \n-    type BindersGoal = ty::Binder<&'tcx Goal<'tcx>>;\n+    type BindersGoal = ty::Binder<Goal<'tcx>>;\n \n     type Parameter = Kind<'tcx>;\n \n@@ -102,14 +103,6 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type UnificationResult = InferOk<'tcx, ()>;\n \n-    fn into_goal(domain_goal: DomainGoal<'tcx>) -> Goal<'tcx> {\n-        Goal::DomainGoal(domain_goal)\n-    }\n-\n-    fn cannot_prove() -> Goal<'tcx> {\n-        Goal::CannotProve\n-    }\n-\n     fn goal_in_environment(\n         env: &ty::ParamEnv<'tcx>,\n         goal: Goal<'tcx>,\n@@ -251,15 +244,23 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n     for ChalkInferenceContext<'cx, 'gcx, 'tcx>\n {\n+    fn into_goal(&self, domain_goal: DomainGoal<'tcx>) -> Goal<'tcx> {\n+        self.infcx.tcx.mk_goal(GoalKind::DomainGoal(domain_goal))\n+    }\n+\n+    fn cannot_prove(&self) -> Goal<'tcx> {\n+        self.infcx.tcx.mk_goal(GoalKind::CannotProve)\n+    }\n+\n     fn into_hh_goal(&mut self, goal: Goal<'tcx>) -> ChalkHhGoal<'tcx> {\n-        match goal {\n-            Goal::Implies(..) => panic!(\"FIXME rust-lang-nursery/chalk#94\"),\n-            Goal::And(left, right) => HhGoal::And(*left, *right),\n-            Goal::Not(subgoal) => HhGoal::Not(*subgoal),\n-            Goal::DomainGoal(d) => HhGoal::DomainGoal(d),\n-            Goal::Quantified(QuantifierKind::Universal, binder) => HhGoal::ForAll(binder),\n-            Goal::Quantified(QuantifierKind::Existential, binder) => HhGoal::Exists(binder),\n-            Goal::CannotProve => HhGoal::CannotProve,\n+        match *goal {\n+            GoalKind::Implies(..) => panic!(\"FIXME rust-lang-nursery/chalk#94\"),\n+            GoalKind::And(left, right) => HhGoal::And(left, right),\n+            GoalKind::Not(subgoal) => HhGoal::Not(subgoal),\n+            GoalKind::DomainGoal(d) => HhGoal::DomainGoal(d),\n+            GoalKind::Quantified(QuantifierKind::Universal, binder) => HhGoal::ForAll(binder),\n+            GoalKind::Quantified(QuantifierKind::Existential, binder) => HhGoal::Exists(binder),\n+            GoalKind::CannotProve => HhGoal::CannotProve,\n         }\n     }\n \n@@ -363,21 +364,21 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn instantiate_binders_universally(\n         &mut self,\n-        _arg: &ty::Binder<&'tcx Goal<'tcx>>,\n+        _arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n         panic!(\"FIXME -- universal instantiation needs sgrif's branch\")\n     }\n \n     fn instantiate_binders_existentially(\n         &mut self,\n-        arg: &ty::Binder<&'tcx Goal<'tcx>>,\n+        arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n         let (value, _map) = self.infcx.replace_late_bound_regions_with_fresh_var(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::HigherRankedType,\n             arg,\n         );\n-        *value\n+        value\n     }\n \n     fn debug_ex_clause(&mut self, value: &'v ChalkExClause<'tcx>) -> Box<dyn Debug + 'v> {"}, {"sha": "181106d3f84bf19f9b4f371ff65edd1476ae162d", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 99, "deletions": 15, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -13,7 +13,14 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{\n-    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n+    Clause,\n+    Clauses,\n+    DomainGoal,\n+    FromEnv,\n+    GoalKind,\n+    PolyDomainGoal,\n+    ProgramClause,\n+    WellFormed,\n     WhereClause,\n };\n use rustc::ty::query::Providers;\n@@ -249,7 +256,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let impl_trait: DomainGoal = trait_pred.lower();\n \n     // `FromEnv(Self: Trait<P1..Pn>)`\n-    let from_env_goal = impl_trait.into_from_env_goal().into_goal();\n+    let from_env_goal = tcx.mk_goal(impl_trait.into_from_env_goal().into_goal());\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n@@ -308,7 +315,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Trait(trait_pred)),\n         hypotheses: tcx.mk_goals(\n-            wf_conditions.map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+            wf_conditions.map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n     let wf_clause = iter::once(Clause::ForAll(ty::Binder::dummy(wf_clause)));\n@@ -352,10 +359,10 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n         hypotheses: tcx.mk_goals(\n             where_clauses\n                 .into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn program_clauses_for_type_def<'a, 'tcx>(\n@@ -388,7 +395,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n             where_clauses\n                 .iter()\n                 .cloned()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n \n@@ -404,7 +411,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     // ```\n \n     // `FromEnv(Ty<...>)`\n-    let from_env_goal = DomainGoal::FromEnv(FromEnv::Ty(ty)).into_goal();\n+    let from_env_goal = tcx.mk_goal(DomainGoal::FromEnv(FromEnv::Ty(ty)).into_goal());\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n     // For each where clause `WC`:\n@@ -423,10 +430,86 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n }\n \n pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    _item_id: DefId,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: DefId,\n ) -> Clauses<'tcx> {\n-    unimplemented!()\n+    // Rule ProjectionEq-Skolemize\n+    //\n+    // ```\n+    // trait Trait<P1..Pn> {\n+    //     type AssocType<Pn+1..Pm>;\n+    // }\n+    // ```\n+    //\n+    // `ProjectionEq` can succeed by skolemizing, see \"associated type\"\n+    // chapter for more:\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     ProjectionEq(\n+    //         <Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> =\n+    //         (Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>\n+    //     )\n+    // }\n+    // ```\n+\n+    let item = tcx.associated_item(item_id);\n+    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    let trait_id = match item.container {\n+        ty::AssociatedItemContainer::TraitContainer(trait_id) => trait_id,\n+        _ => bug!(\"not an trait container\"),\n+    };\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_id);\n+\n+    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.ident);\n+    let placeholder_ty = tcx.mk_ty(ty::UnnormalizedProjection(projection_ty));\n+    let projection_eq = WhereClause::ProjectionEq(ty::ProjectionPredicate {\n+        projection_ty,\n+        ty: placeholder_ty,\n+    });\n+\n+    let projection_eq_clause = ProgramClause {\n+        goal: DomainGoal::Holds(projection_eq),\n+        hypotheses: &ty::List::empty(),\n+    };\n+\n+    // Rule WellFormed-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     WellFormed((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    //         :- Implemented(Self: Trait<P1..Pn>)\n+    // }\n+    // ```\n+\n+    let trait_predicate = ty::TraitPredicate { trait_ref };\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::Holds(WhereClause::Implemented(trait_predicate)).into_goal()\n+    );\n+    let wf_clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Ty(placeholder_ty)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    // Rule Implied-Trait-From-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     FromEnv(Self: Trait<P1..Pn>)\n+    //         :- FromEnv((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    // }\n+    // ```\n+\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::FromEnv(FromEnv::Ty(placeholder_ty)).into_goal()\n+    );\n+    let from_env_clause = ProgramClause {\n+        goal: DomainGoal::FromEnv(FromEnv::Trait(trait_predicate)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    let clauses = iter::once(projection_eq_clause)\n+        .chain(iter::once(wf_clause))\n+        .chain(iter::once(from_env_clause));\n+    let clauses = clauses.map(|clause| Clause::ForAll(ty::Binder::dummy(clause)));\n+    tcx.mk_clauses(clauses)\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n@@ -435,10 +518,11 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n ) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n-    // ```impl<P0..Pn> Trait<A1..An> for A0\n-    // {\n+    // ```\n+    // impl<P0..Pn> Trait<A1..An> for A0 {\n     //     type AssocType<Pn+1..Pm> = T;\n-    // }```\n+    // }\n+    // ```\n     //\n     // FIXME: For the moment, we don't account for where clauses written on the associated\n     // ty definition (i.e. in the trait def, as in `type AssocType<T> where T: Sized`).\n@@ -482,10 +566,10 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n         hypotheses: tcx.mk_goals(\n             hypotheses\n                 .into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "e611eb86dc1b3214eb5637d5acb685f4a33881e2", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -9,7 +9,14 @@\n // except according to those terms.\n \n use attr::HasAttrs;\n-use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n+use feature_gate::{\n+    feature_err,\n+    EXPLAIN_STMT_ATTR_SYNTAX,\n+    Features,\n+    get_features,\n+    GateIssue,\n+    emit_feature_err,\n+};\n use {fold, attr};\n use ast;\n use source_map::Spanned;\n@@ -73,49 +80,103 @@ impl<'a> StripUnconfigured<'a> {\n         if self.in_cfg(node.attrs()) { Some(node) } else { None }\n     }\n \n+    /// Parse and expand all `cfg_attr` attributes into a list of attributes\n+    /// that are within each `cfg_attr` that has a true configuration predicate.\n+    ///\n+    /// Gives compiler warnigns if any `cfg_attr` does not contain any\n+    /// attributes and is in the original source code. Gives compiler errors if\n+    /// the syntax of any `cfg_attr` is incorrect.\n     pub fn process_cfg_attrs<T: HasAttrs>(&mut self, node: T) -> T {\n         node.map_attrs(|attrs| {\n-            attrs.into_iter().filter_map(|attr| self.process_cfg_attr(attr)).collect()\n+            attrs.into_iter().flat_map(|attr| self.process_cfg_attr(attr)).collect()\n         })\n     }\n \n-    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> {\n+    /// Parse and expand a single `cfg_attr` attribute into a list of attributes\n+    /// when the configuration predicate is true, or otherwise expand into an\n+    /// empty list of attributes.\n+    ///\n+    /// Gives a compiler warning when the `cfg_attr` contains no attribtes and\n+    /// is in the original source file. Gives a compiler error if the syntax of\n+    /// the attribute is incorrect\n+    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n         if !attr.check_name(\"cfg_attr\") {\n-            return Some(attr);\n+            return vec![attr];\n         }\n \n-        let (cfg, path, tokens, span) = match attr.parse(self.sess, |parser| {\n+        let gate_cfg_attr_multi = if let Some(ref features) = self.features {\n+            !features.cfg_attr_multi\n+        } else {\n+            false\n+        };\n+        let cfg_attr_span = attr.span;\n+\n+        let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n             parser.expect(&token::OpenDelim(token::Paren))?;\n-            let cfg = parser.parse_meta_item()?;\n+\n+            let cfg_predicate = parser.parse_meta_item()?;\n             parser.expect(&token::Comma)?;\n-            let lo = parser.span.lo();\n-            let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n-            parser.eat(&token::Comma); // Optional trailing comma\n+\n+            // Presumably, the majority of the time there will only be one attr.\n+            let mut expanded_attrs = Vec::with_capacity(1);\n+\n+            while !parser.check(&token::CloseDelim(token::Paren)) {\n+                let lo = parser.span.lo();\n+                let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n+                expanded_attrs.push((path, tokens, parser.prev_span.with_lo(lo)));\n+                parser.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n+            }\n+\n             parser.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((cfg, path, tokens, parser.prev_span.with_lo(lo)))\n+            Ok((cfg_predicate, expanded_attrs))\n         }) {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();\n-                return None;\n+                return Vec::new();\n             }\n         };\n \n-        if attr::cfg_matches(&cfg, self.sess, self.features) {\n-            self.process_cfg_attr(ast::Attribute {\n+        // Check feature gate and lint on zero attributes in source. Even if the feature is gated,\n+        // we still compute as if it wasn't, since the emitted error will stop compilation futher\n+        // along the compilation.\n+        match (expanded_attrs.len(), gate_cfg_attr_multi) {\n+            (0, false) => {\n+                // FIXME: Emit unused attribute lint here.\n+            },\n+            (1, _) => {},\n+            (_, true) => {\n+                emit_feature_err(\n+                    self.sess,\n+                    \"cfg_attr_multi\",\n+                    cfg_attr_span,\n+                    GateIssue::Language,\n+                    \"cfg_attr with zero or more than one attributes is experimental\",\n+                );\n+            },\n+            (_, false) => {}\n+        }\n+\n+        if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n+            // We call `process_cfg_attr` recursively in case there's a\n+            // `cfg_attr` inside of another `cfg_attr`. E.g.\n+            //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n+            expanded_attrs.into_iter()\n+            .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n                 path,\n                 tokens,\n                 is_sugared_doc: false,\n                 span,\n-            })\n+            }))\n+            .collect()\n         } else {\n-            None\n+            Vec::new()\n         }\n     }\n \n-    // Determine if a node with the given attributes should be included in this configuration.\n+    /// Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n@@ -165,7 +226,7 @@ impl<'a> StripUnconfigured<'a> {\n         })\n     }\n \n-    // Visit attributes on expression and statements (but not attributes on items in blocks).\n+    /// Visit attributes on expression and statements (but not attributes on items in blocks).\n     fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {"}, {"sha": "b86b92fb29e60529d9a38f436d01d887c29c9832", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -433,9 +433,6 @@ declare_features! (\n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Scoped lints\n-    (active, tool_lints, \"1.28.0\", Some(44690), None),\n-\n     // Allows irrefutable patterns in if-let and while-let statements (RFC 2086)\n     (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n \n@@ -499,6 +496,9 @@ declare_features! (\n \n     // Allows `impl Trait` in bindings (`let`, `const`, `static`)\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(34511), None),\n+\n+    // #[cfg_attr(predicate, multiple, attributes, here)]\n+    (active, cfg_attr_multi, \"1.31.0\", Some(54881), None),\n );\n \n declare_features! (\n@@ -679,6 +679,8 @@ declare_features! (\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n     // Allows the definition of `const fn` functions.\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n+    // Scoped lints\n+    (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "3099b2a3e8e9b1898d228ea6ce0e81e91b0e6aad", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -678,7 +678,7 @@ impl<'a> Parser<'a> {\n     /// Expect next token to be edible or inedible token.  If edible,\n     /// then consume it; if inedible, then return without consuming\n     /// anything.  Signal a fatal error if next token is unexpected.\n-    fn expect_one_of(&mut self,\n+    pub fn expect_one_of(&mut self,\n                          edible: &[token::Token],\n                          inedible: &[token::Token]) -> PResult<'a,  ()>{\n         fn tokens_to_string(tokens: &[TokenType]) -> String {\n@@ -3866,6 +3866,9 @@ impl<'a> Parser<'a> {\n             // check that a comma comes after every field\n             if !ate_comma {\n                 let err = self.struct_span_err(self.prev_span, \"expected `,`\");\n+                if let Some(mut delayed) = delayed_err {\n+                    delayed.emit();\n+                }\n                 return Err(err);\n             }\n             ate_comma = false;"}, {"sha": "2705c03598a0d2c2bb84560dadc96478e7740b2e", "filename": "src/test/run-pass/tool_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Frun-pass%2Ftool_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Frun-pass%2Ftool_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftool_lints.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tool_lints)]\n+\n #![deny(unknown_lints)]\n \n #[allow(clippy::almost_swapped)]"}, {"sha": "57df3e072a8dc988c56737177fd5e532223e10cd", "filename": "src/test/run-pass/tool_lints_2018_preview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Frun-pass%2Ftool_lints_2018_preview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Frun-pass%2Ftool_lints_2018_preview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftool_lints_2018_preview.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tool_lints)]\n+\n #![feature(rust_2018_preview)]\n #![deny(unknown_lints)]\n "}, {"sha": "11b70d1d7809cb20176513fe0e1c89982a46a228", "filename": "src/test/ui-fulldeps/lint_tool_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -11,8 +11,8 @@\n // aux-build:lint_tool_test.rs\n // ignore-stage1\n // compile-flags: --cfg foo\n+\n #![feature(plugin)]\n-#![feature(tool_lints)]\n #![plugin(lint_tool_test)]\n #![allow(dead_code)]\n #![cfg_attr(foo, warn(test_lint))]"}, {"sha": "21e00544ca00b4a723d028ebb5a94f37e987b24e", "filename": "src/test/ui/cfg-attr-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs?ref=9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "patch": "@@ -1,13 +0,0 @@\n-// compile-flags: --cfg TRUE\n-\n-#[cfg_attr(TRUE, inline,)] // OK\n-fn f() {}\n-\n-#[cfg_attr(FALSE, inline,)] // OK\n-fn g() {}\n-\n-#[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn h() {}\n-\n-#[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn i() {}"}, {"sha": "76a470417e9edb6f336c4cada2f0c076e489ea1f", "filename": "src/test/ui/cfg-attr-trailing-comma.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr?ref=9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "patch": "@@ -1,14 +0,0 @@\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:9:25\n-   |\n-LL | #[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                         ^ expected `)`\n-\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:12:26\n-   |\n-LL | #[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                          ^ expected `)`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ba7d4ff0d9bf55ac0adc4573e195552b28810d93", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -10,11 +10,12 @@\n \n #![feature(rustc_attrs)]\n \n+trait Bar { }\n+\n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<S, T, U> {\n-    fn s(_: S) -> S;\n-    fn t(_: T) -> T;\n-    fn u(_: U) -> U;\n+trait Foo<S, T: ?Sized> {\n+    #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+    type Assoc: Bar + ?Sized;\n }\n \n fn main() {"}, {"sha": "dc2375277e7342d713049d371ae759707c5fdd1f", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -1,14 +1,23 @@\n error: program clause dump\n-  --> $DIR/lower_trait.rs:13:1\n+  --> $DIR/lower_trait.rs:15:1\n    |\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(U: std::marker::Sized).\n+   = note: FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>).\n+   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T>).\n+   = note: Implemented(Self: Foo<S, T>) :- FromEnv(Self: Foo<S, T>).\n+   = note: WellFormed(Self: Foo<S, T>) :- Implemented(Self: Foo<S, T>), WellFormed(S: std::marker::Sized), WellFormed(<Self as Foo<S, T>>::Assoc: Bar).\n \n-error: aborting due to previous error\n+error: program clause dump\n+  --> $DIR/lower_trait.rs:17:5\n+   |\n+LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>).\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "3bf39b788db6e1e2b6b8c3f9728c1485916cb5ad", "filename": "src/test/ui/conditional-compilation/auxiliary/namespaced_enums.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/auxiliary/namespaced_enums.rs"}, {"sha": "36dd78dd2b19a28d9571f486396251fb7795bf23", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-arg-invalid-1.rs"}, {"sha": "48d656a4a28d92ffac76fb6aaf0a5d789c6c9c95", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-arg-invalid-2.rs"}, {"sha": "96ac7828c5c3b9dd766d89a6fd62503f6b7f1289", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-arg-invalid-3.rs"}, {"sha": "e7dfa17b4b6c414a9cd3132cad8e1f2013a5c204", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-arg-invalid-4.rs"}, {"sha": "a939f451038896b240fe514c9059d147ed67a2d7", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-arg-invalid-5.rs"}, {"sha": "58a62d45ea5d7486a0137630e50e2daea0e77807", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-cfg-2.rs"}, {"sha": "db3c7acff151c0a4a3ff79a5767e8fb731870bd8", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-cfg-2.stderr"}, {"sha": "a79c7663861d71c69a62d61bf12bc5233ed3ddaf", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-crate-2.rs"}, {"sha": "a730473f663151df284a88b1de9fe627f7c751e6", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -2,7 +2,7 @@ error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-crate-2.rs:15:21\n    |\n LL | #![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n-   |                     ^^^^^^^^\n+   |                     ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable\n ", "previous_filename": "src/test/ui/cfg-attr-crate-2.stderr"}, {"sha": "09fe6cec49c2e4b653d50509504a947df6f00fa7", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-invalid-predicate.rs"}, {"sha": "5a89f9766d16655552db599d648ef383d7b4432e", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-invalid-predicate.stderr"}, {"sha": "84bd33fc0e7d3ce5541f4252bd64328891a18137", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-false.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,20 @@\n+// Test that cfg_attr doesn't emit any attributes when the\n+// configuation variable is false. This mirrors `cfg-attr-multi-true.rs`\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+#![feature(cfg_attr_multi)]\n+\n+#[cfg_attr(any(), deprecated, must_use)]\n+struct Struct {}\n+\n+impl Struct {\n+    fn new() -> Struct {\n+        Struct {}\n+    }\n+}\n+\n+fn main() {\n+    Struct::new();\n+}"}, {"sha": "d4c3186a6ebbb6dc544dfffe21059f548d1ce7b4", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.rs", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,6 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![feature(cfg_attr_multi)]\n+#![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n \n-#[warn(clippy::assign_ops)] //~ ERROR scoped lint `clippy::assign_ops` is experimental\n-fn main() {}\n+fn main() { }", "previous_filename": "src/test/ui/feature-gates/feature-gate-tool_lints-fail.rs"}, {"sha": "bf68d92cc0bbd410d69c5f03f96c35bbc31281f7", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-1.rs:14:21\n+   |\n+LL | #![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+   |                     ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "bee6b7d4886bd110eba2d42a62fefd25fb5c5905", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![feature(cfg_attr_multi)]\n+#![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+\n+fn main() { }"}, {"sha": "5c72a400e0bae031d8f85fa2bcc8137db9d96d82", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-2.rs:14:29\n+   |\n+LL | #![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+   |                             ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a31dde00c7cf5f6d33eed4151b5c56ddb68d5c65", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,22 @@\n+// Test that cfg_attr with multiple attributes actually emits both attributes.\n+// This is done by emitting two attributes that cause new warnings, and then\n+// triggering those warnings.\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+#![feature(cfg_attr_multi)]\n+\n+#[cfg_attr(all(), deprecated, must_use)]\n+struct MustUseDeprecated {}\n+\n+impl MustUseDeprecated { //~ warning: use of deprecated item\n+    fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+        MustUseDeprecated {} //~ warning: use of deprecated item\n+    }\n+}\n+\n+fn main() {\n+    MustUseDeprecated::new(); //~ warning: use of deprecated item\n+    //| warning: unused `MustUseDeprecated` which must be used\n+}"}, {"sha": "37cb3de06c04f75288847cdaa974c65096d95419", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,38 @@\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:13:6\n+   |\n+LL | impl MustUseDeprecated { //~ warning: use of deprecated item\n+   |      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:20:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:14:17\n+   |\n+LL |     fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+   |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:15:9\n+   |\n+LL |         MustUseDeprecated {} //~ warning: use of deprecated item\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: unused `MustUseDeprecated` which must be used\n+  --> $DIR/cfg-attr-multi-true.rs:20:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cfg-attr-multi-true.rs:7:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+"}, {"sha": "eec0e8faca877b7f71a2537232861fa2a66fb628", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,45 @@\n+// Parse `cfg_attr` with varying numbers of attributes and trailing commas\n+\n+#![feature(cfg_attr_multi)]\n+\n+// Completely empty `cfg_attr` input\n+#[cfg_attr()] //~ error: expected identifier, found `)`\n+struct NoConfigurationPredicate;\n+\n+// Zero attributes, zero trailing comma (comma manatory here)\n+#[cfg_attr(all())] //~ error: expected `,`, found `)`\n+struct A0C0;\n+\n+// Zero attributes, one trailing comma\n+#[cfg_attr(all(),)] // Ok\n+struct A0C1;\n+\n+// Zero attributes, two trailing commas\n+#[cfg_attr(all(),,)] //~ ERROR expected identifier\n+struct A0C2;\n+\n+// One attribute, no trailing comma\n+#[cfg_attr(all(), must_use)] // Ok\n+struct A1C0;\n+\n+// One attribute, one trailing comma\n+#[cfg_attr(all(), must_use,)] // Ok\n+struct A1C1;\n+\n+// One attribute, two trailing commas\n+#[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+struct A1C2;\n+\n+// Two attributes, no trailing comma\n+#[cfg_attr(all(), must_use, deprecated)] // Ok\n+struct A2C0;\n+\n+// Two attributes, one trailing comma\n+#[cfg_attr(all(), must_use, deprecated,)] // Ok\n+struct A2C1;\n+\n+// Two attributes, two trailing commas\n+#[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+struct A2C2;\n+\n+fn main() {}"}, {"sha": "553406b6dd83d25f11775a734c48838f1d580735", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,32 @@\n+error: expected identifier, found `)`\n+  --> $DIR/cfg-attr-parse.rs:6:12\n+   |\n+LL | #[cfg_attr()] //~ error: expected identifier, found `)`\n+   |            ^ expected identifier\n+\n+error: expected `,`, found `)`\n+  --> $DIR/cfg-attr-parse.rs:10:17\n+   |\n+LL | #[cfg_attr(all())] //~ error: expected `,`, found `)`\n+   |                 ^ expected `,`\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:18:18\n+   |\n+LL | #[cfg_attr(all(),,)] //~ ERROR expected identifier\n+   |                  ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:30:28\n+   |\n+LL | #[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+   |                            ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:42:40\n+   |\n+LL | #[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+   |                                        ^ expected identifier\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "06a22eff25c218c6b8aef73cf76e887d1333e713", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-syntax-validation.rs"}, {"sha": "7773fdb8cf9848f9ed01f6f4a37cc1cfc7f84734", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-syntax-validation.stderr"}, {"sha": "afcb896b43c2a52e426a5dda4223d48a2515236c", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-unknown-attribute-macro-expansion.rs"}, {"sha": "0f51c7d68c642f2a81c8cdbf954973345906510f", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-attr-unknown-attribute-macro-expansion.stderr"}, {"sha": "5cf8135ca6bc6795d333c5c9abde6250e0933fc9", "filename": "src/test/ui/conditional-compilation/cfg-empty-codemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-empty-codemap.rs"}, {"sha": "bbccf2bcd0f81cbece38edec4204da7c6df335fe", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-in-crate-1.rs"}, {"sha": "c6d42c732c9340ab40f817673b7f04b6716e4564", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-in-crate-1.stderr"}, {"sha": "55eca7f45a5aec0a7814892316c3a1ada6d08ca3", "filename": "src/test/ui/conditional-compilation/cfg-non-opt-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-non-opt-expr.rs"}, {"sha": "1892cee113ecb93edcb646ccd7a08f68941eb1f5", "filename": "src/test/ui/conditional-compilation/cfg-non-opt-expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg-non-opt-expr.stderr"}, {"sha": "7d799850a651ebacc3638ca79b55f8c994ec5273", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg_attr_path.rs"}, {"sha": "67e59d054d5c15b766fb1dc3b38dfcdc8194f1e4", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "previous_filename": "src/test/ui/cfg_attr_path.stderr"}, {"sha": "9515380bc285603e634e0c2dc45e513e826f10c0", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,5 @@\n+// gate-test-cfg_attr_multi\n+\n+#![cfg_attr(all(), warn(nonstandard_style), allow(unused_attributes))]\n+//~^ ERROR cfg_attr with zero or more than one attributes is experimental\n+fn main() {}"}, {"sha": "088e6df1a1ac181791bd3a9a9b3198c281797c55", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: cfg_attr with zero or more than one attributes is experimental (see issue #54881)\n+  --> $DIR/feature-gate-cfg-attr-multi-1.rs:3:1\n+   |\n+LL | #![cfg_attr(all(), warn(nonstandard_style), allow(unused_attributes))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_attr_multi)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "cf02432274b1e35ef651d067e2e215bc8bc8c4d8", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,3 @@\n+#![cfg_attr(all(),)]\n+//~^ ERROR cfg_attr with zero or more than one attributes is experimental\n+fn main() {}"}, {"sha": "a01876114dde8dce78e79a1a999a66229a21a392", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: cfg_attr with zero or more than one attributes is experimental (see issue #54881)\n+  --> $DIR/feature-gate-cfg-attr-multi-2.rs:1:1\n+   |\n+LL | #![cfg_attr(all(),)]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_attr_multi)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e4737926e7a22c85a31abda4157fb0790680c3fb", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-bootstrap-1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,7 @@\n+// Test that settingt the featute gate while using its functionality doesn't error.\n+\n+// compile-pass\n+\n+#![cfg_attr(all(), feature(cfg_attr_multi), crate_type=\"bin\")]\n+\n+fn main() {}"}, {"sha": "df740541f5543e2a3af92d41af71f8b8f3652f26", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-bootstrap-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,9 @@\n+// Test that settingt the featute gate while using its functionality doesn't error.\n+// Specifically, if there's a cfg-attr *before* the feature gate.\n+\n+// compile-pass\n+\n+#![cfg_attr(all(),)]\n+#![cfg_attr(all(), feature(cfg_attr_multi), crate_type=\"bin\")]\n+\n+fn main() {}"}, {"sha": "33ee79cd2011ab23bb1a0e27e8f1ac794a4e5713", "filename": "src/test/ui/feature-gates/feature-gate-tool_lints-fail.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints-fail.stderr?ref=9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: scoped lint `clippy::assign_ops` is experimental (see issue #44690)\n-  --> $DIR/feature-gate-tool_lints-fail.rs:11:8\n-   |\n-LL | #[warn(clippy::assign_ops)] //~ ERROR scoped lint `clippy::assign_ops` is experimental\n-   |        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(tool_lints)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8019b1e6a28f6d89fa3171f91a5880892dc2e366", "filename": "src/test/ui/feature-gates/feature-gate-tool_lints.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9746a2d40d69b145f8247e4a5fb2978e5f4d5c97/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_lints.stderr?ref=9746a2d40d69b145f8247e4a5fb2978e5f4d5c97", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: scoped lint `clippy::decimal_literal_representation` is experimental (see issue #44690)\n-  --> $DIR/feature-gate-tool_lints.rs:11:8\n-   |\n-LL | #[warn(clippy::decimal_literal_representation)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(tool_lints)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "24aa758ea6c239a8dfaa3344d770f7d4d39e4fef", "filename": "src/test/ui/resolve/issue-54379.rs", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -7,9 +7,15 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+struct MyStruct {\n+    pub s1: Option<String>,\n+}\n \n-#[warn(clippy::decimal_literal_representation)]\n-//~^ ERROR scoped lint `clippy::decimal_literal_representation` is experimental\n fn main() {\n-    let a = 65_535;\n+    let thing = MyStruct { s1: None };\n+\n+    match thing {\n+        MyStruct { .., Some(_) } => {},\n+        _ => {}\n+    }\n }", "previous_filename": "src/test/ui/feature-gates/feature-gate-tool_lints.rs"}, {"sha": "d1d693a3817b90a398278da1e16812feaaadcc76", "filename": "src/test/ui/resolve/issue-54379.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -0,0 +1,24 @@\n+error: expected `}`, found `,`\n+  --> $DIR/issue-54379.rs:18:22\n+   |\n+LL |         MyStruct { .., Some(_) } => {},\n+   |                    --^\n+   |                    | |\n+   |                    | expected `}`\n+   |                    `..` must be at the end and cannot have a trailing comma\n+\n+error: expected `,`\n+  --> $DIR/issue-54379.rs:18:24\n+   |\n+LL |         MyStruct { .., Some(_) } => {},\n+   |                        ^^^^\n+\n+error[E0027]: pattern does not mention field `s1`\n+  --> $DIR/issue-54379.rs:18:9\n+   |\n+LL |         MyStruct { .., Some(_) } => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ missing field `s1`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "4134fca1ce6caa31be3d148495cd73e50bef8388", "filename": "src/test/ui/tool_lints-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ftool_lints-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ftool_lints-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints-fail.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -10,7 +10,7 @@\n \n // Don't allow tool_lints, which aren't scoped\n \n-#![feature(tool_lints)]\n+\n #![deny(unknown_lints)]\n \n #![deny(clippy)] //~ ERROR: unknown lint: `clippy`"}, {"sha": "001f2f11e5cb358c17d94222d0ba3fa9214fb956", "filename": "src/test/ui/tool_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ftool_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Ftool_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tool_lints)]\n+\n \n #[warn(foo::bar)]\n //~^ ERROR an unknown tool name found in scoped lint: `foo::bar`"}, {"sha": "a1d6c27e518e514268c2221e2e611ea450161d77", "filename": "src/test/ui/unknown-lint-tool-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs?ref=cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tool_lints)]\n+\n \n #![deny(foo::bar)] //~ ERROR an unknown tool name found in scoped lint: `foo::bar`\n "}]}