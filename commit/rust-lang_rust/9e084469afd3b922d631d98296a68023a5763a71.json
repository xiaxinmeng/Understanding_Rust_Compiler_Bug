{"sha": "9e084469afd3b922d631d98296a68023a5763a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMDg0NDY5YWZkM2I5MjJkNjMxZDk4Mjk2YTY4MDIzYTU3NjNhNzE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T21:42:33Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T22:48:11Z"}, "message": "Pretty print lambda-blocks.", "tree": {"sha": "d14703d0fbbd5bf4a1477a400f9d0c7bc548c366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14703d0fbbd5bf4a1477a400f9d0c7bc548c366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e084469afd3b922d631d98296a68023a5763a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e084469afd3b922d631d98296a68023a5763a71", "html_url": "https://github.com/rust-lang/rust/commit/9e084469afd3b922d631d98296a68023a5763a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e084469afd3b922d631d98296a68023a5763a71/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb798e9658888b3988e49fe2ce5005af9f6589e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb798e9658888b3988e49fe2ce5005af9f6589e", "html_url": "https://github.com/rust-lang/rust/commit/9eb798e9658888b3988e49fe2ce5005af9f6589e"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "c9481a3fb23c68e999d3dc156652c26508a3751a", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9e084469afd3b922d631d98296a68023a5763a71/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e084469afd3b922d631d98296a68023a5763a71/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9e084469afd3b922d631d98296a68023a5763a71", "patch": "@@ -161,7 +161,6 @@ fn head(s: &ps, w: str) {\n fn bopen(s: &ps) {\n     word(s.s, \"{\");\n     end(s); // close the head-box\n-\n }\n \n fn bclose_(s: &ps, span: codemap::span, indented: uint) {\n@@ -578,15 +577,21 @@ fn print_stmt(s: &ps, st: &ast::stmt) {\n }\n \n fn print_block(s: &ps, blk: &ast::blk) {\n-    print_possibly_embedded_block(s, blk, false, indent_unit);\n+    print_possibly_embedded_block(s, blk, block_normal, indent_unit);\n }\n \n-fn print_possibly_embedded_block(s: &ps, blk: &ast::blk, embedded: bool,\n+tag embed_type { block_macro; block_block_fn; block_normal; }\n+\n+fn print_possibly_embedded_block(s: &ps, blk: &ast::blk, embedded: embed_type,\n                                  indented: uint) {\n     maybe_print_comment(s, blk.span.lo);\n     let ann_node = node_block(s, blk);\n     s.ann.pre(ann_node);\n-    if embedded { word(s.s, \"#{\"); end(s); } else { bopen(s); }\n+    alt embedded {\n+      block_macro. { word(s.s, \"#{\"); end(s); }\n+      block_block_fn. { end(s); }\n+      block_normal. { bopen(s); }\n+    }\n \n     let last_stmt = option::none;\n     for st: @ast::stmt  in blk.node.stmts {\n@@ -699,7 +704,7 @@ fn print_mac(s: &ps, m: &ast::mac) {\n         word(s.s, \">\");\n       }\n       ast::mac_embed_block(blk) {\n-        print_possibly_embedded_block(s, blk, true, indent_unit);\n+        print_possibly_embedded_block(s, blk, block_normal, indent_unit);\n       }\n       ast::mac_ellipsis. { word(s.s, \"...\"); }\n     }\n@@ -863,16 +868,29 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n                 print_pat(s, p);\n             }\n             space(s.s);\n-            print_possibly_embedded_block(s, arm.body, false,\n+            print_possibly_embedded_block(s, arm.body, block_normal,\n                                           alt_indent_unit);\n         }\n         bclose_(s, expr.span, alt_indent_unit);\n       }\n       ast::expr_fn(f) {\n-        head(s, proto_to_str(f.proto));\n-        print_fn_args_and_ret(s, f.decl, ~[]);\n-        space(s.s);\n-        print_block(s, f.body);\n+        // If the return type is the magic ty_infer, then we need to\n+        // pretty print as a lambda-block\n+        if f.decl.output.node == ast::ty_infer {\n+            // containing cbox, will be closed by print-block at }\n+            cbox(s, indent_unit);\n+            // head-box, will be closed by print-block at start\n+            ibox(s, 0u);\n+            word(s.s, \"{\");\n+            print_fn_block_args(s, f.decl);\n+            print_possibly_embedded_block(s, f.body,\n+                                          block_block_fn, indent_unit);\n+        } else {\n+            head(s, proto_to_str(f.proto));\n+            print_fn_args_and_ret(s, f.decl, ~[]);\n+            space(s.s);\n+            print_block(s, f.body);\n+        }\n       }\n       ast::expr_block(blk) {\n         // containing cbox, will be closed by print-block at }\n@@ -1194,6 +1212,19 @@ fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl,\n     }\n }\n \n+fn print_fn_block_args(s: &ps, decl: &ast::fn_decl) {\n+    word(s.s, \"|\");\n+    fn print_arg(s: &ps, x: &ast::arg) {\n+        ibox(s, indent_unit);\n+        print_alias(s, x.mode);\n+        word(s.s, x.ident);\n+        end(s);\n+    }\n+    commasep(s, inconsistent, decl.inputs, print_arg);\n+    word(s.s, \"|\");\n+    maybe_print_comment(s, decl.output.span.lo);\n+}\n+\n fn print_alias(s: &ps, m: ast::mode) {\n     alt m {\n       ast::alias(true) { word_space(s, \"&mutable\"); }"}]}