{"sha": "ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNmI5Yzc5ZDYzYzMwNDlmMWNlYjRhMGFiMGZhMTAxYzEzZGUxMjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-16T14:23:42Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-23T13:54:22Z"}, "message": "Dynamically prevent constants from accessing statics", "tree": {"sha": "a707c7fd4066545ee8438246a812cf7e1dcdf9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a707c7fd4066545ee8438246a812cf7e1dcdf9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "html_url": "https://github.com/rust-lang/rust/commit/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640e2884ad9d3c7bec74444bba922108e4347634", "url": "https://api.github.com/repos/rust-lang/rust/commits/640e2884ad9d3c7bec74444bba922108e4347634", "html_url": "https://github.com/rust-lang/rust/commit/640e2884ad9d3c7bec74444bba922108e4347634"}], "stats": {"total": 225, "additions": 203, "deletions": 22}, "files": [{"sha": "3ea76fab6dd355e929b31e28b88f53f31d10759a", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -45,9 +45,15 @@ fn mk_eval_cx<'mir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n+    can_access_statics: bool,\n ) -> CompileTimeEvalContext<'mir, 'tcx> {\n     debug!(\"mk_eval_cx: {:?}\", param_env);\n-    InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), Default::default())\n+    InterpCx::new(\n+        tcx.at(span),\n+        param_env,\n+        CompileTimeInterpreter::new(),\n+        MemoryExtra { can_access_statics },\n+    )\n }\n \n fn op_to_const<'tcx>(\n@@ -224,6 +230,12 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     pub(super) loop_detector: snapshot::InfiniteLoopDetector<'mir, 'tcx>,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct MemoryExtra {\n+    /// Whether this machine may read from statics\n+    can_access_statics: bool,\n+}\n+\n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n     fn new() -> Self {\n         CompileTimeInterpreter {\n@@ -311,7 +323,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     type ExtraFnVal = !;\n \n     type FrameExtra = ();\n-    type MemoryExtra = ();\n+    type MemoryExtra = MemoryExtra;\n     type AllocExtra = ();\n \n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n@@ -473,7 +485,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     #[inline(always)]\n     fn init_allocation_extra<'b>(\n-        _memory_extra: &(),\n+        _memory_extra: &MemoryExtra,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n@@ -484,7 +496,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     #[inline(always)]\n     fn tag_static_base_pointer(\n-        _memory_extra: &(),\n+        _memory_extra: &MemoryExtra,\n         _id: AllocId,\n     ) -> Self::PointerTag {\n         ()\n@@ -527,6 +539,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n+\n+    fn before_access_static(\n+        memory_extra: &MemoryExtra,\n+        _allocation: &Allocation,\n+    ) -> InterpResult<'tcx> {\n+        if memory_extra.can_access_statics {\n+            Ok(())\n+        } else {\n+            Err(ConstEvalError::NeedsRfc(\n+                \"constants accessing static items\".to_string(),\n+            ).into())\n+        }\n+    }\n }\n \n /// Extracts a field of a (variant of a) const.\n@@ -540,7 +565,7 @@ pub fn const_field<'tcx>(\n     value: &'tcx ty::Const<'tcx>,\n ) -> &'tcx ty::Const<'tcx> {\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     // get the operand again\n     let op = ecx.eval_const_to_op(value, None).unwrap();\n     // downcast\n@@ -560,7 +585,7 @@ pub fn const_caller_location<'tcx>(\n     (file, line, col): (Symbol, u32, u32),\n ) -> &'tcx ty::Const<'tcx> {\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n-    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n+    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n     let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n@@ -581,7 +606,7 @@ pub fn const_variant_index<'tcx>(\n     val: &'tcx ty::Const<'tcx>,\n ) -> VariantIdx {\n     trace!(\"const_variant_index: {:?}\", val);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.eval_const_to_op(val, None).unwrap();\n     ecx.read_discriminant(op).unwrap().1\n }\n@@ -610,7 +635,9 @@ fn validate_and_turn_into_const<'tcx>(\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     let cid = key.value;\n-    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env);\n+    let def_id = cid.instance.def.def_id();\n+    let is_static = tcx.is_static(def_id);\n+    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n     let val = (|| {\n         let mplace = ecx.raw_const_to_mplace(constant)?;\n         let mut ref_tracking = RefTracking::new(mplace);\n@@ -624,8 +651,7 @@ fn validate_and_turn_into_const<'tcx>(\n         // Now that we validated, turn this into a proper constant.\n         // Statics/promoteds are always `ByRef`, for the rest `op_to_const` decides\n         // whether they become immediates.\n-        let def_id = cid.instance.def.def_id();\n-        if tcx.is_static(def_id) || cid.promoted.is_some() {\n+        if is_static || cid.promoted.is_some() {\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Value(ConstValue::ByRef {\n@@ -732,12 +758,14 @@ pub fn const_eval_raw_provider<'tcx>(\n         return Err(ErrorHandled::Reported);\n     }\n \n+    let is_static = tcx.is_static(def_id);\n+\n     let span = tcx.def_span(cid.instance.def_id());\n     let mut ecx = InterpCx::new(\n         tcx.at(span),\n         key.param_env,\n         CompileTimeInterpreter::new(),\n-        Default::default()\n+        MemoryExtra { can_access_statics: is_static },\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n@@ -751,7 +779,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     }).map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n-        if tcx.is_static(def_id) {\n+        if is_static {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n             let v = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");"}, {"sha": "1562a5183160197767b9ae4a330f2b7b013b716d", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -20,7 +20,6 @@ pub trait CompileTimeMachine<'mir, 'tcx> = Machine<\n     PointerTag = (),\n     ExtraFnVal = !,\n     FrameExtra = (),\n-    MemoryExtra = (),\n     AllocExtra = (),\n     MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n >;"}, {"sha": "e77ba9fa4cb0decc6b77bb37658afc3005718f64", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -212,7 +212,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n \n     /// Called before a `StaticKind::Static` value is accessed.\n-    fn before_access_static(_allocation: &Allocation) -> InterpResult<'tcx> {\n+    fn before_access_static(\n+        _memory_extra: &Self::MemoryExtra,\n+        _allocation: &Allocation,\n+    ) -> InterpResult<'tcx> {\n         Ok(())\n     }\n "}, {"sha": "71e6d3e8ca1fc87b783139acc81f0436c929097a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -116,15 +116,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M>\n // carefully copy only the reachable parts.\n impl<'mir, 'tcx, M> Clone for Memory<'mir, 'tcx, M>\n where\n-    M: Machine<'mir, 'tcx, PointerTag = (), AllocExtra = (), MemoryExtra = ()>,\n+    M: Machine<'mir, 'tcx, PointerTag = (), AllocExtra = ()>,\n+    M::MemoryExtra: Copy,\n     M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation)>,\n {\n     fn clone(&self) -> Self {\n         Memory {\n             alloc_map: self.alloc_map.clone(),\n             extra_fn_ptr_map: self.extra_fn_ptr_map.clone(),\n             dead_alloc_map: self.dead_alloc_map.clone(),\n-            extra: (),\n+            extra: self.extra,\n             tcx: self.tcx,\n         }\n     }\n@@ -455,7 +456,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     let id = raw_const.alloc_id;\n                     let allocation = tcx.alloc_map.lock().unwrap_memory(id);\n \n-                    M::before_access_static(allocation)?;\n+                    M::before_access_static(memory_extra, allocation)?;\n                     Cow::Borrowed(allocation)\n                 }\n             }"}, {"sha": "a6b30ab5e68cf6b0ec0e1e3c0c511644b802ee68", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -224,6 +224,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     fn before_access_static(\n+        _memory_extra: &(),\n         allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n     ) -> InterpResult<'tcx> {\n         // if the static allocation is mutable or if it has relocations (it may be legal to mutate"}, {"sha": "b998b7a97be4e773b43f9a2e2805001fb40d534d", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+\n+#![allow(dead_code)]\n+\n+const TEST: &u8 = &MY_STATIC;\n+//~^ skipping const checks\n+//~| it is undefined behavior to use this value\n+\n+static MY_STATIC: u8 = 4;\n+\n+fn main() {\n+}"}, {"sha": "5ebd643b39db88e3f1a4e6eda29a07d0e79c16a6", "filename": "src/test/ui/consts/const-points-to-static.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -0,0 +1,17 @@\n+warning: skipping const checks\n+  --> $DIR/const-points-to-static.rs:5:20\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   |                    ^^^^^^^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const-points-to-static.rs:5:1\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"constants accessing static items\" needs an rfc before being allowed inside constants\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "14ec064e4ceef8a60c01a211c75b489121fc7173", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -1,9 +1,8 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-// run-pass\n \n #![allow(dead_code)]\n \n-const TEST: u8 = MY_STATIC;\n+const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n //~^ skipping const checks\n \n static MY_STATIC: u8 = 4;"}, {"sha": "993cf455aba322a61e4cf5d8625f4d7a21448901", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -1,6 +1,18 @@\n warning: skipping const checks\n-  --> $DIR/const-prop-read-static-in-const.rs:6:18\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n LL | const TEST: u8 = MY_STATIC;\n    |                  ^^^^^^^^^\n \n+error: any use of this value will cause an error\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   | -----------------^^^^^^^^^-\n+   |                  |\n+   |                  \"constants accessing static items\" needs an rfc before being allowed inside constants\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "58eac59ba384d455cd754637f1bb33f7cdd35aa5", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![allow(const_err)]\n+\n+#![feature(const_raw_ptr_deref)]\n+\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::Ordering;\n+\n+const BOO: &usize = { //~ ERROR undefined behavior to use this value\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { &*(&FOO as *const _ as *const usize) }\n+    //~^ WARN skipping const checks\n+};\n+\n+const FOO: usize = {\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    FOO.fetch_add(1, Ordering::Relaxed) // FIXME: this should error\n+    //~^ WARN skipping const checks\n+    //~| WARN skipping const checks\n+};\n+\n+const BAR: usize = {\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { *(&FOO as *const _ as *const usize) } // FIXME: this should error\n+    //~^ WARN skipping const checks\n+};\n+\n+static mut MUTABLE: u32 = 0;\n+const BAD: u32 = unsafe { MUTABLE }; // FIXME: this should error\n+//~^ WARN skipping const checks\n+\n+// ok some day perhaps\n+const BOO_OK: &usize = { //~ ERROR it is undefined behavior to use this value\n+    static FOO: usize = 0;\n+    &FOO\n+    //~^ WARN skipping const checks\n+};\n+fn main() {}"}, {"sha": "044a5232e5a247f6e12f20fcaff4ab6cd72d98be", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -0,0 +1,63 @@\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:11:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:17:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed) // FIXME: this should error\n+   |     ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:17:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed) // FIXME: this should error\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:24:17\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) } // FIXME: this should error\n+   |                 ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:29:27\n+   |\n+LL | const BAD: u32 = unsafe { MUTABLE }; // FIXME: this should error\n+   |                           ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:35:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:9:1\n+   |\n+LL | / const BOO: &usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n+LL | |\n+LL | | };\n+   | |__^ \"constants accessing static items\" needs an rfc before being allowed inside constants\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:33:1\n+   |\n+LL | / const BOO_OK: &usize = {\n+LL | |     static FOO: usize = 0;\n+LL | |     &FOO\n+LL | |\n+LL | | };\n+   | |__^ \"constants accessing static items\" needs an rfc before being allowed inside constants\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "fed08902c8b9d35def06f90722a25d06b55a4bdc", "filename": "src/test/ui/issues/issue-52060.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -3,5 +3,6 @@\n static A: &'static [u32] = &[1];\n static B: [u32; 1] = [0; A.len()];\n //~^ ERROR [E0013]\n+//~| ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "0b54b31abec9c5033d97e0ed651d43de58288f54", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=ad6b9c79d63c3049f1ceb4a0ab0fa101c13de121", "patch": "@@ -4,6 +4,13 @@ error[E0013]: constants cannot refer to statics, use a constant instead\n LL | static B: [u32; 1] = [0; A.len()];\n    |                          ^\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52060.rs:4:26\n+   |\n+LL | static B: [u32; 1] = [0; A.len()];\n+   |                          ^ \"constants accessing static items\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0013`.\n+Some errors have detailed explanations: E0013, E0080.\n+For more information about an error, try `rustc --explain E0013`."}]}