{"sha": "ab382b76616e20bdb29973d44aa220341133d407", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzgyYjc2NjE2ZTIwYmRiMjk5NzNkNDRhYTIyMDM0MTEzM2Q0MDc=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-01-18T15:03:58Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:24Z"}, "message": "mark as_inner as unsafe and update comments", "tree": {"sha": "7227382bc26840ad23e91f0d69ef09907f2e5a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7227382bc26840ad23e91f0d69ef09907f2e5a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab382b76616e20bdb29973d44aa220341133d407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab382b76616e20bdb29973d44aa220341133d407", "html_url": "https://github.com/rust-lang/rust/commit/ab382b76616e20bdb29973d44aa220341133d407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab382b76616e20bdb29973d44aa220341133d407/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a51e579f5ce78c490f0ed584e83cb376a634e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a51e579f5ce78c490f0ed584e83cb376a634e9e", "html_url": "https://github.com/rust-lang/rust/commit/2a51e579f5ce78c490f0ed584e83cb376a634e9e"}], "stats": {"total": 126, "additions": 76, "deletions": 50}, "files": [{"sha": "49d3213217c5d980ce35c06bac27e38bf5742ed3", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab382b76616e20bdb29973d44aa220341133d407/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab382b76616e20bdb29973d44aa220341133d407/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=ab382b76616e20bdb29973d44aa220341133d407", "patch": "@@ -1178,7 +1178,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut Self::Source {\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source {\n         self\n     }\n }"}, {"sha": "9d0ab47f8f250dce72774ed89b049e18bddc0961", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab382b76616e20bdb29973d44aa220341133d407/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab382b76616e20bdb29973d44aa220341133d407/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=ab382b76616e20bdb29973d44aa220341133d407", "patch": "@@ -2167,6 +2167,8 @@ where\n     }\n }\n \n+// A helper struct for in-place iteration that drops the destination slice of iteration.\n+// The source slice is dropped by IntoIter\n struct InPlaceDrop<T> {\n     inner: *mut T,\n     dst: *mut T,\n@@ -2230,8 +2232,10 @@ where\n             return SpecFromNested::from_iter(iterator);\n         }\n \n-        let src_buf = iterator.as_inner().as_into_iter().buf.as_ptr();\n-        let src_end = iterator.as_inner().as_into_iter().end;\n+        let (src_buf, src_end) = {\n+            let inner = unsafe { iterator.as_inner().as_into_iter() };\n+            (inner.buf.as_ptr(), inner.end)\n+        };\n         let dst = src_buf;\n \n         let dst = if mem::needs_drop::<T>() {\n@@ -2273,7 +2277,7 @@ where\n                 .unwrap()\n         };\n \n-        let src = iterator.as_inner().as_into_iter();\n+        let src = unsafe { iterator.as_inner().as_into_iter() };\n         // check if SourceIter and InPlaceIterable contracts were upheld.\n         // caveat: if they weren't we may not even make it to this point\n         debug_assert_eq!(src_buf, src.buf.as_ptr());\n@@ -2993,7 +2997,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut Self::Source {\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source {\n         self\n     }\n }"}, {"sha": "1a4b3d379e435e9317410760b6047f763600db0c", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=ab382b76616e20bdb29973d44aa220341133d407", "patch": "@@ -529,9 +529,10 @@ unsafe impl<S: Iterator, I: FusedIterator> SourceIter for Fuse<I>\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut S {\n         match self.iter {\n-            Some(ref mut iter) => SourceIter::as_inner(iter),\n+            // Safety: unsafe function forwarding to unsafe function with the same requirements\n+            Some(ref mut iter) => unsafe { SourceIter::as_inner(iter) },\n             // SAFETY: the specialized iterator never sets `None`\n             None => unsafe { intrinsics::unreachable() },\n         }"}, {"sha": "2b9d54f7eab5eb0afdd34b7e2fd13deca7bc0730", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 55, "deletions": 40, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=ab382b76616e20bdb29973d44aa220341133d407", "patch": "@@ -22,7 +22,7 @@ use self::zip::try_get_unchecked;\n pub use self::zip::TrustedRandomAccess;\n pub use self::zip::Zip;\n \n-/// This trait provides transitive access to source-stages in an interator-adapter pipeline\n+/// This trait provides transitive access to source-stage in an interator-adapter pipeline\n /// under the conditions that\n /// * the iterator source `S` itself implements `SourceIter<Source = S>`\n /// * there is a delegating implementation of this trait for each adapter in the pipeline between\n@@ -49,40 +49,44 @@ pub use self::zip::Zip;\n ///\n /// let mut iter = vec![9, 9, 9].into_iter().map(|i| i * i);\n /// let _ = iter.next();\n-/// let mut remainder = std::mem::replace(iter.as_inner(), Vec::new().into_iter());\n+/// let mut remainder = std::mem::replace(unsafe { iter.as_inner() }, Vec::new().into_iter());\n /// println!(\"n = {} elements remaining\", remainder.len());\n /// ```\n ///\n-/// [`FromIterator`]: trait.FromIterator.html\n-/// [`as_inner`]: #method.as_inner\n+/// [`FromIterator`]: crate::iter::FromIterator\n+/// [`as_inner`]: SourceIter::as_inner\n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n     type Source: Iterator;\n \n-    /// Extract the source of an iterator pipeline.\n+    /// Retrieve the source of an iterator pipeline.\n     ///\n-    /// Callers may assume that calls to [`next()`] or any method taking `&self`\n-    /// does no replace the referenced value.\n-    /// But callers may replace the referenced values as long they in turn do not\n-    /// expose it through a delegating implementation of this trait.\n-    /// Which means that while adapters may not modify the reference they cannot\n-    /// rely on it not being modified.\n+    /// # Safety\n     ///\n-    /// Adapters must not rely on exclusive ownership or immutability of the source.\n-    /// The lack of exclusive ownership also requires that adapters must uphold the source's\n-    /// public API even when they have crate- or module-internal access.\n+    /// Implementations of must return the same mutable reference for their lifetime, unless\n+    /// replaced by a caller.\n+    /// Callers may only replace the reference when they stopped iteration and drop the\n+    /// iterator pipeline after extracting the source.\n+    ///\n+    /// This means iterator adapters can rely on the source not changing during\n+    /// iteration but they cannot rely on it in their Drop implementations.\n+    ///\n+    /// Implementing this method means adapters relinquish private-only access to their\n+    /// source and can only rely on guarantees made based on method receiver types.\n+    /// The lack of restricted access also requires that adapters must uphold the source's\n+    /// public API even when they have access to its internals.\n     ///\n     /// Callers in turn must expect the source to be in any state that is consistent with\n     /// its public API since adapters sitting between it and the source have the same\n     /// access. In particular an adapter may have consumed more elements than strictly necessary.\n     ///\n-    /// The overall goal of these requirements is to grant the consumer of a pipeline\n-    /// access to the underlying storage of an iterator while restricting any statefulness\n-    /// and side-effects of the pipeline stages from affecting or relying on that storage.\n+    /// The overall goal of these requirements is to let the consumer of a pipeline use\n+    /// * whatever remains in the source after iteration has stopped\n+    /// * the memory that has become unused by advancing a consuming iterator\n     ///\n     /// [`next()`]: trait.Iterator.html#method.next\n-    fn as_inner(&mut self) -> &mut Self::Source;\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source;\n }\n \n /// A double-ended iterator with the direction inverted.\n@@ -1015,8 +1019,9 @@ where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -1162,8 +1167,9 @@ unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P> where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -1305,8 +1311,9 @@ unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F> where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -1541,8 +1548,9 @@ where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -1838,8 +1846,9 @@ where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -1955,8 +1964,9 @@ unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P> where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -2163,8 +2173,9 @@ unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P> where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -2364,8 +2375,9 @@ where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -2487,8 +2499,9 @@ unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I> where I: SourceIter\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -2667,8 +2680,9 @@ unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n \n@@ -2831,8 +2845,9 @@ unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F> where\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.iter)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n "}, {"sha": "d52ae1b05b44bf383b4c23400ce772e47251312e", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab382b76616e20bdb29973d44aa220341133d407/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=ab382b76616e20bdb29973d44aa220341133d407", "patch": "@@ -342,13 +342,19 @@ unsafe impl<S, A, B> SourceIter for Zip<A, B>\n     type Source = S;\n \n     #[inline]\n-    fn as_inner(&mut self) -> &mut S {\n-        SourceIter::as_inner(&mut self.a)\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.a) }\n     }\n }\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<A: InPlaceIterable, B: Iterator> InPlaceIterable for Zip<A, B> {}\n+// Limited to Item: Copy since interaction between Zip's use of TrustedRandomAccess\n+// and Drop implementation of the source is unclear.\n+//\n+// An additional method returning the number of times the source has been logically advanced\n+// (without calling next()) would be needed to properly drop the remainder of the source.\n+unsafe impl<A: InPlaceIterable, B: Iterator> InPlaceIterable for Zip<A, B> where A::Item: Copy {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Debug, B: Debug> Debug for Zip<A, B> {"}]}