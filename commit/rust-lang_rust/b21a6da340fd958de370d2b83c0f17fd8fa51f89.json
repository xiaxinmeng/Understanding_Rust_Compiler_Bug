{"sha": "b21a6da340fd958de370d2b83c0f17fd8fa51f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWE2ZGEzNDBmZDk1OGRlMzcwZDJiODNjMGYxN2ZkOGZhNTFmODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T08:55:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T08:55:22Z"}, "message": "auto merge of #19870 : mdinger/rust/align_error, r=nick29581\n\n#### Updated 1/12/2014\r\n\r\nI updated the multi-line testcase to current but didn't modify the others. The spew code was broke by the `matches!` macro no longer working and I'm not interested in fixing the testcase.\r\n\r\nI additionally added one testcase below.\r\n\r\nErrors will in general look similar to below if the error is either `mismatched types` or a few other types. The rest are ignored.\r\n\r\n---\r\n\r\n#### Extra testcase:\r\n```rust\r\npub trait Foo {\r\n    type A;\r\n    fn boo(&self) -> <Self as Foo>::A;\r\n}\r\n\r\nstruct Bar;\r\n\r\nimpl Foo for i32 {\r\n    type A = u32;\r\n    fn boo(&self) -> u32 {\r\n        42\r\n    }\r\n}\r\n\r\nfn foo1<I: Foo<A=Bar>>(x: I) {\r\n    let _: Bar = x.boo();\r\n}\r\n\r\nfn foo2<I: Foo>(x: I) {\r\n    let _: Bar = x.boo();\r\n}\r\n\r\n\r\npub fn baz(x: &Foo<A=Bar>) {\r\n    let _: Bar = x.boo();\r\n}\r\n\r\n\r\npub fn main() {\r\n    let a = 42i32;\r\n    foo1(a);\r\n    baz(&a);\r\n}\r\n```\r\n\r\n#### Multi-line output:\r\n```cmd\r\n$ ./rustc test3.rs\r\ntest3.rs:20:18: 20:25 error: mismatched types:\r\n expected `Bar`,\r\n    found `<I as Foo>::A`\r\n(expected struct `Bar`,\r\n    found associated type)\r\ntest3.rs:20     let _: Bar = x.boo();\r\n                             ^~~~~~~\r\ntest3.rs:31:5: 31:9 error: type mismatch resolving `<i32 as Foo>::A == Bar`:\r\n expected u32,\r\n    found struct `Bar`\r\ntest3.rs:31     foo1(a);\r\n                ^~~~\r\ntest3.rs:31:5: 31:9 note: required by `foo1`\r\ntest3.rs:31     foo1(a);\r\n                ^~~~\r\ntest3.rs:32:9: 32:11 error: type mismatch resolving `<i32 as Foo>::A == Bar`:\r\n expected u32,\r\n    found struct `Bar`\r\ntest3.rs:32     baz(&a);\r\n                    ^~\r\ntest3.rs:32:9: 32:11 note: required for the cast to the object type `Foo`\r\ntest3.rs:32     baz(&a);\r\n                    ^~\r\nerror: aborting due to 3 previous errors\r\n```\r\n\r\n---\r\n\r\nThis is a continuation of #19203 which I apparently broke by force pushing after it was closed. I'm attempting to add multi-line errors where they are largely beneficial - to help differentiate different types in compiler messages. As before, this is still a simple fix.\r\n\r\n#### Testcase:\r\n```rust\r\nstruct S;\r\n\r\nfn test() -> Option<i32> {\r\n    let s: S;\r\n\r\n    s\r\n}\r\n\r\nfn test2() -> Option<i32> {\r\n    Ok(7) // Should be Some(7)\r\n}\r\n\r\nimpl Iterator for S {\r\n    type Item = i32;\r\n    fn next(&mut self) -> Result<i32, i32> { Ok(7) }\r\n}\r\n\r\nfn main(){ \r\n    test();\r\n    test2();\r\n\r\n}\r\n```\r\n\r\n---\r\n\r\n#### Single-line playpen errors:\r\n```cmd\r\n<anon>:6:5: 6:6 error: mismatched types: expected `core::option::Option<int>`, found `S` (expected enum core::option::Option, found struct S)\r\n<anon>:6     s\r\n             ^\r\n<anon>:10:5: 10:10 error: mismatched types: expected `core::option::Option<int>`, found `core::result::Result<_, _>` (expected enum core::option::Option, found enum core::result::Result)\r\n<anon>:10     Ok(7) // Should be Some(7)\r\n              ^~~~~\r\n<anon>:14:5: 14:55 error: method `next` has an incompatible type for trait: expected enum core::option::Option, found enum core::result::Result [E0053]\r\n<anon>:14     fn next(&mut self) -> Result<uint, uint> { Ok(7) }\r\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nerror: aborting due to 3 previous errors\r\nplaypen: application terminated with error code 101\r\n```\r\n\r\n---\r\n\r\n#### Multi-line errors:\r\n```cmd\r\n$ ./rustc test.rs\r\ntest.rs:6:5: 6:6 error: mismatched types:\r\n expected `core::option::Option<i32>`,\r\n    found `S`\r\n(expected enum `core::option::Option`,\r\n    found struct `S`)\r\ntest.rs:6     s\r\n              ^\r\ntest.rs:10:5: 10:10 error: mismatched types:\r\n expected `core::option::Option<i32>`,\r\n    found `core::result::Result<_, _>`\r\n(expected enum `core::option::Option`,\r\n    found enum `core::result::Result`)\r\ntest.rs:10     Ok(7) // Should be Some(7)\r\n               ^~~~~\r\ntest.rs:15:5: 15:53 error: method `next` has an incompatible type for trait: expected enum `core::option::Option`, found enum `core::result::Result` [E0053]\r\ntest.rs:15     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nerror: aborting due to 3 previous errors\r\n```\r\n\r\n---\r\n\r\n#### Positive notes\r\n* Vim worked fine with it: https://github.com/rust-lang/rust/pull/19203#issuecomment-66861668\r\n* `make check` didn't find any errors\r\n* Fixed *backtick* placement suggested by @p1start at https://github.com/rust-lang/rust/pull/19203#issuecomment-64062052\r\n\r\n#### Negative notes\r\n* Didn't check Emacs support but also wasn't provided a testcase...\r\n* Needs to be tested with macro errors but I don't have a good testcase yet\r\n* I would like to move the `E[0053]` earlier (see https://github.com/rust-lang/rust/issues/19464#issuecomment-65334301) but I don't know how\r\n* It might be better to indent the types slightly like so (but I don't know how):\r\n```cmd\r\ntest.rs:6:5: 6:6 error: mismatched types:\r\n          expected `core::option::Option<int>`,\r\n             found `S`\r\n         (expected enum `core::option::Option`,\r\n             found struct `S`)\r\ntest.rs:6     s\r\n```\r\n* Deep whitespace indentation may be a bad idea because early wrapping will cause misalignment between lines\r\n\r\n#### Other\r\n* I thought that compiler flags or something else (environment variables maybe) might be required because of comments against it but now that seems too much of a burden for users and for too little gain.\r\n* There was concern that it will make large quantities of errors difficult to distinguish but I don't find that an issue. They both look awful and multi-line errors makes the types easier to understand.\r\n\r\n---\r\n\r\n#### Single lined spew:\r\n```cmd\r\n$ rustc test2.rs \r\ntest2.rs:161:9: 170:10 error: method `next` has an incompatible type for trait: expected enum core::option::Option, found enum core::result::Result [E0053]\r\ntest2.rs:161         fn next(&mut self) -> Result<&'a str, int> {\r\ntest2.rs:162             self.curr = self.next;\r\ntest2.rs:163             \r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\ntest2.rs:165                 self.next = if self.all.char_at(self.next) == '(' { close }\r\ntest2.rs:166                 else { open }\r\n             ...\r\ntest2.rs:164:21: 164:31 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\n                                 ^~~~~~~~~~\r\ntest2.rs:164:33: 164:44 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\n                                             ^~~~~~~~~~~\r\ntest2.rs:169:40: 169:76 error: mismatched types: expected `core::result::Result<&'a str, int>`, found `core::option::Option<&str>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\r\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest2.rs:169:86: 169:90 error: mismatched types: expected `core::result::Result<&'a str, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\r\n                                                                                                  ^~~~\r\ntest2.rs:205:14: 205:18 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<uint>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:205             (open, close)\r\n                          ^~~~\r\ntest2.rs:205:20: 205:25 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<uint>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:205             (open, close)\r\n                                ^~~~~\r\ntest2.rs:210:21: 210:31 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\r\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\r\n                                 ^~~~~~~~~~\r\ntest2.rs:210:13: 212:28 error: mismatched types: expected `core::option::Option<&'a int>`, found `core::option::Option<&str>` (expected int, found str)\r\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\r\ntest2.rs:211                 Some(self.all[0..open])\r\ntest2.rs:212             } else { None }\r\ntest2.rs:299:48: 299:58 error: mismatched types: expected `Box<translate::Entity>`, found `collections::vec::Vec<_>` (expected box, found struct collections::vec::Vec)\r\ntest2.rs:299         pub fn new() -> Entity { Entity::Group(Vec::new()) }\r\n                                                            ^~~~~~~~~~\r\ntest2.rs:359:51: 359:58 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\r\ntest2.rs:359                 Entity::Group(ref mut vec) => vec.push(e),\r\n                                                               ^~~~~~~\r\ntest2.rs:366:51: 366:85 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\r\ntest2.rs:366                 Entity::Group(ref mut vec) => vec.push(Entity::Inner(s.to_string())),\r\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nerror: aborting due to 12 previous errors\r\n```\r\n\r\n---\r\n\r\n#### Multi-line spew:\r\n\r\n```cmd\r\n$ ./rustc test2.rs \r\ntest2.rs:161:9: 170:10 error: method `next` has an incompatible type for trait:\r\n expected enum `core::option::Option`,\r\n    found enum `core::result::Result` [E0053]\r\ntest2.rs:161         fn next(&mut self) -> Result<&'a str, int> {\r\ntest2.rs:162             self.curr = self.next;\r\ntest2.rs:163             \r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\ntest2.rs:165                 self.next = if self.all.char_at(self.next) == '(' { close }\r\ntest2.rs:166                 else { open }\r\n             ...\r\ntest2.rs:164:21: 164:31 error: mismatched types:\r\n expected `core::result::Result<uint, int>`,\r\n    found `core::option::Option<_>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\n                                 ^~~~~~~~~~\r\ntest2.rs:164:33: 164:44 error: mismatched types:\r\n expected `core::result::Result<uint, int>`,\r\n    found `core::option::Option<_>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\r\n                                             ^~~~~~~~~~~\r\ntest2.rs:169:40: 169:76 error: mismatched types:\r\n expected `core::result::Result<&'a str, int>`,\r\n    found `core::option::Option<&str>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\r\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest2.rs:169:86: 169:90 error: mismatched types:\r\n expected `core::result::Result<&'a str, int>`,\r\n    found `core::option::Option<_>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\r\n                                                                                                  ^~~~\r\ntest2.rs:205:14: 205:18 error: mismatched types:\r\n expected `core::result::Result<uint, int>`,\r\n    found `core::option::Option<uint>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:205             (open, close)\r\n                          ^~~~\r\ntest2.rs:205:20: 205:25 error: mismatched types:\r\n expected `core::result::Result<uint, int>`,\r\n    found `core::option::Option<uint>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:205             (open, close)\r\n                                ^~~~~\r\ntest2.rs:210:21: 210:31 error: mismatched types:\r\n expected `core::result::Result<uint, int>`,\r\n    found `core::option::Option<_>`\r\n(expected enum `core::result::Result`,\r\n    found enum `core::option::Option`)\r\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\r\n                                 ^~~~~~~~~~\r\ntest2.rs:210:13: 212:28 error: mismatched types:\r\n expected `core::option::Option<&'a int>`,\r\n    found `core::option::Option<&str>`\r\n(expected int,\r\n    found str)\r\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\r\ntest2.rs:211                 Some(self.all[0..open])\r\ntest2.rs:212             } else { None }\r\ntest2.rs:229:57: 229:96 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\r\ntest2.rs:229                                              .map(|s| s.trim_chars(|c: char| c.is_whitespace()))\r\n                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest2.rs:238:46: 239:75 error: type `core::str::CharSplits<'_, |char| -> bool>` does not implement any method in scope named `filter_map`\r\ntest2.rs:238                                             .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\r\ntest2.rs:239                                                             else { None })\r\ntest2.rs:237:46: 237:91 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\r\ntest2.rs:237                 let vec: Vec<&str> = value[].split(|c: char| matches!(c, '(' | ')' | ','))\r\n                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest2.rs:238:65: 238:77 error: the type of this value must be known in this context\r\ntest2.rs:238                                             .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\r\n                                                                             ^~~~~~~~~~~~\r\ntest2.rs:299:48: 299:58 error: mismatched types:\r\n expected `Box<translate::Entity>`,\r\n    found `collections::vec::Vec<_>`\r\n(expected box,\r\n    found struct `collections::vec::Vec`)\r\ntest2.rs:299         pub fn new() -> Entity { Entity::Group(Vec::new()) }\r\n                                                            ^~~~~~~~~~\r\ntest2.rs:321:36: 322:65 error: type `core::str::CharSplits<'_, |char| -> bool>` does not implement any method in scope named `filter_map`\r\ntest2.rs:321                                   .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\r\ntest2.rs:322                                                   else { None })\r\ntest2.rs:320:36: 320:81 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\r\ntest2.rs:320             let vec: Vec<&str> = s.split(|c: char| matches!(c, '(' | ')' | ','))\r\n                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest2.rs:321:55: 321:67 error: the type of this value must be known in this context\r\ntest2.rs:321                                   .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\r\n                                                                   ^~~~~~~~~~~~\r\ntest2.rs:359:51: 359:58 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\r\ntest2.rs:359                 Entity::Group(ref mut vec) => vec.push(e),\r\n                                                               ^~~~~~~\r\ntest2.rs:366:51: 366:85 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\r\ntest2.rs:366                 Entity::Group(ref mut vec) => vec.push(Entity::Inner(s.to_string())),\r\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nerror: aborting due to 24 previous errors\r\n```\r\n\r\nCloses #18946 #19464\r\ncc @P1start @jakub- @tomjakubowski @kballard @chris-morgan", "tree": {"sha": "359e4b73403850c60b8bd5153e0aa4dc8ffebc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/359e4b73403850c60b8bd5153e0aa4dc8ffebc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21a6da340fd958de370d2b83c0f17fd8fa51f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a6da340fd958de370d2b83c0f17fd8fa51f89", "html_url": "https://github.com/rust-lang/rust/commit/b21a6da340fd958de370d2b83c0f17fd8fa51f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21a6da340fd958de370d2b83c0f17fd8fa51f89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "486f60df8797aa96e0a459227089945d06b88303", "url": "https://api.github.com/repos/rust-lang/rust/commits/486f60df8797aa96e0a459227089945d06b88303", "html_url": "https://github.com/rust-lang/rust/commit/486f60df8797aa96e0a459227089945d06b88303"}, {"sha": "7b82a93be3798d9345cd459e251bcc571cf60a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b82a93be3798d9345cd459e251bcc571cf60a79", "html_url": "https://github.com/rust-lang/rust/commit/7b82a93be3798d9345cd459e251bcc571cf60a79"}], "stats": {"total": 1273, "additions": 1048, "deletions": 225}, "files": [{"sha": "5579479c5e5aca5df77ebf0b2edf4fa9e3f1249d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -966,6 +966,16 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         line.starts_with( prefix )\n     }\n \n+    // A multi-line error will have followup lines which will always\n+    // start with one of these strings.\n+    fn continuation( line: &str) -> bool {\n+        line.starts_with(\" expected\") ||\n+        line.starts_with(\"    found\") ||\n+        //                1234\n+        // Should have 4 spaces: see issue 18946\n+        line.starts_with(\"(\")\n+    }\n+\n     // Scan and extract our error/warning messages,\n     // which look like:\n     //    filename:line1:col1: line2:col2: *error:* msg\n@@ -981,7 +991,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                        ee.kind,\n                        ee.msg,\n                        line);\n-                if prefix_matches(line, prefixes[i].as_slice()) &&\n+                if (prefix_matches(line, prefixes[i].as_slice()) || continuation(line)) &&\n                     line.contains(ee.kind.as_slice()) &&\n                     line.contains(ee.msg.as_slice()) {\n                     found_flags[i] = true;"}, {"sha": "b79f19413ef924dec6e35e598821236f61f1293a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -36,6 +36,7 @@ extern crate fmt_macros;\n extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n+extern crate regex;\n extern crate rustc_llvm;\n extern crate rustc_back;\n extern crate serialize;"}, {"sha": "cf30969ebefcc8540c3e6982c21475f57cc665e1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -4702,7 +4702,7 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n         }\n         ty_tup(ref tys) if tys.is_empty() => ::util::ppaux::ty_to_string(cx, ty),\n \n-        ty_enum(id, _) => format!(\"enum {}\", item_path_str(cx, id)),\n+        ty_enum(id, _) => format!(\"enum `{}`\", item_path_str(cx, id)),\n         ty_uniq(_) => \"box\".to_string(),\n         ty_vec(_, Some(n)) => format!(\"array of {} elements\", n),\n         ty_vec(_, None) => \"slice\".to_string(),\n@@ -4714,7 +4714,7 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n             format!(\"trait {}\", item_path_str(cx, inner.principal_def_id()))\n         }\n         ty_struct(id, _) => {\n-            format!(\"struct {}\", item_path_str(cx, id))\n+            format!(\"struct `{}`\", item_path_str(cx, id))\n         }\n         ty_unboxed_closure(..) => \"closure\".to_string(),\n         ty_tup(_) => \"tuple\".to_string(),"}, {"sha": "27acc39c77863304291884edd0c70a4709556795", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -15,6 +15,8 @@ use metadata::filesearch;\n use session::search_paths::PathKind;\n use util::nodemap::NodeMap;\n \n+use regex::Regex;\n+\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use syntax::diagnostic::{self, Emitter};\n@@ -71,7 +73,58 @@ impl Session {\n         self.diagnostic().handler().fatal(msg)\n     }\n     pub fn span_err(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_err(sp, msg)\n+        // Conditions for enabling multi-line errors:\n+        if !msg.contains(\"mismatched types\") &&\n+           !msg.contains(\"type mismatch resolving\") &&\n+           !msg.contains(\"if and else have incompatible types\") &&\n+           !msg.contains(\"if may be missing an else clause\") &&\n+           !msg.contains(\"match arms have incompatible types\") &&\n+           !msg.contains(\"structure constructor specifies a structure of type\") {\n+            return self.diagnostic().span_err(sp, msg);\n+        }\n+\n+        let first  = Regex::new(r\"[( ]expected\").unwrap();\n+        let second = Regex::new(r\" found\").unwrap();\n+        let third  = Regex::new(\n+                     r\"\\((values differ|lifetime|cyclic type of infinite size)\").unwrap();\n+\n+        let mut new_msg = String::new();\n+        let mut head = 0u;\n+\n+        // Insert `\\n` before expected and found.\n+        for (pos1, pos2) in first.find_iter(msg).zip(\n+                            second.find_iter(msg)) {\n+            new_msg = new_msg +\n+            // A `(` may be preceded by a space and it should be trimmed\n+                      msg[head..pos1.0].trim_right() + // prefix\n+                      \"\\n\" +                           // insert before first\n+                      &msg[pos1.0..pos1.1] +           // insert what first matched\n+                      &msg[pos1.1..pos2.0] +           // between matches\n+                      \"\\n   \" +                        // insert before second\n+            //           123\n+            // `expected` is 3 char longer than `found`. To align the types, `found` gets\n+            // 3 spaces prepended.\n+                      &msg[pos2.0..pos2.1];            // insert what second matched\n+\n+            head = pos2.1;\n+        }\n+\n+        let mut tail = &msg[head..];\n+        // Insert `\\n` before any remaining messages which match.\n+        for pos in third.find_iter(tail).take(1) {\n+            // The end of the message may just be wrapped in `()` without `expected`/`found`.\n+            // Push this also to a new line and add the final tail after.\n+            new_msg = new_msg +\n+            // `(` is usually preceded by a space and should be trimmed.\n+                      tail[..pos.0].trim_right() + // prefix\n+                      \"\\n\" +                       // insert before paren\n+                      &tail[pos.0..];              // append the tail\n+\n+            tail = \"\";\n+        }\n+\n+        new_msg.push_str(tail);\n+        self.diagnostic().span_err(sp, &new_msg[])\n     }\n     pub fn span_err_with_code(&self, sp: Span, msg: &str, code: &str) {\n         self.diagnostic().span_err_with_code(sp, msg, code)"}, {"sha": "2415288a3eb73f458881b9a7044e3716b32d93ab", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -9,8 +9,18 @@\n // except according to those terms.\n \n fn main() {\n-    let _x: isize = [1is, 2, 3]; //~ ERROR expected isize, found array of 3 elements\n+    let _x: isize = [1is, 2, 3];\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `[isize; 3]`\n+    //~| expected isize\n+    //~| found array of 3 elements\n \n     let x: &[isize] = &[1, 2, 3];\n-    let _y: &isize = x; //~ ERROR expected isize, found slice\n+    let _y: &isize = x;\n+    //~^ ERROR mismatched types\n+    //~| expected `&isize`\n+    //~| found `&[isize]`\n+    //~| expected isize\n+    //~| found slice\n }"}, {"sha": "fdfff559086f35c0e91c265dbf96217af88817d2", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -30,7 +30,12 @@ fn foo1<I: Foo<A=Bar>>(x: I) {\n }\n \n fn foo2<I: Foo>(x: I) {\n-    let _: Bar = x.boo(); //~ERROR mismatched types\n+    let _: Bar = x.boo();\n+    //~^ ERROR mismatched types\n+    //~| expected `Bar`\n+    //~| found `<I as Foo>::A`\n+    //~| expected struct `Bar`\n+    //~| found associated type\n }\n \n \n@@ -41,6 +46,12 @@ pub fn baz(x: &Foo<A=Bar>) {\n \n pub fn main() {\n     let a = 42is;\n-    foo1(a); //~ERROR expected usize, found struct Bar\n-    baz(&a); //~ERROR expected usize, found struct Bar\n+    foo1(a);\n+    //~^ ERROR type mismatch resolving\n+    //~| expected usize\n+    //~| found struct `Bar`\n+    baz(&a);\n+    //~^ ERROR type mismatch resolving\n+    //~| expected usize\n+    //~| found struct `Bar`\n }"}, {"sha": "5cb9aca8bebd0d97dcd7a5705818abd77c4b64a8", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -25,7 +25,9 @@ pub fn f2<T: Foo>(a: T) -> T::A {\n \n pub fn f1_int_int() {\n     f1(2is, 4is);\n-    //~^ ERROR expected usize, found isize\n+    //~^ ERROR type mismatch resolving\n+    //~| expected usize\n+    //~| found isize\n }\n \n pub fn f1_int_uint() {\n@@ -46,7 +48,11 @@ pub fn f1_uint_int() {\n \n pub fn f2_int() {\n     let _: isize = f2(2is);\n-    //~^ ERROR expected `isize`, found `usize`\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `usize`\n+    //~| expected isize\n+    //~| found usize\n }\n \n pub fn main() { }"}, {"sha": "ed62506420a7ca7cc3321d36e715035e8140c0d0", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `collections::string::String`, found `isize`\n-\n static i: String = 10is;\n+//~^ ERROR mismatched types\n+//~| expected `collections::string::String`\n+//~| found `isize`\n+//~| expected struct `collections::string::String`\n+//~| found isize\n fn main() { println!(\"{}\", i); }"}, {"sha": "30039a1c54c3a2d9fba92f471cba2d386bddc255", "filename": "src/test/compile-fail/block-must-not-have-result-do.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()`, found `bool`\n-\n fn main() {\n     loop {\n-        true\n+        true //~  ERROR mismatched types\n+             //~| expected ()\n+             //~| found bool\n+             //~| expected ()\n+             //~| found bool\n     }\n }"}, {"sha": "6161660ddf7b3ed9daf2ecd36ffb67067256cc9e", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()`, found `bool`\n-\n struct r;\n \n impl Drop for r {\n     fn drop(&mut self) {\n-        true\n+        true //~  ERROR mismatched types\n+             //~| expected ()\n+             //~| found bool\n+             //~| expected ()\n+             //~| found bool\n     }\n }\n "}, {"sha": "ba6340ed395ee934f278d45d66bb7e64ef13e482", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()`, found `bool`\n-\n fn main() {\n     while true {\n-        true\n+        true //~  ERROR mismatched types\n+             //~| expected `()`\n+             //~| found `bool`\n+             //~| expected ()\n+             //~| found bool\n     }\n }"}, {"sha": "d7a37d2699186615be74590714c22ed1c65881f2", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,5 +11,10 @@\n // Tests that we forbid coercion from `[T; n]` to `&[T]`\n \n fn main() {\n-    let _: &[isize] = [0is]; //~ERROR: mismatched types: expected `&[isize]`, found `[isize; 1]`\n+    let _: &[isize] = [0is];\n+    //~^ ERROR mismatched types\n+    //~| expected `&[isize]`\n+    //~| found `[isize; 1]`\n+    //~| expected &-ptr\n+    //~| found array of 1 elements\n }"}, {"sha": "6e3732908ac06451beb0f61b3d74f802d0ccf62e", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,9 +10,17 @@\n \n static a: &'static str = \"foo\";\n static b: *const u8 = a as *const u8;\n-//~^ ERROR mismatched types: expected `*const u8`, found `&'static str`\n+//~^ ERROR mismatched types\n+//~| expected *const u8\n+//~| found &'static str\n+//~| expected u8\n+//~| found str\n static c: *const u8 = &a as *const u8;\n-//~^ ERROR mismatched types: expected `*const u8`, found `&&'static str`\n+//~^ ERROR mismatched types\n+//~| expected *const u8\n+//~| found &&'static str\n+//~| expected u8\n+//~| found &-ptr\n \n fn main() {\n }"}, {"sha": "86b7a8c89184abcbcd51e4bfe711360c61694f68", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -19,6 +19,10 @@ impl Trait for Foo {}\n \n pub fn main() {\n     let x: Box<Trait> = box Foo;\n-    let _y: &Trait = x; //~ ERROR mismatched types: expected `&Trait`, found `Box<Trait>`\n+    let _y: &Trait = x; //~  ERROR mismatched types\n+                        //~| expected `&Trait`\n+                        //~| found `Box<Trait>`\n+                        //~| expected &-ptr\n+                        //~| found box\n }\n "}, {"sha": "5cc0d6a143ae2078cc1e778741bfeaad116f9bab", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -37,7 +37,22 @@ fn main() {\n     let box x = box 1is as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1is as &T;     //~ ERROR found &-ptr\n-    let &&&x = &(&1is as &T); //~ ERROR found &-ptr\n-    let box box x = box 1is as Box<T>;    //~ ERROR found box\n+    let &&x = &1is as &T;\n+    //~^ ERROR mismatched types\n+    //~| expected `T`\n+    //~| found `&_`\n+    //~| expected trait T\n+    //~| found &-ptr\n+    let &&&x = &(&1is as &T);\n+    //~^ ERROR mismatched types\n+    //~| expected `T`\n+    //~| found `&_`\n+    //~| expected trait T\n+    //~| found &-ptr\n+    let box box x = box 1is as Box<T>;\n+    //~^ ERROR mismatched types\n+    //~| expected `T`\n+    //~| found `Box<_>`\n+    //~| expected trait T\n+    //~| found box\n }"}, {"sha": "152864b601c20818da6b5f6a8eff691d58a97305", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -44,6 +44,11 @@ pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n-    f5.ptr = Bar1 {f: 36}; //~ ERROR mismatched types: expected `ToBar`, found `Bar1`\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `ToBar`\n+    f5.ptr = Bar1 {f: 36};\n+    //~^ ERROR mismatched types\n+    //~| expected `ToBar`\n+    //~| found `Bar1`\n+    //~| expected trait ToBar\n+    //~| found struct `Bar1`\n+    //~| ERROR the trait `core::marker::Sized` is not implemented for the type `ToBar`\n }"}, {"sha": "2b96c5ebe1284c1647e9aa991ecb03d651ddbb25", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -22,7 +22,11 @@ pub fn main() {\n     let f1 = Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = &f1;\n     let f3: &Fat<[usize]> = f2;\n-    //~^ ERROR mismatched types: expected `&Fat<[usize]>`, found `&Fat<[isize; 3]>`\n+    //~^ ERROR mismatched types\n+    //~| expected `&Fat<[usize]>`\n+    //~| found `&Fat<[isize; 3]>`\n+    //~| expected usize\n+    //~| found isize\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "c1443bdbb309d691375d26c384d7e5b04a2d3c0a", "filename": "src/test/compile-fail/dst-bad-coerce4.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -18,5 +18,9 @@ pub fn main() {\n     // With a vec of isizes.\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n-    //~^ ERROR mismatched types: expected `&Fat<[isize; 3]>`, found `&Fat<[isize]>`\n+    //~^ ERROR mismatched types\n+    //~| expected `&Fat<[isize; 3]>`\n+    //~| found `&Fat<[isize]>`\n+    //~| expected array of 3 elements\n+    //~| found slice\n }"}, {"sha": "92542ab3bcb8114fe9a316806c44c7efb8a462b5", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -15,8 +15,14 @@ struct Foo<'a,'b> {\n \n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self: Foo<'b,'a>) {}\n-    //~^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n-    //~^^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<'a, 'b>`\n+    //~| found `Foo<'b, 'a>`\n+    //~| lifetime mismatch\n+    //~| ERROR mismatched types\n+    //~| expected `Foo<'a, 'b>`\n+    //~| found `Foo<'b, 'a>`\n+    //~| lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "5015810ff47742cb86dc0e54d54f9ec0e3bf22e2", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -18,8 +18,16 @@ fn eq<T>(x: T, y: T) { }\n \n fn main() {\n     let f = if true { foo } else { bar };\n-    //~^ ERROR expected fn item, found a different fn item\n+    //~^ ERROR if and else have incompatible types\n+    //~| expected `fn(isize) -> isize {foo}`\n+    //~| found `fn(isize) -> isize {bar}`\n+    //~| expected fn item,\n+    //~| found a different fn item\n \n     eq(foo, bar);\n-    //~^ ERROR expected fn item, found a different fn item\n+    //~^ ERROR mismatched types\n+    //~|  expected `fn(isize) -> isize {foo}`\n+    //~|  found `fn(isize) -> isize {bar}`\n+    //~|  expected fn item\n+    //~|  found a different fn item\n }"}, {"sha": "f19e27640cbc7ce460b6a9af3bea66680c59f0c7", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,12 +14,25 @@\n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n fn main() {\n-    let _: () = (box |:_: isize| {}) as Box<FnOnce(isize)>; //~ ERROR object-safe\n-    //~^ ERROR Box<core::ops::FnOnce(isize)>\n+    let _: () = (box |:_: isize| {}) as Box<FnOnce(isize)>;\n+    //~^ ERROR object-safe\n+    //~| ERROR mismatched types\n+    //~| expected `()`\n+    //~| found `Box<core::ops::FnOnce(isize)>`\n+    //~| expected ()\n+    //~| found box\n     let _: () = (box |&:_: isize, isize| {}) as Box<Fn(isize, isize)>;\n-    //~^ ERROR Box<core::ops::Fn(isize, isize)>\n+    //~^ ERROR mismatched types\n+    //~| expected `()`\n+    //~| found `Box<core::ops::Fn(isize, isize)>`\n+    //~| expected ()\n+    //~| found box\n     let _: () = (box |&mut:| -> isize unimplemented!()) as Box<FnMut() -> isize>;\n-    //~^ ERROR Box<core::ops::FnMut() -> isize>\n+    //~^ ERROR mismatched types\n+    //~| expected `()`\n+    //~| found `Box<core::ops::FnMut() -> isize>`\n+    //~| expected ()\n+    //~| found box\n \n     needs_fn(1is); //~ ERROR `core::ops::Fn(isize) -> isize`\n }"}, {"sha": "029acbff9c33327217b8307a05deb6290b0245fb", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,5 +13,9 @@\n fn main() {\n     let x: Option<usize>;\n     x = 5;\n-    //~^ ERROR mismatched types: expected `core::option::Option<usize>`\n+    //~^ ERROR mismatched types\n+    //~| expected `core::option::Option<usize>`\n+    //~| found `_`\n+    //~| expected enum `core::option::Option`\n+    //~| found integral variable\n }"}, {"sha": "ab542d90800b24d85f6804565fd89767278a3a39", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -20,7 +20,11 @@ mod y {\n \n fn bar(x: x::foo) -> y::foo {\n     return x;\n-    //~^ ERROR mismatched types: expected `y::foo`, found `x::foo`\n+    //~^ ERROR mismatched types\n+    //~| expected `y::foo`\n+    //~| found `x::foo`\n+    //~| expected enum `y::foo`\n+    //~| found enum `x::foo`\n }\n \n fn main() {"}, {"sha": "d6d668b366aa35006332a51de4b9a6a0746e5e26", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,7 +14,11 @@ use std::option::Option;\n \n fn bar(x: usize) -> Option<usize> {\n     return x;\n-    //~^ ERROR mismatched types: expected `core::option::Option<usize>`\n+    //~^ ERROR mismatched types\n+    //~| expected `core::option::Option<usize>`\n+    //~| found `usize`\n+    //~| expected enum `core::option::Option`\n+    //~| found usize\n }\n \n fn main() {"}, {"sha": "3e34344d78b9dfbf9bd3da56caeefb116649af03", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -19,23 +19,47 @@ struct HashMap<K, V, H = Hash<K>>;\n fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n-    //~^ ERROR mismatched types: expected `Foo<isize>`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<isize>`\n+    //~| found `()`\n+    //~| expected struct `Foo`\n+    //~| found ()\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<isize>`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<isize>`\n+    //~| found `()`\n+    //~| expected struct `Foo`\n+    //~| found ()\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, isize>`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `HashMap<collections::string::String, isize>`\n+    //~| found `()`\n+    //~| expected struct `HashMap`\n+    //~| found ()\n     let _: HashMap<String, isize, Hash<String>> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, isize>`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `HashMap<collections::string::String, isize>`\n+    //~| found `()`\n+    //~| expected struct `HashMap`\n+    //~| found ()\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<A, isize>`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<A, isize>`\n+    //~| found `()`\n+    //~| expected struct `Foo`\n+    //~| found ()\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo`, found `()`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo`\n+    //~| found `()`\n+    //~| expected struct `Foo`\n+    //~| found ()\n }"}, {"sha": "2209a02c6391846a2d7c2e4220d38614680d0ec9", "filename": "src/test/compile-fail/if-branch-types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,5 +10,9 @@\n \n fn main() {\n     let x = if true { 10is } else { 10us };\n-    //~^ ERROR if and else have incompatible types: expected `isize`, found `usize`\n+    //~^ ERROR if and else have incompatible types\n+    //~| expected `isize`\n+    //~| found `usize`\n+    //~| expected isize\n+    //~| found usize\n }"}, {"sha": "a9567f4272f507e97576b0818e08960b66ddef87", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,6 +10,10 @@\n \n fn main() {\n     let a = if true { true };\n-//~^ ERROR if may be missing an else clause: expected `()`, found `bool` (expected (), found bool)\n+    //~^ ERROR if may be missing an else clause\n+    //~| expected `()`\n+    //~| found `bool`\n+    //~| expected ()\n+    //~| found bool\n     println!(\"{}\", a);\n }"}, {"sha": "5d9314faef98219d1dbcd8c0e371af9569a9f252", "filename": "src/test/compile-fail/integer-literal-suffix-inference.rs", "status": "modified", "additions": 216, "deletions": 36, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -39,62 +39,242 @@ fn main() {\n     fn id_u64(n: u64) -> u64 { n }\n \n     id_i8(a8); // ok\n-    id_i8(a16); //~ ERROR mismatched types: expected `i8`, found `i16`\n-    id_i8(a32); //~ ERROR mismatched types: expected `i8`, found `i32`\n-    id_i8(a64); //~ ERROR mismatched types: expected `i8`, found `i64`\n+    id_i8(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i16`\n+    //~| expected i8\n+    //~| found i16\n+    id_i8(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i32`\n+    //~| expected i8\n+    //~| found i32\n+    id_i8(a64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i64`\n+    //~| expected i8\n+    //~| found i64\n \n-    id_i16(a8); //~ ERROR mismatched types: expected `i16`, found `i8`\n+    id_i16(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i8`\n+    //~| expected i16\n+    //~| found i8\n     id_i16(a16); // ok\n-    id_i16(a32); //~ ERROR mismatched types: expected `i16`, found `i32`\n-    id_i16(a64); //~ ERROR mismatched types: expected `i16`, found `i64`\n+    id_i16(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i32`\n+    //~| expected i16\n+    //~| found i32\n+    id_i16(a64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i64`\n+    //~| expected i16\n+    //~| found i64\n \n-    id_i32(a8); //~ ERROR mismatched types: expected `i32`, found `i8`\n-    id_i32(a16); //~ ERROR mismatched types: expected `i32`, found `i16`\n+    id_i32(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i8`\n+    //~| expected i32\n+    //~| found i8\n+    id_i32(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i16`\n+    //~| expected i32\n+    //~| found i16\n     id_i32(a32); // ok\n-    id_i32(a64); //~ ERROR mismatched types: expected `i32`, found `i64`\n+    id_i32(a64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i64`\n+    //~| expected i32\n+    //~| found i64\n \n-    id_i64(a8); //~ ERROR mismatched types: expected `i64`, found `i8`\n-    id_i64(a16); //~ ERROR mismatched types: expected `i64`, found `i16`\n-    id_i64(a32); //~ ERROR mismatched types: expected `i64`, found `i32`\n+    id_i64(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i8`\n+    //~| expected i64\n+    //~| found i8\n+    id_i64(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i16`\n+    //~| expected i64\n+    //~| found i16\n+    id_i64(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i32`\n+    //~| expected i64\n+    //~| found i32\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n-    id_i8(c16); //~ ERROR mismatched types: expected `i8`, found `i16`\n-    id_i8(c32); //~ ERROR mismatched types: expected `i8`, found `i32`\n-    id_i8(c64); //~ ERROR mismatched types: expected `i8`, found `i64`\n+    id_i8(c16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i16`\n+    //~| expected i8\n+    //~| found i16\n+    id_i8(c32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i32`\n+    //~| expected i8\n+    //~| found i32\n+    id_i8(c64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`\n+    //~| found `i64`\n+    //~| expected i8\n+    //~| found i64\n \n-    id_i16(c8); //~ ERROR mismatched types: expected `i16`, found `i8`\n+    id_i16(c8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i8`\n+    //~| expected i16\n+    //~| found i8\n     id_i16(c16); // ok\n-    id_i16(c32); //~ ERROR mismatched types: expected `i16`, found `i32`\n-    id_i16(c64); //~ ERROR mismatched types: expected `i16`, found `i64`\n+    id_i16(c32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i32`\n+    //~| expected i16\n+    //~| found i32\n+    id_i16(c64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `i64`\n+    //~| expected i16\n+    //~| found i64\n \n-    id_i32(c8); //~ ERROR mismatched types: expected `i32`, found `i8`\n-    id_i32(c16); //~ ERROR mismatched types: expected `i32`, found `i16`\n+    id_i32(c8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i8`\n+    //~| expected i32\n+    //~| found i8\n+    id_i32(c16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i16`\n+    //~| expected i32\n+    //~| found i16\n     id_i32(c32); // ok\n-    id_i32(c64); //~ ERROR mismatched types: expected `i32`, found `i64`\n+    id_i32(c64);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i64`\n+    //~| expected i32\n+    //~| found i64\n \n-    id_i64(a8); //~ ERROR mismatched types: expected `i64`, found `i8`\n-    id_i64(a16); //~ ERROR mismatched types: expected `i64`, found `i16`\n-    id_i64(a32); //~ ERROR mismatched types: expected `i64`, found `i32`\n+    id_i64(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i8`\n+    //~| expected i64\n+    //~| found i8\n+    id_i64(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i16`\n+    //~| expected i64\n+    //~| found i16\n+    id_i64(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`\n+    //~| found `i32`\n+    //~| expected i64\n+    //~| found i32\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n-    id_u8(b16); //~ ERROR mismatched types: expected `u8`, found `u16`\n-    id_u8(b32); //~ ERROR mismatched types: expected `u8`, found `u32`\n-    id_u8(b64); //~ ERROR mismatched types: expected `u8`, found `u64`\n+    id_u8(b16);\n+    //~^ ERROR mismatched types\n+    //~| expected `u8`\n+    //~| found `u16`\n+    //~| expected u8\n+    //~| found u16\n+    id_u8(b32);\n+    //~^ ERROR mismatched types\n+    //~| expected `u8`\n+    //~| found `u32`\n+    //~| expected u8\n+    //~| found u32\n+    id_u8(b64);\n+    //~^ ERROR mismatched types\n+    //~| expected `u8`\n+    //~| found `u64`\n+    //~| expected u8\n+    //~| found u64\n \n-    id_u16(b8); //~ ERROR mismatched types: expected `u16`, found `u8`\n+    id_u16(b8);\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `u8`\n+    //~| expected u16\n+    //~| found u8\n     id_u16(b16); // ok\n-    id_u16(b32); //~ ERROR mismatched types: expected `u16`, found `u32`\n-    id_u16(b64); //~ ERROR mismatched types: expected `u16`, found `u64`\n+    id_u16(b32);\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `u32`\n+    //~| expected u16\n+    //~| found u32\n+    id_u16(b64);\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `u64`\n+    //~| expected u16\n+    //~| found u64\n \n-    id_u32(b8); //~ ERROR mismatched types: expected `u32`, found `u8`\n-    id_u32(b16); //~ ERROR mismatched types: expected `u32`, found `u16`\n+    id_u32(b8);\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`\n+    //~| found `u8`\n+    //~| expected u32\n+    //~| found u8\n+    id_u32(b16);\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`\n+    //~| found `u16`\n+    //~| expected u32\n+    //~| found u16\n     id_u32(b32); // ok\n-    id_u32(b64); //~ ERROR mismatched types: expected `u32`, found `u64`\n+    id_u32(b64);\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`\n+    //~| found `u64`\n+    //~| expected u32\n+    //~| found u64\n \n-    id_u64(b8); //~ ERROR mismatched types: expected `u64`, found `u8`\n-    id_u64(b16); //~ ERROR mismatched types: expected `u64`, found `u16`\n-    id_u64(b32); //~ ERROR mismatched types: expected `u64`, found `u32`\n+    id_u64(b8);\n+    //~^ ERROR mismatched types\n+    //~| expected `u64`\n+    //~| found `u8`\n+    //~| expected u64\n+    //~| found u8\n+    id_u64(b16);\n+    //~^ ERROR mismatched types\n+    //~| expected `u64`\n+    //~| found `u16`\n+    //~| expected u64\n+    //~| found u16\n+    id_u64(b32);\n+    //~^ ERROR mismatched types\n+    //~| expected `u64`\n+    //~| found `u32`\n+    //~| expected u64\n+    //~| found u32\n     id_u64(b64); // ok\n }"}, {"sha": "3374f715917c20af3cf13ae41015c4701ffb5847", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,5 +11,9 @@\n fn main() {\n     let mut x = 2;\n     x = 5.0;\n-//~^ ERROR expected `_`, found `_` (expected integral variable, found floating-point variable)\n+    //~^ ERROR mismatched types\n+    //~| expected `_`\n+    //~| found `_`\n+    //~| expected integral variable\n+    //~| found floating-point variable\n }"}, {"sha": "6e84e777898b6d7622ae41c5df3223998a6b9991", "filename": "src/test/compile-fail/issue-10176.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,7 +10,11 @@\n \n fn f() -> isize {\n     (return 1, return 2)\n-//~^ ERROR mismatched types: expected `isize`, found `(_, _)` (expected isize, found tuple)\n+//~^ ERROR mismatched types\n+//~| expected `isize`\n+//~| found `(_, _)`\n+//~| expected isize\n+//~| found tuple\n }\n \n fn main() {}"}, {"sha": "d3e44b71b1c89e44957f17783a7d7a72b089783c", "filename": "src/test/compile-fail/issue-11319.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,7 +10,11 @@\n \n fn main() {\n     match Some(10) {\n-    //~^ ERROR match arms have incompatible types: expected `bool`, found `()`\n+    //~^ ERROR match arms have incompatible types:\n+    //~| expected `bool`\n+    //~| found `()`\n+    //~| expected bool\n+    //~| found ()\n         Some(5) => false,\n         Some(2) => true,\n         None    => (), //~ NOTE match arm with an incompatible type"}, {"sha": "2de86e527ef594460289a4307d522cd75e6918a1", "filename": "src/test/compile-fail/issue-11771.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,11 +11,19 @@\n fn main() {\n     let x = ();\n     1 +\n-    x //~ ERROR mismatched types: expected `_`, found `()` (expected integral variable, found ())\n+    x //~  ERROR mismatched types\n+      //~| expected `_`\n+      //~| found `()`\n+      //~| expected integral variable\n+      //~| found ()\n     ;\n \n     let x: () = ();\n     1 +\n-    x //~ ERROR mismatched types: expected `_`, found `()` (expected integral variable, found ())\n+    x //~  ERROR mismatched types\n+      //~| expected `_`\n+      //~| found `()`\n+      //~| expected integral variable\n+      //~| found ()\n     ;\n }"}, {"sha": "1cf534e7e419db0b0403181a71ac5d36dd8fc10b", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,6 +12,10 @@\n \n //! Test that makes sure wrongly-typed bench functions are rejected\n \n-// error-pattern:expected &-ptr, found isize\n #[bench]\n fn bar(x: isize) { }\n+//~^ ERROR mismatched types\n+//~| expected `fn(&mut test::Bencher)`\n+//~| found `fn(isize) {bar}`\n+//~| expected &-ptr\n+//~| found isize"}, {"sha": "61b50ef705f6a44f8acc388136e73e6f5ba55f80", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -35,5 +35,9 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n \n fn main() {\n     check((3us, 5us));\n-//~^ ERROR mismatched types: expected `&_`, found `(usize, usize)` (expected &-ptr, found tuple)\n+//~^ ERROR mismatched types\n+//~| expected `&_`\n+//~| found `(usize, usize)`\n+//~| expected &-ptr\n+//~| found tuple\n }"}, {"sha": "c53e5760941f15d9611f00255eafc5cc1d8e6b95", "filename": "src/test/compile-fail/issue-13359.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,8 +14,16 @@ fn bar(_s: u32) { }\n \n fn main() {\n     foo(1*(1 as isize));\n-    //~^ ERROR: mismatched types: expected `i16`, found `isize` (expected i16, found isize)\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`\n+    //~| found `isize`\n+    //~| expected i16\n+    //~| found isize\n \n     bar(1*(1 as usize));\n-    //~^ ERROR: mismatched types: expected `u32`, found `usize` (expected u32, found usize)\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`\n+    //~| found `usize`\n+    //~| expected u32\n+    //~| found usize\n }"}, {"sha": "09e2905dc401be3563ae5814db429f20032e3587", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -15,7 +15,18 @@ pub fn main() {\n     // the actual arm `Result<T, E>` has two. typeck should not be\n     // tricked into looking up a non-existing second type parameter.\n     let _x: usize = match Some(1us) {\n-        Ok(u) => u, //~ ERROR  mismatched types: expected `core::option::Option<usize>`\n-        Err(e) => panic!(e)  //~ ERROR mismatched types: expected `core::option::Option<usize>`\n+        Ok(u) => u,\n+        //~^ ERROR mismatched types\n+        //~| expected `core::option::Option<usize>`\n+        //~| found `core::result::Result<_, _>`\n+        //~| expected enum `core::option::Option`\n+        //~| found enum `core::result::Result`\n+\n+        Err(e) => panic!(e)\n+        //~^ ERROR mismatched types\n+        //~| expected `core::option::Option<usize>`\n+        //~| found `core::result::Result<_, _>`\n+        //~| expected enum `core::option::Option`\n+        //~| found enum `core::result::Result`\n     };\n }"}, {"sha": "86a79416c77bc6807d16123c3d209a0170165608", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,8 +14,11 @@ fn main() {\n     let x = [1,2];\n     let y = match x {\n         [] => None,\n-        //~^ ERROR types: expected `[_#0i; 2]`, found `[_#7t; 0]`\n-        //         (expected array of 2 elements, found array of 0 elements)\n+//~^ ERROR mismatched types\n+//~| expected `[_#0i; 2]`\n+//~| found `[_#7t; 0]`\n+//~| expected an array with a fixed size of 2 elements\n+//~| found one with 0 elements\n         [a,_] => Some(a)\n     };\n }"}, {"sha": "a345ce79612cc37ed80088b1b458b7ebc2820a47", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,8 +12,10 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR types: expected `[_; 2]`, found `[_; 0]`\n-//         (expected array of 2 elements, found array of 0 elements)\n+    //~^ ERROR mismatched types\n+    //~| expected `[_; 2]`\n+    //~| found `[_; 0]`\n+    //~| expected array with a fixed size of 2 elements\n     [a,_] => Some(a)\n   };\n }"}, {"sha": "2a5805790a742798ab39423e239bf75b14d450a3", "filename": "src/test/compile-fail/issue-13624.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -15,7 +15,11 @@ mod a {\n \n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-//~^ ERROR mismatched types: expected `()`, found `a::Enum` (expected (), found enum a::Enum)\n+    //~^ ERROR mismatched types\n+    //~| expected `()`\n+    //~| found `a::Enum`\n+    //~| expected ()\n+    //~| found enum `a::Enum`\n   }\n }\n \n@@ -27,8 +31,11 @@ mod b {\n       let enum_struct_variant = ::a::get_enum_struct_variant();\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n-        //~^ ERROR mismatched types: expected `()`, found `a::Enum`\n-        //         (expected (), found enum a::Enum)\n+        //~^ ERROR mismatched types\n+        //~| expected `()`\n+        //~| found `a::Enum`\n+        //~| expected ()\n+        // found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "3ceb465cb4b23c0ed59fd5313b0031e1dcb402b7", "filename": "src/test/compile-fail/issue-14091.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: expected `bool`, found `_` (expected bool, found integral variable)\n+// error-pattern:mismatched types\n+// error-pattern:expected `bool`\n+// error-pattern:found `_`\n+// error-pattern:expected bool\n+// error-pattern:found integral variable\n \n fn main(){assert!(1,1);}"}, {"sha": "deb8f00cd01c9b14ff3fc422b9ba729d55698493", "filename": "src/test/compile-fail/issue-14541.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,8 +13,11 @@ struct vec3 { y: f32, z: f32 }\n \n fn make(v: vec2) {\n     let vec3 { y: _, z: _ } = v;\n-    //~^ ERROR mismatched types: expected `vec2`, found `vec3`\n-    //         (expected struct vec2, found struct vec3)\n+    //~^ ERROR mismatched types\n+    //~| expected `vec2`\n+    //~| found `vec3`\n+    //~| expected struct `vec2`\n+    //~| found struct `vec3`\n }\n \n fn main() { }"}, {"sha": "d7ff6f2fe63ce38f423aad11654552febbbba6b6", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -16,9 +16,17 @@ struct X {\n fn main() {\n     let x = X { a: [0] };\n     let _f = &x.a as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8; 1]`\n+    //~^ ERROR mismatched types\n+    //~| expected `*mut u8`\n+    //~| found `&[u8; 1]`\n+    //~| expected u8\n+    //~| found array of 1 elements\n \n     let local = [0u8];\n     let _v = &local as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8; 1]`\n+    //~^ ERROR mismatched types\n+    //~| expected `*mut u8`\n+    //~| found `&[u8; 1]`\n+    //~| expected u8,\n+    //~| found array of 1 elements\n }"}, {"sha": "7080db23d42e521c8b42ddb609579128603a24d8", "filename": "src/test/compile-fail/issue-15783.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -16,6 +16,10 @@ fn main() {\n     let name = \"Foo\";\n     let x = Some(&[name.as_slice()]);\n     let msg = foo(x);\n-//~^ ERROR mismatched types: expected `core::option::Option<&[&str]>`\n+//~^ ERROR mismatched types\n+//~| expected `core::option::Option<&[&str]>`\n+//~| found `core::option::Option<&[&str; 1]>`\n+//~| expected slice\n+//~| found array of 1 elements\n     assert_eq!(msg, 3);\n }"}, {"sha": "7381ade263b20ebeca862abcb25878beefa7b1b9", "filename": "src/test/compile-fail/issue-15896.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -19,8 +19,11 @@ fn main() {\n     let u = match e {\n         E::B(\n           Tau{t: x},\n-          //~^ ERROR mismatched types: expected `main::R`, found `main::Tau`\n-          //        (expected enum main::R, found struct main::Tau)\n+          //~^ ERROR mismatched types\n+          //~| expected `main::R`\n+          //~| found `main::Tau`\n+          //~| expected enum `main::R`\n+          //~| found struct `main::Tau`\n           _) => x,\n     };\n }"}, {"sha": "ba936561ae53d9ed7bda362e5447369e62414755", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,7 +12,10 @@ use std::raw::Slice;\n \n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n-    //~^ ERROR mismatched types: expected `&str`, found `core::raw::Slice<_>`\n-    //         (expected &-ptr, found struct core::raw::Slice)\n+    //~^ ERROR mismatched types\n+    //~| expected `&str`\n+    //~| found `core::raw::Slice<_>`\n+    //~| expected &-ptr\n+    //~| found struct `core::raw::Slice`\n }\n "}, {"sha": "b943ef510da28fbf7a3978bf01f8dcf65bbf1604", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,8 +13,11 @@ use std::raw::Slice;\n fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n-        //~^ ERROR mismatched types: expected `()`, found `core::raw::Slice<_>`\n-        //         (expected (), found struct core::raw::Slice)\n+        //~^ ERROR mismatched types\n+        //~| expected `()`\n+        //~| found `core::raw::Slice<_>`\n+        //~| expected ()\n+        //~| found struct `core::raw::Slice`\n         _ => unreachable!()\n     }\n }"}, {"sha": "6010e206920e5eeaa95dd537211a390b22fb3d14", "filename": "src/test/compile-fail/issue-17033.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,7 +11,11 @@\n #![feature(overloaded_calls)]\n \n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n-    (*p)(()) //~ ERROR mismatched types: expected `&mut ()`, found `()`\n+    (*p)(()) //~  ERROR mismatched types\n+             //~| expected `&mut ()`\n+             //~| found `()`\n+             //~| expected &-ptr\n+             //~| found ()\n }\n \n fn main() {}"}, {"sha": "4889658d083c1c31804ecf17c2b94332ace33c0b", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -21,17 +21,29 @@ fn main() {\n \n     // `x { ... }` should not be interpreted as a struct literal here\n     if x = x {\n-        //~^ ERROR mismatched types: expected `bool`, found `()` (expected bool, found ())\n+        //~^ ERROR mismatched types\n+        //~| expected `bool`\n+        //~| found `()`\n+        //~| expected bool\n+        //~| found ()\n         println!(\"{}\", x);\n     }\n     // Explicit parentheses on the left should match behavior of above\n     if (x = x) {\n-        //~^ ERROR mismatched types: expected `bool`, found `()` (expected bool, found ())\n+        //~^ ERROR mismatched types\n+        //~| expected `bool`\n+        //~| found `()`\n+        //~| expected bool\n+        //~| found ()\n         println!(\"{}\", x);\n     }\n     // The struct literal interpretation is fine with explicit parentheses on the right\n     if y = (Foo { foo: x }) {\n-        //~^ ERROR mismatched types: expected `bool`, found `()` (expected bool, found ())\n+        //~^ ERROR mismatched types\n+        //~| expected `bool`\n+        //~| found `()`\n+        //~| expected bool\n+        //~| found ()\n         println!(\"{}\", x);\n     }\n }"}, {"sha": "b4791eba76e264fb3c071feaaf502b54dfa28a6d", "filename": "src/test/compile-fail/issue-17740.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,8 +14,14 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched types: expected `Foo<'a>`, found `Foo<'_>` (lifetime mismatch)\n-    //~| mismatched types: expected `Foo<'a>`, found `Foo<'_>` (lifetime mismatch)\n+    //~^ mismatched types\n+    //~| expected `Foo<'a>`\n+    //~| found `Foo<'_>`\n+    //~| lifetime mismatch\n+    //~| mismatched types\n+    //~| expected `Foo<'a>`\n+    //~| found `Foo<'_>`\n+    //~| lifetime mismatch\n     }\n }\n "}, {"sha": "9d1047f68e6c7f6ba16f513d86a3c525dc4c919b", "filename": "src/test/compile-fail/issue-17905.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -16,7 +16,10 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n-//~^ ERROR mismatched types: expected `Pair<&'static str, isize>`, found `Pair<&str, isize>`\n+//~^ ERROR mismatched types\n+//~| expected `Pair<&'static str, isize>`\n+//~| found `Pair<&str, isize>`\n+//~| lifetime mismatch\n         println!(\"{}\", self);\n     }\n }"}, {"sha": "2d73b98ec1e607d201c17318d507f78a9aca760e", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,7 +12,11 @@\n // clause does not exist, instead of the unsympathetic \"match arms have incompatible types\"\n \n fn main() {\n-    if let Some(homura) = Some(\"madoka\") { //~ ERROR missing an else clause: expected `()`\n+    if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n+                                           //~| expected `()`\n+                                           //~| found `i32`\n+                                           //~| expected ()\n+                                           //~| found i32\n         765i32\n     };\n }"}, {"sha": "d0781b5658087393e06aec24f0cbfcbb2b16000d", "filename": "src/test/compile-fail/issue-2951.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,7 +10,12 @@\n \n fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n-    xx = y; //~ ERROR expected `T`, found `U`\n+    xx = y;\n+    //~^  ERROR mismatched types\n+    //~| expected `T`\n+    //~| found `U`\n+    //~| expected type parameter\n+    //~| found a different type parameter\n }\n \n fn main() {"}, {"sha": "5e7c23164cbbbbe65f35aa29e73703b35299d5a7", "filename": "src/test/compile-fail/issue-3477.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -9,5 +9,10 @@\n // except according to those terms.\n \n fn main() {\n-    let _p: char = 100; //~ ERROR mismatched types: expected `char`, found\n+    let _p: char = 100;\n+    //~^ ERROR mismatched types\n+    //~| expected `char`\n+    //~| found `u8`\n+    //~| expected char\n+    //~| found u8\n }"}, {"sha": "7ebc5b7a5b96bf3757311379e0ac7aa5ee2ce235", "filename": "src/test/compile-fail/issue-3563.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,8 +10,13 @@\n \n trait A {\n     fn a(&self) {\n-        |&:| self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n-        //~^ ERROR expected (), found closure\n+        |&:| self.b()\n+        //~^ ERROR type `&Self` does not implement any method in scope named `b`\n+        //~| ERROR mismatched types\n+        //~| expected `()`\n+        //~| found closure\n+        //~| expected ()\n+        //~| found closure\n     }\n }\n fn main() {}"}, {"sha": "4aff95b57decbb0c7115bf6bd8d1b046b35407a6", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,7 +11,10 @@\n fn main() {\n     match None {\n         Err(_) => ()\n-        //~^ ERROR mismatched types: expected `core::option::Option<_>`\n-        //         , found `core::result::Result<_, _>`\n+        //~^ ERROR mismatched types\n+        //~| expected `core::option::Option<_>`\n+        //~| found `core::result::Result<_, _>`\n+        //~| expected enum `core::option::Option`\n+        //~| found enum `core::result::Result`\n     }\n }"}, {"sha": "b5af1f03b635b82d803734034124352eb8f69173", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,7 +12,11 @@ fn main() {\n     let a = if true {\n         0\n     } else if false {\n-//~^ ERROR if may be missing an else clause: expected `()`, found `_`\n+//~^ ERROR if may be missing an else clause\n+//~| expected `()`\n+//~| found `_`\n+//~| expected ()\n+//~| found integral variable\n         1\n     };\n }"}, {"sha": "881e124fd689289858e82a12ceac9f9a5d4c1410", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,6 +13,9 @@ fn bar(int_param: usize) {}\n fn main() {\n     let foo: [u8; 4] = [1u8; 4us];\n     bar(foo);\n-    //~^ ERROR mismatched types: expected `usize`, found `[u8; 4]`\n-    //         (expected usize, found vector)\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `[u8; 4]`\n+    //~| expected usize\n+    //~| found array of 4 elements\n }"}, {"sha": "e7cd20f38a1d20e052470b6ef9a549ca9b8ec18b", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,6 +13,9 @@\n const A: (isize,isize) = (4,2);\n fn main() {\n     match 42 { A => () }\n-    //~^ ERROR mismatched types: expected `_`, found `(isize, isize)`\n-    //         (expected integral variable, found tuple)\n+    //~^ ERROR mismatched types\n+    //~| expected `_`\n+    //~| found `(isize, isize)`\n+    //~| expected integral variable\n+    //~| found tuple\n }"}, {"sha": "b051abbc7ff5025af9ff846a0dfa88288628bfb2", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -15,28 +15,48 @@ enum A { B, C }\n fn main() {\n     match (true, false) {\n         A::B => (),\n-//~^ ERROR mismatched types: expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n+//~^ ERROR mismatched types:\n+//~| expected `(bool, bool)`\n+//~| found `A`\n+//~| expected tuple\n+//~| found enum `A`\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n-//~^ ERROR mismatched types: expected `(bool, bool)`, found `(_, _, _)`\n+//~^ ERROR mismatched types\n+//~| expected `(bool, bool)`\n+//~| found `(_, _, _)`\n+//~| expected a tuple with 2 elements\n+//~| found one with 3 elements\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n-//~^ ERROR (expected a tuple with 2 elements, found one with 3 elements)\n+//~^ ERROR mismatched types\n+//~| expected `(bool, bool)`\n+//~| found `(_, _, _)`\n+//~| expected a tuple with 2 elements\n+//~| found one with 3 elements\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n-//~^ ERROR mismatched types: expected `(bool, bool)`, found `Box<_>` (expected tuple, found box)\n+//~^ ERROR mismatched types\n+//~| expected `(bool, bool)`\n+//~| found `Box<_>`\n+//~| expected tuple\n+//~| found box\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n-//~^ ERROR mismatched types: expected `(bool, bool)`, found `&_` (expected tuple, found &-ptr)\n+//~^ ERROR mismatched types\n+//~| expected `(bool, bool)`\n+//~| found `&_`\n+//~| expected tuple\n+//~| found &-ptr\n     }\n \n \n@@ -47,5 +67,9 @@ fn main() {\n     for &(x,y) in v.iter() {} // should be OK\n \n     // Make sure none of the errors above were fatal\n-    let x: char = true; //~ ERROR expected `char`, found `bool`\n+    let x: char = true; //~  ERROR mismatched types\n+                        //~| expected `char`\n+                        //~| found `bool`\n+                        //~| expected char\n+                        //~| found bool\n }"}, {"sha": "32702d3e2f6fee2245caac9b59a4db008e938213", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,7 +13,12 @@ struct S(Either<usize, usize>);\n \n fn main() {\n     match S(Either::Left(5)) {\n-        Either::Right(_) => {}  //~ ERROR mismatched types: expected `S`, found `Either\n+        Either::Right(_) => {}\n+        //~^ ERROR mismatched types\n+        //~| expected `S`\n+        //~| found `Either<_, _>`\n+        //~| expected struct `S`\n+        //~| found enum `Either`\n         _ => {}\n     }\n }"}, {"sha": "565634191be9a8808099c81f6ad7dbe5ecd5be15", "filename": "src/test/compile-fail/issue-5500.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,5 +10,9 @@\n \n fn main() {\n     &panic!()\n-    //~^ ERROR mismatched types: expected `()`, found `&_` (expected (), found &-ptr)\n+    //~^ ERROR mismatched types\n+    //~| expected `()`\n+    //~| found `&_`\n+    //~| expected ()\n+    //~| found &-ptr\n }"}, {"sha": "e261249bc998e7b5320e904294973f6330049312", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,7 +12,11 @@ struct BarStruct;\n \n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Box<BarStruct> { self }\n-    //~^ ERROR: error: mismatched types: expected `Box<BarStruct>`, found `&'a mut BarStruct\n+    //~^ ERROR mismatched types\n+    //~| expected `Box<BarStruct>`\n+    //~| found `&'a mut BarStruct`\n+    //~| expected box\n+    //~| found &-ptr\n }\n \n fn main() {}"}, {"sha": "eefb34fbe4c91121419867aa10086f8defdc7083", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,7 +14,11 @@ enum Whatever {\n fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n-//~^ ERROR: mismatched types: expected `Whatever`, found `core::option::Option<_>`\n+//~^ ERROR mismatched types\n+//~| expected `Whatever`\n+//~| found `core::option::Option<_>`\n+//~| expected enum `Whatever`\n+//~| found enum `core::option::Option`\n             field.access(), //~ ERROR the type of this value must be known in this context\n     }\n }"}, {"sha": "0e81ec19c815a68c7c8cfe428949517f7ffe78ac", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,14 +14,27 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match (true, false) {\n-        A::B => (), //~ ERROR expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n+        A::B => (),\n+        //~^ ERROR mismatched types\n+        //~| expected `(bool, bool)`\n+        //~| found `A`\n+        //~| expected tuple\n+        //~| found enum `A`\n         _ => ()\n     }\n \n     match &Some(42is) {\n-        Some(x) => (), //~ ERROR expected `&core::option::Option<isize>`,\n-                       //        found `core::option::Option<_>`\n-        None => ()     //~ ERROR expected `&core::option::Option<isize>`,\n-                       //        found `core::option::Option<_>`\n+        Some(x) => (),\n+        //~^ ERROR mismatched types\n+        //~| expected `&core::option::Option<isize>`\n+        //~| found `core::option::Option<_>`\n+        //~| expected &-ptr\n+        //~| found enum `core::option::Option`\n+        None => ()\n+        //~^ ERROR mismatched types\n+        //~| expected `&core::option::Option<isize>`\n+        //~| found `core::option::Option<_>`\n+        //~| expected &-ptr\n+        //~| found enum `core::option::Option`\n     }\n }"}, {"sha": "30e4ec8ad0e6d104a25e499b2ad32544aece5e47", "filename": "src/test/compile-fail/issue-8761.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,9 +10,17 @@\n \n enum Foo {\n     A = 1i64,\n-    //~^ ERROR mismatched types: expected `isize`, found `i64`\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `i64`\n+    //~| expected isize\n+    //~| found i64\n     B = 2u8\n-    //~^ ERROR mismatched types: expected `isize`, found `u8`\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `u8`\n+    //~| expected isize\n+    //~| found u8\n }\n \n fn main() {}"}, {"sha": "5bda37896879bb3ff39de012b47239b8f49a6519", "filename": "src/test/compile-fail/match-struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,7 +14,12 @@ enum E { C(isize) }\n \n fn main() {\n     match (S { a: 1 }) {\n-        E::C(_) => (), //~ ERROR mismatched types: expected `S`, found `E`\n+        E::C(_) => (),\n+        //~^ ERROR mismatched types\n+        //~| expected `S`\n+        //~| found `E`\n+        //~| expected struct `S`\n+        //~| found enum `E`\n         _ => ()\n     }\n }"}, {"sha": "a4abdf3ddfe94f14f7189ceeb11741be4b25874b", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -11,6 +11,10 @@\n fn main() {\n     match () {\n         [()] => { }\n-//~^ ERROR mismatched types: expected `()`, found `&[_]` (expected (), found &-ptr)\n+        //~^ ERROR mismatched types\n+        //~| expected `()`\n+        //~| found `&[_]`\n+        //~| expected ()\n+        //~| found &-ptr\n     }\n }"}, {"sha": "4d416ed42debfadf95379a132609a6c707da2f9d", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -18,7 +18,19 @@ impl Foo {\n \n fn main() {\n     let x = Foo;\n-    Foo::bar(x); //~ERROR mismatched types: expected `&Foo`, found `Foo`\n-    Foo::bar(&&x); //~ERROR mismatched types: expected `&Foo`, found `&&Foo`\n-    Foo::bar(&42is); //~ERROR mismatched types: expected `&Foo`, found `&isize`\n+    Foo::bar(x); //~  ERROR mismatched types\n+                 //~| expected `&Foo`\n+                 //~| found `Foo`\n+                 //~| expected &-ptr\n+                 //~| found struct `Foo`\n+    Foo::bar(&&x); //~  ERROR mismatched types\n+                   //~| expected `&Foo`\n+                   //~| found `&&Foo`\n+                   //~| expected struct `Foo`\n+                   //~| found &-ptr\n+    Foo::bar(&42is); //~  ERROR mismatched types\n+                     //~| expected `&Foo`\n+                     //~| found `&isize`\n+                     //~| expected struct `Foo`\n+                     //~| found isize\n }"}, {"sha": "a3d016d756ffce9d8ec0211d7dab533090787e23", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,12 +13,18 @@ fn main() {\n \n     // (separate lines to ensure the spans are accurate)\n \n-     let &_ //~ ERROR expected `&mut isize`, found `&_`\n+     let &_ //~  ERROR mismatched types\n+            //~| expected `&mut isize`\n+            //~| found `&_`\n+            //~| values differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n     let bar = &1is;\n     let &_ = bar;\n-    let &mut _ //~ ERROR expected `&isize`, found `&mut _`\n+    let &mut _ //~  ERROR mismatched types\n+               //~| expected `&isize`\n+               //~| found `&mut _`\n+               //~| values differ in mutability\n          = bar;\n }"}, {"sha": "85a47492306aff40e3a725833613e9e7e62c60cc", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -18,5 +18,9 @@ fn main() {\n     // because the def_id associated with the type was\n     // not convertible to a path.\n   let x: isize = noexporttypelib::foo();\n-    //~^ ERROR expected `isize`, found `core::option::Option<isize>`\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `core::option::Option<isize>`\n+    //~| expected isize\n+    //~| found enum `core::option::Option`\n }"}, {"sha": "fd2903a85ddb0b43cc71ced72bb20c320d8a3a5e", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,5 +14,9 @@ fn main() {\n     let f;\n     let g;\n     g = f;\n-    f = box g; //~ ERROR cyclic type of infinite size\n+    f = box g;\n+    //~^  ERROR mismatched types\n+    //~| expected `_`\n+    //~| found `Box<_>`\n+    //~| cyclic type of infinite size\n }"}, {"sha": "036fcc1b9d77930f93f4388161b9659c6ecaf615", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,5 +12,9 @@\n \n fn main() {\n     let f;\n-    f = box f; //~ ERROR cyclic type of infinite size\n+    f = box f;\n+    //~^ ERROR mismatched types\n+    //~| expected `_`\n+    //~| found `Box<_>`\n+    //~| cyclic type of infinite size\n }"}, {"sha": "aa7202574abfc3d15c0230790723e81f0d97b56c", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -30,9 +30,18 @@ fn main() {\n     }\n     match 'c' {\n         S { .. } => (),\n-        //~^ ERROR mismatched types: expected `char`, found `S` (expected char, found struct S)\n+        //~^ ERROR mismatched types\n+        //~| expected `char`\n+        //~| found `S`\n+        //~| expected char\n+        //~| found struct `S`\n \n         _ => ()\n     }\n-    f(true);            //~ ERROR mismatched types: expected `char`, found `bool`\n+    f(true);\n+    //~^ ERROR mismatched types\n+    //~| expected `char`\n+    //~| found `bool`\n+    //~| expected char\n+    //~| found bool\n }"}, {"sha": "9e5081ed550281350fcad77c8cd8a73753170e20", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,8 +12,16 @@ fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n \n fn main() {\n     let_in(3us, |i| { assert!(i == 3is); });\n-    //~^ ERROR expected `usize`, found `isize`\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `isize`\n+    //~| expected usize\n+    //~| found isize\n \n     let_in(3is, |i| { assert!(i == 3us); });\n-    //~^ ERROR expected `isize`, found `usize`\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`\n+    //~| found `usize`\n+    //~| expected isize\n+    //~| found usize\n }"}, {"sha": "463754b29c7b4eaadd65f9f30a1af1b13291c44e", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,11 +14,20 @@\n pub fn main() {\n     // *const -> *mut\n     let x: *const isize = &42is;\n-    let x: *mut isize = x; //~ERROR values differ in mutability\n+    let x: *mut isize = x; //~  ERROR mismatched types\n+                           //~| expected `*mut isize`\n+                           //~| found `*const isize`\n+                           //~| values differ in mutability\n \n     // & -> *mut\n-    let x: *mut isize = &42; //~ERROR values differ in mutability\n+    let x: *mut isize = &42; //~  ERROR mismatched types\n+                             //~| expected `*mut isize`\n+                             //~| found `&isize`\n+                             //~| values differ in mutability\n \n     let x: *const isize = &42;\n-    let x: *mut isize = x; //~ERROR values differ in mutability\n+    let x: *mut isize = x; //~  ERROR mismatched types\n+                           //~| expected `*mut isize`\n+                           //~| found `*const isize`\n+                           //~| values differ in mutability\n }"}, {"sha": "7f2889a327be0f7b4e966c132fc689980d093528", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -16,11 +16,17 @@ struct an_enum<'a>(&'a isize);\n struct a_class<'a> { x:&'a isize }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~ ERROR mismatched types: expected `an_enum<'b>`, found `an_enum<'a>`\n+    return e; //~  ERROR mismatched types\n+              //~| expected `an_enum<'b>`\n+              //~| found `an_enum<'a>`\n+              //~| lifetime mismatch\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~ ERROR mismatched types: expected `a_class<'b>`, found `a_class<'a>`\n+    return e; //~  ERROR mismatched types\n+              //~| expected `a_class<'b>`\n+              //~| found `a_class<'a>`\n+              //~| lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "4a3ca01c8496dce20b17961504d0bc90b251f767", "filename": "src/test/compile-fail/regions-early-bound-error-method.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -27,8 +27,12 @@ impl<'a> GetRef<'a> for Box<'a> {\n \n impl<'a> Box<'a> {\n     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n-        g2.get() //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n-        //~^ ERROR mismatched types: expected `&'a isize`, found `&'b isize` (lifetime mismatch)\n+        g2.get()\n+        //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n+        //~| ERROR mismatched types\n+        //~| expected `&'a isize`\n+        //~| found `&'b isize`\n+        //~| lifetime mismatch\n \n     }\n }"}, {"sha": "57c8e3f1170aa74d5268761fdeb600db0764501e", "filename": "src/test/compile-fail/regions-early-bound-error.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -26,8 +26,12 @@ impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n }\n \n fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n-    g1.get() //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n-    //~^ ERROR mismatched types: expected `&'b isize`, found `&'a isize` (lifetime mismatch)\n+    g1.get()\n+    //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n+    //~| ERROR mismatched types\n+    //~| expected `&'b isize`\n+    //~| found `&'a isize`\n+    //~| lifetime mismatch\n }\n \n fn main() {"}, {"sha": "ebf7ca289f88969af34ea46342c3358dbf32b959", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -53,7 +53,12 @@ fn supply_F() {\n fn supply_G() {\n     want_G(foo);\n     want_G(bar);\n-    want_G(baz); //~ ERROR expected concrete lifetime\n+    want_G(baz);\n+    //~^ ERROR mismatched types\n+    //~| expected `fn(&'cx S) -> &'static S`\n+    //~| found `fn(&S) -> &S {baz}`\n+    //~| expected concrete lifetime\n+    //~| found bound lifetime parameter 'cx\n }\n \n pub fn main() {"}, {"sha": "1d32e8fe7b250c595d2f508e55bfaeb4ff79caa4", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -31,7 +31,10 @@ impl<'a> set_f<'a> for c<'a> {\n \n     fn set_f_bad(&mut self, b: Box<b>) {\n         self.f = b;\n-        //~^ ERROR mismatched types: expected `Box<Box<&'a isize>>`, found `Box<Box<&isize>>`\n+        //~^ ERROR mismatched types\n+        //~| expected `Box<Box<&'a isize>>`\n+        //~| found `Box<Box<&isize>>`\n+        //~| lifetime mismatch\n     }\n }\n "}, {"sha": "df69e13bf1e65063f3ce019d0b7a36a9b12e3228", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,14 +14,33 @@ fn main() {\n     let n = 1;\n     let a = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n     let b = [0; ()];\n-//~^ ERROR expected constant integer for repeat count, found non-constant expression\n-//~^^ ERROR: expected `usize`, found `()`\n-    let c = [0; true]; //~ ERROR expected positive integer for repeat count, found boolean\n-    //~^ ERROR: expected `usize`, found `bool`\n-    let d = [0; 0.5]; //~ ERROR expected positive integer for repeat count, found float\n-    //~^ ERROR: expected `usize`, found `_`\n-    let e = [0; \"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n-    //~^ ERROR: expected `usize`, found `&'static str`\n+//~^ ERROR mismatched types\n+//~| expected `usize`\n+//~| found `()`\n+//~| expected usize\n+//~| found ()\n+//~| ERROR expected constant integer for repeat count, found non-constant expression\n+    let c = [0; true];\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `bool`\n+    //~| expected usize\n+    //~| found bool\n+    //~| ERROR expected positive integer for repeat count, found boolean\n+    let d = [0; 0.5];\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `_`\n+    //~| expected usize\n+    //~| found floating-point variable\n+    //~| ERROR expected positive integer for repeat count, found float\n+    let e = [0; \"foo\"];\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `&'static str`\n+    //~| expected usize\n+    //~| found &-ptr\n+    //~| ERROR expected positive integer for repeat count, found string\n     let f = [0; -4];\n     //~^ ERROR expected positive integer for repeat count, found negative integer\n     let f = [0us; -1];"}, {"sha": "66aef0ec3a1b1869f9ae45991dfb43dfc88ce9b0", "filename": "src/test/compile-fail/shift-various-bad-types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -36,7 +36,11 @@ fn foo(p: &Panolpy) {\n \n     // Type of the result follows the LHS, not the RHS:\n     let _: i32 = 22_i64 >> 1_i32;\n-    //~^ ERROR mismatched types: expected `i32`, found `i64`\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`\n+    //~| found `i64`\n+    //~| expected i32\n+    //~| found i64)\n }\n \n fn main() {"}, {"sha": "1203d622348998d7044f724511726ec6d1456ed2", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,7 +13,11 @@ struct Foo<T,U>(T);\n fn main() {\n     match Foo(1.1) {\n         1 => {}\n-    //~^ ERROR expected `Foo<_, _>`, found `_`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<_, _>`\n+    //~| found `_`\n+    //~| expected struct `Foo`\n+    //~| found integral variable\n     }\n \n }"}, {"sha": "71a2b50b612d9d0bf835da50f10faca5b106fe4d", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,11 +12,27 @@ struct Foo { a: isize, b: isize }\n struct Bar { x: isize }\n \n static bar: Bar = Bar { x: 5 };\n-static foo: Foo = Foo { a: 2, ..bar }; //~ ERROR mismatched types: expected `Foo`, found `Bar`\n-static foo_i: Foo = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n+static foo: Foo = Foo { a: 2, ..bar }; //~  ERROR mismatched types\n+                                       //~| expected `Foo`\n+                                       //~| found `Bar`\n+                                       //~| expected struct `Foo`\n+                                       //~| found struct `Bar`\n+static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n+                                       //~| expected `Foo`\n+                                       //~| found `_`\n+                                       //~| expected struct `Foo`\n+                                       //~| found integral variable\n \n fn main() {\n     let b = Bar { x: 5 };\n-    let f = Foo { a: 2, ..b }; //~ ERROR mismatched types: expected `Foo`, found `Bar`\n-    let f_i = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n+    let f = Foo { a: 2, ..b }; //~  ERROR mismatched types\n+                               //~| expected `Foo`\n+                               //~| found `Bar`\n+                               //~| expected struct `Foo`\n+                               //~| found struct `Bar`\n+    let f_i = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n+                                 //~| expected `Foo`\n+                                 //~| found `_`\n+                                 //~| expected struct `Foo`\n+                                 //~| found integral variable\n }"}, {"sha": "a22f390499f279c4298fbb26fb535c492643c39e", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -24,25 +24,33 @@ type PairF<U> = Pair<f32,U>;\n \n fn main() {\n     let pt = PointF {\n-        //~^ ERROR expected f32, found isize\n+        //~^ ERROR structure constructor specifies a structure of type\n+        //~| expected f32\n+        //~| found isize\n         x: 1is,\n         y: 2is,\n     };\n \n     let pt2 = Point::<f32> {\n-        //~^ ERROR expected f32, found isize\n+        //~^ ERROR structure constructor specifies a structure of type\n+        //~| expected f32\n+        //~| found isize\n         x: 3is,\n         y: 4is,\n     };\n \n     let pair = PairF {\n-        //~^ ERROR expected f32, found isize\n+        //~^ ERROR structure constructor specifies a structure of type\n+        //~| expected f32\n+        //~| found isize\n         x: 5is,\n         y: 6is,\n     };\n \n     let pair2 = PairF::<isize> {\n-        //~^ ERROR expected f32, found isize\n+        //~^ ERROR structure constructor specifies a structure of type\n+        //~| expected f32\n+        //~| found isize\n         x: 7is,\n         y: 8is,\n     };"}, {"sha": "44de5d8cfe353b083a083534a1185a493540fef0", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -10,6 +10,10 @@\n \n fn main() {\n     let (x, y) = ();\n-//~^ ERROR expected `()`, found `(_, _)` (expected (), found tuple)\n+//~^ ERROR mismatched types\n+//~| expected `()`\n+//~| found `(_, _)`\n+//~| expected ()\n+//~| found tuple\n     return x;\n }"}, {"sha": "660c1fa9a88d89c00ab98b4326991e164cce4b7a", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `char`, found\n // Issue #876\n \n #![no_implicit_prelude]\n@@ -21,4 +20,9 @@ fn last<T>(v: Vec<&T> ) -> std::option::Option<T> {\n fn main() {\n     let y;\n     let x : char = last(y);\n+    //~^ ERROR mismatched types\n+    //~| expected `char`\n+    //~| found `core::option::Option<_>`\n+    //~| expected char\n+    //~| found enum `core::option::Option`\n }"}, {"sha": "60db35b879f570c03f9dfd1bc2ba5362fef82a26", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -20,7 +20,11 @@ struct bar {\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo, found struct bar)\n+    want_foo(b); //~  ERROR mismatched types\n+                 //~| expected `foo`\n+                 //~| found `bar`\n+                 //~| expected struct `foo`\n+                 //~| found struct `bar`\n }\n \n fn main() {}"}, {"sha": "231d2366b48a85ceb045ccaaf187ed78112ac241", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -18,7 +18,11 @@ type bar = Box<foo>;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo, found box)\n+    want_foo(b); //~  ERROR mismatched types\n+                 //~| expected `foo`\n+                 //~| found `Box<foo>`\n+                 //~| expected struct `foo`\n+                 //~| found box\n }\n \n fn main() {}"}, {"sha": "79174552ae09c36f5ba136754f7a95cd7d6b6bc0", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -20,7 +20,11 @@ fn c(x: Box<Foo+Sync+Send>) {\n }\n \n fn d(x: Box<Foo>) {\n-    a(x); //~ ERROR found no bounds\n+    a(x); //~  ERROR mismatched types\n+          //~| expected `Box<Foo + Send>`\n+          //~| found `Box<Foo>`\n+          //~| expected bounds `Send`\n+          //~| found no bounds\n }\n \n fn main() { }"}, {"sha": "8ad9ca50e30426d694e1adc1a3e6f9568f62bed6", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -14,8 +14,16 @@ fn first((value, _): (isize, f64)) -> isize { value }\n \n fn main() {\n     let y = first ((1,2.0,3));\n-    //~^ ERROR expected a tuple with 2 elements, found one with 3 elements\n+    //~^ ERROR mismatched types\n+    //~| expected `(isize, f64)`\n+    //~| found `(isize, f64, _)`\n+    //~| expected a tuple with 2 elements\n+    //~| found one with 3 elements\n \n     let y = first ((1,));\n-    //~^ ERROR expected `(isize, f64)`, found `(isize,)`\n+    //~^ ERROR mismatched types\n+    //~| expected `(isize, f64)`\n+    //~| found `(isize,)`\n+    //~| expected a tuple with 2 elements\n+    //~| found one with 1 elements\n }"}, {"sha": "c8c596fdb4fcc24b9b0bccf3205dd8b364b9b191", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -17,16 +17,28 @@ fn main() {\n \n     identity_u8(x);  // after this, `x` is assumed to have type `u8`\n     identity_u16(x);\n-    //~^ ERROR mismatched types: expected `u16`, found `u8`\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `u8`\n+    //~| expected u16\n+    //~| found u8\n     identity_u16(y);\n-    //~^ ERROR mismatched types: expected `u16`, found `i32`\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `i32`\n+    //~| expected u16\n+    //~| found i32\n \n     let a = 3is;\n \n     fn identity_i(n: isize) -> isize { n }\n \n     identity_i(a); // ok\n     identity_u16(a);\n-    //~^ ERROR mismatched types: expected `u16`, found `isize`\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`\n+    //~| found `isize`\n+    //~| expected u16\n+    //~| found isize\n \n }"}, {"sha": "4ab6bd531913a5cbcf4ef1ca6ffd7990eadfb790", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -9,7 +9,15 @@\n // except according to those terms.\n \n // Checking that the compiler reports multiple type errors at once\n-// error-pattern:mismatched types: expected `bool`\n-// error-pattern:mismatched types: expected `isize`\n \n fn main() { let a: bool = 1is; let b: isize = true; }\n+//~^ ERROR mismatched types\n+//~| expected `bool`\n+//~| found `isize`\n+//~| expected bool\n+//~| found isize\n+//~| ERROR mismatched types\n+//~| expected `isize`\n+//~| found `bool`\n+//~| expected isize\n+//~| found bool"}, {"sha": "408bf72e97c87cd1f09a1c2a569aea348e9ba6d5", "filename": "src/test/compile-fail/type-parameter-names.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -13,7 +13,11 @@\n \n fn foo<Foo, Bar>(x: Foo) -> Bar {\n     x\n-//~^ ERROR expected `Bar`, found `Foo` (expected type parameter, found a different type parameter)\n+//~^ ERROR mismatched types\n+//~| expected `Bar`\n+//~| found `Foo`\n+//~| expected type parameter\n+//~| found a different type parameter\n }\n \n fn main() {}"}, {"sha": "de9623de7cd3a551c56e74a21d878e6a4baa8c55", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -12,7 +12,11 @@ use std::num::Int;\n \n trait BrokenAdd: Int {\n     fn broken_add<T>(&self, rhs: T) -> Self {\n-        *self + rhs //~ ERROR expected `Self`, found `T`\n+        *self + rhs //~  ERROR mismatched types\n+                    //~| expected `Self`\n+                    //~| found `T`\n+                    //~| expected Self\n+                    //~| found type parameter\n     }\n }\n "}, {"sha": "a34be63ba6b3c906d5c54063b845999a78bee622", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -19,11 +19,19 @@ pub fn main() {\n \n fn test1() {\n     let x: Foo<_> = Bar::<usize>;\n-    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<usize>`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<_>`\n+    //~| found `Bar<usize>`\n+    //~| expected struct `Foo`\n+    //~| found struct `Bar`\n     let y: Foo<usize> = x;\n }\n \n fn test2() {\n     let x: Foo<_> = Bar::<usize>;\n-    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<usize>`\n+    //~^ ERROR mismatched types\n+    //~| expected `Foo<_>`\n+    //~| found `Bar<usize>`\n+    //~| expected struct `Foo`\n+    //~| found struct `Bar`\n }"}, {"sha": "cbcf31b5b7edbc46355ea238d31cfad03671517b", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -42,8 +42,15 @@ trait SomeTrait {\n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n     fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched self type\n-    fn dummy3(self: &&Bar<T>) {} //~ ERROR lifetime mismatch\n-    //~^ ERROR lifetime mismatch\n+    fn dummy3(self: &&Bar<T>) {}\n+    //~^ ERROR mismatched types\n+    //~| expected `&'a Bar<T>`\n+    //~| found `&Bar<T>`\n+    //~| lifetime mismatch\n+    //~| ERROR mismatched types\n+    //~| expected `&'a Bar<T>`\n+    //~| found `&Bar<T>`\n+    //~| lifetime mismatch\n }\n \n fn main() {"}, {"sha": "86271f670ce6f7d2078c912ae2fa62e81ca05b56", "filename": "src/test/compile-fail/variadic-ffi.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -24,14 +24,18 @@ fn main() {\n         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n-        //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(isize, u8)`\n-        //         , found `unsafe extern \"C\" fn(isize, u8, ...)`\n-        //          (expected non-variadic fn, found variadic function)\n+        //~^ ERROR: mismatched types\n+        //~| expected `unsafe extern \"C\" fn(isize, u8)`\n+        //~| found `unsafe extern \"C\" fn(isize, u8, ...)`\n+        //~| expected non-variadic fn\n+        //~| found variadic function\n \n         let y: unsafe extern \"C\" fn(f: isize, x: u8, ...) = bar;\n-        //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(isize, u8, ...)`\n-        //         , found `extern \"C\" extern fn(isize, u8)`\n-        //          (expected variadic fn, found non-variadic function)\n+        //~^ ERROR: mismatched types\n+        //~| expected `unsafe extern \"C\" fn(isize, u8, ...)`\n+        //~| found `extern \"C\" fn(isize, u8) {bar}`\n+        //~| expected variadic fn\n+        //~| found non-variadic function\n \n         foo(1, 2, 3f32); //~ ERROR: can't pass an f32 to variadic function, cast to c_double\n         foo(1, 2, true); //~ ERROR: can't pass bool to variadic function, cast to c_int"}, {"sha": "21c249c0e1fb00cb1d241db40f0381a2c8359d72", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a6da340fd958de370d2b83c0f17fd8fa51f89/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=b21a6da340fd958de370d2b83c0f17fd8fa51f89", "patch": "@@ -24,7 +24,7 @@ impl Mul<f64> for Vec1 {\n     type Output = Vec1;\n \n     fn mul(self, s: &f64) -> Vec1 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected f64, found &-ptr\n+    //~^ ERROR method `mul` has an incompatible type for trait\n         Vec1 {\n             x: self.x * *s\n         }\n@@ -41,7 +41,7 @@ impl Mul<Vec2> for Vec2 {\n     type Output = f64;\n \n     fn mul(self, s: f64) -> Vec2 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected struct Vec2, found f64\n+    //~^ ERROR method `mul` has an incompatible type for trait\n         Vec2 {\n             x: self.x * s,\n             y: self.y * s\n@@ -60,7 +60,7 @@ impl Mul<f64> for Vec3 {\n     type Output = i32;\n \n     fn mul(self, s: f64) -> f64 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected i32, found f64\n+    //~^ ERROR method `mul` has an incompatible type for trait\n         s\n     }\n }\n@@ -72,7 +72,15 @@ pub fn main() {\n \n     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n     //~^ ERROR mismatched types\n-    //~^^ ERROR mismatched types\n+    //~| expected `Vec2`\n+    //~| found `_`\n+    //~| expected struct `Vec2`\n+    //~| found floating-point variable\n+    //~| ERROR mismatched types\n+    //~| expected `Vec2`\n+    //~| found `f64`\n+    //~| expected struct `Vec2`\n+    //~| found f64\n \n     let x: i32 = Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n }"}]}