{"sha": "b75cee84254744990cdc158ae2304a5378e88448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWNlZTg0MjU0NzQ0OTkwY2RjMTU4YWUyMzA0YTUzNzhlODg0NDg=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-15T15:59:51Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-15T15:59:51Z"}, "message": "Avoid unnecessary closures when deriving RustcDecodable\n\nCurrently, we build a closure that does nothing but pass its argument\nthrough to another function, this is rather wasteful and creates lots of\nunnecessary closures.", "tree": {"sha": "84e17b78729632a5620550d90bb242e06d042158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e17b78729632a5620550d90bb242e06d042158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75cee84254744990cdc158ae2304a5378e88448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75cee84254744990cdc158ae2304a5378e88448", "html_url": "https://github.com/rust-lang/rust/commit/b75cee84254744990cdc158ae2304a5378e88448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75cee84254744990cdc158ae2304a5378e88448/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c78ad937b4da9dd872b0a865025f3e2e885f90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c78ad937b4da9dd872b0a865025f3e2e885f90d", "html_url": "https://github.com/rust-lang/rust/commit/1c78ad937b4da9dd872b0a865025f3e2e885f90d"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "f73023ddd1eb05c587928b6ec6e21971fc8c1974", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b75cee84254744990cdc158ae2304a5378e88448/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75cee84254744990cdc158ae2304a5378e88448/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=b75cee84254744990cdc158ae2304a5378e88448", "patch": "@@ -92,11 +92,10 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n     let recurse = vec!(cx.ident_of(krate),\n                     cx.ident_of(\"Decodable\"),\n                     cx.ident_of(\"decode\"));\n+    let exprdecode = cx.expr_path(cx.path_global(trait_span, recurse));\n     // throw an underscore in front to suppress unused variable warnings\n     let blkarg = cx.ident_of(\"_d\");\n     let blkdecoder = cx.expr_ident(trait_span, blkarg);\n-    let calldecode = cx.expr_call_global(trait_span, recurse, vec!(blkdecoder.clone()));\n-    let lambdadecode = cx.lambda_expr_1(trait_span, calldecode, blkarg);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -116,7 +115,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                     cx.expr_method_call(span, blkdecoder.clone(), read_struct_field,\n                                         vec!(cx.expr_str(span, name),\n                                           cx.expr_uint(span, field),\n-                                          lambdadecode.clone())))\n+                                          exprdecode.clone())))\n             });\n             let result = cx.expr_ok(trait_span, result);\n             cx.expr_method_call(trait_span,\n@@ -147,7 +146,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                     let idx = cx.expr_uint(span, field);\n                     cx.expr_try(span,\n                         cx.expr_method_call(span, blkdecoder.clone(), rvariant_arg,\n-                                            vec!(idx, lambdadecode.clone())))\n+                                            vec!(idx, exprdecode.clone())))\n                 });\n \n                 arms.push(cx.arm(v_span,"}]}