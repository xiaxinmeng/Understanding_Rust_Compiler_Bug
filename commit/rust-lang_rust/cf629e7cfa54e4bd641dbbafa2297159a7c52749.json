{"sha": "cf629e7cfa54e4bd641dbbafa2297159a7c52749", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNjI5ZTdjZmE1NGU0YmQ2NDFkYmJhZmEyMjk3MTU5YTdjNTI3NDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-18T21:46:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-20T19:27:51Z"}, "message": "Add error codes to resolve", "tree": {"sha": "02cef0e5078fc8230e0492333554e89f4322dde6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cef0e5078fc8230e0492333554e89f4322dde6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf629e7cfa54e4bd641dbbafa2297159a7c52749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf629e7cfa54e4bd641dbbafa2297159a7c52749", "html_url": "https://github.com/rust-lang/rust/commit/cf629e7cfa54e4bd641dbbafa2297159a7c52749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf629e7cfa54e4bd641dbbafa2297159a7c52749/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68029ec94415298e56ab20f73bcf2a1224ace4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68029ec94415298e56ab20f73bcf2a1224ace4d", "html_url": "https://github.com/rust-lang/rust/commit/f68029ec94415298e56ab20f73bcf2a1224ace4d"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "2a4c31d62abbe087cd86e14dfea5faf2e44c66cc", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf629e7cfa54e4bd641dbbafa2297159a7c52749/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf629e7cfa54e4bd641dbbafa2297159a7c52749/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=cf629e7cfa54e4bd641dbbafa2297159a7c52749", "patch": "@@ -12,7 +12,17 @@\n \n register_diagnostics! {\n     E0157,\n-    E0153\n+    E0153,\n+    E0251, // a named type or value has already been imported in this module\n+    E0252, // a named type or value has already been imported in this module\n+    E0253, // not directly importable\n+    E0254, // import conflicts with imported crate in this module\n+    E0255, // import conflicts with value in this module\n+    E0256, // import conflicts with type in this module\n+    E0257, // inherent implementations are only allowen on types defined in the current module\n+    E0258, // import conflicts with existing submodule\n+    E0259, // an extern crate has already been imported into this module\n+    E0260 // name conflicts with an external crate that has been imported into this module\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "6b45c2443d38a1a91f57005a5fcc6782fedae8d9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cf629e7cfa54e4bd641dbbafa2297159a7c52749/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf629e7cfa54e4bd641dbbafa2297159a7c52749/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cf629e7cfa54e4bd641dbbafa2297159a7c52749", "patch": "@@ -1722,7 +1722,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                            in this module\",\n                                           namespace_name,\n                                           token::get_name(name).get());\n-                        self.session.span_err(import_directive.span, msg.as_slice());\n+                        span_err!(self.session, import_directive.span, E0251, \"{}\", msg.as_slice());\n                     } else {\n                         let target = Target::new(containing_module.clone(),\n                                                  name_bindings.clone(),\n@@ -1769,7 +1769,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     ValueNS => \"value\",\n                                   },\n                                   token::get_name(name).get());\n-                self.session.span_err(import_span, &msg[]);\n+                span_err!(self.session, import_span, E0252, \"{}\", &msg[]);\n             }\n             Some(_) | None => {}\n         }\n@@ -1784,7 +1784,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         if !name_bindings.defined_in_namespace_with(namespace, IMPORTABLE) {\n             let msg = format!(\"`{}` is not directly importable\",\n                               token::get_name(name));\n-            self.session.span_err(import_span, &msg[]);\n+            span_err!(self.session, import_span, E0253, \"{}\", &msg[]);\n         }\n     }\n \n@@ -1809,7 +1809,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                        crate in this module \\\n                                        (maybe you meant `use {0}::*`?)\",\n                                       token::get_name(name).get());\n-                    self.session.span_err(import_span, &msg[]);\n+                    span_err!(self.session, import_span, E0254, \"{}\", &msg[]);\n                 }\n                 Some(_) | None => {}\n             }\n@@ -1831,7 +1831,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let msg = format!(\"import `{}` conflicts with value \\\n                                        in this module\",\n                                       token::get_name(name).get());\n-                    self.session.span_err(import_span, &msg[]);\n+                    span_err!(self.session, import_span, E0255, \"{}\", &msg[]);\n                     if let Some(span) = value.value_span {\n                         self.session.span_note(span,\n                                                \"conflicting value here\");\n@@ -1849,7 +1849,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             let msg = format!(\"import `{}` conflicts with type in \\\n                                                this module\",\n                                               token::get_name(name).get());\n-                            self.session.span_err(import_span, &msg[]);\n+                            span_err!(self.session, import_span, E0256, \"{}\", &msg[]);\n                             if let Some(span) = ty.type_span {\n                                 self.session.span_note(span,\n                                                        \"note conflicting type here\")\n@@ -1862,7 +1862,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         let msg = format!(\"inherent implementations \\\n                                                            are only allowed on types \\\n                                                            defined in the current module\");\n-                                        self.session.span_err(span, &msg[]);\n+                                        span_err!(self.session, span, E0257, \"{}\", &msg[]);\n                                         self.session.span_note(import_span,\n                                                                \"import from other module here\")\n                                     }\n@@ -1871,7 +1871,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     let msg = format!(\"import `{}` conflicts with existing \\\n                                                        submodule\",\n                                                       token::get_name(name).get());\n-                                    self.session.span_err(import_span, &msg[]);\n+                                    span_err!(self.session, import_span, E0258, \"{}\", &msg[]);\n                                     if let Some(span) = ty.type_span {\n                                         self.session.span_note(span,\n                                                                \"note conflicting module here\")\n@@ -1897,11 +1897,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         if module.external_module_children.borrow().contains_key(&name) {\n-            self.session\n-                .span_err(span,\n-                          &format!(\"an external crate named `{}` has already \\\n+                span_err!(self.session, span, E0259,\n+                          \"an external crate named `{}` has already \\\n                                    been imported into this module\",\n-                                  token::get_name(name).get())[]);\n+                                  token::get_name(name).get());\n         }\n     }\n \n@@ -1915,12 +1914,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         if module.external_module_children.borrow().contains_key(&name) {\n-            self.session\n-                .span_err(span,\n-                          &format!(\"the name `{}` conflicts with an external \\\n+                span_err!(self.session, span, E0260,\n+                          \"the name `{}` conflicts with an external \\\n                                    crate that has been imported into this \\\n                                    module\",\n-                                  token::get_name(name).get())[]);\n+                                  token::get_name(name).get());\n         }\n     }\n "}]}