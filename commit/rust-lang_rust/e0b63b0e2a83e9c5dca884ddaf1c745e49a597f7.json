{"sha": "e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjYzYjBlMmE4M2U5YzVkY2E4ODRkZGFmMWM3NDVlNDlhNTk3Zjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-03T10:15:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-04T16:38:46Z"}, "message": "debuginfo: Fixed some merge fallout", "tree": {"sha": "3d485c3e877692943406152e8bc23a9f1d4c6b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d485c3e877692943406152e8bc23a9f1d4c6b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7", "html_url": "https://github.com/rust-lang/rust/commit/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2df76c244d1cd282dd724135c4bdcb6e28eb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2df76c244d1cd282dd724135c4bdcb6e28eb52", "html_url": "https://github.com/rust-lang/rust/commit/6b2df76c244d1cd282dd724135c4bdcb6e28eb52"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "09956438bb4b469ef590e736e76e702071c70250", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=e0b63b0e2a83e9c5dca884ddaf1c745e49a597f7", "patch": "@@ -124,7 +124,7 @@ pub enum FunctionDebugContext {\n }\n \n impl FunctionDebugContext {\n-    fn get_ref<'a>(&'a self, cx: &CrateContext, span: span) -> &'a FunctionDebugContextData {\n+    fn get_ref<'a>(&'a self, cx: &CrateContext, span: Span) -> &'a FunctionDebugContextData {\n         match *self {\n             FunctionDebugContext(~ref data) => data,\n             DebugInfoDisabled => {\n@@ -140,7 +140,7 @@ impl FunctionDebugContext {\n \n     fn get_mut_ref<'a>(&'a mut self,\n                        cx: &CrateContext,\n-                       span: span)\n+                       span: Span)\n                     -> &'a mut FunctionDebugContextData {\n         match *self {\n             FunctionDebugContext(~ref mut data) => data,\n@@ -229,7 +229,7 @@ pub fn create_local_var_metadata(bcx: @mut Block,\n pub fn create_captured_var_metadata(bcx: @mut Block,\n                                     node_id: ast::NodeId,\n                                     llptr: ValueRef,\n-                                    span: span) {\n+                                    span: Span) {\n     if fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n@@ -270,7 +270,7 @@ pub fn create_match_binding_metadata(bcx: @mut Block,\n                                      variable_ident: ast::Ident,\n                                      node_id: ast::NodeId,\n                                      variable_type: ty::t,\n-                                     span: span) {\n+                                     span: Span) {\n     if fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n@@ -406,7 +406,7 @@ pub fn create_argument_metadata(bcx: @mut Block,\n /// reliably find the correct visibility scope for the code position.\n pub fn set_source_location(fcx: &FunctionContext,\n                            node_id: ast::NodeId,\n-                           span: span) {\n+                           span: Span) {\n     if fn_should_be_ignored(fcx) {\n         return;\n     }\n@@ -784,12 +784,12 @@ fn compile_unit_metadata(cx: @mut CrateContext) {\n \n fn declare_local(bcx: @mut Block,\n                  llptr: ValueRef,\n-                 variable_ident: ast::ident,\n+                 variable_ident: ast::Ident,\n                  variable_type: ty::t,\n                  scope_metadata: DIScope,\n                  variable_access: VariableAccess,\n                  variable_kind: VariableKind,\n-                 span: span) {\n+                 span: Span) {\n     let cx: &mut CrateContext = bcx.ccx();\n \n     let filename = span_start(cx, span).file.name;\n@@ -890,7 +890,7 @@ fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n /// Finds the scope metadata node for the given AST node.\n fn scope_metadata(fcx: &FunctionContext,\n                   node_id: ast::NodeId,\n-                  span: span)\n+                  span: Span)\n                -> DIScope {\n     let scope_map = &fcx.debug_context.get_ref(fcx.ccx, span).scope_map;\n \n@@ -1428,7 +1428,7 @@ fn vec_slice_metadata(cx: &mut CrateContext,\n \n fn subroutine_type_metadata(cx: &mut CrateContext,\n                             signature: &ty::FnSig,\n-                            span: span)\n+                            span: Span)\n                          -> DICompositeType {\n     let loc = span_start(cx, span);\n     let file_metadata = file_metadata(cx, loc.file.name);"}]}