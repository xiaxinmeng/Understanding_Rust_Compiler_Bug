{"sha": "79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "node_id": "C_kwDOAAsO6NoAKDc5Y2Q2ZjM4ZjM1NDY1MDVmNWU3YTZlNWNlNGY2OTZlYTZiMTlkMTk", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-04T01:54:45Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-14T23:36:33Z"}, "message": "Implement a crude stack printing mechanism", "tree": {"sha": "84a9b3cc1e493b0eaa0cd85105ecfd56bc3454e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84a9b3cc1e493b0eaa0cd85105ecfd56bc3454e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "html_url": "https://github.com/rust-lang/rust/commit/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7785f6dfc1b1f46ca8c0bfe737d3d8b077fc9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7785f6dfc1b1f46ca8c0bfe737d3d8b077fc9c0", "html_url": "https://github.com/rust-lang/rust/commit/e7785f6dfc1b1f46ca8c0bfe737d3d8b077fc9c0"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "4742a365ec38bc3dd205411ef1c957a9735381ad", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "patch": "@@ -91,6 +91,10 @@ impl<T> RangeMap<T> {\n         self.v.iter_mut().map(|elem| &mut elem.data)\n     }\n \n+    pub fn iter_all(&self) -> impl Iterator<Item = (ops::Range<u64>, &T)> {\n+        self.v.iter().map(|elem| (elem.range.clone(), &elem.data))\n+    }\n+\n     // Splits the element situated at the given `index`, such that the 2nd one starts at offset\n     // `split_offset`. Do nothing if the element already starts there.\n     // Returns whether a split was necessary."}, {"sha": "7e6a9595161f7de4c234b6f70e085e6f547e60a6", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "patch": "@@ -417,6 +417,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // shim, add it to the corresponding submodule.\n         match link_name.as_str() {\n             // Miri-specific extern functions\n+            \"miri_get_alloc_id\" => {\n+                let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let ptr = this.read_pointer(ptr)?;\n+                let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr)?;\n+                this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n+            }\n+            \"miri_print_stacks\" => {\n+                let [id] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let id = this.read_scalar(id)?.to_u64()?;\n+                if let Some(id) = std::num::NonZeroU64::new(id) {\n+                    this.print_stacks(AllocId(id))?;\n+                }\n+            }\n             \"miri_static_root\" => {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;"}, {"sha": "f1dd38e5fc1e339c6869251c0343d3b10fd455b8", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=79cd6f38f3546505f5e7a6e5ce4f696ea6b19d19", "patch": "@@ -1123,4 +1123,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n         Ok(())\n     }\n+\n+    fn print_stacks(&mut self, alloc_id: AllocId) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let alloc_extra = this.get_alloc_extra(alloc_id)?;\n+        let stacks = alloc_extra.stacked_borrows.as_ref().unwrap().borrow();\n+        for (range, stack) in stacks.stacks.iter_all() {\n+            print!(\"{:?}: [\", range);\n+            for i in 0..stack.len() {\n+                let item = stack.get(i).unwrap();\n+                print!(\" {:?}{:?}\", item.perm(), item.tag());\n+            }\n+            println!(\" ]\");\n+        }\n+        Ok(())\n+    }\n }"}]}