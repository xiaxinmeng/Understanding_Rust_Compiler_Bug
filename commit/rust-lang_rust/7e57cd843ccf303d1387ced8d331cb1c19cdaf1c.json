{"sha": "7e57cd843ccf303d1387ced8d331cb1c19cdaf1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNTdjZDg0M2NjZjMwM2QxMzg3Y2VkOGQzMzFjYjFjMTljZGFmMWM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-09T10:30:30Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:02:44Z"}, "message": "Rejig Int impl macros\n\nThis should make implementing the checked operator methods easier", "tree": {"sha": "14ef2b649c910cf5402472d571bc0344f540dd99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ef2b649c910cf5402472d571bc0344f540dd99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c", "html_url": "https://github.com/rust-lang/rust/commit/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d431a67cecc426a4d24dcf24d72a9147b8e08860", "url": "https://api.github.com/repos/rust-lang/rust/commits/d431a67cecc426a4d24dcf24d72a9147b8e08860", "html_url": "https://github.com/rust-lang/rust/commit/d431a67cecc426a4d24dcf24d72a9147b8e08860"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "9726b7b397865b23d1fb57c209513855cb29107b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e57cd843ccf303d1387ced8d331cb1c19cdaf1c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7e57cd843ccf303d1387ced8d331cb1c19cdaf1c", "patch": "@@ -549,17 +549,18 @@ pub trait Int: Primitive\n     }\n }\n \n-macro_rules! int_impl {\n-    ($T:ty, $BITS:expr, $ctpop:path, $ctlz:path, $cttz:path, $bswap:path) => {\n+macro_rules! uint_impl {\n+    ($T:ty, $ActualT:ty, $BITS:expr,\n+     $ctpop:path, $ctlz:path, $cttz:path, $bswap:path) => {\n         impl Int for $T {\n             #[inline]\n-            fn count_ones(self) -> uint { unsafe { $ctpop(self) as uint } }\n+            fn count_ones(self) -> uint { unsafe { $ctpop(self as $ActualT) as uint } }\n \n             #[inline]\n-            fn leading_zeros(self) -> uint { unsafe { $ctlz(self) as uint } }\n+            fn leading_zeros(self) -> uint { unsafe { $ctlz(self as $ActualT) as uint } }\n \n             #[inline]\n-            fn trailing_zeros(self) -> uint { unsafe { $cttz(self) as uint } }\n+            fn trailing_zeros(self) -> uint { unsafe { $cttz(self as $ActualT) as uint } }\n \n             #[inline]\n             fn rotate_left(self, n: uint) -> $T {\n@@ -576,7 +577,7 @@ macro_rules! int_impl {\n             }\n \n             #[inline]\n-            fn swap_bytes(self) -> $T { unsafe { $bswap(self) } }\n+            fn swap_bytes(self) -> $T { unsafe { $bswap(self as $ActualT) as $T } }\n         }\n     }\n }\n@@ -585,31 +586,45 @@ macro_rules! int_impl {\n /// consistency with the other `bswap` intrinsics.\n unsafe fn bswap8(x: u8) -> u8 { x }\n \n-int_impl!(u8, 8,\n+uint_impl!(u8, u8, 8,\n     intrinsics::ctpop8,\n     intrinsics::ctlz8,\n     intrinsics::cttz8,\n     bswap8)\n \n-int_impl!(u16, 16,\n+uint_impl!(u16, u16, 16,\n     intrinsics::ctpop16,\n     intrinsics::ctlz16,\n     intrinsics::cttz16,\n     intrinsics::bswap16)\n \n-int_impl!(u32, 32,\n+uint_impl!(u32, u32, 32,\n     intrinsics::ctpop32,\n     intrinsics::ctlz32,\n     intrinsics::cttz32,\n     intrinsics::bswap32)\n \n-int_impl!(u64, 64,\n+uint_impl!(u64, u64, 64,\n     intrinsics::ctpop64,\n     intrinsics::ctlz64,\n     intrinsics::cttz64,\n     intrinsics::bswap64)\n \n-macro_rules! int_cast_impl {\n+#[cfg(target_word_size = \"32\")]\n+uint_impl!(uint, u32, 32,\n+    intrinsics::ctpop32,\n+    intrinsics::ctlz32,\n+    intrinsics::cttz32,\n+    intrinsics::bswap32)\n+\n+#[cfg(target_word_size = \"64\")]\n+uint_impl!(uint, u64, 64,\n+    intrinsics::ctpop64,\n+    intrinsics::ctlz64,\n+    intrinsics::cttz64,\n+    intrinsics::bswap64)\n+\n+macro_rules! int_impl {\n     ($T:ty, $U:ty) => {\n         impl Int for $T {\n             #[inline]\n@@ -633,15 +648,12 @@ macro_rules! int_cast_impl {\n     }\n }\n \n-int_cast_impl!(i8, u8)\n-int_cast_impl!(i16, u16)\n-int_cast_impl!(i32, u32)\n-int_cast_impl!(i64, u64)\n-\n-#[cfg(target_word_size = \"32\")] int_cast_impl!(uint, u32)\n-#[cfg(target_word_size = \"64\")] int_cast_impl!(uint, u64)\n-#[cfg(target_word_size = \"32\")] int_cast_impl!(int, u32)\n-#[cfg(target_word_size = \"64\")] int_cast_impl!(int, u64)\n+int_impl!(i8, u8)\n+int_impl!(i16, u16)\n+int_impl!(i32, u32)\n+int_impl!(i64, u64)\n+#[cfg(target_word_size = \"32\")] int_impl!(int, u32)\n+#[cfg(target_word_size = \"64\")] int_impl!(int, u64)\n \n /// Unsigned integers\n pub trait UnsignedInt: Int {"}]}