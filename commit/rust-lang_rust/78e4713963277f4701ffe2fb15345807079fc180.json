{"sha": "78e4713963277f4701ffe2fb15345807079fc180", "node_id": "C_kwDOAAsO6NoAKDc4ZTQ3MTM5NjMyNzdmNDcwMWZmZTJmYjE1MzQ1ODA3MDc5ZmMxODA", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-06-29T15:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T15:36:05Z"}, "message": "Merge pull request #188 from GuillaumeGomez/simplify-ci\n\nSimplify CI", "tree": {"sha": "8976d2da582b10ac87511eb1f419cc1a747f1c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8976d2da582b10ac87511eb1f419cc1a747f1c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e4713963277f4701ffe2fb15345807079fc180", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivHFlCRBK7hj4Ov3rIwAAHDkIAHgebtzpOkgarDVeKbEZ8srY\njzjyWcaP9eYOEaX6a4Snkc+kB7Ge41zIb637ggSFwmYEjVuG5kFx+C/+f1QoJKub\nb2AjWdMzQgFl12tuXb6fwBRcFD1vDpZ3jeQPm6LKXv0TPTsq7yyQgxHqyWMZeWIk\ng8OSLTulA0KmK/Ymkf/CJ3xM0nV2AUhoagie2PKfBrvf0+hXD8D+bdttDJb8o2XE\nKoiWDaKyo0Dm349lyATPkIYthvwQCfI63HyidNbO2lKqYYRBvoDQn5u/atSuTkAl\noqWbskjNI/E7N1zDF4J7zDIcqLlnBeeV60WDSW72tWpixJqw73WRlKHS3eAHUmE=\n=pv9/\n-----END PGP SIGNATURE-----\n", "payload": "tree 8976d2da582b10ac87511eb1f419cc1a747f1c17\nparent be5caeb8c90d7420e2c23e5608feade347489c65\nparent 4ef0d19becccb2ae84e1971bb440b0fb74e0f8b5\nauthor antoyo <antoyo@users.noreply.github.com> 1656516965 -0400\ncommitter GitHub <noreply@github.com> 1656516965 -0400\n\nMerge pull request #188 from GuillaumeGomez/simplify-ci\n\nSimplify CI"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e4713963277f4701ffe2fb15345807079fc180", "html_url": "https://github.com/rust-lang/rust/commit/78e4713963277f4701ffe2fb15345807079fc180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e4713963277f4701ffe2fb15345807079fc180/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5caeb8c90d7420e2c23e5608feade347489c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5caeb8c90d7420e2c23e5608feade347489c65", "html_url": "https://github.com/rust-lang/rust/commit/be5caeb8c90d7420e2c23e5608feade347489c65"}, {"sha": "4ef0d19becccb2ae84e1971bb440b0fb74e0f8b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef0d19becccb2ae84e1971bb440b0fb74e0f8b5", "html_url": "https://github.com/rust-lang/rust/commit/4ef0d19becccb2ae84e1971bb440b0fb74e0f8b5"}], "stats": {"total": 92, "additions": 49, "deletions": 43}, "files": [{"sha": "4e2647dd4273417016c432462b734e2d6f4c4923", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/78e4713963277f4701ffe2fb15345807079fc180/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/78e4713963277f4701ffe2fb15345807079fc180/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=78e4713963277f4701ffe2fb15345807079fc180", "patch": "@@ -4,14 +4,21 @@ on:\n   - push\n   - pull_request\n \n+env:\n+  # Enable backtraces for easier debugging\n+  RUST_BACKTRACE: 1\n+\n jobs:\n   build:\n     runs-on: ubuntu-latest\n \n     strategy:\n       fail-fast: false\n       matrix:\n-        libgccjit_version: [\"libgccjit.so\", \"libgccjit_without_int128.so\", \"libgccjit12.so\"]\n+        libgccjit_version:\n+          - { gcc: \"libgccjit.so\", extra: \"\" }\n+          - { gcc: \"libgccjit_without_int128.so\", extra: \"\" }\n+          - { gcc: \"libgccjit12.so\", extra: \"--no-default-features\" }\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -28,7 +35,7 @@ jobs:\n       uses: dawidd6/action-download-artifact@v2\n       with:\n           workflow: main.yml\n-          name: ${{ matrix.libgccjit_version }}\n+          name: ${{ matrix.libgccjit_version.gcc }}\n           path: gcc-build\n           repo: antoyo/gcc\n           search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.\n@@ -78,19 +85,10 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}\n \n     - name: Build\n-      if: matrix.libgccjit_version != 'libgccjit12.so'\n-      run: |\n-        ./prepare_build.sh\n-        ./build.sh\n-        cargo test\n-        ./clean_all.sh\n-\n-    - name: Build\n-      if: matrix.libgccjit_version == 'libgccjit12.so'\n       run: |\n         ./prepare_build.sh\n-        ./build.sh --no-default-features\n-        cargo test --no-default-features\n+        ./build.sh ${{ matrix.libgccjit_version.extra }}\n+        cargo test ${{ matrix.libgccjit_version.extra }}\n         ./clean_all.sh\n \n     - name: Prepare dependencies\n@@ -106,29 +104,25 @@ jobs:\n         command: build\n         args: --release\n \n-    - name: Test\n-      if: matrix.libgccjit_version != 'libgccjit12.so'\n+    - name: Test mini_tests\n       run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        # Reduce amount of benchmark runs as they are slow\n-        export COMPILE_RUNS=2\n-        export RUN_RUNS=2\n+        ./test.sh --release --clean --build-sysroot --mini-tests ${{ matrix.libgccjit_version.extra }}\n \n-        ./test.sh --release\n+    - name: Test std_tests\n+      run: |\n+        ./test.sh --release --std-tests ${{ matrix.libgccjit_version.extra }}\n \n-    - name: Test\n-      if: matrix.libgccjit_version == 'libgccjit12.so'\n+    - name: Test test_libcore\n       run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n+        ./test.sh --release --test-libcore ${{ matrix.libgccjit_version.extra }}\n \n-        # Reduce amount of benchmark runs as they are slow\n-        export COMPILE_RUNS=2\n-        export RUN_RUNS=2\n+    - name: Test extended_sysroot_tests\n+      run: |\n+        ./test.sh --release --extended-tests ${{ matrix.libgccjit_version.extra }}\n \n-        ./test.sh --release --no-default-features\n+    - name: Test test_rustc\n+      run: |\n+        ./test.sh --release --test-rustc ${{ matrix.libgccjit_version.extra }}\n \n   duplicates:\n     runs-on: ubuntu-latest"}, {"sha": "4815704f10b7c4ef557e0af564f0209e16bea283", "filename": "test.sh", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78e4713963277f4701ffe2fb15345807079fc180/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/78e4713963277f4701ffe2fb15345807079fc180/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=78e4713963277f4701ffe2fb15345807079fc180", "patch": "@@ -17,13 +17,14 @@ export LIBRARY_PATH=\"$GCC_PATH\"\n flags=\n gcc_master_branch=1\n channel=\"debug\"\n-func=all\n+funcs=()\n build_only=0\n \n while [[ $# -gt 0 ]]; do\n     case $1 in\n         --release)\n             codegen_channel=release\n+            channel=\"release\"\n             shift\n             ;;\n         --release-sysroot)\n@@ -40,37 +41,41 @@ while [[ $# -gt 0 ]]; do\n             flags=\"$flags --features $1\"\n             shift\n             ;;\n-        --release)\n-            channel=\"release\"\n-            shift\n-            ;;\n         \"--test-rustc\")\n-            func=test_rustc\n+            funcs+=(test_rustc)\n             shift\n             ;;\n \n         \"--test-libcore\")\n-            func=test_libcore\n+            funcs+=(test_libcore)\n             shift\n             ;;\n \n         \"--clean-ui-tests\")\n-            func=clean_ui_tests\n+            funcs+=(clean_ui_tests)\n+            shift\n+            ;;\n+        \"--clean\")\n+            funcs+=(clean)\n             shift\n             ;;\n \n         \"--std-tests\")\n-            func=std_tests\n+            funcs+=(std_tests)\n             shift\n             ;;\n \n         \"--extended-tests\")\n-            func=extended_sysroot_tests\n+            funcs+=(extended_sysroot_tests)\n+            shift\n+            ;;\n+        \"--mini-tests\")\n+            funcs+=(mini_tests)\n             shift\n             ;;\n \n         \"--build-sysroot\")\n-            func=build_sysroot\n+            funcs+=(build_sysroot)\n             shift\n             ;;\n         \"--build\")\n@@ -87,14 +92,14 @@ done\n if [[ $channel == \"release\" ]]; then\n     export CHANNEL='release'\n     CARGO_INCREMENTAL=1 cargo rustc --release $flags\n-    shift\n else\n     echo $LD_LIBRARY_PATH\n     export CHANNEL='debug'\n     cargo rustc $flags\n fi\n \n if (( $build_only == 1 )); then\n+    echo \"Since it's `build-only`, exiting...\"\n     exit\n fi\n \n@@ -289,4 +294,11 @@ function all() {\n     test_rustc\n }\n \n-$func\n+if [ ${#funcs[@]} -eq 0 ]; then\n+    echo \"No command passed, running `--all`...\"\n+    all\n+else\n+    for t in ${funcs[@]}; do\n+        $t\n+    done\n+fi"}]}