{"sha": "1765c5da908a676215184f94e8021b3c37a10980", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjVjNWRhOTA4YTY3NjIxNTE4NGY5NGU4MDIxYjNjMzdhMTA5ODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T22:38:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T22:38:42Z"}, "message": "Auto merge of #5363 - yaahc:clippy-fix, r=phansch,flip1995\n\nadd --fix support to `cargo-clippy`\n\nPrior to this we had started work on integrating clippy as a subcommand directly into cargo in the form of `cargo clippy-preview` and `cargo fix --clippy`. In the course of that work it was decided that the best approach would be to strictly add the features clippy needed to cargo in order to insert `clippy-driver` only for workspace crates. This was accomplished by adding a `RUSTC_WORKSPACE_WRAPPER` env variable to cargo that will override the normal `RUSTC_WRAPPER` when both are present and the current crate is a workspace crate.\n\nThis change adds support to clippy to use this by setting the `RUSTC_WORKSPACE_WRAPPER` env variable instead `RUSTC_WRAPPER` and by detecting `--fix` as an arg and swapping out the `check` cargo command for `fix` when it is present.\n\nWIP, here are the current issues that I still need to resolve\n\n- [x] Detect if we're running on nightly rust\n  - [x] Set `RUSTC_WORKSPACE_WRAPPER` on nightly, and `RUSTC_WRAPPER` on stable\n  - [x] Error out on stable when `--fix` is specified, because stable currently hasn't landed the PR for `RUSTC_WORKSPACE_WRAPPER` so if we set this it just runs check and silently fails\n- [ ] Update the help text\n  - [ ] The current plan is to shell out to `cargo check --help` and then postprocess the output to mention clippy instead of check where appropriate and to add the extra info about `--fix` and the `-- -A lint` options.\n- [x] tests?\n\nchangelog: add `--fix` arg to `cargo-clippy`", "tree": {"sha": "b8ae392cf6a0ad04ae9ae43b538161362c78120f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ae392cf6a0ad04ae9ae43b538161362c78120f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1765c5da908a676215184f94e8021b3c37a10980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1765c5da908a676215184f94e8021b3c37a10980", "html_url": "https://github.com/rust-lang/rust/commit/1765c5da908a676215184f94e8021b3c37a10980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1765c5da908a676215184f94e8021b3c37a10980/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6651c1b9b2a1b3e995565467218ff7eca7479c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6651c1b9b2a1b3e995565467218ff7eca7479c5e", "html_url": "https://github.com/rust-lang/rust/commit/6651c1b9b2a1b3e995565467218ff7eca7479c5e"}, {"sha": "5cfb9ec1d7d66ecebd86761cef091766c65c09d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfb9ec1d7d66ecebd86761cef091766c65c09d9", "html_url": "https://github.com/rust-lang/rust/commit/5cfb9ec1d7d66ecebd86761cef091766c65c09d9"}], "stats": {"total": 191, "additions": 149, "deletions": 42}, "files": [{"sha": "bc43a34ed5d4aaa4e843306abfebab9970a955f2", "filename": "src/main.rs", "status": "modified", "additions": 149, "deletions": 42, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/1765c5da908a676215184f94e8021b3c37a10980/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1765c5da908a676215184f94e8021b3c37a10980/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=1765c5da908a676215184f94e8021b3c37a10980", "patch": "@@ -1,6 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use rustc_tools_util::VersionInfo;\n+use std::env;\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::process::{self, Command};\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n \n@@ -37,68 +41,130 @@ fn show_version() {\n \n pub fn main() {\n     // Check for version and help flags even when invoked as 'cargo-clippy'\n-    if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+    if env::args().any(|a| a == \"--help\" || a == \"-h\") {\n         show_help();\n         return;\n     }\n \n-    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+    if env::args().any(|a| a == \"--version\" || a == \"-V\") {\n         show_version();\n         return;\n     }\n \n-    if let Err(code) = process(std::env::args().skip(2)) {\n-        std::process::exit(code);\n+    if let Err(code) = process(env::args().skip(2)) {\n+        process::exit(code);\n     }\n }\n \n-fn process<I>(mut old_args: I) -> Result<(), i32>\n-where\n-    I: Iterator<Item = String>,\n-{\n-    let mut args = vec![\"check\".to_owned()];\n+struct ClippyCmd {\n+    unstable_options: bool,\n+    cargo_subcommand: &'static str,\n+    args: Vec<String>,\n+    clippy_args: String,\n+}\n+\n+impl ClippyCmd {\n+    fn new<I>(mut old_args: I) -> Self\n+    where\n+        I: Iterator<Item = String>,\n+    {\n+        let mut cargo_subcommand = \"check\";\n+        let mut unstable_options = false;\n+        let mut args = vec![];\n+\n+        for arg in old_args.by_ref() {\n+            match arg.as_str() {\n+                \"--fix\" => {\n+                    cargo_subcommand = \"fix\";\n+                    continue;\n+                },\n+                \"--\" => break,\n+                // Cover -Zunstable-options and -Z unstable-options\n+                s if s.ends_with(\"unstable-options\") => unstable_options = true,\n+                _ => {},\n+            }\n+\n+            args.push(arg);\n+        }\n+\n+        if cargo_subcommand == \"fix\" && !unstable_options {\n+            panic!(\"Usage of `--fix` requires `-Z unstable-options`\");\n+        }\n \n-    for arg in old_args.by_ref() {\n-        if arg == \"--\" {\n-            break;\n+        // Run the dogfood tests directly on nightly cargo. This is required due\n+        // to a bug in rustup.rs when running cargo on custom toolchains. See issue #3118.\n+        if env::var_os(\"CLIPPY_DOGFOOD\").is_some() && cfg!(windows) {\n+            args.insert(0, \"+nightly\".to_string());\n+        }\n+\n+        let clippy_args: String = old_args.map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg)).collect();\n+\n+        ClippyCmd {\n+            unstable_options,\n+            cargo_subcommand,\n+            args,\n+            clippy_args,\n+        }\n+    }\n+\n+    fn path_env(&self) -> &'static str {\n+        if self.unstable_options {\n+            \"RUSTC_WORKSPACE_WRAPPER\"\n+        } else {\n+            \"RUSTC_WRAPPER\"\n         }\n-        args.push(arg);\n     }\n \n-    let clippy_args: String = old_args.map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg)).collect();\n+    fn path() -> PathBuf {\n+        let mut path = env::current_exe()\n+            .expect(\"current executable path invalid\")\n+            .with_file_name(\"clippy-driver\");\n+\n+        if cfg!(windows) {\n+            path.set_extension(\"exe\");\n+        }\n \n-    let mut path = std::env::current_exe()\n-        .expect(\"current executable path invalid\")\n-        .with_file_name(\"clippy-driver\");\n-    if cfg!(windows) {\n-        path.set_extension(\"exe\");\n+        path\n     }\n \n-    let target_dir = std::env::var_os(\"CLIPPY_DOGFOOD\")\n-        .map(|_| {\n-            std::env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n-                || std::ffi::OsString::from(\"clippy_dogfood\"),\n-                |d| {\n-                    std::path::PathBuf::from(d)\n-                        .join(\"target\")\n-                        .join(\"dogfood\")\n-                        .into_os_string()\n-                },\n-            )\n-        })\n-        .map(|p| (\"CARGO_TARGET_DIR\", p));\n-\n-    // Run the dogfood tests directly on nightly cargo. This is required due\n-    // to a bug in rustup.rs when running cargo on custom toolchains. See issue #3118.\n-    if std::env::var_os(\"CLIPPY_DOGFOOD\").is_some() && cfg!(windows) {\n-        args.insert(0, \"+nightly\".to_string());\n+    fn target_dir() -> Option<(&'static str, OsString)> {\n+        env::var_os(\"CLIPPY_DOGFOOD\")\n+            .map(|_| {\n+                env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n+                    || std::ffi::OsString::from(\"clippy_dogfood\"),\n+                    |d| {\n+                        std::path::PathBuf::from(d)\n+                            .join(\"target\")\n+                            .join(\"dogfood\")\n+                            .into_os_string()\n+                    },\n+                )\n+            })\n+            .map(|p| (\"CARGO_TARGET_DIR\", p))\n     }\n \n-    let exit_status = std::process::Command::new(\"cargo\")\n-        .args(&args)\n-        .env(\"RUSTC_WRAPPER\", path)\n-        .env(\"CLIPPY_ARGS\", clippy_args)\n-        .envs(target_dir)\n+    fn into_std_cmd(self) -> Command {\n+        let mut cmd = Command::new(\"cargo\");\n+\n+        cmd.env(self.path_env(), Self::path())\n+            .envs(ClippyCmd::target_dir())\n+            .env(\"CLIPPY_ARGS\", self.clippy_args)\n+            .arg(self.cargo_subcommand)\n+            .args(&self.args);\n+\n+        cmd\n+    }\n+}\n+\n+fn process<I>(old_args: I) -> Result<(), i32>\n+where\n+    I: Iterator<Item = String>,\n+{\n+    let cmd = ClippyCmd::new(old_args);\n+\n+    let mut cmd = cmd.into_std_cmd();\n+\n+    let exit_status = cmd\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()\n@@ -110,3 +176,44 @@ where\n         Err(exit_status.code().unwrap_or(-1))\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::ClippyCmd;\n+\n+    #[test]\n+    #[should_panic]\n+    fn fix_without_unstable() {\n+        let args = \"cargo clippy --fix\".split_whitespace().map(ToString::to_string);\n+        let _ = ClippyCmd::new(args);\n+    }\n+\n+    #[test]\n+    fn fix_unstable() {\n+        let args = \"cargo clippy --fix -Zunstable-options\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+        assert_eq!(\"fix\", cmd.cargo_subcommand);\n+        assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n+        assert!(cmd.args.iter().any(|arg| arg.ends_with(\"unstable-options\")));\n+    }\n+\n+    #[test]\n+    fn check() {\n+        let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+        assert_eq!(\"check\", cmd.cargo_subcommand);\n+        assert_eq!(\"RUSTC_WRAPPER\", cmd.path_env());\n+    }\n+\n+    #[test]\n+    fn check_unstable() {\n+        let args = \"cargo clippy -Zunstable-options\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+        assert_eq!(\"check\", cmd.cargo_subcommand);\n+        assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n+    }\n+}"}]}