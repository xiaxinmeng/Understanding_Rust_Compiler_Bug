{"sha": "5496a1fbbe3facc09dfc23be80707905eb844a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OTZhMWZiYmUzZmFjYzA5ZGZjMjNiZTgwNzA3OTA1ZWI4NDRhNjI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-18T00:22:05Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-18T00:52:47Z"}, "message": "Document new dataflow analysis", "tree": {"sha": "97fb93b5bd21e22869f9e0c9a8fbfbaed3ba215c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97fb93b5bd21e22869f9e0c9a8fbfbaed3ba215c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5496a1fbbe3facc09dfc23be80707905eb844a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5496a1fbbe3facc09dfc23be80707905eb844a62", "html_url": "https://github.com/rust-lang/rust/commit/5496a1fbbe3facc09dfc23be80707905eb844a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5496a1fbbe3facc09dfc23be80707905eb844a62/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb72e4ad144f4887f67e539bcd143b4d303dade", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb72e4ad144f4887f67e539bcd143b4d303dade", "html_url": "https://github.com/rust-lang/rust/commit/ceb72e4ad144f4887f67e539bcd143b4d303dade"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "696b44ac2efc251da832406067d542c9b08699e7", "filename": "src/librustc_mir/dataflow/generic.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5496a1fbbe3facc09dfc23be80707905eb844a62/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5496a1fbbe3facc09dfc23be80707905eb844a62/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs?ref=5496a1fbbe3facc09dfc23be80707905eb844a62", "patch": "@@ -8,29 +8,72 @@ use rustc_data_structures::work_queue::WorkQueue;\n \n use crate::dataflow::BottomValue;\n \n+/// A specific kind of dataflow analysis.\n+///\n+/// To run a dataflow analysis, one must set the initial state of the `START_BLOCK` via\n+/// `initialize_start_block` and define a transfer function for each statement or terminator via\n+/// the various `effect` methods. The entry set for all other basic blocks is initialized to\n+/// `Self::BOTTOM_VALUE`. The dataflow `Engine` then iteratively updates the various entry sets for\n+/// each block with the cumulative effects of the transfer functions of all preceding blocks.\n+///\n+/// You should use an `Engine` to actually run an analysis, and a `ResultsCursor` to inspect the\n+/// results of that analysis like so:\n+///\n+/// ```ignore\n+/// fn do_my_analysis(body: &mir::Body<'tcx>, dead_unwinds: &BitSet<BasicBlock>) {\n+///     let analysis = MyAnalysis::new();\n+///     let results = Engine::new(body, dead_unwinds, analysis).iterate_to_fixpoint();\n+///     let mut cursor = dataflow::ResultsCursor::new(body, results);\n+///\n+///     for statement_index in body.block_data[START_BLOCK].statements.iter() {\n+///         cursor.seek_after(Location { block: START_BLOCK, statement_index });\n+///         let state = cursor.get();\n+///         println!(\"{:?}\", state);\n+///     }\n+/// }\n+/// ```\n pub trait Analysis<'tcx>: BottomValue {\n+    /// The index type used to access the dataflow state.\n     type Idx: Idx;\n \n+    /// A name describing the dataflow analysis being implemented.\n+    ///\n+    /// The name should be suitable as part of a filename, so avoid whitespace, slashes or periods\n+    /// and try to keep it short.\n     fn name() -> &'static str;\n \n+    /// The size of each bitvector allocated for each block.\n     fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize;\n \n+    /// Mutates the entry set of the `START_BLOCK` to containthe initial state for dataflow\n+    /// analysis.\n     fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>);\n \n+    /// Updates the current dataflow state with the effect of evaluating a statement.\n     fn apply_statement_effect(\n         &self,\n         state: &mut BitSet<Self::Idx>,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     );\n \n+    /// Updates the current dataflow state with the effect of evaluating a statement.\n+    ///\n+    /// Note that the effect of a successful return from a `Call` terminator should **not** be\n+    /// acounted for in this function. That should go in `apply_call_return_effect`. For example,\n+    /// in the `InitializedPlaces` analyses, the return place is not marked as initialized here.\n     fn apply_terminator_effect(\n         &self,\n         state: &mut BitSet<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     );\n \n+    /// Updates the current dataflow state with the effect of a successful return from a `Call`\n+    /// terminator.\n+    ///\n+    /// This is separated from `apply_terminator_effect` to properly track state across\n+    /// unwind edges for `Call`s.\n     fn apply_call_return_effect(\n         &self,\n         state: &mut BitSet<Self::Idx>,\n@@ -117,6 +160,11 @@ impl CursorPosition {\n     }\n }\n \n+/// Inspect the results of dataflow analysis.\n+///\n+/// This cursor has linear performance when visiting statements in a block in order. Visiting\n+/// statements within a block in reverse order is `O(n^2)`, where `n` is the number of statements\n+/// in that block.\n pub struct ResultsCursor<'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n@@ -267,6 +315,7 @@ where\n     }\n }\n \n+/// A completed dataflow analysis.\n pub struct Results<'tcx, A>\n where\n     A: Analysis<'tcx>,\n@@ -275,6 +324,7 @@ where\n     entry_sets: IndexVec<BasicBlock, BitSet<A::Idx>>,\n }\n \n+/// All information required to iterate a dataflow analysis to fixpoint.\n pub struct Engine<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,"}]}