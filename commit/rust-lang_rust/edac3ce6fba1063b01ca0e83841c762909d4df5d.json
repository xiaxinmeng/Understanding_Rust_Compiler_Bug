{"sha": "edac3ce6fba1063b01ca0e83841c762909d4df5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYWMzY2U2ZmJhMTA2M2IwMWNhMGU4Mzg0MWM3NjI5MDlkNGRmNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-02T15:33:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-02T15:33:22Z"}, "message": "Auto merge of #23877 - richo:gardening, r=Manishearth\n\nI also wanted to unignore https://github.com/rust-lang/rust/blob/master/src/libsyntax/ext/expand.rs#L1768-L1777 since the issue it references is closed, but the test fails, and it's internals aren't super clear to me.", "tree": {"sha": "859a219660624076d9ab3dcfd19bfa894f0599df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859a219660624076d9ab3dcfd19bfa894f0599df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edac3ce6fba1063b01ca0e83841c762909d4df5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edac3ce6fba1063b01ca0e83841c762909d4df5d", "html_url": "https://github.com/rust-lang/rust/commit/edac3ce6fba1063b01ca0e83841c762909d4df5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edac3ce6fba1063b01ca0e83841c762909d4df5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9854143cba679834bc4ef932858cd5303f015a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9854143cba679834bc4ef932858cd5303f015a0e", "html_url": "https://github.com/rust-lang/rust/commit/9854143cba679834bc4ef932858cd5303f015a0e"}, {"sha": "85c74c630512af06d361bf3707631e76c81cb925", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c74c630512af06d361bf3707631e76c81cb925", "html_url": "https://github.com/rust-lang/rust/commit/85c74c630512af06d361bf3707631e76c81cb925"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "dd30363e316afee68a12ed105ac1293daeec084f", "filename": "src/libstd/old_io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edac3ce6fba1063b01ca0e83841c762909d4df5d/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edac3ce6fba1063b01ca0e83841c762909d4df5d/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs?ref=edac3ce6fba1063b01ca0e83841c762909d4df5d", "patch": "@@ -127,11 +127,10 @@ mod test {\n         assert!(found_local);\n     }\n \n-    #[ignore]\n     #[test]\n     fn issue_10663() {\n         // Something should happen here, but this certainly shouldn't cause\n         // everything to die. The actual outcome we don't care too much about.\n-        get_host_addresses(\"example.com\").unwrap();\n+        let _ = get_host_addresses(\"example.com\");\n     }\n }"}, {"sha": "94abc0b34bc62d781a5a1c252027be86d6166680", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/edac3ce6fba1063b01ca0e83841c762909d4df5d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edac3ce6fba1063b01ca0e83841c762909d4df5d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=edac3ce6fba1063b01ca0e83841c762909d4df5d", "patch": "@@ -1770,7 +1770,8 @@ mod test {\n     // suggests that this can only occur in the presence of local-expand, which\n     // we have no plans to support. ... unless it's needed for item hygiene....\n     #[ignore]\n-    #[test] fn issue_8062(){\n+    #[test]\n+    fn issue_8062(){\n         run_renaming_test(\n             &(\"fn main() {let hrcoo = 19; macro_rules! getx(()=>(hrcoo)); getx!();}\",\n               vec!(vec!(0)), true), 0)\n@@ -1781,7 +1782,8 @@ mod test {\n     // (just g) along the other, so the result of the whole thing should\n     // be \"let z_123 = 3; z_123\"\n     #[ignore]\n-    #[test] fn issue_6994(){\n+    #[test]\n+    fn issue_6994(){\n         run_renaming_test(\n             &(\"macro_rules! g (($x:ident) =>\n               ({macro_rules! f(($y:ident)=>({let $y=3;$x}));f!($x)}));\n@@ -1792,7 +1794,8 @@ mod test {\n \n     // match variable hygiene. Should expand into\n     // fn z() {match 8 {x_1 => {match 9 {x_2 | x_2 if x_2 == x_1 => x_2 + x_1}}}}\n-    #[test] fn issue_9384(){\n+    #[test]\n+    fn issue_9384(){\n         run_renaming_test(\n             &(\"macro_rules! bad_macro (($ex:expr) => ({match 9 {x | x if x == $ex => x + $ex}}));\n               fn z() {match 8 {x => bad_macro!(x)}}\",\n@@ -1805,7 +1808,8 @@ mod test {\n     // interpolated nodes weren't getting labeled.\n     // should expand into\n     // fn main(){let g1_1 = 13; g1_1}}\n-    #[test] fn pat_expand_issue_15221(){\n+    #[test]\n+    fn pat_expand_issue_15221(){\n         run_renaming_test(\n             &(\"macro_rules! inner ( ($e:pat ) => ($e));\n               macro_rules! outer ( ($e:pat ) => (inner!($e)));\n@@ -1821,7 +1825,8 @@ mod test {\n \n     // method arg hygiene\n     // method expands to fn get_x(&self_0, x_1: i32) {self_0 + self_2 + x_3 + x_1}\n-    #[test] fn method_arg_hygiene(){\n+    #[test]\n+    fn method_arg_hygiene(){\n         run_renaming_test(\n             &(\"macro_rules! inject_x (()=>(x));\n               macro_rules! inject_self (()=>(self));\n@@ -1834,7 +1839,8 @@ mod test {\n \n     // ooh, got another bite?\n     // expands to struct A; impl A {fn thingy(&self_1) {self_1;}}\n-    #[test] fn method_arg_hygiene_2(){\n+    #[test]\n+    fn method_arg_hygiene_2(){\n         run_renaming_test(\n             &(\"struct A;\n               macro_rules! add_method (($T:ty) =>\n@@ -1847,7 +1853,8 @@ mod test {\n \n     // item fn hygiene\n     // expands to fn q(x_1: i32){fn g(x_2: i32){x_2 + x_1};}\n-    #[test] fn issue_9383(){\n+    #[test]\n+    fn issue_9383(){\n         run_renaming_test(\n             &(\"macro_rules! bad_macro (($ex:expr) => (fn g(x: i32){ x + $ex }));\n               fn q(x: i32) { bad_macro!(x); }\",\n@@ -1857,7 +1864,8 @@ mod test {\n \n     // closure arg hygiene (ExprClosure)\n     // expands to fn f(){(|x_1 : i32| {(x_2 + x_1)})(3);}\n-    #[test] fn closure_arg_hygiene(){\n+    #[test]\n+    fn closure_arg_hygiene(){\n         run_renaming_test(\n             &(\"macro_rules! inject_x (()=>(x));\n             fn f(){(|x : i32| {(inject_x!() + x)})(3);}\",\n@@ -1867,7 +1875,8 @@ mod test {\n     }\n \n     // macro_rules in method position. Sadly, unimplemented.\n-    #[test] fn macro_in_method_posn(){\n+    #[test]\n+    fn macro_in_method_posn(){\n         expand_crate_str(\n             \"macro_rules! my_method (() => (fn thirteen(&self) -> i32 {13}));\n             struct A;\n@@ -1877,7 +1886,8 @@ mod test {\n \n     // another nested macro\n     // expands to impl Entries {fn size_hint(&self_1) {self_1;}\n-    #[test] fn item_macro_workaround(){\n+    #[test]\n+    fn item_macro_workaround(){\n         run_renaming_test(\n             &(\"macro_rules! item { ($i:item) => {$i}}\n               struct Entries;\n@@ -1961,7 +1971,8 @@ mod test {\n         }\n     }\n \n-    #[test] fn fmt_in_macro_used_inside_module_macro() {\n+    #[test]\n+    fn fmt_in_macro_used_inside_module_macro() {\n         let crate_str = \"macro_rules! fmt_wrap(($b:expr)=>($b.to_string()));\n macro_rules! foo_module (() => (mod generated { fn a() { let xx = 147; fmt_wrap!(xx);}}));\n foo_module!();"}]}