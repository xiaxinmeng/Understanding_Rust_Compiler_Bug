{"sha": "6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "node_id": "C_kwDOAAsO6NoAKDZmY2YxNzU4ZmViNjNjN2M3MGE0MDI0MWYwYWM4OTMxYTNiYTQ2YTk", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-01-21T18:28:56Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-01-22T21:13:17Z"}, "message": "simplify layout calculations in rawvec", "tree": {"sha": "f628c71222a41c7e0189fd7f26b81c6917886dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f628c71222a41c7e0189fd7f26b81c6917886dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "html_url": "https://github.com/rust-lang/rust/commit/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef633de5853083b69be14e560d33d59eb05a540", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef633de5853083b69be14e560d33d59eb05a540", "html_url": "https://github.com/rust-lang/rust/commit/cef633de5853083b69be14e560d33d59eb05a540"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "3751f2a245456042f5d8f840969ff9ff439f6c06", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "patch": "@@ -241,10 +241,15 @@ impl<T, A: Allocator> RawVec<T, A> {\n         if T::IS_ZST || self.cap == 0 {\n             None\n         } else {\n-            // We have an allocated chunk of memory, so we can bypass runtime\n-            // checks to get our current layout.\n+            // We could use Layout::array here which ensures the absence of isize and usize overflows\n+            // and could hypothetically handle differences between stride and size, but this memory\n+            // has already been allocated so we know it can't overflow and currently rust does not\n+            // support such types. So we can do better by skipping some checks and avoid an unwrap.\n+            let _: () = const { assert!(mem::size_of::<T>() % mem::align_of::<T>() == 0) };\n             unsafe {\n-                let layout = Layout::array::<T>(self.cap).unwrap_unchecked();\n+                let align = mem::align_of::<T>();\n+                let size = mem::size_of::<T>().unchecked_mul(self.cap);\n+                let layout = Layout::from_size_align_unchecked(size, align);\n                 Some((self.ptr.cast().into(), layout))\n             }\n         }\n@@ -426,11 +431,13 @@ impl<T, A: Allocator> RawVec<T, A> {\n         assert!(cap <= self.capacity(), \"Tried to shrink to a larger capacity\");\n \n         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };\n-\n+        // See current_memory() why this assert is here\n+        let _: () = const { assert!(mem::size_of::<T>() % mem::align_of::<T>() == 0) };\n         let ptr = unsafe {\n             // `Layout::array` cannot overflow here because it would have\n             // overflowed earlier when capacity was larger.\n-            let new_layout = Layout::array::<T>(cap).unwrap_unchecked();\n+            let new_size = mem::size_of::<T>().unchecked_mul(cap);\n+            let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n             self.alloc\n                 .shrink(ptr, layout, new_layout)\n                 .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?"}, {"sha": "1c6a7b02f8e77e01bc0b23d4577c8fab8fdcf1d0", "filename": "tests/ui/hygiene/panic-location.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf1758feb63c7c70a40241f0ac8931a3ba46a9/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr?ref=6fcf1758feb63c7c70a40241f0ac8931a3ba46a9", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'capacity overflow', library/alloc/src/raw_vec.rs:518:5\n+thread 'main' panicked at 'capacity overflow', library/alloc/src/raw_vec.rs:525:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}