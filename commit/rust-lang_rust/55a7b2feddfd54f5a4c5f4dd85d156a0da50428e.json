{"sha": "55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTdiMmZlZGRmZDU0ZjVhNGM1ZjRkZDg1ZDE1NmEwZGE1MDQyOGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:19:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` the `impls` table in the type context", "tree": {"sha": "6bf427af287cbf6fe0e5beb8ef3d9055b7849777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf427af287cbf6fe0e5beb8ef3d9055b7849777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "html_url": "https://github.com/rust-lang/rust/commit/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "html_url": "https://github.com/rust-lang/rust/commit/42f7f7f437ad978dd95d3ec39a0f231d6cd161da"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "00ec1fd9fe6efed52938a47aefccce20dbaddc15", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "patch": "@@ -1084,7 +1084,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n       item_impl(_, ref opt_trait, ty, ref ast_methods) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure.\n-        let imp = tcx.impls.get(&def_id);\n+        let impls = tcx.impls.borrow();\n+        let imp = impls.get().get(&def_id);\n \n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);"}, {"sha": "6b7963a226cf5deeaecd06f4c5879ffb6bc66c15", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "patch": "@@ -305,7 +305,8 @@ pub fn method_with_name(ccx: &CrateContext,\n         }\n     }\n \n-    let imp = ccx.tcx.impls.find(&impl_id)\n+    let impls = ccx.tcx.impls.borrow();\n+    let imp = impls.get().find(&impl_id)\n         .expect(\"could not find impl while translating\");\n     let meth = imp.methods.iter().find(|m| m.ident.name == name)\n         .expect(\"could not find method while translating\");"}, {"sha": "8722aba1599735508e0c87b271decd85af2a6f0e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "patch": "@@ -344,7 +344,7 @@ struct ctxt_ {\n     // Note that this contains all of the impls that we know about,\n     // including ones in other crates. It's not clear that this is the best\n     // way to do it.\n-    impls: @mut HashMap<ast::DefId, @Impl>,\n+    impls: RefCell<HashMap<ast::DefId, @Impl>>,\n \n     // Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n     // present in this set can be warned about.\n@@ -1007,7 +1007,7 @@ pub fn mk_ctxt(s: session::Session,\n         destructors: RefCell::new(HashSet::new()),\n         trait_impls: RefCell::new(HashMap::new()),\n         inherent_impls: RefCell::new(HashMap::new()),\n-        impls:  @mut HashMap::new(),\n+        impls: RefCell::new(HashMap::new()),\n         used_unsafe: @mut HashSet::new(),\n         used_mut_nodes: @mut HashSet::new(),\n         impl_vtables: @mut HashMap::new(),\n@@ -4563,7 +4563,8 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n         }\n \n         // Store the implementation info.\n-        tcx.impls.insert(implementation_def_id, implementation);\n+        let mut impls = tcx.impls.borrow_mut();\n+        impls.get().insert(implementation_def_id, implementation);\n     });\n \n     tcx.populated_external_types.insert(type_id);\n@@ -4599,7 +4600,8 @@ pub fn populate_implementations_for_trait_if_necessary(\n         }\n \n         // Store the implementation info.\n-        tcx.impls.insert(implementation_def_id, implementation);\n+        let mut impls = tcx.impls.borrow_mut();\n+        impls.get().insert(implementation_def_id, implementation);\n     });\n \n     tcx.populated_external_traits.insert(trait_id);"}, {"sha": "1fcb8d80c7bd70ae21ca5eeb7881437490a05282", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a7b2feddfd54f5a4c5f4dd85d156a0da50428e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=55a7b2feddfd54f5a4c5f4dd85d156a0da50428e", "patch": "@@ -313,7 +313,8 @@ impl CoherenceChecker {\n             }\n         }\n \n-        tcx.impls.insert(implementation.did, implementation);\n+        let mut impls = tcx.impls.borrow_mut();\n+        impls.get().insert(implementation.did, implementation);\n     }\n \n     // Creates default method IDs and performs type substitutions for an impl\n@@ -665,7 +666,8 @@ impl CoherenceChecker {\n             }\n         }\n \n-        tcx.impls.insert(implementation.did, implementation);\n+        let mut impls = tcx.impls.borrow_mut();\n+        impls.get().insert(implementation.did, implementation);\n     }\n \n     // Adds implementations and traits from external crates to the coherence"}]}