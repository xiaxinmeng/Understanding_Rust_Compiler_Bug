{"sha": "7ceab9ef142a465c554bd96c3844accd425d3270", "node_id": "C_kwDOAAsO6NoAKDdjZWFiOWVmMTQyYTQ2NWM1NTRiZDk2YzM4NDRhY2NkNDI1ZDMyNzA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-19T19:35:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T19:35:15Z"}, "message": "Rollup merge of #90018 - GuillaumeGomez:too-long-item-names, r=jsha\n\nFix rustdoc UI for very long type names\n\nFixes #89972.\n\nWhile working on it, I also discovered that when the item name is too long, it also breaks the flow of the page.\n\nTo make things right, I also renamed the `type-decl` CSS class into `item-decl` (because this PR also generates it for more than type declarations).\n\nSo here are the before/after screenshots:\n\n![Screenshot from 2021-10-18 16-58-03](https://user-images.githubusercontent.com/3050060/137757247-637fcf04-4406-49c6-8a8a-18c2074aacd9.png)\n![Screenshot from 2021-10-18 16-58-26](https://user-images.githubusercontent.com/3050060/137757252-17935e63-53b3-449f-a535-7be91ff0e257.png)\n\n![Screenshot from 2021-10-18 16-58-07](https://user-images.githubusercontent.com/3050060/137757278-8b12e348-2980-4fc4-8853-bef99d58981f.png)\n![Screenshot from 2021-10-18 16-58-28](https://user-images.githubusercontent.com/3050060/137757282-534a0e1b-3016-49ba-b3ac-e45bdb9035cb.png)\n\nr? ``@jsha``", "tree": {"sha": "99e9632990a148eb08ba1cb9fc0f0a6eae7fc3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e9632990a148eb08ba1cb9fc0f0a6eae7fc3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ceab9ef142a465c554bd96c3844accd425d3270", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbx30CRBK7hj4Ov3rIwAAJYsIAG/OULZO+ArwS1Ayq2teZX0U\nu0SoGyDN7Vhi9o+UBw/R3w/d6eMS+9OxguJN0KBwUQShwqBctBfIs3TTWG7qogXD\nzBo48SEH/8uun2Zx2CQ8lAbq9avgbg2XDI8wPr4d+jQRudvManuaCyqpcAmj/N1M\nwYR3iqNG4+5nEbQDXpxCqRfUztYVzRulbCwf3iqrQ9NCR8V+RjFOudk/ZCOLYwqU\nzcVW0u/+cNcbmdGfA13PgsriqOVhSdxQR232osuYhnrXu0F/6iI383TwWsGgR8tq\nGrSpvW4ItxgtKc6Vu81vmyiH2jcG4/bqKaT7tt0jnp6X5OgOwhJTvro8UYreaps=\n=jg/D\n-----END PGP SIGNATURE-----\n", "payload": "tree 99e9632990a148eb08ba1cb9fc0f0a6eae7fc3dd\nparent 9f2ad0a06185db6a3184780c665778bdcc33f0b2\nparent 77c29294be4b7d25893eeb283c90d139f898c054\nauthor Yuki Okushi <jtitor@2k36.org> 1634672115 +0900\ncommitter GitHub <noreply@github.com> 1634672115 +0900\n\nRollup merge of #90018 - GuillaumeGomez:too-long-item-names, r=jsha\n\nFix rustdoc UI for very long type names\n\nFixes #89972.\n\nWhile working on it, I also discovered that when the item name is too long, it also breaks the flow of the page.\n\nTo make things right, I also renamed the `type-decl` CSS class into `item-decl` (because this PR also generates it for more than type declarations).\n\nSo here are the before/after screenshots:\n\n![Screenshot from 2021-10-18 16-58-03](https://user-images.githubusercontent.com/3050060/137757247-637fcf04-4406-49c6-8a8a-18c2074aacd9.png)\n![Screenshot from 2021-10-18 16-58-26](https://user-images.githubusercontent.com/3050060/137757252-17935e63-53b3-449f-a535-7be91ff0e257.png)\n\n![Screenshot from 2021-10-18 16-58-07](https://user-images.githubusercontent.com/3050060/137757278-8b12e348-2980-4fc4-8853-bef99d58981f.png)\n![Screenshot from 2021-10-18 16-58-28](https://user-images.githubusercontent.com/3050060/137757282-534a0e1b-3016-49ba-b3ac-e45bdb9035cb.png)\n\nr? ``@jsha``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceab9ef142a465c554bd96c3844accd425d3270", "html_url": "https://github.com/rust-lang/rust/commit/7ceab9ef142a465c554bd96c3844accd425d3270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ceab9ef142a465c554bd96c3844accd425d3270/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2ad0a06185db6a3184780c665778bdcc33f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2ad0a06185db6a3184780c665778bdcc33f0b2", "html_url": "https://github.com/rust-lang/rust/commit/9f2ad0a06185db6a3184780c665778bdcc33f0b2"}, {"sha": "77c29294be4b7d25893eeb283c90d139f898c054", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c29294be4b7d25893eeb283c90d139f898c054", "html_url": "https://github.com/rust-lang/rust/commit/77c29294be4b7d25893eeb283c90d139f898c054"}], "stats": {"total": 386, "additions": 232, "deletions": 154}, "files": [{"sha": "58cd1018c316fa986dcc6c9db45be634459c146e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 153, "deletions": 122, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -482,24 +482,26 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         + name.as_str().len()\n         + generics_len;\n \n-    wrap_item(w, \"fn\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        w.reserve(header_len);\n-        write!(\n-            w,\n-            \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-             {name}{generics}{decl}{notable_traits}{where_clause}\",\n-            vis = vis,\n-            constness = constness,\n-            asyncness = asyncness,\n-            unsafety = unsafety,\n-            abi = abi,\n-            name = name,\n-            generics = f.generics.print(cx),\n-            where_clause = print_where_clause(&f.generics, cx, 0, true),\n-            decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n-            notable_traits = notable_traits_decl(&f.decl, cx),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"fn\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            w.reserve(header_len);\n+            write!(\n+                w,\n+                \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n+                vis = vis,\n+                constness = constness,\n+                asyncness = asyncness,\n+                unsafety = unsafety,\n+                abi = abi,\n+                name = name,\n+                generics = f.generics.print(cx),\n+                where_clause = print_where_clause(&f.generics, cx, 0, true),\n+                decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n+                notable_traits = notable_traits_decl(&f.decl, cx),\n+            );\n+        });\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n@@ -844,16 +846,18 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n }\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n-    wrap_item(w, \"trait-alias\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        write!(\n-            w,\n-            \"trait {}{}{} = {};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            print_where_clause(&t.generics, cx, 0, true),\n-            bounds(&t.bounds, true, cx)\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"trait-alias\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            write!(\n+                w,\n+                \"trait {}{}{} = {};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                print_where_clause(&t.generics, cx, 0, true),\n+                bounds(&t.bounds, true, cx)\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -866,16 +870,18 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n }\n \n fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n-    wrap_item(w, \"opaque\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        write!(\n-            w,\n-            \"type {}{}{where_clause} = impl {bounds};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            where_clause = print_where_clause(&t.generics, cx, 0, true),\n-            bounds = bounds(&t.bounds, false, cx),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"opaque\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            write!(\n+                w,\n+                \"type {}{}{where_clause} = impl {bounds};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                bounds = bounds(&t.bounds, false, cx),\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -894,20 +900,37 @@ fn item_typedef(\n     t: &clean::Typedef,\n     is_associated: bool,\n ) {\n-    wrap_item(w, \"typedef\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        if !is_associated {\n-            write!(w, \"{}\", it.visibility.print_with_space(it.def_id, cx));\n-        }\n-        write!(\n-            w,\n-            \"type {}{}{where_clause} = {type_};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            where_clause = print_where_clause(&t.generics, cx, 0, true),\n-            type_ = t.type_.print(cx),\n-        );\n-    });\n+    fn write_content(\n+        w: &mut Buffer,\n+        cx: &Context<'_>,\n+        it: &clean::Item,\n+        t: &clean::Typedef,\n+        is_associated: bool,\n+    ) {\n+        wrap_item(w, \"typedef\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            if !is_associated {\n+                write!(w, \"{}\", it.visibility.print_with_space(it.def_id, cx));\n+            }\n+            write!(\n+                w,\n+                \"type {}{}{where_clause} = {type_};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                type_ = t.type_.print(cx),\n+            );\n+        });\n+    }\n+\n+    // If this is an associated typedef, we don't want to wrap it into a docblock.\n+    if is_associated {\n+        write_content(w, cx, it, t, is_associated);\n+    } else {\n+        wrap_into_docblock(w, |w| {\n+            write_content(w, cx, it, t, is_associated);\n+        });\n+    }\n \n     document(w, cx, it, None, HeadingOffset::H2);\n \n@@ -1142,32 +1165,34 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n-    let name = it.name.as_ref().expect(\"proc-macros always have names\");\n-    match m.kind {\n-        MacroKind::Bang => {\n-            wrap_item(w, \"macro\", |w| {\n-                write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n-            });\n-        }\n-        MacroKind::Attr => {\n-            wrap_item(w, \"attr\", |w| {\n-                write!(w, \"#[{}]\", name);\n-            });\n-        }\n-        MacroKind::Derive => {\n-            wrap_item(w, \"derive\", |w| {\n-                write!(w, \"#[derive({})]\", name);\n-                if !m.helpers.is_empty() {\n-                    w.push_str(\"\\n{\\n\");\n-                    w.push_str(\"    // Attributes available to this derive:\\n\");\n-                    for attr in &m.helpers {\n-                        writeln!(w, \"    #[{}]\", attr);\n+    wrap_into_docblock(w, |w| {\n+        let name = it.name.as_ref().expect(\"proc-macros always have names\");\n+        match m.kind {\n+            MacroKind::Bang => {\n+                wrap_item(w, \"macro\", |w| {\n+                    write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n+                });\n+            }\n+            MacroKind::Attr => {\n+                wrap_item(w, \"attr\", |w| {\n+                    write!(w, \"#[{}]\", name);\n+                });\n+            }\n+            MacroKind::Derive => {\n+                wrap_item(w, \"derive\", |w| {\n+                    write!(w, \"#[derive({})]\", name);\n+                    if !m.helpers.is_empty() {\n+                        w.push_str(\"\\n{\\n\");\n+                        w.push_str(\"    // Attributes available to this derive:\\n\");\n+                        for attr in &m.helpers {\n+                            writeln!(w, \"    #[{}]\", attr);\n+                        }\n+                        w.push_str(\"}\\n\");\n                     }\n-                    w.push_str(\"}\\n\");\n-                }\n-            });\n+                });\n+            }\n         }\n-    }\n+    });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n@@ -1177,38 +1202,40 @@ fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n }\n \n fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n-    wrap_item(w, \"const\", |w| {\n-        render_attributes_in_code(w, it);\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"const\", |w| {\n+            render_attributes_in_code(w, it);\n \n-        write!(\n-            w,\n-            \"{vis}const {name}: {typ}\",\n-            vis = it.visibility.print_with_space(it.def_id, cx),\n-            name = it.name.as_ref().unwrap(),\n-            typ = c.type_.print(cx),\n-        );\n+            write!(\n+                w,\n+                \"{vis}const {name}: {typ}\",\n+                vis = it.visibility.print_with_space(it.def_id, cx),\n+                name = it.name.as_ref().unwrap(),\n+                typ = c.type_.print(cx),\n+            );\n \n-        let value = c.value(cx.tcx());\n-        let is_literal = c.is_literal(cx.tcx());\n-        let expr = c.expr(cx.tcx());\n-        if value.is_some() || is_literal {\n-            write!(w, \" = {expr};\", expr = Escape(&expr));\n-        } else {\n-            w.write_str(\";\");\n-        }\n+            let value = c.value(cx.tcx());\n+            let is_literal = c.is_literal(cx.tcx());\n+            let expr = c.expr(cx.tcx());\n+            if value.is_some() || is_literal {\n+                write!(w, \" = {expr};\", expr = Escape(&expr));\n+            } else {\n+                w.write_str(\";\");\n+            }\n \n-        if !is_literal {\n-            if let Some(value) = &value {\n-                let value_lowercase = value.to_lowercase();\n-                let expr_lowercase = expr.to_lowercase();\n+            if !is_literal {\n+                if let Some(value) = &value {\n+                    let value_lowercase = value.to_lowercase();\n+                    let expr_lowercase = expr.to_lowercase();\n \n-                if value_lowercase != expr_lowercase\n-                    && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n-                {\n-                    write!(w, \" // {value}\", value = Escape(value));\n+                    if value_lowercase != expr_lowercase\n+                        && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n+                    {\n+                        write!(w, \" // {value}\", value = Escape(value));\n+                    }\n                 }\n             }\n-        }\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2)\n@@ -1268,30 +1295,34 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n }\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    wrap_item(w, \"static\", |w| {\n-        render_attributes_in_code(w, it);\n-        write!(\n-            w,\n-            \"{vis}static {mutability}{name}: {typ}\",\n-            vis = it.visibility.print_with_space(it.def_id, cx),\n-            mutability = s.mutability.print_with_space(),\n-            name = it.name.as_ref().unwrap(),\n-            typ = s.type_.print(cx)\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"static\", |w| {\n+            render_attributes_in_code(w, it);\n+            write!(\n+                w,\n+                \"{vis}static {mutability}{name}: {typ}\",\n+                vis = it.visibility.print_with_space(it.def_id, cx),\n+                mutability = s.mutability.print_with_space(),\n+                name = it.name.as_ref().unwrap(),\n+                typ = s.type_.print(cx)\n+            );\n+        });\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    wrap_item(w, \"foreigntype\", |w| {\n-        w.write_str(\"extern {\\n\");\n-        render_attributes_in_code(w, it);\n-        write!(\n-            w,\n-            \"    {}type {};\\n}}\",\n-            it.visibility.print_with_space(it.def_id, cx),\n-            it.name.as_ref().unwrap(),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"foreigntype\", |w| {\n+            w.write_str(\"extern {\\n\");\n+            render_attributes_in_code(w, it);\n+            write!(\n+                w,\n+                \"    {}type {};\\n}}\",\n+                it.visibility.print_with_space(it.def_id, cx),\n+                it.name.as_ref().unwrap(),\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1374,7 +1405,7 @@ fn wrap_into_docblock<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(\"<div class=\\\"docblock type-decl\\\">\");\n+    w.write_str(\"<div class=\\\"docblock item-decl\\\">\");\n     f(w);\n     w.write_str(\"</div>\")\n }"}, {"sha": "72946b2021ff58b8069c0131870b9742afed1b21", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -254,7 +254,10 @@ code, pre, a.test-arrow, .code-header {\n pre {\n \tpadding: 14px;\n }\n-.type-decl pre {\n+.docblock.item-decl {\n+\tmargin-left: 0;\n+}\n+.item-decl pre {\n \toverflow-x: auto;\n }\n \n@@ -550,6 +553,7 @@ nav.sub {\n \tflex-grow: 1;\n \tmargin: 0px;\n \tpadding: 0px;\n+\toverflow-wrap: anywhere;\n }\n \n .in-band > code, .in-band > .code-header {"}, {"sha": "ccb1a707032bb1c0198ea9b177863cd8caa76313", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -220,7 +220,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #39AFD7;"}, {"sha": "93801af46ecc5d3e267fb72ef68defc9b061f4ad", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -181,7 +181,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #D2991D;"}, {"sha": "fba8231caac31188420629851af0a03176b03768", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -176,7 +176,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #3873AD;"}, {"sha": "239e51a91293fafcf152bc83c26f9cb8a3867126", "filename": "src/test/rustdoc-gui/basic.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic.goml?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -1,4 +1,4 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n assert: (\"#functions\")\n goto: ./struct.Foo.html\n-assert: (\"div.type-decl\")\n+assert: (\"div.item-decl\")"}, {"sha": "2de47682856796c44180460e4633ffac22e94289", "filename": "src/test/rustdoc-gui/check-code-blocks-margin.goml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -0,0 +1,6 @@\n+// This test ensures that the docblock elements have the appropriate left margin.\n+goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+// The top docblock elements shouldn't have left margin...\n+assert-css: (\"#main .docblock.item-decl\", {\"margin-left\": \"0px\"})\n+// ... but all the others should!\n+assert-css: (\"#main .docblock:not(.item-decl)\", {\"margin-left\": \"24px\"})"}, {"sha": "0459fd4b9c353644158378331ed6ab8765b0f090", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -1,6 +1,6 @@\n goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // This test checks that the font weight is correctly applied.\n-assert-css: (\"//*[@class='docblock type-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n+assert-css: (\"//*[@class='docblock item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\"//*[@class='structfield small-section-header']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\"#method\\.a_method > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedtype\\.X > .code-header\", {\"font-weight\": \"600\"})\n@@ -16,7 +16,7 @@ goto: file://|DOC_PATH|/lib2/trait.Trait.html\n \n // This is a complex selector, so here's how it works:\n //\n-// * //*[@class='docblock type-decl'] \u2014 selects element of any tag with classes docblock and type-decl\n+// * //*[@class='docblock item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n // * /pre[@class='rust trait'] \u2014 selects immediate child with tag pre and classes rust and trait\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n@@ -25,8 +25,8 @@ goto: file://|DOC_PATH|/lib2/trait.Trait.html\n //\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n-assert-count: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n-assert-css: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n+assert-count: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n+assert-css: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n \n assert-count: (\".methods .type\", 1)\n assert-css: (\".methods .type\", {\"font-weight\": \"600\"})"}, {"sha": "f2e76b546c4affb1afc342703af74856b0f8111e", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -84,3 +84,20 @@ pub mod summary_table {\n     /// | content | content |\n     pub struct Foo;\n }\n+\n+pub mod too_long {\n+pub type ReallyLongTypeNameLongLongLong = Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n+\n+pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n+\n+pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+    pub a: u32,\n+}\n+\n+impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+    /// ```\n+    /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n+    /// ```\n+        pub fn foo(&self) {}\n+    }\n+}"}, {"sha": "63ab867fb17720c3e8cf8119076732d2f597a33e", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -1,8 +1,25 @@\n-// This test ensures that the type declaration content overflow is handled inside the <pre> directly.\n+// This test ensures that the items declaration content overflow is handled inside the <pre> directly.\n goto: file://|DOC_PATH|/lib2/long_trait/trait.ALongNameBecauseItHelpsTestingTheCurrentProblem.html\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // Logically, the <body> scroll width should be the width of the window.\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n-assert-property: (\".type-decl pre\", {\"scrollWidth\": \"1324\"})\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n+\n+// We now make the same check on type declaration...\n+goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n+assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n+// We now check that the section width hasn't grown because of it.\n+assert-property: (\"#main\", {\"scrollWidth\": \"840\"})\n+// And now checking that it has scrollable content.\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n+\n+// ... and constant.\n+// On a sidenote, it also checks that the (very) long title isn't changing the docblock width.\n+goto: file://|DOC_PATH|/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\n+assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n+// We now check that the section width hasn't grown because of it.\n+assert-property: (\"#main\", {\"scrollWidth\": \"840\"})\n+// And now checking that it has scrollable content.\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})"}, {"sha": "1c7f4b7241893b8f705862a7064586db1a55c875", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -8,6 +8,6 @@ pub extern \"C\" fn f() {}\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock type-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "509457f6c9649610b4200fb4cf69886ac0a7bed8", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -5,25 +5,25 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n pub use reexports::addr_of;\n-// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n pub(crate) use reexports::addr_of_crate;\n-// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n+// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n pub(self) use reexports::addr_of_self;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n-// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooCrate;'\n+// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooCrate;'\n pub(crate) use reexports::FooCrate;\n-// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooSelf;'\n+// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooSelf;'\n pub(self) use reexports::FooSelf;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n-// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarCrate {'\n+// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarCrate {'\n pub(crate) use reexports::BarCrate;\n-// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarSelf {'\n+// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarSelf {'\n pub(self) use reexports::BarSelf;\n \n // @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n@@ -40,11 +40,11 @@ pub(crate) use reexports::TypeCrate;\n // @has 'foo/type.TypeSelf.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeSelf ='\n pub(self) use reexports::TypeSelf;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n-// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionCrate {'\n+// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionCrate {'\n pub(crate) use reexports::UnionCrate;\n-// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionSelf {'\n+// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionSelf {'\n pub(self) use reexports::UnionSelf;\n \n pub mod foo {"}, {"sha": "c308d0c2f05cf49db8f5fc2be4026ffa9a29b74b", "filename": "src/test/rustdoc/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -4,21 +4,21 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n // @!has 'foo/macro.addr_of_self.html'\n pub(self) use reexports::addr_of_self;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n // @!has 'foo/struct.FooSelf.html'\n pub(self) use reexports::FooSelf;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -39,7 +39,7 @@ pub(crate) use reexports::TypeCrate;\n // @!has 'foo/type.TypeSelf.html'\n pub(self) use reexports::TypeSelf;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;"}, {"sha": "937646987dd4f2c5532bd4e562ef67d3fbac1347", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -55,7 +55,7 @@ pub union Union {\n \n // @has 'toggle_item_contents/struct.PrivStruct.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n-// @has - '//div[@class=\"docblock type-decl\"]' 'fields omitted'\n+// @has - '//div[@class=\"docblock item-decl\"]' 'fields omitted'\n pub struct PrivStruct {\n     a: usize,\n     b: usize,"}, {"sha": "c9fccf5a77cde6d31986f42812bc12a05a8165bb", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceab9ef142a465c554bd96c3844accd425d3270/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=7ceab9ef142a465c554bd96c3844accd425d3270", "patch": "@@ -13,11 +13,14 @@ use std::fmt::Debug;\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n \n-// @has foo/traitalias.CopyAlias.html '//section[@id=\"main\"]/pre' 'trait CopyAlias = Copy;'\n+// @has foo/traitalias.CopyAlias.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait CopyAlias = Copy;'\n pub trait CopyAlias = Copy;\n-// @has foo/traitalias.Alias2.html '//section[@id=\"main\"]/pre' 'trait Alias2 = Copy + Debug;'\n+// @has foo/traitalias.Alias2.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait Alias2 = Copy + Debug;'\n pub trait Alias2 = Copy + Debug;\n-// @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+// @has foo/traitalias.Foo.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n // @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n pub fn bar<T>() where T: Alias2 {}"}]}