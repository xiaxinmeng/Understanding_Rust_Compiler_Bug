{"sha": "7f51a1b97638780a3d22979d886384ad7903cc4e", "node_id": "C_kwDOAAsO6NoAKDdmNTFhMWI5NzYzODc4MGEzZDIyOTc5ZDg4NjM4NGFkNzkwM2NjNGU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-09T22:35:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-09T22:35:03Z"}, "message": "Revert b983e42936feab29f6333e9835913afc6b4a394e.", "tree": {"sha": "b2260c5e219bed6457c4b351c0d57b0d3922185e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2260c5e219bed6457c4b351c0d57b0d3922185e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f51a1b97638780a3d22979d886384ad7903cc4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f51a1b97638780a3d22979d886384ad7903cc4e", "html_url": "https://github.com/rust-lang/rust/commit/7f51a1b97638780a3d22979d886384ad7903cc4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f51a1b97638780a3d22979d886384ad7903cc4e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f5622a53210099a19ab46ce2316494fb413d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f5622a53210099a19ab46ce2316494fb413d7c", "html_url": "https://github.com/rust-lang/rust/commit/15f5622a53210099a19ab46ce2316494fb413d7c"}], "stats": {"total": 263, "additions": 140, "deletions": 123}, "files": [{"sha": "4e2495ab14c9ada093e2ca319646730e8b3b6900", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable_Generic;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{self, Decoder, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2488,11 +2488,11 @@ rustc_index::newtype_index! {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for AttrId {\n+impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: Decoder> Decodable<D> for AttrId {\n+impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n     fn decode(_: &mut D) -> AttrId {\n         crate::attr::mk_attr_id()\n     }"}, {"sha": "919df193d60b1db0ae303eaad9ed88eed116cbb2", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -29,8 +29,7 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n@@ -204,7 +203,7 @@ const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n impl CodegenResults {\n     pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n-        let mut encoder = MemEncoder::new();\n+        let mut encoder = opaque::Encoder::new();\n         encoder.emit_raw_bytes(RLINK_MAGIC);\n         // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n         // Encoder's inner representation of `u32`.\n@@ -231,7 +230,7 @@ impl CodegenResults {\n             return Err(\".rlink file was produced with encoding version {version_array}, but the current version is {RLINK_VERSION}\".to_string());\n         }\n \n-        let mut decoder = MemDecoder::new(&data[4..], 0);\n+        let mut decoder = opaque::Decoder::new(&data[4..], 0);\n         let rustc_version = decoder.read_str();\n         let current_version = RUSTC_VERSION.unwrap();\n         if rustc_version != current_version {"}, {"sha": "a032b039f34ef234f980dddd4de6ab7c02ffaf8c", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -1,5 +1,5 @@\n use crate::stable_hasher;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{Decodable, Encodable};\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n \n@@ -142,14 +142,14 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n \n impl_stable_hash_via_hash!(Fingerprint);\n \n-impl<E: Encoder> Encodable<E> for Fingerprint {\n+impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) {\n         s.emit_raw_bytes(&self.to_le_bytes());\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for Fingerprint {\n+impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n         Fingerprint::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap())\n@@ -184,7 +184,7 @@ impl std::fmt::Display for PackedFingerprint {\n     }\n }\n \n-impl<E: Encoder> Encodable<E> for PackedFingerprint {\n+impl<E: rustc_serialize::Encoder> Encodable<E> for PackedFingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) {\n         // Copy to avoid taking reference to packed field.\n@@ -193,7 +193,7 @@ impl<E: Encoder> Encodable<E> for PackedFingerprint {\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for PackedFingerprint {\n+impl<D: rustc_serialize::Decoder> Decodable<D> for PackedFingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n         Self(Fingerprint::decode(d))"}, {"sha": "9de14950aa8d33d23ad9bd353261e5d1eff99bf6", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::OnDiskCache;\n-use rustc_serialize::opaque::MemDecoder;\n+use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable;\n use rustc_session::config::IncrementalStateAssertion;\n use rustc_session::Session;\n@@ -156,7 +156,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n         if let LoadResult::Ok { data: (work_products_data, start_pos) } = load_result {\n             // Decode the list of work_products\n-            let mut work_product_decoder = MemDecoder::new(&work_products_data[..], start_pos);\n+            let mut work_product_decoder = Decoder::new(&work_products_data[..], start_pos);\n             let work_products: Vec<SerializedWorkProduct> =\n                 Decodable::decode(&mut work_product_decoder);\n \n@@ -193,7 +193,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n             LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n             LoadResult::Error { message } => LoadResult::Error { message },\n             LoadResult::Ok { data: (bytes, start_pos) } => {\n-                let mut decoder = MemDecoder::new(&bytes, start_pos);\n+                let mut decoder = Decoder::new(&bytes, start_pos);\n                 let prev_commandline_args_hash = u64::decode(&mut decoder);\n \n                 if prev_commandline_args_hash != expected_hash {"}, {"sha": "79836d66011a27e7bd55ae96ef51be0e08826385", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::sync::join;\n use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-use rustc_serialize::Encodable;\n+use rustc_serialize::Encodable as RustcEncodable;\n use rustc_session::Session;\n use std::fs;\n "}, {"sha": "775ebb48402aabef8b08384c3dd1743baf51f132", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -26,8 +26,7 @@ use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n-use rustc_serialize::opaque::MemDecoder;\n-use rustc_serialize::{Decodable, Decoder};\n+use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n };\n@@ -155,7 +154,7 @@ struct ImportedSourceFile {\n }\n \n pub(super) struct DecodeContext<'a, 'tcx> {\n-    opaque: MemDecoder<'a>,\n+    opaque: opaque::Decoder<'a>,\n     cdata: Option<CrateMetadataRef<'a>>,\n     blob: &'a MetadataBlob,\n     sess: Option<&'tcx Session>,\n@@ -187,7 +186,7 @@ pub(super) trait Metadata<'a, 'tcx>: Copy {\n     fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {\n         let tcx = self.tcx();\n         DecodeContext {\n-            opaque: MemDecoder::new(self.blob(), pos),\n+            opaque: opaque::Decoder::new(self.blob(), pos),\n             cdata: self.cdata(),\n             blob: self.blob(),\n             sess: self.sess().or(tcx.map(|tcx| tcx.sess)),\n@@ -419,7 +418,7 @@ impl<'a, 'tcx> TyDecoder for DecodeContext<'a, 'tcx> {\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n-        let new_opaque = MemDecoder::new(self.opaque.data, pos);\n+        let new_opaque = opaque::Decoder::new(self.opaque.data, pos);\n         let old_opaque = mem::replace(&mut self.opaque, new_opaque);\n         let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);\n         let r = f(self);"}, {"sha": "e090b4c37e5328d578040f7a594c60745f5b5616", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -27,8 +27,7 @@ use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n-use rustc_serialize::opaque::MemEncoder;\n-use rustc_serialize::{Encodable, Encoder};\n+use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n@@ -44,7 +43,7 @@ use std::num::NonZeroUsize;\n use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n-    opaque: MemEncoder,\n+    opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,\n     feat: &'tcx rustc_feature::Features,\n \n@@ -2182,7 +2181,7 @@ pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n }\n \n fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n-    let mut encoder = MemEncoder::new();\n+    let mut encoder = opaque::Encoder::new();\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n     // Will be filled with the root position after encoding everything."}, {"sha": "fb2ffe1d73d96b46c514112537e2139d48cdd772", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_middle::ty::{GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n-use rustc_serialize::opaque::MemEncoder;\n+use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n use rustc_session::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::edition::Edition;\n@@ -323,7 +323,7 @@ macro_rules! define_tables {\n         }\n \n         impl TableBuilders {\n-            fn encode(&self, buf: &mut MemEncoder) -> LazyTables {\n+            fn encode(&self, buf: &mut Encoder) -> LazyTables {\n                 LazyTables {\n                     $($name: self.$name.encode(buf)),+\n                 }"}, {"sha": "8baa67a8f9fcf91cddcd8568e36b7fe44996276b", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -4,8 +4,8 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::ParameterizedOverTcx;\n-use rustc_serialize::opaque::MemEncoder;\n-use rustc_serialize::Encoder;\n+use rustc_serialize::opaque::Encoder;\n+use rustc_serialize::Encoder as _;\n use rustc_span::hygiene::MacroKind;\n use std::convert::TryInto;\n use std::marker::PhantomData;\n@@ -281,7 +281,7 @@ where\n         Some(value).write_to_bytes(&mut self.blocks[i]);\n     }\n \n-    pub(crate) fn encode<const N: usize>(&self, buf: &mut MemEncoder) -> LazyTable<I, T>\n+    pub(crate) fn encode<const N: usize>(&self, buf: &mut Encoder) -> LazyTable<I, T>\n     where\n         Option<T>: FixedSizeEncoding<ByteArray = [u8; N]>,\n     {"}, {"sha": "096bf8cbc158a1a996b58d8979c3e0aa13cb7687", "filename": "compiler/rustc_middle/src/mir/graph_cyclic_cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::graph::{\n };\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize as serialize;\n \n /// Helper type to cache the result of `graph::is_cyclic`.\n #[derive(Clone, Debug)]\n@@ -36,17 +36,17 @@ impl GraphIsCyclicCache {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for GraphIsCyclicCache {\n+impl<S: serialize::Encoder> serialize::Encodable<S> for GraphIsCyclicCache {\n     #[inline]\n     fn encode(&self, s: &mut S) {\n-        Encodable::encode(&(), s);\n+        serialize::Encodable::encode(&(), s);\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for GraphIsCyclicCache {\n+impl<D: serialize::Decoder> serialize::Decodable<D> for GraphIsCyclicCache {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n-        let () = Decodable::decode(d);\n+        let () = serialize::Decodable::decode(d);\n         Self::new()\n     }\n }"}, {"sha": "9bc0cb1138ff1ac0ee39eac77283817bc4f402fa", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -3,7 +3,7 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize as serialize;\n use smallvec::SmallVec;\n \n use crate::mir::{BasicBlock, BasicBlockData};\n@@ -54,12 +54,12 @@ impl PredecessorCache {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for PredecessorCache {\n+impl<S: serialize::Encoder> serialize::Encodable<S> for PredecessorCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: Decoder> Decodable<D> for PredecessorCache {\n+impl<D: serialize::Decoder> serialize::Decodable<D> for PredecessorCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "4872a7835e3fadea4e2cc066be0997cb74f9cfa6", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize as serialize;\n use smallvec::SmallVec;\n \n use crate::mir::{BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n@@ -54,12 +54,12 @@ impl SwitchSourceCache {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for SwitchSourceCache {\n+impl<S: serialize::Encoder> serialize::Encodable<S> for SwitchSourceCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: Decoder> Decodable<D> for SwitchSourceCache {\n+impl<D: serialize::Decoder> serialize::Decodable<D> for SwitchSourceCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "f745e55307ae23a661b1e16528e84c65b0772c61", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::bit_set::BitSet;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize as serialize;\n \n use super::*;\n \n@@ -365,12 +365,12 @@ impl PostorderCache {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for PostorderCache {\n+impl<S: serialize::Encoder> serialize::Encodable<S> for PostorderCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: Decoder> Decodable<D> for PostorderCache {\n+impl<D: serialize::Decoder> serialize::Decodable<D> for PostorderCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "0e6435fdf7fde74f8884062a49ab348a2f559692", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_query_system::dep_graph::DepContext;\n use rustc_query_system::query::{QueryCache, QueryContext, QuerySideEffects};\n use rustc_serialize::{\n-    opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder},\n+    opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n     Decodable, Decoder, Encodable, Encoder,\n };\n use rustc_session::Session;\n@@ -159,7 +159,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n \n         // Wrap in a scope so we can borrow `data`.\n         let footer: Footer = {\n-            let mut decoder = MemDecoder::new(&data, start_pos);\n+            let mut decoder = opaque::Decoder::new(&data, start_pos);\n \n             // Decode the *position* of the footer, which can be found in the\n             // last 8 bytes of the file.\n@@ -438,7 +438,7 @@ impl<'sess> OnDiskCache<'sess> {\n         let serialized_data = self.serialized_data.read();\n         let mut decoder = CacheDecoder {\n             tcx,\n-            opaque: MemDecoder::new(serialized_data.as_deref().unwrap_or(&[]), pos.to_usize()),\n+            opaque: opaque::Decoder::new(serialized_data.as_deref().unwrap_or(&[]), pos.to_usize()),\n             source_map: self.source_map,\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n@@ -459,7 +459,7 @@ impl<'sess> OnDiskCache<'sess> {\n /// will also handle things that contain `Ty` instances.\n pub struct CacheDecoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    opaque: MemDecoder<'a>,\n+    opaque: opaque::Decoder<'a>,\n     source_map: &'a SourceMap,\n     file_index_to_file: &'a Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n     file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n@@ -511,7 +511,7 @@ trait DecoderWithPosition: Decoder {\n     fn position(&self) -> usize;\n }\n \n-impl<'a> DecoderWithPosition for MemDecoder<'a> {\n+impl<'a> DecoderWithPosition for opaque::Decoder<'a> {\n     fn position(&self) -> usize {\n         self.position()\n     }\n@@ -587,7 +587,7 @@ impl<'a, 'tcx> TyDecoder for CacheDecoder<'a, 'tcx> {\n     {\n         debug_assert!(pos < self.opaque.data.len());\n \n-        let new_opaque = MemDecoder::new(self.opaque.data, pos);\n+        let new_opaque = opaque::Decoder::new(self.opaque.data, pos);\n         let old_opaque = mem::replace(&mut self.opaque, new_opaque);\n         let r = f(self);\n         self.opaque = old_opaque;"}, {"sha": "2c44054e4c847b59a5a03074bb23cce61d56d5ff", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_serialize::opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder};\n+use rustc_serialize::opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize};\n use rustc_serialize::{Decodable, Decoder, Encodable};\n use smallvec::SmallVec;\n use std::convert::TryInto;\n@@ -96,11 +96,11 @@ impl<K: DepKind> SerializedDepGraph<K> {\n     }\n }\n \n-impl<'a, K: DepKind + Decodable<MemDecoder<'a>>> Decodable<MemDecoder<'a>>\n+impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<'a>>\n     for SerializedDepGraph<K>\n {\n     #[instrument(level = \"debug\", skip(d))]\n-    fn decode(d: &mut MemDecoder<'a>) -> SerializedDepGraph<K> {\n+    fn decode(d: &mut opaque::Decoder<'a>) -> SerializedDepGraph<K> {\n         let start_position = d.position();\n \n         // The last 16 bytes are the node count and edge count."}, {"sha": "88e523972970844acd440c4ddd5bd8aac414e14b", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -1,5 +1,5 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n+use crate::serialize::{self, Decoder as _, Encoder as _};\n use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n@@ -11,13 +11,13 @@ use std::ptr;\n // Encoder\n // -----------------------------------------------------------------------------\n \n-pub struct MemEncoder {\n+pub struct Encoder {\n     pub data: Vec<u8>,\n }\n \n-impl MemEncoder {\n-    pub fn new() -> MemEncoder {\n-        MemEncoder { data: vec![] }\n+impl Encoder {\n+    pub fn new() -> Encoder {\n+        Encoder { data: vec![] }\n     }\n \n     #[inline]\n@@ -57,7 +57,7 @@ macro_rules! write_leb128 {\n /// [utf8]: https://en.wikipedia.org/w/index.php?title=UTF-8&oldid=1058865525#Codepage_layout\n const STR_SENTINEL: u8 = 0xC1;\n \n-impl Encoder for MemEncoder {\n+impl serialize::Encoder for Encoder {\n     #[inline]\n     fn emit_usize(&mut self, v: usize) {\n         write_leb128!(self, v, usize, write_usize_leb128)\n@@ -158,7 +158,7 @@ pub type FileEncodeResult = Result<usize, io::Error>;\n // `FileEncoder` encodes data to file via fixed-size buffer.\n //\n // When encoding large amounts of data to a file, using `FileEncoder` may be\n-// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n+// preferred over using `Encoder` to encode to a `Vec`, and then writing the\n // `Vec` to file, as the latter uses as much memory as there is encoded data,\n // while the former uses the fixed amount of memory allocated to the buffer.\n // `FileEncoder` also has the advantage of not needing to reallocate as data\n@@ -429,7 +429,7 @@ macro_rules! file_encoder_write_leb128 {\n     }};\n }\n \n-impl Encoder for FileEncoder {\n+impl serialize::Encoder for FileEncoder {\n     #[inline]\n     fn emit_usize(&mut self, v: usize) {\n         file_encoder_write_leb128!(self, v, usize, write_usize_leb128)\n@@ -529,15 +529,15 @@ impl Encoder for FileEncoder {\n // Decoder\n // -----------------------------------------------------------------------------\n \n-pub struct MemDecoder<'a> {\n+pub struct Decoder<'a> {\n     pub data: &'a [u8],\n     position: usize,\n }\n \n-impl<'a> MemDecoder<'a> {\n+impl<'a> Decoder<'a> {\n     #[inline]\n-    pub fn new(data: &'a [u8], position: usize) -> MemDecoder<'a> {\n-        MemDecoder { data, position }\n+    pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> {\n+        Decoder { data, position }\n     }\n \n     #[inline]\n@@ -560,7 +560,7 @@ macro_rules! read_leb128 {\n     ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};\n }\n \n-impl<'a> Decoder for MemDecoder<'a> {\n+impl<'a> serialize::Decoder for Decoder<'a> {\n     #[inline]\n     fn read_u128(&mut self) -> u128 {\n         read_leb128!(self, read_u128_leb128)\n@@ -682,25 +682,25 @@ impl<'a> Decoder for MemDecoder<'a> {\n \n // Specialize encoding byte slices. This specialization also applies to encoding `Vec<u8>`s, etc.,\n // since the default implementations call `encode` on their slices internally.\n-impl Encodable<MemEncoder> for [u8] {\n-    fn encode(&self, e: &mut MemEncoder) {\n-        Encoder::emit_usize(e, self.len());\n+impl serialize::Encodable<Encoder> for [u8] {\n+    fn encode(&self, e: &mut Encoder) {\n+        serialize::Encoder::emit_usize(e, self.len());\n         e.emit_raw_bytes(self);\n     }\n }\n \n-impl Encodable<FileEncoder> for [u8] {\n+impl serialize::Encodable<FileEncoder> for [u8] {\n     fn encode(&self, e: &mut FileEncoder) {\n-        Encoder::emit_usize(e, self.len());\n+        serialize::Encoder::emit_usize(e, self.len());\n         e.emit_raw_bytes(self);\n     }\n }\n \n // Specialize decoding `Vec<u8>`. This specialization also applies to decoding `Box<[u8]>`s, etc.,\n // since the default implementations call `decode` to produce a `Vec<u8>` internally.\n-impl<'a> Decodable<MemDecoder<'a>> for Vec<u8> {\n-    fn decode(d: &mut MemDecoder<'a>) -> Self {\n-        let len = Decoder::read_usize(d);\n+impl<'a> serialize::Decodable<Decoder<'a>> for Vec<u8> {\n+    fn decode(d: &mut Decoder<'a>) -> Self {\n+        let len = serialize::Decoder::read_usize(d);\n         d.read_raw_bytes(len).to_owned()\n     }\n }\n@@ -712,17 +712,17 @@ impl IntEncodedWithFixedSize {\n     pub const ENCODED_SIZE: usize = 8;\n }\n \n-impl Encodable<MemEncoder> for IntEncodedWithFixedSize {\n+impl serialize::Encodable<Encoder> for IntEncodedWithFixedSize {\n     #[inline]\n-    fn encode(&self, e: &mut MemEncoder) {\n+    fn encode(&self, e: &mut Encoder) {\n         let _start_pos = e.position();\n         e.emit_raw_bytes(&self.0.to_le_bytes());\n         let _end_pos = e.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n     }\n }\n \n-impl Encodable<FileEncoder> for IntEncodedWithFixedSize {\n+impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     #[inline]\n     fn encode(&self, e: &mut FileEncoder) {\n         let _start_pos = e.position();\n@@ -732,9 +732,9 @@ impl Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     }\n }\n \n-impl<'a> Decodable<MemDecoder<'a>> for IntEncodedWithFixedSize {\n+impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     #[inline]\n-    fn decode(decoder: &mut MemDecoder<'a>) -> IntEncodedWithFixedSize {\n+    fn decode(decoder: &mut Decoder<'a>) -> IntEncodedWithFixedSize {\n         let _start_pos = decoder.position();\n         let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n         let value = u64::from_le_bytes(bytes.try_into().unwrap());"}, {"sha": "5ed6fc769cc294e4ce85ed831eaa72f22cfc4470", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -1,7 +1,7 @@\n #![allow(rustc::internal)]\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque::{Decoder, Encoder};\n use rustc_serialize::{Decodable, Encodable};\n use std::fmt::Debug;\n \n@@ -28,18 +28,16 @@ struct Struct {\n     q: Option<u32>,\n }\n \n-fn check_round_trip<\n-    T: Encodable<MemEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n->(\n+fn check_round_trip<T: Encodable<Encoder> + for<'a> Decodable<Decoder<'a>> + PartialEq + Debug>(\n     values: Vec<T>,\n ) {\n-    let mut encoder = MemEncoder::new();\n+    let mut encoder = Encoder::new();\n     for value in &values {\n         Encodable::encode(value, &mut encoder);\n     }\n \n     let data = encoder.finish();\n-    let mut decoder = MemDecoder::new(&data[..], 0);\n+    let mut decoder = Decoder::new(&data[..], 0);\n \n     for value in values {\n         let decoded = Decodable::decode(&mut decoder);"}, {"sha": "7f227217e3c2f88fb425ac8bb43f0b178cbbd11d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -1911,13 +1911,13 @@ impl_pos! {\n     pub struct CharPos(pub usize);\n }\n \n-impl<S: Encoder> Encodable<S> for BytePos {\n+impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {\n     fn encode(&self, s: &mut S) {\n         s.emit_u32(self.0);\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for BytePos {\n+impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {\n     fn decode(d: &mut D) -> BytePos {\n         BytePos(d.read_u32())\n     }"}, {"sha": "a6a0d02c8ba992caf9acb36ce7cc6c19d0dbba63", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -14,7 +14,7 @@ use crate::UintTy;\n use self::TyKind::*;\n \n use rustc_data_structures::stable_hasher::HashStable;\n-use rustc_serialize::{Decodable, Decoder, Encodable};\n+use rustc_serialize::{Decodable, Encodable};\n \n /// Defines the kinds of types used by the type system.\n ///\n@@ -833,34 +833,56 @@ where\n     I::AllocId: Decodable<D>,\n {\n     fn decode(d: &mut D) -> Self {\n-        match Decoder::read_usize(d) {\n+        match rustc_serialize::Decoder::read_usize(d) {\n             0 => Bool,\n             1 => Char,\n-            2 => Int(Decodable::decode(d)),\n-            3 => Uint(Decodable::decode(d)),\n-            4 => Float(Decodable::decode(d)),\n-            5 => Adt(Decodable::decode(d), Decodable::decode(d)),\n-            6 => Foreign(Decodable::decode(d)),\n+            2 => Int(rustc_serialize::Decodable::decode(d)),\n+            3 => Uint(rustc_serialize::Decodable::decode(d)),\n+            4 => Float(rustc_serialize::Decodable::decode(d)),\n+            5 => Adt(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d)),\n+            6 => Foreign(rustc_serialize::Decodable::decode(d)),\n             7 => Str,\n-            8 => Array(Decodable::decode(d), Decodable::decode(d)),\n-            9 => Slice(Decodable::decode(d)),\n-            10 => RawPtr(Decodable::decode(d)),\n-            11 => Ref(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n-            12 => FnDef(Decodable::decode(d), Decodable::decode(d)),\n-            13 => FnPtr(Decodable::decode(d)),\n-            14 => Dynamic(Decodable::decode(d), Decodable::decode(d)),\n-            15 => Closure(Decodable::decode(d), Decodable::decode(d)),\n-            16 => Generator(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n-            17 => GeneratorWitness(Decodable::decode(d)),\n+            8 => {\n+                Array(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n+            }\n+            9 => Slice(rustc_serialize::Decodable::decode(d)),\n+            10 => RawPtr(rustc_serialize::Decodable::decode(d)),\n+            11 => Ref(\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+            ),\n+            12 => {\n+                FnDef(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n+            }\n+            13 => FnPtr(rustc_serialize::Decodable::decode(d)),\n+            14 => Dynamic(\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+            ),\n+            15 => Closure(\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+            ),\n+            16 => Generator(\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+                rustc_serialize::Decodable::decode(d),\n+            ),\n+            17 => GeneratorWitness(rustc_serialize::Decodable::decode(d)),\n             18 => Never,\n-            19 => Tuple(Decodable::decode(d)),\n-            20 => Projection(Decodable::decode(d)),\n-            21 => Opaque(Decodable::decode(d), Decodable::decode(d)),\n-            22 => Param(Decodable::decode(d)),\n-            23 => Bound(Decodable::decode(d), Decodable::decode(d)),\n-            24 => Placeholder(Decodable::decode(d)),\n-            25 => Infer(Decodable::decode(d)),\n-            26 => Error(Decodable::decode(d)),\n+            19 => Tuple(rustc_serialize::Decodable::decode(d)),\n+            20 => Projection(rustc_serialize::Decodable::decode(d)),\n+            21 => {\n+                Opaque(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n+            }\n+            22 => Param(rustc_serialize::Decodable::decode(d)),\n+            23 => {\n+                Bound(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n+            }\n+            24 => Placeholder(rustc_serialize::Decodable::decode(d)),\n+            25 => Infer(rustc_serialize::Decodable::decode(d)),\n+            26 => Error(rustc_serialize::Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!("}, {"sha": "81ce56b3342ed2885873bf68696b1f036ee6b079", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::{\n-    opaque::{FileEncoder, MemDecoder},\n+    opaque::{Decoder, FileEncoder},\n     Decodable, Encodable,\n };\n use rustc_session::getopts;\n@@ -336,7 +336,7 @@ pub(crate) fn load_call_locations(\n         let mut all_calls: AllCallLocations = FxHashMap::default();\n         for path in with_examples {\n             let bytes = fs::read(&path).map_err(|e| format!(\"{} (for path {})\", e, path))?;\n-            let mut decoder = MemDecoder::new(&bytes, 0);\n+            let mut decoder = Decoder::new(&bytes, 0);\n             let calls = AllCallLocations::decode(&mut decoder);\n \n             for (function, fn_calls) in calls.into_iter() {"}, {"sha": "382fae4a08eb9635938856ca82a222b929335293", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -7,7 +7,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque;\n use rustc_serialize::{Decodable, Encodable, Encoder};\n \n #[derive(Encodable, Decodable)]\n@@ -18,11 +18,11 @@ struct A {\n fn main() {\n     let obj = A { foo: Box::new([true, false]) };\n \n-    let mut encoder = MemEncoder::new();\n+    let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish();\n \n-    let mut decoder = MemDecoder::new(&data, 0);\n+    let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = A::decode(&mut decoder);\n \n     assert_eq!(obj.foo, obj2.foo);"}, {"sha": "6097340a6e0c927784451578f549d1c7a79aec1c", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -9,7 +9,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque;\n use rustc_serialize::{Decodable, Encodable, Encoder};\n use std::cell::{Cell, RefCell};\n \n@@ -27,11 +27,11 @@ struct B {\n fn main() {\n     let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n \n-    let mut encoder = MemEncoder::new();\n+    let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish();\n \n-    let mut decoder = MemDecoder::new(&data, 0);\n+    let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = B::decode(&mut decoder);\n \n     assert_eq!(obj.foo.get(), obj2.foo.get());"}, {"sha": "1a19ee0da595fc2b9e7a8b21bb143eb7d9dbe4c1", "filename": "src/test/ui-fulldeps/issue-14021.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f51a1b97638780a3d22979d886384ad7903cc4e/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs?ref=7f51a1b97638780a3d22979d886384ad7903cc4e", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque;\n use rustc_serialize::{Decodable, Encodable, Encoder};\n \n #[derive(Encodable, Decodable, PartialEq, Debug)]\n@@ -17,11 +17,11 @@ struct UnitLikeStruct;\n pub fn main() {\n     let obj = UnitLikeStruct;\n \n-    let mut encoder = MemEncoder::new();\n+    let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish();\n \n-    let mut decoder = MemDecoder::new(&data, 0);\n+    let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = UnitLikeStruct::decode(&mut decoder);\n \n     assert_eq!(obj, obj2);"}]}