{"sha": "52fbd3e5690bfe008b343bdc35c78390239b64cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZmJkM2U1NjkwYmZlMDA4YjM0M2JkYzM1Yzc4MzkwMjM5YjY0Y2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-12T03:38:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-22T17:36:45Z"}, "message": "Increase verbosity when suggesting subtle code changes", "tree": {"sha": "78cd09ee3f9b39bddc4bcc2cb3ea00f3fbd7ff2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78cd09ee3f9b39bddc4bcc2cb3ea00f3fbd7ff2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52fbd3e5690bfe008b343bdc35c78390239b64cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52fbd3e5690bfe008b343bdc35c78390239b64cc", "html_url": "https://github.com/rust-lang/rust/commit/52fbd3e5690bfe008b343bdc35c78390239b64cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52fbd3e5690bfe008b343bdc35c78390239b64cc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae85f43f4eeaf177cd12f47958b7ff62786b612", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae85f43f4eeaf177cd12f47958b7ff62786b612", "html_url": "https://github.com/rust-lang/rust/commit/5ae85f43f4eeaf177cd12f47958b7ff62786b612"}], "stats": {"total": 599, "additions": 360, "deletions": 239}, "files": [{"sha": "ea8b4f41888dc2ec267084a777ee47172223bf19", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -3,7 +3,7 @@ use crate::infer::InferCtxt;\n use rustc::hir::map::Map;\n use rustc::ty::print::Print;\n use rustc::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -462,24 +462,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         e: &Expr<'_>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n-        if let (Ok(snippet), Some(tables), None) = (\n-            self.tcx.sess.source_map().span_to_snippet(segment.ident.span),\n-            self.in_progress_tables,\n-            &segment.args,\n-        ) {\n+        if let (Some(tables), None) = (self.in_progress_tables, &segment.args) {\n             let borrow = tables.borrow();\n             if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n-                    err.span_suggestion(\n-                        segment.ident.span,\n+                    err.span_suggestion_verbose(\n+                        segment.ident.span.shrink_to_hi(),\n                         &format!(\n                             \"consider specifying the type argument{} in the method call\",\n-                            if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                            pluralize!(generics.params.len()),\n                         ),\n                         format!(\n-                            \"{}::<{}>\",\n-                            snippet,\n+                            \"::<{}>\",\n                             generics\n                                 .params\n                                 .iter()"}, {"sha": "d001ced3e7ea136043dab921d2867bd83f26ed52", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -815,11 +815,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n-                err.span_suggestion(\n+                err.span_suggestion_verbose(\n                     pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n-                        if expected_args.len() < 2 { \"\" } else { \"s\" }\n+                        pluralize!(expected_args.len())\n                     ),\n                     format!(\"|{}|\", underscores),\n                     Applicability::MachineApplicable,\n@@ -833,7 +833,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .map(|(name, _)| name.to_owned())\n                         .collect::<Vec<String>>()\n                         .join(\", \");\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to take multiple arguments instead of a single tuple\",\n                         format!(\"|{}|\", sugg),\n@@ -870,7 +870,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             String::new()\n                         },\n                     );\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to accept a tuple instead of individual arguments\",\n                         sugg,\n@@ -1420,15 +1420,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot resolve `_: Tt`\n \n-                        err.span_suggestion(\n-                            span,\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_hi(),\n                             &format!(\n                                 \"consider specifying the type argument{} in the function call\",\n-                                if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                                pluralize!(generics.params.len()),\n                             ),\n                             format!(\n-                                \"{}::<{}>\",\n-                                snippet,\n+                                \"::<{}>\",\n                                 generics\n                                     .params\n                                     .iter()\n@@ -1590,7 +1589,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             [] => (span.shrink_to_hi(), \":\"),\n                             [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n                         };\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             span,\n                             \"consider relaxing the implicit `Sized` restriction\",\n                             format!(\"{} ?Sized\", separator),"}, {"sha": "fdb5def193031a9f18115a153af637b561c4f557", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n         let hir = self.tcx.hir();\n         // Get the name of the callable and the arguments to be used in the suggestion.\n-        let snippet = match hir.get_if_local(def_id) {\n+        let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(_, decl, _, span, ..),\n                 ..\n@@ -401,7 +401,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     None => return,\n                 };\n                 let args = decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                format!(\"{}({})\", name, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", name, sugg), sugg)\n             }\n             Some(hir::Node::Item(hir::Item {\n                 ident,\n@@ -422,7 +423,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\", \");\n-                format!(\"{}({})\", ident, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", ident, sugg), sugg)\n             }\n             _ => return,\n         };\n@@ -431,10 +433,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // an argument, the `obligation.cause.span` points at the expression\n             // of the argument, so we can provide a suggestion. This is signaled\n             // by `points_at_arg`. Otherwise, we give a more general note.\n-            err.span_suggestion(\n-                obligation.cause.span,\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_hi(),\n                 &msg,\n-                snippet,\n+                sugg,\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n@@ -619,7 +621,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .source_map()\n                         .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n                     if points_at_arg && mutability == hir::Mutability::Not && refs_number > 0 {\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             sp,\n                             \"consider changing this borrow's mutability\",\n                             \"&mut \".to_string(),"}, {"sha": "abe284b42c6b9d7aa0d33432c2298a76b888ed23", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n     ) {\n-        let has_params = self\n+        let params = self\n             .probe_for_name(\n                 method_name.span,\n                 probe::Mode::MethodCall,\n@@ -147,26 +147,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 call_expr.hir_id,\n                 ProbeScope::TraitsInScope,\n             )\n-            .and_then(|pick| {\n+            .map(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n-                Ok(sig.inputs().skip_binder().len() > 1)\n-            });\n+                sig.inputs().skip_binder().len().saturating_sub(1)\n+            })\n+            .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = method_name.span.with_hi(call_expr.span.hi());\n-        let snippet = self\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(sugg_span)\n-            .unwrap_or_else(|_| method_name.to_string());\n-        let (suggestion, applicability) = if has_params.unwrap_or_default() {\n-            (format!(\"{}(...)\", snippet), Applicability::HasPlaceholders)\n-        } else {\n-            (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n-        };\n+        let sugg_span = call_expr.span.shrink_to_hi();\n+        let (suggestion, applicability) = (\n+            format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n+            if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },\n+        );\n \n-        err.span_suggestion(sugg_span, msg, suggestion, applicability);\n+        err.span_suggestion_verbose(sugg_span, msg, suggestion, applicability);\n     }\n \n     /// Performs method lookup. If lookup is successful, it will return the callee"}, {"sha": "a73f2d9f0c766cc75d109731f7721c4b2f458f08", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -4941,15 +4941,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 _ => {}\n             }\n-            if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n-                err.span_suggestion(\n-                    expr.span,\n-                    &format!(\"use parentheses to {}\", msg),\n-                    format!(\"{}({})\", code, sugg_call),\n-                    applicability,\n-                );\n-                return true;\n-            }\n+            err.span_suggestion_verbose(\n+                expr.span.shrink_to_hi(),\n+                &format!(\"use parentheses to {}\", msg),\n+                format!(\"({})\", sugg_call),\n+                applicability,\n+            );\n+            return true;\n         }\n         false\n     }"}, {"sha": "0d38fa98bd7f8e32c6ddb0de5692b54fbbb566ae", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -753,17 +753,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                let (msg, sugg) = match parent_pat {\n-                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => (\n-                        \"bind the struct field to a different name instead\",\n-                        format!(\"{}: other_{}\", ident, ident.as_str().to_lowercase()),\n-                    ),\n-                    _ => (\n-                        \"introduce a new binding instead\",\n-                        format!(\"other_{}\", ident.as_str().to_lowercase()),\n-                    ),\n+                match parent_pat {\n+                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => {\n+                        e.span_suggestion_verbose(\n+                            ident.span.shrink_to_hi(),\n+                            \"bind the struct field to a different name instead\",\n+                            format!(\": other_{}\", ident.as_str().to_lowercase()),\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                    _ => {\n+                        let msg = \"introduce a new binding instead\";\n+                        let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());\n+                        e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n+                    }\n                 };\n-                e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n         e.emit();"}, {"sha": "039d736673c08385c88df2894b65f8a217641fd7", "filename": "src/test/ui/error-codes/E0615.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `method` on type `Foo`\n   --> $DIR/E0615.rs:11:7\n    |\n LL |     f.method;\n-   |       ^^^^^^ help: use parentheses to call the method: `method()`\n+   |       ^^^^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     f.method();\n+   |             ^^\n \n error: aborting due to previous error\n "}, {"sha": "871757ec7b0c698e22aea5bc002179dc3c2cdaa2", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |                 |\n-   |                 required by this bound in `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn assert_sized<T: ?Sized>() { }\n+   |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5"}, {"sha": "e9616f8317f916ca25c98f1bb70d2560ae772d23", "filename": "src/test/ui/implicit-method-bind.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `abs` on type `i32`\n   --> $DIR/implicit-method-bind.rs:2:20\n    |\n LL |     let _f = 10i32.abs;\n-   |                    ^^^ help: use parentheses to call the method: `abs()`\n+   |                    ^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _f = 10i32.abs();\n+   |                       ^^\n \n error: aborting due to previous error\n "}, {"sha": "264faa0da333b71121cff022105f60d316e1693e", "filename": "src/test/ui/issues/issue-13853-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `get` on type `std::boxed::Box<(\n   --> $DIR/issue-13853-2.rs:5:43\n    |\n LL | fn foo(res : Box<dyn ResponseHook>) { res.get }\n-   |                                           ^^^ help: use parentheses to call the method: `get()`\n+   |                                           ^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL | fn foo(res : Box<dyn ResponseHook>) { res.get() }\n+   |                                              ^^\n \n error: aborting due to previous error\n "}, {"sha": "9073bfed8948ee50cccd2c310e95a13c9052fc9a", "filename": "src/test/ui/issues/issue-26472.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,9 +2,12 @@ error[E0616]: field `len` of struct `sub::S` is private\n   --> $DIR/issue-26472.rs:11:13\n    |\n LL |     let v = s.len;\n-   |             ^^---\n-   |               |\n-   |               help: a method `len` also exists, call it with parentheses: `len()`\n+   |             ^^^^^\n+   |\n+help: a method `len` also exists, call it with parentheses\n+   |\n+LL |     let v = s.len();\n+   |                  ^^\n \n error[E0616]: field `len` of struct `sub::S` is private\n   --> $DIR/issue-26472.rs:12:5"}, {"sha": "b6045c993a9585f14d5ecb30cbf47e6ca88df249", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -5,14 +5,16 @@ LL | struct Foo(u32);\n    | ---------------- fn(u32) -> Foo {Foo} defined here\n LL | \n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^\n-   |              |     |\n-   |              |     expected struct `Foo`, found fn item\n-   |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n+   |              ---   ^^^ expected struct `Foo`, found fn item\n+   |              |\n    |              expected `Foo` because of return type\n    |\n    = note: expected struct `Foo`\n              found fn item `fn(u32) -> Foo {Foo}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL | fn test() -> Foo { Foo(_) }\n+   |                       ^^^\n \n error: aborting due to previous error\n "}, {"sha": "23f8970e9e79080714c9c1b000796f068b9c5a6e", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,13 +2,23 @@ error[E0615]: attempted to take value of method `get_x` on type `Point`\n   --> $DIR/method-missing-call.rs:22:26\n    |\n LL |                         .get_x;\n-   |                          ^^^^^ help: use parentheses to call the method: `get_x()`\n+   |                          ^^^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |                         .get_x();\n+   |                               ^^\n \n error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n   --> $DIR/method-missing-call.rs:29:16\n    |\n LL |               .filter_map;\n-   |                ^^^^^^^^^^ help: use parentheses to call the method: `filter_map(...)`\n+   |                ^^^^^^^^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |               .filter_map(_);\n+   |                          ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "262344fba59999be0d93aada8a8dbb72b127d16b", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,12 +2,13 @@ error[E0284]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n-   |                     ^^^^^^^\n-   |                     |\n-   |                     cannot infer type\n-   |                     help: consider specifying the type argument in the method call: `collect::<B>`\n+   |                     ^^^^^^^ cannot infer type\n    |\n    = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     l.iter().map(f).collect::<B>()?\n+   |                            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c4eee0f46611935c5a1793d44e4aa517a2e814fb", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,14 +2,16 @@ error[E0308]: cannot coerce intrinsics to function pointers\n   --> $DIR/reify-intrinsic.rs:6:64\n    |\n LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n-   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^\n-   |            |                                                   |\n-   |            |                                                   cannot coerce intrinsics to function pointers\n-   |            |                                                   help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n+   |            |\n    |            expected due to this\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute(...);\n+   |                                                                                   ^^^^^\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "bf24cfc4d73776016fcab5cbf27dd54b223715b5", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -304,14 +304,16 @@ LL |             Fn(u8),\n    |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^\n-   |                |   |\n-   |                |   expected enum `m::n::Z`, found fn item\n-   |                |   help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n+   |                -   ^^^^^ expected enum `m::n::Z`, found fn item\n+   |                |\n    |                expected due to this\n    |\n    = note: expected enum `m::n::Z`\n            found fn item `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |         let _: Z = Z::Fn(_);\n+   |                         ^^^\n \n error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n@@ -336,14 +338,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n+   |            -   ^^^^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = m::E::Fn(_);\n+   |                        ^^^\n \n error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n@@ -368,14 +372,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n+   |            -   ^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::Fn(_);\n+   |                     ^^^\n \n error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16"}, {"sha": "3e6d350b36c330f0ef4e3741b012c7d9e8adf70e", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,12 +2,13 @@ error[E0282]: type annotations needed\n   --> $DIR/type-annotations-needed-expr.rs:2:39\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n-   |                                       ^^^\n-   |                                       |\n-   |                                       cannot infer type for type parameter `S` declared on the associated function `sum`\n-   |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n+   |                                       ^^^ cannot infer type for type parameter `S` declared on the associated function `sum`\n    |\n    = note: type must be known at this point\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     let _ = (vec![1,2,3]).into_iter().sum::<S>() as f64;\n+   |                                          ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d0afb2ae7af74fecc4f293bea9f58fffe7c831bc", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |        |\n-   |        required by this bound in `bot`\n+   |    --- - required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn bot<T: ?Sized>() -> T { loop {} }\n+   |         ^^^^^^^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:5"}, {"sha": "3ad2a1414f96986eb56ba990e3d29c34a60bf628", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<'static>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<'static>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "e23f06a3ef590036aeaafa5e63caa5a628eabdcc", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<ReStatic>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<ReStatic>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "638d504d7feab73a82344ababf67a9fcf7316f5c", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n    |    ---         ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]: std::future::Future` is not satisfied\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |         ^^^^^^^^^^^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n-   |         help: use parentheses to call the closure: `async_closure()`\n+   |         ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(async_closure());\n+   |                      ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ab336b14d29480915dbf8dc644e5404b2fd83f0a", "filename": "src/test/ui/suggestions/const-in-struct-pat.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -9,7 +9,11 @@ LL |     let Thing { foo } = t;\n    |                 |\n    |                 expected struct `std::string::String`, found struct `foo`\n    |                 `foo` is interpreted as a unit struct, not a new binding\n-   |                 help: bind the struct field to a different name instead: `foo: other_foo`\n+   |\n+help: bind the struct field to a different name instead\n+   |\n+LL |     let Thing { foo: other_foo } = t;\n+   |                    ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ed4a0b8487dff01ef0fb8e56fa0b2967d5d83b12", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl T<O=()>) {}\n    |    ---         ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl T<O=()>) {}\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |         ^^^^^^^\n-   |         |\n-   |         the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n-   |         help: use parentheses to call the closure: `closure()`\n+   |         ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(closure());\n+   |                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69aef0853cec3ceb305ea07edcabd9f0ccc5520c", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 96, "deletions": 58, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -19,14 +19,16 @@ LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n ...\n LL |     let _: usize = foo;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `foo(a, b)`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {foo}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = foo(a, b);\n+   |                       ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n@@ -35,14 +37,16 @@ LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n ...\n LL |     let _: S = S;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `S`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |            -   ^ expected struct `S`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `S`\n              found fn item `fn(usize, usize) -> S {S}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: S = S(_, _);\n+   |                 ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n@@ -51,14 +55,16 @@ LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n ...\n LL |     let _: usize = bar;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `bar()`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn() -> usize {bar}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = bar();\n+   |                       ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n@@ -67,14 +73,16 @@ LL | struct V();\n    | ----------- fn() -> V {V} defined here\n ...\n LL |     let _: V = V;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `V`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `V()`\n+   |            -   ^ expected struct `V`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `V`\n              found fn item `fn() -> V {V}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: V = V();\n+   |                 ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n@@ -83,14 +91,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n ...\n LL |     let _: usize = T::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n@@ -99,14 +109,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n ...\n LL |     let _: usize = T::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n@@ -115,14 +127,16 @@ LL |     A(usize),\n    |     -------- fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n-   |            -   ^^^^\n-   |            |   |\n-   |            |   expected enum `E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |            -   ^^^^ expected enum `E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `E`\n            found fn item `fn(usize) -> E {E::A}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::A(_);\n+   |                    ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n@@ -131,14 +145,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n ...\n LL |     let _: usize = X::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n@@ -147,14 +163,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n ...\n LL |     let _: usize = X::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n@@ -163,14 +181,16 @@ LL |     fn bax(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n ...\n LL |     let _: usize = X::bax;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bax(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bax(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n@@ -179,14 +199,16 @@ LL |     fn bach(x: usize) -> usize;\n    |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n ...\n LL |     let _: usize = X::bach;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bach(x)`\n+   |            -----   ^^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bach(x);\n+   |                           ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n@@ -195,14 +217,16 @@ LL |     fn ban(&self) -> usize { 42 }\n    |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n ...\n LL |     let _: usize = X::ban;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::ban(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::ban(_);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n@@ -211,41 +235,55 @@ LL |     fn bal(&self) -> usize;\n    |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n ...\n LL |     let _: usize = X::bal;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bal(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bal(_);\n+   |                          ^^^\n \n error[E0615]: attempted to take value of method `ban` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:43:22\n    |\n LL |     let _: usize = X.ban;\n-   |                      ^^^ help: use parentheses to call the method: `ban()`\n+   |                      ^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.ban();\n+   |                         ^^\n \n error[E0615]: attempted to take value of method `bal` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:44:22\n    |\n LL |     let _: usize = X.bal;\n-   |                      ^^^ help: use parentheses to call the method: `bal()`\n+   |                      ^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.bal();\n+   |                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n    |                   ----- the found closure\n LL |     let _: usize = closure;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found closure\n-   |            |       help: use parentheses to call this closure: `closure()`\n+   |            -----   ^^^^^^^ expected `usize`, found closure\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n+help: use parentheses to call this closure\n+   |\n+LL |     let _: usize = closure();\n+   |                           ^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "84ba935191b48615dd1bbd38ce97d3800f6b2be1", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -5,13 +5,14 @@ LL | fn foo<X: Trait>(_: X) {}\n    |    ---    ----- required by this bound in `foo`\n ...\n LL |   foo(&s);\n-   |       -^\n-   |       |\n-   |       the trait `Trait` is not implemented for `&S`\n-   |       help: consider changing this borrow's mutability: `&mut`\n+   |       ^^ the trait `Trait` is not implemented for `&S`\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n+help: consider changing this borrow's mutability\n+   |\n+LL |   foo(&mut s);\n+   |       ^^^^\n \n error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7"}, {"sha": "75a6091d56e93139aecde640daa3b0285b996f81", "filename": "src/test/ui/suggestions/method-missing-parentheses.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -8,9 +8,12 @@ error[E0615]: attempted to take value of method `collect` on type `std::vec::Int\n   --> $DIR/method-missing-parentheses.rs:2:32\n    |\n LL |     let _ = vec![].into_iter().collect::<usize>;\n-   |                                ^^^^^^^---------\n-   |                                |\n-   |                                help: use parentheses to call the method: `collect::<usize>()`\n+   |                                ^^^^^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>();\n+   |                                                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "047728dc1ea4e3d39ea5ab0eda91b075b4de0678", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,10 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/or_else-multiple-type-params.rs:7:10\n    |\n LL |         .or_else(|err| {\n-   |          ^^^^^^^\n-   |          |\n-   |          cannot infer type for type parameter `F` declared on the associated function `or_else`\n-   |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n+   |          ^^^^^^^ cannot infer type for type parameter `F` declared on the associated function `or_else`\n+   |\n+help: consider specifying the type arguments in the method call\n+   |\n+LL |         .or_else::<F, O>(|err| {\n+   |                 ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b6630ec8942384bdf7ea924e4288079d487535c", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -2,9 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/sort_by_key.rs:3:9\n    |\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n-   |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n-   |         |\n-   |         cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |         ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     lst.sort_by_key(|&(v, _)| v.iter().sum::<S>());\n+   |                                           ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "df7d73d7a7c1d221b47c7e614e96e3be6c348bd1", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -5,12 +5,13 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n    |    ---    ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n-   |     ^^^\n-   |     |\n-   |     cannot infer type for type parameter `T` declared on the function `foo`\n-   |     help: consider specifying the type argument in the function call: `foo::<T>`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n    = note: cannot resolve `_: std::convert::Into<std::string::String>`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |     foo::<T>(42);\n+   |        ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71b93e873c22026ceca22d8e30c146afa2b3745c", "filename": "src/test/ui/union/union-suggest-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -17,5 +17,5 @@ fn main() {\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n                          //~| HELP use parentheses to call the method\n-                         //~| SUGGESTION calculate()\n+                         //~| SUGGESTION ()\n }"}, {"sha": "6ab84c4836af1e685d079dcb432c945f66403489", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -14,7 +14,12 @@ error[E0615]: attempted to take value of method `calculate` on type `U`\n   --> $DIR/union-suggest-field.rs:18:15\n    |\n LL |     let y = u.calculate;\n-   |               ^^^^^^^^^ help: use parentheses to call the method: `calculate()`\n+   |               ^^^^^^^^^\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let y = u.calculate();\n+   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "083c74ba1e05d7ab575a5151c752d949ab673705", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52fbd3e5690bfe008b343bdc35c78390239b64cc/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=52fbd3e5690bfe008b343bdc35c78390239b64cc", "patch": "@@ -7,12 +7,14 @@ LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |       |\n-   |       required by this bound in `f2`\n+   |    -- - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f2<X: ?Sized>(x: &X) {\n+   |        ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n@@ -23,12 +25,14 @@ LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- -   - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`\n-   |       |\n-   |       required by this bound in `f4`\n+   |    -- - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f4<X: T +  ?Sized>(x: &X) {\n+   |            ^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8"}]}