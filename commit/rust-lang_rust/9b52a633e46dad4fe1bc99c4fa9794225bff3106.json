{"sha": "9b52a633e46dad4fe1bc99c4fa9794225bff3106", "node_id": "C_kwDOAAsO6NoAKDliNTJhNjMzZTQ2ZGFkNGZlMWJjOTljNGZhOTc5NDIyNWJmZjMxMDY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-18T02:38:41Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-18T17:14:59Z"}, "message": "rustdoc: Box `default` fields of `GenericParamDefKind`\n\nThis reduces the size of `GenericParamDef` a bit, but some of the size\nsavings are hidden because of the `ty` field of the `Const` variant.\nI will box that in the next commit.", "tree": {"sha": "e81170b2ad8d74cf6ebfe277e3794573629af969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81170b2ad8d74cf6ebfe277e3794573629af969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b52a633e46dad4fe1bc99c4fa9794225bff3106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b52a633e46dad4fe1bc99c4fa9794225bff3106", "html_url": "https://github.com/rust-lang/rust/commit/9b52a633e46dad4fe1bc99c4fa9794225bff3106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b52a633e46dad4fe1bc99c4fa9794225bff3106/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e60288640fa549329bd518cbb541176839adedb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e60288640fa549329bd518cbb541176839adedb", "html_url": "https://github.com/rust-lang/rust/commit/9e60288640fa549329bd518cbb541176839adedb"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "64f7567dac2d855b17934abbecb28adad8b17ef1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b52a633e46dad4fe1bc99c4fa9794225bff3106", "patch": "@@ -421,7 +421,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     GenericParamDefKind::Type {\n                         did: self.def_id,\n                         bounds: vec![], // These are filled in from the where-clauses.\n-                        default,\n+                        default: default.map(Box::new),\n                         synthetic,\n                     },\n                 )\n@@ -432,7 +432,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     did: self.def_id,\n                     ty: cx.tcx.type_of(self.def_id).clean(cx),\n                     default: match has_default {\n-                        true => Some(cx.tcx.const_param_default(self.def_id).to_string()),\n+                        true => Some(Box::new(cx.tcx.const_param_default(self.def_id).to_string())),\n                         false => None,\n                     },\n                 },\n@@ -462,7 +462,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                 GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     bounds: self.bounds.clean(cx),\n-                    default: default.clean(cx),\n+                    default: default.clean(cx).map(Box::new),\n                     synthetic,\n                 },\n             ),\n@@ -473,7 +473,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     ty: ty.clean(cx),\n                     default: default.map(|ct| {\n                         let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n-                        ty::Const::from_anon_const(cx.tcx, def_id).to_string()\n+                        Box::new(ty::Const::from_anon_const(cx.tcx, def_id).to_string())\n                     }),\n                 },\n             ),"}, {"sha": "daebbf782bc23493ef2a5b9b2c78acd18614375e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9b52a633e46dad4fe1bc99c4fa9794225bff3106", "patch": "@@ -1219,13 +1219,13 @@ crate enum GenericParamDefKind {\n     Type {\n         did: DefId,\n         bounds: Vec<GenericBound>,\n-        default: Option<Type>,\n+        default: Option<Box<Type>>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n     Const {\n         did: DefId,\n         ty: Type,\n-        default: Option<String>,\n+        default: Option<Box<String>>,\n     },\n }\n \n@@ -1239,7 +1239,7 @@ impl GenericParamDefKind {\n     // any embedded types, but `get_type` seems to be the wrong name for that.\n     crate fn get_type(&self) -> Option<Type> {\n         match self {\n-            GenericParamDefKind::Type { default, .. } => default.clone(),\n+            GenericParamDefKind::Type { default, .. } => default.as_deref().cloned(),\n             GenericParamDefKind::Const { ty, .. } => Some(ty.clone()),\n             GenericParamDefKind::Lifetime { .. } => None,\n         }\n@@ -1254,7 +1254,7 @@ crate struct GenericParamDef {\n \n // `GenericParamDef` is used in many places. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericParamDef, 120);\n+rustc_data_structures::static_assert_size!(GenericParamDef, 104);\n \n impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {"}, {"sha": "77eb382a7308e7677dce4f10c200c0b6c0c35e15", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b52a633e46dad4fe1bc99c4fa9794225bff3106/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=9b52a633e46dad4fe1bc99c4fa9794225bff3106", "patch": "@@ -330,10 +330,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n             },\n             Type { did: _, bounds, default, synthetic: _ } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-                default: default.map(|x| x.into_tcx(tcx)),\n+                default: default.map(|x| (*x).into_tcx(tcx)),\n             },\n             Const { did: _, ty, default } => {\n-                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default }\n+                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default: default.map(|x| *x) }\n             }\n         }\n     }"}]}