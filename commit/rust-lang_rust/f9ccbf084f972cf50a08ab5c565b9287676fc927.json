{"sha": "f9ccbf084f972cf50a08ab5c565b9287676fc927", "node_id": "C_kwDOAAsO6NoAKGY5Y2NiZjA4NGY5NzJjZjUwYTA4YWI1YzU2NWI5Mjg3Njc2ZmM5Mjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-05T04:36:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-05T04:36:27Z"}, "message": "Rollup merge of #105846 - compiler-errors:issue-105838, r=jackh726\n\nAccount for return-position `impl Trait` in trait in `opt_suggest_box_span`\n\nRPITITs are the only types where their opaque bounds might normalize to some other self type than the opaque type itself. To avoid needing to do normalization, let's just match on either alias kind.\n\nIdeally, we'd just get rid of `opt_suggest_box_span`. It's kind of a wart on type-checking `if`/`match`. I've recently refactored this expression for being confusing/wrong, but moving it into the error path is pretty hard.\n\nFixes #105838", "tree": {"sha": "9ac40f85883adffae2899513431de9f5d82a476e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac40f85883adffae2899513431de9f5d82a476e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ccbf084f972cf50a08ab5c565b9287676fc927", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtlPLCRBK7hj4Ov3rIwAALBkIAFnUuVg4ZQvWjwPpDfoyO/Di\ny4N01iaMpUFsAn138MSW+YWUYjgFSHYkoTaMPUsh3DMh+UAa+bsS7rl+svmMZenE\n3+3UVnf4UKBgoPcnZULphU1ZFvPiWHPDt7vBdzLva2JzkYPum/i3ZWfAJ0zqyS49\nIi3IRxwF80j9SiBKZYxLkaYK05hvAl/tZvpCEmdHgt0gbq/Zs5WRlqGgJWCUU2az\ngpkyWn4iLgWS7hMLej1XEtxRzXa7HRRr+Ydg3QJFPTeys1wmbn7jKEA/d+w/lQu/\nAo1xZejAv0qE8j6dkhoDLgL955p54XnX3FZj9eELHH7SCckr+JMy/ihyYcmw47c=\n=AVhv\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ac40f85883adffae2899513431de9f5d82a476e\nparent d26242d35faf50aa9c873fa3c7c15e5564384baa\nparent 7df33a093c56d81f29914116df53fa0612b454eb\nauthor Michael Goulet <michael@errs.io> 1672893387 -0800\ncommitter GitHub <noreply@github.com> 1672893387 -0800\n\nRollup merge of #105846 - compiler-errors:issue-105838, r=jackh726\n\nAccount for return-position `impl Trait` in trait in `opt_suggest_box_span`\n\nRPITITs are the only types where their opaque bounds might normalize to some other self type than the opaque type itself. To avoid needing to do normalization, let's just match on either alias kind.\n\nIdeally, we'd just get rid of `opt_suggest_box_span`. It's kind of a wart on type-checking `if`/`match`. I've recently refactored this expression for being confusing/wrong, but moving it into the error path is pretty hard.\n\nFixes #105838\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ccbf084f972cf50a08ab5c565b9287676fc927", "html_url": "https://github.com/rust-lang/rust/commit/f9ccbf084f972cf50a08ab5c565b9287676fc927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ccbf084f972cf50a08ab5c565b9287676fc927/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26242d35faf50aa9c873fa3c7c15e5564384baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26242d35faf50aa9c873fa3c7c15e5564384baa", "html_url": "https://github.com/rust-lang/rust/commit/d26242d35faf50aa9c873fa3c7c15e5564384baa"}, {"sha": "7df33a093c56d81f29914116df53fa0612b454eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df33a093c56d81f29914116df53fa0612b454eb", "html_url": "https://github.com/rust-lang/rust/commit/7df33a093c56d81f29914116df53fa0612b454eb"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "7c56b8a9c7fd55e818cd24752f50f21ce1e54765", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9ccbf084f972cf50a08ab5c565b9287676fc927/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ccbf084f972cf50a08ab5c565b9287676fc927/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=f9ccbf084f972cf50a08ab5c565b9287676fc927", "patch": "@@ -526,7 +526,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })?;\n-                let opaque_ty = self.tcx.mk_opaque(rpit_def_id, substs);\n \n                 if !self.can_coerce(first_ty, expected) || !self.can_coerce(second_ty, expected) {\n                     return None;\n@@ -540,13 +539,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) => {\n-                                assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n+                                // FIXME(rpitit): This will need to be fixed when we move to associated types\n+                                assert!(matches!(\n+                                    *trait_pred.trait_ref.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 ty::PredicateKind::Clause(ty::Clause::Trait(\n                                     trait_pred.with_self_ty(self.tcx, ty),\n                                 ))\n                             }\n                             ty::PredicateKind::Clause(ty::Clause::Projection(mut proj_pred)) => {\n-                                assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n+                                assert!(matches!(\n+                                    *proj_pred.projection_ty.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 proj_pred = proj_pred.with_self_ty(self.tcx, ty);\n                                 ty::PredicateKind::Clause(ty::Clause::Projection(proj_pred))\n                             }"}, {"sha": "a4d483dee7a53c6e9fdfe5c22e61134694770279", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f9ccbf084f972cf50a08ab5c565b9287676fc927/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ccbf084f972cf50a08ab5c565b9287676fc927/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=f9ccbf084f972cf50a08ab5c565b9287676fc927", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+struct TestA {}\n+struct TestB {}\n+\n+impl TestTrait for TestA {\n+    type Output = ();\n+}\n+impl TestTrait for TestB {\n+    type Output = ();\n+}\n+\n+trait TestTrait {\n+    type Output;\n+}\n+\n+impl<A, B> TestTrait for GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    type Output = ();\n+}\n+\n+enum GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    SayHello(A),\n+    SayGoodbye(B),\n+}\n+\n+trait Greeter {\n+    fn test_func(&self, func: &str) -> impl TestTrait<Output = ()> {\n+        match func {\n+            \"SayHello\" => GreeterOutput::SayHello(TestA {}),\n+            \"SayGoodbye\" => GreeterOutput::SayGoodbye(TestB {}),\n+            _ => GreeterOutput::SayHello(TestA {}),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "d681ecf25e8afb2f08706f45912ac1853c5c55dc", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9ccbf084f972cf50a08ab5c565b9287676fc927/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9ccbf084f972cf50a08ab5c565b9287676fc927/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr?ref=f9ccbf084f972cf50a08ab5c565b9287676fc927", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:3:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}