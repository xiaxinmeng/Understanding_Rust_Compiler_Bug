{"sha": "eac900ac87828d6a4813f0c4a870bcdb439d1175", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzkwMGFjODc4MjhkNmE0ODEzZjBjNGE4NzBiY2RiNDM5ZDExNzU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T13:45:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:57Z"}, "message": "hygiene: Make sure each `Mark` has an associated expansion info\n\nThe root expansion was missing one.\nExpansions created for \"derive containers\" (see one of the next commits for the description) also didn't get expansion info.", "tree": {"sha": "88ad61d3fb4de4cd47a36470c2ad9b80df19e867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ad61d3fb4de4cd47a36470c2ad9b80df19e867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac900ac87828d6a4813f0c4a870bcdb439d1175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac900ac87828d6a4813f0c4a870bcdb439d1175", "html_url": "https://github.com/rust-lang/rust/commit/eac900ac87828d6a4813f0c4a870bcdb439d1175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac900ac87828d6a4813f0c4a870bcdb439d1175/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "html_url": "https://github.com/rust-lang/rust/commit/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "e0e7988a744c634e679b6f26a0e9180ffe60057a", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=eac900ac87828d6a4813f0c4a870bcdb439d1175", "patch": "@@ -408,6 +408,7 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnKind {\n+    Root,\n     Macro(kind, descr),\n     Desugaring(kind)\n });"}, {"sha": "e76c24932008d12c37c8b6ee3ecb8befbf0e760d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=eac900ac87828d6a4813f0c4a870bcdb439d1175", "patch": "@@ -885,7 +885,7 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     };\n \n     match info.kind {\n-        ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n+        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n             if info.def_site.is_dummy() {"}, {"sha": "9a6252779e0c0d94055b2166ffccab23bc438dad", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eac900ac87828d6a4813f0c4a870bcdb439d1175", "patch": "@@ -5,7 +5,7 @@ use crate::source_map::{dummy_spanned, respan};\n use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::derive::{add_derived_markers, collect_derives};\n-use crate::ext::hygiene::{Mark, SyntaxContext};\n+use crate::ext::hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnKind};\n use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use crate::mut_visit::*;\n@@ -847,7 +847,17 @@ struct InvocationCollector<'a, 'b> {\n \n impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn collect(&mut self, fragment_kind: AstFragmentKind, kind: InvocationKind) -> AstFragment {\n-        let mark = Mark::fresh(self.cx.current_expansion.mark, None);\n+        // Expansion info for all the collected invocations is set upon their resolution,\n+        // with exception of the \"derive container\" case which is not resolved and can get\n+        // its expansion info immediately.\n+        let expn_info = match &kind {\n+            InvocationKind::Attr { attr: None, item, .. } => Some(ExpnInfo::default(\n+                ExpnKind::Macro(MacroKind::Attr, sym::derive),\n+                item.span(), self.cx.parse_sess.edition,\n+            )),\n+            _ => None,\n+        };\n+        let mark = Mark::fresh(self.cx.current_expansion.mark, expn_info);\n         self.invocations.push(Invocation {\n             kind,\n             fragment_kind,"}, {"sha": "5df14439230906e338d5e33ebb5481dd92896175", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=eac900ac87828d6a4813f0c4a870bcdb439d1175", "patch": "@@ -59,6 +59,9 @@ pub struct Mark(u32);\n #[derive(Debug)]\n struct MarkData {\n     parent: Mark,\n+    /// Each mark should have an associated expansion info, but sometimes there's a delay between\n+    /// creation of a mark and obtaining its info (e.g. macros are collected first and then\n+    /// resolved later), so we use an `Option` here.\n     expn_info: Option<ExpnInfo>,\n }\n \n@@ -155,11 +158,11 @@ crate struct HygieneData {\n }\n \n impl HygieneData {\n-    crate fn new() -> Self {\n+    crate fn new(edition: Edition) -> Self {\n         HygieneData {\n             marks: vec![MarkData {\n                 parent: Mark::root(),\n-                expn_info: None,\n+                expn_info: Some(ExpnInfo::default(ExpnKind::Root, DUMMY_SP, edition)),\n             }],\n             syntax_contexts: vec![SyntaxContextData {\n                 outer_mark: Mark::root(),\n@@ -183,7 +186,15 @@ impl HygieneData {\n     }\n \n     fn expn_info(&self, mark: Mark) -> Option<&ExpnInfo> {\n-        self.marks[mark.0 as usize].expn_info.as_ref()\n+        if mark != Mark::root() {\n+            Some(self.marks[mark.0 as usize].expn_info.as_ref()\n+                     .expect(\"no expansion info for a mark\"))\n+        } else {\n+            // FIXME: Some code relies on `expn_info().is_none()` meaning \"no expansion\".\n+            // Introduce a method for checking for \"no expansion\" instead and always return\n+            // `ExpnInfo` from this function instead of the `Option`.\n+            None\n+        }\n     }\n \n     fn is_descendant_of(&self, mut mark: Mark, ancestor: Mark) -> bool {\n@@ -670,6 +681,8 @@ impl ExpnInfo {\n /// Expansion kind.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum ExpnKind {\n+    /// No expansion, aka root expansion. Only `Mark::root()` has this kind.\n+    Root,\n     /// Expansion produced by a macro.\n     /// FIXME: Some code injected by the compiler before HIR lowering also gets this kind.\n     Macro(MacroKind, Symbol),\n@@ -680,6 +693,7 @@ pub enum ExpnKind {\n impl ExpnKind {\n     pub fn descr(&self) -> Symbol {\n         match *self {\n+            ExpnKind::Root => kw::PathRoot,\n             ExpnKind::Macro(_, descr) => descr,\n             ExpnKind::Desugaring(kind) => Symbol::intern(kind.descr()),\n         }"}, {"sha": "5ccfe5f0b8b1a8303a415ab903f94a28288090fd", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac900ac87828d6a4813f0c4a870bcdb439d1175/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=eac900ac87828d6a4813f0c4a870bcdb439d1175", "patch": "@@ -60,7 +60,7 @@ impl Globals {\n         Globals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n-            hygiene_data: Lock::new(hygiene::HygieneData::new()),\n+            hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n             edition,\n         }\n     }\n@@ -442,6 +442,7 @@ impl Span {\n             // Don't print recursive invocations.\n             if !info.call_site.source_equal(&prev_span) {\n                 let (pre, post) = match info.kind {\n+                    ExpnKind::Root => break,\n                     ExpnKind::Desugaring(..) => (\"desugaring of \", \"\"),\n                     ExpnKind::Macro(macro_kind, _) => match macro_kind {\n                         MacroKind::Bang => (\"\", \"!\"),"}]}