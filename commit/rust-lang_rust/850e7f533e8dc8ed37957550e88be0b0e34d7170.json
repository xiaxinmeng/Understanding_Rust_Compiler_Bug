{"sha": "850e7f533e8dc8ed37957550e88be0b0e34d7170", "node_id": "C_kwDOAAsO6NoAKDg1MGU3ZjUzM2U4ZGM4ZWQzNzk1NzU1MGU4OGJlMGIwZTM0ZDcxNzA", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-21T15:06:19Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-22T17:02:17Z"}, "message": "`octal_escapes`: updates from review, fix byte string prefix", "tree": {"sha": "8b09f50dab7030f607892a92cc674de40e52abfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b09f50dab7030f607892a92cc674de40e52abfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850e7f533e8dc8ed37957550e88be0b0e34d7170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850e7f533e8dc8ed37957550e88be0b0e34d7170", "html_url": "https://github.com/rust-lang/rust/commit/850e7f533e8dc8ed37957550e88be0b0e34d7170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850e7f533e8dc8ed37957550e88be0b0e34d7170/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982124acfafce0c14ace9cf48ab946b4a5901dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/982124acfafce0c14ace9cf48ab946b4a5901dd3", "html_url": "https://github.com/rust-lang/rust/commit/982124acfafce0c14ace9cf48ab946b4a5901dd3"}], "stats": {"total": 170, "additions": 131, "deletions": 39}, "files": [{"sha": "b3a4ab121e1a5e0eb4b4b9675c7d11ed41b0c71f", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/850e7f533e8dc8ed37957550e88be0b0e34d7170/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850e7f533e8dc8ed37957550e88be0b0e34d7170/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=850e7f533e8dc8ed37957550e88be0b0e34d7170", "patch": "@@ -9,8 +9,8 @@ use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `\\0` escapes in string and byte literals that look like octal character\n-    /// escapes in C\n+    /// Checks for `\\0` escapes in string and byte literals that look like octal\n+    /// character escapes in C.\n     ///\n     /// ### Why is this bad?\n     /// Rust does not support octal notation for character escapes. `\\0` is always a\n@@ -57,20 +57,18 @@ impl EarlyLintPass for OctalEscapes {\n \n fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n     let contents = lit.symbol.as_str();\n-    let mut iter = contents.char_indices();\n+    let mut iter = contents.char_indices().peekable();\n \n     // go through the string, looking for \\0[0-7]\n     while let Some((from, ch)) = iter.next() {\n         if ch == '\\\\' {\n-            if let Some((mut to, '0')) = iter.next() {\n-                // collect all further potentially octal digits\n-                while let Some((j, '0'..='7')) = iter.next() {\n-                    to = j + 1;\n-                }\n-                // if it's more than just `\\0` we have a match\n-                if to > from + 2 {\n-                    emit(cx, &contents, from, to, span, is_string);\n-                    return;\n+            if let Some((_, '0')) = iter.next() {\n+                // collect up to two further octal digits\n+                if let Some((mut to, '0'..='7')) = iter.next() {\n+                    if let Some((_, '0'..='7')) = iter.peek() {\n+                        to += 1;\n+                    }\n+                    emit(cx, &contents, from, to + 1, span, is_string);\n                 }\n             }\n         }\n@@ -80,19 +78,9 @@ fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n fn emit(cx: &EarlyContext<'tcx>, contents: &str, from: usize, to: usize, span: Span, is_string: bool) {\n     // construct a replacement escape for that case that octal was intended\n     let escape = &contents[from + 1..to];\n-    let literal_suggestion = if is_string {\n-        u32::from_str_radix(escape, 8).ok().and_then(|n| {\n-            if n < 256 {\n-                Some(format!(\"\\\\x{:02x}\", n))\n-            } else if n <= std::char::MAX as u32 {\n-                Some(format!(\"\\\\u{{{:x}}}\", n))\n-            } else {\n-                None\n-            }\n-        })\n-    } else {\n-        u8::from_str_radix(escape, 8).ok().map(|n| format!(\"\\\\x{:02x}\", n))\n-    };\n+    // the maximum value is \\077, or \\x3f\n+    let literal_suggestion = u8::from_str_radix(escape, 8).ok().map(|n| format!(\"\\\\x{:02x}\", n));\n+    let prefix = if is_string { \"\" } else { \"b\" };\n \n     span_lint_and_then(\n         cx,\n@@ -111,8 +99,8 @@ fn emit(cx: &EarlyContext<'tcx>, contents: &str, from: usize, to: usize, span: S\n             if let Some(sugg) = literal_suggestion {\n                 diag.span_suggestion(\n                     span,\n-                    \"if an octal escape is intended, use\",\n-                    format!(\"\\\"{}{}{}\\\"\", &contents[..from], sugg, &contents[to..]),\n+                    \"if an octal escape was intended, use the hexadecimal representation instead\",\n+                    format!(\"{}\\\"{}{}{}\\\"\", prefix, &contents[..from], sugg, &contents[to..]),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -123,7 +111,7 @@ fn emit(cx: &EarlyContext<'tcx>, contents: &str, from: usize, to: usize, span: S\n                     \"if the null {} is intended, disambiguate using\",\n                     if is_string { \"character\" } else { \"byte\" }\n                 ),\n-                format!(\"\\\"{}\\\\x00{}\\\"\", &contents[..from], &contents[from + 2..]),\n+                format!(\"{}\\\"{}\\\\x00{}\\\"\", prefix, &contents[..from], &contents[from + 2..]),\n                 Applicability::MaybeIncorrect,\n             );\n         },"}, {"sha": "53145ef0fd2029dd5252f3749caf4638b3243355", "filename": "tests/ui/octal_escapes.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/850e7f533e8dc8ed37957550e88be0b0e34d7170/tests%2Fui%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850e7f533e8dc8ed37957550e88be0b0e34d7170/tests%2Fui%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.rs?ref=850e7f533e8dc8ed37957550e88be0b0e34d7170", "patch": "@@ -4,9 +4,17 @@ fn main() {\n     let _bad1 = \"\\033[0m\";\n     let _bad2 = b\"\\033[0m\";\n     let _bad3 = \"\\\\\\033[0m\";\n+    // maximum 3 digits (\\012 is the escape)\n     let _bad4 = \"\\01234567\";\n     let _bad5 = \"\\0\\03\";\n+    let _bad6 = \"Text-\\055\\077-MoreText\";\n+    let _bad7 = \"EvenMoreText-\\01\\02-ShortEscapes\";\n+    let _bad8 = \"\u9508\\01\u9508\";\n+    let _bad9 = \"\u9508\\011\u9508\";\n \n     let _good1 = \"\\\\033[0m\";\n     let _good2 = \"\\0\\\\0\";\n+    let _good3 = \"\\0\\0\";\n+    let _good4 = \"X\\0\\0X\";\n+    let _good5 = \"\u9508\\0\u9508\";\n }"}, {"sha": "8c27dc0cf05dc291b7f348ef1bdb7eace1b9dcae", "filename": "tests/ui/octal_escapes.stderr", "status": "modified", "additions": 107, "deletions": 11, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/850e7f533e8dc8ed37957550e88be0b0e34d7170/tests%2Fui%2Foctal_escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/850e7f533e8dc8ed37957550e88be0b0e34d7170/tests%2Fui%2Foctal_escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.stderr?ref=850e7f533e8dc8ed37957550e88be0b0e34d7170", "patch": "@@ -6,7 +6,7 @@ LL |     let _bad1 = \"/033[0m\";\n    |\n    = note: `-D clippy::octal-escapes` implied by `-D warnings`\n    = help: octal escapes are not supported, `/0` is always a null character\n-help: if an octal escape is intended, use\n+help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n LL |     let _bad1 = \"/x1b[0m\";\n    |                 ~~~~~~~~~\n@@ -22,14 +22,14 @@ LL |     let _bad2 = b\"/033[0m\";\n    |                 ^^^^^^^^^^\n    |\n    = help: octal escapes are not supported, `/0` is always a null byte\n-help: if an octal escape is intended, use\n+help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n-LL |     let _bad2 = \"/x1b[0m\";\n-   |                 ~~~~~~~~~\n+LL |     let _bad2 = b\"/x1b[0m\";\n+   |                 ~~~~~~~~~~\n help: if the null byte is intended, disambiguate using\n    |\n-LL |     let _bad2 = \"/x0033[0m\";\n-   |                 ~~~~~~~~~~~\n+LL |     let _bad2 = b\"/x0033[0m\";\n+   |                 ~~~~~~~~~~~~\n \n error: octal-looking escape in string literal\n   --> $DIR/octal_escapes.rs:6:17\n@@ -38,7 +38,7 @@ LL |     let _bad3 = \"//033[0m\";\n    |                 ^^^^^^^^^^^\n    |\n    = help: octal escapes are not supported, `/0` is always a null character\n-help: if an octal escape is intended, use\n+help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n LL |     let _bad3 = \"//x1b[0m\";\n    |                 ~~~~~~~~~~~\n@@ -48,20 +48,116 @@ LL |     let _bad3 = \"//x0033[0m\";\n    |                 ~~~~~~~~~~~~~\n \n error: octal-looking escape in string literal\n-  --> $DIR/octal_escapes.rs:7:17\n+  --> $DIR/octal_escapes.rs:8:17\n    |\n LL |     let _bad4 = \"/01234567\";\n    |                 ^^^^^^^^^^^\n    |\n    = help: octal escapes are not supported, `/0` is always a null character\n-help: if an octal escape is intended, use\n+help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n-LL |     let _bad4 = \"/u{53977}\";\n+LL |     let _bad4 = \"/x0a34567\";\n    |                 ~~~~~~~~~~~\n help: if the null character is intended, disambiguate using\n    |\n LL |     let _bad4 = \"/x001234567\";\n    |                 ~~~~~~~~~~~~~\n \n-error: aborting due to 4 previous errors\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:10:17\n+   |\n+LL |     let _bad6 = \"Text-/055/077-MoreText\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad6 = \"Text-/x2d/077-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad6 = \"Text-/x0055/077-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:10:17\n+   |\n+LL |     let _bad6 = \"Text-/055/077-MoreText\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad6 = \"Text-/055/x3f-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad6 = \"Text-/055/x0077-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:11:17\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/01/02-ShortEscapes\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/x01/02-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/x001/02-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:11:17\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/01/02-ShortEscapes\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/01/x02-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/01/x002-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:12:17\n+   |\n+LL |     let _bad8 = \"\u9508/01\u9508\";\n+   |                 ^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad8 = \"\u9508/x01\u9508\";\n+   |                 ~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad8 = \"\u9508/x001\u9508\";\n+   |                 ~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:13:17\n+   |\n+LL |     let _bad9 = \"\u9508/011\u9508\";\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad9 = \"\u9508/x09\u9508\";\n+   |                 ~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad9 = \"\u9508/x0011\u9508\";\n+   |                 ~~~~~~~~~~~~\n+\n+error: aborting due to 10 previous errors\n "}]}