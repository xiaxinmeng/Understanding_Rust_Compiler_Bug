{"sha": "c48650ec25d2e7e872912137e68496248743f1fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODY1MGVjMjVkMmU3ZTg3MjkxMjEzN2U2ODQ5NjI0ODc0M2YxZmU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-22T20:39:40Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T14:12:42Z"}, "message": "fix treatment of local types in \"remote coherence\" mode", "tree": {"sha": "c62d96bfc8aa02a4478f49f61c21a8c0beb9a342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62d96bfc8aa02a4478f49f61c21a8c0beb9a342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48650ec25d2e7e872912137e68496248743f1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48650ec25d2e7e872912137e68496248743f1fe", "html_url": "https://github.com/rust-lang/rust/commit/c48650ec25d2e7e872912137e68496248743f1fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48650ec25d2e7e872912137e68496248743f1fe/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ca00a948934766950167e997903a2cc0243c5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca00a948934766950167e997903a2cc0243c5cf", "html_url": "https://github.com/rust-lang/rust/commit/2ca00a948934766950167e997903a2cc0243c5cf"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "2ca4628ab13f1c85378c3f68e3849d338854c6b7", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 79, "deletions": 46, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/c48650ec25d2e7e872912137e68496248743f1fe/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48650ec25d2e7e872912137e68496248743f1fe/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=c48650ec25d2e7e872912137e68496248743f1fe", "patch": "@@ -19,8 +19,18 @@ use ty::subst::Subst;\n \n use infer::{InferCtxt, InferOk};\n \n-#[derive(Copy, Clone)]\n-struct InferIsLocal(bool);\n+#[derive(Copy, Clone, Debug)]\n+enum InferIsLocal {\n+    BrokenYes,\n+    Yes,\n+    No\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Conflict {\n+    Upstream,\n+    Downstream\n+}\n \n pub struct OverlapResult<'tcx> {\n     pub impl_header: ty::ImplHeader<'tcx>,\n@@ -126,32 +136,46 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n }\n \n pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                             trait_ref: ty::TraitRef<'tcx>) -> bool\n+                                             trait_ref: ty::TraitRef<'tcx>,\n+                                             broken: bool)\n+                                             -> Option<Conflict>\n {\n-    debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n-\n-    // if the orphan rules pass, that means that no ancestor crate can\n-    // impl this, so it's up to us.\n-    if orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(false)).is_ok() {\n-        debug!(\"trait_ref_is_knowable: orphan check passed\");\n-        return true;\n+    debug!(\"trait_ref_is_knowable(trait_ref={:?}, broken={:?})\", trait_ref, broken);\n+    let mode = if broken {\n+        InferIsLocal::BrokenYes\n+    } else {\n+        InferIsLocal::Yes\n+    };\n+    if orphan_check_trait_ref(tcx, trait_ref, mode).is_ok() {\n+        // A downstream or cousin crate is allowed to implement some\n+        // substitution of this trait-ref.\n+        debug!(\"trait_ref_is_knowable: downstream crate might implement\");\n+        return Some(Conflict::Downstream);\n     }\n \n-    // if the trait is not marked fundamental, then it's always possible that\n-    // an ancestor crate will impl this in the future, if they haven't\n-    // already\n-    if !trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n-        debug!(\"trait_ref_is_knowable: trait is neither local nor fundamental\");\n-        return false;\n+    if trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n+        // This is a local or fundamental trait, so future-compatibility\n+        // is no concern. We know that downstream/cousin crates are not\n+        // allowed to implement a substitution of this trait ref, which\n+        // means impls could only come from dependencies of this crate,\n+        // which we already know about.\n+        return None;\n+    }\n+    // This is a remote non-fundamental trait, so if another crate\n+    // can be the \"final owner\" of a substitution of this trait-ref,\n+    // they are allowed to implement it future-compatibly.\n+    //\n+    // However, if we are a final owner, then nobody else can be,\n+    // and if we are an intermediate owner, then we don't care\n+    // about future-compatibility, which means that we're OK if\n+    // we are an owner.\n+    if orphan_check_trait_ref(tcx, trait_ref, InferIsLocal::No).is_ok() {\n+        debug!(\"trait_ref_is_knowable: orphan check passed\");\n+        return None;\n+    } else {\n+        debug!(\"trait_ref_is_knowable: nonlocal, nonfundamental, unowned\");\n+        return Some(Conflict::Upstream);\n     }\n-\n-    // find out when some downstream (or cousin) crate could impl this\n-    // trait-ref, presuming that all the parameters were instantiated\n-    // with downstream types. If not, then it could only be\n-    // implemented by an upstream crate, which means that the impl\n-    // must be visible to us, and -- since the trait is fundamental\n-    // -- we can test.\n-    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(true)).is_err()\n }\n \n pub fn trait_ref_is_local_or_fundamental<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n@@ -189,16 +213,16 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         return Ok(());\n     }\n \n-    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(false))\n+    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal::No)\n }\n \n fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n                                 trait_ref: ty::TraitRef<'tcx>,\n                                 infer_is_local: InferIsLocal)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n {\n-    debug!(\"orphan_check_trait_ref(trait_ref={:?}, infer_is_local={})\",\n-           trait_ref, infer_is_local.0);\n+    debug!(\"orphan_check_trait_ref(trait_ref={:?}, infer_is_local={:?})\",\n+           trait_ref, infer_is_local);\n \n     // First, create an ordered iterator over all the type parameters to the trait, with the self\n     // type appearing first.\n@@ -212,7 +236,9 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n             // uncovered type parameters.\n             let uncovered_tys = uncovered_tys(tcx, input_ty, infer_is_local);\n             for uncovered_ty in uncovered_tys {\n-                if let Some(param) = uncovered_ty.walk().find(|t| is_type_parameter(t)) {\n+                if let Some(param) = uncovered_ty.walk()\n+                    .find(|t| is_possibly_remote_type(t, infer_is_local))\n+                {\n                     debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n                     return Err(OrphanCheckErr::UncoveredTy(param));\n                 }\n@@ -224,11 +250,11 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n \n         // Otherwise, enforce invariant that there are no type\n         // parameters reachable.\n-        if !infer_is_local.0 {\n-            if let Some(param) = input_ty.walk().find(|t| is_type_parameter(t)) {\n-                debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-                return Err(OrphanCheckErr::UncoveredTy(param));\n-            }\n+        if let Some(param) = input_ty.walk()\n+            .find(|t| is_possibly_remote_type(t, infer_is_local))\n+        {\n+            debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n+            return Err(OrphanCheckErr::UncoveredTy(param));\n         }\n     }\n \n@@ -250,7 +276,7 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)\n     }\n }\n \n-fn is_type_parameter(ty: Ty) -> bool {\n+fn is_possibly_remote_type(ty: Ty, _infer_is_local: InferIsLocal) -> bool {\n     match ty.sty {\n         ty::TyProjection(..) | ty::TyParam(..) => true,\n         _ => false,\n@@ -273,7 +299,15 @@ fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n+fn def_id_is_local(def_id: DefId, infer_is_local: InferIsLocal) -> bool {\n+    match infer_is_local {\n+        InferIsLocal::Yes => false,\n+        InferIsLocal::No |\n+        InferIsLocal::BrokenYes => def_id.is_local()\n+    }\n+}\n+\n+fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal) -> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.sty {\n@@ -296,20 +330,19 @@ fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n             false\n         }\n \n-        ty::TyInfer(..) => {\n-            infer_is_local.0\n-        }\n-\n-        ty::TyAdt(def, _) => {\n-            def.did.is_local()\n-        }\n+        ty::TyInfer(..) => match infer_is_local {\n+            InferIsLocal::No => false,\n+            InferIsLocal::Yes |\n+            InferIsLocal::BrokenYes => true\n+        },\n \n-        ty::TyForeign(did) => {\n-            did.is_local()\n-        }\n+        ty::TyAdt(def, _) => def_id_is_local(def.did, infer_is_local),\n+        ty::TyForeign(did) => def_id_is_local(did, infer_is_local),\n \n         ty::TyDynamic(ref tt, ..) => {\n-            tt.principal().map_or(false, |p| p.def_id().is_local())\n+            tt.principal().map_or(false, |p| {\n+                def_id_is_local(p.def_id(), infer_is_local)\n+            })\n         }\n \n         ty::TyError => {"}, {"sha": "f236216c096add9f5cb9c25b8f11a46d6d22e08a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48650ec25d2e7e872912137e68496248743f1fe/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48650ec25d2e7e872912137e68496248743f1fe/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=c48650ec25d2e7e872912137e68496248743f1fe", "patch": "@@ -814,7 +814,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // terms of `Fn` etc, but we could probably make this more\n         // precise still.\n         let unbound_input_types = stack.fresh_trait_ref.input_types().any(|ty| ty.is_fresh());\n-        if unbound_input_types && self.intercrate {\n+        if unbound_input_types && self.intercrate && false {\n             debug!(\"evaluate_stack({:?}) --> unbound argument, intercrate -->  ambiguous\",\n                    stack.fresh_trait_ref);\n             // Heuristics: show the diagnostics when there are no candidates in crate.\n@@ -1221,7 +1221,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // bound regions\n         let trait_ref = predicate.skip_binder().trait_ref;\n \n-        coherence::trait_ref_is_knowable(self.tcx(), trait_ref)\n+        coherence::trait_ref_is_knowable(self.tcx(), trait_ref, false).is_none()\n     }\n \n     /// Returns true if the global caches can be used."}]}