{"sha": "424e15ae54388b70b30a3a0941d024e4b990f4dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNGUxNWFlNTQzODhiNzBiMzBhM2EwOTQxZDAyNGU0Yjk5MGY0ZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-25T21:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-25T21:37:21Z"}, "message": "Rollup merge of #68514 - lzutao:fmt-Self, r=Dylan-DPC\n\nUse Self instead of self return type", "tree": {"sha": "6413d8d8b8893affef036d0bfe2fe9bdc5a7eccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6413d8d8b8893affef036d0bfe2fe9bdc5a7eccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/424e15ae54388b70b30a3a0941d024e4b990f4dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeLLURCRBK7hj4Ov3rIwAAdHIIABVaTi/UjvHnZ6yCiRYhqGME\n0gRBONTqSvUGOgclIAHRTWxLKV1hZMNi+mhJ9TBWyHirx5RUSyUfuzmRGFhGLj6H\nEk7lcD4DZemZ7QbM96uO/2BD17xAAZDDiRRMmEH8W/CinwU67Xe9nmY1bmyAi8cZ\nUe0dtUDY3RHvffMImUCPxErHDIKWVNeH0AKayUZGiOzHtZeryzITulJbti8NovSl\n9VGg/UzxV0/vzbgqX6ca12bCdg2DLzmmxnhZ0fEKcEmSml2h0KqxETa6IL2S0dc3\ne5Eq+yVkv7cHThh18sILvgf0Gu3MBt20IMS09+J5EbPOzzeDWZKvC+CTo+E3YTE=\n=s54p\n-----END PGP SIGNATURE-----\n", "payload": "tree 6413d8d8b8893affef036d0bfe2fe9bdc5a7eccb\nparent e7c557b2958883d5f1927780cc2f4708efe6a00c\nparent 2d7f8b31db062b695175c940d7f0c13281e45bb2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1579988241 +0900\ncommitter GitHub <noreply@github.com> 1579988241 +0900\n\nRollup merge of #68514 - lzutao:fmt-Self, r=Dylan-DPC\n\nUse Self instead of self return type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/424e15ae54388b70b30a3a0941d024e4b990f4dc", "html_url": "https://github.com/rust-lang/rust/commit/424e15ae54388b70b30a3a0941d024e4b990f4dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/424e15ae54388b70b30a3a0941d024e4b990f4dc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c557b2958883d5f1927780cc2f4708efe6a00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c557b2958883d5f1927780cc2f4708efe6a00c", "html_url": "https://github.com/rust-lang/rust/commit/e7c557b2958883d5f1927780cc2f4708efe6a00c"}, {"sha": "2d7f8b31db062b695175c940d7f0c13281e45bb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7f8b31db062b695175c940d7f0c13281e45bb2", "html_url": "https://github.com/rust-lang/rust/commit/2d7f8b31db062b695175c940d7f0c13281e45bb2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8ba0e422e8f1358820c785bc146882735f2ad012", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/424e15ae54388b70b30a3a0941d024e4b990f4dc/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424e15ae54388b70b30a3a0941d024e4b990f4dc/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=424e15ae54388b70b30a3a0941d024e4b990f4dc", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n+    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 if !self.has_fields {\n@@ -330,7 +330,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n+    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 if self.fields == 0 {\n@@ -492,7 +492,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut Self {\n         self.inner.entry(entry);\n         self\n     }\n@@ -521,7 +521,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self\n     where\n         D: fmt::Debug,\n         I: IntoIterator<Item = D>,\n@@ -624,7 +624,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut Self {\n         self.inner.entry(entry);\n         self\n     }\n@@ -653,7 +653,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self\n     where\n         D: fmt::Debug,\n         I: IntoIterator<Item = D>,\n@@ -760,7 +760,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut Self {\n         self.key(key).value(value)\n     }\n \n@@ -797,7 +797,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n-    pub fn key(&mut self, key: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn key(&mut self, key: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(\n                 !self.has_key,\n@@ -862,7 +862,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n-    pub fn value(&mut self, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn value(&mut self, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(self.has_key, \"attempted to format a map value before its key\");\n \n@@ -908,7 +908,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n+    pub fn entries<K, V, I>(&mut self, entries: I) -> &mut Self\n     where\n         K: fmt::Debug,\n         V: fmt::Debug,"}]}