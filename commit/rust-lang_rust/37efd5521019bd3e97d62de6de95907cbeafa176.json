{"sha": "37efd5521019bd3e97d62de6de95907cbeafa176", "node_id": "C_kwDOAAsO6NoAKDM3ZWZkNTUyMTAxOWJkM2U5N2Q2MmRlNmRlOTU5MDdjYmVhZmExNzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-11T20:53:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T20:53:01Z"}, "message": "Rollup merge of #99511 - RalfJung:raw_eq, r=wesleywiser\n\nmake raw_eq precondition more restrictive\n\nSpecifically, don't allow comparing pointers that way. Comparing pointers is subtle because you have to talk about what happens to the provenance.\n\nThis matches what [Miri already implements](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=9eb1dfb8a61b5a2d4a7cee43df2717af), and all existing users are fine with this.\n\nIf raw_eq on pointers is ever desired, we can adjust the intrinsic spec and Miri implementation as needed, but for now that seems just unnecessary. Also, this is a const intrinsic, and in const, comparing pointers this way is *not possible* -- so if we allow the intrinsic to compare pointers in general, we need to impose an extra restrictions saying that in const-context, pointers are *not* okay.", "tree": {"sha": "1f98d6947b1c2f2e9472f9751e9bdc4bf6c14807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f98d6947b1c2f2e9472f9751e9bdc4bf6c14807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37efd5521019bd3e97d62de6de95907cbeafa176", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9WwtCRBK7hj4Ov3rIwAAgtMIAFc9hglEAo40GSQI9x+mlUq2\nVkLTu6zfVpSEUQOtvsAOLOvvkUSB3m9R04dVL25bh9V5OZMkXXuqi3pVK1CJ/x3q\nMf2G+Z/EGIWJxVqzfcuNd4BMfliI177CQ32GWFgha6WPqvEWgcb+UE3SNG3h6L8u\n2TZbBrPIojjpqxCIOW37G1BhqPBnhvNs93v/A6bZtVfrOfMow03JZYTZOxNXBiJE\nS4bMHxiYGMcqVPvzVFWPRn1T74vn1Smx9M9Rk/Aj9+J/mBCKWLOSAMY+CHiXK9Gv\n+72pqAGwJ3QaKSe8RQq1c29n/za0wj1LJpbEEm5h5QbBQ+H9SkjJczXW8QSuPu0=\n=RMyK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f98d6947b1c2f2e9472f9751e9bdc4bf6c14807\nparent 92b32e307c08b82f14914d12313a2882af879dcb\nparent 338d7c2fb07da34abab1ca5bb4a8c40ff0b4d604\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660251181 +0200\ncommitter GitHub <noreply@github.com> 1660251181 +0200\n\nRollup merge of #99511 - RalfJung:raw_eq, r=wesleywiser\n\nmake raw_eq precondition more restrictive\n\nSpecifically, don't allow comparing pointers that way. Comparing pointers is subtle because you have to talk about what happens to the provenance.\n\nThis matches what [Miri already implements](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=9eb1dfb8a61b5a2d4a7cee43df2717af), and all existing users are fine with this.\n\nIf raw_eq on pointers is ever desired, we can adjust the intrinsic spec and Miri implementation as needed, but for now that seems just unnecessary. Also, this is a const intrinsic, and in const, comparing pointers this way is *not possible* -- so if we allow the intrinsic to compare pointers in general, we need to impose an extra restrictions saying that in const-context, pointers are *not* okay.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37efd5521019bd3e97d62de6de95907cbeafa176", "html_url": "https://github.com/rust-lang/rust/commit/37efd5521019bd3e97d62de6de95907cbeafa176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37efd5521019bd3e97d62de6de95907cbeafa176/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b32e307c08b82f14914d12313a2882af879dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b32e307c08b82f14914d12313a2882af879dcb", "html_url": "https://github.com/rust-lang/rust/commit/92b32e307c08b82f14914d12313a2882af879dcb"}, {"sha": "338d7c2fb07da34abab1ca5bb4a8c40ff0b4d604", "url": "https://api.github.com/repos/rust-lang/rust/commits/338d7c2fb07da34abab1ca5bb4a8c40ff0b4d604", "html_url": "https://github.com/rust-lang/rust/commit/338d7c2fb07da34abab1ca5bb4a8c40ff0b4d604"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "b2c895f882c6a6f3f5afabc82a265feb09253595", "filename": "library/core/src/array/equality.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37efd5521019bd3e97d62de6de95907cbeafa176/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37efd5521019bd3e97d62de6de95907cbeafa176/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fequality.rs?ref=37efd5521019bd3e97d62de6de95907cbeafa176", "patch": "@@ -173,13 +173,14 @@ macro_rules! is_raw_eq_comparable {\n     )+};\n }\n \n-// SAFETY: All the ordinary integer types allow all bit patterns as distinct values\n+// SAFETY: All the ordinary integer types have no padding, and are not pointers.\n is_raw_eq_comparable!(u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize);\n \n-// SAFETY: bool and char have *niches*, but no *padding*, so this is sound\n+// SAFETY: bool and char have *niches*, but no *padding* (and these are not pointer types), so this\n+// is sound\n is_raw_eq_comparable!(bool, char);\n \n-// SAFETY: Similarly, the non-zero types have a niche, but no undef,\n+// SAFETY: Similarly, the non-zero types have a niche, but no undef and no pointers,\n // and they compare like their underlying numeric type.\n is_raw_eq_comparable!(\n     NonZeroU8,"}, {"sha": "2d44feb15f873b7ae34c2a4be9e7655c9dbecce5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37efd5521019bd3e97d62de6de95907cbeafa176/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37efd5521019bd3e97d62de6de95907cbeafa176/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=37efd5521019bd3e97d62de6de95907cbeafa176", "patch": "@@ -2282,7 +2282,8 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized.\n+    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized or carry a\n+    /// pointer value.\n     /// Note that this is a stricter criterion than just the *values* being\n     /// fully-initialized: if `T` has padding, it's UB to call this intrinsic.\n     ///"}]}