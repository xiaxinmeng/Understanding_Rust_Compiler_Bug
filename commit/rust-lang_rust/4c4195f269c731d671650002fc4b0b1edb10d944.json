{"sha": "4c4195f269c731d671650002fc4b0b1edb10d944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDE5NWYyNjljNzMxZDY3MTY1MDAwMmZjNGIwYjFlZGIxMGQ5NDQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-22T15:27:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-22T15:27:59Z"}, "message": "Fix def paths creation for items inlined from external crates.\n\nAvoid duplicating the last element of the def path which led to paths like \"std::slice::into_vec::into_vec\".", "tree": {"sha": "d3f6b48657ef3877e387f600069b6b81c66a1978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f6b48657ef3877e387f600069b6b81c66a1978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4195f269c731d671650002fc4b0b1edb10d944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4195f269c731d671650002fc4b0b1edb10d944", "html_url": "https://github.com/rust-lang/rust/commit/4c4195f269c731d671650002fc4b0b1edb10d944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4195f269c731d671650002fc4b0b1edb10d944/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c3ef8f9fd4b0dd1f881c49323bad456163f202", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c3ef8f9fd4b0dd1f881c49323bad456163f202", "html_url": "https://github.com/rust-lang/rust/commit/42c3ef8f9fd4b0dd1f881c49323bad456163f202"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "7de6099544525328e259949cc1a247abe96ba50e", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=4c4195f269c731d671650002fc4b0b1edb10d944", "patch": "@@ -839,11 +839,10 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n }\n \n /// Used for items loaded from external crate that are being inlined into this\n-/// crate.  The `path` should be the path to the item but should not include\n-/// the item itself.\n+/// crate.\n pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n-                                          path: Vec<PathElem>,\n-                                          def_path: DefPath,\n+                                          parent_path: Vec<PathElem>,\n+                                          parent_def_path: DefPath,\n                                           ii: InlinedItem,\n                                           fold_ops: F)\n                                           -> &'ast InlinedItem {\n@@ -862,7 +861,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     };\n \n     let ii_parent = map.forest.inlined_items.alloc(InlinedParent {\n-        path: path,\n+        path: parent_path,\n         ii: ii\n     });\n \n@@ -872,7 +871,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n             map.krate(),\n             ii_parent,\n             ii_parent_id,\n-            def_path,\n+            parent_def_path,\n             mem::replace(&mut *map.map.borrow_mut(), vec![]),\n             mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new()));\n     ii_parent.ii.visit(&mut collector);"}, {"sha": "8f74acd9ebdf6f8da88694d89f608ee60df1d5c8", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=4c4195f269c731d671650002fc4b0b1edb10d944", "patch": "@@ -124,20 +124,20 @@ impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> {\n /// ast-map.\n pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n                                  tcx: &ty::ctxt<'tcx>,\n-                                 path: Vec<ast_map::PathElem>,\n-                                 def_path: ast_map::DefPath,\n+                                 parent_path: Vec<ast_map::PathElem>,\n+                                 parent_def_path: ast_map::DefPath,\n                                  par_doc: rbml::Doc,\n                                  orig_did: DefId)\n                                  -> Result<&'tcx InlinedItem, (Vec<ast_map::PathElem>,\n                                                                ast_map::DefPath)> {\n     match par_doc.opt_child(c::tag_ast) {\n-      None => Err((path, def_path)),\n+      None => Err((parent_path, parent_def_path)),\n       Some(ast_doc) => {\n         let mut path_as_str = None;\n         debug!(\"> Decoding inlined fn: {:?}::?\",\n         {\n             // Do an Option dance to use the path after it is moved below.\n-            let s = ast_map::path_to_string(path.iter().cloned());\n+            let s = ast_map::path_to_string(parent_path.iter().cloned());\n             path_as_str = Some(s);\n             path_as_str.as_ref().map(|x| &x[..])\n         });\n@@ -152,8 +152,11 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n             last_filemap_index: Cell::new(0)\n         };\n         let raw_ii = decode_ast(ast_doc);\n-        let ii = ast_map::map_decoded_item(&dcx.tcx.map, path, def_path, raw_ii, dcx);\n-\n+        let ii = ast_map::map_decoded_item(&dcx.tcx.map,\n+                                           parent_path,\n+                                           parent_def_path,\n+                                           raw_ii,\n+                                           dcx);\n         let name = match *ii {\n             InlinedItem::Item(ref i) => i.name,\n             InlinedItem::Foreign(ref i) => i.name,"}, {"sha": "8126970759e6dcc7e0adaaf3c202126fa0820422", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4195f269c731d671650002fc4b0b1edb10d944/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4c4195f269c731d671650002fc4b0b1edb10d944", "patch": "@@ -763,29 +763,54 @@ pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex) -> ast::Nam\n pub type DecodeInlinedItem<'a> =\n     Box<for<'tcx> FnMut(Cmd,\n                         &ty::ctxt<'tcx>,\n-                        Vec<hir_map::PathElem>,\n-                        hir_map::DefPath,\n+                        Vec<hir_map::PathElem>, // parent_path\n+                        hir_map::DefPath,       // parent_def_path\n                         rbml::Doc,\n                         DefId)\n                         -> Result<&'tcx InlinedItem, (Vec<hir_map::PathElem>,\n                                                       hir_map::DefPath)> + 'a>;\n \n-pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: DefIndex,\n+pub fn maybe_get_item_ast<'tcx>(cdata: Cmd,\n+                                tcx: &ty::ctxt<'tcx>,\n+                                id: DefIndex,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n                                 -> FoundAst<'tcx> {\n     debug!(\"Looking up item: {:?}\", id);\n     let item_doc = cdata.lookup_item(id);\n     let item_did = item_def_id(item_doc, cdata);\n-    let path = item_path(item_doc).split_last().unwrap().1.to_vec();\n-    let def_path = def_path(cdata, id);\n-    match decode_inlined_item(cdata, tcx, path, def_path, item_doc, item_did) {\n+    let parent_path = {\n+        let mut path = item_path(item_doc);\n+        path.pop();\n+        path\n+    };\n+    let parent_def_path = {\n+        let mut def_path = def_path(cdata, id);\n+        def_path.pop();\n+        def_path\n+    };\n+    match decode_inlined_item(cdata,\n+                              tcx,\n+                              parent_path,\n+                              parent_def_path,\n+                              item_doc,\n+                              item_did) {\n         Ok(ii) => FoundAst::Found(ii),\n-        Err((path, def_path)) => {\n+        Err((mut parent_path, mut parent_def_path)) => {\n             match item_parent_item(cdata, item_doc) {\n-                Some(did) => {\n-                    let parent_item = cdata.lookup_item(did.index);\n-                    match decode_inlined_item(cdata, tcx, path, def_path, parent_item, did) {\n-                        Ok(ii) => FoundAst::FoundParent(did, ii),\n+                Some(parent_did) => {\n+                    // Remove the last element from the paths, since we are now\n+                    // trying to inline the parent.\n+                    parent_path.pop();\n+                    parent_def_path.pop();\n+\n+                    let parent_item = cdata.lookup_item(parent_did.index);\n+                    match decode_inlined_item(cdata,\n+                                              tcx,\n+                                              parent_path,\n+                                              parent_def_path,\n+                                              parent_item,\n+                                              parent_did) {\n+                        Ok(ii) => FoundAst::FoundParent(parent_did, ii),\n                         Err(_) => FoundAst::NotFound\n                     }\n                 }"}]}