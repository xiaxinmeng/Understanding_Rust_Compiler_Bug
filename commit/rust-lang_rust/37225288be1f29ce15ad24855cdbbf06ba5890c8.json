{"sha": "37225288be1f29ce15ad24855cdbbf06ba5890c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjI1Mjg4YmUxZjI5Y2UxNWFkMjQ4NTVjZGJiZjA2YmE1ODkwYzg=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-12-16T16:50:52Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-12-24T17:18:27Z"}, "message": "rustdoc: render higher-rank trait bounds\n\nFix #19915", "tree": {"sha": "99e59df5f22721eaa029b5669ba436ee11352750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e59df5f22721eaa029b5669ba436ee11352750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37225288be1f29ce15ad24855cdbbf06ba5890c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37225288be1f29ce15ad24855cdbbf06ba5890c8", "html_url": "https://github.com/rust-lang/rust/commit/37225288be1f29ce15ad24855cdbbf06ba5890c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37225288be1f29ce15ad24855cdbbf06ba5890c8/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39e99cfc72a21ae6e697e9db2cef252dfb1aecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39e99cfc72a21ae6e697e9db2cef252dfb1aecb", "html_url": "https://github.com/rust-lang/rust/commit/b39e99cfc72a21ae6e697e9db2cef252dfb1aecb"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "cdc51bb801c58a718df8f3ce76bfd3dd315618f7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=37225288be1f29ce15ad24855cdbbf06ba5890c8", "patch": "@@ -328,7 +328,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             derived: clean::detect_derived(attrs.as_slice()),\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n-                    clean::TraitBound(ty) => ty,\n+                    clean::TraitBound(polyt) => polyt.trait_,\n                     clean::RegionBound(..) => unreachable!(),\n                 }\n             }),"}, {"sha": "749686fa28351b5c72a435216e45f8291b9df327", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37225288be1f29ce15ad24855cdbbf06ba5890c8", "patch": "@@ -43,8 +43,7 @@ use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n use rustc::middle::def;\n-use rustc::middle::subst;\n-use rustc::middle::subst::VecPerParamSpace;\n+use rustc::middle::subst::{mod, ParamSpace, VecPerParamSpace};\n use rustc::middle::ty;\n use rustc::middle::stability;\n use rustc::session::config;\n@@ -493,7 +492,7 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n #[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n-    TraitBound(Type)\n+    TraitBound(PolyTrait)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n@@ -558,10 +557,13 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n         let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(did,\n                                                                 (fqn, TypeTrait));\n-        TraitBound(ResolvedPath {\n-            path: path,\n-            typarams: None,\n-            did: did,\n+        TraitBound(PolyTrait {\n+            trait_: ResolvedPath {\n+                path: path,\n+                typarams: None,\n+                did: did,\n+            },\n+            lifetimes: vec![]\n         })\n     }\n }\n@@ -585,10 +587,31 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n                                  &self.substs);\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(self.def_id,\n                                                             (fqn, TypeTrait));\n-        TraitBound(ResolvedPath {\n-            path: path,\n-            typarams: None,\n-            did: self.def_id,\n+\n+        debug!(\"ty::TraitRef\\n  substs.types(TypeSpace): {}\\n\",\n+               self.substs.types.get_slice(ParamSpace::TypeSpace));\n+\n+        // collect any late bound regions\n+        let mut late_bounds = vec![];\n+        for &ty_s in self.substs.types.get_slice(ParamSpace::TypeSpace).iter() {\n+            use rustc::middle::ty::{Region, sty};\n+            if let sty::ty_tup(ref ts) = ty_s.sty {\n+                for &ty_s in ts.iter() {\n+                    if let sty::ty_rptr(ref reg, _) = ty_s.sty {\n+                        if let &Region::ReLateBound(_, _) = reg {\n+                            debug!(\"  hit an ReLateBound {}\", reg);\n+                            if let Some(lt) = reg.clean(cx) {\n+                                late_bounds.push(lt)\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        TraitBound(PolyTrait {\n+            trait_: ResolvedPath { path: path, typarams: None, did: self.def_id, },\n+            lifetimes: late_bounds\n         })\n     }\n }\n@@ -615,7 +638,7 @@ impl<'tcx> Clean<(Vec<TyParamBound>, Option<Type>)> for ty::ParamBounds<'tcx> {\n             (v, None)\n         } else {\n             let ty = match ty::BoundSized.clean(cx) {\n-                TraitBound(ty) => ty,\n+                TraitBound(polyt) => polyt.trait_,\n                 _ => unreachable!()\n             };\n             (v, Some(ty))\n@@ -627,7 +650,10 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().iter().filter_map(|r| r.clean(cx)).map(RegionBound));\n-        v.extend(self.types.iter().map(|t| TraitBound(t.clean(cx))));\n+        v.extend(self.types.iter().map(|t| TraitBound(PolyTrait {\n+            trait_: t.clean(cx),\n+            lifetimes: vec![]\n+        })));\n         if v.len() > 0 {Some(v)} else {None}\n     }\n }\n@@ -1006,9 +1032,12 @@ impl Clean<Type> for ast::TraitRef {\n     }\n }\n \n-impl Clean<Type> for ast::PolyTraitRef {\n-    fn clean(&self, cx: &DocContext) -> Type {\n-        self.trait_ref.clean(cx)\n+impl Clean<PolyTrait> for ast::PolyTraitRef {\n+    fn clean(&self, cx: &DocContext) -> PolyTrait {\n+        PolyTrait {\n+            trait_: self.trait_ref.clean(cx),\n+            lifetimes: self.bound_lifetimes.clean(cx)\n+        }\n     }\n }\n \n@@ -1129,6 +1158,13 @@ impl<'tcx> Clean<Item> for ty::ImplOrTraitItem<'tcx> {\n     }\n }\n \n+/// A trait reference, which may have higher ranked lifetimes.\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+pub struct PolyTrait {\n+    pub trait_: Type,\n+    pub lifetimes: Vec<Lifetime>\n+}\n+\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes."}, {"sha": "83f760f15f63a6b8465f61f8d16111018c53803f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37225288be1f29ce15ad24855cdbbf06ba5890c8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=37225288be1f29ce15ad24855cdbbf06ba5890c8", "patch": "@@ -142,6 +142,22 @@ impl fmt::Show for clean::Lifetime {\n     }\n }\n \n+impl fmt::Show for clean::PolyTrait {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if self.lifetimes.len() > 0 {\n+            try!(f.write(\"for&lt;\".as_bytes()));\n+            for (i, lt) in self.lifetimes.iter().enumerate() {\n+                if i > 0 {\n+                    try!(f.write(\", \".as_bytes()));\n+                }\n+                try!(write!(f, \"{}\", lt));\n+            }\n+            try!(f.write(\"&gt; \".as_bytes()));\n+        }\n+        write!(f, \"{}\", self.trait_)\n+    }\n+}\n+\n impl fmt::Show for clean::TyParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -389,15 +405,6 @@ impl fmt::Show for clean::Type {\n                 try!(resolved_path(f, did, path, false));\n                 tybounds(f, typarams)\n             }\n-            clean::PolyTraitRef(ref bounds) => {\n-                for (i, bound) in bounds.iter().enumerate() {\n-                    if i != 0 {\n-                        try!(write!(f, \" + \"));\n-                    }\n-                    try!(write!(f, \"{}\", *bound));\n-                }\n-                Ok(())\n-            }\n             clean::Infer => write!(f, \"_\"),\n             clean::Self(..) => f.write(\"Self\".as_bytes()),\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n@@ -505,6 +512,15 @@ impl fmt::Show for clean::Type {\n                     }\n                 }\n             }\n+            clean::PolyTraitRef(ref bounds) => {\n+                for (i, bound) in bounds.iter().enumerate() {\n+                    if i != 0 {\n+                        try!(write!(f, \" + \"));\n+                    }\n+                    try!(write!(f, \"{}\", *bound));\n+                }\n+                Ok(())\n+            }\n             clean::QPath { ref name, ref self_type, ref trait_ } => {\n                 write!(f, \"&lt;{} as {}&gt;::{}\", self_type, trait_, name)\n             }"}]}