{"sha": "b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "node_id": "C_kwDOAAsO6NoAKGIxYzlhNmJhNjRkM2NhOWQ1Mzk5NDdkYzcyYmFjZjBiZTg5NjVlNTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-11T08:03:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T08:03:50Z"}, "message": "Merge #11957\n\n11957: fix panic on GAT r=flodiebold a=skyzh\n\nSigned-off-by: Alex Chi <iskyzh@gmail.com>\r\n\r\nThis is still a workaround on GAT panic, and didn't solve the full problem. But at least we won't panic now. False positive is better than panicking and letting VSCode constantly pop out the warning \ud83e\udd23\r\n\r\nThis PR is simple -- only apply the https://github.com/rust-analyzer/rust-analyzer/pull/11878 fix on const generics. For normal GATs, just follow the previous approach.\r\n\r\nThis PR fixes https://github.com/rust-analyzer/rust-analyzer/issues/11939, I've added it as a test case.\r\n\r\nThis PR didn't fully fix / https://github.com/rust-analyzer/rust-analyzer/issues/11923. But at least it won't panic now -- will only give a type mismatch error.\r\n\r\nNot sure if it fixes / https://github.com/rust-analyzer/rust-analyzer/issues/11921, I'll test it later.\r\n\r\ncc `@flodiebold` for review, thanks!\n\nCo-authored-by: Alex Chi <iskyzh@gmail.com>", "tree": {"sha": "0725e36e04747d16ad60f3ed737969cb1b1ebc35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0725e36e04747d16ad60f3ed737969cb1b1ebc35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiU+DmCRBK7hj4Ov3rIwAA9QAIACnp/Tv545YdKlvuASLmlOK0\nNq5WVClCWe9pzYBgiYua4mJMiWjDXwnxdKHD5HkJBKYgEKgafVIdwW9OV3F7tjtY\nlQjoZWtLqO23LCubrWZzsWdpXRFlXdnxOc5Sk4NVOKEbGo+TIf+VJ5MF98bqu00S\ni2QOYx0Gv5zxhFW/Ho5EhHjvzLvEOze3cumxvyRk631NbuTWUDw8QAAqkt3xm8Q8\nhVvXgdBkH6LUefyn6nhVvKdlufS9b3ZfJecgsISteGhz2bvscMzG25dihzSrv6aq\nbxvWrkyL6AcCOtgmhB4bIWSBjJkB8MJh6RPM8qQE2NzQKmgKVMQFULO3Bg/EcBk=\n=lW67\n-----END PGP SIGNATURE-----\n", "payload": "tree 0725e36e04747d16ad60f3ed737969cb1b1ebc35\nparent 24cf957627d5ede1b395f92ff871fd7a281d49a4\nparent 51d66714aca5886382c92ea929cc59c1c3b166d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649664230 +0000\ncommitter GitHub <noreply@github.com> 1649664230 +0000\n\nMerge #11957\n\n11957: fix panic on GAT r=flodiebold a=skyzh\n\nSigned-off-by: Alex Chi <iskyzh@gmail.com>\r\n\r\nThis is still a workaround on GAT panic, and didn't solve the full problem. But at least we won't panic now. False positive is better than panicking and letting VSCode constantly pop out the warning \ud83e\udd23\r\n\r\nThis PR is simple -- only apply the https://github.com/rust-analyzer/rust-analyzer/pull/11878 fix on const generics. For normal GATs, just follow the previous approach.\r\n\r\nThis PR fixes https://github.com/rust-analyzer/rust-analyzer/issues/11939, I've added it as a test case.\r\n\r\nThis PR didn't fully fix / https://github.com/rust-analyzer/rust-analyzer/issues/11923. But at least it won't panic now -- will only give a type mismatch error.\r\n\r\nNot sure if it fixes / https://github.com/rust-analyzer/rust-analyzer/issues/11921, I'll test it later.\r\n\r\ncc `@flodiebold` for review, thanks!\n\nCo-authored-by: Alex Chi <iskyzh@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "html_url": "https://github.com/rust-lang/rust/commit/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24cf957627d5ede1b395f92ff871fd7a281d49a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cf957627d5ede1b395f92ff871fd7a281d49a4", "html_url": "https://github.com/rust-lang/rust/commit/24cf957627d5ede1b395f92ff871fd7a281d49a4"}, {"sha": "51d66714aca5886382c92ea929cc59c1c3b166d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d66714aca5886382c92ea929cc59c1c3b166d9", "html_url": "https://github.com/rust-lang/rust/commit/51d66714aca5886382c92ea929cc59c1c3b166d9"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "c3c934c4680c1546abeabde089792d753c6dd7ed", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "patch": "@@ -1471,7 +1471,7 @@ fn regression_11688_3() {\n }\n \n #[test]\n-fn gat_crash() {\n+fn gat_crash_1() {\n     cov_mark::check!(ignore_gats);\n     check_no_mismatches(\n         r#\"\n@@ -1489,6 +1489,26 @@ fn test<T: Crash>() {\n     );\n }\n \n+#[test]\n+fn gat_crash_2() {\n+    check_no_mismatches(\n+        r#\"\n+pub struct InlineStorage {}\n+\n+pub struct InlineStorageHandle<T: ?Sized> {}\n+\n+pub unsafe trait Storage {\n+    type Handle<T: ?Sized>;\n+    fn create<T: ?Sized>() -> Self::Handle<T>;\n+}\n+\n+unsafe impl Storage for InlineStorage {\n+    type Handle<T: ?Sized> = InlineStorageHandle<T>;\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn cfgd_out_self_param() {\n     cov_mark::check!(cfgd_out_self_param);"}, {"sha": "bdb7677f5d7863e1e7b67067a5d702d89a3db663", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c9a6ba64d3ca9d539947dc72bacf0be8965e55/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=b1c9a6ba64d3ca9d539947dc72bacf0be8965e55", "patch": "@@ -176,13 +176,22 @@ pub(super) fn associated_type_by_name_including_super_traits(\n pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n     if parent_generics.is_some() && matches!(def, GenericDefId::TypeAliasId(_)) {\n-        // XXX: treat generic associated types as not existing to avoid crashes (#)\n-        //\n-        // Chalk expects the inner associated type's parameters to come\n-        // *before*, not after the trait's generics as we've always done it.\n-        // Adapting to this requires a larger refactoring\n-        cov_mark::hit!(ignore_gats);\n-        return Generics { def, params: Interned::new(Default::default()), parent_generics };\n+        let params = db.generic_params(def);\n+        if params\n+            .type_or_consts\n+            .iter()\n+            .any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)))\n+        {\n+            // XXX: treat const generic associated types as not existing to avoid crashes (#11769)\n+            //\n+            // Chalk expects the inner associated type's parameters to come\n+            // *before*, not after the trait's generics as we've always done it.\n+            // Adapting to this requires a larger refactoring\n+            cov_mark::hit!(ignore_gats);\n+            return Generics { def, params: Interned::new(Default::default()), parent_generics };\n+        } else {\n+            return Generics { def, params, parent_generics };\n+        }\n     }\n     Generics { def, params: db.generic_params(def), parent_generics }\n }"}]}