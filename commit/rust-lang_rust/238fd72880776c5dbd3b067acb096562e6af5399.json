{"sha": "238fd72880776c5dbd3b067acb096562e6af5399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOGZkNzI4ODA3NzZjNWRiZDNiMDY3YWNiMDk2NTYyZTZhZjUzOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T16:50:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T16:50:33Z"}, "message": "Auto merge of #86572 - rylev:force-warnings-always, r=nikomatsakis\n\nForce warnings even when can_emit_warnings == false\n\nFixes an issue mentioned in #85512 with --cap-lints overriding --force-warnings.\n\nFixes https://github.com/rust-lang/rust/issues/86751\n\nr? `@ehuss`", "tree": {"sha": "edf6a2c2caf93943ea31145691d962592833a3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf6a2c2caf93943ea31145691d962592833a3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238fd72880776c5dbd3b067acb096562e6af5399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238fd72880776c5dbd3b067acb096562e6af5399", "html_url": "https://github.com/rust-lang/rust/commit/238fd72880776c5dbd3b067acb096562e6af5399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238fd72880776c5dbd3b067acb096562e6af5399/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09dad3eddfc46c55e45f6c1a00bab09401684b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09dad3eddfc46c55e45f6c1a00bab09401684b4", "html_url": "https://github.com/rust-lang/rust/commit/b09dad3eddfc46c55e45f6c1a00bab09401684b4"}, {"sha": "5af5a6d49dd5a72c7c4f48ba9749b84002e0b99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af5a6d49dd5a72c7c4f48ba9749b84002e0b99e", "html_url": "https://github.com/rust-lang/rust/commit/5af5a6d49dd5a72c7c4f48ba9749b84002e0b99e"}], "stats": {"total": 128, "additions": 116, "deletions": 12}, "files": [{"sha": "2253007ce30276928bd9a74db9ee4a6621436dd6", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -145,8 +145,9 @@ impl AnnotateSnippetEmitterWriter {\n                 title: Some(Annotation {\n                     label: Some(&message),\n                     id: code.as_ref().map(|c| match c {\n-                        DiagnosticId::Error(val)\n-                        | DiagnosticId::Lint { name: val, has_future_breakage: _ } => val.as_str(),\n+                        DiagnosticId::Error(val) | DiagnosticId::Lint { name: val, .. } => {\n+                            val.as_str()\n+                        }\n                     }),\n                     annotation_type: annotation_type_for_level(*level),\n                 }),"}, {"sha": "45661ac15623f8bc61f6e632887a73c098c123d7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -29,7 +29,7 @@ pub struct Diagnostic {\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n pub enum DiagnosticId {\n     Error(String),\n-    Lint { name: String, has_future_breakage: bool },\n+    Lint { name: String, has_future_breakage: bool, is_force_warn: bool },\n }\n \n /// A \"sub\"-diagnostic attached to a parent diagnostic.\n@@ -109,6 +109,13 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn is_force_warn(&self) -> bool {\n+        match self.code {\n+            Some(DiagnosticId::Lint { is_force_warn, .. }) => is_force_warn,\n+            _ => false,\n+        }\n+    }\n+\n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n     /// canceled or it will panic when dropped).\n     pub fn cancel(&mut self) {"}, {"sha": "485e7564587ea62925f834e6626cf5a8c476ecab", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -559,7 +559,7 @@ impl DiagnosticCode {\n         s.map(|s| {\n             let s = match s {\n                 DiagnosticId::Error(s) => s,\n-                DiagnosticId::Lint { name, has_future_breakage: _ } => name,\n+                DiagnosticId::Lint { name, .. } => name,\n             };\n             let je_result =\n                 je.registry.as_ref().map(|registry| registry.try_find_description(&s)).unwrap();"}, {"sha": "f8339d6e3f4935d07d0b74ab23a0e1821e4d933f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -520,12 +520,28 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n+    ///\n+    /// The builder will be canceled if warnings cannot be emitted.\n     pub fn struct_span_warn(&self, span: impl Into<MultiSpan>, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = self.struct_warn(msg);\n         result.set_span(span);\n         result\n     }\n \n+    /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n+    ///\n+    /// This will \"force\" the warning meaning it will not be canceled even\n+    /// if warnings cannot be emitted.\n+    pub fn struct_span_force_warn(\n+        &self,\n+        span: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_> {\n+        let mut result = self.struct_force_warn(msg);\n+        result.set_span(span);\n+        result\n+    }\n+\n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     pub fn struct_span_allow(\n         &self,\n@@ -551,6 +567,8 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Warning` level with the `msg`.\n+    ///\n+    /// The builder will be canceled if warnings cannot be emitted.\n     pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         if !self.flags.can_emit_warnings {\n@@ -559,6 +577,14 @@ impl Handler {\n         result\n     }\n \n+    /// Construct a builder at the `Warning` level with the `msg`.\n+    ///\n+    /// This will \"force\" a warning meaning it will not be canceled even\n+    /// if warnings cannot be emitted.\n+    pub fn struct_force_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        DiagnosticBuilder::new(self, Level::Warning, msg)\n+    }\n+\n     /// Construct a builder at the `Allow` level with the `msg`.\n     pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n@@ -801,7 +827,10 @@ impl HandlerInner {\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n \n-        if diagnostic.level == Warning && !self.flags.can_emit_warnings {\n+        if diagnostic.level == Warning\n+            && !self.flags.can_emit_warnings\n+            && !diagnostic.is_force_warn()\n+        {\n             if diagnostic.has_future_breakage() {\n                 (*TRACK_DIAGNOSTICS)(diagnostic);\n             }\n@@ -873,7 +902,7 @@ impl HandlerInner {\n \n         match (errors.len(), warnings.len()) {\n             (0, 0) => return,\n-            (0, _) => self.emit_diagnostic(&Diagnostic::new(Level::Warning, &warnings)),\n+            (0, _) => self.emitter.emit_diagnostic(&Diagnostic::new(Level::Warning, &warnings)),\n             (_, 0) => {\n                 let _ = self.fatal(&errors);\n             }"}, {"sha": "c9b6cee5debae0c4c662bd50dec257d9598e43e6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -111,8 +111,13 @@ impl LintLevelSets {\n             }\n         }\n \n-        // Ensure that we never exceed the `--cap-lints` argument.\n-        level = cmp::min(level, self.lint_cap);\n+        // Ensure that we never exceed the `--cap-lints` argument\n+        // unless the source is a --force-warn\n+        level = if let LintLevelSource::CommandLine(_, Level::ForceWarn) = src {\n+            level\n+        } else {\n+            cmp::min(level, self.lint_cap)\n+        };\n \n         if let Some(driver_level) = sess.driver_lint_caps.get(&LintId::of(lint)) {\n             // Ensure that we never exceed driver level.\n@@ -233,8 +238,10 @@ pub fn struct_lint_level<'s, 'd>(\n                     return;\n                 }\n             }\n-            (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n-            (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n+            (Level::Warn, Some(span)) => sess.struct_span_warn(span, \"\"),\n+            (Level::Warn, None) => sess.struct_warn(\"\"),\n+            (Level::ForceWarn, Some(span)) => sess.struct_span_force_warn(span, \"\"),\n+            (Level::ForceWarn, None) => sess.struct_force_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => sess.struct_span_err(span, \"\"),\n             (Level::Deny | Level::Forbid, None) => sess.struct_err(\"\"),\n         };\n@@ -324,7 +331,8 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n-        err.code(DiagnosticId::Lint { name, has_future_breakage });\n+        let is_force_warn = matches!(level, Level::ForceWarn);\n+        err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n \n         if let Some(future_incompatible) = future_incompatible {\n             let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {"}, {"sha": "8270bbbe8fd8001f15ac94b3bb0eedcc1eeb3eb8", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -324,7 +324,7 @@ impl Session {\n             .into_iter()\n             .map(|diag| {\n                 let lint_name = match &diag.code {\n-                    Some(DiagnosticId::Lint { name, has_future_breakage: true }) => name,\n+                    Some(DiagnosticId::Lint { name, has_future_breakage: true, .. }) => name,\n                     _ => panic!(\"Unexpected code in diagnostic {:?}\", diag),\n                 };\n                 let lint = lint_store.name_to_lint(&lint_name);\n@@ -351,6 +351,13 @@ impl Session {\n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n+    pub fn struct_span_force_warn<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_> {\n+        self.diagnostic().struct_span_force_warn(sp, msg)\n+    }\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -362,6 +369,9 @@ impl Session {\n     pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n+    pub fn struct_force_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        self.diagnostic().struct_force_warn(msg)\n+    }\n     pub fn struct_span_allow<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }"}, {"sha": "bcfe6e5a5bd6e8a4b61bee859b3d59b6d5933ba0", "filename": "src/test/ui/lint/force-warn/force-warn-cap-lints-warn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: --cap-lints warn  --force-warns rust-2021-compatibility -Zunstable-options\n+// check-pass\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+pub fn f() -> bool {\n+    let x = 123;\n+    match x {\n+        0...100 => true,\n+        //~^ WARN range patterns are deprecated\n+        //~| WARN this is accepted in the current edition\n+        _ => false,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "07e786ce7d2663745aac2ab0dfb9c7b5c52d5afe", "filename": "src/test/ui/lint/force-warn/force-warn-cap-lints-warn.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -0,0 +1,12 @@\n+warning: `...` range patterns are deprecated\n+  --> $DIR/force-warn-cap-lints-warn.rs:8:10\n+   |\n+LL |         0...100 => true,\n+   |          ^^^ help: use `..=` for an inclusive range\n+   |\n+   = note: `--force-warns ellipsis-inclusive-range-patterns` implied by `--force-warns rust-2021-compatibility`\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e364897ec4ecb3e30328f39ebedc99a482cb9dd2", "filename": "src/test/ui/lint/force-warn/force-warns-cap-lints-allow.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.rs?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --cap-lints allow  --force-warns bare_trait_objects -Zunstable-options\n+// check-pass\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+\n+fn main() {}"}, {"sha": "21532024f1c4ae90ba8090d5a4d582f3f6b91efa", "filename": "src/test/ui/lint/force-warn/force-warns-cap-lints-allow.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/238fd72880776c5dbd3b067acb096562e6af5399/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints-allow.stderr?ref=238fd72880776c5dbd3b067acb096562e6af5399", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-warns-cap-lints-allow.rs:6:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: requested on the command line with `--force-warns bare-trait-objects`\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}]}