{"sha": "6fede93475013a5a8bef1678dfd04fef3118836e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZWRlOTM0NzUwMTNhNWE4YmVmMTY3OGRmZDA0ZmVmMzExODgzNmU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-17T23:55:34Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:27Z"}, "message": "Make the crate and its exported items available in the lint context", "tree": {"sha": "4acce7c64ff9c1b05012acc0643cc3c4fc72c07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4acce7c64ff9c1b05012acc0643cc3c4fc72c07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fede93475013a5a8bef1678dfd04fef3118836e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fede93475013a5a8bef1678dfd04fef3118836e", "html_url": "https://github.com/rust-lang/rust/commit/6fede93475013a5a8bef1678dfd04fef3118836e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fede93475013a5a8bef1678dfd04fef3118836e/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a813a3779be2266cf936ee87907595c356f3afbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a813a3779be2266cf936ee87907595c356f3afbc", "html_url": "https://github.com/rust-lang/rust/commit/a813a3779be2266cf936ee87907595c356f3afbc"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "ee0973c90bbfe7d0ffde769e587e05d6fa217bcb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fede93475013a5a8bef1678dfd04fef3118836e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fede93475013a5a8bef1678dfd04fef3118836e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6fede93475013a5a8bef1678dfd04fef3118836e", "patch": "@@ -1238,9 +1238,6 @@ declare_lint!(MISSING_DOC, Allow,\n     \"detects missing documentation for public members\")\n \n pub struct MissingDoc {\n-    /// Set of nodes exported from this module.\n-    exported_items: Option<ExportedItems>,\n-\n     /// Stack of IDs of struct definitions.\n     struct_def_stack: Vec<ast::NodeId>,\n \n@@ -1252,7 +1249,6 @@ pub struct MissingDoc {\n impl MissingDoc {\n     pub fn new() -> MissingDoc {\n         MissingDoc {\n-            exported_items: None,\n             struct_def_stack: vec!(),\n             doc_hidden_stack: vec!(false),\n         }\n@@ -1278,9 +1274,8 @@ impl MissingDoc {\n         // Only check publicly-visible items, using the result from the privacy pass.\n         // It's an option so the crate root can also use this function (it doesn't\n         // have a NodeId).\n-        let exported = self.exported_items.as_ref().expect(\"exported_items not set\");\n         match id {\n-            Some(ref id) if !exported.contains(id) => return,\n+            Some(ref id) if !cx.exported_items.contains(id) => return,\n             _ => ()\n         }\n \n@@ -1327,10 +1322,7 @@ impl LintPass for MissingDoc {\n         assert!(popped == id);\n     }\n \n-    fn check_crate(&mut self, cx: &Context, exported: &ExportedItems, krate: &ast::Crate) {\n-        // FIXME: clone to avoid lifetime trickiness\n-        self.exported_items = Some(exported.clone());\n-\n+    fn check_crate(&mut self, cx: &Context, _: &ExportedItems, krate: &ast::Crate) {\n         self.check_missing_doc_attrs(cx, None, krate.attrs.as_slice(),\n             krate.span, \"crate\");\n     }"}, {"sha": "fcb2ca803320eafa0a5c4dd0043d8fae81bb2a8b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fede93475013a5a8bef1678dfd04fef3118836e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fede93475013a5a8bef1678dfd04fef3118836e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6fede93475013a5a8bef1678dfd04fef3118836e", "patch": "@@ -170,6 +170,12 @@ pub struct Context<'a> {\n     /// Type context we're checking in.\n     pub tcx: &'a ty::ctxt,\n \n+    /// The crate being checked.\n+    pub krate: &'a ast::Crate,\n+\n+    /// Items exported from the crate being checked.\n+    pub exported_items: &'a ExportedItems,\n+\n     /// The store of registered lints.\n     lints: LintStore,\n \n@@ -275,14 +281,18 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n }\n \n impl<'a> Context<'a> {\n-    fn new(tcx: &'a ty::ctxt) -> Context<'a> {\n+    fn new(tcx: &'a ty::ctxt,\n+           krate: &'a ast::Crate,\n+           exported_items: &'a ExportedItems) -> Context<'a> {\n         // We want to own the lint store, so move it out of the session.\n         let lint_store = mem::replace(&mut *tcx.sess.lint_store.borrow_mut(),\n             LintStore::new());\n \n         Context {\n-            lints: lint_store,\n             tcx: tcx,\n+            krate: krate,\n+            exported_items: exported_items,\n+            lints: lint_store,\n             level_stack: vec!(),\n             node_levels: RefCell::new(HashMap::new()),\n         }\n@@ -619,7 +629,7 @@ impl LintPass for GatherNodeLevels {\n pub fn check_crate(tcx: &ty::ctxt,\n                    krate: &ast::Crate,\n                    exported_items: &ExportedItems) {\n-    let mut cx = Context::new(tcx);\n+    let mut cx = Context::new(tcx, krate, exported_items);\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(krate.attrs.as_slice(), |cx| {"}]}