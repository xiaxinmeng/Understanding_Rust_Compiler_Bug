{"sha": "f30382d624d4a523262df05234b1c20b7de4ac0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDM4MmQ2MjRkNGE1MjMyNjJkZjA1MjM0YjFjMjBiN2RlNGFjMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-21T02:16:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-21T02:16:15Z"}, "message": "auto merge of #13823 : pnkfelix/rust/fsk-fix-13805, r=alexcrichton\n\nMake configure script respect (and save) values for `CC`, `CXX`, `CFLAGS` etc.\r\n\r\nI mostly tried to remain backwards compatible with old invocations of\r\nthe `configure` script; if you do not want to use `CC` et al., you\r\nshould not have to; you can keep using `--enable-clang` and/or\r\n`--enable-ccache`.\r\n\r\nThe overall intention is to capture the following precedences for\r\nguessing the C compiler:\r\n\r\n 1. Value of `CC` at `make` invocation time.\r\n 2. Value of `CC` at `configure` invocation time.\r\n 3. Compiler inferred at configure invocation time (`gcc` or `clang`).\r\n\r\nThe strategy is to check (at `configure` time) if each of the\r\nenvironment variables is set, and if so, save its value in a\r\ncorresponding `CFG_` variable (e.g. `CFG_CC`).\r\n\r\nThe `configure` script also does not attempt to infer the compiler if\r\n`CC` is set; but if `--enable-clang` was passed, then it *does* still\r\nattempt to validate that the clang version is compatible.\r\n\r\nThen, in the makefiles, if `CC` is not set but `CFG_CC` is, then we\r\nuse the `CFG_CC` setting as `CC`.\r\n\r\nFix #13805.", "tree": {"sha": "df2ca8b7d2201e16d1fa23c7b6a6c672eb240a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2ca8b7d2201e16d1fa23c7b6a6c672eb240a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30382d624d4a523262df05234b1c20b7de4ac0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30382d624d4a523262df05234b1c20b7de4ac0c", "html_url": "https://github.com/rust-lang/rust/commit/f30382d624d4a523262df05234b1c20b7de4ac0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30382d624d4a523262df05234b1c20b7de4ac0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e546452727379f701f2104eb826141a29d4b39fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e546452727379f701f2104eb826141a29d4b39fd", "html_url": "https://github.com/rust-lang/rust/commit/e546452727379f701f2104eb826141a29d4b39fd"}, {"sha": "ae67b74ec826cfc00467b9d4355beb307315d08b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae67b74ec826cfc00467b9d4355beb307315d08b", "html_url": "https://github.com/rust-lang/rust/commit/ae67b74ec826cfc00467b9d4355beb307315d08b"}], "stats": {"total": 294, "additions": 176, "deletions": 118}, "files": [{"sha": "f4cac4cbe85ae261c13326cd90e7aeef28016d25", "filename": "configure", "status": "modified", "additions": 119, "deletions": 31, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/f30382d624d4a523262df05234b1c20b7de4ac0c/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f30382d624d4a523262df05234b1c20b7de4ac0c/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f30382d624d4a523262df05234b1c20b7de4ac0c", "patch": "@@ -223,6 +223,30 @@ opt() {\n      fi\n }\n \n+envopt() {\n+    local NAME=$1\n+    local V=\"CFG_${NAME}\"\n+    eval VV=\\$$V\n+\n+    # If configure didn't set a value already, then check environment.\n+    #\n+    # (It is recommended that the configure script always check the\n+    # environment before setting any values to envopt variables; see\n+    # e.g.  how CFG_CC is handled, where it first checks `-z \"$CC\"`,\n+    # and issues msg if it ends up employing that provided value.)\n+    if [ -z \"$VV\" ]\n+    then\n+        eval $V=\\$$NAME\n+        eval VV=\\$$V\n+    fi\n+\n+    # If script or environment provided a value, save it.\n+    if [ ! -z \"$VV\" ]\n+    then\n+        putvar $V\n+    fi\n+}\n+\n msg \"looking for configure programs\"\n need_cmd cmp\n need_cmd mkdir\n@@ -621,7 +645,7 @@ then\n             if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n                 (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))) then\n                 err \"the gcc and g++ in your path point to different compilers.\n-    Check which versions are in your path with  cc --version and g++ --version.\n+    Check which versions are in your path with gcc --version and g++ --version.\n     To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n             fi\n \n@@ -646,41 +670,101 @@ then\n     esac\n fi\n \n-if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+# Even when the user overrides the choice of CC, still try to detect\n+# clang to disable some clang-specific warnings.  We here draw a\n+# distinction between:\n+#\n+#  CFG_ENABLE_CLANG : passed --enable-clang, or host \"requires\" clang,\n+#  CFG_USING_CLANG : compiler (clang / gcc / $CC) looks like clang.\n+#\n+# This distinction is important because there are some safeguards we\n+# would prefer to skip when merely CFG_USING_CLANG is set; but when\n+# CFG_ENABLE_CLANG is set, that indicates that we are opting into\n+# running such safeguards.\n+\n+if [ ! -z \"$CC\" ]\n then\n-    if [ -z \"$CFG_CLANG\" ]\n+    msg \"skipping compiler inference steps; using provided CC=$CC\"\n+    CFG_CC=\"$CC\"\n+\n+    CFG_OSX_CC_VERSION=$(\"$CFG_CC\" --version 2>&1 | grep \"clang\")\n+    if [ $? -eq 0 ]\n     then\n-        err \"clang requested but not found\"\n+        step_msg \"note, user-provided CC looks like clang; CC=$CC.\"\n+        CFG_USING_CLANG=1\n+        putvar CFG_USING_CLANG\n     fi\n-    CFG_CLANG_VERSION=$(\"$CFG_CLANG\" \\\n-                      --version \\\n-                      | grep version \\\n-                      | sed 's/.*\\(version .*\\)/\\1/; s/.*based on \\(LLVM .*\\))/\\1/' \\\n-                      | cut -d ' ' -f 2)\n-\n-    case $CFG_CLANG_VERSION in\n-        (3.0svn | 3.0 | 3.1* | 3.2* | 3.3* | 3.4* | 3.5* )\n-        step_msg \"found ok version of CLANG: $CFG_CLANG_VERSION\"\n-        CFG_C_COMPILER=\"clang\"\n-        ;;\n-        (*)\n-        err \"bad CLANG version: $CFG_CLANG_VERSION, need >=3.0svn\"\n-        ;;\n-    esac\n else\n-    CFG_C_COMPILER=\"gcc\"\n+    if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+    then\n+        if [ -z \"$CFG_CLANG\" ]\n+        then\n+            err \"clang requested but not found\"\n+        fi\n+        CFG_CC=\"$CFG_CLANG\"\n+        CFG_USING_CLANG=1\n+        putvar CFG_USING_CLANG\n+    else\n+        CFG_CC=\"gcc\"\n+    fi\n+fi\n+\n+if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+then\n+    if [ -z \"$CC\" ] || [[ $CC == *clang ]]\n+    then\n+        CFG_CLANG_VERSION=$($CFG_CC \\\n+            --version \\\n+            | grep version \\\n+            | sed 's/.*\\(version .*\\)/\\1/; s/.*based on \\(LLVM .*\\))/\\1/' \\\n+            | cut -d ' ' -f 2)\n+\n+        case $CFG_CLANG_VERSION in\n+            (3.0svn | 3.0 | 3.1* | 3.2* | 3.3* | 3.4* | 3.5* )\n+            step_msg \"found ok version of CLANG: $CFG_CLANG_VERSION\"\n+            if [ -z \"$CC\" ]\n+            then\n+                CFG_CC=\"clang\"\n+            fi\n+            ;;\n+            (*)\n+            err \"bad CLANG version: $CFG_CLANG_VERSION, need >=3.0svn\"\n+            ;;\n+        esac\n+    else\n+        msg \"skipping CFG_ENABLE_CLANG version check; provided CC=$CC\"\n+    fi\n fi\n \n if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n then\n-    if [ -z \"$CFG_CCACHE\" ]\n+    if [ -z \"$CC\" ]\n     then\n-        err \"ccache requested but not found\"\n+        if [ -z \"$CFG_CCACHE\" ]\n+        then\n+            err \"ccache requested but not found\"\n+        fi\n+\n+        CFG_CC=\"ccache $CFG_CC\"\n     fi\n+fi\n \n-    CFG_C_COMPILER=\"ccache $CFG_C_COMPILER\"\n+if [ -z \"$CC\" -a -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n+then\n+    err \"either clang or gcc is required\"\n fi\n \n+# All safeguards based on $CFG_ENABLE_CLANG should occur before this\n+# point in the script; after this point, script logic should inspect\n+# $CFG_USING_CLANG rather than $CFG_ENABLE_CLANG.\n+\n+# Set CFG_{CC,CXX,CPP,CFLAGS,CXXFLAGS}\n+envopt CC\n+envopt CXX\n+envopt CPP\n+envopt CFLAGS\n+envopt CXXFLAGS\n+\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n@@ -742,11 +826,6 @@ do\n     esac\n done\n \n-if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n-then\n-    err \"either clang or gcc is required\"\n-fi\n-\n if [ ! -z \"$CFG_PERF\" ]\n then\n     HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`\n@@ -961,7 +1040,7 @@ do\n             ;;\n         esac\n \n-        case \"$CFG_C_COMPILER\" in\n+        case \"$CFG_CC\" in\n             (\"ccache clang\")\n             LLVM_CXX_32=\"ccache clang++ -m32 -Qunused-arguments\"\n             LLVM_CC_32=\"ccache clang -m32 -Qunused-arguments\"\n@@ -991,6 +1070,16 @@ do\n \n             LLVM_CXX_64=\"g++\"\n             LLVM_CC_64=\"gcc\"\n+            ;;\n+\n+            (*)\n+            msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n+            LLVM_CXX_32=\"$CXX -m32\"\n+            LLVM_CC_32=\"$CC -m32\"\n+\n+            LLVM_CXX_64=\"$CXX\"\n+            LLVM_CC_64=\"$CC\"\n+            ;;\n         esac\n \n         LLVM_CFLAGS_32=\"-m32\"\n@@ -1073,7 +1162,6 @@ putvar CFG_PREFIX\n putvar CFG_BUILD\n putvar CFG_HOST\n putvar CFG_TARGET\n-putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n putvar CFG_LIBDIR_RELATIVE\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n@@ -1084,7 +1172,7 @@ putvar CFG_DISABLE_INJECT_STD_VERSION\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input.\n-if [ ! -z \"$CFG_ENABLE_CCACHE\" ] && [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+if [ ! -z \"$CFG_ENABLE_CCACHE\" ] && [ ! -z \"$CFG_USING_CLANG\" ]\n then\n     CFG_CCACHE_CPP2=1\n     putvar CFG_CCACHE_CPP2"}, {"sha": "ecc4c33d154841e80fceb022a67fafa549d3710e", "filename": "mk/platform.mk", "status": "modified", "additions": 57, "deletions": 87, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/f30382d624d4a523262df05234b1c20b7de4ac0c/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f30382d624d4a523262df05234b1c20b7de4ac0c/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=f30382d624d4a523262df05234b1c20b7de4ac0c", "patch": "@@ -81,57 +81,27 @@ CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n AR := ar\n \n-CFG_INFO := $(info cfg: using $(CFG_C_COMPILER))\n-ifeq ($(CFG_C_COMPILER),clang)\n-  # The -Qunused-arguments sidesteps spurious warnings from clang\n-  ifeq ($(origin CC),default)\n-    CC=clang -Qunused-arguments\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=clang++ -Qunused-arguments\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=clang -Qunused-arguments\n-  endif\n-else\n-ifeq ($(CFG_C_COMPILER),gcc)\n-  ifeq ($(origin CC),default)\n-    CC=gcc\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=g++\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=gcc\n+define SET_FROM_CFG\n+  ifdef CFG_$(1)\n+    ifeq ($(origin $(1)),undefined)\n+      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n+      $(1)=$(CFG_$(1))\n+    endif\n+    ifeq ($(origin $(1)),default)\n+      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n+      $(1)=$(CFG_$(1))\n+    endif\n   endif\n-else\n-ifeq ($(CFG_C_COMPILER),ccache clang)\n+endef\n+\n+$(foreach cvar,CC CXX CPP CFLAGS CXXFLAGS CPPFLAGS,\\\n+  $(eval $(call SET_FROM_CFG,$(cvar))))\n+\n+ifeq ($(CFG_USING_CLANG),1)\n   # The -Qunused-arguments sidesteps spurious warnings from clang\n-  ifeq ($(origin CC),default)\n-    CC=ccache clang -Qunused-arguments\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=ccache clang++ -Qunused-arguments\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=ccache clang -Qunused-arguments\n-  endif\n-else\n-ifeq ($(CFG_C_COMPILER),ccache gcc)\n-  ifeq ($(origin CC),default)\n-    CC=ccache gcc\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=ccache g++\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=ccache gcc\n-  endif\n-else\n-  CFG_ERR := $(error please try on a system with gcc or clang)\n-endif\n-endif\n-endif\n+  CFLAGS += -Qunused-arguments\n+  CXXFLAGS += -Qunused-arguments\n+  CPPFLAGS += -Qunused-arguments\n endif\n \n CFG_RLIB_GLOB=lib$(1)-*.rlib\n@@ -173,9 +143,9 @@ CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n CFG_STATIC_LIB_NAME_i686-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i686-unknown-linux-gnu := -m32\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32\n-CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti\n+CFG_CFLAGS_i686-unknown-linux-gnu := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-whole-archive\n@@ -203,9 +173,9 @@ AR_arm-apple-darwin = $(shell xcrun -find -sdk iphoneos ar)\n CFG_LIB_NAME_arm-apple-darwin = lib$(1).dylib\n CFG_LIB_GLOB_arm-apple-darwin = lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_arm-apple-darwin = lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_arm-apple-darwin := $(CFG_IOS_FLAGS)\n-CFG_GCCISH_CFLAGS_arm-apple-darwin := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS)\n-CFG_GCCISH_CXXFLAGS_arm-apple-darwin := -fno-rtti $(CFG_IOS_FLAGS)\n+CFG_CFLAGS_arm-apple-darwin := $(CFG_IOS_FLAGS) $(CFLAGS)\n+CFG_GCCISH_CFLAGS_arm-apple-darwin := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS) $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_arm-apple-darwin := -fno-rtti $(CFG_IOS_FLAGS) $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_arm-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-darwin :=\n@@ -232,9 +202,9 @@ CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n CFG_STATIC_LIB_NAME_x86_64-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_x86_64-apple-darwin := -m64 -arch x86_64\n-CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64\n-CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti\n+CFG_CFLAGS_x86_64-apple-darwin := -m64 -arch x86_64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m64\n CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-darwin :=\n@@ -260,9 +230,9 @@ CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n CFG_STATIC_LIB_NAME_i686-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i686-apple-darwin := -m32 -arch i386\n-CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386\n-CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti\n+CFG_CFLAGS_i686-apple-darwin := -m32 -arch i386 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m32\n CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_i686-apple-darwin :=\n@@ -288,9 +258,9 @@ CFG_LIB_NAME_arm-linux-androideabi=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-linux-androideabi=lib$(1).a\n CFG_LIB_GLOB_arm-linux-androideabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-linux-androideabi=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_arm-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__\n-CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__\n-CFG_GCCISH_CXXFLAGS_arm-linux-androideabi := -fno-rtti\n+CFG_CFLAGS_arm-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n+CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_arm-linux-androideabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n CFG_GCCISH_DEF_FLAG_arm-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_arm-linux-androideabi := -Wl,-whole-archive\n@@ -319,9 +289,9 @@ CFG_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_arm-unknown-linux-gnueabihf := -D__arm__\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabihf := -fno-rtti\n+CFG_CFLAGS_arm-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS)\n+CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabihf := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabihf := -Wl,-whole-archive\n@@ -350,9 +320,9 @@ CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfpu=vfp\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfpu=vfp\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti\n+CFG_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfpu=vfp $(CFLAGS)\n+CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfpu=vfp $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabi := -Wl,-whole-archive\n@@ -380,9 +350,9 @@ CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n CFG_STATIC_LIB_NAME_mips-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_mips-unknown-linux-gnu := -mips32r2 -msoft-float -mabi=32 -mno-compact-eh\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 -mno-compact-eh\n-CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti\n+CFG_CFLAGS_mips-unknown-linux-gnu := -mips32r2 -msoft-float -mabi=32 -mno-compact-eh $(CFLAGS)\n+CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 -mno-compact-eh $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-whole-archive\n@@ -409,9 +379,9 @@ CFG_LIB_NAME_i686-pc-mingw32=$(1).dll\n CFG_STATIC_LIB_NAME_i686-pc-mingw32=$(1).lib\n CFG_LIB_GLOB_i686-pc-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i686-pc-mingw32=$(1)-*.dylib.dSYM\n-CFG_CFLAGS_mips-i686-pc-mingw32 := -m32 -march=i686 -D_WIN32_WINNT=0x0600\n-CFG_GCCISH_CFLAGS_i686-pc-mingw32 := -Wall -Werror -g -m32 -march=i686 -D_WIN32_WINNT=0x0600 -I$(CFG_SRC_DIR)src/etc/mingw-fix-include\n-CFG_GCCISH_CXXFLAGS_i686-pc-mingw32 := -fno-rtti\n+CFG_CFLAGS_mips-i686-pc-mingw32 := -m32 -march=i686 -D_WIN32_WINNT=0x0600 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-pc-mingw32 := -Wall -Werror -g -m32 -march=i686 -D_WIN32_WINNT=0x0600 -I$(CFG_SRC_DIR)src/etc/mingw-fix-include $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i686-pc-mingw32 := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-pc-mingw32 := -shared -fPIC -g -m32\n CFG_GCCISH_DEF_FLAG_i686-pc-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_i686-pc-mingw32 :=\n@@ -438,9 +408,9 @@ CFG_LIB_NAME_i586-mingw32msvc=$(1).dll\n CFG_STATIC_LIB_NAME_i586-mingw32msvc=$(1).lib\n CFG_LIB_GLOB_i586-mingw32msvc=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i586-mingw32msvc=$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i586-mingw32msvc := -march=i586 -m32\n-CFG_GCCISH_CFLAGS_i586-mingw32msvc := -Wall -Werror -g -march=i586 -m32\n-CFG_GCCISH_CXXFLAGS_i586-mingw32msvc := -fno-rtti\n+CFG_CFLAGS_i586-mingw32msvc := -march=i586 -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i586-mingw32msvc := -Wall -Werror -g -march=i586 -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i586-mingw32msvc := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i586-mingw32msvc := -shared -g -m32\n CFG_GCCISH_DEF_FLAG_i586-mingw32msvc :=\n CFG_GCCISH_PRE_LIB_FLAGS_i586-mingw32msvc :=\n@@ -469,9 +439,9 @@ CFG_LIB_NAME_i686-w64-mingw32=$(1).dll\n CFG_STATIC_LIB_NAME_i686-w64-mingw32=$(1).lib\n CFG_LIB_GLOB_i686-w64-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i686-w64-mingw32=$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i586-w64-mingw32 := -march=i586 -m32 -D_WIN32_WINNT=0x0600\n-CFG_GCCISH_CFLAGS_i686-w64-mingw32 := -Wall -Werror -g -m32 -D_WIN32_WINNT=0x0600\n-CFG_GCCISH_CXXFLAGS_i686-w64-mingw32 := -fno-rtti\n+CFG_CFLAGS_i586-w64-mingw32 := -march=i586 -m32 -D_WIN32_WINNT=0x0600 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-w64-mingw32 := -Wall -Werror -g -m32 -D_WIN32_WINNT=0x0600 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i686-w64-mingw32 := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-w64-mingw32 := -shared -g -m32\n CFG_GCCISH_DEF_FLAG_i686-w64-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_i686-w64-mingw32 :=\n@@ -499,9 +469,9 @@ CFG_LIB_NAME_x86_64-w64-mingw32=$(1).dll\n CFG_STATIC_LIB_NAME_x86_64-w64-mingw32=$(1).lib\n CFG_LIB_GLOB_x86_64-w64-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_x86_64-w64-mingw32=$(1)-*.dylib.dSYM\n-CFG_CFLAGS_x86_64-w64-mingw32 := -m64 -D_WIN32_WINNT=0x0600\n-CFG_GCCISH_CFLAGS_x86_64-w64-mingw32 := -Wall -Werror -g -m64 -D_WIN32_WINNT=0x0600\n-CFG_GCCISH_CXXFLAGS_x86_64-w64-mingw32 := -fno-rtti\n+CFG_CFLAGS_x86_64-w64-mingw32 := -m64 -D_WIN32_WINNT=0x0600 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-w64-mingw32 := -Wall -Werror -g -m64 -D_WIN32_WINNT=0x0600 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_x86_64-w64-mingw32 := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-w64-mingw32 := -shared -g -m64\n CFG_GCCISH_DEF_FLAG_x86_64-w64-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-w64-mingw32 :=\n@@ -528,8 +498,8 @@ CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n CFG_STATIC_LIB_NAME_x86_64-unknown-freebsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n-CFG_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include\n-CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include\n+CFG_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -pthread  -lrt\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-whole-archive"}]}