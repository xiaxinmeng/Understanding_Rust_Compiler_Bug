{"sha": "1bd1830f507ee4ca63d65588e0eb8855bc825f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDE4MzBmNTA3ZWU0Y2E2M2Q2NTU4OGUwZWI4ODU1YmM4MjVmMjM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-31T05:01:15Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-31T05:36:19Z"}, "message": "Fix spacing in proc-macro tokens to_string", "tree": {"sha": "3279a35ba6f22e7cdf22757bc2ce646c44cb5aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3279a35ba6f22e7cdf22757bc2ce646c44cb5aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd1830f507ee4ca63d65588e0eb8855bc825f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd1830f507ee4ca63d65588e0eb8855bc825f23", "html_url": "https://github.com/rust-lang/rust/commit/1bd1830f507ee4ca63d65588e0eb8855bc825f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd1830f507ee4ca63d65588e0eb8855bc825f23/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed7be9ed9f3eb905ae1c377f154fe0990b4c87f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed7be9ed9f3eb905ae1c377f154fe0990b4c87f", "html_url": "https://github.com/rust-lang/rust/commit/bed7be9ed9f3eb905ae1c377f154fe0990b4c87f"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "b54aa1f3bf1434174792930504417af45fe3e71d", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1bd1830f507ee4ca63d65588e0eb8855bc825f23/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd1830f507ee4ca63d65588e0eb8855bc825f23/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=1bd1830f507ee4ca63d65588e0eb8855bc825f23", "patch": "@@ -204,17 +204,18 @@ pub mod token_stream {\n                 let content = subtree\n                     .token_trees\n                     .iter()\n-                    .map(|tkn| {\n-                        let s = to_text(tkn);\n+                    .fold((String::new(), true), |(last, last_to_joint), tkn| {\n+                        let s = [last, to_text(tkn)].join(if last_to_joint { \"\" } else { \" \" });\n+                        let mut is_joint = false;\n                         if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n-                            if punct.spacing == tt::Spacing::Alone {\n-                                return s + \" \";\n+                            if punct.spacing == tt::Spacing::Joint {\n+                                is_joint = true;\n                             }\n                         }\n-                        s\n+                        (s, is_joint)\n                     })\n-                    .collect::<Vec<_>>()\n-                    .concat();\n+                    .0;\n+\n                 let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n                     None => (\"\", \"\"),\n                     Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n@@ -710,4 +711,32 @@ mod tests {\n         assert_eq!(srv.character('c').text, \"'c'\");\n         assert_eq!(srv.byte_string(b\"1234586\\x88\").text, \"b\\\"1234586\\\\x88\\\"\");\n     }\n+\n+    #[test]\n+    fn test_rustc_server_to_string() {\n+        let s = TokenStream {\n+            subtree: tt::Subtree {\n+                delimiter: None,\n+                token_trees: vec![\n+                    tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n+                        text: \"struct\".into(),\n+                        id: tt::TokenId::unspecified(),\n+                    })),\n+                    tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n+                        text: \"T\".into(),\n+                        id: tt::TokenId::unspecified(),\n+                    })),\n+                    tt::TokenTree::Subtree(tt::Subtree {\n+                        delimiter: Some(tt::Delimiter {\n+                            id: tt::TokenId::unspecified(),\n+                            kind: tt::DelimiterKind::Brace,\n+                        }),\n+                        token_trees: vec![],\n+                    }),\n+                ],\n+            },\n+        };\n+\n+        assert_eq!(s.to_string(), \"struct T {}\");\n+    }\n }"}]}