{"sha": "e82734e56b2a50d38e0937d08f559d15dbe8e46b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjczNGU1NmIyYTUwZDM4ZTA5MzdkMDhmNTU5ZDE1ZGJlOGU0NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T15:31:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T15:31:54Z"}, "message": "Auto merge of #70161 - cjgillot:query-arena, r=nikomatsakis\n\nAllocate some query results on an arena\n\nThis avoids a cloning few `Lrc` and `Vec`s in the queries.", "tree": {"sha": "0a466bbbf764ae05b172f937e2cf3e642be4fb08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a466bbbf764ae05b172f937e2cf3e642be4fb08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82734e56b2a50d38e0937d08f559d15dbe8e46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82734e56b2a50d38e0937d08f559d15dbe8e46b", "html_url": "https://github.com/rust-lang/rust/commit/e82734e56b2a50d38e0937d08f559d15dbe8e46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82734e56b2a50d38e0937d08f559d15dbe8e46b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76882666eba15a186402a911c227f8e9c1682186", "url": "https://api.github.com/repos/rust-lang/rust/commits/76882666eba15a186402a911c227f8e9c1682186", "html_url": "https://github.com/rust-lang/rust/commit/76882666eba15a186402a911c227f8e9c1682186"}, {"sha": "802c0be3a225ff13826288ee7030899ff21bec33", "url": "https://api.github.com/repos/rust-lang/rust/commits/802c0be3a225ff13826288ee7030899ff21bec33", "html_url": "https://github.com/rust-lang/rust/commit/802c0be3a225ff13826288ee7030899ff21bec33"}], "stats": {"total": 176, "additions": 78, "deletions": 98}, "files": [{"sha": "daa723495f6b346622b896c258fea5656f40a928", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -26,7 +26,6 @@ use rustc_target::spec::{HasTargetSpec, Target};\n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n use std::str;\n-use std::sync::Arc;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n@@ -39,7 +38,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n \n     pub llmod: &'ll llvm::Module,\n     pub llcx: &'ll llvm::Context,\n-    pub codegen_unit: Arc<CodegenUnit<'tcx>>,\n+    pub codegen_unit: &'tcx CodegenUnit<'tcx>,\n \n     /// Cache instances of monomorphic and polymorphic items\n     pub instances: RefCell<FxHashMap<Instance<'tcx>, &'ll Value>>,\n@@ -232,7 +231,7 @@ pub unsafe fn create_module(\n impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     crate fn new(\n         tcx: TyCtxt<'tcx>,\n-        codegen_unit: Arc<CodegenUnit<'tcx>>,\n+        codegen_unit: &'tcx CodegenUnit<'tcx>,\n         llvm_module: &'ll crate::ModuleLlvm,\n     ) -> Self {\n         // An interesting part of Windows which MSVC forces our hand on (and\n@@ -402,8 +401,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.check_overflow\n     }\n \n-    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>> {\n-        &self.codegen_unit\n+    fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx> {\n+        self.codegen_unit\n     }\n \n     fn used_statics(&self) -> &RefCell<Vec<&'ll Value>> {"}, {"sha": "cb39bf382093365a6c39a77e3d251467878c8ceb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -1,5 +1,4 @@\n use std::collections::hash_map::Entry::*;\n-use std::sync::Arc;\n \n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -164,11 +163,11 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n fn exported_symbols_provider_local(\n     tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> Arc<Vec<(ExportedSymbol<'_>, SymbolExportLevel)>> {\n+) -> &'tcx [(ExportedSymbol<'_>, SymbolExportLevel)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return Arc::new(vec![]);\n+        return &[];\n     }\n \n     let mut symbols: Vec<_> = tcx\n@@ -274,7 +273,7 @@ fn exported_symbols_provider_local(\n     // Sort so we get a stable incr. comp. hash.\n     symbols.sort_by_cached_key(|s| s.0.symbol_name_for_local_instance(tcx));\n \n-    Arc::new(symbols)\n+    tcx.arena.alloc_from_iter(symbols)\n }\n \n fn upstream_monomorphizations_provider("}, {"sha": "8a9b8f11f76ba2b21144239cc15427c1b7b0fbec", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -533,15 +533,14 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n     let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n-    let codegen_units = (*codegen_units).clone();\n \n     // Force all codegen_unit queries so they are already either red or green\n     // when compile_codegen_unit accesses them. We are not able to re-execute\n     // the codegen_unit query from just the DepNode, so an unknown color would\n     // lead to having to re-execute compile_codegen_unit, possibly\n     // unnecessarily.\n     if tcx.dep_graph.is_fully_enabled() {\n-        for cgu in &codegen_units {\n+        for cgu in codegen_units {\n             tcx.codegen_unit(cgu.name());\n         }\n     }\n@@ -603,7 +602,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // We sort the codegen units by size. This way we can schedule work for LLVM\n     // a bit more efficiently.\n     let codegen_units = {\n-        let mut codegen_units = codegen_units;\n+        let mut codegen_units = codegen_units.iter().collect::<Vec<_>>();\n         codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         codegen_units\n     };"}, {"sha": "fc57a9a80b26142529040ce0ab19ff7d2f541ce8", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -4,7 +4,6 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_session::Session;\n use std::cell::RefCell;\n-use std::sync::Arc;\n \n pub trait MiscMethods<'tcx>: BackendTypes {\n     fn vtables(\n@@ -15,7 +14,7 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn get_fn_addr(&self, instance: Instance<'tcx>) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n-    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n+    fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_elimination(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);"}, {"sha": "2ae7b2ff92565e80585ddf138dbfb8072436034f", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -39,7 +39,7 @@ pub fn report_object_safety_error(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     trait_def_id: DefId,\n-    violations: Vec<ObjectSafetyViolation>,\n+    violations: &[ObjectSafetyViolation],\n ) -> DiagnosticBuilder<'tcx> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n     let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {"}, {"sha": "078f9251adfab9deb29cf328fb6f9b6818a3e154", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -1196,7 +1196,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Lrc<[ast::Attribute]> {\n+    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Vec<ast::Attribute> {\n         // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n@@ -1207,15 +1207,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             node_id\n         };\n \n-        Lrc::from(\n-            self.root\n-                .tables\n-                .attributes\n-                .get(self, item_id)\n-                .unwrap_or(Lazy::empty())\n-                .decode((self, sess))\n-                .collect::<Vec<_>>(),\n-        )\n+        self.root\n+            .tables\n+            .attributes\n+            .get(self, item_id)\n+            .unwrap_or(Lazy::empty())\n+            .decode((self, sess))\n+            .collect::<Vec<_>>()\n     }\n \n     fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<ast::Name>> {\n@@ -1330,25 +1328,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_param_names(&self, id: DefIndex) -> Vec<ast::Name> {\n+    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [ast::Name] {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n             EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n             _ => Lazy::empty(),\n         };\n-        param_names.decode(self).collect()\n+        tcx.arena.alloc_from_iter(param_names.decode(self))\n     }\n \n     fn exported_symbols(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-    ) -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n+    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n         if self.root.is_proc_macro_crate() {\n             // If this crate is a custom derive crate, then we're not even going to\n             // link those in so we skip those crates.\n-            vec![]\n+            &[]\n         } else {\n-            self.root.exported_symbols.decode((self, tcx)).collect()\n+            tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n         }\n     }\n "}, {"sha": "b36cd9b7ec6baf88a81bf40a62345393e97d3111", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::Symbol;\n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n-use std::sync::Arc;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -139,12 +138,14 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n-    item_attrs => { cdata.get_item_attrs(def_id.index, tcx.sess) }\n+    item_attrs => { tcx.arena.alloc_from_iter(\n+        cdata.get_item_attrs(def_id.index, tcx.sess).into_iter()\n+    ) }\n     // FIXME(#38501) We've skipped a `read` on the `hir_owner_nodes` of\n     // a `fn` when encoding, so the dep-tracking wouldn't work.\n     // This is only used by rustdoc anyway, which shouldn't have\n     // incremental recompilation ever enabled.\n-    fn_arg_names => { cdata.get_fn_param_names(def_id.index) }\n+    fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n@@ -239,7 +240,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         // to block export of generics from dylibs, but we must fix\n         // rust-lang/rust#65890 before we can do that robustly.\n \n-        Arc::new(syms)\n+        syms\n     }\n }\n "}, {"sha": "9d64823d352c1f1dcd30ddb18a674348d35c7859", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -116,6 +116,11 @@ macro_rules! arena_types {\n             [few] crate_variances: rustc_middle::ty::CrateVariancesMap<'tcx>,\n             [few] inferred_outlives_crate: rustc_middle::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n+            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_ast::ast::Name>,\n+            [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n             [] tys: rustc_middle::ty::TyS<$tcx>,"}, {"sha": "3ddb290fc8d1e89af2289fa7814cdc06eb5ae456", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -610,7 +610,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query reachable_set(_: CrateNum) -> Lrc<HirIdSet> {\n+        query reachable_set(_: CrateNum) -> &'tcx HirIdSet {\n             desc { \"reachability\" }\n         }\n \n@@ -642,7 +642,7 @@ rustc_queries! {\n         query lookup_stability(_: DefId) -> Option<&'tcx attr::Stability> {}\n         query lookup_const_stability(_: DefId) -> Option<&'tcx attr::ConstStability> {}\n         query lookup_deprecation_entry(_: DefId) -> Option<DeprecationEntry> {}\n-        query item_attrs(_: DefId) -> Lrc<[ast::Attribute]> {}\n+        query item_attrs(_: DefId) -> &'tcx [ast::Attribute] {}\n     }\n \n     Codegen {\n@@ -652,7 +652,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query fn_arg_names(_: DefId) -> Vec<ast::Name> {}\n+        query fn_arg_names(_: DefId) -> &'tcx [ast::Name] {}\n         /// Gets the rendered value of the specified constant or associated constant.\n         /// Used by rustdoc.\n         query rendered_const(_: DefId) -> String {}\n@@ -699,7 +699,7 @@ rustc_queries! {\n             desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { true }\n         }\n-        query object_safety_violations(key: DefId) -> Vec<traits::ObjectSafetyViolation> {\n+        query object_safety_violations(key: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n             desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n         }\n \n@@ -1047,7 +1047,7 @@ rustc_queries! {\n             desc { \"looking up all possibly unused extern crates\" }\n         }\n         query names_imported_by_glob_use(_: DefId)\n-            -> Lrc<FxHashSet<ast::Name>> {\n+            -> &'tcx FxHashSet<ast::Name> {\n             eval_always\n         }\n \n@@ -1075,19 +1075,19 @@ rustc_queries! {\n         ///   correspond to a publicly visible symbol in `cnum` machine code.\n         /// - The `exported_symbols` sets of different crates do not intersect.\n         query exported_symbols(_: CrateNum)\n-            -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>> {\n+            -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n             desc { \"exported_symbols\" }\n         }\n     }\n \n     Codegen {\n         query collect_and_partition_mono_items(_: CrateNum)\n-            -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>) {\n+            -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n             eval_always\n             desc { \"collect_and_partition_mono_items\" }\n         }\n         query is_codegened_item(_: DefId) -> bool {}\n-        query codegen_unit(_: Symbol) -> Arc<CodegenUnit<'tcx>> {\n+        query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n             desc { \"codegen_unit\" }\n         }\n         query backend_optimization_level(_: CrateNum) -> OptLevel {"}, {"sha": "9fa25a4363789c8ed27216d4123ef80f037a98a9", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -2723,7 +2723,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.names_imported_by_glob_use = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n-        Lrc::new(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n+        tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n     };\n \n     providers.lookup_stability = |tcx, id| {"}, {"sha": "0e6c4f26222ff6b0ac88b0419c4d5cdd77ae710c", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n+use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -2596,22 +2596,7 @@ impl BorrowKind {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub enum Attributes<'tcx> {\n-    Owned(Lrc<[ast::Attribute]>),\n-    Borrowed(&'tcx [ast::Attribute]),\n-}\n-\n-impl<'tcx> ::std::ops::Deref for Attributes<'tcx> {\n-    type Target = [ast::Attribute];\n-\n-    fn deref(&self) -> &[ast::Attribute] {\n-        match self {\n-            &Attributes::Owned(ref data) => &data,\n-            &Attributes::Borrowed(data) => data,\n-        }\n-    }\n-}\n+pub type Attributes<'tcx> = &'tcx [ast::Attribute];\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum ImplOverlapKind {\n@@ -2847,9 +2832,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Gets the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {\n         if let Some(id) = self.hir().as_local_hir_id(did) {\n-            Attributes::Borrowed(self.hir().attrs(id))\n+            self.hir().attrs(id)\n         } else {\n-            Attributes::Owned(self.item_attrs(did))\n+            self.item_attrs(did)\n         }\n     }\n "}, {"sha": "5f75633ae591baa699d0d67b3e622d63189e50cb", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -94,7 +94,6 @@\n \n use std::cmp;\n use std::collections::hash_map::Entry;\n-use std::sync::Arc;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n@@ -890,7 +889,7 @@ where\n fn collect_and_partition_mono_items(\n     tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'_>>>>) {\n+) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'_>]) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n@@ -928,10 +927,12 @@ fn collect_and_partition_mono_items(\n     let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n         sync::join(\n             || {\n-                partition(tcx, items.iter().cloned(), tcx.sess.codegen_units(), &inlining_map)\n-                    .into_iter()\n-                    .map(Arc::new)\n-                    .collect::<Vec<_>>()\n+                &*tcx.arena.alloc_from_iter(partition(\n+                    tcx,\n+                    items.iter().cloned(),\n+                    tcx.sess.codegen_units(),\n+                    &inlining_map,\n+                ))\n             },\n             || assert_symbols_are_distinct(tcx, items.iter()),\n         )\n@@ -949,7 +950,7 @@ fn collect_and_partition_mono_items(\n     if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n         let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n-        for cgu in &codegen_units {\n+        for cgu in codegen_units {\n             for (&mono_item, &linkage) in cgu.items() {\n                 item_to_cgus.entry(mono_item).or_default().push((cgu.name(), linkage));\n             }\n@@ -997,7 +998,7 @@ fn collect_and_partition_mono_items(\n         }\n     }\n \n-    (Arc::new(mono_items), Arc::new(codegen_units))\n+    (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n@@ -1012,7 +1013,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n         all.iter()\n             .find(|cgu| cgu.name() == name)\n-            .cloned()\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };\n }"}, {"sha": "5114b1bd7472f767e84771bd40efd7814d515f15", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -6,7 +6,6 @@\n // reachable as well.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -375,7 +374,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx HirIdSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -421,7 +420,7 @@ fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n     debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n \n     // Return the set of reachable symbols.\n-    Lrc::new(reachable_context.reachable_symbols)\n+    tcx.arena.alloc(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "2389b36f842914fdbb917a627cec512d7d18443c", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -47,13 +47,17 @@ pub fn astconv_object_safety_violations(\n     violations\n }\n \n-fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Vec<ObjectSafetyViolation> {\n+fn object_safety_violations(\n+    tcx: TyCtxt<'tcx>,\n+    trait_def_id: DefId,\n+) -> &'tcx [ObjectSafetyViolation] {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n-    traits::supertrait_def_ids(tcx, trait_def_id)\n-        .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id))\n-        .collect()\n+    tcx.arena.alloc_from_iter(\n+        traits::supertrait_def_ids(tcx, trait_def_id)\n+            .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id)),\n+    )\n }\n \n /// We say a method is *vtable safe* if it can be invoked on a trait"}, {"sha": "87e5baa57e963c849aab580f9a2857e58ac433ce", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -1583,7 +1583,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx,\n                     span,\n                     item.trait_ref().def_id(),\n-                    object_safety_violations,\n+                    &object_safety_violations[..],\n                 )\n                 .emit();\n                 return tcx.types.err;"}, {"sha": "59297df8e4843b84c0e44cacf37ff94268404a91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -975,10 +975,11 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> FnDecl {\n         let (did, sig) = *self;\n         let mut names = if cx.tcx.hir().as_local_hir_id(did).is_some() {\n-            vec![].into_iter()\n+            &[]\n         } else {\n-            cx.tcx.fn_arg_names(did).into_iter()\n-        };\n+            cx.tcx.fn_arg_names(did)\n+        }\n+        .iter();\n \n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),\n@@ -2180,13 +2181,9 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n \n             let res = Res::Def(DefKind::Mod, DefId { krate: self.cnum, index: CRATE_DEF_INDEX });\n \n-            if let Some(items) = inline::try_inline(\n-                cx,\n-                res,\n-                self.name,\n-                Some(rustc_middle::ty::Attributes::Borrowed(self.attrs)),\n-                &mut visited,\n-            ) {\n+            if let Some(items) =\n+                inline::try_inline(cx, res, self.name, Some(self.attrs), &mut visited)\n+            {\n                 return items;\n             }\n         }\n@@ -2247,13 +2244,9 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n-                if let Some(items) = inline::try_inline(\n-                    cx,\n-                    path.res,\n-                    name,\n-                    Some(rustc_middle::ty::Attributes::Borrowed(self.attrs)),\n-                    &mut visited,\n-                ) {\n+                if let Some(items) =\n+                    inline::try_inline(cx, path.res, name, Some(self.attrs), &mut visited)\n+                {\n                     return items;\n                 }\n             }"}, {"sha": "d271b8645746e6c5ca795f9df2808717e67d1683", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n use std::any::Any;\n use std::path::Path;\n-use std::sync::Arc;\n \n pub struct NoLlvmMetadataLoader;\n \n@@ -57,7 +56,7 @@ impl CodegenBackend for TheBackend {\n             tcx.arena.alloc(Default::default()) // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n-        providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n+        providers.exported_symbols = |_tcx, _crate| &[];\n     }\n \n     fn provide_extern(&self, providers: &mut Providers) {"}]}