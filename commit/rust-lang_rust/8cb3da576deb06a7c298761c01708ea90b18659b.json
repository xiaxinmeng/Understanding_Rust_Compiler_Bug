{"sha": "8cb3da576deb06a7c298761c01708ea90b18659b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjNkYTU3NmRlYjA2YTdjMjk4NzYxYzAxNzA4ZWE5MGIxODY1OWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-05T00:08:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-05T00:09:08Z"}, "message": "docs: Tweaks", "tree": {"sha": "947f076620f62c9d738175dbc6da27d4c5887162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947f076620f62c9d738175dbc6da27d4c5887162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb3da576deb06a7c298761c01708ea90b18659b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb3da576deb06a7c298761c01708ea90b18659b", "html_url": "https://github.com/rust-lang/rust/commit/8cb3da576deb06a7c298761c01708ea90b18659b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb3da576deb06a7c298761c01708ea90b18659b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fafce9ae37128f14c890b0805b410527ab81472f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fafce9ae37128f14c890b0805b410527ab81472f", "html_url": "https://github.com/rust-lang/rust/commit/fafce9ae37128f14c890b0805b410527ab81472f"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "0ff048c90196877caedee49893562d991c068fba", "filename": "doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8cb3da576deb06a7c298761c01708ea90b18659b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cb3da576deb06a7c298761c01708ea90b18659b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8cb3da576deb06a7c298761c01708ea90b18659b", "patch": "@@ -872,17 +872,6 @@ is optionally followed by an expression to return. A function can\n also return a value by having its top level block produce an\n expression.\n \n-~~~~\n-# const copernicus: int = 0;\n-fn int_to_str(i: int) -> ~str {\n-    if i == copernicus {\n-        return ~\"tube sock\";\n-    } else {\n-        return ~\"violin\";\n-    }\n-}\n-~~~~\n-\n ~~~~\n fn line(a: int, b: int, x: int) -> int {\n     a*x + b\n@@ -1122,7 +1111,7 @@ let x = ~10;\n let y = copy x;\n \n let z = *x + *y;\n-assert z = 20;\n+assert z == 20;\n ~~~~\n \n This is where the 'move' operator comes in. It is similar to\n@@ -1131,7 +1120,7 @@ from `x` to `y`, without violating the constraint that it only has a\n single owner (if you used assignment instead of the move operator, the\n box would, in principle, be copied).\n \n-~~~~ {.ignore}\n+~~~~ {.xfail-test}\n let x = ~10;\n let y = move x;\n \n@@ -1273,7 +1262,7 @@ also done with square brackets (zero-based):\n #               BananaMania, Beaver, Bittersweet };\n # fn draw_scene(c: Crayon) { }\n \n-let crayons: [Crayon] = [BananaMania, Beaver, Bittersweet];\n+let crayons: [Crayon * 3] = [BananaMania, Beaver, Bittersweet];\n match crayons[0] {\n     Bittersweet => draw_scene(crayons[0]),\n     _ => ()\n@@ -1290,7 +1279,7 @@ elements. Mutable vector literals are written `[mut]` (empty) or `[mut\n #               Aquamarine, Asparagus, AtomicTangerine,\n #               BananaMania, Beaver, Bittersweet };\n \n-let crayons: [mut Crayon] = [mut BananaMania, Beaver, Bittersweet];\n+let crayons: [mut Crayon * 3] = [mut BananaMania, Beaver, Bittersweet];\n crayons[0] = AtomicTangerine;\n ~~~~\n \n@@ -1330,7 +1319,8 @@ Strings are implemented with vectors of `[u8]`, though they have a distinct\n type. They support most of the same allocation options as\n vectors, though the string literal without a storage sigil, e.g.\n `\"foo\"` is treated differently than a comparable vector (`[foo]`).\n-Where\n+Wheras plain vectors are stack-allocated fixed length vectors,\n+plain strings are region pointers to read-only memory.\n \n ~~~\n // A plain string is a slice to read-only (static) memory"}]}