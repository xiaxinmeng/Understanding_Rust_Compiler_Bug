{"sha": "2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjY2YwNjMwMmMwOGQ3ZDQ5MTFhYWQ0MGU2NmE5YTNlZTczMWM2Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-15T15:24:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-15T15:24:54Z"}, "message": "Auto merge of #83149 - Dylan-DPC:rollup-ov70c5v, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #82989 (Custom error on literal names from other languages)\n - #83054 (Validate rustc_layout_scalar_valid_range_{start,end} attributes)\n - #83098 (Find more invalid doc attributes)\n - #83108 (Remove unused `opt_local_def_id_to_hir_id` function)\n - #83110 (Fix typos in `library/core/src/ptr/mod.rs` and `library/std/src/sys_common/thread_local_dtor.rs`)\n - #83113 (Minor refactoring in try_index_step)\n - #83127 (Introduce `proc_macro_back_compat` lint, and emit for `time-macros-impl`)\n - #83132 (Don't encode file information for span with a dummy location)\n - #83141 (:arrow_up: rust-analyzer)\n - #83144 (Introduce `rustc_interface::interface::Config::parse_sess_created` callback)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "407134d0127b6a7d759851a2a032f5b172ca845a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407134d0127b6a7d759851a2a032f5b172ca845a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "html_url": "https://github.com/rust-lang/rust/commit/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67", "html_url": "https://github.com/rust-lang/rust/commit/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67"}, {"sha": "2816c110e01846dd737207f19ba3db11a20b887d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2816c110e01846dd737207f19ba3db11a20b887d", "html_url": "https://github.com/rust-lang/rust/commit/2816c110e01846dd737207f19ba3db11a20b887d"}], "stats": {"total": 846, "additions": 687, "deletions": 159}, "files": [{"sha": "203d8acb5b470514e141a80c7022278bfeaeba7a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -4247,6 +4247,7 @@ name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n+ \"rustc_ast_pretty\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "40b0cefd83aa6eed57093418bbf46d659cb49361", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -120,6 +120,7 @@ impl NestedMetaItem {\n }\n \n impl Attribute {\n+    #[inline]\n     pub fn has_name(&self, name: Symbol) -> bool {\n         match self.kind {\n             AttrKind::Normal(ref item, _) => item.path == name,"}, {"sha": "093f7f2668c4644be1abf12a75df6f0d154ee712", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -11,11 +11,9 @@ use crate::tokenstream::TokenTree;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n-use rustc_span::hygiene::ExpnKind;\n-use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::{self, edition::Edition, FileName, RealFileName, Span, DUMMY_SP};\n+use rustc_span::{self, edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n \n@@ -813,52 +811,6 @@ impl Nonterminal {\n         }\n         false\n     }\n-\n-    // See issue #74616 for details\n-    pub fn ident_name_compatibility_hack(\n-        &self,\n-        orig_span: Span,\n-        source_map: &SourceMap,\n-    ) -> Option<(Ident, bool)> {\n-        if let NtIdent(ident, is_raw) = self {\n-            if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n-                let filename = source_map.span_to_filename(orig_span);\n-                if let FileName::Real(RealFileName::Named(path)) = filename {\n-                    let matches_prefix = |prefix, filename| {\n-                        // Check for a path that ends with 'prefix*/src/<filename>'\n-                        let mut iter = path.components().rev();\n-                        iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n-                            && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n-                            && iter\n-                                .next()\n-                                .and_then(|p| p.as_os_str().to_str())\n-                                .map_or(false, |p| p.starts_with(prefix))\n-                    };\n-\n-                    if (macro_name == sym::impl_macros\n-                        && matches_prefix(\"time-macros-impl\", \"lib.rs\"))\n-                        || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n-                    {\n-                        let snippet = source_map.span_to_snippet(orig_span);\n-                        if snippet.as_deref() == Ok(\"$name\") {\n-                            return Some((*ident, *is_raw));\n-                        }\n-                    }\n-\n-                    if macro_name == sym::tuple_from_req\n-                        && (matches_prefix(\"actix-web\", \"extract.rs\")\n-                            || matches_prefix(\"actori-web\", \"extract.rs\"))\n-                    {\n-                        let snippet = source_map.span_to_snippet(orig_span);\n-                        if snippet.as_deref() == Ok(\"$T\") {\n-                            return Some((*ident, *is_raw));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        None\n-    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "25a78041c0007bf4269efdb4dc62267e4b698e50", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -215,6 +215,7 @@ fn run_compiler(\n             diagnostic_output,\n             stderr: None,\n             lint_caps: Default::default(),\n+            parse_sess_created: None,\n             register_lints: None,\n             override_queries: None,\n             make_codegen_backend: make_codegen_backend.take().unwrap(),\n@@ -298,6 +299,7 @@ fn run_compiler(\n         diagnostic_output,\n         stderr: None,\n         lint_caps: Default::default(),\n+        parse_sess_created: None,\n         register_lints: None,\n         override_queries: None,\n         make_codegen_backend: make_codegen_backend.unwrap(),"}, {"sha": "837fad905800a89298296d23e23de818b5ff07c9", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -2,16 +2,21 @@ use crate::base::ExtCtxt;\n \n use rustc_ast as ast;\n use rustc_ast::token;\n+use rustc_ast::token::Nonterminal;\n+use rustc_ast::token::NtIdent;\n use rustc_ast::tokenstream::{self, CanSynthesizeMissingTokens};\n use rustc_ast::tokenstream::{DelimSpan, Spacing::*, TokenStream, TreeAndSpacing};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n+use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n+use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n+use rustc_span::hygiene::ExpnKind;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n+use rustc_span::{BytePos, FileName, MultiSpan, Pos, RealFileName, SourceFile, Span};\n \n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n@@ -174,9 +179,7 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                if let Some((name, is_raw)) =\n-                    nt.ident_name_compatibility_hack(span, sess.source_map())\n-                {\n+                if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, sess) {\n                     TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n                 } else {\n                     let stream = nt_to_tokenstream(&nt, sess, CanSynthesizeMissingTokens::No);\n@@ -711,3 +714,62 @@ impl server::Span for Rustc<'_> {\n         self.sess.source_map().span_to_snippet(span).ok()\n     }\n }\n+\n+// See issue #74616 for details\n+fn ident_name_compatibility_hack(\n+    nt: &Nonterminal,\n+    orig_span: Span,\n+    sess: &ParseSess,\n+) -> Option<(rustc_span::symbol::Ident, bool)> {\n+    if let NtIdent(ident, is_raw) = nt {\n+        if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n+            let source_map = sess.source_map();\n+            let filename = source_map.span_to_filename(orig_span);\n+            if let FileName::Real(RealFileName::Named(path)) = filename {\n+                let matches_prefix = |prefix, filename| {\n+                    // Check for a path that ends with 'prefix*/src/<filename>'\n+                    let mut iter = path.components().rev();\n+                    iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n+                        && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n+                        && iter\n+                            .next()\n+                            .and_then(|p| p.as_os_str().to_str())\n+                            .map_or(false, |p| p.starts_with(prefix))\n+                };\n+\n+                let time_macros_impl =\n+                    macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\", \"lib.rs\");\n+                if time_macros_impl\n+                    || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n+                {\n+                    let snippet = source_map.span_to_snippet(orig_span);\n+                    if snippet.as_deref() == Ok(\"$name\") {\n+                        if time_macros_impl {\n+                            sess.buffer_lint_with_diagnostic(\n+                                &PROC_MACRO_BACK_COMPAT,\n+                                orig_span,\n+                                ast::CRATE_NODE_ID,\n+                                \"using an old version of `time-macros-impl`\",\n+                                BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                                \"the `time-macros-impl` crate will stop compiling in futures version of Rust. \\\n+                                Please update to the latest version of the `time` crate to avoid breakage\".to_string())\n+                            );\n+                        }\n+                        return Some((*ident, *is_raw));\n+                    }\n+                }\n+\n+                if macro_name == sym::tuple_from_req\n+                    && (matches_prefix(\"actix-web\", \"extract.rs\")\n+                        || matches_prefix(\"actori-web\", \"extract.rs\"))\n+                {\n+                    let snippet = source_map.span_to_snippet(orig_span);\n+                    if snippet.as_deref() == Ok(\"$T\") {\n+                        return Some((*ident, *is_raw));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    None\n+}"}, {"sha": "3266dfac702babbc70e40418777d786ac6039c8a", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -342,11 +342,6 @@ impl Definitions {\n         self.def_id_to_hir_id[id].unwrap()\n     }\n \n-    #[inline]\n-    pub fn opt_local_def_id_to_hir_id(&self, id: LocalDefId) -> Option<hir::HirId> {\n-        self.def_id_to_hir_id[id]\n-    }\n-\n     #[inline]\n     pub fn opt_hir_id_to_local_def_id(&self, hir_id: hir::HirId) -> Option<LocalDefId> {\n         self.hir_id_to_def_id.get(&hir_id).copied()"}, {"sha": "a1090ee316db48881a508485b2d1f31dd052f7ba", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -142,6 +142,9 @@ pub struct Config {\n \n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n+    /// This is a callback from the driver that is called when [`ParseSess`] is created.\n+    pub parse_sess_created: Option<Box<dyn FnOnce(&mut ParseSess) + Send>>,\n+\n     /// This is a callback from the driver that is called when we're registering lints;\n     /// it is called during plugin registration when we have the LintStore in a non-shared state.\n     ///\n@@ -166,7 +169,7 @@ pub struct Config {\n \n pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R) -> R {\n     let registry = &config.registry;\n-    let (sess, codegen_backend) = util::create_session(\n+    let (mut sess, codegen_backend) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n         config.diagnostic_output,\n@@ -177,6 +180,14 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         registry.clone(),\n     );\n \n+    if let Some(parse_sess_created) = config.parse_sess_created {\n+        parse_sess_created(\n+            &mut Lrc::get_mut(&mut sess)\n+                .expect(\"create_session() should never share the returned session\")\n+                .parse_sess,\n+        );\n+    }\n+\n     let compiler = Compiler {\n         sess,\n         codegen_backend,"}, {"sha": "42ead89ca4f856381729ba4c27786388c3eca739", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -670,6 +670,9 @@ pub trait LintContext: Sized {\n                         json\n                     );\n                 }\n+                BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n+                    db.note(&note);\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "005c4f9f6eaf73b4af297ec305202da18862dbbc", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -6,7 +6,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass};\n+use crate::{declare_lint, declare_lint_pass, FutureBreakage};\n use rustc_span::edition::Edition;\n \n declare_lint! {\n@@ -2955,6 +2955,7 @@ declare_lint_pass! {\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n         DISJOINT_CAPTURE_DROP_REORDER,\n         LEGACY_DERIVE_HELPERS,\n+        PROC_MACRO_BACK_COMPAT,\n     ]\n }\n \n@@ -3082,3 +3083,53 @@ declare_lint! {\n         edition: None,\n     };\n }\n+\n+declare_lint! {\n+    /// The `proc_macro_back_compat` lint detects uses of old versions of certain\n+    /// proc-macro crates, which have hardcoded workarounds in the compiler.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs-dependency)\n+    ///\n+    /// use time_macros_impl::impl_macros;\n+    /// struct Foo;\n+    /// impl_macros!(Foo);\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: using an old version of `time-macros-impl`\n+    ///   ::: $DIR/group-compat-hack.rs:27:5\n+    ///    |\n+    /// LL |     impl_macros!(Foo);\n+    ///    |     ------------------ in this macro invocation\n+    ///    |\n+    ///    = note: `#[warn(proc_macro_back_compat)]` on by default\n+    ///    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    ///    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+    ///    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+    ///    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Eventually, the backwards-compatibility hacks present in the compiler will be removed,\n+    /// causing older versions of certain crates to stop compiling.\n+    /// This is a [future-incompatible] lint to ease the transition to an error.\n+    /// See [issue #83125] for more details.\n+    ///\n+    /// [issue #83125]: https://github.com/rust-lang/rust/issues/83125\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub PROC_MACRO_BACK_COMPAT,\n+    Warn,\n+    \"detects usage of old versions of certain proc-macro crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n+        edition: None,\n+        future_breakage: Some(FutureBreakage {\n+            date: None\n+        })\n+    };\n+}"}, {"sha": "400b367095ec3b7107c4e8ada1db99b181555b0f", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -266,6 +266,7 @@ pub enum BuiltinLintDiagnostics {\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n     ExternDepSpec(String, ExternDepSpec),\n+    ProcMacroBackCompat(String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "9d00f0715a0126ccabe335511ad3d553c1fc5124", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -180,11 +180,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.local_def_id_to_hir_id(def_id)\n     }\n \n-    #[inline]\n-    pub fn opt_local_def_id_to_hir_id(&self, def_id: LocalDefId) -> Option<HirId> {\n-        self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n-    }\n-\n     pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n         self.tcx.definitions.iter_local_def_id()\n     }"}, {"sha": "78193acc74acdfc729a3a2b03ac5de354692f82d", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1045,12 +1045,12 @@ where\n     E: 'a + OpaqueEncoder,\n {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n-        if *self == DUMMY_SP {\n+        let span_data = self.data();\n+        if self.is_dummy() {\n             TAG_PARTIAL_SPAN.encode(s)?;\n-            return SyntaxContext::root().encode(s);\n+            return span_data.ctxt.encode(s);\n         }\n \n-        let span_data = self.data();\n         let pos = s.source_map.byte_pos_to_line_and_col(span_data.lo);\n         let partial_span = match &pos {\n             Some((file_lo, _, _)) => !file_lo.contains(span_data.hi),"}, {"sha": "a2adbdddc40fe323c878a8b8e1b68d4b618cf944", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n             ExprKind::Index { .. } | ExprKind::Deref { .. } | ExprKind::Field { .. } => {\n-                debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n+                debug_assert_eq!(Category::of(&expr.kind), Some(Category::Place));\n \n                 // Create a \"fake\" temporary variable so that we check that the\n                 // value is Sized. Usually, this is caught in type checking, but\n@@ -436,8 +436,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.local_decls.push(LocalDecl::new(expr.ty, expr.span));\n                 }\n \n-                debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n-\n                 let place = unpack!(block = this.as_place(block, expr));\n                 let rvalue = Rvalue::Use(this.consume_by_copy_or_move(place));\n                 this.cfg.push_assign(block, source_info, destination, rvalue);"}, {"sha": "4069fb2127e026a7e2c93b63efe05d5bed82018e", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -19,3 +19,4 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }"}, {"sha": "9c606f3e4d45957e3f7c3e8236e3b81991193b02", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 100, "deletions": 47, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::{Attribute, LitKind, NestedMetaItem};\n+use rustc_ast::{Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -87,6 +87,10 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_export_name(hir_id, &attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_layout_scalar_valid_range_start) {\n+                self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_layout_scalar_valid_range_end) {\n+                self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n                 self.check_allow_internal_unstable(hir_id, &attr, span, target, &attrs)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n@@ -520,7 +524,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .struct_span_err(\n                     meta.span(),\n                     &format!(\n-                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate level attribute\",\n+                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate-level attribute\",\n                         attr_name,\n                     ),\n                 )\n@@ -531,79 +535,97 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n-        if let Some(mi) = attr.meta() {\n-            if let Some(list) = mi.meta_item_list() {\n-                for meta in list {\n-                    if meta.has_name(sym::alias) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"alias\")\n-                            || !self.check_doc_alias(meta, hir_id, target)\n+        let mut is_valid = true;\n+\n+        if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n+            for meta in list {\n+                if let Some(i_meta) = meta.meta_item() {\n+                    match i_meta.name_or_empty() {\n+                        sym::alias\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n+                                || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n-                    } else if meta.has_name(sym::keyword) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"keyword\")\n-                            || !self.check_doc_keyword(meta, hir_id)\n+\n+                        sym::keyword\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n+                                || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n-                    } else if meta.has_name(sym::test) {\n-                        if CRATE_HIR_ID != hir_id {\n+\n+                        sym::test if CRATE_HIR_ID != hir_id => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 meta.span(),\n                                 |lint| {\n                                     lint.build(\n-                                        \"`#![doc(test(...)]` is only allowed as a crate level attribute\"\n+                                        \"`#![doc(test(...)]` is only allowed \\\n+                                         as a crate-level attribute\",\n                                     )\n                                     .emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n-                    } else if let Some(i_meta) = meta.meta_item() {\n-                        if ![\n-                            sym::cfg,\n-                            sym::hidden,\n-                            sym::html_favicon_url,\n-                            sym::html_logo_url,\n-                            sym::html_no_source,\n-                            sym::html_playground_url,\n-                            sym::html_root_url,\n-                            sym::include,\n-                            sym::inline,\n-                            sym::issue_tracker_base_url,\n-                            sym::masked,\n-                            sym::no_default_passes, // deprecated\n-                            sym::no_inline,\n-                            sym::passes,  // deprecated\n-                            sym::plugins, // removed, but rustdoc warns about it itself\n-                            sym::primitive,\n-                            sym::spotlight,\n-                            sym::test,\n-                        ]\n-                        .iter()\n-                        .any(|m| i_meta.has_name(*m))\n-                        {\n+\n+                        // no_default_passes: deprecated\n+                        // passes: deprecated\n+                        // plugins: removed, but rustdoc warns about it itself\n+                        sym::alias\n+                        | sym::cfg\n+                        | sym::hidden\n+                        | sym::html_favicon_url\n+                        | sym::html_logo_url\n+                        | sym::html_no_source\n+                        | sym::html_playground_url\n+                        | sym::html_root_url\n+                        | sym::include\n+                        | sym::inline\n+                        | sym::issue_tracker_base_url\n+                        | sym::keyword\n+                        | sym::masked\n+                        | sym::no_default_passes\n+                        | sym::no_inline\n+                        | sym::passes\n+                        | sym::plugins\n+                        | sym::primitive\n+                        | sym::spotlight\n+                        | sym::test => {}\n+\n+                        _ => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 i_meta.span,\n                                 |lint| {\n-                                    lint.build(&format!(\n+                                    let msg = format!(\n                                         \"unknown `doc` attribute `{}`\",\n-                                        i_meta.name_or_empty()\n-                                    ))\n-                                    .emit();\n+                                        rustc_ast_pretty::pprust::path_to_string(&i_meta.path),\n+                                    );\n+                                    lint.build(&msg).emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n                     }\n+                } else {\n+                    self.tcx.struct_span_lint_hir(\n+                        INVALID_DOC_ATTRIBUTES,\n+                        hir_id,\n+                        meta.span(),\n+                        |lint| {\n+                            lint.build(&format!(\"invalid `doc` attribute\")).emit();\n+                        },\n+                    );\n+                    is_valid = false;\n                 }\n             }\n         }\n-        true\n+\n+        is_valid\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n@@ -807,6 +829,37 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn check_rustc_layout_scalar_valid_range(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        if target != Target::Struct {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n+                .span_label(*span, \"not a struct\")\n+                .emit();\n+            return false;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            None => return false,\n+            Some(it) => it,\n+        };\n+\n+        if matches!(&list[..], &[NestedMetaItem::Literal(Lit { kind: LitKind::Int(..), .. })]) {\n+            true\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"expected exactly one integer literal argument\")\n+                .emit();\n+            false\n+        }\n+    }\n+\n     /// Checks if `#[rustc_legacy_const_generics]` is applied to a function and has a valid argument.\n     fn check_rustc_legacy_const_generics(\n         &self,"}, {"sha": "e85d78db22c563af4b9d7dd8ae4c405632ae06a8", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -563,6 +563,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                     }\n                 }\n+            } else if err_code == &rustc_errors::error_code!(E0412) {\n+                if let Some(correct) = Self::likely_rust_type(path) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"perhaps you intended to use this type\",\n+                        correct.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n \n@@ -1243,6 +1252,23 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    // Returns the name of the Rust type approximately corresponding to\n+    // a type name in another programming language.\n+    fn likely_rust_type(path: &[Segment]) -> Option<Symbol> {\n+        let name = path[path.len() - 1].ident.as_str();\n+        // Common Java types\n+        Some(match &*name {\n+            \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n+            \"short\" => sym::i16,\n+            \"boolean\" => sym::bool,\n+            \"int\" => sym::i32,\n+            \"long\" => sym::i64,\n+            \"float\" => sym::f32,\n+            \"double\" => sym::f64,\n+            _ => return None,\n+        })\n+    }\n+\n     /// Only used in a specific case of type ascription suggestions\n     fn get_colon_suggestion_span(&self, start: Span) -> Span {\n         let sm = self.r.session.source_map();"}, {"sha": "5bd385107ca391be958e6b7d426a8fc0595957b7", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -103,9 +103,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let method =\n                 self.try_overloaded_place_op(expr.span, self_ty, &[input_ty], PlaceOp::Index);\n \n-            let result = method.map(|ok| {\n+            if let Some(result) = method {\n                 debug!(\"try_index_step: success, using overloaded indexing\");\n-                let method = self.register_infer_ok_obligations(ok);\n+                let method = self.register_infer_ok_obligations(result);\n \n                 let mut adjustments = self.adjust_steps(autoderef);\n                 if let ty::Ref(region, _, hir::Mutability::Not) = method.sig.inputs()[0].kind() {\n@@ -128,10 +128,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.apply_adjustments(base_expr, adjustments);\n \n                 self.write_method_call(expr.hir_id, method);\n-                (input_ty, self.make_overloaded_place_return_type(method).ty)\n-            });\n-            if result.is_some() {\n-                return result;\n+\n+                return Some((input_ty, self.make_overloaded_place_return_type(method).ty));\n             }\n         }\n "}, {"sha": "5ac260fc883c218bfb149ab61efdbe08dfcf6115", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -512,7 +512,7 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n         let t = t.as_mut_ptr() as *mut u8;\n \n         // SAFETY: As `i < len`, and as the caller must guarantee that `x` and `y` are valid\n-        // for `len` bytes, `x + i` and `y + i` must be valid adresses, which fulfills the\n+        // for `len` bytes, `x + i` and `y + i` must be valid addresses, which fulfills the\n         // safety contract for `add`.\n         //\n         // Also, the caller must guarantee that `x` and `y` are valid for writes, properly aligned,"}, {"sha": "f9971fb6f21ef3771d27c4813da62632ca6fff4d", "filename": "library/std/src/sys_common/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1,6 +1,6 @@\n //! Thread-local destructor\n //!\n-//! Besides thread-local \"keys\" (pointer-sized non-adressable thread-local store\n+//! Besides thread-local \"keys\" (pointer-sized non-addressable thread-local store\n //! with an associated destructor), many platforms also provide thread-local\n //! destructors that are not associated with any particular data. These are\n //! often more efficient."}, {"sha": "c5b5ab0f3d0ac4a72fd48a9b73fad87f7fc347a0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -311,6 +311,7 @@ crate fn create_config(\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n+        parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them."}, {"sha": "80e2e23eadde9b64fa680609d300bfa5813034e7", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -95,6 +95,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n+        parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),\n         override_queries: None,\n         make_codegen_backend: None,"}, {"sha": "4acabbb70ede20672e52f9e7bd8690a8c5e79c69", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -57,6 +57,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps: Default::default(),\n+        parse_sess_created: None,\n         register_lints: None,\n         override_queries: None,\n         make_codegen_backend: None,"}, {"sha": "76ecaba0f6a0bbdf96a044280006c2a4255701ff", "filename": "src/test/run-make/issue-83112-incr-test-moved-file/Makefile", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,25 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+# FIXME https://github.com/rust-lang/rust/issues/78911\n+# ignore-32bit wrong/no cross compiler and sometimes we pass wrong gcc args (-m64)\n+\n+# Regression test for issue #83112\n+# The generated test harness code contains spans with a dummy location,\n+# but a non-dummy SyntaxContext. Previously, the incremental cache was encoding\n+# these spans as a full span (with a source file index), instead of skipping\n+# the encoding of the location information. If the file gest moved, the hash\n+# of the span will be unchanged (since it has a dummy location), so the incr\n+# cache would end up try to load a non-existent file using the previously\n+# enccoded source file id.\n+\n+SRC=$(TMPDIR)/src\n+INCR=$(TMPDIR)/incr\n+\n+all:\n+\tmkdir $(SRC)\n+\tmkdir $(SRC)/mydir\n+\tmkdir $(INCR)\n+\tcp main.rs $(SRC)/main.rs\n+\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/main.rs\n+\tmv $(SRC)/main.rs $(SRC)/mydir/main.rs\n+\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/mydir/main.rs"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make/issue-83112-incr-test-moved-file/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2Fmain.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "fc8095e03ca93d6b1dfba18cfe1ae134ef43adf6", "filename": "src/test/rustdoc-ui/doc-alias-crate-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -4,7 +4,7 @@ error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n LL | #[doc(alias = \"shouldn't work!\")]\n    |               ^^^^^^^^^^^^^^^^^\n \n-error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc-alias-crate-level.rs:1:8\n    |\n LL | #![doc(alias = \"crate-level-not-working\")]"}, {"sha": "980d1c0e2077d272406075d834928dcf265e7ed3", "filename": "src/test/rustdoc-ui/doc-attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -8,3 +8,18 @@\n //~^ ERROR unknown `doc` attribute\n //~^^ WARN\n pub fn foo() {}\n+\n+#[doc(123)]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(\"hello\", \"bar\")]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+//~| ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(foo::bar, crate::bar::baz = \"bye\")]\n+//~^ ERROR unknown `doc` attribute\n+//~| WARN\n+//~| ERROR unknown `doc` attribute\n+//~| WARN\n+fn bar() {}"}, {"sha": "cc2494c92e64951c25c674a21469c6974d53489d", "filename": "src/test/rustdoc-ui/doc-attr.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -13,6 +13,51 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:12:7\n+   |\n+LL | #[doc(123)]\n+   |       ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:7\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:16\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |                ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `foo::bar`\n+  --> $DIR/doc-attr.rs:20:7\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |       ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `crate::bar::baz`\n+  --> $DIR/doc-attr.rs:20:17\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n error: unknown `doc` attribute `as_ptr`\n   --> $DIR/doc-attr.rs:3:8\n    |\n@@ -22,5 +67,5 @@ LL | #![doc(as_ptr)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/rustdoc-ui/doc-attr2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1,4 +1,4 @@\n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:4:7\n    |\n LL | #[doc(test(no_crate_inject))]\n@@ -13,7 +13,7 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:9:12\n    |\n LL |     #![doc(test(no_crate_inject))]"}, {"sha": "980d1c0e2077d272406075d834928dcf265e7ed3", "filename": "src/test/ui/attributes/doc-attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -8,3 +8,18 @@\n //~^ ERROR unknown `doc` attribute\n //~^^ WARN\n pub fn foo() {}\n+\n+#[doc(123)]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(\"hello\", \"bar\")]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+//~| ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(foo::bar, crate::bar::baz = \"bye\")]\n+//~^ ERROR unknown `doc` attribute\n+//~| WARN\n+//~| ERROR unknown `doc` attribute\n+//~| WARN\n+fn bar() {}"}, {"sha": "cc2494c92e64951c25c674a21469c6974d53489d", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -13,6 +13,51 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:12:7\n+   |\n+LL | #[doc(123)]\n+   |       ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:7\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:16\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |                ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `foo::bar`\n+  --> $DIR/doc-attr.rs:20:7\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |       ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `crate::bar::baz`\n+  --> $DIR/doc-attr.rs:20:17\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n error: unknown `doc` attribute `as_ptr`\n   --> $DIR/doc-attr.rs:3:8\n    |\n@@ -22,5 +67,5 @@ LL | #![doc(as_ptr)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/ui/attributes/doc-attr2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1,4 +1,4 @@\n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:4:7\n    |\n LL | #[doc(test(no_crate_inject))]\n@@ -13,7 +13,7 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:9:12\n    |\n LL |     #![doc(test(no_crate_inject))]"}, {"sha": "25fe4be660b2428d2a408fe80ef8952415d72f75", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,23 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(u32::MAX)] //~ ERROR\n+pub struct A(u32);\n+\n+#[rustc_layout_scalar_valid_range_end(1, 2)] //~ ERROR\n+pub struct B(u8);\n+\n+#[rustc_layout_scalar_valid_range_end(a = \"a\")] //~ ERROR\n+pub struct C(i32);\n+\n+#[rustc_layout_scalar_valid_range_end(1)] //~ ERROR\n+enum E {\n+    X = 1,\n+    Y = 14,\n+}\n+\n+fn main() {\n+    let _ = A(0);\n+    let _ = B(0);\n+    let _ = C(0);\n+    let _ = E::X;\n+}"}, {"sha": "7e95fedebdfc6bae872f1a4aadd9cfadd46c466a", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,31 @@\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:3:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_start(u32::MAX)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:6:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_end(1, 2)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:9:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_end(a = \"a\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be applied to a struct\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:12:1\n+   |\n+LL |   #[rustc_layout_scalar_valid_range_end(1)]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / enum E {\n+LL | |     X = 1,\n+LL | |     Y = 14,\n+LL | | }\n+   | |_- not a struct\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f60d3d10dce47734fd27eb02d30895c5c783463c", "filename": "src/test/ui/lint/recommend-literal.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,35 @@\n+type Real = double;\n+//~^ ERROR cannot find type `double` in this scope\n+//~| HELP perhaps you intended to use this type\n+\n+fn main() {\n+    let x: Real = 3.5;\n+    let y: long = 74802374902374923;\n+    //~^ ERROR cannot find type `long` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn z(a: boolean) {\n+    //~^ ERROR cannot find type `boolean` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn a() -> byte {\n+//~^ ERROR cannot find type `byte` in this scope\n+//~| HELP perhaps you intended to use this type\n+    3\n+}\n+\n+struct Data { //~ HELP you might be missing a type parameter\n+    width: float,\n+    //~^ ERROR cannot find type `float` in this scope\n+    //~| HELP perhaps you intended to use this type\n+    depth: Option<int>,\n+    //~^ ERROR cannot find type `int` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+trait Stuff {}\n+impl Stuff for short {}\n+//~^ ERROR cannot find type `short` in this scope\n+//~| HELP perhaps you intended to use this type"}, {"sha": "b01073b42b864daf1f6613733dfa00cb896a7ed6", "filename": "src/test/ui/lint/recommend-literal.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,72 @@\n+error[E0412]: cannot find type `double` in this scope\n+  --> $DIR/recommend-literal.rs:1:13\n+   |\n+LL | type Real = double;\n+   |             ^^^^^^\n+   |             |\n+   |             not found in this scope\n+   |             help: perhaps you intended to use this type: `f64`\n+\n+error[E0412]: cannot find type `long` in this scope\n+  --> $DIR/recommend-literal.rs:7:12\n+   |\n+LL |     let y: long = 74802374902374923;\n+   |            ^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `i64`\n+\n+error[E0412]: cannot find type `boolean` in this scope\n+  --> $DIR/recommend-literal.rs:12:9\n+   |\n+LL | fn z(a: boolean) {\n+   |         ^^^^^^^\n+   |         |\n+   |         not found in this scope\n+   |         help: perhaps you intended to use this type: `bool`\n+\n+error[E0412]: cannot find type `byte` in this scope\n+  --> $DIR/recommend-literal.rs:17:11\n+   |\n+LL | fn a() -> byte {\n+   |           ^^^^\n+   |           |\n+   |           not found in this scope\n+   |           help: perhaps you intended to use this type: `u8`\n+\n+error[E0412]: cannot find type `float` in this scope\n+  --> $DIR/recommend-literal.rs:24:12\n+   |\n+LL |     width: float,\n+   |            ^^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `f32`\n+\n+error[E0412]: cannot find type `int` in this scope\n+  --> $DIR/recommend-literal.rs:27:19\n+   |\n+LL |     depth: Option<int>,\n+   |                   ^^^ not found in this scope\n+   |\n+help: perhaps you intended to use this type\n+   |\n+LL |     depth: Option<i32>,\n+   |                   ^^^\n+help: you might be missing a type parameter\n+   |\n+LL | struct Data<int> {\n+   |            ^^^^^\n+\n+error[E0412]: cannot find type `short` in this scope\n+  --> $DIR/recommend-literal.rs:33:16\n+   |\n+LL | impl Stuff for short {}\n+   |                ^^^^^\n+   |                |\n+   |                not found in this scope\n+   |                help: perhaps you intended to use this type: `i16`\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "7f3f5e36f50a94766bfcedfc8945b95c7c8d39a4", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -24,7 +24,8 @@ mod no_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo);\n+    impl_macros!(Foo); //~ WARN  using an old version\n+                       //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n }\n@@ -40,7 +41,8 @@ mod with_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo);\n+    impl_macros!(Foo); //~  WARN using an old version\n+                       //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n }"}, {"sha": "9370440a63511d89f5897b0ceb3305a7f6870fdc", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -0,0 +1,70 @@\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:27:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:44:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 2 warnings emitted\n+\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:27:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage date: None, diagnostic:\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:44:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "468cb5119151773b0b90b680cb09058b25b619c7", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1,10 +1,10 @@\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:13: 44:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:12: 45:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:52:21: 52:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:59:21: 59:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:66:21: 66:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:73:21: 73:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:30:12: 30:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:18: 44:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:61:21: 61:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:68:21: 68:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:75:21: 75:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]"}, {"sha": "bd32609ade2967994b779d1f25b6e50ca0844e60", "filename": "src/test/ui/rustdoc/doc-alias-crate-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -4,7 +4,7 @@ error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n LL | #[doc(alias = \"shouldn't work!\")]\n    |               ^^^^^^^^^^^^^^^^^\n \n-error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc-alias-crate-level.rs:5:8\n    |\n LL | #![doc(alias = \"not working!\")]"}, {"sha": "0679bb8c5a7a6f832bf70c587da1d289c67f7102", "filename": "src/test/ui/rustdoc/doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -10,7 +10,7 @@ error: `#[doc(keyword = \"...\")]` can only be used on modules\n LL | #[doc(keyword = \"hall\")]\n    |       ^^^^^^^^^^^^^^^^\n \n-error: `#![doc(keyword = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(keyword = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc_keyword.rs:4:8\n    |\n LL | #![doc(keyword = \"hello\")]"}, {"sha": "b6aed862e895fde53dfdeb385932acfda624cc76", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -15,7 +15,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_interface::interface;\n-use rustc_session::Session;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n use rustc_tools_util::VersionInfo;\n \n@@ -63,8 +63,8 @@ fn test_arg_value() {\n     assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n-fn track_clippy_args(sess: &Session, args_env_var: &Option<String>) {\n-    sess.parse_sess.env_depinfo.borrow_mut().insert((\n+fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>) {\n+    parse_sess.env_depinfo.get_mut().insert((\n         Symbol::intern(\"CLIPPY_ARGS\"),\n         args_env_var.as_deref().map(Symbol::intern),\n     ));\n@@ -81,14 +81,9 @@ struct RustcCallbacks {\n \n impl rustc_driver::Callbacks for RustcCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n-        let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n-        config.register_lints = Some(Box::new(move |sess, lint_store| {\n-            if let Some(ref previous) = previous {\n-                (previous)(sess, lint_store);\n-            }\n-\n-            track_clippy_args(sess, &clippy_args_var);\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n         }));\n     }\n }\n@@ -101,15 +96,16 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n+        }));\n         config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n             // is there already. Certainly it can't hurt.\n             if let Some(previous) = &previous {\n                 (previous)(sess, lint_store);\n             }\n \n-            track_clippy_args(sess, &clippy_args_var);\n-\n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n             clippy_lints::register_pre_expansion_lints(&mut lint_store);"}, {"sha": "5ba7852cf153688d5b5035a9a2a2145aa7334d79", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "patch": "@@ -1 +1 @@\n-Subproject commit d54e1157b66017e4aae38328cd213286e39ca130\n+Subproject commit 5ba7852cf153688d5b5035a9a2a2145aa7334d79"}]}