{"sha": "f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49", "node_id": "C_kwDOAAsO6NoAKGY2ZDI5OTVmYjhiMGVjOWU0YTdjZTRmMGVjMjFlN2VjYzNmYjVjNDk", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-06-26T22:57:46Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-09T00:55:56Z"}, "message": "Make some functions pub(super)", "tree": {"sha": "669382d439b54d576a7f36ffe097e54dca4f732a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669382d439b54d576a7f36ffe097e54dca4f732a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49", "html_url": "https://github.com/rust-lang/rust/commit/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "html_url": "https://github.com/rust-lang/rust/commit/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e43d28ee56e3eb09b9c95412ab8f607c3e84ba0e", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f6d2995fb8b0ec9e4a7ce4f0ec21e7ecc3fb5c49", "patch": "@@ -426,21 +426,21 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         data\n     }\n \n-    pub fn data(&self) -> &RegionConstraintData<'tcx> {\n+    pub(super) fn data(&self) -> &RegionConstraintData<'tcx> {\n         &self.data\n     }\n \n-    pub fn start_snapshot(&mut self) -> RegionSnapshot {\n+    pub(super) fn start_snapshot(&mut self) -> RegionSnapshot {\n         debug!(\"RegionConstraintCollector: start_snapshot\");\n         RegionSnapshot { any_unifications: self.any_unifications }\n     }\n \n-    pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n+    pub(super) fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n         debug!(\"RegionConstraintCollector: rollback_to({:?})\", snapshot);\n         self.any_unifications = snapshot.any_unifications;\n     }\n \n-    pub fn new_region_var(\n+    pub(super) fn new_region_var(\n         &mut self,\n         universe: ty::UniverseIndex,\n         origin: RegionVariableOrigin,\n@@ -455,12 +455,12 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     /// Returns the universe for the given variable.\n-    pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {\n+    pub(super) fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {\n         self.var_infos[vid].universe\n     }\n \n     /// Returns the origin for the given variable.\n-    pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {\n+    pub(super) fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {\n         self.var_infos[vid].origin\n     }\n \n@@ -492,7 +492,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.undo_log.push(AddVerify(index));\n     }\n \n-    pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {\n+    pub(super) fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {\n         // cannot add givens once regions are resolved\n         if self.data.givens.insert((sub, sup)) {\n             debug!(\"add_given({:?} <= {:?})\", sub, sup);\n@@ -501,7 +501,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn make_eqregion(\n+    pub(super) fn make_eqregion(\n         &mut self,\n         origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n@@ -530,7 +530,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn member_constraint(\n+    pub(super) fn member_constraint(\n         &mut self,\n         key: ty::OpaqueTypeKey<'tcx>,\n         definition_span: Span,\n@@ -554,7 +554,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     #[instrument(skip(self, origin), level = \"debug\")]\n-    pub fn make_subregion(\n+    pub(super) fn make_subregion(\n         &mut self,\n         origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n@@ -585,7 +585,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn verify_generic_bound(\n+    pub(super) fn verify_generic_bound(\n         &mut self,\n         origin: SubregionOrigin<'tcx>,\n         kind: GenericKind<'tcx>,\n@@ -595,7 +595,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.add_verify(Verify { kind, origin, region: sub, bound });\n     }\n \n-    pub fn lub_regions(\n+    pub(super) fn lub_regions(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         origin: SubregionOrigin<'tcx>,\n@@ -613,7 +613,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn glb_regions(\n+    pub(super) fn glb_regions(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         origin: SubregionOrigin<'tcx>,\n@@ -634,7 +634,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     /// Resolves the passed RegionVid to the root RegionVid in the unification table\n-    pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n+    pub(super) fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n         self.unification_table().find(rid).vid\n     }\n "}]}