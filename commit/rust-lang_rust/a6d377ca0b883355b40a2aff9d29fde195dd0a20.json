{"sha": "a6d377ca0b883355b40a2aff9d29fde195dd0a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDM3N2NhMGI4ODMzNTViNDBhMmFmZjlkMjlmZGUxOTVkZDBhMjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-16T13:26:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:02:57Z"}, "message": "more comments", "tree": {"sha": "7c6e5300a4a46844e5a947f4c798984e46622100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6e5300a4a46844e5a947f4c798984e46622100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d377ca0b883355b40a2aff9d29fde195dd0a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d377ca0b883355b40a2aff9d29fde195dd0a20", "html_url": "https://github.com/rust-lang/rust/commit/a6d377ca0b883355b40a2aff9d29fde195dd0a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d377ca0b883355b40a2aff9d29fde195dd0a20/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966d638760d391db49e691479cb06062a19add0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/966d638760d391db49e691479cb06062a19add0e", "html_url": "https://github.com/rust-lang/rust/commit/966d638760d391db49e691479cb06062a19add0e"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "40cbf92e96553bbf60fac6c0278f81ae2d6fed74", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6d377ca0b883355b40a2aff9d29fde195dd0a20/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d377ca0b883355b40a2aff9d29fde195dd0a20/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=a6d377ca0b883355b40a2aff9d29fde195dd0a20", "patch": "@@ -334,11 +334,17 @@ impl<'tcx> Stack {\n                     \"no item granting {} access to tag {} found in borrow stack\",\n                     access, tag,\n             )))?;\n-        \n+\n         // Step 2: Remove everything incompatible above them.\n-        // Implemented with indices because there does not seem to be a nice iterator and range-based\n-        // API for this.\n+        // Items below an active barrier however may not be removed, so we check that as well.\n+        // We do *not* maintain a stack discipline here.  We could, in principle, decide to only\n+        // keep the items immediately above `granting_idx` that are compatible, and then pop the rest.\n+        // However, that kills off entire \"branches\" of pointer derivation too easily:\n+        // in `let raw = &mut *x as *mut _; let _val = *x;`, the second statement would pop the `Unique`\n+        // from the reborrow of the first statement, and subequently also pop the `SharedReadWrite` for `raw`.\n         {\n+            // Implemented with indices because there does not seem to be a nice iterator and range-based\n+            // API for this.\n             let mut cur = granting_idx + 1;\n             let mut removed_item = None;\n             while let Some(item) = self.borrows.get(cur) {\n@@ -454,6 +460,14 @@ impl<'tcx> Stack {\n         // Find the permission \"from which we derive\".  To this end we first have to decide\n         // if we derive from a permission that grants writes or just reads.\n         let access = new_kind.access();\n+        // Now we figure out which item grants our parent (`derived_from`) permission.\n+        // We use that to determine (a) where to put the new item, and for raw pointers\n+        // (b) whether to given read-only or read-write access.\n+        // FIXME: This handling of raw pointers is fragile, very fragile.  What if we do\n+        // not get \"the right one\", like when there are multiple items granting `derived_from`\n+        // and we accidentally create a read-only pointer?  This can happen for two-phase borrows\n+        // (then there's a `Unique` and a `SharedReadOnly` for the same tag), and for raw pointers\n+        // (which currently all are `Untagged`).\n         let (derived_from_idx, derived_from_perm) = self.find_granting(access, derived_from)\n             .ok_or_else(|| InterpError::MachineError(format!(\n                     \"no item to reborrow as {} from tag {} found in borrow stack\", new_kind, derived_from,"}]}