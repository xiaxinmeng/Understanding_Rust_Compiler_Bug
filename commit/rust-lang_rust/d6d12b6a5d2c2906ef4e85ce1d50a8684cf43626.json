{"sha": "d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "node_id": "C_kwDOAAsO6NoAKGQ2ZDEyYjZhNWQyYzI5MDZlZjRlODVjZTFkNTBhODY4NGNmNDM2MjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T22:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T22:34:13Z"}, "message": "Auto merge of #92222 - nnethercote:rm-global_allocator-rustc-rustdoc, r=alexcrichton\n\nRemove useless `#[global_allocator]` from rustc and rustdoc.\n\nThis was added in #83152, which has several errors in its comments.\n\nThis commit also fix up the comments, which are quite wrong and\nmisleading.\n\nr? `@alexcrichton`", "tree": {"sha": "ddd33a764172452c6cde3014b483967b8b71a662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd33a764172452c6cde3014b483967b8b71a662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "html_url": "https://github.com/rust-lang/rust/commit/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09a9529c51cde41c1101e56049d418edb07bf71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09a9529c51cde41c1101e56049d418edb07bf71", "html_url": "https://github.com/rust-lang/rust/commit/c09a9529c51cde41c1101e56049d418edb07bf71"}, {"sha": "bb23bfc2cde4b56372ac7324d0bdec2232a162e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb23bfc2cde4b56372ac7324d0bdec2232a162e5", "html_url": "https://github.com/rust-lang/rust/commit/bb23bfc2cde4b56372ac7324d0bdec2232a162e5"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "4edd095af10b52d0d7aba66c6a01e0e58b468949", "filename": "compiler/rustc/src/main.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626/compiler%2Frustc%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626/compiler%2Frustc%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2Fsrc%2Fmain.rs?ref=d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "patch": "@@ -1,25 +1,32 @@\n-// Configure jemalloc as the `global_allocator` when configured. This is\n-// so that we use the sized deallocation apis jemalloc provides\n-// (namely `sdallocx`).\n+// A note about jemalloc: rustc uses jemalloc when built for CI and\n+// distribution. The obvious way to do this is with the `#[global_allocator]`\n+// mechanism. However, for complicated reasons (see\n+// https://github.com/rust-lang/rust/pull/81782#issuecomment-784438001 for some\n+// details) that mechanism doesn't work here. Also, we must use a consistent\n+// allocator across the rustc <-> llvm boundary, and `#[global_allocator]`\n+// wouldn't provide that.\n //\n-// The symbol overrides documented below are also performed so that we can\n-// ensure that we use a consistent allocator across the rustc <-> llvm boundary\n-#[cfg(feature = \"jemalloc\")]\n-#[global_allocator]\n-static ALLOC: tikv_jemallocator::Jemalloc = tikv_jemallocator::Jemalloc;\n-\n+// Instead, we use a lower-level mechanism. rustc is linked with jemalloc in a\n+// way such that jemalloc's implementation of `malloc`, `free`, etc., override\n+// the libc allocator's implementation. This means that Rust's `System`\n+// allocator, which calls `libc::malloc()` et al., is actually calling into\n+// jemalloc.\n+//\n+// A consequence of not using `GlobalAlloc` (and the `tikv-jemallocator` crate\n+// provides an impl of that trait, which is called `Jemalloc`) is that we\n+// cannot use the sized deallocation APIs (`sdallocx`) that jemalloc provides.\n+// It's unclear how much performance is lost because of this.\n+//\n+// As for the symbol overrides in `main` below: we're pulling in a static copy\n+// of jemalloc. We need to actually reference its symbols for it to get linked.\n+// The two crates we link to here, `std` and `rustc_driver`, are both dynamic\n+// libraries. So we must reference jemalloc symbols one way or another, because\n+// this file is the only object code in the rustc executable.\n #[cfg(feature = \"tikv-jemalloc-sys\")]\n use tikv_jemalloc_sys as jemalloc_sys;\n \n fn main() {\n-    // Pull in jemalloc when enabled.\n-    //\n-    // Note that we're pulling in a static copy of jemalloc which means that to\n-    // pull it in we need to actually reference its symbols for it to get\n-    // linked. The two crates we link to here, std and rustc_driver, are both\n-    // dynamic libraries. That means to pull in jemalloc we actually need to\n-    // reference allocation symbols one way or another (as this file is the only\n-    // object code in the rustc executable).\n+    // See the comment at the top of this file for an explanation of this.\n     #[cfg(feature = \"tikv-jemalloc-sys\")]\n     {\n         use std::os::raw::{c_int, c_void};"}, {"sha": "95de28e0c5b26cf1d503996e57a9ed67ef278d13", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d6d12b6a5d2c2906ef4e85ce1d50a8684cf43626", "patch": "@@ -63,14 +63,12 @@ extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n extern crate test;\n \n+// See docs in https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\n+// about jemalloc.\n #[cfg(feature = \"jemalloc\")]\n extern crate tikv_jemalloc_sys;\n #[cfg(feature = \"jemalloc\")]\n use tikv_jemalloc_sys as jemalloc_sys;\n-#[cfg(feature = \"jemalloc\")]\n-extern crate tikv_jemallocator;\n-#[cfg(feature = \"jemalloc\")]\n-use tikv_jemallocator as jemallocator;\n \n use std::default::Default;\n use std::env;\n@@ -125,15 +123,9 @@ mod visit;\n mod visit_ast;\n mod visit_lib;\n \n-// See docs in https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\n-// about jemallocator\n-#[cfg(feature = \"jemalloc\")]\n-#[global_allocator]\n-static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n-\n pub fn main() {\n     // See docs in https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\n-    // about jemalloc-sys\n+    // about jemalloc.\n     #[cfg(feature = \"jemalloc\")]\n     {\n         use std::os::raw::{c_int, c_void};\n@@ -152,10 +144,6 @@ pub fn main() {\n         #[used]\n         static _F6: unsafe extern \"C\" fn(*mut c_void) = jemalloc_sys::free;\n \n-        // On OSX, jemalloc doesn't directly override malloc/free, but instead\n-        // registers itself with the allocator's zone APIs in a ctor. However,\n-        // the linker doesn't seem to consider ctors as \"used\" when statically\n-        // linking, so we need to explicitly depend on the function.\n         #[cfg(target_os = \"macos\")]\n         {\n             extern \"C\" {"}]}