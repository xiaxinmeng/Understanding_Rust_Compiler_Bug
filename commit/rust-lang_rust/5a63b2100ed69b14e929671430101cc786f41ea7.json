{"sha": "5a63b2100ed69b14e929671430101cc786f41ea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjNiMjEwMGVkNjliMTRlOTI5NjcxNDMwMTAxY2M3ODZmNDFlYTc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-13T20:20:49Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-13T22:31:39Z"}, "message": "More consistent use of backticks and \"expected\" in error messages.\n\nGot some of the debug messages, here, too.  I figure it doesn't hurt\nto get used to doing this even in places where users won't ever see\nit.", "tree": {"sha": "c275c71c293887dac091c36287322bb45e016142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c275c71c293887dac091c36287322bb45e016142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a63b2100ed69b14e929671430101cc786f41ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a63b2100ed69b14e929671430101cc786f41ea7", "html_url": "https://github.com/rust-lang/rust/commit/5a63b2100ed69b14e929671430101cc786f41ea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a63b2100ed69b14e929671430101cc786f41ea7/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a81ad12e5cb7f84138af6624f30c5dbb75512f", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a81ad12e5cb7f84138af6624f30c5dbb75512f", "html_url": "https://github.com/rust-lang/rust/commit/07a81ad12e5cb7f84138af6624f30c5dbb75512f"}], "stats": {"total": 200, "additions": 102, "deletions": 98}, "files": [{"sha": "917cae32e2dd947714ad54d9efc279efe3247d06", "filename": "src/libstd/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -405,7 +405,7 @@ impl parser for parser {\n             alt self.ch {\n               ',' { self.bump(); }\n               ']' { self.bump(); ret ok(list(@values)); }\n-              _ { ret self.error(\"expecting ',' or ']'\"); }\n+              _ { ret self.error(\"expected `,` or `]`\"); }\n             }\n         };\n     }\n@@ -437,7 +437,7 @@ impl parser for parser {\n \n             if self.ch != ':' {\n                 if self.eof() { break; }\n-                ret self.error(\"expecting ':'\");\n+                ret self.error(\"expected `:`\");\n             }\n             self.bump();\n \n@@ -452,7 +452,7 @@ impl parser for parser {\n               '}' { self.bump(); ret ok(dict(values)); }\n               _ {\n                   if self.eof() { break; }\n-                  ret self.error(\"expecting ',' or '}'\");\n+                  ret self.error(\"expected `,` or `}`\");\n               }\n             }\n         }\n@@ -797,7 +797,7 @@ mod tests {\n         assert from_str(\"[1,]\") ==\n             err({line: 1u, col: 4u, msg: @\"invalid syntax\"});\n         assert from_str(\"[6 7]\") ==\n-            err({line: 1u, col: 4u, msg: @\"expecting ',' or ']'\"});\n+            err({line: 1u, col: 4u, msg: @\"expected `,` or `]`\"});\n \n         assert from_str(\"[]\") == ok(list(@~[]));\n         assert from_str(\"[ ]\") == ok(list(@~[]));\n@@ -826,13 +826,13 @@ mod tests {\n             err({line: 1u, col: 6u, msg: @\"EOF while parsing object\"});\n \n         assert from_str(\"{\\\"a\\\" 1\") ==\n-            err({line: 1u, col: 6u, msg: @\"expecting ':'\"});\n+            err({line: 1u, col: 6u, msg: @\"expected `:`\"});\n         assert from_str(\"{\\\"a\\\":\") ==\n             err({line: 1u, col: 6u, msg: @\"EOF while parsing value\"});\n         assert from_str(\"{\\\"a\\\":1\") ==\n             err({line: 1u, col: 7u, msg: @\"EOF while parsing object\"});\n         assert from_str(\"{\\\"a\\\":1 1\") ==\n-            err({line: 1u, col: 8u, msg: @\"expecting ',' or '}'\"});\n+            err({line: 1u, col: 8u, msg: @\"expected `,` or `}`\"});\n         assert from_str(\"{\\\"a\\\":1,\") ==\n             err({line: 1u, col: 8u, msg: @\"EOF while parsing object\"});\n "}, {"sha": "9e5f2ac2c9ba9a19fa67188c6f554a65d062586c", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -28,23 +28,23 @@ impl parser_common for parser {\n     fn unexpected_last(t: token::token) -> ! {\n         self.span_fatal(\n             copy self.last_span,\n-            \"unexpected token: '\" + token_to_str(self.reader, t) + \"'\");\n+            \"unexpected token: `\" + token_to_str(self.reader, t) + \"`\");\n     }\n \n     fn unexpected() -> ! {\n-        self.fatal(\"unexpected token: '\"\n-                   + token_to_str(self.reader, self.token) + \"'\");\n+        self.fatal(\"unexpected token: `\"\n+                   + token_to_str(self.reader, self.token) + \"`\");\n     }\n \n     fn expect(t: token::token) {\n         if self.token == t {\n             self.bump();\n         } else {\n-            let mut s: str = \"expecting '\";\n+            let mut s: str = \"expected `\";\n             s += token_to_str(self.reader, t);\n-            s += \"' but found '\";\n+            s += \"` but found `\";\n             s += token_to_str(self.reader, self.token);\n-            self.fatal(s + \"'\");\n+            self.fatal(s + \"`\");\n         }\n     }\n \n@@ -53,8 +53,9 @@ impl parser_common for parser {\n           token::IDENT(i, _) { self.bump(); ret self.get_str(i); }\n           token::ACTUALLY(token::w_ident(*)) { self.bug(\n               \"ident interpolation not converted to real token\"); }\n-          _ { self.fatal(\"expecting ident, found \"\n-                      + token_to_str(self.reader, self.token)); }\n+          _ { self.fatal(\"expected ident, found `\"\n+                         + token_to_str(self.reader, self.token)\n+                         + \"`\"); }\n         }\n     }\n \n@@ -121,8 +122,9 @@ impl parser_common for parser {\n     fn expect_keyword(word: str) {\n         self.require_keyword(word);\n         if !self.eat_keyword(word) {\n-            self.fatal(\"expecting \" + word + \", found \" +\n-                    token_to_str(self.reader, self.token));\n+            self.fatal(\"expected `\" + word + \"`, found `\" +\n+                       token_to_str(self.reader, self.token) +\n+                       \"`\");\n         }\n     }\n \n@@ -152,10 +154,11 @@ impl parser_common for parser {\n         } else if self.token == token::BINOP(token::SHR) {\n             self.swap(token::GT, self.span.lo + 1u, self.span.hi);\n         } else {\n-            let mut s: str = \"expecting \";\n+            let mut s: str = \"expected `\";\n             s += token_to_str(self.reader, token::GT);\n-            s += \", found \";\n+            s += \"`, found `\";\n             s += token_to_str(self.reader, self.token);\n+            s += \"`\";\n             self.fatal(s);\n         }\n     }"}, {"sha": "54c268722c8dc9ed49254697e3ee97d798356b79", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -311,7 +311,7 @@ class parser {\n                            vis: public})\n               }\n \n-              _ { self.fatal(\"expected ';' or '}` \\\n+              _ { self.fatal(\"expected `;` or `}` \\\n                               but found `\"\n                              + token_to_str(self.reader, self.token) + \"`\");\n                 }\n@@ -545,7 +545,7 @@ class parser {\n         } else if self.token == token::MOD_SEP || is_ident(self.token) {\n             let path = self.parse_path_with_tps(colons_before_params);\n             ty_path(path, self.get_id())\n-        } else { self.fatal(\"expecting type\"); };\n+        } else { self.fatal(\"expected type\"); };\n \n         let sp = mk_sp(lo, self.last_span.hi);\n         ret @{id: self.get_id(),\n@@ -1176,7 +1176,7 @@ class parser {\n                 self.bump();\n                 ret (some(sep), zerok);\n             } else {\n-                self.fatal(\"expected '*' or '+'\");\n+                self.fatal(\"expected `*` or `+`\");\n             }\n         }\n     }\n@@ -1709,8 +1709,9 @@ class parser {\n                 if self.token == token::UNDERSCORE {\n                     self.bump();\n                     if self.token != token::RBRACE {\n-                        self.fatal(\"expecting }, found \" +\n-                                   token_to_str(self.reader, self.token));\n+                        self.fatal(\"expected `}`, found `\" +\n+                                   token_to_str(self.reader, self.token) +\n+                                   \"`\");\n                     }\n                     etc = true;\n                     break;\n@@ -1855,7 +1856,7 @@ class parser {\n             is_mutbl = class_mutable;\n         }\n         if !is_plain_ident(self.token) {\n-            self.fatal(\"expecting ident\");\n+            self.fatal(\"expected ident\");\n         }\n         let name = self.parse_ident();\n         self.expect(token::COLON);\n@@ -2000,9 +2001,9 @@ class parser {\n                       }\n                       t {\n                         if classify::stmt_ends_with_semi(*stmt) {\n-                            self.fatal(\"expected ';' or '}' after expression \\\n-                                        but found '\"\n-                                       + token_to_str(self.reader, t) + \"'\");\n+                            self.fatal(\"expected `;` or `}` after expression \\\n+                                        but found `\"\n+                                       + token_to_str(self.reader, t) + \"`\");\n                         }\n                         vec::push(stmts, stmt);\n                       }\n@@ -2363,8 +2364,8 @@ class parser {\n             alt self.parse_item(attrs, vis) {\n               some(i) { vec::push(items, i); }\n               _ {\n-                self.fatal(\"expected item but found '\" +\n-                           token_to_str(self.reader, self.token) + \"'\");\n+                self.fatal(\"expected item but found `\" +\n+                           token_to_str(self.reader, self.token) + \"`\");\n               }\n             }\n             #debug[\"parse_mod_items: attrs=%?\", attrs];"}, {"sha": "089bde35734357d7eb968c8d86f010cceb6dba93", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -357,7 +357,7 @@ fn build_link_meta(sess: session, c: ast::crate, output: str,\n \n     fn warn_missing(sess: session, name: str, default: str) {\n         if !sess.building_library { ret; }\n-        sess.warn(#fmt[\"missing crate link meta '%s', using '%s' as default\",\n+        sess.warn(#fmt[\"missing crate link meta `%s`, using `%s` as default\",\n                        name, default]);\n     }\n \n@@ -371,7 +371,7 @@ fn build_link_meta(sess: session, c: ast::crate, output: str,\n                         let mut os =\n                             str::split_char(path::basename(output), '.');\n                         if (vec::len(os) < 2u) {\n-                            sess.fatal(#fmt(\"output file name %s doesn't\\\n+                            sess.fatal(#fmt(\"output file name `%s` doesn't\\\n                               appear to have an extension\", output));\n                         }\n                         vec::pop(os);\n@@ -680,7 +680,7 @@ fn link_binary(sess: session,\n     // We run 'cc' here\n     let prog = run::program_output(cc_prog, cc_args);\n     if 0 != prog.status {\n-        sess.err(#fmt[\"linking with %s failed with code %d\",\n+        sess.err(#fmt[\"linking with `%s` failed with code %d\",\n                       cc_prog, prog.status]);\n         sess.note(#fmt[\"%s arguments: %s\",\n                        cc_prog, str::connect(cc_args, \" \")]);\n@@ -696,7 +696,7 @@ fn link_binary(sess: session,\n     // Remove the temporary object file if we aren't saving temps\n     if !sess.opts.save_temps {\n         if ! os::remove_file(obj_filename) {\n-            sess.warn(#fmt[\"failed to delete object file '%s'\",\n+            sess.warn(#fmt[\"failed to delete object file `%s`\",\n                            obj_filename]);\n         }\n     }"}, {"sha": "32ed2c527bb563398b215ec698bfc32bfd17e98f", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -41,7 +41,7 @@ fn load_library_crate(cx: ctxt) -> {ident: str, data: @~[u8]} {\n       some(t) { ret t; }\n       none {\n         cx.diag.span_fatal(\n-            cx.span, #fmt[\"can't find crate for '%s'\", *cx.ident]);\n+            cx.span, #fmt[\"can't find crate for `%s`\", *cx.ident]);\n       }\n     }\n }"}, {"sha": "141ec29b5b2517acb438ca126c956529fe9ab414", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -43,15 +43,15 @@ fn check_capture_clause(tcx: ty::ctxt,\n         if !vec::any(*freevars, |fv| fv.def == cap_def ) {\n             tcx.sess.span_warn(\n                 cap_item.span,\n-                #fmt(\"captured variable '%s' not used in closure\",\n+                #fmt(\"captured variable `%s` not used in closure\",\n                      *cap_item.name));\n         }\n \n         let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n         if !seen_defs.insert(cap_def_id, ()) {\n             tcx.sess.span_err(\n                 cap_item.span,\n-                #fmt(\"variable '%s' captured more than once\",\n+                #fmt(\"variable `%s` captured more than once\",\n                      *cap_item.name));\n         }\n     }"}, {"sha": "8c47fe1aaf1511db1460e690e7f478bc30b346c7", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -127,7 +127,7 @@ fn get_lint_dict() -> lint_dict {\n         (\"vecs_not_implicitly_copyable\",\n          @{lint: vecs_not_implicitly_copyable,\n            desc: \"make vecs and strs not implicitly copyable\\\n-                  ('err' is ignored; only checked at top level\",\n+                  (`err` is ignored; only checked at top level\",\n            default: warn}),\n \n         (\"implicit_copies\",\n@@ -223,7 +223,7 @@ impl methods for ctxt {\n                             self.span_lint(\n                                 self.get_level(unrecognized_warning),\n                                 meta.span,\n-                                #fmt(\"unknown warning: '%s'\", name));\n+                                #fmt(\"unknown warning: `%s`\", name));\n                           }\n                           (_, some((lint, new_level))) {\n                             // we do multiple unneeded copies of the map"}, {"sha": "8581af175d9e951a7ce3f9b635df1670fb31aeed", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1309,7 +1309,7 @@ class Resolver {\n                         def_self(*) | def_arg(*) | def_local(*) |\n                         def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n                         def_use(*) | def_upvar(*) | def_region(*) {\n-                            fail #fmt(\"didn't expect %?\", def);\n+                            fail #fmt(\"didn't expect `%?`\", def);\n                         }\n                     }\n                 }\n@@ -1360,14 +1360,14 @@ class Resolver {\n         // skip them.\n \n         #debug(\"(building reduced graph for impls in external crate) looking \\\n-                for impls in '%s' (%?)\",\n+                for impls in `%s` (%?)\",\n                self.module_to_str(module),\n                copy module.def_id);\n \n         alt module.def_id {\n             none {\n                 #debug(\"(building reduced graph for impls in external \\\n-                        module) no def ID for '%s', skipping\",\n+                        module) no def ID for `%s`, skipping\",\n                        self.module_to_str(module));\n                 ret;\n             }\n@@ -1390,7 +1390,7 @@ class Resolver {\n             def_ids.insert(implementation.did, ());\n \n             #debug(\"(building reduced graph for impls in external module) \\\n-                    added impl '%s' (%?) to '%s'\",\n+                    added impl `%s` (%?) to `%s`\",\n                    *implementation.ident,\n                    implementation.did,\n                    self.module_to_str(module));\n@@ -1549,8 +1549,8 @@ class Resolver {\n         let mut resolution_result;\n         let module_path = import_directive.module_path;\n \n-        #debug(\"(resolving import for module) resolving import '%s::...' in \\\n-                '%s'\",\n+        #debug(\"(resolving import for module) resolving import `%s::...` in \\\n+                `%s`\",\n                *(*self.atom_table).atoms_to_str((*module_path).get()),\n                self.module_to_str(module));\n \n@@ -1633,15 +1633,15 @@ class Resolver {\n                              target: Atom, source: Atom)\n                           -> ResolveResult<()> {\n \n-        #debug(\"(resolving single import) resolving '%s' = '%s::%s' from \\\n-                '%s'\",\n+        #debug(\"(resolving single import) resolving `%s` = `%s::%s` from \\\n+                `%s`\",\n                *(*self.atom_table).atom_to_str(target),\n                self.module_to_str(containing_module),\n                *(*self.atom_table).atom_to_str(source),\n                self.module_to_str(module));\n \n         if !self.name_is_exported(containing_module, source) {\n-            #debug(\"(resolving single import) name '%s' is unexported\",\n+            #debug(\"(resolving single import) name `%s` is unexported\",\n                    *(*self.atom_table).atom_to_str(source));\n             ret Failed;\n         }\n@@ -1875,13 +1875,13 @@ class Resolver {\n                 |atom, target_import_resolution| {\n \n             if !self.name_is_exported(containing_module, atom) {\n-                #debug(\"(resolving glob import) name '%s' is unexported\",\n+                #debug(\"(resolving glob import) name `%s` is unexported\",\n                        *(*self.atom_table).atom_to_str(atom));\n                 again;\n             }\n \n             #debug(\"(resolving glob import) writing module resolution \\\n-                    %? into '%s'\",\n+                    %? into `%s`\",\n                    is_none(target_import_resolution.module_target),\n                    self.module_to_str(module));\n \n@@ -1952,7 +1952,7 @@ class Resolver {\n         // Add all children from the containing module.\n         for containing_module.children.each |atom, name_bindings| {\n             if !self.name_is_exported(containing_module, atom) {\n-                #debug(\"(resolving glob import) name '%s' is unexported\",\n+                #debug(\"(resolving glob import) name `%s` is unexported\",\n                        *(*self.atom_table).atom_to_str(atom));\n                 again;\n             }\n@@ -1971,8 +1971,8 @@ class Resolver {\n             }\n \n \n-            #debug(\"(resolving glob import) writing resolution '%s' in '%s' \\\n-                    to '%s'\",\n+            #debug(\"(resolving glob import) writing resolution `%s` in `%s` \\\n+                    to `%s`\",\n                    *(*self.atom_table).atom_to_str(atom),\n                    self.module_to_str(containing_module),\n                    self.module_to_str(module));\n@@ -2070,8 +2070,8 @@ class Resolver {\n         let module_path_len = (*module_path).len();\n         assert module_path_len > 0u;\n \n-        #debug(\"(resolving module path for import) processing '%s' rooted at \\\n-               '%s'\",\n+        #debug(\"(resolving module path for import) processing `%s` rooted at \\\n+               `%s`\",\n                *(*self.atom_table).atoms_to_str((*module_path).get()),\n                self.module_to_str(module));\n \n@@ -2107,8 +2107,8 @@ class Resolver {\n                                      namespace: Namespace)\n                                   -> ResolveResult<Target> {\n \n-        #debug(\"(resolving item in lexical scope) resolving '%s' in \\\n-                namespace %? in '%s'\",\n+        #debug(\"(resolving item in lexical scope) resolving `%s` in \\\n+                namespace %? in `%s`\",\n                *(*self.atom_table).atom_to_str(name),\n                namespace,\n                self.module_to_str(module));\n@@ -2234,12 +2234,12 @@ class Resolver {\n                               xray: XrayFlag)\n                            -> ResolveResult<Target> {\n \n-        #debug(\"(resolving name in module) resolving '%s' in '%s'\",\n+        #debug(\"(resolving name in module) resolving `%s` in `%s`\",\n                *(*self.atom_table).atom_to_str(name),\n                self.module_to_str(module));\n \n         if xray == NoXray && !self.name_is_exported(module, name) {\n-            #debug(\"(resolving name in module) name '%s' is unexported\",\n+            #debug(\"(resolving name in module) name `%s` is unexported\",\n                    *(*self.atom_table).atom_to_str(name));\n             ret Failed;\n         }\n@@ -2320,8 +2320,8 @@ class Resolver {\n             }\n         }\n \n-        #debug(\"(resolving one-level naming result) resolving import '%s' = \\\n-                '%s' in '%s'\",\n+        #debug(\"(resolving one-level naming result) resolving import `%s` = \\\n+                `%s` in `%s`\",\n                 *(*self.atom_table).atom_to_str(target_name),\n                 *(*self.atom_table).atom_to_str(source_name),\n                 self.module_to_str(module));\n@@ -2456,7 +2456,7 @@ class Resolver {\n             }\n             some(import_resolution) {\n                 #debug(\"(resolving one-level renaming import) writing module \\\n-                        result %? for '%s' into '%s'\",\n+                        result %? for `%s` into `%s`\",\n                        is_none(module_result),\n                        *(*self.atom_table).atom_to_str(target_name),\n                        self.module_to_str(module));\n@@ -2536,7 +2536,7 @@ class Resolver {\n             some(_) {\n                 // Bail out.\n                 #debug(\"(recording exports for module subtree) not recording \\\n-                        exports for '%s'\",\n+                        exports for `%s`\",\n                        self.module_to_str(module));\n                 ret;\n             }\n@@ -2622,7 +2622,7 @@ class Resolver {\n             some(_) {\n                 // Bail out.\n                 #debug(\"(building impl scopes for module subtree) not \\\n-                        resolving implementations for '%s'\",\n+                        resolving implementations for `%s`\",\n                        self.module_to_str(module));\n                 ret;\n             }\n@@ -2724,15 +2724,15 @@ class Resolver {\n             some(name) {\n                 alt orig_module.children.find(name) {\n                     none {\n-                        #debug(\"!!! (with scope) didn't find '%s' in '%s'\",\n+                        #debug(\"!!! (with scope) didn't find `%s` in `%s`\",\n                                *(*self.atom_table).atom_to_str(name),\n                                self.module_to_str(orig_module));\n                     }\n                     some(name_bindings) {\n                         alt (*name_bindings).get_module_if_available() {\n                             none {\n                                 #debug(\"!!! (with scope) didn't find module \\\n-                                        for '%s' in '%s'\",\n+                                        for `%s` in `%s`\",\n                                        *(*self.atom_table).atom_to_str(name),\n                                        self.module_to_str(orig_module));\n                             }\n@@ -3155,7 +3155,7 @@ class Resolver {\n \n                         self.resolve_type(argument.ty, visitor);\n \n-                        #debug(\"(resolving function) recorded argument '%s'\",\n+                        #debug(\"(resolving function) recorded argument `%s`\",\n                                *(*self.atom_table).atom_to_str(name));\n                     }\n \n@@ -3504,7 +3504,7 @@ class Resolver {\n                 let mut result_def;\n                 alt self.resolve_path(path, TypeNS, true, visitor) {\n                     some(def) {\n-                        #debug(\"(resolving type) resolved '%s' to type\",\n+                        #debug(\"(resolving type) resolved `%s` to type\",\n                                *path.idents.last());\n                         result_def = some(def);\n                     }\n@@ -3542,15 +3542,15 @@ class Resolver {\n                 alt copy result_def {\n                     some(def) {\n                         // Write the result into the def map.\n-                        #debug(\"(resolving type) writing resolution for '%s' \\\n+                        #debug(\"(resolving type) writing resolution for `%s` \\\n                                 (id %d)\",\n                                connect(path.idents.map(|x| *x), \"::\"),\n                                path_id);\n                         self.record_def(path_id, def);\n                     }\n                     none {\n                         self.session.span_err\n-                            (ty.span, #fmt(\"use of undeclared type name '%s'\",\n+                            (ty.span, #fmt(\"use of undeclared type name `%s`\",\n                                            connect(path.idents.map(|x| *x),\n                                                    \"::\")));\n                     }\n@@ -3606,7 +3606,7 @@ class Resolver {\n \n                     alt self.resolve_enum_variant_or_const(atom) {\n                         FoundEnumVariant(def) if mode == RefutableMode {\n-                            #debug(\"(resolving pattern) resolving '%s' to \\\n+                            #debug(\"(resolving pattern) resolving `%s` to \\\n                                     enum variant\",\n                                    *path.idents[0]);\n \n@@ -3628,7 +3628,7 @@ class Resolver {\n                                                    in scope\");\n                         }\n                         EnumVariantOrConstNotFound {\n-                            #debug(\"(resolving pattern) binding '%s'\",\n+                            #debug(\"(resolving pattern) binding `%s`\",\n                                    *path.idents[0]);\n \n                             let is_mutable = mutability == Mutable;\n@@ -3822,7 +3822,7 @@ class Resolver {\n                                          -> NameDefinition {\n \n         if xray == NoXray && !self.name_is_exported(containing_module, name) {\n-            #debug(\"(resolving definition of name in module) name '%s' is \\\n+            #debug(\"(resolving definition of name in module) name `%s` is \\\n                     unexported\",\n                    *(*self.atom_table).atom_to_str(name));\n             ret NoNameDefinition;\n@@ -4018,7 +4018,7 @@ class Resolver {\n \n         alt copy search_result {\n             some(dl_def(def)) {\n-                #debug(\"(resolving path in local ribs) resolved '%s' to \\\n+                #debug(\"(resolving path in local ribs) resolved `%s` to \\\n                         local: %?\",\n                        *(*self.atom_table).atom_to_str(name),\n                        def);\n@@ -4049,7 +4049,7 @@ class Resolver {\n                     }\n                     some(def) {\n                         #debug(\"(resolving item path in lexical scope) \\\n-                                resolved '%s' to item\",\n+                                resolved `%s` to item\",\n                                *(*self.atom_table).atom_to_str(name));\n                         ret some(def);\n                     }\n@@ -4082,7 +4082,7 @@ class Resolver {\n                 alt self.resolve_path(path, ValueNS, true, visitor) {\n                     some(def) {\n                         // Write the result into the def map.\n-                        #debug(\"(resolving expr) resolved '%s'\",\n+                        #debug(\"(resolving expr) resolved `%s`\",\n                                connect(path.idents.map(|x| *x), \"::\"));\n                         self.record_def(expr.id, def);\n                     }\n@@ -4166,7 +4166,7 @@ class Resolver {\n             some(_) {\n                 // Bail out.\n                 #debug(\"(checking for unused imports in module subtree) not \\\n-                        checking for unused imports for '%s'\",\n+                        checking for unused imports for `%s`\",\n                        self.module_to_str(module));\n                 ret;\n             }\n@@ -4262,7 +4262,7 @@ class Resolver {\n     }\n \n     fn dump_module(module: @Module) {\n-        #debug(\"Dump of module '%s':\", self.module_to_str(module));\n+        #debug(\"Dump of module `%s`:\", self.module_to_str(module));\n \n         #debug(\"Children:\");\n         for module.children.each |name, _child| {"}, {"sha": "0daf663315bf2929f7a798385633f19851d7ce97", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -262,7 +262,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n         if !ok {\n                 tcx.sess.span_err(main_span,\n                    #fmt(\"Wrong type in main function: found `%s`, \\\n-                   expecting `extern fn(~[str]) -> ()` \\\n+                   expected `extern fn(~[str]) -> ()` \\\n                    or `extern fn() -> ()`\",\n                          ty_to_str(tcx, main_t)));\n          }"}, {"sha": "0a86c40a3afa75245753510b73f0a6d132d97f08", "filename": "src/test/compile-fail/attr-bad-crate-attr.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: expecting mod\n+// error-pattern: expected `mod`\n \n #[attr = \"val\"];\n #[attr = \"val\"] // Unterminated"}, {"sha": "6b074d736cd7f488848dfb55a88cc9d4c5a9e59c", "filename": "src/test/compile-fail/attr-bad-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expecting ']'\n+// error-pattern:expected `]`\n \n // asterisk is bogus\n #[attr*]"}, {"sha": "4d8de65492f4d8dfc0c6bb055910512a69fe8654", "filename": "src/test/compile-fail/bad-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: expecting\n+// error-pattern: expected\n \n fn main() {\n   let int x = 5;"}, {"sha": "1a7c9616c3dbe3e9c67b9d786d4d3ac1905a215b", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:expecting `extern fn(~[str])\n+// error-pattern:expected `extern fn(~[str])\n \n fn main(x: int) { }"}, {"sha": "ad2ac53ad6f927c5ce10565fba38c89dfb47868c", "filename": "src/test/compile-fail/bad-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-name.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: expecting\n+// error-pattern: expected\n \n fn main() {\n   let x.y::<int>.z foo;"}, {"sha": "4c24a5f4fc0a8ee7a9e9d89c880167f5153d4bf4", "filename": "src/test/compile-fail/cap-clause-both-copy-and-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:variable 'x' captured more than once\n+// error-pattern:variable `x` captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~(move x, copy x) -> int { x };"}, {"sha": "35edca6dbabe5101eb4463771dde932ad3486c76", "filename": "src/test/compile-fail/cap-clause-double-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:variable 'x' captured more than once\n+// error-pattern:variable `x` captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~(copy x, copy x) -> int { x };"}, {"sha": "618edc4d7c0f9c59206c4b3097ce7e6a914769a6", "filename": "src/test/compile-fail/cap-clause-double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:variable 'x' captured more than once\n+// error-pattern:variable `x` captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~(move x, move x) -> int { x };"}, {"sha": "8610da71a3f33c97a03d2eed4183573e7ae5dc92", "filename": "src/test/compile-fail/do-lambda-requires-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     do something\n-        |x| do somethingelse //~ ERROR: expecting '{' but found 'do'\n+        |x| do somethingelse //~ ERROR: expected `{` but found `do`\n         |y| say(x, y)\n }"}, {"sha": "f60f1b29b88f936f837a3a96f28af6bad9708909", "filename": "src/test/compile-fail/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo1.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let x = do y; //~ ERROR: expecting '{' but found\n+    let x = do y; //~ ERROR: expected `{` but found\n }"}, {"sha": "cad09912f4f94a10098bfe0a313213cfa7f62fbd", "filename": "src/test/compile-fail/empty-record-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:unexpected token: '}'\n+// error-pattern:unexpected token: `}`\n // Issue #1200\n \n type t = {};"}, {"sha": "61dab0a0677e6f29e699703599577c4fde7c78b2", "filename": "src/test/compile-fail/empty-vec-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let v = ~[,]; //~ ERROR unexpected token: ','\n+    let v = ~[,]; //~ ERROR unexpected token: `,`\n }"}, {"sha": "67efdcd0187eaea42309948a352cfa39c693f664", "filename": "src/test/compile-fail/ext-after-attrib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected item but found '#'\n+// error-pattern:expected item but found `#`\n \n // Don't know how to deal with a syntax extension appearing after an\n // item attribute. Probably could use a better error message."}, {"sha": "0372d35ce8dfdd0e4572f8a501bce1a667c008a7", "filename": "src/test/compile-fail/import-from-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expecting\n+// error-pattern:expected\n import foo::{bar}::baz\n\\ No newline at end of file"}, {"sha": "6874a672e74d528154b8e7fe49c68ab9392bba9f", "filename": "src/test/compile-fail/import-from-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expecting\n+// error-pattern:expected\n \n import baz = foo::{bar};\n "}, {"sha": "e8cfa388574ed72508a44a447108137d5c09696f", "filename": "src/test/compile-fail/import-glob-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expecting\n+// error-pattern:expected\n import foo::*::bar\n\\ No newline at end of file"}, {"sha": "7ca92bad62dd8df50a0b67a05714086b7f1d70f4", "filename": "src/test/compile-fail/import-glob-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expecting\n+// error-pattern:expected\n \n import baz = foo::*;\n "}, {"sha": "20a59c3eaa10c989db669c8e7475d0c68a902cc5", "filename": "src/test/compile-fail/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n // xfail-test\n \n-fn foo(x) { //~ ERROR expecting ':' but found ')'\n+fn foo(x) { //~ ERROR expected `:` but found `)`\n }\n\\ No newline at end of file"}, {"sha": "13b98b8e824f4ac79130bd38654eeb0bf25c7449", "filename": "src/test/compile-fail/use-meta-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't find crate for 'std'\n+// error-pattern:can't find crate for `std`\n \n use std(complex(meta(item)));\n "}, {"sha": "367b13663d233faa105a1ad49fd0360854e40529", "filename": "src/test/compile-fail/use-meta.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5a63b2100ed69b14e929671430101cc786f41ea7/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc?ref=5a63b2100ed69b14e929671430101cc786f41ea7", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't find crate for 'std'\n+// error-pattern:can't find crate for `std`\n \n use std (name = \"std\",\n          vers = \"bogus\");\n\\ No newline at end of file"}]}