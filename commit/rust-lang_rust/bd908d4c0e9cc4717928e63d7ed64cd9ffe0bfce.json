{"sha": "bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOTA4ZDRjMGU5Y2M0NzE3OTI4ZTYzZDdlZDY0Y2Q5ZmZlMGJmY2U=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-07T20:30:48Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T22:45:16Z"}, "message": "std and rustc: explicitly pass c strings to c functions\n\nWhen strings lose their trailing null, this pattern will become dangerous:\n\nlet foo = \"bar\";\nlet foo_ptr: *u8 = &foo[0];\n\nInstead we should use c_strs to handle this correctly.", "tree": {"sha": "320111032a4e6435c3e2a50421909249b8f49f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320111032a4e6435c3e2a50421909249b8f49f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "html_url": "https://github.com/rust-lang/rust/commit/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3102b1797e24b9dd8eef2f68a74ec83749d7b53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3102b1797e24b9dd8eef2f68a74ec83749d7b53d", "html_url": "https://github.com/rust-lang/rust/commit/3102b1797e24b9dd8eef2f68a74ec83749d7b53d"}], "stats": {"total": 208, "additions": 112, "deletions": 96}, "files": [{"sha": "bfcc1e1b6a16833116ef8414c15017c13fdf0372", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "patch": "@@ -2400,11 +2400,10 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 (rust_main, args)\n             };\n \n-            let result = llvm::LLVMBuildCall(bld,\n-                                             start_fn,\n-                                             &args[0],\n-                                             args.len() as c_uint,\n-                                             noname());\n+            let result = do args.as_imm_buf |buf, len| {\n+                llvm::LLVMBuildCall(bld, start_fn, buf, len as c_uint, noname())\n+            };\n+\n             llvm::LLVMBuildRet(bld, result);\n         }\n     }"}, {"sha": "678704fe0983308ee45bd5a6afbc051f76834721", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "patch": "@@ -2652,7 +2652,7 @@ pub mod funcs {\n                 pub fn execvpe(c: *c_char, argv: **c_char, envp: **c_char)\n                                -> c_int;\n                 #[link_name = \"_getcwd\"]\n-                pub fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                pub fn getcwd(buf: *mut c_char, size: size_t) -> *c_char;\n                 #[link_name = \"_getpid\"]\n                 pub fn getpid() -> c_int;\n                 #[link_name = \"_isatty\"]\n@@ -2804,7 +2804,7 @@ pub mod funcs {\n                 pub fn execvp(c: *c_char, argv: **c_char) -> c_int;\n                 pub fn fork() -> pid_t;\n                 pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n-                pub fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                pub fn getcwd(buf: *mut c_char, size: size_t) -> *c_char;\n                 pub fn getegid() -> gid_t;\n                 pub fn geteuid() -> uid_t;\n                 pub fn getgid() -> gid_t ;"}, {"sha": "48a14d6893ed04eeb8bb8751433f3a895d35350b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 52, "deletions": 42, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "patch": "@@ -74,14 +74,15 @@ pub static TMPBUF_SZ : uint = 1000u;\n static BUF_BYTES : uint = 2048u;\n \n pub fn getcwd() -> Path {\n-    let buf = [0 as libc::c_char, ..BUF_BYTES];\n-    unsafe {\n-        if(0 as *libc::c_char == libc::getcwd(\n-            &buf[0],\n-            BUF_BYTES as libc::size_t)) {\n-            fail!();\n+    let mut buf = [0 as libc::c_char, ..BUF_BYTES];\n+    do buf.as_mut_buf |buf, len| {\n+        unsafe {\n+            if libc::getcwd(buf, len as size_t).is_null() {\n+                fail!()\n+            }\n+\n+            Path(str::raw::from_c_str(buf as *c_char))\n         }\n-        Path(str::raw::from_c_str(&buf[0]))\n     }\n }\n \n@@ -464,18 +465,18 @@ pub fn self_exe_path() -> Option<Path> {\n         unsafe {\n             use libc::funcs::posix01::unistd::readlink;\n \n-            let mut path_str = str::with_capacity(TMPBUF_SZ);\n-            let len = do path_str.to_c_str().with_ref |buf| {\n-                let buf = buf as *mut c_char;\n-                do \"/proc/self/exe\".to_c_str().with_ref |proc_self_buf| {\n-                    readlink(proc_self_buf, buf, TMPBUF_SZ as size_t)\n+            let mut path = [0 as c_char, .. TMPBUF_SZ];\n+\n+            do path.as_mut_buf |buf, len| {\n+                let len = do \"/proc/self/exe\".to_c_str.with_ref |proc_self_buf| {\n+                    readlink(proc_self_buf, buf, len as size_t) as uint\n+                };\n+\n+                if len == -1 {\n+                    None\n+                } else {\n+                    Some(str::raw::from_buf_len(buf as *u8, len))\n                 }\n-            };\n-            if len == -1 {\n-                None\n-            } else {\n-                str::raw::set_len(&mut path_str, len as uint);\n-                Some(path_str)\n             }\n         }\n     }\n@@ -699,13 +700,15 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             extern {\n                 fn rust_list_dir_val(ptr: *dirent_t) -> *libc::c_char;\n             }\n-            let input = p.to_str();\n             let mut strings = ~[];\n-            let input_ptr = ::cast::transmute(&input[0]);\n             debug!(\"os::list_dir -- BEFORE OPENDIR\");\n-            let dir_ptr = opendir(input_ptr);\n+\n+            let dir_ptr = do p.to_c_str().with_ref |buf| {\n+                opendir(buf)\n+            };\n+\n             if (dir_ptr as uint != 0) {\n-        debug!(\"os::list_dir -- opendir() SUCCESS\");\n+                debug!(\"os::list_dir -- opendir() SUCCESS\");\n                 let mut entry_ptr = readdir(dir_ptr);\n                 while (entry_ptr as uint != 0) {\n                     strings.push(str::raw::from_c_str(rust_list_dir_val(\n@@ -715,7 +718,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                 closedir(dir_ptr);\n             }\n             else {\n-        debug!(\"os::list_dir -- opendir() FAILURE\");\n+                debug!(\"os::list_dir -- opendir() FAILURE\");\n             }\n             debug!(\n                 \"os::list_dir -- AFTER -- #: %?\",\n@@ -1043,14 +1046,15 @@ pub fn last_os_error() -> ~str {\n         }\n \n         let mut buf = [0 as c_char, ..TMPBUF_SZ];\n-        unsafe {\n-            let err = strerror_r(errno() as c_int, &mut buf[0],\n-                                 TMPBUF_SZ as size_t);\n-            if err < 0 {\n-                fail!(\"strerror_r failure\");\n-            }\n \n-            str::raw::from_c_str(&buf[0])\n+        do buf.as_mut_buf |buf, len| {\n+            unsafe {\n+                if strerror_r(errno() as c_int, buf, len as size_t) < 0 {\n+                    fail!(\"strerror_r failure\");\n+                }\n+\n+                str::raw::from_c_str(buf as *c_char)\n+            }\n         }\n     }\n \n@@ -1076,23 +1080,29 @@ pub fn last_os_error() -> ~str {\n         static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n         static FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n-        let mut buf = [0 as c_char, ..TMPBUF_SZ];\n-\n         // This value is calculated from the macro\n         // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)\n         let langId = 0x0800 as DWORD;\n         let err = errno() as DWORD;\n-        unsafe {\n-            let res = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |\n-                                     FORMAT_MESSAGE_IGNORE_INSERTS,\n-                                     ptr::mut_null(), err, langId,\n-                                     &mut buf[0], TMPBUF_SZ as DWORD,\n-                                     ptr::null());\n-            if res == 0 {\n-                fail!(\"[%?] FormatMessage failure\", errno());\n-            }\n \n-            str::raw::from_c_str(&buf[0])\n+        let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+\n+        do buf.as_imm_buf |buf, len| {\n+            unsafe {\n+                let res = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |\n+                                         FORMAT_MESSAGE_IGNORE_INSERTS,\n+                                         ptr::mut_null(),\n+                                         err,\n+                                         langId,\n+                                         buf,\n+                                         len as DWORD,\n+                                         ptr::null());\n+                if res == 0 {\n+                    fail!(\"[%?] FormatMessage failure\", errno());\n+                }\n+\n+                str::raw::from_c_str(buf)\n+            }\n         }\n     }\n "}, {"sha": "88a915a1e55945424175cd8e0be7db36ae0fc473", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "patch": "@@ -442,6 +442,7 @@ pub mod ptr_tests {\n     use super::*;\n     use prelude::*;\n \n+    use c_str::ToCStr;\n     use cast;\n     use libc;\n     use str;\n@@ -486,7 +487,6 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_position() {\n-        use c_str::ToCStr;\n         use libc::c_char;\n \n         do \"hello\".to_c_str().with_ref |p| {\n@@ -500,8 +500,6 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_buf_len() {\n-        use c_str::ToCStr;\n-\n         do \"hello\".to_c_str().with_ref |p0| {\n             do \"there\".to_c_str().with_ref |p1| {\n                 do \"thing\".to_c_str().with_ref |p2| {\n@@ -608,66 +606,75 @@ pub mod ptr_tests {\n     #[test]\n     fn test_ptr_array_each_with_len() {\n         unsafe {\n-            let one = ~\"oneOne\";\n-            let two = ~\"twoTwo\";\n-            let three = ~\"threeThree\";\n-            let arr: ~[*i8] = ~[\n-                ::cast::transmute(&one[0]),\n-                ::cast::transmute(&two[0]),\n-                ::cast::transmute(&three[0]),\n+            let one = \"oneOne\".to_c_str();\n+            let two = \"twoTwo\".to_c_str();\n+            let three = \"threeThree\".to_c_str();\n+            let arr = ~[\n+                one.with_ref(|buf| buf),\n+                two.with_ref(|buf| buf),\n+                three.with_ref(|buf| buf),\n             ];\n             let expected_arr = [\n                 one, two, three\n             ];\n-            let arr_ptr = &arr[0];\n-            let mut ctr = 0;\n-            let mut iteration_count = 0;\n-            array_each_with_len(arr_ptr, arr.len(),\n-                                |e| {\n-                                         let actual = str::raw::from_c_str(e);\n-                                         let expected = expected_arr[ctr].clone();\n-                                         debug!(\n-                                             \"test_ptr_array_each e: %s, a: %s\",\n-                                             expected, actual);\n-                                         assert_eq!(actual, expected);\n-                                         ctr += 1;\n-                                         iteration_count += 1;\n-                                     });\n-            assert_eq!(iteration_count, 3u);\n+\n+            do arr.as_imm_buf |arr_ptr, arr_len| {\n+                let mut ctr = 0;\n+                let mut iteration_count = 0;\n+                do array_each_with_len(arr_ptr, arr_len) |e| {\n+                     let actual = str::raw::from_c_str(e);\n+                     let expected = do expected_arr[ctr].with_ref |buf| {\n+                         str::raw::from_c_str(buf)\n+                     };\n+                     debug!(\n+                         \"test_ptr_array_each_with_len e: %s, a: %s\",\n+                         expected, actual);\n+                     assert_eq!(actual, expected);\n+                     ctr += 1;\n+                     iteration_count += 1;\n+                 }\n+                assert_eq!(iteration_count, 3u);\n+            }\n         }\n     }\n+\n     #[test]\n     fn test_ptr_array_each() {\n         unsafe {\n-            let one = ~\"oneOne\";\n-            let two = ~\"twoTwo\";\n-            let three = ~\"threeThree\";\n-            let arr: ~[*i8] = ~[\n-                ::cast::transmute(&one[0]),\n-                ::cast::transmute(&two[0]),\n-                ::cast::transmute(&three[0]),\n+            let one = \"oneOne\".to_c_str();\n+            let two = \"twoTwo\".to_c_str();\n+            let three = \"threeThree\".to_c_str();\n+            let arr = ~[\n+                one.with_ref(|buf| buf),\n+                two.with_ref(|buf| buf),\n+                three.with_ref(|buf| buf),\n                 // fake a null terminator\n-                0 as *i8\n+                null(),\n             ];\n             let expected_arr = [\n                 one, two, three\n             ];\n-            let arr_ptr = &arr[0];\n-            let mut ctr = 0;\n-            let mut iteration_count = 0;\n-            array_each(arr_ptr, |e| {\n-                let actual = str::raw::from_c_str(e);\n-                let expected = expected_arr[ctr].clone();\n-                debug!(\n-                    \"test_ptr_array_each e: %s, a: %s\",\n-                    expected, actual);\n-                assert_eq!(actual, expected);\n-                ctr += 1;\n-                iteration_count += 1;\n-            });\n-            assert_eq!(iteration_count, 3);\n+\n+            do arr.as_imm_buf |arr_ptr, arr_len| {\n+                let mut ctr = 0;\n+                let mut iteration_count = 0;\n+                do array_each(arr_ptr) |e| {\n+                     let actual = str::raw::from_c_str(e);\n+                     let expected = do expected_arr[ctr].with_ref |buf| {\n+                         str::raw::from_c_str(buf)\n+                     };\n+                     debug!(\n+                         \"test_ptr_array_each e: %s, a: %s\",\n+                         expected, actual);\n+                     assert_eq!(actual, expected);\n+                     ctr += 1;\n+                     iteration_count += 1;\n+                 }\n+                assert_eq!(iteration_count, 3);\n+            }\n         }\n     }\n+\n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]"}]}