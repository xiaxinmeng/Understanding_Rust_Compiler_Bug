{"sha": "33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "node_id": "C_kwDOAAsO6NoAKDMzYWI1MTIzZTJhYzUxZTMxMmY3MmUyZDY4OWFhNTdhODQ4M2MyYWM", "commit": {"author": {"name": "Ken Matsui", "email": "26405363+ken-matsui@users.noreply.github.com", "date": "2021-11-05T19:43:55Z"}, "committer": {"name": "Ken Matsui", "email": "26405363+ken-matsui@users.noreply.github.com", "date": "2021-11-20T01:47:33Z"}, "message": "Clarify error messages caused by re-exporting `pub(crate)` visibility to outside", "tree": {"sha": "007237e89a8e26542b64241c95721ba65f8496ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007237e89a8e26542b64241c95721ba65f8496ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENhGM023oMzS0St3kEDNgsymO5DMFAmGYU7UACgkQEDNgsymO\n5DNzvxAA0cwVzE0eqYiA4cR2Mm6gdku4IQYB6rGGkAwMgot0/cOAnfjGS6Zk2LRn\nrXzeBKm7BjIrl5h+EpQvaGFcRtCNsXG714kGvhhzEJBS+7rsePQ9QqsaWTpW5Lx8\nQ3MULuF53yFQ4Wf6abepzNZvdlhzthqsPqVsXu+sZuqb4Z3KRzucFD00nruMEXAi\nySeSv59LJYr2ttDyIXAzN2yneahKn7UC7qgD2RkGjz5MXySIfhzMK6ZD1Pg+rubr\nDzT8Y7Rqb+Vo8nB5rrflobokoBMQt7WUi0lVD6iv+ynA0XO/PXsAhKB7HMsHWtqY\nyFuRWZUIuqyF5MCqq7M9ETZgS/uklEazafHRMTCOvN8X37jN9BYrtBMc0kakpxr8\nBn3kZFyUWP5mhBnpH7UuDEODFpqL9b6fgEBrSGys6n3N4aYRAKxMQv/9g65lSp6V\nOBoiEqPmFY7c4+bgOq8//acfkC3xL0UgkjrGUXzbKwF5y7XWU/PwZLseO8ZLVqQM\n91OanfjcvEtgxBMiuSYojhjhNmwc9StkyPuIG4exiBYYusWdbJGkLxZRR5aD6uN8\nZhqrvE/O+k0TWASnKoOFEAe8oaMwQrC5/Kg4ADSmucPq14zqaTkp7vSN4/DtqswM\nGqcYEgY2/E4Ddx7US+K4736Oq8ruP36tDgwm8aAlMgcHa4Zoz/Q=\n=/Vic\n-----END PGP SIGNATURE-----", "payload": "tree 007237e89a8e26542b64241c95721ba65f8496ef\nparent d22dd65835190278f315e06442614142653ec98f\nauthor Ken Matsui <26405363+ken-matsui@users.noreply.github.com> 1636141435 +0900\ncommitter Ken Matsui <26405363+ken-matsui@users.noreply.github.com> 1637372853 +0900\n\nClarify error messages caused by re-exporting `pub(crate)` visibility to outside\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "html_url": "https://github.com/rust-lang/rust/commit/33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/comments", "author": {"login": "ken-matsui", "id": 26405363, "node_id": "MDQ6VXNlcjI2NDA1MzYz", "avatar_url": "https://avatars.githubusercontent.com/u/26405363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ken-matsui", "html_url": "https://github.com/ken-matsui", "followers_url": "https://api.github.com/users/ken-matsui/followers", "following_url": "https://api.github.com/users/ken-matsui/following{/other_user}", "gists_url": "https://api.github.com/users/ken-matsui/gists{/gist_id}", "starred_url": "https://api.github.com/users/ken-matsui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ken-matsui/subscriptions", "organizations_url": "https://api.github.com/users/ken-matsui/orgs", "repos_url": "https://api.github.com/users/ken-matsui/repos", "events_url": "https://api.github.com/users/ken-matsui/events{/privacy}", "received_events_url": "https://api.github.com/users/ken-matsui/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ken-matsui", "id": 26405363, "node_id": "MDQ6VXNlcjI2NDA1MzYz", "avatar_url": "https://avatars.githubusercontent.com/u/26405363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ken-matsui", "html_url": "https://github.com/ken-matsui", "followers_url": "https://api.github.com/users/ken-matsui/followers", "following_url": "https://api.github.com/users/ken-matsui/following{/other_user}", "gists_url": "https://api.github.com/users/ken-matsui/gists{/gist_id}", "starred_url": "https://api.github.com/users/ken-matsui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ken-matsui/subscriptions", "organizations_url": "https://api.github.com/users/ken-matsui/orgs", "repos_url": "https://api.github.com/users/ken-matsui/repos", "events_url": "https://api.github.com/users/ken-matsui/events{/privacy}", "received_events_url": "https://api.github.com/users/ken-matsui/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d22dd65835190278f315e06442614142653ec98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22dd65835190278f315e06442614142653ec98f", "html_url": "https://github.com/rust-lang/rust/commit/d22dd65835190278f315e06442614142653ec98f"}], "stats": {"total": 366, "additions": 334, "deletions": 32}, "files": [{"sha": "bee3662183b6a5b0a000c3b64f9d33b1bb6b1ce9", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -1180,11 +1180,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut reexport_error = None;\n         let mut any_successful_reexport = false;\n+        let mut crate_private_reexport = false;\n         self.r.per_ns(|this, ns| {\n             if let Ok(binding) = source_bindings[ns].get() {\n                 let vis = import.vis.get();\n                 if !binding.vis.is_at_least(vis, &*this) {\n                     reexport_error = Some((ns, binding));\n+                    if let ty::Visibility::Restricted(binding_def_id) = binding.vis {\n+                        if binding_def_id.is_top_level_module() {\n+                            crate_private_reexport = true;\n+                        }\n+                    }\n                 } else {\n                     any_successful_reexport = true;\n                 }\n@@ -1207,24 +1213,34 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     import.span,\n                     &msg,\n                 );\n-            } else if ns == TypeNS {\n-                struct_span_err!(\n-                    self.r.session,\n-                    import.span,\n-                    E0365,\n-                    \"`{}` is private, and cannot be re-exported\",\n-                    ident\n-                )\n-                .span_label(import.span, format!(\"re-export of private `{}`\", ident))\n-                .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n-                .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", ident,);\n-                struct_span_err!(self.r.session, import.span, E0364, \"{}\", &msg)\n-                    .span_note(import.span, &note_msg)\n-                    .emit();\n+                let error_msg = if crate_private_reexport {\n+                    format!(\n+                        \"`{}` is only public within the crate, and cannot be re-exported outside\",\n+                        ident\n+                    )\n+                } else {\n+                    format!(\"`{}` is private, and cannot be re-exported\", ident)\n+                };\n+\n+                if ns == TypeNS {\n+                    let label_msg = if crate_private_reexport {\n+                        format!(\"re-export of crate public `{}`\", ident)\n+                    } else {\n+                        format!(\"re-export of private `{}`\", ident)\n+                    };\n+\n+                    struct_span_err!(self.r.session, import.span, E0365, \"{}\", error_msg)\n+                        .span_label(import.span, label_msg)\n+                        .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n+                        .emit();\n+                } else {\n+                    let note_msg =\n+                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n+                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n+                        .span_note(import.span, &note_msg)\n+                        .emit();\n+                }\n             }\n         }\n "}, {"sha": "464109247c9bab81b2d77a4e5b8940b5e162ddab", "filename": "src/test/ui/error-codes/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -3,6 +3,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n+//~^ ERROR `foo` is only public within the crate, and cannot be re-exported outside [E0365]\n \n fn main() {}"}, {"sha": "5bfcf1394d9fe3a7006e7e765402f03a7826f08f", "filename": "src/test/ui/error-codes/E0365.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -1,8 +1,8 @@\n-error[E0365]: `foo` is private, and cannot be re-exported\n+error[E0365]: `foo` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/E0365.rs:5:9\n    |\n LL | pub use foo as foo2;\n-   |         ^^^^^^^^^^^ re-export of private `foo`\n+   |         ^^^^^^^^^^^ re-export of crate public `foo`\n    |\n    = note: consider declaring type or module `foo` with `pub`\n "}, {"sha": "0a20f5fe98562f6827ee378aa57d66c77a0991df", "filename": "src/test/ui/modules/issue-56411.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -5,7 +5,7 @@ macro_rules! import {\n             mod $name;\n             pub use self::$name;\n             //~^ ERROR the name `issue_56411_aux` is defined multiple times\n-            //~| ERROR `issue_56411_aux` is private, and cannot be re-exported\n+            //~| ERROR `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n \n         )*\n     }"}, {"sha": "6732a8a3d7324ea383bf5bb7181954bfba5a66d9", "filename": "src/test/ui/modules/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -15,11 +15,11 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n    = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n+error[E0365]: `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/issue-56411.rs:6:21\n    |\n LL |             pub use self::$name;\n-   |                     ^^^^^^^^^^^ re-export of private `issue_56411_aux`\n+   |                     ^^^^^^^^^^^ re-export of crate public `issue_56411_aux`\n ...\n LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------ in this macro invocation"}, {"sha": "fa4f88666d8647e315de03edad9ab0c5bbc0f920", "filename": "src/test/ui/privacy/crate-private-reexport.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -0,0 +1,66 @@\n+fn f1() {}\n+enum E1 { V }\n+struct S1 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m1 {\n+    pub use ::f1; //~ ERROR `f1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S1; //~ ERROR `S1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1; //~ ERROR `E1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+pub(crate) fn f2() {}\n+pub(crate) enum E2 {\n+    V\n+}\n+pub(crate) struct S2 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m2 {\n+    pub use ::f2; //~ ERROR `f2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S2; //~ ERROR `S2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2; //~ ERROR `E2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+mod m3 {\n+    pub(crate) fn f3() {}\n+    pub(crate) enum E3 {\n+        V\n+    }\n+    pub(crate) struct S3 {\n+        #[rustfmt::skip]\n+        bar: i32,\n+    }\n+}\n+pub use m3::f3; //~ ERROR `f3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::S3; //~ ERROR `S3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3; //~ ERROR `E3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+\n+pub(self) fn f4() {}\n+pub use ::f4 as f5; //~ ERROR `f4` is only public within the crate, and cannot be re-exported outside\n+\n+pub mod m10 {\n+    pub mod m {\n+        pub(super) fn f6() {}\n+        pub(crate) fn f7() {}\n+        pub(in crate::m10) fn f8() {}\n+    }\n+    pub use self::m::f6; //~ ERROR `f6` is private, and cannot be re-exported\n+    pub use self::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+    pub use self::m::f8; //~ ERROR `f8` is private, and cannot be re-exported\n+}\n+pub use m10::m::f6; //~ ERROR function `f6` is private\n+pub use m10::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+pub use m10::m::f8; //~ ERROR function `f8` is private\n+\n+pub mod m11 {\n+    pub(self) fn f9() {}\n+}\n+pub use m11::f9; //~ ERROR function `f9` is private\n+\n+fn main() {}"}, {"sha": "66e11e8210771b79a7b137c2c206007d57c77774", "filename": "src/test/ui/privacy/crate-private-reexport.stderr", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -0,0 +1,220 @@\n+error[E0364]: `f1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+   |\n+note: consider marking `f1` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+\n+error[E0365]: `S1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:9:13\n+   |\n+LL |     pub use ::S1;\n+   |             ^^^^ re-export of crate public `S1`\n+   |\n+   = note: consider declaring type or module `S1` with `pub`\n+\n+error[E0365]: `E1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:10:13\n+   |\n+LL |     pub use ::E1;\n+   |             ^^^^ re-export of crate public `E1`\n+   |\n+   = note: consider declaring type or module `E1` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+   |\n+note: consider marking `f2` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+\n+error[E0365]: `S2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:24:13\n+   |\n+LL |     pub use ::S2;\n+   |             ^^^^ re-export of crate public `S2`\n+   |\n+   = note: consider declaring type or module `S2` with `pub`\n+\n+error[E0365]: `E2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:25:13\n+   |\n+LL |     pub use ::E2;\n+   |             ^^^^ re-export of crate public `E2`\n+   |\n+   = note: consider declaring type or module `E2` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+   |\n+note: consider marking `f3` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+\n+error[E0365]: `S3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:40:9\n+   |\n+LL | pub use m3::S3;\n+   |         ^^^^^^ re-export of crate public `S3`\n+   |\n+   = note: consider declaring type or module `S3` with `pub`\n+\n+error[E0365]: `E3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:41:9\n+   |\n+LL | pub use m3::E3;\n+   |         ^^^^^^ re-export of crate public `E3`\n+   |\n+   = note: consider declaring type or module `E3` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+\n+error[E0364]: `f4` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f4` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+\n+error[E0364]: `f6` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f6` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f8` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f8` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+\n+error[E0603]: function `f6` is private\n+  --> $DIR/crate-private-reexport.rs:57:17\n+   |\n+LL | pub use m10::m::f6;\n+   |                 ^^ private function\n+   |\n+note: the function `f6` is defined here\n+  --> $DIR/crate-private-reexport.rs:49:9\n+   |\n+LL |         pub(super) fn f6() {}\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f8` is private\n+  --> $DIR/crate-private-reexport.rs:59:17\n+   |\n+LL | pub use m10::m::f8;\n+   |                 ^^ private function\n+   |\n+note: the function `f8` is defined here\n+  --> $DIR/crate-private-reexport.rs:51:9\n+   |\n+LL |         pub(in crate::m10) fn f8() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f9` is private\n+  --> $DIR/crate-private-reexport.rs:64:14\n+   |\n+LL | pub use m11::f9;\n+   |              ^^ private function\n+   |\n+note: the function `f9` is defined here\n+  --> $DIR/crate-private-reexport.rs:62:5\n+   |\n+LL |     pub(self) fn f9() {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+\n+Some errors have detailed explanations: E0364, E0365, E0603.\n+For more information about an error, try `rustc --explain E0364`."}, {"sha": "6882844602286deef9c7eaa6f6f4bad96c60dc68", "filename": "src/test/ui/privacy/private-variant-reexport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -1,13 +1,13 @@\n mod m1 {\n-    pub use ::E::V; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::{V}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V::{self}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n #[deny(unused_imports)]"}, {"sha": "78771ee30d314a29c00d7a91d2d90bcbbfb78a69", "filename": "src/test/ui/privacy/private-variant-reexport.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:2:13\n    |\n LL |     pub use ::E::V;\n@@ -10,7 +10,7 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::V;\n    |             ^^^^^^\n \n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:6:19\n    |\n LL |     pub use ::E::{V};\n@@ -22,11 +22,11 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::{V};\n    |                   ^\n \n-error[E0365]: `V` is private, and cannot be re-exported\n+error[E0365]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:10:22\n    |\n LL |     pub use ::E::V::{self};\n-   |                      ^^^^ re-export of private `V`\n+   |                      ^^^^ re-export of crate public `V`\n    |\n    = note: consider declaring type or module `V` with `pub`\n "}, {"sha": "2d9a6a9a924998fec8b3e91b0b8f659e9ca42105", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -8,7 +8,7 @@ mod m1 {\n \n     use legacy_macro as _; // OK\n     pub(crate) use legacy_macro as _; // OK\n-    pub use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+    pub use legacy_macro as _; //~ ERROR `legacy_macro` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {"}, {"sha": "9e48e26b1dfd30451d279d5fd3421ff377aa4b1e", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ab5123e2ac51e312f72e2d689aa57a8483c2ac/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/macro-rules.rs:11:13\n    |\n LL |     pub use legacy_macro as _;"}]}