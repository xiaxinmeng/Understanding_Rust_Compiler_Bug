{"sha": "a379e697ab8ed7f3e73c79e303870ac208670bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzllNjk3YWI4ZWQ3ZjNlNzNjNzllMzAzODcwYWMyMDg2NzBiZDc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-07T17:42:15Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-07T17:42:15Z"}, "message": "Add `std::fs::read_utf8`, based on `File::open` and `read_to_string`", "tree": {"sha": "c838b8aaec55bec0f58eb5b6983d8a754b271494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c838b8aaec55bec0f58eb5b6983d8a754b271494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a379e697ab8ed7f3e73c79e303870ac208670bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a379e697ab8ed7f3e73c79e303870ac208670bd7", "html_url": "https://github.com/rust-lang/rust/commit/a379e697ab8ed7f3e73c79e303870ac208670bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a379e697ab8ed7f3e73c79e303870ac208670bd7/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c670424cbe0f59cc0030a16d220dcdc93ce17a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c670424cbe0f59cc0030a16d220dcdc93ce17a12", "html_url": "https://github.com/rust-lang/rust/commit/c670424cbe0f59cc0030a16d220dcdc93ce17a12"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "ab0288021826891dfedbebed46a17c586399cc95", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a379e697ab8ed7f3e73c79e303870ac208670bd7/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379e697ab8ed7f3e73c79e303870ac208670bd7/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a379e697ab8ed7f3e73c79e303870ac208670bd7", "patch": "@@ -251,6 +251,47 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n     Ok(bytes)\n }\n \n+/// Read the entire contents of a file into a string.\n+///\n+/// This is a convenience function for using [`File::open`] and [`read_to_string`]\n+/// with fewer imports and without an intermediate variable.\n+///\n+/// [`File::open`]: struct.File.html#method.open\n+/// [`read_to_string`]: ../io/trait.Read.html#method.read_to_string\n+///\n+/// # Errors\n+///\n+/// This function will return an error if `path` does not already exist.\n+/// Other errors may also be returned according to [`OpenOptions::open`].\n+///\n+/// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n+///\n+/// It will also return an error if it encounters while reading an error\n+/// of a kind other than [`ErrorKind::Interrupted`],\n+/// or if the contents of the file are not valid UTF-8.\n+///\n+/// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(fs_read_write)]\n+///\n+/// use std::fs;\n+/// use std::net::SocketAddr;\n+///\n+/// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n+/// let foo: SocketAddr = fs::read_utf8(\"address.txt\")?.parse()?;\n+/// # Ok(())\n+/// # }\n+/// ```\n+#[unstable(feature = \"fs_read_write\", issue = /* FIXME */ \"0\")]\n+pub fn read_utf8<P: AsRef<Path>>(path: P) -> io::Result<String> {\n+    let mut string = String::new();\n+    File::open(path)?.read_to_string(&mut string)?;\n+    Ok(string)\n+}\n+\n /// Write a slice as the entire contents of a file.\n ///\n /// This function will create a file if it does not exist,\n@@ -1980,7 +2021,9 @@ mod tests {\n     ) }\n \n     #[cfg(unix)]\n-    macro_rules! error { ($e:expr, $s:expr) => (\n+    macro_rules! error { ($e:expr, $s:expr) => ( error_contains!($e, $s) ) }\n+\n+    macro_rules! error_contains { ($e:expr, $s:expr) => (\n         match $e {\n             Ok(_) => panic!(\"Unexpected success. Should've been: {:?}\", $s),\n             Err(ref err) => assert!(err.to_string().contains($s),\n@@ -2999,6 +3042,15 @@ mod tests {\n         check!(fs::write(&tmpdir.join(\"test\"), &bytes));\n         let v = check!(fs::read(&tmpdir.join(\"test\")));\n         assert!(v == &bytes[..]);\n+\n+        check!(fs::write(&tmpdir.join(\"not-utf8\"), &[0xFF]));\n+        error_contains!(fs::read_utf8(&tmpdir.join(\"not-utf8\")),\n+                        \"stream did not contain valid UTF-8\");\n+\n+        let s = \"\ud800\udc41\ud800\udc13\ud800\udc20\ud800\udc34\ud800\udc0d\";\n+        check!(fs::write(&tmpdir.join(\"utf8\"), s.as_bytes()));\n+        let string = check!(fs::read_utf8(&tmpdir.join(\"utf8\")));\n+        assert_eq!(string, s);\n     }\n \n     #[test]"}]}