{"sha": "85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWFhMmMwYzlhZDcxY2RjNGI1MmE0MWE3YWI0MTg4NGJlYjNhODc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-19T16:41:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-19T16:41:37Z"}, "message": "Better libcore building instructions and rustup", "tree": {"sha": "b0979b046ae7e95d4cf5317e3107c1204aedf31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0979b046ae7e95d4cf5317e3107c1204aedf31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "html_url": "https://github.com/rust-lang/rust/commit/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d8fefc18411785d61873c6602d17907e0574ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d8fefc18411785d61873c6602d17907e0574ff", "html_url": "https://github.com/rust-lang/rust/commit/75d8fefc18411785d61873c6602d17907e0574ff"}], "stats": {"total": 547, "additions": 249, "deletions": 298}, "files": [{"sha": "7db533929d8bcaab0e1a1667687ea44a1f490db8", "filename": "0001-Disable-stdsimd-in-libcore.patch", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/0001-Disable-stdsimd-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/0001-Disable-stdsimd-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0001-Disable-stdsimd-in-libcore.patch?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -1,29 +1,29 @@\n-From cc175e6a3f59c7fe1523fd441214e0303f8fee80 Mon Sep 17 00:00:00 2001\n+From a26747487d398af360dc16344b1f9d2b367720c9 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 30 Jun 2018 12:30:30 +0200\n+Date: Thu, 19 Jul 2018 18:26:56 +0200\n Subject: [PATCH] Disable stdsimd in libcore\n \n ---\n  src/libcore/lib.rs | 2 ++\n  1 file changed, 2 insertions(+)\n \n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 40caee8554..f038d155a1 100644\n+index bbe6ae8619..bdeb6ce426 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -240,6 +240,7 @@ macro_rules! test_v256 { ($item:item) => {}; }\n+@@ -238,6 +238,7 @@ macro_rules! test_v256 { ($item:item) => {}; }\n  macro_rules! test_v512 { ($item:item) => {}; }\n  #[allow(unused_macros)]\n  macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n +/*\n  #[path = \"../stdsimd/coresimd/mod.rs\"]\n  #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n  #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-@@ -252,3 +253,4 @@ pub use coresimd::simd;\n+@@ -250,3 +251,4 @@ pub use coresimd::simd;\n  #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n  #[cfg(not(stage0))]\n  pub use coresimd::arch;\n +*/\n--- \n-2.15.2 (Apple Git-101.1)\n+--\n+2.11.0\n "}, {"sha": "e4a1207fe20d62ed7d0eb87ed4b98fdb01539962", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 228, "deletions": 284, "changes": 512, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -1,29 +1,29 @@\n-From 865d6486d85985d65ccb850695c25579b98ca14c Mon Sep 17 00:00:00 2001\n+From 601b4bf31350a620a9de8a50ad699852331fa17e Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 18 Jul 2018 12:21:43 +0200\n+Date: Thu, 19 Jul 2018 18:34:03 +0200\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n- src/libcore/clone.rs         |  4 ++--\n- src/libcore/cmp.rs           |  6 ++---\n- src/libcore/default.rs       |  2 --\n- src/libcore/fmt/num.rs       |  6 +----\n- src/libcore/hash/mod.rs      | 20 ----------------\n- src/libcore/iter/range.rs    | 12 ++++------\n+ src/libcore/clone.rs         |  4 +-\n+ src/libcore/cmp.rs           |  6 +--\n+ src/libcore/default.rs       |  2 -\n+ src/libcore/fmt/num.rs       |  6 +--\n+ src/libcore/hash/mod.rs      | 20 ----------\n+ src/libcore/iter/range.rs    |  1 -\n  src/libcore/iter/traits.rs   |  2 +-\n- src/libcore/lib.rs           |  2 --\n- src/libcore/marker.rs        |  4 ++--\n- src/libcore/mem.rs           |  2 --\n- src/libcore/num/i128.rs      | 17 --------------\n- src/libcore/num/mod.rs       | 54 +++++++++-----------------------------------\n- src/libcore/num/u128.rs      | 16 -------------\n- src/libcore/num/wrapping.rs  | 14 ++++--------\n- src/libcore/ops/arith.rs     | 22 +++++++++---------\n- src/libcore/ops/bit.rs       | 30 +++++++++---------------\n- src/libcore/tests/iter.rs    | 15 ------------\n- src/libcore/tests/num/mod.rs | 47 --------------------------------------\n- src/libcore/time.rs          | 51 -----------------------------------------\n- 19 files changed, 52 insertions(+), 274 deletions(-)\n+ src/libcore/lib.rs           |  2 -\n+ src/libcore/marker.rs        |  4 +-\n+ src/libcore/mem.rs           |  2 -\n+ src/libcore/num/i128.rs      | 17 ---------\n+ src/libcore/num/mod.rs       | 87 +++++++++++++-------------------------------\n+ src/libcore/num/u128.rs      | 16 --------\n+ src/libcore/num/wrapping.rs  | 14 +++----\n+ src/libcore/ops/arith.rs     | 22 +++++------\n+ src/libcore/ops/bit.rs       | 30 ++++++---------\n+ src/libcore/tests/iter.rs    | 15 --------\n+ src/libcore/tests/num/mod.rs | 18 ---------\n+ src/libcore/time.rs          | 51 --------------------------\n+ 19 files changed, 62 insertions(+), 257 deletions(-)\n  delete mode 100644 src/libcore/num/i128.rs\n  delete mode 100644 src/libcore/num/u128.rs\n \n@@ -33,7 +33,7 @@ index 3b15ba2b4a..de08ce0289 100644\n +++ b/src/libcore/clone.rs\n @@ -172,8 +172,8 @@ mod impls {\n      }\n- \n+\n      impl_clone! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -48,29 +48,29 @@ index 3626a266ad..4106432a41 100644\n +++ b/src/libcore/cmp.rs\n @@ -798,7 +798,7 @@ mod impls {\n      }\n- \n+\n      partial_eq_impl! {\n -        bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64\n +        bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64\n      }\n- \n+\n      macro_rules! eq_impl {\n @@ -808,7 +808,7 @@ mod impls {\n          )*)\n      }\n- \n+\n -    eq_impl! { () bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    eq_impl! { () bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n @@ -897,7 +897,7 @@ mod impls {\n          }\n      }\n- \n+\n -    ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n@@ -82,14 +82,14 @@ index ab36e29b1e..1926719657 100644\n  default_impl! { u32, 0, \"Returns the default value of `0`\" }\n  default_impl! { u64, 0, \"Returns the default value of `0`\" }\n -default_impl! { u128, 0, \"Returns the default value of `0`\" }\n- \n+\n  default_impl! { isize, 0, \"Returns the default value of `0`\" }\n  default_impl! { i8, 0, \"Returns the default value of `0`\" }\n  default_impl! { i16, 0, \"Returns the default value of `0`\" }\n  default_impl! { i32, 0, \"Returns the default value of `0`\" }\n  default_impl! { i64, 0, \"Returns the default value of `0`\" }\n -default_impl! { i128, 0, \"Returns the default value of `0`\" }\n- \n+\n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n@@ -102,7 +102,7 @@ index 51391fa50d..140255ea7e 100644\n      fn to_u64(&self) -> u64;\n -    fn to_u128(&self) -> u128;\n  }\n- \n+\n  macro_rules! doit {\n @@ -40,10 +39,9 @@ macro_rules! doit {\n          fn to_u16(&self) -> u16 { *self as u16 }\n@@ -113,19 +113,19 @@ index 51391fa50d..140255ea7e 100644\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n- \n+\n  /// A type that represents a specific radix\n  #[doc(hidden)]\n @@ -184,7 +182,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n- \n+\n  const DEC_DIGITS_LUT: &'static[u8] =\n      b\"0001020304050607080910111213141516171819\\\n @@ -260,7 +257,6 @@ macro_rules! impl_Display {\n- \n+\n  impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n  impl_Display!(i64, u64: to_u64);\n -impl_Display!(i128, u128: to_u128);\n@@ -189,91 +189,59 @@ index e6f8dfffd6..2670d55537 100644\n -        (u128, write_u128),\n -        (i128, write_i128),\n      }\n- \n+\n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index 5896322f11..67809897f5 100644\n+index 651c7a35d4..3708b8ea95 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n @@ -175,7 +175,6 @@ step_impl_signed!([i64: u64]);\n  // assume here that it is less than 64-bits.\n  #[cfg(not(target_pointer_width = \"64\"))]\n  step_impl_no_between!(u64 i64);\n -step_impl_no_between!(u128 i128);\n- \n+\n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n-@@ -509,8 +508,8 @@ macro_rules! try_from_upper_bounded {\n- mod ptr_try_from_impls {\n-     use super::PrivateTryFromUsize;\n- \n--    try_from_unbounded!(u16, u32, u64, u128);\n--    try_from_unbounded!(i32, i64, i128);\n-+    try_from_unbounded!(u16, u32, u64);\n-+    try_from_unbounded!(i32, i64);\n- }\n- \n- #[cfg(target_pointer_width = \"32\")]\n-@@ -518,9 +517,9 @@ mod ptr_try_from_impls {\n-     use super::PrivateTryFromUsize;\n- \n-     try_from_upper_bounded!(u16);\n--    try_from_unbounded!(u32, u64, u128);\n-+    try_from_unbounded!(u32, u64);\n-     try_from_upper_bounded!(i32);\n--    try_from_unbounded!(i64, i128);\n-+    try_from_unbounded!(i64);\n- }\n- \n- #[cfg(target_pointer_width = \"64\")]\n-@@ -528,7 +527,6 @@ mod ptr_try_from_impls {\n-     use super::PrivateTryFromUsize;\n- \n-     try_from_upper_bounded!(u16, u32);\n--    try_from_unbounded!(u64, u128);\n-+    try_from_unbounded!(u64);\n-     try_from_upper_bounded!(i32, i64);\n--    try_from_unbounded!(i128);\n- }\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n index 4b2c1aa551..ec3991fa01 100644\n --- a/src/libcore/iter/traits.rs\n +++ b/src/libcore/iter/traits.rs\n @@ -843,7 +843,7 @@ macro_rules! float_sum_product {\n      )*)\n  }\n- \n+\n -integer_sum_product! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n  float_sum_product! { f32 f64 }\n- \n+\n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index f038d155a1..31e4223730 100644\n+index bdeb6ce426..3bec7a240c 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -148,14 +148,12 @@ mod uint_macros;\n+@@ -146,14 +146,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n -#[path = \"num/i128.rs\"]  pub mod i128;\n- \n+\n  #[path = \"num/usize.rs\"] pub mod usize;\n  #[path = \"num/u8.rs\"]    pub mod u8;\n  #[path = \"num/u16.rs\"]   pub mod u16;\n  #[path = \"num/u32.rs\"]   pub mod u32;\n  #[path = \"num/u64.rs\"]   pub mod u64;\n -#[path = \"num/u128.rs\"]  pub mod u128;\n- \n+\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 5db5d88d4a..d7d6b45015 100644\n+index 4f37b46258..2e8d514700 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -643,8 +643,8 @@ mod copy_impls {\n+@@ -649,8 +649,8 @@ mod copy_impls {\n      }\n- \n+\n      impl_copy! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -283,10 +251,10 @@ index 5db5d88d4a..d7d6b45015 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 08bd9289ab..aca522e445 100644\n+index 8fb4e0d6a0..e9621d723d 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n-@@ -194,12 +194,10 @@ pub fn forget<T>(t: T) {\n+@@ -196,12 +196,10 @@ pub fn forget<T>(t: T) {\n  /// u16 | 2\n  /// u32 | 4\n  /// u64 | 8\n@@ -323,21 +291,21 @@ index 989376d1ac..0000000000\n -\n -int_module! { i128, #[stable(feature = \"i128\", since=\"1.26.0\")] }\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 7e2dd304d7..b01c843ad7 100644\n+index 0b8f8f0703..584d24130e 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n-@@ -94,7 +94,6 @@ nonzero_integers! {\n+@@ -95,7 +95,6 @@ nonzero_integers! {\n      NonZeroU16(u16);\n      NonZeroU32(u32);\n      NonZeroU64(u64);\n -    NonZeroU128(u128);\n      NonZeroUsize(usize);\n  }\n- \n-@@ -2047,12 +2046,6 @@ impl i64 {\n+\n+@@ -1954,12 +1953,6 @@ impl i64 {\n      int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n  }\n- \n+\n -#[lang = \"i128\"]\n -impl i128 {\n -    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n@@ -347,10 +315,10 @@ index 7e2dd304d7..b01c843ad7 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4290,11 +4283,6 @@ impl u64 {\n+@@ -4100,11 +4093,6 @@ impl u64 {\n      uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\" }\n  }\n- \n+\n -#[lang = \"u128\"]\n -impl u128 {\n -    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\" }\n@@ -359,33 +327,33 @@ index 7e2dd304d7..b01c843ad7 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4373,7 +4361,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4183,7 +4171,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n -from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n +from_str_radix_int_impl! { isize i8 i16 i32 i64 usize u8 u16 u32 u64 }\n- \n+\n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4474,30 +4462,25 @@ macro_rules! rev {\n+@@ -4299,30 +4287,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n -try_from_upper_bounded!(u128, u64, u32, u16, u8);\n- \n+\n  try_from_both_bounded!(i16, i8);\n  try_from_both_bounded!(i32, i16, i8);\n  try_from_both_bounded!(i64, i32, i16, i8);\n -try_from_both_bounded!(i128, i64, i32, i16, i8);\n- \n+\n  // unsigned-to-signed\n  try_from_upper_bounded!(u8, i8);\n  try_from_upper_bounded!(u16, i8, i16);\n  try_from_upper_bounded!(u32, i8, i16, i32);\n  try_from_upper_bounded!(u64, i8, i16, i32, i64);\n -try_from_upper_bounded!(u128, i8, i16, i32, i64, i128);\n- \n+\n  // signed-to-unsigned\n -try_from_lower_bounded!(i8, u8, u16, u32, u64, u128);\n -try_from_lower_bounded!(i16, u16, u32, u64, u128);\n@@ -400,54 +368,111 @@ index 7e2dd304d7..b01c843ad7 100644\n  try_from_both_bounded!(i32, u16, u8);\n  try_from_both_bounded!(i64, u32, u16, u8);\n -try_from_both_bounded!(i128, u64, u32, u16, u8);\n- \n+\n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4514,9 +4497,9 @@ mod ptr_try_from_impls {\n+@@ -4334,21 +4317,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n- \n-     // Fallible across platfoms, only implementation differs\n+\n+     try_from_upper_bounded!(usize, u8);\n+-    try_from_unbounded!(usize, u16, u32, u64, u128);\n++    try_from_unbounded!(usize, u16, u32, u64);\n+     try_from_upper_bounded!(usize, i8, i16);\n+-    try_from_unbounded!(usize, i32, i64, i128);\n++    try_from_unbounded!(usize, i32, i64);\n+\n+     try_from_both_bounded!(isize, u8);\n -    try_from_lower_bounded!(isize, u16, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u16, u32, u64);\n+     try_from_both_bounded!(isize, i8);\n+-    try_from_unbounded!(isize, i16, i32, i64, i128);\n++    try_from_unbounded!(isize, i16, i32, i64);\n+\n+-    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n++    rev!(try_from_upper_bounded, usize, u32, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16);\n -    rev!(try_from_both_bounded, usize, i32, i64, i128);\n +    rev!(try_from_both_bounded, usize, i32, i64);\n+\n+-    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n+-    rev!(try_from_both_bounded, isize, i32, i64, i128);\n++    rev!(try_from_upper_bounded, isize, u16, u32, u64);\n++    rev!(try_from_both_bounded, isize, i32, i64);\n  }\n- \n+\n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4526,9 +4509,9 @@ mod ptr_try_from_impls {\n- \n-     // Fallible across platfoms, only implementation differs\n-     try_from_both_bounded!(isize, u16);\n+@@ -4357,24 +4340,24 @@ mod ptr_try_from_impls {\n+     use convert::TryFrom;\n+\n+     try_from_upper_bounded!(usize, u8, u16);\n+-    try_from_unbounded!(usize, u32, u64, u128);\n++    try_from_unbounded!(usize, u32, u64);\n+     try_from_upper_bounded!(usize, i8, i16, i32);\n+-    try_from_unbounded!(usize, i64, i128);\n++    try_from_unbounded!(usize, i64);\n+\n+     try_from_both_bounded!(isize, u8, u16);\n -    try_from_lower_bounded!(isize, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u32, u64);\n+     try_from_both_bounded!(isize, i8, i16);\n+-    try_from_unbounded!(isize, i32, i64, i128);\n++    try_from_unbounded!(isize, i32, i64);\n+\n+     rev!(try_from_unbounded, usize, u32);\n+-    rev!(try_from_upper_bounded, usize, u64, u128);\n++    rev!(try_from_upper_bounded, usize, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32);\n -    rev!(try_from_both_bounded, usize, i64, i128);\n +    rev!(try_from_both_bounded, usize, i64);\n+\n+     rev!(try_from_unbounded, isize, u16);\n+-    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n++    rev!(try_from_upper_bounded, isize, u32, u64);\n+     rev!(try_from_unbounded, isize, i32);\n+-    rev!(try_from_both_bounded, isize, i64, i128);\n++    rev!(try_from_both_bounded, isize, i64);\n  }\n- \n+\n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4538,9 +4521,8 @@ mod ptr_try_from_impls {\n- \n-     // Fallible across platfoms, only implementation differs\n-     try_from_both_bounded!(isize, u16, u32);\n+@@ -4383,24 +4366,20 @@ mod ptr_try_from_impls {\n+     use convert::TryFrom;\n+\n+     try_from_upper_bounded!(usize, u8, u16, u32);\n+-    try_from_unbounded!(usize, u64, u128);\n++    try_from_unbounded!(usize, u64);\n+     try_from_upper_bounded!(usize, i8, i16, i32, i64);\n+-    try_from_unbounded!(usize, i128);\n+\n+     try_from_both_bounded!(isize, u8, u16, u32);\n -    try_from_lower_bounded!(isize, u64, u128);\n +    try_from_lower_bounded!(isize, u64);\n+     try_from_both_bounded!(isize, i8, i16, i32);\n+-    try_from_unbounded!(isize, i64, i128);\n++    try_from_unbounded!(isize, i64);\n+\n+     rev!(try_from_unbounded, usize, u32, u64);\n+-    rev!(try_from_upper_bounded, usize, u128);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n -    rev!(try_from_both_bounded, usize, i128);\n+\n+     rev!(try_from_unbounded, isize, u16, u32);\n+-    rev!(try_from_upper_bounded, isize, u64, u128);\n++    rev!(try_from_upper_bounded, isize, u64);\n+     rev!(try_from_unbounded, isize, i32, i64);\n+-    rev!(try_from_both_bounded, isize, i128);\n  }\n- \n+\n  #[doc(hidden)]\n-@@ -4575,7 +4557,7 @@ macro_rules! doit {\n+@@ -4435,7 +4414,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n- \n+\n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4743,52 +4725,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4603,52 +4582,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -459,7 +484,7 @@ index 7e2dd304d7..b01c843ad7 100644\n  impl_from_bool! { i64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n -impl_from_bool! { i128, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { isize, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n- \n+\n  // Unsigned -> Unsigned\n  impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -472,7 +497,7 @@ index 7e2dd304d7..b01c843ad7 100644\n  impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n- \n+\n  // Signed -> Signed\n  impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -485,7 +510,7 @@ index 7e2dd304d7..b01c843ad7 100644\n  impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { i32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { i64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n- \n+\n  // Unsigned -> Signed\n  impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -497,7 +522,7 @@ index 7e2dd304d7..b01c843ad7 100644\n  impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n- \n+\n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/u128.rs b/src/libcore/num/u128.rs\n@@ -523,7 +548,7 @@ index e8c783a1bb..0000000000\n -#![stable(feature = \"i128\", since = \"1.26.0\")]\n -uint_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index d7f87d37f5..666658a66b 100644\n+index 1c826c2fa7..0779e31572 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n @@ -112,19 +112,17 @@ macro_rules! sh_impl_all {\n@@ -532,7 +557,7 @@ index d7f87d37f5..666658a66b 100644\n          //sh_impl_unsigned! { $t, u64 }\n -        //sh_impl_unsigned! { $t, u128 }\n          sh_impl_unsigned! { $t, usize }\n- \n+\n          //sh_impl_signed! { $t, i8 }\n          //sh_impl_signed! { $t, i16 }\n          //sh_impl_signed! { $t, i32 }\n@@ -541,55 +566,55 @@ index d7f87d37f5..666658a66b 100644\n          //sh_impl_signed! { $t, isize }\n      )*)\n  }\n- \n+\n -sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +sh_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n- \n+\n  // FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n  macro_rules! wrapping_impl {\n @@ -323,7 +321,7 @@ macro_rules! wrapping_impl {\n      )*)\n  }\n- \n+\n -wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  macro_rules! wrapping_int_impl {\n      ($($t:ty)*) => ($(\n-@@ -686,7 +684,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n+@@ -685,7 +683,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n      )*)\n  }\n- \n+\n -wrapping_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  macro_rules! wrapping_int_impl_signed {\n      ($($t:ty)*) => ($(\n-@@ -815,7 +813,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n+@@ -814,7 +812,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n      )*)\n  }\n- \n+\n -wrapping_int_impl_signed! { isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl_signed! { isize i8 i16 i32 i64 }\n- \n+\n  macro_rules! wrapping_int_impl_unsigned {\n      ($($t:ty)*) => ($(\n-@@ -892,7 +890,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n+@@ -891,7 +889,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n      )*)\n  }\n- \n+\n -wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n +wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 }\n- \n+\n  mod shift_max {\n      #![allow(non_upper_case_globals)]\n-@@ -919,13 +917,11 @@ mod shift_max {\n+@@ -918,13 +916,11 @@ mod shift_max {\n      pub const i16: u32 = (1 << 4) - 1;\n      pub const i32: u32 = (1 << 5) - 1;\n      pub const i64: u32 = (1 << 6) - 1;\n -    pub const i128: u32 = (1 << 7) - 1;\n      pub use self::platform::isize;\n- \n+\n      pub const u8: u32 = i8;\n      pub const u16: u32 = i16;\n      pub const u32: u32 = i32;\n@@ -604,97 +629,97 @@ index a1bc5463f7..38742be1ce 100644\n @@ -114,7 +114,7 @@ macro_rules! add_impl {\n      )*)\n  }\n- \n+\n -add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The subtraction operator `-`.\n  ///\n @@ -212,7 +212,7 @@ macro_rules! sub_impl {\n      )*)\n  }\n- \n+\n -sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The multiplication operator `*`.\n  ///\n @@ -332,7 +332,7 @@ macro_rules! mul_impl {\n      )*)\n  }\n- \n+\n -mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The division operator `/`.\n  ///\n @@ -457,7 +457,7 @@ macro_rules! div_impl_integer {\n      )*)\n  }\n- \n+\n -div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +div_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  macro_rules! div_impl_float {\n      ($($t:ty)*) => ($(\n @@ -542,7 +542,7 @@ macro_rules! rem_impl_integer {\n      )*)\n  }\n- \n+\n -rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n- \n+\n+\n  macro_rules! rem_impl_float {\n @@ -641,7 +641,7 @@ macro_rules! neg_impl_unsigned {\n  }\n- \n+\n  // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n -neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n +neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The addition assignment operator `+=`.\n  ///\n @@ -697,7 +697,7 @@ macro_rules! add_assign_impl {\n      )+)\n  }\n- \n+\n -add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The subtraction assignment operator `-=`.\n  ///\n @@ -753,7 +753,7 @@ macro_rules! sub_assign_impl {\n      )+)\n  }\n- \n+\n -sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The multiplication assignment operator `*=`.\n  ///\n @@ -800,7 +800,7 @@ macro_rules! mul_assign_impl {\n      )+)\n  }\n- \n+\n -mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The division assignment operator `/=`.\n  ///\n @@ -846,7 +846,7 @@ macro_rules! div_assign_impl {\n      )+)\n  }\n- \n+\n -div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n- \n+\n  /// The remainder assignment operator `%=`.\n  ///\n @@ -896,4 +896,4 @@ macro_rules! rem_assign_impl {\n      )+)\n  }\n- \n+\n -rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n diff --git a/src/libcore/ops/bit.rs b/src/libcore/ops/bit.rs\n@@ -704,37 +729,37 @@ index 3900f365b0..66b7980a43 100644\n @@ -65,7 +65,7 @@ macro_rules! not_impl {\n      )*)\n  }\n- \n+\n -not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The bitwise AND operator `&`.\n  ///\n @@ -149,7 +149,7 @@ macro_rules! bitand_impl {\n      )*)\n  }\n- \n+\n -bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The bitwise OR operator `|`.\n  ///\n @@ -233,7 +233,7 @@ macro_rules! bitor_impl {\n      )*)\n  }\n- \n+\n -bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The bitwise XOR operator `^`.\n  ///\n @@ -320,7 +320,7 @@ macro_rules! bitxor_impl {\n      )*)\n  }\n- \n+\n -bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The left shift operator `<<`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -417,19 +417,17 @@ macro_rules! shl_impl_all {\n@@ -743,7 +768,7 @@ index 3900f365b0..66b7980a43 100644\n          shl_impl! { $t, u64 }\n -        shl_impl! { $t, u128 }\n          shl_impl! { $t, usize }\n- \n+\n          shl_impl! { $t, i8 }\n          shl_impl! { $t, i16 }\n          shl_impl! { $t, i32 }\n@@ -752,10 +777,10 @@ index 3900f365b0..66b7980a43 100644\n          shl_impl! { $t, isize }\n      )*)\n  }\n- \n+\n -shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n +shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n- \n+\n  /// The right shift operator `>>`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -526,19 +524,17 @@ macro_rules! shr_impl_all {\n@@ -764,7 +789,7 @@ index 3900f365b0..66b7980a43 100644\n          shr_impl! { $t, u64 }\n -        shr_impl! { $t, u128 }\n          shr_impl! { $t, usize }\n- \n+\n          shr_impl! { $t, i8 }\n          shr_impl! { $t, i16 }\n          shr_impl! { $t, i32 }\n@@ -773,37 +798,37 @@ index 3900f365b0..66b7980a43 100644\n          shr_impl! { $t, isize }\n      )*)\n  }\n- \n+\n -shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n- \n+\n  /// The bitwise AND assignment operator `&=`.\n  ///\n @@ -626,7 +622,7 @@ macro_rules! bitand_assign_impl {\n      )+)\n  }\n- \n+\n -bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The bitwise OR assignment operator `|=`.\n  ///\n @@ -675,7 +671,7 @@ macro_rules! bitor_assign_impl {\n      )+)\n  }\n- \n+\n -bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The bitwise XOR assignment operator `^=`.\n  ///\n @@ -724,7 +720,7 @@ macro_rules! bitxor_assign_impl {\n      )+)\n  }\n- \n+\n -bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n- \n+\n  /// The left shift assignment operator `<<=`.\n  ///\n @@ -780,19 +776,17 @@ macro_rules! shl_assign_impl_all {\n@@ -812,7 +837,7 @@ index 3900f365b0..66b7980a43 100644\n          shl_assign_impl! { $t, u64 }\n -        shl_assign_impl! { $t, u128 }\n          shl_assign_impl! { $t, usize }\n- \n+\n          shl_assign_impl! { $t, i8 }\n          shl_assign_impl! { $t, i16 }\n          shl_assign_impl! { $t, i32 }\n@@ -821,10 +846,10 @@ index 3900f365b0..66b7980a43 100644\n          shl_assign_impl! { $t, isize }\n      )*)\n  }\n- \n+\n -shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n- \n+\n  /// The right shift assignment operator `>>=`.\n  ///\n @@ -848,16 +842,14 @@ macro_rules! shr_assign_impl_all {\n@@ -833,7 +858,7 @@ index 3900f365b0..66b7980a43 100644\n          shr_assign_impl! { $t, u64 }\n -        shr_assign_impl! { $t, u128 }\n          shr_assign_impl! { $t, usize }\n- \n+\n          shr_assign_impl! { $t, i8 }\n          shr_assign_impl! { $t, i16 }\n          shr_assign_impl! { $t, i32 }\n@@ -842,7 +867,7 @@ index 3900f365b0..66b7980a43 100644\n          shr_assign_impl! { $t, isize }\n      )*)\n  }\n- \n+\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n@@ -855,14 +880,13 @@ index 72b115f8b5..d542e10bb0 100644\n      type Bigger = u64;\n -    #[cfg(target_pointer_width = \"64\")]\n -    type Bigger = u128;\n- \n+\n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1877,19 +1875,6 @@ fn test_step_replace_signed() {\n-     assert_eq!(y, 5);\n+@@ -1878,19 +1876,6 @@ fn test_step_replace_signed() {\n  }\n- \n--#[test]\n+\n+ #[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -875,14 +899,15 @@ index 72b115f8b5..d542e10bb0 100644\n -    assert_eq!(y, 5);\n -}\n -\n- #[test]\n+-#[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n+     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index 24fe96a2b8..ccb2f0f990 100644\n+index ab96d3126b..bb5c1d06da 100644\n --- a/src/libcore/tests/num/mod.rs\n +++ b/src/libcore/tests/num/mod.rs\n-@@ -187,12 +187,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n+@@ -196,12 +196,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n  test_impl_from! { test_boolu16, bool, u16 }\n  test_impl_from! { test_boolu32, bool, u32 }\n  test_impl_from! { test_boolu64, bool, u64 }\n@@ -892,10 +917,10 @@ index 24fe96a2b8..ccb2f0f990 100644\n  test_impl_from! { test_booli32, bool, i32 }\n  test_impl_from! { test_booli64, bool, i64 }\n -test_impl_from! { test_booli128, bool, i128 }\n- \n+\n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n-@@ -274,51 +272,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n+@@ -283,51 +281,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n  test_impl_try_from_always_ok! { test_try_u8u16, u8, u16 }\n  test_impl_try_from_always_ok! { test_try_u8u32, u8, u32 }\n  test_impl_try_from_always_ok! { test_try_u8u64, u8, u64 }\n@@ -904,139 +929,58 @@ index 24fe96a2b8..ccb2f0f990 100644\n  test_impl_try_from_always_ok! { test_try_u8i32, u8, i32 }\n  test_impl_try_from_always_ok! { test_try_u8i64, u8, i64 }\n -test_impl_try_from_always_ok! { test_try_u8i128, u8, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_u16u16, u16, u16 }\n  test_impl_try_from_always_ok! { test_try_u16u32, u16, u32 }\n  test_impl_try_from_always_ok! { test_try_u16u64, u16, u64 }\n -test_impl_try_from_always_ok! { test_try_u16u128, u16, u128 }\n  test_impl_try_from_always_ok! { test_try_u16i32, u16, i32 }\n  test_impl_try_from_always_ok! { test_try_u16i64, u16, i64 }\n -test_impl_try_from_always_ok! { test_try_u16i128, u16, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_u32u32, u32, u32 }\n  test_impl_try_from_always_ok! { test_try_u32u64, u32, u64 }\n -test_impl_try_from_always_ok! { test_try_u32u128, u32, u128 }\n  test_impl_try_from_always_ok! { test_try_u32i64, u32, i64 }\n -test_impl_try_from_always_ok! { test_try_u32i128, u32, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_u64u64, u64, u64 }\n -test_impl_try_from_always_ok! { test_try_u64u128, u64, u128 }\n -test_impl_try_from_always_ok! { test_try_u64i128, u64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_u128u128, u128, u128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_i8i8, i8, i8 }\n  test_impl_try_from_always_ok! { test_try_i8i16, i8, i16 }\n  test_impl_try_from_always_ok! { test_try_i8i32, i8, i32 }\n  test_impl_try_from_always_ok! { test_try_i8i64, i8, i64 }\n -test_impl_try_from_always_ok! { test_try_i8i128, i8, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_i16i16, i16, i16 }\n  test_impl_try_from_always_ok! { test_try_i16i32, i16, i32 }\n  test_impl_try_from_always_ok! { test_try_i16i64, i16, i64 }\n -test_impl_try_from_always_ok! { test_try_i16i128, i16, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_i32i32, i32, i32 }\n  test_impl_try_from_always_ok! { test_try_i32i64, i32, i64 }\n -test_impl_try_from_always_ok! { test_try_i32i128, i32, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_i64i64, i64, i64 }\n -test_impl_try_from_always_ok! { test_try_i64i128, i64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_i128i128, i128, i128 }\n- \n+\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n-@@ -355,28 +337,21 @@ test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8u8, i8, u8 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8u16, i8, u16 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8u32, i8, u32 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8u64, i8, u64 }\n--test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8u128, i8, u128 }\n- \n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i16u16, i16, u16 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i16u32, i16, u32 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i16u64, i16, u64 }\n--test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i16u128, i16, u128 }\n- \n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32u32, i32, u32 }\n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32u64, i32, u64 }\n--test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32u128, i32, u128 }\n- \n- test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i64u64, i64, u64 }\n--test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i64u128, i64, u128 }\n--\n--test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i128u128, i128, u128 }\n- \n- assume_usize_width! {\n-     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i8usize, i8, usize }\n-     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i16usize, i16, usize }\n- \n-     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu64, isize, u64 }\n--    test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu128, isize, u128 }\n-     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeusize, isize, usize }\n- }\n- \n-@@ -412,12 +387,6 @@ test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64i16, u64, i16 }\n- test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64i32, u64, i32 }\n- test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64i64, u64, i64 }\n- \n--test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i8, u128, i8 }\n--test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i16, u128, i16 }\n--test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i32, u128, i32 }\n--test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i64, u128, i64 }\n--test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i128, u128, i128 }\n--\n- assume_usize_width! {\n-     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei8, usize, i8 }\n-     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei16, usize, i16 }\n-@@ -459,11 +428,6 @@ test_impl_try_from_same_sign_err! { test_try_u64u8, u64, u8 }\n- test_impl_try_from_same_sign_err! { test_try_u64u16, u64, u16 }\n- test_impl_try_from_same_sign_err! { test_try_u64u32, u64, u32 }\n- \n--test_impl_try_from_same_sign_err! { test_try_u128u8, u128, u8 }\n--test_impl_try_from_same_sign_err! { test_try_u128u16, u128, u16 }\n--test_impl_try_from_same_sign_err! { test_try_u128u32, u128, u32 }\n--test_impl_try_from_same_sign_err! { test_try_u128u64, u128, u64 }\n--\n- test_impl_try_from_same_sign_err! { test_try_i16i8, i16, i8 }\n- test_impl_try_from_same_sign_err! { test_try_isizei8, isize, i8 }\n- \n-@@ -474,11 +438,6 @@ test_impl_try_from_same_sign_err! { test_try_i64i8, i64, i8 }\n- test_impl_try_from_same_sign_err! { test_try_i64i16, i64, i16 }\n- test_impl_try_from_same_sign_err! { test_try_i64i32, i64, i32 }\n- \n--test_impl_try_from_same_sign_err! { test_try_i128i8, i128, i8 }\n--test_impl_try_from_same_sign_err! { test_try_i128i16, i128, i16 }\n--test_impl_try_from_same_sign_err! { test_try_i128i32, i128, i32 }\n--test_impl_try_from_same_sign_err! { test_try_i128i64, i128, i64 }\n--\n- assume_usize_width! {\n-     test_impl_try_from_same_sign_err! { test_try_usizeu8, usize, u8 }\n- }\n-@@ -517,14 +476,8 @@ test_impl_try_from_signed_to_unsigned_err! { test_try_i64u8, i64, u8 }\n- test_impl_try_from_signed_to_unsigned_err! { test_try_i64u16, i64, u16 }\n- test_impl_try_from_signed_to_unsigned_err! { test_try_i64u32, i64, u32 }\n- \n--test_impl_try_from_signed_to_unsigned_err! { test_try_i128u8, i128, u8 }\n--test_impl_try_from_signed_to_unsigned_err! { test_try_i128u16, i128, u16 }\n--test_impl_try_from_signed_to_unsigned_err! { test_try_i128u32, i128, u32 }\n--test_impl_try_from_signed_to_unsigned_err! { test_try_i128u64, i128, u64 }\n--\n- assume_usize_width! {\n-     test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu8, isize, u8 }\n--    test_impl_try_from_signed_to_unsigned_err! { test_try_i128usize, i128, usize }\n- }\n- \n- macro_rules! test_float {\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 25721b7fce..2588ae442f 100644\n+index 54973b7b77..1c07753e01 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -268,57 +268,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n- \n--    /// Returns the total number of milliseconds contained by this `Duration`.\n+\n+-    /// Returns the total number of whole milliseconds contained by this `Duration`.\n -    ///\n -    /// # Examples\n -    ///\n@@ -1053,7 +997,7 @@ index 25721b7fce..2588ae442f 100644\n -        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n -    }\n -\n--    /// Returns the total number of microseconds contained by this `Duration`.\n+-    /// Returns the total number of whole microseconds contained by this `Duration`.\n -    ///\n -    /// # Examples\n -    ///\n@@ -1090,6 +1034,6 @@ index 25721b7fce..2588ae442f 100644\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n--- \n-2.15.2 (Apple Git-101.1)\n+--\n+2.11.0\n "}, {"sha": "c06b75ea16181f6e2b3f04fb511569c058751813", "filename": "Readme.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -23,11 +23,8 @@ $ rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so my_c\n ## Building libcore\n \n ```bash\n-$ git clone https://github.com/rust-lang/rust.git\n-$ cd rust\n-$ git apply ../0001-Disable-stdsimd-in-libcore.patch\n-$ git apply ../0002-Disable-u128-and-i128-in-libcore.patch\n-$ cd ../\n+$ rustup component add rust-src\n+$ ./prepare_libcore.sh\n $ ./build.sh\n ```\n "}, {"sha": "a202d30073636709b26dc6c746f8bdf5ab1d69f3", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -1,4 +1,4 @@\n cargo build || exit 1\n \n rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so example.rs --crate-type lib -Og\n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so ./rust/src/libcore/lib.rs --crate-type lib -Og\n+rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so ./target/libcore/src/libcore/lib.rs --crate-type lib -Og"}, {"sha": "32e90144a25c7d95bb55c4275df75327c1e9b9b9", "filename": "prepare_libcore.sh", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/prepare_libcore.sh", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/prepare_libcore.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare_libcore.sh?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -0,0 +1,11 @@\n+#!/bin/bash --verbose\n+SRC_DIR=\"target/libcore\"\n+rm -rf $SRC_DIR &&\n+mkdir -p $SRC_DIR/src &&\n+cp -r $(dirname $(rustup which rustc))/../lib/rustlib/src/rust/src/libcore $SRC_DIR/src/libcore || (echo \"Please install rust-src component\"; exit 1)\n+cd $SRC_DIR || exit 1\n+git init || exit 1\n+git add . || exit 1\n+git commit -m \"Initial commit\" -q || exit 1\n+git apply ../../000*.patch || exit 1\n+echo \"Successfully prepared libcore for building\""}, {"sha": "24f8bc0bf0d2980ff0ee165694a95d84e88c446a", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=85eaa2c0c9ad71cdc4b52a41a7ab41884beb3a87", "patch": "@@ -59,7 +59,6 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n         }\n         MonoItem::Static(def_id) => cx.tcx.sess.err(&format!(\"Unimplemented static mono item {:?}\", def_id)),\n         MonoItem::GlobalAsm(node_id) => cx.tcx.sess.err(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n-        MonoItem::CustomSection(def_id) => cx.tcx.sess.err(&format!(\"Unimplemented custom section mono item {:?}\", def_id)),\n     }\n }\n "}]}