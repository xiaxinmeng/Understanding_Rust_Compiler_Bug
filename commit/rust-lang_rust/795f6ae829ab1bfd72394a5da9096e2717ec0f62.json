{"sha": "795f6ae829ab1bfd72394a5da9096e2717ec0f62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWY2YWU4MjlhYjFiZmQ3MjM5NGE1ZGE5MDk2ZTI3MTdlYzBmNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T07:01:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T07:01:10Z"}, "message": "auto merge of #16213 : huonw/rust/more-token-numbers, r=pnkfelix\n\nUsing the Show impl for Names created global symbols with names like\r\n`\"str\\\"str\\\"(1027)\"`. This adjusts strings, binaries and vtables to\r\navoid using that impl.", "tree": {"sha": "b4b7f81ec28b14e20bc1b6580e84fb7fb9e432c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b7f81ec28b14e20bc1b6580e84fb7fb9e432c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795f6ae829ab1bfd72394a5da9096e2717ec0f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795f6ae829ab1bfd72394a5da9096e2717ec0f62", "html_url": "https://github.com/rust-lang/rust/commit/795f6ae829ab1bfd72394a5da9096e2717ec0f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795f6ae829ab1bfd72394a5da9096e2717ec0f62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765a23f73db0fc23024849ea1fc0831bda58687d", "url": "https://api.github.com/repos/rust-lang/rust/commits/765a23f73db0fc23024849ea1fc0831bda58687d", "html_url": "https://github.com/rust-lang/rust/commit/765a23f73db0fc23024849ea1fc0831bda58687d"}, {"sha": "e753dbb431534b4b07b2724d7bbbcef59ecbd4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e753dbb431534b4b07b2724d7bbbcef59ecbd4d3", "html_url": "https://github.com/rust-lang/rust/commit/e753dbb431534b4b07b2724d7bbbcef59ecbd4d3"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "f06415f26ad30b18433af6a22e30a33b2edbdb78", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=795f6ae829ab1bfd72394a5da9096e2717ec0f62", "patch": "@@ -574,7 +574,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n                                                 !null_terminated as Bool);\n \n         let gsym = token::gensym(\"str\");\n-        let g = format!(\"str{}\", gsym).with_c_str(|buf| {\n+        let g = format!(\"str{}\", gsym.uint()).with_c_str(|buf| {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(sc).to_ref(), buf)\n         });\n         llvm::LLVMSetInitializer(g, sc);\n@@ -603,7 +603,7 @@ pub fn C_binary_slice(cx: &CrateContext, data: &[u8]) -> ValueRef {\n         let lldata = C_bytes(cx, data);\n \n         let gsym = token::gensym(\"binary\");\n-        let g = format!(\"binary{}\", gsym).with_c_str(|buf| {\n+        let g = format!(\"binary{}\", gsym.uint()).with_c_str(|buf| {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(lldata).to_ref(), buf)\n         });\n         llvm::LLVMSetInitializer(g, lldata);"}, {"sha": "7f7b70e075d1d4876fad029c2a521bd05245f399", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=795f6ae829ab1bfd72394a5da9096e2717ec0f62", "patch": "@@ -528,7 +528,7 @@ pub fn make_vtable<I: Iterator<ValueRef>>(ccx: &CrateContext,\n     unsafe {\n         let tbl = C_struct(ccx, components.as_slice(), false);\n         let sym = token::gensym(\"vtable\");\n-        let vt_gvar = format!(\"vtable{}\", sym).with_c_str(|buf| {\n+        let vt_gvar = format!(\"vtable{}\", sym.uint()).with_c_str(|buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         });\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "42a72f7ca398ec46a85190f14af9f781dc2545de", "filename": "src/test/run-make/symbols-are-reasonable/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile?ref=795f6ae829ab1bfd72394a5da9096e2717ec0f62", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+# check that the compile generated symbols for strings, binaries,\n+# vtables, etc. have semisane names (e.g. `str1234`); it's relatively\n+# easy to accidentally modify the compiler internals to make them\n+# become things like `str\"str\"(1234)`.\n+\n+OUT=$(TMPDIR)/lib.s\n+\n+all:\n+\t$(RUSTC) lib.rs --emit=asm --crate-type=staticlib\n+\t# just check for symbol declarations with the names we're expecting.\n+\tgrep 'str[0-9]\\+:' $(OUT)\n+\tgrep 'binary[0-9]\\+:' $(OUT)\n+\tgrep 'vtable[0-9]\\+' $(OUT)"}, {"sha": "d16888c88fa44a5535a3770f4dfa2dc101170e50", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=795f6ae829ab1bfd72394a5da9096e2717ec0f62", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub static X: &'static str = \"foobarbaz\";\n+pub static Y: &'static [u8] = include_bin!(\"lib.rs\");\n+\n+trait Foo {}\n+impl Foo for uint {}\n+\n+pub fn dummy() {\n+    // force the vtable to be created\n+    let _x = &1u as &Foo;\n+}"}]}