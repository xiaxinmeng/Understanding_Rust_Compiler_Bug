{"sha": "2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWUwYWRmZTlmYmUzZTBlYmRhYzNiYTgwYjk3ODFjYjRmODAwZjc=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-10-04T13:52:14Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2021-02-21T20:51:54Z"}, "message": "New pass to deduplicate blocks", "tree": {"sha": "b1da1aee72781425b132479d8357a51360adeb59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1da1aee72781425b132479d8357a51360adeb59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "html_url": "https://github.com/rust-lang/rust/commit/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e865709a685952d2fe30a84a9f338d294e8022d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e865709a685952d2fe30a84a9f338d294e8022d", "html_url": "https://github.com/rust-lang/rust/commit/1e865709a685952d2fe30a84a9f338d294e8022d"}], "stats": {"total": 459, "additions": 422, "deletions": 37}, "files": [{"sha": "1d2f1f694cf5be48ea42b633991331050e5bb69d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -1979,7 +1979,7 @@ bitflags::bitflags! {\n     }\n }\n \n-#[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n+#[derive(Clone, PartialEq, PartialOrd, Encodable, Decodable, Debug, Hash, HashStable_Generic)]\n pub enum InlineAsmTemplatePiece {\n     String(String),\n     Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },\n@@ -2067,7 +2067,7 @@ pub struct InlineAsm {\n /// Inline assembly dialect.\n ///\n /// E.g., `\"intel\"` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n-#[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, Hash, HashStable_Generic)]\n pub enum LlvmAsmDialect {\n     Att,\n     Intel,"}, {"sha": "61586dd1a1c454c164c4fbe03dbddde0c493cb2f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -1281,7 +1281,18 @@ impl Body<'hir> {\n }\n \n /// The type of source expression that caused this generator to be created.\n-#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(\n+    Clone,\n+    PartialEq,\n+    PartialOrd,\n+    Eq,\n+    Hash,\n+    HashStable_Generic,\n+    Encodable,\n+    Decodable,\n+    Debug,\n+    Copy\n+)]\n pub enum GeneratorKind {\n     /// An explicit `async` block or the body of an async function.\n     Async(AsyncGeneratorKind),\n@@ -1313,7 +1324,18 @@ impl GeneratorKind {\n ///\n /// This helps error messages but is also used to drive coercions in\n /// type-checking (see #60424).\n-#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(\n+    Clone,\n+    PartialEq,\n+    PartialOrd,\n+    Eq,\n+    Hash,\n+    HashStable_Generic,\n+    Encodable,\n+    Decodable,\n+    Debug,\n+    Copy\n+)]\n pub enum AsyncGeneratorKind {\n     /// An explicit `async` block written by the user.\n     Block,\n@@ -2308,7 +2330,7 @@ pub struct InlineAsm<'hir> {\n     pub line_spans: &'hir [Span],\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic, PartialEq)]\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, Hash, HashStable_Generic, PartialEq)]\n pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n@@ -2319,7 +2341,7 @@ pub struct LlvmInlineAsmOutput {\n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and `Decodable` and use plain `Vec<T>` instead of\n // arena-allocated slice.\n-#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic, PartialEq)]\n+#[derive(Clone, Encodable, Decodable, Debug, Hash, HashStable_Generic, PartialEq)]\n pub struct LlvmInlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,"}, {"sha": "eae02a8cbfcf16386c222a4de5d7a4e41e9f6ecf", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -92,7 +92,7 @@ impl From<InjectedExpressionId> for ExpressionOperandId {\n     }\n }\n \n-#[derive(Clone, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub enum CoverageKind {\n     Counter {\n         function_source_hash: u64,\n@@ -148,7 +148,18 @@ impl Debug for CoverageKind {\n     }\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(\n+    Clone,\n+    TyEncodable,\n+    TyDecodable,\n+    Hash,\n+    HashStable,\n+    TypeFoldable,\n+    PartialEq,\n+    Eq,\n+    PartialOrd,\n+    Ord\n+)]\n pub struct CodeRegion {\n     pub file_name: Symbol,\n     pub start_line: u32,\n@@ -167,7 +178,7 @@ impl Debug for CodeRegion {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub enum Op {\n     Subtract,\n     Add,"}, {"sha": "84766fc78612dcb458f91b8177ac30419d238487", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -594,7 +594,7 @@ impl SourceInfo {\n // Borrow kinds\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n-#[derive(HashStable)]\n+#[derive(Hash, HashStable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     Shared,\n@@ -1163,7 +1163,7 @@ pub struct BasicBlockData<'tcx> {\n }\n \n /// Information about an assertion failure.\n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, PartialEq)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n pub enum AssertKind<O> {\n     BoundsCheck { len: O, index: O },\n     Overflow(BinOp, O, O),\n@@ -1174,7 +1174,17 @@ pub enum AssertKind<O> {\n     ResumedAfterPanic(GeneratorKind),\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(\n+    Clone,\n+    Debug,\n+    PartialEq,\n+    PartialOrd,\n+    TyEncodable,\n+    TyDecodable,\n+    Hash,\n+    HashStable,\n+    TypeFoldable\n+)]\n pub enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n@@ -1449,7 +1459,7 @@ impl Statement<'_> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub enum StatementKind<'tcx> {\n     /// Write the RHS Rvalue to the LHS Place.\n     Assign(Box<(Place<'tcx>, Rvalue<'tcx>)>),\n@@ -1517,7 +1527,7 @@ impl<'tcx> StatementKind<'tcx> {\n }\n \n /// Describes what kind of retag is to be performed.\n-#[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, Hash, HashStable)]\n pub enum RetagKind {\n     /// The initial retag when entering a function.\n     FnEntry,\n@@ -1530,7 +1540,7 @@ pub enum RetagKind {\n }\n \n /// The `FakeReadCause` describes the type of pattern why a FakeRead statement exists.\n-#[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, HashStable, PartialEq)]\n+#[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, Hash, HashStable, PartialEq)]\n pub enum FakeReadCause {\n     /// Inject a fake read of the borrowed input at the end of each guards\n     /// code.\n@@ -1572,7 +1582,7 @@ pub enum FakeReadCause {\n     ForIndex,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub struct LlvmInlineAsm<'tcx> {\n     pub asm: hir::LlvmInlineAsmInner,\n     pub outputs: Box<[Place<'tcx>]>,\n@@ -1619,7 +1629,7 @@ impl Debug for Statement<'_> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub struct Coverage {\n     pub kind: CoverageKind,\n     pub code_region: Option<CodeRegion>,\n@@ -1915,7 +1925,7 @@ pub struct SourceScopeLocalData {\n \n /// These are values that can appear inside an rvalue. They are intentionally\n /// limited to prevent rvalues from being nested in one another.\n-#[derive(Clone, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum Operand<'tcx> {\n     /// Copy: The value must be available for use afterwards.\n     ///\n@@ -2023,7 +2033,7 @@ impl<'tcx> Operand<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n /// Rvalues\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, PartialEq)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n pub enum Rvalue<'tcx> {\n     /// x (either a move or copy, depending on type of x)\n     Use(Operand<'tcx>),\n@@ -2069,13 +2079,13 @@ pub enum Rvalue<'tcx> {\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n     Misc,\n     Pointer(PointerCast),\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum AggregateKind<'tcx> {\n     /// The type is of the element\n     Array(Ty<'tcx>),\n@@ -2092,7 +2102,7 @@ pub enum AggregateKind<'tcx> {\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum BinOp {\n     /// The `+` operator (addition)\n     Add,\n@@ -2137,15 +2147,15 @@ impl BinOp {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum NullOp {\n     /// Returns the size of a value of that type\n     SizeOf,\n     /// Creates a new uninitialized box for a value of that type\n     Box,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum UnOp {\n     /// The `!` operator for logical inversion\n     Not,\n@@ -2315,7 +2325,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n /// this does not necessarily mean that they are `==` in Rust. In\n /// particular, one must be wary of `NaN`!\n \n-#[derive(Clone, Copy, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n \n@@ -2449,7 +2459,7 @@ impl<'tcx> UserTypeProjections {\n /// * `let (x, _): T = ...` -- here, the `projs` vector would contain\n ///   `field[0]` (aka `.0`), indicating that the type of `s` is\n ///   determined by finding the type of the `.0` field from `T`.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, PartialEq)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n pub struct UserTypeProjection {\n     pub base: UserTypeAnnotationIndex,\n     pub projs: Vec<ProjectionKind>,"}, {"sha": "b51a87f63b294313c1fdfc80b261a6ca9a2d7c94", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -17,7 +17,7 @@ use std::slice;\n \n pub use super::query::*;\n \n-#[derive(Debug, Clone, TyEncodable, TyDecodable, HashStable, PartialEq)]\n+#[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n pub struct SwitchTargets {\n     /// Possible values. The locations to branch to in each case\n     /// are found in the corresponding indices from the `targets` vector.\n@@ -98,7 +98,7 @@ impl<'a> Iterator for SwitchTargetsIter<'a> {\n \n impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, PartialEq)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n pub enum TerminatorKind<'tcx> {\n     /// Block should have one successor in the graph; we jump there.\n     Goto { target: BasicBlock },"}, {"sha": "a50dda69a0fcc4f13fefa21ffef4fb4a38e0af8b", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum PointerCast {\n     /// Go from a fn-item type to a fn-pointer type.\n     ReifyFnPointer,"}, {"sha": "5f09159e91b2097426c18442f8a33b63e16a5df1", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -0,0 +1,193 @@\n+//! This pass finds basic blocks that are completely equal,\n+//! and replaces all uses with just one of them.\n+\n+use std::{collections::hash_map::Entry, hash::Hash, hash::Hasher};\n+\n+use crate::transform::MirPass;\n+\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::mir::visit::MutVisitor;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+use super::simplify::simplify_cfg;\n+\n+pub struct DeduplicateBlocks;\n+\n+impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+            return;\n+        }\n+        debug!(\"Running DeduplicateBlocks on `{:?}`\", body.source);\n+        let duplicates = find_duplicates(body);\n+        let has_opts_to_apply = !duplicates.is_empty();\n+\n+        if has_opts_to_apply {\n+            let mut opt_applier = OptApplier { tcx, duplicates };\n+            opt_applier.visit_body(body);\n+            simplify_cfg(body);\n+        }\n+    }\n+}\n+\n+struct OptApplier<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    duplicates: FxHashMap<BasicBlock, BasicBlock>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for OptApplier<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+        for target in terminator.successors_mut() {\n+            if let Some(replacement) = self.duplicates.get(target) {\n+                debug!(\"SUCCESS: Replacing: `{:?}` with `{:?}`\", target, replacement);\n+                *target = *replacement;\n+            }\n+        }\n+\n+        self.super_terminator(terminator, location);\n+    }\n+}\n+\n+fn find_duplicates<'a, 'tcx>(body: &'a Body<'tcx>) -> FxHashMap<BasicBlock, BasicBlock> {\n+    let mut duplicates = FxHashMap::default();\n+\n+    let bbs_to_go_through =\n+        body.basic_blocks().iter_enumerated().filter(|(_, bbd)| !bbd.is_cleanup).count();\n+\n+    let mut same_hashes =\n+        FxHashMap::with_capacity_and_hasher(bbs_to_go_through, Default::default());\n+\n+    // Go through the basic blocks backwards. This means that in case of duplicates,\n+    // we can use the basic block with the highest index as the replacement for all lower ones.\n+    // For example, if bb1, bb2 and bb3 are duplicates, we will first insert bb3 in same_hashes.\n+    // Then we will see that bb2 is a duplicate of bb3,\n+    // and insert bb2 with the replacement bb3 in the duplicates list.\n+    // When we see bb1, we see that it is a duplicate of bb3, and therefore insert it in the duplicates list\n+    // with replacement bb3.\n+    // When the duplicates are removed, we will end up with only bb3.\n+    for (bb, bbd) in body.basic_blocks().iter_enumerated().rev().filter(|(_, bbd)| !bbd.is_cleanup)\n+    {\n+        // Basic blocks can get really big, so to avoid checking for duplicates in basic blocks\n+        // that are unlikely to have duplicates, we stop early. The early bail number has been\n+        // found experimentally by eprintln while compiling the crates in the rustc-perf suite.\n+        if bbd.statements.len() > 10 {\n+            continue;\n+        }\n+\n+        let to_hash = BasicBlockHashable { basic_block_data: bbd };\n+        let entry = same_hashes.entry(to_hash);\n+        match entry {\n+            Entry::Occupied(occupied) => {\n+                // The basic block was already in the hashmap, which means we have a duplicate\n+                let value = *occupied.get();\n+                debug!(\"Inserting {:?} -> {:?}\", bb, value);\n+                duplicates.insert(bb, value).expect_none(\"key was already inserted\");\n+            }\n+            Entry::Vacant(vacant) => {\n+                vacant.insert(bb);\n+            }\n+        }\n+    }\n+\n+    duplicates\n+}\n+\n+struct BasicBlockHashable<'tcx, 'a> {\n+    basic_block_data: &'a BasicBlockData<'tcx>,\n+}\n+\n+impl<'tcx, 'a> Hash for BasicBlockHashable<'tcx, 'a> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        hash_statements(state, self.basic_block_data.statements.iter());\n+        // Note that since we only hash the kind, we lose span information if we deduplicate the blocks\n+        self.basic_block_data.terminator().kind.hash(state);\n+    }\n+}\n+\n+impl<'tcx, 'a> Eq for BasicBlockHashable<'tcx, 'a> {}\n+\n+impl<'tcx, 'a> PartialEq for BasicBlockHashable<'tcx, 'a> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.basic_block_data.statements.len() == other.basic_block_data.statements.len()\n+            && &self.basic_block_data.terminator().kind == &other.basic_block_data.terminator().kind\n+            && self\n+                .basic_block_data\n+                .statements\n+                .iter()\n+                .zip(&other.basic_block_data.statements)\n+                .all(|(x, y)| statement_eq(&x.kind, &y.kind))\n+    }\n+}\n+\n+fn hash_statements<'a, 'tcx, H: Hasher>(\n+    hasher: &mut H,\n+    iter: impl Iterator<Item = &'a Statement<'tcx>>,\n+) where\n+    'tcx: 'a,\n+{\n+    for stmt in iter {\n+        statement_hash(hasher, &stmt.kind);\n+    }\n+}\n+\n+fn statement_hash<'tcx, H: Hasher>(hasher: &mut H, stmt: &StatementKind<'tcx>) {\n+    match stmt {\n+        StatementKind::Assign(box (place, rvalue)) => {\n+            place.hash(hasher);\n+            rvalue_hash(hasher, rvalue)\n+        }\n+        x => x.hash(hasher),\n+    };\n+}\n+\n+fn rvalue_hash<H: Hasher>(hasher: &mut H, rvalue: &Rvalue<'tcx>) {\n+    match rvalue {\n+        Rvalue::Use(op) => operand_hash(hasher, op),\n+        x => x.hash(hasher),\n+    };\n+}\n+\n+fn operand_hash<H: Hasher>(hasher: &mut H, operand: &Operand<'tcx>) {\n+    match operand {\n+        Operand::Constant(box Constant { user_ty: _, literal, span: _ }) => literal.hash(hasher),\n+        x => x.hash(hasher),\n+    };\n+}\n+\n+fn statement_eq<'tcx>(lhs: &StatementKind<'tcx>, rhs: &StatementKind<'tcx>) -> bool {\n+    let res = match (lhs, rhs) {\n+        (\n+            StatementKind::Assign(box (place, rvalue)),\n+            StatementKind::Assign(box (place2, rvalue2)),\n+        ) => place == place2 && rvalue_eq(rvalue, rvalue2),\n+        (x, y) => x == y,\n+    };\n+    debug!(\"statement_eq lhs: `{:?}` rhs: `{:?}` result: {:?}\", lhs, rhs, res);\n+    res\n+}\n+\n+fn rvalue_eq(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n+    let res = match (lhs, rhs) {\n+        (Rvalue::Use(op1), Rvalue::Use(op2)) => operand_eq(op1, op2),\n+        (x, y) => x == y,\n+    };\n+    debug!(\"rvalue_eq lhs: `{:?}` rhs: `{:?}` result: {:?}\", lhs, rhs, res);\n+    res\n+}\n+\n+fn operand_eq(lhs: &Operand<'tcx>, rhs: &Operand<'tcx>) -> bool {\n+    let res = match (lhs, rhs) {\n+        (\n+            Operand::Constant(box Constant { user_ty: _, literal, span: _ }),\n+            Operand::Constant(box Constant { user_ty: _, literal: literal2, span: _ }),\n+        ) => literal == literal2,\n+        (x, y) => x == y,\n+    };\n+    debug!(\"operand_eq lhs: `{:?}` rhs: `{:?}` result: {:?}\", lhs, rhs, res);\n+    res\n+}"}, {"sha": "92b4ae397ae5b56834df8d39cdb4d46d8378ed0b", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n \n         let def_id = body.source.def_id();\n         let param_env = tcx.param_env(def_id);\n-        \n+\n         let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let mut should_cleanup = false;\n         'outer: for bb_idx in bbs.indices() {"}, {"sha": "6e264240f2eeb4170b885b9bae1c3e4fc47df45f", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -25,6 +25,7 @@ pub mod const_debuginfo;\n pub mod const_prop;\n pub mod coverage;\n pub mod deaggregator;\n+pub mod deduplicate_blocks;\n pub mod dest_prop;\n pub mod dump_mir;\n pub mod early_otherwise_branch;\n@@ -510,6 +511,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &const_debuginfo::ConstDebugInfo,\n         &simplify::SimplifyLocals,\n         &multiple_return_terminators::MultipleReturnTerminators,\n+        &deduplicate_blocks::DeduplicateBlocks,\n     ];\n \n     // Optimizations to run even if mir optimizations have been disabled."}, {"sha": "dfc0989a9f8df70d6eb4538ec68ebea96b0037f3", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -13,7 +13,7 @@ macro_rules! def_reg_class {\n             $class:ident,\n         )*\n     }) => {\n-        #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+        #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, PartialOrd, Hash, HashStable_Generic)]\n         #[allow(non_camel_case_types)]\n         pub enum $arch_regclass {\n             $($class,)*\n@@ -62,7 +62,7 @@ macro_rules! def_regs {\n         )*\n     }) => {\n         #[allow(unreachable_code)]\n-        #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+        #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, PartialOrd, Hash, HashStable_Generic)]\n         #[allow(non_camel_case_types)]\n         pub enum $arch_reg {\n             $($reg,)*\n@@ -207,7 +207,18 @@ impl FromStr for InlineAsmArch {\n     }\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+#[derive(\n+    Copy,\n+    Clone,\n+    Encodable,\n+    Decodable,\n+    Debug,\n+    Eq,\n+    PartialEq,\n+    PartialOrd,\n+    Hash,\n+    HashStable_Generic\n+)]\n pub enum InlineAsmReg {\n     X86(X86InlineAsmReg),\n     Arm(ArmInlineAsmReg),\n@@ -313,7 +324,18 @@ impl InlineAsmReg {\n     }\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+#[derive(\n+    Copy,\n+    Clone,\n+    Encodable,\n+    Decodable,\n+    Debug,\n+    Eq,\n+    PartialEq,\n+    PartialOrd,\n+    Hash,\n+    HashStable_Generic\n+)]\n pub enum InlineAsmRegClass {\n     X86(X86InlineAsmRegClass),\n     Arm(ArmInlineAsmRegClass),\n@@ -458,7 +480,18 @@ impl InlineAsmRegClass {\n     }\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+#[derive(\n+    Copy,\n+    Clone,\n+    Encodable,\n+    Decodable,\n+    Debug,\n+    Eq,\n+    PartialEq,\n+    PartialOrd,\n+    Hash,\n+    HashStable_Generic\n+)]\n pub enum InlineAsmRegOrRegClass {\n     Reg(InlineAsmReg),\n     RegClass(InlineAsmRegClass),"}, {"sha": "fccd8b795ef56d6732b3d85e99c84127af66a5b7", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -427,7 +427,7 @@ impl UnifyKey for FloatVid {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Decodable, Encodable)]\n+#[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash)]\n pub enum Variance {\n     Covariant,     // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,     // T<A> <: T<B> iff B == A -- e.g., type of mutable cell"}, {"sha": "b6e4469e870694e41712b98aa0ed7282f02bbf90", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -0,0 +1,101 @@\n+- // MIR for `is_line_doc_comment_2` before DeduplicateBlocks\n++ // MIR for `is_line_doc_comment_2` after DeduplicateBlocks\n+  \n+  fn is_line_doc_comment_2(_1: &str) -> bool {\n+      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:2:36: 2:37\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:2:48: 2:52\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+      let mut _3: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+      let mut _4: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          debug self => _7;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          let mut _7: &str;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          scope 2 {\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          _7 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+-         _2 = transmute::<&str, &[u8]>(move _7) -> bb14; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n++         _2 = transmute::<&str, &[u8]>(move _7) -> bb12; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+                                           // mir::Constant\n+                                           // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {std::intrinsics::transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:10: 4:14\n+      }\n+  \n+      bb2: {\n+          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:16: 4:20\n+      }\n+  \n+      bb3: {\n+          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:22: 4:26\n+      }\n+  \n+      bb4: {\n+-         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:28: 4:32\n++         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:28: 4:32\n+      }\n+  \n+      bb5: {\n+          _3 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          _4 = Ge(move _3, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          switchInt(move _4) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+      }\n+  \n+      bb6: {\n+          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:10: 5:14\n+      }\n+  \n+      bb7: {\n+          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:16: 5:20\n+      }\n+  \n+      bb8: {\n+-         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:22: 5:26\n++         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:22: 5:26\n+      }\n+  \n+      bb9: {\n+-         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:7:14: 7:19\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-     }\n+- \n+-     bb10: {\n+          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+      }\n+  \n+-     bb11: {\n+-         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:5:35: 5:39\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-     }\n+- \n+-     bb12: {\n++     bb10: {\n+          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+      }\n+  \n+-     bb13: {\n++     bb11: {\n+          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:9:2: 9:2\n+      }\n+  \n+-     bb14: {\n++     bb12: {\n+          _5 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          _6 = Ge(move _5, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          switchInt(move _6) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      }\n+  }\n+  "}, {"sha": "f8f7361dc0d0e56415cc3d7cc761a292d92e336a", "filename": "src/test/mir-opt/deduplicate_blocks.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -0,0 +1,13 @@\n+// EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff\n+pub const fn is_line_doc_comment_2(s: &str) -> bool {\n+    match s.as_bytes() {\n+        [b'/', b'/', b'/', b'/', ..] => false,\n+        [b'/', b'/', b'/', ..] => true,\n+        [b'/', b'/', b'!', ..] => true,\n+        _ => false,\n+    }\n+}\n+\n+fn main() {\n+    is_line_doc_comment_2(\"asd\");\n+}"}, {"sha": "e945629b6138b3a4049385343f8a9cc602a0351a", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=2d1e0adfe9fbe3e0ebdac3ba80b9781cb4f800f7", "patch": "@@ -46,7 +46,7 @@\n +         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_7);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         _7 = const ();                   // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:22:5: 22:22\n++         goto -> bb1;                     // scope 4 at $DIR/inline-diverging.rs:22:5: 22:22\n       }\n   \n       bb1: {"}]}