{"sha": "c3491378e3420a19dc98708a2953df5c524c2681", "node_id": "C_kwDOAAsO6NoAKGMzNDkxMzc4ZTM0MjBhMTlkYzk4NzA4YTI5NTNkZjVjNTI0YzI2ODE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-06T08:12:42Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-06T08:43:58Z"}, "message": "get rid of visit_constant in thir visitor", "tree": {"sha": "96f0496acecf209cad61847edba4e89f3dfc3a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f0496acecf209cad61847edba4e89f3dfc3a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3491378e3420a19dc98708a2953df5c524c2681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3491378e3420a19dc98708a2953df5c524c2681", "html_url": "https://github.com/rust-lang/rust/commit/c3491378e3420a19dc98708a2953df5c524c2681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3491378e3420a19dc98708a2953df5c524c2681/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e3d038c002956fe07d8862e420ed37d7c194fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e3d038c002956fe07d8862e420ed37d7c194fc", "html_url": "https://github.com/rust-lang/rust/commit/14e3d038c002956fe07d8862e420ed37d7c194fc"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "ef7becde69a6673c4dbc6acbdf7be5143ccbe647", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=c3491378e3420a19dc98708a2953df5c524c2681", "patch": "@@ -1,7 +1,6 @@\n use super::{\n     Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n };\n-use crate::mir::ConstantKind;\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn thir(&self) -> &'a Thir<'tcx>;\n@@ -26,7 +25,14 @@ pub trait Visitor<'a, 'tcx: 'a>: Sized {\n         walk_pat(self, pat);\n     }\n \n-    fn visit_constant(&mut self, _constant: ConstantKind<'tcx>) {}\n+    // Note: We don't have visitors for `ty::Const` and `mir::ConstantKind`\n+    // (even though these types occur in THIR) for consistency and to reduce confusion,\n+    // since the lazy creation of constants during thir construction causes most\n+    // 'constants' to not be of type `ty::Const` or `mir::ConstantKind` at that\n+    // stage (they are mostly still identified by `DefId` or `hir::Lit`, see\n+    // the variants `Literal`, `NonHirLiteral` and `NamedConst` in `thir::ExprKind`).\n+    // You have to manually visit `ty::Const` and `mir::ConstantKind` through the\n+    // other `visit*` functions.\n }\n \n pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Expr<'tcx>) {"}, {"sha": "7d9a917d04c761d1186ec86959d9d252ec81745d", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c3491378e3420a19dc98708a2953df5c524c2681", "patch": "@@ -662,8 +662,8 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n impl<'tcx> Ty<'tcx> {\n     /// Returns the maximum value for the given numeric type (including `char`s)\n     /// or returns `None` if the type is not numeric.\n-    pub fn numeric_max_val(self, tcx: TyCtxt<'tcx>) -> Option<u128> {\n-        match self.kind() {\n+    pub fn numeric_max_val(self, tcx: TyCtxt<'tcx>) -> Option<Const<'tcx>> {\n+        let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n                 let val =\n@@ -676,13 +676,14 @@ impl<'tcx> Ty<'tcx> {\n                 ty::FloatTy::F64 => rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n             }),\n             _ => None,\n-        }\n+        };\n+        val.map(|v| Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n     }\n \n     /// Returns the minimum value for the given numeric type (including `char`s)\n     /// or returns `None` if the type is not numeric.\n-    pub fn numeric_min_val(self, tcx: TyCtxt<'tcx>) -> Option<u128> {\n-        match self.kind() {\n+    pub fn numeric_min_val(self, tcx: TyCtxt<'tcx>) -> Option<Const<'tcx>> {\n+        let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n                 let val = if signed { size.truncate(size.signed_int_min() as u128) } else { 0 };\n@@ -694,7 +695,8 @@ impl<'tcx> Ty<'tcx> {\n                 ty::FloatTy::F64 => (-::rustc_apfloat::ieee::Double::INFINITY).to_bits(),\n             }),\n             _ => None,\n-        }\n+        };\n+        val.map(|v| Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n     }\n \n     /// Checks whether values of this type `T` are *moved* or *copied*"}, {"sha": "dbcd701c1adddbecd8e9e4c4de7be5ab9efe3126", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=c3491378e3420a19dc98708a2953df5c524c2681", "patch": "@@ -183,12 +183,10 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 Some((*lo, *hi))\n             }\n             (Some(PatKind::Constant { value: lo }), None) => {\n-                let hi = ty.numeric_max_val(self.tcx)?;\n-                Some((*lo, ty::Const::from_bits(self.tcx, hi, ty::ParamEnv::empty().and(ty))))\n+                Some((*lo, ty.numeric_max_val(self.tcx)?))\n             }\n             (None, Some(PatKind::Constant { value: hi })) => {\n-                let lo = ty.numeric_min_val(self.tcx)?;\n-                Some((ty::Const::from_bits(self.tcx, lo, ty::ParamEnv::empty().and(ty)), *hi))\n+                Some((ty.numeric_min_val(self.tcx)?, *hi))\n             }\n             _ => None,\n         }"}, {"sha": "b409bc3d64e3f5431a1b63ae799bd3a868cc1eda", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3491378e3420a19dc98708a2953df5c524c2681/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c3491378e3420a19dc98708a2953df5c524c2681", "patch": "@@ -376,10 +376,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                     visit::walk_pat(self, pat);\n                 }\n             }\n-\n-            fn visit_constant(&mut self, ct: mir::ConstantKind<'tcx>) {\n-                self.is_poly |= ct.has_param_types_or_consts();\n-            }\n         }\n \n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body };"}, {"sha": "c0b3e95b18523fcbd40bb7523be6d0b96d6b6731", "filename": "src/tools/clippy/clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3491378e3420a19dc98708a2953df5c524c2681/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3491378e3420a19dc98708a2953df5c524c2681/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=c3491378e3420a19dc98708a2953df5c524c2681", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant, constant_full_int, FullInt};\n+use clippy_utils::consts::{constant, constant_full_int, miri_to_const, FullInt};\n use clippy_utils::diagnostics::span_lint_and_note;\n use core::cmp::Ordering;\n use rustc_hir::{Arm, Expr, PatKind, RangeEnd};\n@@ -32,15 +32,16 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n         .filter_map(|arm| {\n             if let Arm { pat, guard: None, .. } = *arm {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n-                    let lhs_val = match lhs {\n-                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0.int_value(cx, ty)?,\n-                        None => FullInt::U(ty.numeric_min_val(cx.tcx)?),\n+                    let lhs_const = match lhs {\n+                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n+                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n                     };\n-                    let rhs_val = match rhs {\n-                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0.int_value(cx, ty)?,\n-                        None => FullInt::U(ty.numeric_max_val(cx.tcx)?),\n+                    let rhs_const = match rhs {\n+                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n+                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n                     };\n-\n+                    let lhs_val = lhs_const.int_value(cx, ty)?;\n+                    let rhs_val = rhs_const.int_value(cx, ty)?;\n                     let rhs_bound = match range_end {\n                         RangeEnd::Included => EndBound::Included(rhs_val),\n                         RangeEnd::Excluded => EndBound::Excluded(rhs_val),"}]}