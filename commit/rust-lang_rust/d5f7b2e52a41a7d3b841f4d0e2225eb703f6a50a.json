{"sha": "d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjdiMmU1MmE0MWE3ZDNiODQxZjRkMGUyMjI1ZWI3MDNmNmE1MGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-28T15:26:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-28T15:26:20Z"}, "message": "Merge #9028\n\n9028: only advertise range formatting support if enabled r=Veykril a=euclio\n\nFixes #9009.\n\nCo-authored-by: Andy Russell <arussell123@gmail.com>", "tree": {"sha": "f09699314664440b08fc445861a010fcbb74b407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09699314664440b08fc445861a010fcbb74b407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgsQucCRBK7hj4Ov3rIwAAbRkIAH9Y1BVOpxzVZgzYpu17WaOX\n6HOHIkBkPs6HJOG6a7+acS/g/YimnSRNFNc0JCc5uyz9WovUtOq/G0DdEowEtY/h\nEnXLCaJr17InjkwvEveqOmJNm55UPl9x8DudFHHvMy25dVfeGaLcz5wFbM1JCiw6\nKEcDOpqjZ6sqTPWfVndgvJ8ffki3vr/BKIGJXUXizZ45DNNymtXeHV2kwT4IRgNQ\n/ZhdLiv2X/RjVwe1bx+ijpPxoWCxn3hF7wZ2ok1YJcOJdU4ANQ74bFJwvdQ++Gm5\nTdBYHEk6U7felaqtJa2wCcaDhcuqhJpqi1G9MIebeZ+HsrEoqWNO7dDkaKFKYl4=\n=AyTT\n-----END PGP SIGNATURE-----\n", "payload": "tree f09699314664440b08fc445861a010fcbb74b407\nparent 2968731fd58e86d994753af5f81e52230c34b240\nparent a0cd7fe242f1f58a1570164ec595f94b8b64e1b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622215580 +0000\ncommitter GitHub <noreply@github.com> 1622215580 +0000\n\nMerge #9028\n\n9028: only advertise range formatting support if enabled r=Veykril a=euclio\n\nFixes #9009.\n\nCo-authored-by: Andy Russell <arussell123@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "html_url": "https://github.com/rust-lang/rust/commit/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2968731fd58e86d994753af5f81e52230c34b240", "url": "https://api.github.com/repos/rust-lang/rust/commits/2968731fd58e86d994753af5f81e52230c34b240", "html_url": "https://github.com/rust-lang/rust/commit/2968731fd58e86d994753af5f81e52230c34b240"}, {"sha": "a0cd7fe242f1f58a1570164ec595f94b8b64e1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cd7fe242f1f58a1570164ec595f94b8b64e1b5", "html_url": "https://github.com/rust-lang/rust/commit/a0cd7fe242f1f58a1570164ec595f94b8b64e1b5"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "2b842d39310ec5644e2a1ab5d856332eaab2623b", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "patch": "@@ -158,19 +158,32 @@ fn run_server() -> Result<()> {\n     let initialize_params =\n         from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n \n-    let server_capabilities = rust_analyzer::server_capabilities(&initialize_params.capabilities);\n+    let root_path = match initialize_params\n+        .root_uri\n+        .and_then(|it| it.to_file_path().ok())\n+        .and_then(|it| AbsPathBuf::try_from(it).ok())\n+    {\n+        Some(it) => it,\n+        None => {\n+            let cwd = env::current_dir()?;\n+            AbsPathBuf::assert(cwd)\n+        }\n+    };\n+\n+    let mut config = Config::new(root_path, initialize_params.capabilities);\n+    if let Some(json) = initialize_params.initialization_options {\n+        config.update(json);\n+    }\n+\n+    let server_capabilities = rust_analyzer::server_capabilities(&config);\n \n     let initialize_result = lsp_types::InitializeResult {\n         capabilities: server_capabilities,\n         server_info: Some(lsp_types::ServerInfo {\n             name: String::from(\"rust-analyzer\"),\n             version: Some(String::from(env!(\"REV\"))),\n         }),\n-        offset_encoding: if supports_utf8(&initialize_params.capabilities) {\n-            Some(\"utf-8\".to_string())\n-        } else {\n-            None\n-        },\n+        offset_encoding: if supports_utf8(&config.caps) { Some(\"utf-8\".to_string()) } else { None },\n     };\n \n     let initialize_result = serde_json::to_value(initialize_result).unwrap();\n@@ -181,47 +194,26 @@ fn run_server() -> Result<()> {\n         log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }\n \n-    let config = {\n-        let root_path = match initialize_params\n-            .root_uri\n-            .and_then(|it| it.to_file_path().ok())\n-            .and_then(|it| AbsPathBuf::try_from(it).ok())\n-        {\n-            Some(it) => it,\n-            None => {\n-                let cwd = env::current_dir()?;\n-                AbsPathBuf::assert(cwd)\n-            }\n-        };\n-\n-        let mut config = Config::new(root_path, initialize_params.capabilities);\n-        if let Some(json) = initialize_params.initialization_options {\n-            config.update(json);\n-        }\n-\n-        if config.linked_projects().is_empty() && config.detached_files().is_empty() {\n-            let workspace_roots = initialize_params\n-                .workspace_folders\n-                .map(|workspaces| {\n-                    workspaces\n-                        .into_iter()\n-                        .filter_map(|it| it.uri.to_file_path().ok())\n-                        .filter_map(|it| AbsPathBuf::try_from(it).ok())\n-                        .collect::<Vec<_>>()\n-                })\n-                .filter(|workspaces| !workspaces.is_empty())\n-                .unwrap_or_else(|| vec![config.root_path.clone()]);\n-\n-            let discovered = ProjectManifest::discover_all(&workspace_roots);\n-            log::info!(\"discovered projects: {:?}\", discovered);\n-            if discovered.is_empty() {\n-                log::error!(\"failed to find any projects in {:?}\", workspace_roots);\n-            }\n-            config.discovered_projects = Some(discovered);\n+    if config.linked_projects().is_empty() && config.detached_files().is_empty() {\n+        let workspace_roots = initialize_params\n+            .workspace_folders\n+            .map(|workspaces| {\n+                workspaces\n+                    .into_iter()\n+                    .filter_map(|it| it.uri.to_file_path().ok())\n+                    .filter_map(|it| AbsPathBuf::try_from(it).ok())\n+                    .collect::<Vec<_>>()\n+            })\n+            .filter(|workspaces| !workspaces.is_empty())\n+            .unwrap_or_else(|| vec![config.root_path.clone()]);\n+\n+        let discovered = ProjectManifest::discover_all(&workspace_roots);\n+        log::info!(\"discovered projects: {:?}\", discovered);\n+        if discovered.is_empty() {\n+            log::error!(\"failed to find any projects in {:?}\", workspace_roots);\n         }\n-\n-        config\n-    };\n+        config.discovered_projects = Some(discovered);\n+    }\n \n     rust_analyzer::main_loop(config, connection)?;\n "}, {"sha": "fe5255240d36433bef3ae36f4b1c8d3a6fffda28", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "patch": "@@ -13,9 +13,10 @@ use lsp_types::{\n };\n use serde_json::json;\n \n+use crate::config::{Config, RustfmtConfig};\n use crate::semantic_tokens;\n \n-pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabilities {\n+pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n@@ -26,7 +27,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         })),\n         hover_provider: Some(HoverProviderCapability::Simple(true)),\n         completion_provider: Some(CompletionOptions {\n-            resolve_provider: completions_resolve_provider(client_caps),\n+            resolve_provider: completions_resolve_provider(&config.caps),\n             trigger_characters: Some(vec![\":\".to_string(), \".\".to_string(), \"'\".to_string()]),\n             all_commit_characters: None,\n             completion_item: None,\n@@ -45,10 +46,13 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         document_highlight_provider: Some(OneOf::Left(true)),\n         document_symbol_provider: Some(OneOf::Left(true)),\n         workspace_symbol_provider: Some(OneOf::Left(true)),\n-        code_action_provider: Some(code_action_capabilities(client_caps)),\n+        code_action_provider: Some(code_action_capabilities(&config.caps)),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(OneOf::Left(true)),\n-        document_range_formatting_provider: Some(OneOf::Left(true)),\n+        document_range_formatting_provider: match config.rustfmt() {\n+            RustfmtConfig::Rustfmt { enable_range_formatting: true, .. } => Some(OneOf::Left(true)),\n+            _ => Some(OneOf::Left(false)),\n+        },\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n             more_trigger_character: Some(vec![\".\".to_string(), \">\".to_string(), \"{\".to_string()]),"}, {"sha": "b6a1124a54bec50678cfc7a9d2781870c88cfe9a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d5f7b2e52a41a7d3b841f4d0e2225eb703f6a50a", "patch": "@@ -238,7 +238,7 @@ impl Default for ConfigData {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    caps: lsp_types::ClientCapabilities,\n+    pub caps: lsp_types::ClientCapabilities,\n     data: ConfigData,\n     detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,"}]}