{"sha": "8d6185350953391d0dd405cf790a69bb65d88a36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjE4NTM1MDk1MzM5MWQwZGQ0MDVjZjc5MGE2OWJiNjVkODhhMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T09:57:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T09:57:30Z"}, "message": "docs", "tree": {"sha": "7f72fee435e82c750b321a52c551010d1b7afd09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f72fee435e82c750b321a52c551010d1b7afd09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6185350953391d0dd405cf790a69bb65d88a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6185350953391d0dd405cf790a69bb65d88a36", "html_url": "https://github.com/rust-lang/rust/commit/8d6185350953391d0dd405cf790a69bb65d88a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6185350953391d0dd405cf790a69bb65d88a36/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ea6bcbffd4ae3ac5289ff7d434450c219186a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ea6bcbffd4ae3ac5289ff7d434450c219186a8", "html_url": "https://github.com/rust-lang/rust/commit/03ea6bcbffd4ae3ac5289ff7d434450c219186a8"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "61af676b2c254e6b59086ea8896d1ed05900e626", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d6185350953391d0dd405cf790a69bb65d88a36/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6185350953391d0dd405cf790a69bb65d88a36/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=8d6185350953391d0dd405cf790a69bb65d88a36", "patch": "@@ -1,6 +1,8 @@\n-//! ra_analyzer crate is the brain of Rust analyzer. It relies on the `salsa`\n-//! crate, which provides and incremental on-demand database of facts.\n-\n+//! ra_analyzer crate provides \"ide-centric\" APIs for the rust-analyzer. What\n+//! powers this API are the `RootDatabase` struct, which defines a `salsa`\n+//! database, and the `ra_hir` crate, where majority of the analysis happens.\n+//! However, IDE specific bits of the analysis (most notably completion) happen\n+//! in this crate.\n macro_rules! ctry {\n     ($expr:expr) => {\n         match $expr {\n@@ -219,6 +221,11 @@ impl Query {\n     }\n }\n \n+/// `NavigationTarget` represents and element in the editor's UI whihc you can\n+/// click on to navigate to a particular piece of code.\n+///\n+/// Typically, a `NavigationTarget` corresponds to some element in the source\n+/// code, like a function or a struct, but this is not strictly required.\n #[derive(Debug)]\n pub struct NavigationTarget {\n     file_id: FileId,"}, {"sha": "10d8e80599a4ff20016bcf79067c94674bdb852a", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8d6185350953391d0dd405cf790a69bb65d88a36/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6185350953391d0dd405cf790a69bb65d88a36/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=8d6185350953391d0dd405cf790a69bb65d88a36", "patch": "@@ -1,3 +1,24 @@\n+//! This module handles fuzzy-searching of functions, structs and other symbols\n+//! by name across the whole workspace and dependencies.\n+//!\n+//! It works by building an incrementally-updated text-search index of all\n+//! symbols. The backbone of the index is the **awesome** `fst` crate by\n+//! @BurntSushi.\n+//!\n+//! In a nutshell, you give a set of strings to the `fst`, and it builds a\n+//! finite state machine describing this set of strtings. The strings which\n+//! could fuzzy-match a pattern can also be described by a finite state machine.\n+//! What is freakingly cool is that you can now traverse both state machines in\n+//! lock-step to enumerate the strings which are both in the input set and\n+//! fuzz-match the query. Or, more formally, given two langauges described by\n+//! fsts, one can build an product fst which describes the intersection of the\n+//! languages.\n+//!\n+//! `fst` does not support cheap updating of the index, but it supports unioning\n+//! of state machines. So, to account for changing source code, we build an fst\n+//! for each library (which is assumed to never change) and an fst for each rust\n+//! file in the current workspace, and run a query aginst the union of all\n+//! thouse fsts.\n use std::{\n     hash::{Hash, Hasher},\n     sync::Arc,\n@@ -160,6 +181,8 @@ fn is_type(kind: SyntaxKind) -> bool {\n     }\n }\n \n+/// The actual data that is stored in the index. It should be as compact as\n+/// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub(crate) struct FileSymbol {\n     pub(crate) name: SmolStr,"}]}