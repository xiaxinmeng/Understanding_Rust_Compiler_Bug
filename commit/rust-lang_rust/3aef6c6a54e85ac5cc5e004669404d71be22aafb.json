{"sha": "3aef6c6a54e85ac5cc5e004669404d71be22aafb", "node_id": "C_kwDOAAsO6NoAKDNhZWY2YzZhNTRlODVhYzVjYzVlMDA0NjY5NDA0ZDcxYmUyMmFhZmI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-10-27T17:33:41Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-03T15:09:02Z"}, "message": "roll another resolution logic in rustdoc", "tree": {"sha": "2b3e84cab32e07bc2712111531be89743fa5fe87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3e84cab32e07bc2712111531be89743fa5fe87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aef6c6a54e85ac5cc5e004669404d71be22aafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aef6c6a54e85ac5cc5e004669404d71be22aafb", "html_url": "https://github.com/rust-lang/rust/commit/3aef6c6a54e85ac5cc5e004669404d71be22aafb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aef6c6a54e85ac5cc5e004669404d71be22aafb/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b6fe37a6d447a647f2608562aff7b1758bce54", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b6fe37a6d447a647f2608562aff7b1758bce54", "html_url": "https://github.com/rust-lang/rust/commit/30b6fe37a6d447a647f2608562aff7b1758bce54"}], "stats": {"total": 23, "additions": 3, "deletions": 20}, "files": [{"sha": "7a77aedbccf9d27091b83fcdb08393ca36793d1b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aef6c6a54e85ac5cc5e004669404d71be22aafb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aef6c6a54e85ac5cc5e004669404d71be22aafb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3aef6c6a54e85ac5cc5e004669404d71be22aafb", "patch": "@@ -1381,7 +1381,8 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 ty::Projection(proj) => Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id),\n                 // Rustdoc handles `ty::Error`s by turning them into `Type::Infer`s.\n                 ty::Error(_) => return Type::Infer,\n-                _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n+                // Otherwise, this is an inherent associated type.\n+                _ => return clean_middle_ty(ty, cx, None),\n             };\n             let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);"}, {"sha": "94ea0e93bf6372e09ba9865a1261f4f83276c495", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3aef6c6a54e85ac5cc5e004669404d71be22aafb/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aef6c6a54e85ac5cc5e004669404d71be22aafb/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs?ref=3aef6c6a54e85ac5cc5e004669404d71be22aafb", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // This test ensures that rustdoc does not panic on inherented associated types\n // that are referred to without fully-qualified syntax.\n \n@@ -9,8 +10,4 @@ pub struct Struct;\n impl Struct {\n     pub type AssocTy = usize;\n     pub const AssocConst: Self::AssocTy = 42;\n-    //~^ ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n-    //~| ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n }"}, {"sha": "b963b722f66201708db4650dba2ad194c31b2597", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -1,15 +0,0 @@\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}]}