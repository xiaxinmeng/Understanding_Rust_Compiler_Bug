{"sha": "c5410150eb5563ed1f0529bf16e0524846a8979d", "node_id": "C_kwDOAAsO6NoAKGM1NDEwMTUwZWI1NTYzZWQxZjA1MjliZjE2ZTA1MjQ4NDZhODk3OWQ", "commit": {"author": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2022-05-29T01:57:15Z"}, "committer": {"name": "lengyijun", "email": "sjtu5140809011@gmail.com", "date": "2022-05-30T01:46:15Z"}, "message": "needless_deref", "tree": {"sha": "e685de7c02e3b929769abf34a60db70c67612861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e685de7c02e3b929769abf34a60db70c67612861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5410150eb5563ed1f0529bf16e0524846a8979d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5410150eb5563ed1f0529bf16e0524846a8979d", "html_url": "https://github.com/rust-lang/rust/commit/c5410150eb5563ed1f0529bf16e0524846a8979d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5410150eb5563ed1f0529bf16e0524846a8979d/comments", "author": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39231b4b503955626c1ccf965b8328ac67c523bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/39231b4b503955626c1ccf965b8328ac67c523bb", "html_url": "https://github.com/rust-lang/rust/commit/39231b4b503955626c1ccf965b8328ac67c523bb"}], "stats": {"total": 419, "additions": 325, "deletions": 94}, "files": [{"sha": "ece80343622f7a5cc8e040b75238f69c890af3f8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -3296,6 +3296,7 @@ Released 2018-09-13\n [`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n+[`borrow_deref_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection"}, {"sha": "ec2f31cf6737415184740ec6be5cc6fdac9aaab7", "filename": "clippy_lints/src/borrow_deref_ref.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -0,0 +1,118 @@\n+use crate::reference::DEREF_ADDROF;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_parent_expr, is_lint_allowed};\n+use rustc_errors::Applicability;\n+use rustc_hir::{ExprKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::Mutability;\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `&*(&T)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Dereferencing and then borrowing a reference value has no effect in most cases.\n+    ///\n+    /// ### Known problems\n+    /// false negative on such code:\n+    /// ```\n+    /// let x = &12;\n+    /// let addr_x = &x as *const _ as usize;\n+    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggerd.\n+    ///                                         // But if we fix it, assert will fail.\n+    /// assert_ne!(addr_x, addr_y);\n+    /// ```\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let s = &String::new();\n+    ///\n+    /// // Bad\n+    /// let a: &String = &* s;\n+    /// foo(&*s);\n+    ///\n+    /// // Good\n+    /// let a: &String = s;\n+    /// foo(&**s);\n+    ///\n+    /// fn foo(_: &str){ }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub BORROW_DEREF_REF,\n+    complexity,\n+    \"deref on an immutable reference returns the same type as itself\"\n+}\n+\n+declare_lint_pass!(BorrowDerefRef => [BORROW_DEREF_REF]);\n+\n+impl LateLintPass<'_> for BorrowDerefRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, e: &rustc_hir::Expr<'_>) {\n+        if_chain! {\n+            if !e.span.from_expansion();\n+            if let ExprKind::AddrOf(_, Mutability::Not, addrof_target) = e.kind;\n+            if !addrof_target.span.from_expansion();\n+            if let ExprKind::Unary(UnOp::Deref, deref_target) = addrof_target.kind;\n+            if !deref_target.span.from_expansion();\n+            if !matches!(deref_target.kind, ExprKind::Unary(UnOp::Deref, ..) );\n+            let ref_ty = cx.typeck_results().expr_ty(deref_target);\n+            if let ty::Ref(_, inner_ty, Mutability::Not) = ref_ty.kind();\n+            then{\n+\n+                if let Some(parent_expr) = get_parent_expr(cx, e){\n+                    if matches!(parent_expr.kind, ExprKind::Unary(UnOp::Deref, ..)) &&\n+                       !is_lint_allowed(cx, DEREF_ADDROF, parent_expr.hir_id) {\n+                        return;\n+                    }\n+\n+                    // modification to `&mut &*x` is different from `&mut x`\n+                    if matches!(deref_target.kind, ExprKind::Path(..)\n+                                             | ExprKind::Field(..)\n+                                             | ExprKind::Index(..)\n+                                             | ExprKind::Unary(UnOp::Deref, ..))\n+                     && matches!(parent_expr.kind, ExprKind::AddrOf(_, Mutability::Mut, _)) {\n+                       return;\n+                    }\n+                }\n+\n+                span_lint_and_then(\n+                    cx,\n+                    BORROW_DEREF_REF,\n+                    e.span,\n+                    \"deref on an immutable reference\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"if you would like to reborrow, try removing `&*`\",\n+                            snippet_opt(cx, deref_target.span).unwrap(),\n+                            Applicability::MachineApplicable\n+                        );\n+\n+                        // has deref trait -> give 2 help\n+                        // doesn't have deref trait -> give 1 help\n+                        if let Some(deref_trait_id) = cx.tcx.lang_items().deref_trait(){\n+                            if !implements_trait(cx, *inner_ty, deref_trait_id, &[]) {\n+                                return;\n+                            }\n+                        }\n+\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"if you would like to deref, try using `&**`\",\n+                            format!(\n+                                \"&**{}\",\n+                                &snippet_opt(cx, deref_target.span).unwrap(),\n+                             ),\n+                            Applicability::MaybeIncorrect\n+                        );\n+\n+                    }\n+                );\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "1010340c712139356cbe5475e2c4d7859a402a26", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -318,7 +318,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let QPath::TypeRelative(ty, path) = &path;\n         if path.ident.name.as_str() == function;\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n-        if let [int] = &*tp.segments;\n+        if let [int] = tp.segments;\n         then {\n             let name = int.ident.name.as_str();\n             candidates.iter().find(|c| &name == *c).copied()\n@@ -332,7 +332,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n     if_chain! {\n         if let QPath::Resolved(_, path) = *path;\n-        if let [ty] = &*path.segments;\n+        if let [ty] = path.segments;\n         then {\n             let name = ty.ident.name.as_str();\n             INTS.iter().find(|c| &name == *c).copied()"}, {"sha": "56bbbbbc819e5aa58020185a6ddee98dc0be15d0", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::ExprKind::If(hir::Expr { kind: hir::ExprKind::DropTemps(cond), ..}, then, else_) = if_.kind;\n                 if !is_local_used(cx, *cond, canonical_id);\n                 if let hir::ExprKind::Block(then, _) = then.kind;\n-                if let Some(value) = check_assign(cx, canonical_id, &*then);\n+                if let Some(value) = check_assign(cx, canonical_id, then);\n                 if !is_local_used(cx, value, canonical_id);\n                 then {\n                     let span = stmt.span.to(if_.span);"}, {"sha": "de43d4be1b38c2e6959e4ed4d87f8f9fa8491b33", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -24,6 +24,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n     LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),"}, {"sha": "67ddae45bc07a8f1939b4e9f5abb8dcfc2bf61a2", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -5,6 +5,7 @@\n store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n     LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::UNNECESSARY_CAST),"}, {"sha": "42a17eb12ce52b9ed02b3f24047213ea264bc44e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -64,6 +64,7 @@ store.register_lints(&[\n     booleans::LOGIC_BUG,\n     booleans::NONMINIMAL_BOOL,\n     borrow_as_ptr::BORROW_AS_PTR,\n+    borrow_deref_ref::BORROW_DEREF_REF,\n     bytecount::NAIVE_BYTECOUNT,\n     bytes_count_to_len::BYTES_COUNT_TO_LEN,\n     cargo::CARGO_COMMON_METADATA,"}, {"sha": "ca5e62ff431e7e199a6d9289b387a35e474d4547", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -183,6 +183,7 @@ mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n mod borrow_as_ptr;\n+mod borrow_deref_ref;\n mod bytecount;\n mod bytes_count_to_len;\n mod cargo;\n@@ -638,6 +639,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n     store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n     store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|| Box::new(borrow_deref_ref::BorrowDerefRef));\n     store.register_late_pass(|| Box::new(no_effect::NoEffect));\n     store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n     store.register_late_pass(|| Box::new(transmute::Transmute));"}, {"sha": "c025f5972d5195ff67ea0f6e2c47c7ee65759a55", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -146,7 +146,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             if arms.is_empty() {\n                 e\n             } else {\n-                let arms = never_loop_expr_branch(&mut arms.iter().map(|a| &*a.body), main_loop_id);\n+                let arms = never_loop_expr_branch(&mut arms.iter().map(|a| a.body), main_loop_id);\n                 combine_seq(e, arms)\n             }\n         },"}, {"sha": "1c216e135704c3ca4bdfba15937b5c5a64805cc0", "filename": "clippy_lints/src/matches/match_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -24,8 +24,8 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n                     let exprs = if let PatKind::Lit(arm_bool) = arms[0].pat.kind {\n                         if let ExprKind::Lit(ref lit) = arm_bool.kind {\n                             match lit.node {\n-                                LitKind::Bool(true) => Some((&*arms[0].body, &*arms[1].body)),\n-                                LitKind::Bool(false) => Some((&*arms[1].body, &*arms[0].body)),\n+                                LitKind::Bool(true) => Some((arms[0].body, arms[1].body)),\n+                                LitKind::Bool(false) => Some((arms[1].body, arms[0].body)),\n                                 _ => None,\n                             }\n                         } else {"}, {"sha": "b4c6bfb31ed1cb54a59ff276b96235aa4b84d7e1", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -415,7 +415,7 @@ fn is_cloned_or_copied(cx: &LateContext<'_>, method_name: Symbol, method_def_id:\n /// Returns true if the named method can be used to convert the receiver to its \"owned\"\n /// representation.\n fn is_to_owned_like(cx: &LateContext<'_>, method_name: Symbol, method_def_id: DefId) -> bool {\n-    is_clone_like(cx, &*method_name.as_str(), method_def_id)\n+    is_clone_like(cx, method_name.as_str(), method_def_id)\n         || is_cow_into_owned(cx, method_name, method_def_id)\n         || is_to_string(cx, method_name, method_def_id)\n }"}, {"sha": "024bd0760715e449fffa03f4bcb77f2cae98a79b", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                         self.visit_expr(if_expr);\n                     }\n                     // make sure top level arm expressions aren't linted\n-                    self.maybe_walk_expr(&*arm.body);\n+                    self.maybe_walk_expr(arm.body);\n                 }\n             },\n             _ => walk_expr(self, e),"}, {"sha": "7e2531c7ca5f0c6237292bc89245ce108b1d8b2d", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n         if let hir::PatKind::Wild = local.pat.kind {\n             return;\n         }\n-        check_ty(cx, local.span, cx.typeck_results().pat_ty(&*local.pat));\n+        check_ty(cx, local.span, cx.typeck_results().pat_ty(local.pat));\n     }\n }\n "}, {"sha": "21acf003d92b2a775d4068bcbcde535de7e7b531", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -61,7 +61,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir\n     expr_visitor_no_bodies(|expr| {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return true };\n         if matches!(\n-            &*cx.tcx.item_name(macro_call.def_id).as_str(),\n+            cx.tcx.item_name(macro_call.def_id).as_str(),\n             \"unimplemented\" | \"unreachable\" | \"panic\" | \"todo\" | \"assert\" | \"assert_eq\" | \"assert_ne\"\n         ) {\n             panics.push(macro_call.span);"}, {"sha": "5a93431f25a981f2db07e84f2da182814fbb8c13", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -233,7 +233,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.def_id, &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.def_id, method_sig.decl, None);\n         }\n     }\n "}, {"sha": "f7a6fbac1663728491cdf70129cad67642b695fe", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -288,8 +288,8 @@ fn is_call_with_ref_arg<'tcx>(\n         if let mir::TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n         if let mir::Operand::Move(mir::Place { local, .. }) = &args[0];\n-        if let ty::FnDef(def_id, _) = *func.ty(&*mir, cx.tcx).kind();\n-        if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n+        if let ty::FnDef(def_id, _) = *func.ty(mir, cx.tcx).kind();\n+        if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n             Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)?.as_local()?))\n@@ -318,7 +318,7 @@ fn find_stmt_assigns_to<'tcx>(\n         None\n     })?;\n \n-    match (by_ref, &*rvalue) {\n+    match (by_ref, rvalue) {\n         (true, mir::Rvalue::Ref(_, _, place)) | (false, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n             Some(base_local_and_movability(cx, mir, *place))\n         },"}, {"sha": "0825f00f421c5b9a9762b2f66d5213bd55b506fd", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -51,12 +51,12 @@ impl RedundantStaticLifetimes {\n     fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>, reason: &str) {\n         match ty.kind {\n             // Be careful of nested structures (arrays and tuples)\n-            TyKind::Array(ref ty, _) => {\n-                self.visit_type(&*ty, cx, reason);\n+            TyKind::Array(ref ty, _) | TyKind::Slice(ref ty) => {\n+                self.visit_type(ty, cx, reason);\n             },\n             TyKind::Tup(ref tup) => {\n                 for tup_ty in tup {\n-                    self.visit_type(&*tup_ty, cx, reason);\n+                    self.visit_type(tup_ty, cx, reason);\n                 }\n             },\n             // This is what we are looking for !\n@@ -89,9 +89,6 @@ impl RedundantStaticLifetimes {\n                 }\n                 self.visit_type(&*borrow_type.ty, cx, reason);\n             },\n-            TyKind::Slice(ref ty) => {\n-                self.visit_type(ty, cx, reason);\n-            },\n             _ => {},\n         }\n     }"}, {"sha": "bfb9f0d01e1dc88a717b3b1317a2cae03f557228", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -110,7 +110,7 @@ fn get_pointee_ty_and_count_expr<'tcx>(\n         // Find calls to copy_{from,to}{,_nonoverlapping} and write_bytes methods\n         if let ExprKind::MethodCall(method_path, [ptr_self, .., count], _) = expr.kind;\n         let method_ident = method_path.ident.as_str();\n-        if METHODS.iter().any(|m| *m == &*method_ident);\n+        if METHODS.iter().any(|m| *m == method_ident);\n \n         // Get the pointee type\n         if let ty::RawPtr(TypeAndMut { ty: pointee_ty, .. }) ="}, {"sha": "60f9887699498c2482f3f21c8284c40d4a6b7ed8", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -422,7 +422,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n             }\n         } else if let Some(macro_call) = root_macro_call_first_node(cx, item) {\n             if !matches!(\n-                &*cx.tcx.item_name(macro_call.def_id).as_str(),\n+                cx.tcx.item_name(macro_call.def_id).as_str(),\n                 \"impl_lint_pass\" | \"declare_lint_pass\"\n             ) {\n                 return;\n@@ -504,7 +504,7 @@ fn check_invalid_clippy_version_attribute(cx: &LateContext<'_>, item: &'_ Item<'\n             return;\n         }\n \n-        if RustcVersion::parse(&*value.as_str()).is_err() {\n+        if RustcVersion::parse(value.as_str()).is_err() {\n             span_lint_and_help(\n                 cx,\n                 INVALID_CLIPPY_VERSION_ATTRIBUTE,\n@@ -595,7 +595,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n             let fn_name = path.ident;\n-            if let Some(sugg) = self.map.get(&*fn_name.as_str());\n+            if let Some(sugg) = self.map.get(fn_name.as_str());\n             let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);\n@@ -679,7 +679,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             then {\n                 let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n                 let mut sle = SpanlessEq::new(cx).deny_side_effects();\n-                match &*ps.ident.as_str() {\n+                match ps.ident.as_str() {\n                     \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n                         suggest_suggestion(cx, expr, &and_then_snippets, &span_suggestion_snippets(cx, span_call_args));\n                     },"}, {"sha": "53579ccb4c2ba6c721b49c89fa2125a13f864e38", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -527,12 +527,11 @@ fn extract_attr_docs_or_lint(cx: &LateContext<'_>, item: &Item<'_>) -> Option<St\n fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n-    let mut docs = String::from(&*lines.next()?.as_str());\n+    let mut docs = String::from(lines.next()?.as_str());\n     let mut in_code_block = false;\n     let mut is_code_block_rust = false;\n     for line in lines {\n         let line = line.as_str();\n-        let line = &*line;\n \n         // Rustdoc hides code lines starting with `# ` and this removes them from Clippy's lint list :)\n         if is_code_block_rust && line.trim_start().starts_with(\"# \") {"}, {"sha": "d487868cafe50e42b682aa56969453d4db69979d", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     fn ifthenelse(&mut self, cond: &Expr<'_>, then: &Expr<'_>, otherwise: Option<&Expr<'_>>) -> Option<Constant> {\n         if let Some(Constant::Bool(b)) = self.expr(cond) {\n             if b {\n-                self.expr(&*then)\n+                self.expr(then)\n             } else {\n                 otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }"}, {"sha": "4604ae5c2c7f0486bbfda4424a5a6070a6534a6d", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> ForLoop<'tcx> {\n             if let hir::ExprKind::Match(iterexpr, [arm], hir::MatchSource::ForLoopDesugar) = e.kind;\n             if let hir::ExprKind::Call(_, [arg]) = iterexpr.kind;\n             if let hir::ExprKind::Loop(block, ..) = arm.body.kind;\n-            if let [stmt] = &*block.stmts;\n+            if let [stmt] = block.stmts;\n             if let hir::StmtKind::Expr(e) = stmt.kind;\n             if let hir::ExprKind::Match(_, [_, some_arm], _) = e.kind;\n             if let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind;"}, {"sha": "cbd0a257cfb62aa6c127d79279e27973eaf4ef0b", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -411,10 +411,10 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n-                l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n+                l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty)\n             },\n             (&TyKind::Rptr(_, ref l_rmut), &TyKind::Rptr(_, ref r_rmut)) => {\n-                l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(&*l_rmut.ty, &*r_rmut.ty)\n+                l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (&TyKind::Path(ref l), &TyKind::Path(ref r)) => self.eq_qpath(l, r),\n             (&TyKind::Tup(l), &TyKind::Tup(r)) => over(l, r, |l, r| self.eq_ty(l, r)),\n@@ -608,7 +608,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n                 if let Some(j) = *j {\n-                    self.hash_expr(&*j);\n+                    self.hash_expr(j);\n                 }\n             },\n             ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {"}, {"sha": "1ca7cf5c17743b3a355fcab56704ec7ad46c6173", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1443,7 +1443,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         },\n         PatKind::Tuple(pats, _) => are_refutable(cx, pats),\n         PatKind::Struct(ref qpath, fields, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, pats, _) => is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats),\n         PatKind::Slice(head, middle, tail) => {\n@@ -1658,7 +1658,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n     let mut blocks: Vec<&Block<'_>> = Vec::new();\n \n     while let Some(higher::IfOrIfLet { cond, then, r#else }) = higher::IfOrIfLet::hir(expr) {\n-        conds.push(&*cond);\n+        conds.push(cond);\n         if let ExprKind::Block(block, _) = then.kind {\n             blocks.push(block);\n         } else {"}, {"sha": "6033d06e4f637b15bcf58282095d4c11866b2f01", "filename": "tests/ui-internal/unnecessary_symbol_str.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -2,6 +2,7 @@\n #![feature(rustc_private)]\n #![deny(clippy::internal)]\n #![allow(\n+    clippy::borrow_deref_ref,\n     clippy::unnecessary_operation,\n     unused_must_use,\n     clippy::missing_clippy_version_attribute"}, {"sha": "1bb5d55f0b60cb591a388f7edc300546beeb326d", "filename": "tests/ui-internal/unnecessary_symbol_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -2,6 +2,7 @@\n #![feature(rustc_private)]\n #![deny(clippy::internal)]\n #![allow(\n+    clippy::borrow_deref_ref,\n     clippy::unnecessary_operation,\n     unused_must_use,\n     clippy::missing_clippy_version_attribute"}, {"sha": "a1f507f331d26c5cb7545fd98817c5a575495b8c", "filename": "tests/ui-internal/unnecessary_symbol_str.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:15:5\n+  --> $DIR/unnecessary_symbol_str.rs:16:5\n    |\n LL |     Symbol::intern(\"foo\").as_str() == \"clippy\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::sym::clippy`\n@@ -12,25 +12,25 @@ LL | #![deny(clippy::internal)]\n    = note: `#[deny(clippy::unnecessary_symbol_str)]` implied by `#[deny(clippy::internal)]`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:16:5\n+  --> $DIR/unnecessary_symbol_str.rs:17:5\n    |\n LL |     Symbol::intern(\"foo\").to_string() == \"self\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:17:5\n+  --> $DIR/unnecessary_symbol_str.rs:18:5\n    |\n LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:18:5\n+  --> $DIR/unnecessary_symbol_str.rs:19:5\n    |\n LL |     &*Ident::empty().as_str() == \"clippy\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::empty().name == rustc_span::sym::clippy`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:19:5\n+  --> $DIR/unnecessary_symbol_str.rs:20:5\n    |\n LL |     \"clippy\" == Ident::empty().to_string();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::empty().name`"}, {"sha": "c8a2c397ff6d3c828f341af84f1b225d564351d8", "filename": "tests/ui/borrow_deref_ref.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_deref_ref.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -0,0 +1,58 @@\n+fn main() {}\n+\n+mod should_lint {\n+    fn foo() {\n+        let a = &12;\n+        let b = &*a;\n+\n+        let s = &String::new();\n+        let x: &str = &*s;\n+\n+        let b = &mut &*bar(&12);\n+    }\n+\n+    fn bar(x: &u32) -> &u32 {\n+        x\n+    }\n+}\n+\n+// this mod explains why we should not lint `&mut &* (&T)`\n+mod should_not_lint1 {\n+    fn foo(x: &mut &u32) {\n+        *x = &1;\n+    }\n+\n+    fn main() {\n+        let mut x = &0;\n+        foo(&mut &*x); // should not lint\n+        assert_eq!(*x, 0);\n+\n+        foo(&mut x);\n+        assert_eq!(*x, 1);\n+    }\n+}\n+\n+// similar to should_not_lint1\n+mod should_not_lint2 {\n+    struct S<'a> {\n+        a: &'a u32,\n+        b: u32,\n+    }\n+\n+    fn main() {\n+        let s = S { a: &1, b: 1 };\n+        let x = &mut &*s.a;\n+        *x = &2;\n+    }\n+}\n+\n+// this mod explains why we should not lint `& &* (&T)`\n+mod false_negative {\n+    fn foo() {\n+        let x = &12;\n+        let addr_x = &x as *const _ as usize;\n+        let addr_y = &&*x as *const _ as usize; // assert ok\n+        // let addr_y = &x as *const _ as usize; // assert fail\n+        assert_ne!(addr_x, addr_y);\n+    }\n+}"}, {"sha": "b550b9285199d390a29dc3a203a1661a1927016e", "filename": "tests/ui/borrow_deref_ref.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fborrow_deref_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fborrow_deref_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_deref_ref.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -0,0 +1,37 @@\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:6:17\n+   |\n+LL |         let b = &*a;\n+   |                 ^^^ help: if you would like to reborrow, try removing `&*`: `a`\n+   |\n+   = note: `-D clippy::borrow-deref-ref` implied by `-D warnings`\n+\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:9:23\n+   |\n+LL |         let x: &str = &*s;\n+   |                       ^^^\n+   |\n+help: if you would like to reborrow, try removing `&*`\n+   |\n+LL |         let x: &str = s;\n+   |                       ~\n+help: if you would like to deref, try using `&**`\n+   |\n+LL |         let x: &str = &**s;\n+   |                       ~~~~\n+\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:11:22\n+   |\n+LL |         let b = &mut &*bar(&12);\n+   |                      ^^^^^^^^^^ help: if you would like to reborrow, try removing `&*`: `bar(&12)`\n+\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:54:23\n+   |\n+LL |         let addr_y = &&*x as *const _ as usize; // assert ok\n+   |                       ^^^ help: if you would like to reborrow, try removing `&*`: `x`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c8fb0a39e954cdeabf431e973c2cf19f830778b5", "filename": "tests/ui/collapsible_match2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -57,7 +57,7 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n \n     // ref pattern and deref\n     match Some(&[1]) {\n-        Some(ref s) => match &*s {\n+        Some(ref s) => match s {\n             [n] => foo(n),\n             _ => (),\n         },"}, {"sha": "fe64e4693792dcc109bd4c79f7fac53c5117585a", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -78,7 +78,7 @@ LL |             [n] => foo(n),\n error: this `match` can be collapsed into the outer `match`\n   --> $DIR/collapsible_match2.rs:60:24\n    |\n-LL |           Some(ref s) => match &*s {\n+LL |           Some(ref s) => match s {\n    |  ________________________^\n LL | |             [n] => foo(n),\n LL | |             _ => (),\n@@ -88,7 +88,7 @@ LL | |         },\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match2.rs:60:14\n    |\n-LL |         Some(ref s) => match &*s {\n+LL |         Some(ref s) => match s {\n    |              ^^^^^ replace this binding\n LL |             [n] => foo(n),\n    |             ^^^ with this pattern"}, {"sha": "257393e56ff0f766adb33cff0b920627502fadc5", "filename": "tests/ui/deref_by_slicing.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.fixed?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::deref_by_slicing)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::io::Read;\n "}, {"sha": "e288046f927fd44fa3f8585ec1a832102ad9ccfe", "filename": "tests/ui/deref_by_slicing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::deref_by_slicing)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::io::Read;\n "}, {"sha": "8f042ef47ebe326d6982a30ef2f1c2c357953d57", "filename": "tests/ui/deref_by_slicing.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fderef_by_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,55 +1,55 @@\n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:9:13\n+  --> $DIR/deref_by_slicing.rs:10:13\n    |\n LL |     let _ = &vec[..];\n    |             ^^^^^^^^ help: dereference the original value instead: `&*vec`\n    |\n    = note: `-D clippy::deref-by-slicing` implied by `-D warnings`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:10:13\n+  --> $DIR/deref_by_slicing.rs:11:13\n    |\n LL |     let _ = &mut vec[..];\n    |             ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:13:13\n+  --> $DIR/deref_by_slicing.rs:14:13\n    |\n LL |     let _ = &ref_vec[..];\n    |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:14:21\n+  --> $DIR/deref_by_slicing.rs:15:21\n    |\n LL |     let mut_slice = &mut ref_vec[..];\n    |                     ^^^^^^^^^^^^^^^^ help: dereference the original value instead: `&mut **ref_vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:15:13\n+  --> $DIR/deref_by_slicing.rs:16:13\n    |\n LL |     let _ = &mut mut_slice[..]; // Err, re-borrows slice\n    |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:18:13\n+  --> $DIR/deref_by_slicing.rs:19:13\n    |\n LL |     let _ = &s[..];\n    |             ^^^^^^ help: dereference the original value instead: `&*s`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:21:18\n+  --> $DIR/deref_by_slicing.rs:22:18\n    |\n LL |     let _ = &mut &S[..]; // Err, re-borrows slice\n    |                  ^^^^^^ help: reborrow the original value instead: `&*S`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:25:13\n+  --> $DIR/deref_by_slicing.rs:26:13\n    |\n LL |     let _ = &slice_ref[..]; // Err, derefs slice\n    |             ^^^^^^^^^^^^^^ help: dereference the original value instead: `*slice_ref`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:28:13\n+  --> $DIR/deref_by_slicing.rs:29:13\n    |\n LL |     let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Err, re-borrows slice\n    |             ^^^^^^^^^^^^ help: reborrow the original value instead: `(&*bytes)`"}, {"sha": "92f27e68549a397bf671441c962ae76912d9a4e8", "filename": "tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.fixed?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,6 +1,11 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::clone_double_ref, clippy::needless_borrow)]\n+#![allow(\n+    unused_variables,\n+    clippy::clone_double_ref,\n+    clippy::needless_borrow,\n+    clippy::borrow_deref_ref\n+)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "d118607f992b9e0cd48fec70cb3fb82c4d9c9b77", "filename": "tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,6 +1,11 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::clone_double_ref, clippy::needless_borrow)]\n+#![allow(\n+    unused_variables,\n+    clippy::clone_double_ref,\n+    clippy::needless_borrow,\n+    clippy::borrow_deref_ref\n+)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "8e8b358972be7e39808931940a6fec095dc03881", "filename": "tests/ui/explicit_deref_methods.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fexplicit_deref_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,73 +1,73 @@\n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:30:19\n+  --> $DIR/explicit_deref_methods.rs:35:19\n    |\n LL |     let b: &str = a.deref();\n    |                   ^^^^^^^^^ help: try this: `&*a`\n    |\n    = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n \n error: explicit `deref_mut` method call\n-  --> $DIR/explicit_deref_methods.rs:32:23\n+  --> $DIR/explicit_deref_methods.rs:37:23\n    |\n LL |     let b: &mut str = a.deref_mut();\n    |                       ^^^^^^^^^^^^^ help: try this: `&mut **a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:35:39\n+  --> $DIR/explicit_deref_methods.rs:40:39\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                       ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:35:50\n+  --> $DIR/explicit_deref_methods.rs:40:50\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                                  ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:37:20\n+  --> $DIR/explicit_deref_methods.rs:42:20\n    |\n LL |     println!(\"{}\", a.deref());\n    |                    ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:40:11\n+  --> $DIR/explicit_deref_methods.rs:45:11\n    |\n LL |     match a.deref() {\n    |           ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:44:28\n+  --> $DIR/explicit_deref_methods.rs:49:28\n    |\n LL |     let b: String = concat(a.deref());\n    |                            ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:46:13\n+  --> $DIR/explicit_deref_methods.rs:51:13\n    |\n LL |     let b = just_return(a).deref();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `just_return(a)`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:48:28\n+  --> $DIR/explicit_deref_methods.rs:53:28\n    |\n LL |     let b: String = concat(just_return(a).deref());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `just_return(a)`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:50:19\n+  --> $DIR/explicit_deref_methods.rs:55:19\n    |\n LL |     let b: &str = a.deref().deref();\n    |                   ^^^^^^^^^^^^^^^^^ help: try this: `&**a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:53:13\n+  --> $DIR/explicit_deref_methods.rs:58:13\n    |\n LL |     let b = opt_a.unwrap().deref();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:79:31\n+  --> $DIR/explicit_deref_methods.rs:84:31\n    |\n LL |     let b: &str = expr_deref!(a.deref());\n    |                               ^^^^^^^^^ help: try this: `&*a`"}, {"sha": "031b415f56ff6d643554a033f3f06ee6d72b7e78", "filename": "tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::mem::forget;\n "}, {"sha": "df5cd8cacdb8dbb8566c4a0c680b70cfe85e3992", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:10:5\n+  --> $DIR/forget_ref.rs:11:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:10:12\n+  --> $DIR/forget_ref.rs:11:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n+  --> $DIR/forget_ref.rs:14:12\n    |\n LL |     forget(&owned);\n    |            ^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n+  --> $DIR/forget_ref.rs:15:12\n    |\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:15:5\n+  --> $DIR/forget_ref.rs:16:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n+  --> $DIR/forget_ref.rs:16:12\n    |\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:19:5\n+  --> $DIR/forget_ref.rs:20:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:19:12\n+  --> $DIR/forget_ref.rs:20:12\n    |\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:22:5\n+  --> $DIR/forget_ref.rs:23:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:22:12\n+  --> $DIR/forget_ref.rs:23:12\n    |\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:25:5\n+  --> $DIR/forget_ref.rs:26:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:25:12\n+  --> $DIR/forget_ref.rs:26:12\n    |\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:30:5\n+  --> $DIR/forget_ref.rs:31:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:30:12\n+  --> $DIR/forget_ref.rs:31:12\n    |\n LL |     forget(&val);\n    |            ^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:38:5\n+  --> $DIR/forget_ref.rs:39:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:38:22\n+  --> $DIR/forget_ref.rs:39:22\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^"}, {"sha": "cb6ba36b14c809df2179f8f74f5d957de36c5dfe", "filename": "tests/ui/recursive_format_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Frecursive_format_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Frecursive_format_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursive_format_impl.rs?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -2,7 +2,8 @@\n #![allow(\n     clippy::inherent_to_string_shadow_display,\n     clippy::to_string_in_format_args,\n-    clippy::deref_addrof\n+    clippy::deref_addrof,\n+    clippy::borrow_deref_ref\n )]\n \n use std::fmt;"}, {"sha": "84ce69df566968125334727af37af854056bf43e", "filename": "tests/ui/recursive_format_impl.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Frecursive_format_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5410150eb5563ed1f0529bf16e0524846a8979d/tests%2Fui%2Frecursive_format_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursive_format_impl.stderr?ref=c5410150eb5563ed1f0529bf16e0524846a8979d", "patch": "@@ -1,77 +1,77 @@\n error: using `self.to_string` in `fmt::Display` implementation will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:29:25\n+  --> $DIR/recursive_format_impl.rs:30:25\n    |\n LL |         write!(f, \"{}\", self.to_string())\n    |                         ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::recursive-format-impl` implied by `-D warnings`\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:73:9\n+  --> $DIR/recursive_format_impl.rs:74:9\n    |\n LL |         write!(f, \"{}\", self)\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:82:9\n+  --> $DIR/recursive_format_impl.rs:83:9\n    |\n LL |         write!(f, \"{}\", &self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Debug` in `impl Debug` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:88:9\n+  --> $DIR/recursive_format_impl.rs:89:9\n    |\n LL |         write!(f, \"{:?}\", &self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:97:9\n+  --> $DIR/recursive_format_impl.rs:98:9\n    |\n LL |         write!(f, \"{}\", &&&self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:171:9\n+  --> $DIR/recursive_format_impl.rs:172:9\n    |\n LL |         write!(f, \"{}\", &*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Debug` in `impl Debug` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:177:9\n+  --> $DIR/recursive_format_impl.rs:178:9\n    |\n LL |         write!(f, \"{:?}\", &*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:193:9\n+  --> $DIR/recursive_format_impl.rs:194:9\n    |\n LL |         write!(f, \"{}\", *self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:209:9\n+  --> $DIR/recursive_format_impl.rs:210:9\n    |\n LL |         write!(f, \"{}\", **&&*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:225:9\n+  --> $DIR/recursive_format_impl.rs:226:9\n    |\n LL |         write!(f, \"{}\", &&**&&*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}