{"sha": "8ffc3e779020808e2437389e0aa559d9b028b061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZmMzZTc3OTAyMDgwOGUyNDM3Mzg5ZTBhYTU1OWQ5YjAyOGIwNjE=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-01-02T20:47:00Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-01-02T21:29:19Z"}, "message": "Reword 'stupid' and 'crazy' in docs.", "tree": {"sha": "4be7571406abfaf672f884cd318b0b25e68a0bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be7571406abfaf672f884cd318b0b25e68a0bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ffc3e779020808e2437389e0aa559d9b028b061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffc3e779020808e2437389e0aa559d9b028b061", "html_url": "https://github.com/rust-lang/rust/commit/8ffc3e779020808e2437389e0aa559d9b028b061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ffc3e779020808e2437389e0aa559d9b028b061/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df61658c8afc8b24800f5437e0000a99d04ea2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/df61658c8afc8b24800f5437e0000a99d04ea2b0", "html_url": "https://github.com/rust-lang/rust/commit/df61658c8afc8b24800f5437e0000a99d04ea2b0"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "ee5922b1f142db0c948d313fdd57f8887f953502", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ffc3e779020808e2437389e0aa559d9b028b061/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8ffc3e779020808e2437389e0aa559d9b028b061/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8ffc3e779020808e2437389e0aa559d9b028b061", "patch": "@@ -1568,7 +1568,7 @@ do\n     then\n         LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n         LLVM_INST_DIR=$LLVM_BUILD_DIR\n-        # For some crazy reason the MSVC output dir is different than Unix\n+        # For some weird reason the MSVC output dir is different than Unix\n         if [ ${is_msvc} -ne 0 ]; then\n             if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n             then"}, {"sha": "7b4c44ff051d626d1789e29e3e94424018b7253f", "filename": "src/doc/nomicon/atomics.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fatomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fatomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fatomics.md?ref=8ffc3e779020808e2437389e0aa559d9b028b061", "patch": "@@ -24,10 +24,10 @@ exactly what we said but, you know, fast. Wouldn't that be great?\n \n # Compiler Reordering\n \n-Compilers fundamentally want to be able to do all sorts of crazy transformations\n-to reduce data dependencies and eliminate dead code. In particular, they may\n-radically change the actual order of events, or make events never occur! If we\n-write something like\n+Compilers fundamentally want to be able to do all sorts of complicated\n+transformations to reduce data dependencies and eliminate dead code. In\n+particular, they may radically change the actual order of events, or make events\n+never occur! If we write something like\n \n ```rust,ignore\n x = 1;"}, {"sha": "15d84fdbf29371855e9448f89e41ac8ea7161244", "filename": "src/doc/nomicon/meet-safe-and-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fmeet-safe-and-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fmeet-safe-and-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fmeet-safe-and-unsafe.md?ref=8ffc3e779020808e2437389e0aa559d9b028b061", "patch": "@@ -22,7 +22,7 @@ Well, Rust *has* a safe programming language. Let's step back a bit.\n Rust can be thought of as being composed of two programming languages: *Safe\n Rust* and *Unsafe Rust*. Safe Rust is For Reals  Totally Safe. Unsafe Rust,\n unsurprisingly, is *not* For Reals Totally Safe.  In fact, Unsafe Rust lets you\n-do some really crazy unsafe things.\n+do some really, *really* unsafe things.\n \n Safe Rust is the *true* Rust programming language. If all you do is write Safe\n Rust, you will never have to worry about type-safety or memory-safety. You will"}, {"sha": "5145987158abc04d95afbcc85b29c59e8cc69532", "filename": "src/doc/nomicon/races.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fraces.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Fdoc%2Fnomicon%2Fraces.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fraces.md?ref=8ffc3e779020808e2437389e0aa559d9b028b061", "patch": "@@ -21,11 +21,11 @@ prevent *all* race conditions would be pretty awful to use, if not just\n incorrect.\n \n So it's perfectly \"fine\" for a Safe Rust program to get deadlocked or do\n-something incredibly stupid with incorrect synchronization. Obviously such a\n-program isn't very good, but Rust can only hold your hand so far. Still, a\n-race condition can't violate memory safety in a Rust program on\n-its own. Only in conjunction with some other unsafe code can a race condition\n-actually violate memory safety. For instance:\n+something nonsensical with incorrect synchronization. Obviously such a program\n+isn't very good, but Rust can only hold your hand so far. Still, a race\n+condition can't violate memory safety in a Rust program on its own. Only in\n+conjunction with some other unsafe code can a race condition actually violate\n+memory safety. For instance:\n \n ```rust,no_run\n use std::thread;"}, {"sha": "597f05622a52e2e245895cf5671d07cdcaa98446", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffc3e779020808e2437389e0aa559d9b028b061/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=8ffc3e779020808e2437389e0aa559d9b028b061", "patch": "@@ -207,7 +207,7 @@ unsafe fn unregister_dtor(key: Key) -> bool {\n // loop to basically match Unix semantics. If we don't reach a fixed point\n // after a short while then we just inevitably leak something most likely.\n //\n-// # The article mentions crazy stuff about \"/INCLUDE\"?\n+// # The article mentions weird stuff about \"/INCLUDE\"?\n //\n // It sure does! Specifically we're talking about this quote:\n //"}]}