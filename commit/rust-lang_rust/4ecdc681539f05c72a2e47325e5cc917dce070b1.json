{"sha": "4ecdc681539f05c72a2e47325e5cc917dce070b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2RjNjgxNTM5ZjA1YzcyYTJlNDczMjVlNWNjOTE3ZGNlMDcwYjE=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-02-23T09:42:33Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-02-23T09:42:33Z"}, "message": "Move MacroKind into Def::Macro", "tree": {"sha": "8edf449bab5a9af19656438660e117376eb09aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edf449bab5a9af19656438660e117376eb09aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecdc681539f05c72a2e47325e5cc917dce070b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecdc681539f05c72a2e47325e5cc917dce070b1", "html_url": "https://github.com/rust-lang/rust/commit/4ecdc681539f05c72a2e47325e5cc917dce070b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecdc681539f05c72a2e47325e5cc917dce070b1/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "306035c21741928bef75b8915d2195cce400b70a", "url": "https://api.github.com/repos/rust-lang/rust/commits/306035c21741928bef75b8915d2195cce400b70a", "html_url": "https://github.com/rust-lang/rust/commit/306035c21741928bef75b8915d2195cce400b70a"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "a05919608149941c2e32e0e2a7c8dd5da232e0de", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -11,6 +11,7 @@\n use hir::def_id::DefId;\n use util::nodemap::NodeMap;\n use syntax::ast;\n+use syntax::ext::base::MacroKind;\n use hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -53,7 +54,7 @@ pub enum Def {\n     Label(ast::NodeId),\n \n     // Macro namespace\n-    Macro(DefId),\n+    Macro(DefId, MacroKind),\n \n     // Both namespaces\n     Err,\n@@ -128,7 +129,7 @@ impl Def {\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n-            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id) => {\n+            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) => {\n                 id\n             }\n "}, {"sha": "53883e50a5be283e5b0c1e92fef21f6531e72c6b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -39,6 +39,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast;\n use syntax::codemap;\n+use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n@@ -434,7 +435,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Variant(_) => Def::Variant(did),\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n-            EntryKind::MacroDef(_) => Def::Macro(did),\n+            EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |\n@@ -483,9 +484,11 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n-        match self.is_proc_macro(index) {\n-            true => Some(Def::Macro(self.local_def_id(index))),\n-            false => self.entry(index).kind.to_def(self.local_def_id(index)),\n+        if !self.is_proc_macro(index) {\n+            self.entry(index).kind.to_def(self.local_def_id(index))\n+        } else {\n+            let kind = self.proc_macros.as_ref().unwrap()[index.as_usize() - 1].1.kind();\n+            Some(Def::Macro(self.local_def_id(index), kind))\n         }\n     }\n \n@@ -688,8 +691,14 @@ impl<'a, 'tcx> CrateMetadata {\n     {\n         if let Some(ref proc_macros) = self.proc_macros {\n             if id == CRATE_DEF_INDEX {\n-                for (id, &(name, _)) in proc_macros.iter().enumerate() {\n-                    let def = Def::Macro(DefId { krate: self.cnum, index: DefIndex::new(id + 1) });\n+                for (id, &(name, ref ext)) in proc_macros.iter().enumerate() {\n+                    let def = Def::Macro(\n+                        DefId {\n+                            krate: self.cnum,\n+                            index: DefIndex::new(id + 1)\n+                        },\n+                        ext.kind()\n+                    );\n                     callback(def::Export { name: name, def: def });\n                 }\n             }"}, {"sha": "a26e5b9144120771302b6b1516065d2c50b3e6fa", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -495,7 +495,7 @@ impl<'a> Resolver<'a> {\n \n     pub fn get_macro(&mut self, def: Def) -> Rc<SyntaxExtension> {\n         let def_id = match def {\n-            Def::Macro(def_id) => def_id,\n+            Def::Macro(def_id, ..) => def_id,\n             _ => panic!(\"Expected Def::Macro(..)\"),\n         };\n         if let Some(ext) = self.macro_map.get(&def_id) {"}, {"sha": "abe38048ad106818bd2b6bf7a051bc45a5ee363a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -2329,7 +2329,9 @@ impl<'a> Resolver<'a> {\n         if primary_ns != MacroNS && path.len() == 1 &&\n                 self.macro_names.contains(&path[0].name) {\n             // Return some dummy definition, it's enough for error reporting.\n-            return Some(PathResolution::new(Def::Macro(DefId::local(CRATE_DEF_INDEX))));\n+            return Some(\n+                PathResolution::new(Def::Macro(DefId::local(CRATE_DEF_INDEX), MacroKind::Bang))\n+            );\n         }\n         fin_res\n     }"}, {"sha": "ee521d280a1889ec0d821faafe9054e3d0630000", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -159,9 +159,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n             krate: BUILTIN_MACROS_CRATE,\n             index: DefIndex::new(self.macro_map.len()),\n         };\n+        let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);\n         let binding = self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Def(Def::Macro(def_id)),\n+            kind: NameBindingKind::Def(Def::Macro(def_id, kind)),\n             span: DUMMY_SP,\n             vis: ty::Visibility::Invisible,\n             expansion: Mark::root(),\n@@ -561,7 +562,7 @@ impl<'a> Resolver<'a> {\n             });\n             self.macro_exports.push(Export {\n                 name: def.ident.name,\n-                def: Def::Macro(self.definitions.local_def_id(def.id)),\n+                def: Def::Macro(self.definitions.local_def_id(def.id), MacroKind::Bang),\n             });\n             self.exported_macros.push(def);\n         }"}, {"sha": "6667a3199a8096ef5f4dd603d91465b8fa3d9c3d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -336,7 +336,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n-            Def::Macro(_) |\n+            Def::Macro(..) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\","}, {"sha": "64f37925a98e283c797fdc32de2dee5a03f15cf6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.inside_public_path = orig_inside_public_path;\n         if let Some(exports) = self.cx.export_map.get(&id) {\n             for export in exports {\n-                if let Def::Macro(def_id) = export.def {\n+                if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }"}, {"sha": "666e2205b4a2680722ef2d340cb0f2b54dd98253", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecdc681539f05c72a2e47325e5cc917dce070b1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4ecdc681539f05c72a2e47325e5cc917dce070b1", "patch": "@@ -475,7 +475,7 @@ pub type BuiltinDeriveFn =\n     for<'cx> fn(&'cx mut ExtCtxt, Span, &MetaItem, &Annotatable, &mut FnMut(Annotatable));\n \n /// Represents different kinds of macro invocations that can be resolved.\n-#[derive(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MacroKind {\n     /// A bang macro - foo!()\n     Bang,"}]}