{"sha": "b2100cc7b5b64b058d712a380ebf9630e4579928", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTAwY2M3YjViNjRiMDU4ZDcxMmEzODBlYmY5NjMwZTQ1Nzk5Mjg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-06T17:10:00Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T21:38:38Z"}, "message": "fix damage in librustc", "tree": {"sha": "fddd17a7412642293cbe4b11ff47ca37f63086c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddd17a7412642293cbe4b11ff47ca37f63086c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2100cc7b5b64b058d712a380ebf9630e4579928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2100cc7b5b64b058d712a380ebf9630e4579928", "html_url": "https://github.com/rust-lang/rust/commit/b2100cc7b5b64b058d712a380ebf9630e4579928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2100cc7b5b64b058d712a380ebf9630e4579928/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac3b46cac46e88ee2025ca9c9c0b853fd632110", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3b46cac46e88ee2025ca9c9c0b853fd632110", "html_url": "https://github.com/rust-lang/rust/commit/8ac3b46cac46e88ee2025ca9c9c0b853fd632110"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "d305a772ae5dbae1205010fc176edbca540db5a3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -17,6 +17,8 @@ use session::Session;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n+use util::common::slice_pat;\n+\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n@@ -98,17 +100,17 @@ impl TargetDataLayout {\n \n         let mut dl = TargetDataLayout::default();\n         for spec in sess.target.target.data_layout.split(\"-\") {\n-            match &spec.split(\":\").collect::<Vec<_>>()[..] {\n-                [\"e\"] => dl.endian = Endian::Little,\n-                [\"E\"] => dl.endian = Endian::Big,\n-                [\"a\", a..] => dl.aggregate_align = align(a, \"a\"),\n-                [\"f32\", a..] => dl.f32_align = align(a, \"f32\"),\n-                [\"f64\", a..] => dl.f64_align = align(a, \"f64\"),\n-                [p @ \"p\", s, a..] | [p @ \"p0\", s, a..] => {\n+            match slice_pat(&&spec.split(\":\").collect::<Vec<_>>()[..]) {\n+                &[\"e\"] => dl.endian = Endian::Little,\n+                &[\"E\"] => dl.endian = Endian::Big,\n+                &[\"a\", ref a..] => dl.aggregate_align = align(a, \"a\"),\n+                &[\"f32\", ref a..] => dl.f32_align = align(a, \"f32\"),\n+                &[\"f64\", ref a..] => dl.f64_align = align(a, \"f64\"),\n+                &[p @ \"p\", s, ref a..] | &[p @ \"p0\", s, ref a..] => {\n                     dl.pointer_size = size(s, p);\n                     dl.pointer_align = align(a, p);\n                 }\n-                [s, a..] if s.starts_with(\"i\") => {\n+                &[s, ref a..] if s.starts_with(\"i\") => {\n                     let ty_align = match s[1..].parse::<u64>() {\n                         Ok(1) => &mut dl.i8_align,\n                         Ok(8) => &mut dl.i8_align,\n@@ -123,7 +125,7 @@ impl TargetDataLayout {\n                     };\n                     *ty_align = align(a, s);\n                 }\n-                [s, a..] if s.starts_with(\"v\") => {\n+                &[s, ref a..] if s.starts_with(\"v\") => {\n                     let v_size = size(&s[1..], \"v\");\n                     let a = align(a, s);\n                     if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {"}, {"sha": "57c429152c89935d72c8add0e7d2b551afd760d0", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -247,3 +247,15 @@ pub fn path2cstr(p: &Path) -> CString {\n pub fn path2cstr(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }\n+\n+// FIXME(stage0): remove this\n+// HACK: this is needed because the interpretation of slice\n+// patterns changed between stage0 and now.\n+#[cfg(stage0)]\n+pub fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'a &'b [T] {\n+    t\n+}\n+#[cfg(not(stage0))]\n+pub fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'b [T] {\n+    *t\n+}"}, {"sha": "1380e0b45f27916f46dfa8ca7c87dfa0e2292b32", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -42,6 +42,7 @@ use rustc::hir::fold::{Folder, noop_fold_pat};\n use rustc::hir::print::pat_to_string;\n use syntax::ptr::P;\n use rustc::util::nodemap::FnvHashMap;\n+use rustc::util::common::slice_pat;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n     id: DUMMY_NODE_ID,\n@@ -401,8 +402,8 @@ fn check_exhaustive<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                 hir::MatchSource::ForLoopDesugar => {\n                     // `witnesses[0]` has the form `Some(<head>)`, peel off the `Some`\n                     let witness = match witnesses[0].node {\n-                        PatKind::TupleStruct(_, ref pats, _) => match &pats[..] {\n-                            [ref pat] => &**pat,\n+                        PatKind::TupleStruct(_, ref pats, _) => match slice_pat(&&pats[..]) {\n+                            &[ref pat] => &**pat,\n                             _ => bug!(),\n                         },\n                         _ => bug!(),"}, {"sha": "b7f14fffafb779dbaf990a8d876f80668e80bba5", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -16,6 +16,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use middle::const_val::ConstVal;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use util::common::slice_pat;\n use util::nodemap::{FnvHashSet};\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n@@ -459,8 +460,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 // Check for a repr() attribute to specify the size of the\n                 // discriminant.\n                 let repr_hints = cx.lookup_repr_hints(def.did);\n-                match &**repr_hints {\n-                    [] => {\n+                match slice_pat(&&**repr_hints) {\n+                    &[] => {\n                         // Special-case types like `Option<extern fn()>`.\n                         if !is_repr_nullable_ptr(cx, def, substs) {\n                             return FfiUnsafe(\n@@ -470,7 +471,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                  the type\")\n                         }\n                     }\n-                    [ref hint] => {\n+                    &[ref hint] => {\n                         if !hint.is_ffi_safe() {\n                             // FIXME: This shouldn't be reachable: we should check\n                             // this earlier."}, {"sha": "14b4dbdd9cff4e8a94c040a5c7e79ffa90cdf2fb", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -432,17 +432,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// apply to. The classical example involves wildcards:\n     ///\n     /// ```rust,ignore\n-    /// match (x, y) {\n-    ///     (true, _) => true,      // (0)\n-    ///     (_, true) => true,      // (1)\n-    ///     (false, false) => false // (2)\n+    /// match (x, y, z) {\n+    ///     (true, _, true) => true,    // (0)\n+    ///     (_, true, _) => true,       // (1)\n+    ///     (false, false, _) => false, // (2)\n+    ///     (true, _, false) => false,  // (3)\n     /// }\n     /// ```\n     ///\n     /// In that case, after we test on `x`, there are 2 overlapping candidate\n     /// sets:\n     ///\n-    /// - If the outcome is that `x` is true, candidates 0 and 2\n+    /// - If the outcome is that `x` is true, candidates 0, 1, and 3\n     /// - If the outcome is that `x` is false, candidates 1 and 2\n     ///\n     /// Here, the traditional \"decision tree\" method would generate 2\n@@ -481,11 +482,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// ```\n     ///\n     /// Here we first test the match-pair `x @ \"foo\"`, which is an `Eq` test.\n-    /// It might seem that we would end up with 2 disjoint candidate sets,\n-    /// consisting of the first candidate or the other 3, but our algorithm\n-    /// doesn't reason about \"foo\" being distinct from the other constants,\n-    /// it considers to latter arms to potentially match after both outcomes,\n-    /// which obviously leads to an exponential amount of tests.\n+    ///\n+    /// It might seem that we would end up with 2 disjoint candidate\n+    /// sets, consisting of the first candidate or the other 3, but our\n+    /// algorithm doesn't reason about \"foo\" being distinct from the other\n+    /// constants; it considers the latter arms to potentially match after\n+    /// both outcomes, which obviously leads to an exponential amount\n+    /// of tests.\n+    ///\n     /// To avoid these kinds of problems, our algorithm tries to ensure\n     /// the amount of generated tests is linear. When we do a k-way test,\n     /// we return an additional \"unmatched\" set alongside the obvious `k`"}, {"sha": "f5ca125aca91b66206d9e05588b3e50f5b7320a1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -22,6 +22,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::print as pprust;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::subst;\n+use rustc::util::common::slice_pat;\n \n use rustc_const_eval::lookup_const_by_id;\n \n@@ -197,10 +198,10 @@ fn build_struct<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n-        struct_type: match &*variant.fields {\n-            [] => doctree::Unit,\n-            [_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n-            [..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,\n+        struct_type: match slice_pat(&&*variant.fields) {\n+            &[] => doctree::Unit,\n+            &[_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n+            &[..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,\n             _ => doctree::Plain,\n         },\n         generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),"}, {"sha": "760e84622cfe5d880f3a0375c397b26ab0b3eb20", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2100cc7b5b64b058d712a380ebf9630e4579928/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b2100cc7b5b64b058d712a380ebf9630e4579928", "patch": "@@ -20,6 +20,7 @@ use std::iter::repeat;\n \n use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::util::common::slice_pat;\n use syntax::abi::Abi;\n use rustc::hir;\n \n@@ -474,9 +475,9 @@ impl fmt::Display for clean::Type {\n                        decl.decl)\n             }\n             clean::Tuple(ref typs) => {\n-                match &**typs {\n-                    [] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n-                    [ref one] => {\n+                match slice_pat(&&**typs) {\n+                    &[] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n+                    &[ref one] => {\n                         primitive_link(f, clean::PrimitiveTuple, \"(\")?;\n                         write!(f, \"{},\", one)?;\n                         primitive_link(f, clean::PrimitiveTuple, \")\")"}]}