{"sha": "10935de0cdb34b9405c71a813cc89eb1cb44fd01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTM1ZGUwY2RiMzRiOTQwNWM3MWE4MTNjYzg5ZWIxY2I0NGZkMDE=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-09-06T00:39:51Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-09-06T11:31:05Z"}, "message": "rustc: Refactor middle::trans::inline", "tree": {"sha": "0a940c3fb73ffdae395d3a481ff07f0752f1d04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a940c3fb73ffdae395d3a481ff07f0752f1d04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10935de0cdb34b9405c71a813cc89eb1cb44fd01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10935de0cdb34b9405c71a813cc89eb1cb44fd01", "html_url": "https://github.com/rust-lang/rust/commit/10935de0cdb34b9405c71a813cc89eb1cb44fd01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10935de0cdb34b9405c71a813cc89eb1cb44fd01/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "html_url": "https://github.com/rust-lang/rust/commit/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "d0061ab0bf3239b6809057c99463a0ee626517aa", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=10935de0cdb34b9405c71a813cc89eb1cb44fd01", "patch": "@@ -508,11 +508,7 @@ pub fn get_res_dtor(ccx: &CrateContext,\n                     substs: &subst::Substs)\n                  -> ValueRef {\n     let _icx = push_ctxt(\"trans_res_dtor\");\n-    let did = if did.krate != ast::LOCAL_CRATE {\n-        inline::maybe_instantiate_inline(ccx, did)\n-    } else {\n-        did\n-    };\n+    let did = inline::maybe_instantiate_inline(ccx, did);\n \n     if !substs.types.is_empty() {\n         assert_eq!(did.krate, ast::LOCAL_CRATE);"}, {"sha": "8909527f0c499a4767b850780fa2c2b7bedea2b5", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=10935de0cdb34b9405c71a813cc89eb1cb44fd01", "patch": "@@ -141,11 +141,7 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n         let expr_ty = node_id_type(bcx, ref_expr.id);\n         match def {\n             def::DefFn(did, _) if {\n-                let def_id = if did.krate != ast::LOCAL_CRATE {\n-                    inline::maybe_instantiate_inline(bcx.ccx(), did)\n-                } else {\n-                    did\n-                };\n+                let def_id = inline::maybe_instantiate_inline(bcx.ccx(), did);\n                 match bcx.tcx().map.find(def_id.node) {\n                     Some(ast_map::NodeStructCtor(_)) => true,\n                     _ => false\n@@ -162,11 +158,7 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n                 _ => false\n             } => {\n                 let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n-                let def_id = if did.krate != ast::LOCAL_CRATE {\n-                    inline::maybe_instantiate_inline(bcx.ccx(), did)\n-                } else {\n-                    did\n-                };\n+                let def_id = inline::maybe_instantiate_inline(bcx.ccx(), did);\n                 Callee { bcx: bcx, data: Intrinsic(def_id.node, substs) }\n             }\n             def::DefFn(did, _) |\n@@ -524,13 +516,7 @@ pub fn trans_fn_ref_with_vtables(\n \n     // Check whether this fn has an inlined copy and, if so, redirect\n     // def_id to the local id of the inlined copy.\n-    let def_id = {\n-        if def_id.krate != ast::LOCAL_CRATE {\n-            inline::maybe_instantiate_inline(ccx, def_id)\n-        } else {\n-            def_id\n-        }\n-    };\n+    let def_id = inline::maybe_instantiate_inline(ccx, def_id);\n \n     // We must monomorphise if the fn has type parameters, is a default method,\n     // or is a named tuple constructor."}, {"sha": "303594cba8f21f65f947a429fa1fc2f71b236de9", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=10935de0cdb34b9405c71a813cc89eb1cb44fd01", "patch": "@@ -830,19 +830,6 @@ fn trans_def<'a>(bcx: &'a Block<'a>,\n             //     an external global, and return a pointer to that.\n             let const_ty = expr_ty(bcx, ref_expr);\n \n-            fn get_did(ccx: &CrateContext, did: ast::DefId)\n-                       -> ast::DefId {\n-                if did.krate != ast::LOCAL_CRATE {\n-                    // Case 2 or 3.  Which one we're in is determined by\n-                    // whether the DefId produced by `maybe_instantiate_inline`\n-                    // is in the LOCAL_CRATE or not.\n-                    inline::maybe_instantiate_inline(ccx, did)\n-                } else {\n-                    // Case 1.\n-                    did\n-                }\n-            }\n-\n             fn get_val<'a>(bcx: &'a Block<'a>, did: ast::DefId, const_ty: ty::t)\n                        -> ValueRef {\n                 // For external constants, we don't inline.\n@@ -881,8 +868,9 @@ fn trans_def<'a>(bcx: &'a Block<'a>,\n                     }\n                 }\n             }\n-\n-            let did = get_did(bcx.ccx(), did);\n+            // The DefId produced by `maybe_instantiate_inline`\n+            // may be in the LOCAL_CRATE or not.\n+            let did = inline::maybe_instantiate_inline(bcx.ccx(), did);\n             let val = get_val(bcx, did, const_ty);\n             DatumBlock::new(bcx, Datum::new(val, const_ty, LvalueExpr))\n         }"}, {"sha": "af271d039bde91cb542e9fd2698f1bd6e3d227fd", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10935de0cdb34b9405c71a813cc89eb1cb44fd01/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=10935de0cdb34b9405c71a813cc89eb1cb44fd01", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -19,18 +19,18 @@ use syntax::ast;\n use syntax::ast_util::{local_def, PostExpansionMethod};\n use syntax::ast_util;\n \n-pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n-    -> ast::DefId {\n+fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n+    -> Option<ast::DefId> {\n     let _icx = push_ctxt(\"maybe_instantiate_inline\");\n     match ccx.external().borrow().find(&fn_id) {\n         Some(&Some(node_id)) => {\n             // Already inline\n             debug!(\"maybe_instantiate_inline({}): already inline as node id {}\",\n                    ty::item_path_str(ccx.tcx(), fn_id), node_id);\n-            return local_def(node_id);\n+            return Some(local_def(node_id));\n         }\n         Some(&None) => {\n-            return fn_id; // Not inlinable\n+            return None; // Not inlinable\n         }\n         None => {\n             // Not seen yet\n@@ -41,10 +41,11 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n         csearch::maybe_get_item_ast(\n             ccx.tcx(), fn_id,\n             |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n-    return match csearch_result {\n+\n+    let inline_def = match csearch_result {\n         csearch::not_found => {\n             ccx.external().borrow_mut().insert(fn_id, None);\n-            fn_id\n+            return None;\n         }\n         csearch::found(ast::IIItem(item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n@@ -182,4 +183,19 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             }\n         }\n     };\n+\n+    return Some(inline_def);\n+}\n+\n+pub fn get_local_instance(ccx: &CrateContext, fn_id: ast::DefId)\n+    -> Option<ast::DefId> {\n+    if fn_id.krate == ast::LOCAL_CRATE {\n+        Some(fn_id)\n+    } else {\n+        instantiate_inline(ccx, fn_id)\n+    }\n+}\n+\n+pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId) -> ast::DefId {\n+    get_local_instance(ccx, fn_id).unwrap_or(fn_id)\n }"}]}