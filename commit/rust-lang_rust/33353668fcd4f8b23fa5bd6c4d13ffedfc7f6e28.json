{"sha": "33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzUzNjY4ZmNkNGY4YjIzZmE1YmQ2YzRkMTNmZmVkZmM3ZjZlMjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-11-17T21:37:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-11-17T21:37:44Z"}, "message": "std: Use join() in Process::wait_with_output\n\nPreviously this function used channels but this isn't necessary any more now\nthat threads have return values. This also has the added bonus of appropriately\nwaiting for the thread to exit to ensure that the function doesn't still have\nrunning threads once it returns.", "tree": {"sha": "cfda67c3c3ee6419aaf91a70d574dbe9cac1adf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfda67c3c3ee6419aaf91a70d574dbe9cac1adf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28", "html_url": "https://github.com/rust-lang/rust/commit/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73cfcc60e1d776c748269bf1fe411a087cb26076", "url": "https://api.github.com/repos/rust-lang/rust/commits/73cfcc60e1d776c748269bf1fe411a087cb26076", "html_url": "https://github.com/rust-lang/rust/commit/73cfcc60e1d776c748269bf1fe411a087cb26076"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "d26641dbfcf82265644cf748dee126c7f3216fef", "filename": "src/libstd/process.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=33353668fcd4f8b23fa5bd6c4d13ffedfc7f6e28", "patch": "@@ -20,11 +20,10 @@ use ffi::OsStr;\n use fmt;\n use io::{self, Error, ErrorKind};\n use path;\n-use sync::mpsc::{channel, Receiver};\n use sys::pipe::{self, AnonPipe};\n use sys::process as imp;\n use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n-use thread;\n+use thread::{self, JoinHandle};\n \n /// Representation of a running or exited child process.\n ///\n@@ -542,29 +541,24 @@ impl Child {\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn wait_with_output(mut self) -> io::Result<Output> {\n         drop(self.stdin.take());\n-        fn read<T: Read + Send + 'static>(stream: Option<T>) -> Receiver<io::Result<Vec<u8>>> {\n-            let (tx, rx) = channel();\n-            match stream {\n-                Some(stream) => {\n-                    thread::spawn(move || {\n-                        let mut stream = stream;\n-                        let mut ret = Vec::new();\n-                        let res = stream.read_to_end(&mut ret);\n-                        tx.send(res.map(|_| ret)).unwrap();\n-                    });\n-                }\n-                None => tx.send(Ok(Vec::new())).unwrap()\n-            }\n-            rx\n+        fn read<R>(mut input: R) -> JoinHandle<io::Result<Vec<u8>>>\n+            where R: Read + Send + 'static\n+        {\n+            thread::spawn(move || {\n+                let mut ret = Vec::new();\n+                input.read_to_end(&mut ret).map(|_| ret)\n+            })\n         }\n-        let stdout = read(self.stdout.take());\n-        let stderr = read(self.stderr.take());\n+        let stdout = self.stdout.take().map(read);\n+        let stderr = self.stderr.take().map(read);\n         let status = try!(self.wait());\n+        let stdout = stdout.and_then(|t| t.join().unwrap().ok());\n+        let stderr = stderr.and_then(|t| t.join().unwrap().ok());\n \n         Ok(Output {\n             status: status,\n-            stdout: stdout.recv().unwrap().unwrap_or(Vec::new()),\n-            stderr:  stderr.recv().unwrap().unwrap_or(Vec::new()),\n+            stdout: stdout.unwrap_or(Vec::new()),\n+            stderr: stderr.unwrap_or(Vec::new()),\n         })\n     }\n }"}]}