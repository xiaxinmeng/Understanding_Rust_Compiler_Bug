{"sha": "4f6f7e5d1dc791e77184641d3230a9b857b34e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmY3ZTVkMWRjNzkxZTc3MTg0NjQxZDMyMzBhOWI4NTdiMzRlNDc=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-19T08:20:55Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-20T07:40:28Z"}, "message": "Remove unsupported test features from libtest.\n\nRemoves test-shard, ratchet-metrics, boxplot, stats and save-metrics\nfrom Config in libtest/lib.rs.", "tree": {"sha": "cb7447d355f450083e54995f18b038f98ebe5e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7447d355f450083e54995f18b038f98ebe5e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6f7e5d1dc791e77184641d3230a9b857b34e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f7e5d1dc791e77184641d3230a9b857b34e47", "html_url": "https://github.com/rust-lang/rust/commit/4f6f7e5d1dc791e77184641d3230a9b857b34e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f7e5d1dc791e77184641d3230a9b857b34e47/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4178597271bfb6cb5e01af8d62b30f3c7793d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4178597271bfb6cb5e01af8d62b30f3c7793d6", "html_url": "https://github.com/rust-lang/rust/commit/ec4178597271bfb6cb5e01af8d62b30f3c7793d6"}], "stats": {"total": 123, "additions": 6, "deletions": 117}, "files": [{"sha": "1a9a1c08b07812c991d93734dca48984379ac9f1", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f7e5d1dc791e77184641d3230a9b857b34e47/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f7e5d1dc791e77184641d3230a9b857b34e47/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=4f6f7e5d1dc791e77184641d3230a9b857b34e47", "patch": "@@ -268,15 +268,8 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         run_benchmarks: true,\n-        ratchet_metrics: None,\n-        ratchet_noise_percent: None,\n-        save_metrics: None,\n-        test_shard: None,\n         nocapture: false,\n         color: test::AutoColor,\n-        show_boxplot: false,\n-        boxplot_width: 50,\n-        show_all_stats: false,\n     }\n }\n "}, {"sha": "be790245deb61910f9f60c83b7d0809975f9c361", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 110, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f7e5d1dc791e77184641d3230a9b857b34e47/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f7e5d1dc791e77184641d3230a9b857b34e47/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4f6f7e5d1dc791e77184641d3230a9b857b34e47", "patch": "@@ -300,16 +300,9 @@ pub struct TestOpts {\n     pub run_ignored: bool,\n     pub run_tests: bool,\n     pub run_benchmarks: bool,\n-    pub ratchet_metrics: Option<Path>,\n-    pub ratchet_noise_percent: Option<f64>,\n-    pub save_metrics: Option<Path>,\n-    pub test_shard: Option<(uint,uint)>,\n     pub logfile: Option<Path>,\n     pub nocapture: bool,\n     pub color: ColorConfig,\n-    pub show_boxplot: bool,\n-    pub boxplot_width: uint,\n-    pub show_all_stats: bool,\n }\n \n impl TestOpts {\n@@ -320,16 +313,9 @@ impl TestOpts {\n             run_ignored: false,\n             run_tests: false,\n             run_benchmarks: false,\n-            ratchet_metrics: None,\n-            ratchet_noise_percent: None,\n-            save_metrics: None,\n-            test_shard: None,\n             logfile: None,\n             nocapture: false,\n             color: AutoColor,\n-            show_boxplot: false,\n-            boxplot_width: 50,\n-            show_all_stats: false,\n         }\n     }\n }\n@@ -342,28 +328,14 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n       getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n       getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n-      getopts::optopt(\"\", \"save-metrics\", \"Location to save bench metrics\",\n-                     \"PATH\"),\n-      getopts::optopt(\"\", \"ratchet-metrics\",\n-                     \"Location to load and save metrics from. The metrics \\\n-                      loaded are cause benchmarks to fail if they run too \\\n-                      slowly\", \"PATH\"),\n-      getopts::optopt(\"\", \"ratchet-noise-percent\",\n-                     \"Tests within N% of the recorded metrics will be \\\n-                      considered as passing\", \"PERCENTAGE\"),\n       getopts::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n                           of stdout\", \"PATH\"),\n-      getopts::optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\",\n-                     \"A.B\"),\n       getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n                                          task, allow printing directly\"),\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\"),\n-      getopts::optflag(\"\", \"boxplot\", \"Display a boxplot of the benchmark statistics\"),\n-      getopts::optopt(\"\", \"boxplot-width\", \"Set the boxplot width (default 50)\", \"WIDTH\"),\n-      getopts::optflag(\"\", \"stats\", \"Display the benchmark min, max, and quartiles\"))\n+            never  = never colorize output;\", \"auto|always|never\"))\n }\n \n fn usage(binary: &str) {\n@@ -428,19 +400,6 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let run_tests = ! run_benchmarks ||\n         matches.opt_present(\"test\");\n \n-    let ratchet_metrics = matches.opt_str(\"ratchet-metrics\");\n-    let ratchet_metrics = ratchet_metrics.map(|s| Path::new(s));\n-\n-    let ratchet_noise_percent = matches.opt_str(\"ratchet-noise-percent\");\n-    let ratchet_noise_percent =\n-        ratchet_noise_percent.map(|s| s.as_slice().parse::<f64>().unwrap());\n-\n-    let save_metrics = matches.opt_str(\"save-metrics\");\n-    let save_metrics = save_metrics.map(|s| Path::new(s));\n-\n-    let test_shard = matches.opt_str(\"test-shard\");\n-    let test_shard = opt_shard(test_shard);\n-\n     let mut nocapture = matches.opt_present(\"nocapture\");\n     if !nocapture {\n         nocapture = os::getenv(\"RUST_TEST_NOCAPTURE\").is_some();\n@@ -456,63 +415,19 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                                             v))),\n     };\n \n-    let show_boxplot = matches.opt_present(\"boxplot\");\n-    let boxplot_width = match matches.opt_str(\"boxplot-width\") {\n-        Some(width) => {\n-            match FromStr::from_str(width.as_slice()) {\n-                Some(width) => width,\n-                None => {\n-                    return Some(Err(format!(\"argument for --boxplot-width must be a uint\")));\n-                }\n-            }\n-        }\n-        None => 50,\n-    };\n-\n-    let show_all_stats = matches.opt_present(\"stats\");\n-\n     let test_opts = TestOpts {\n         filter: filter,\n         run_ignored: run_ignored,\n         run_tests: run_tests,\n         run_benchmarks: run_benchmarks,\n-        ratchet_metrics: ratchet_metrics,\n-        ratchet_noise_percent: ratchet_noise_percent,\n-        save_metrics: save_metrics,\n-        test_shard: test_shard,\n         logfile: logfile,\n         nocapture: nocapture,\n         color: color,\n-        show_boxplot: show_boxplot,\n-        boxplot_width: boxplot_width,\n-        show_all_stats: show_all_stats,\n     };\n \n     Some(Ok(test_opts))\n }\n \n-pub fn opt_shard(maybestr: Option<String>) -> Option<(uint,uint)> {\n-    match maybestr {\n-        None => None,\n-        Some(s) => {\n-            let mut it = s.split('.');\n-            match (it.next().and_then(|s| s.parse::<uint>()),\n-                   it.next().and_then(|s| s.parse::<uint>()),\n-                   it.next()) {\n-                (Some(a), Some(b), None) => {\n-                    if a <= 0 || a > b {\n-                        panic!(\"tried to run shard {a}.{b}, but {a} is out of bounds \\\n-                              (should be between 1 and {b}\", a=a, b=b)\n-                    }\n-                    Some((a, b))\n-                }\n-                _ => None,\n-            }\n-        }\n-    }\n-}\n-\n-\n #[derive(Clone, PartialEq)]\n pub struct BenchSamples {\n     ns_iter_summ: stats::Summary<f64>,\n@@ -568,9 +483,9 @@ impl<T: Writer> ConsoleTestState<T> {\n             out: out,\n             log_out: log_out,\n             use_color: use_color(opts),\n-            show_boxplot: opts.show_boxplot,\n-            boxplot_width: opts.boxplot_width,\n-            show_all_stats: opts.show_all_stats,\n+            show_boxplot: false,\n+            boxplot_width: 50,\n+            show_all_stats: false,\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n@@ -913,15 +828,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> io::IoR\n         None => {}\n     }\n     try!(run_tests(opts, tests, |x| callback(&x, &mut st)));\n-    match opts.save_metrics {\n-        None => (),\n-        Some(ref pth) => {\n-            try!(st.metrics.save(pth));\n-            try!(st.write_plain(format!(\"\\nmetrics saved to: {:?}\",\n-                                          pth.display()).as_slice()));\n-        }\n-    }\n-    return st.write_run_finish(&opts.ratchet_metrics, opts.ratchet_noise_percent);\n+    return st.write_run_finish(&None, None);\n }\n \n #[test]\n@@ -1095,18 +1002,7 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     // Sort the tests alphabetically\n     filtered.sort_by(|t1, t2| t1.desc.name.as_slice().cmp(t2.desc.name.as_slice()));\n \n-    // Shard the remaining tests, if sharding requested.\n-    match opts.test_shard {\n-        None => filtered,\n-        Some((a,b)) => {\n-            filtered.into_iter().enumerate()\n-            // note: using a - 1 so that the valid shards, for example, are\n-            // 1.2 and 2.2 instead of 0.2 and 1.2\n-            .filter(|&(i,_)| i % b == (a - 1))\n-            .map(|(_,t)| t)\n-            .collect()\n-        }\n-    }\n+    filtered\n }\n \n pub fn run_test(opts: &TestOpts,"}]}