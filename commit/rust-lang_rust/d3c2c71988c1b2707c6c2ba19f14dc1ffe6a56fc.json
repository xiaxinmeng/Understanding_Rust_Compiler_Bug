{"sha": "d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzJjNzE5ODhjMWIyNzA3YzZjMmJhMTlmMTRkYzFmZmU2YTU2ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T09:33:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T09:33:33Z"}, "message": "Auto merge of #33284 - nagisa:mir-fix-constfn-pats, r=alexcrichton\n\nFix patterns of the constants that are const methods", "tree": {"sha": "0e78c2bc545ee877a1c2c96bfa5e547ef5740ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e78c2bc545ee877a1c2c96bfa5e547ef5740ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "html_url": "https://github.com/rust-lang/rust/commit/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700d3e23748c10c4203491856186333dd2952ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/700d3e23748c10c4203491856186333dd2952ebf", "html_url": "https://github.com/rust-lang/rust/commit/700d3e23748c10c4203491856186333dd2952ebf"}, {"sha": "04f8ba2ece3de0892e826db86f491f044e06d24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f8ba2ece3de0892e826db86f491f044e06d24c", "html_url": "https://github.com/rust-lang/rust/commit/04f8ba2ece3de0892e826db86f491f044e06d24c"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "fb1a3bbe3b4fbfeab57972add09e3dd9b260d549", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "patch": "@@ -10,6 +10,7 @@\n \n #![doc(hidden)]\n \n+#[cfg(stage0)]\n macro_rules! int_module { ($T:ty, $bits:expr) => (\n \n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n@@ -25,3 +26,15 @@ pub const MIN: $T = (-1 as $T) << ($bits - 1);\n pub const MAX: $T = !MIN;\n \n ) }\n+\n+#[cfg(not(stage0))]\n+macro_rules! int_module { ($T:ident, $bits:expr) => (\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n+pub const MIN: $T = $T::min_value();\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n+pub const MAX: $T = $T::max_value();\n+\n+) }"}, {"sha": "af6b1b89f96d571fa9e2971f62e0200f9d5d1d31", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "patch": "@@ -10,6 +10,7 @@\n \n #![doc(hidden)]\n \n+#[cfg(stage0)]\n macro_rules! uint_module { ($T:ty, $bits:expr) => (\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -20,3 +21,15 @@ pub const MIN: $T = 0 as $T;\n pub const MAX: $T = !0 as $T;\n \n ) }\n+\n+#[cfg(not(stage0))]\n+macro_rules! uint_module { ($T:ident, $bits:expr) => (\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n+pub const MIN: $T = $T::min_value();\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n+pub const MAX: $T = $T::max_value();\n+\n+) }"}, {"sha": "132caa010d42f526d3b8fc94d74aafe75f13693c", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "patch": "@@ -281,7 +281,7 @@ pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, pat_id: ast::NodeId, spa\n             let path = match def.full_def() {\n                 Def::Struct(def_id) => def_to_path(tcx, def_id),\n                 Def::Variant(_, variant_did) => def_to_path(tcx, variant_did),\n-                Def::Fn(..) => return Ok(P(hir::Pat {\n+                Def::Fn(..) | Def::Method(..) => return Ok(P(hir::Pat {\n                     id: expr.id,\n                     node: PatKind::Lit(P(expr.clone())),\n                     span: span,"}, {"sha": "3b27987f190cdf5c2a808e0ef02de11f981ee6a4", "filename": "src/test/run-pass/const-meth-pattern.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs?ref=d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(const_fn)]\n+\n+struct A;\n+\n+impl A {\n+    const fn banana() -> bool {\n+        true\n+    }\n+}\n+\n+const ABANANA: bool = A::banana();\n+\n+fn main() {\n+    match true {\n+        ABANANA => {},\n+        _ => panic!(\"what?\")\n+    }\n+}"}]}