{"sha": "504d27cb0c705a51f437e0e02a19f2e7512fa8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNGQyN2NiMGM3MDVhNTFmNDM3ZTBlMDJhMTlmMmU3NTEyZmE4YWI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-25T16:24:05Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:55:17Z"}, "message": "Make super_traits_of return an iterator", "tree": {"sha": "9ebddfb27364b2ebcc7259d33e7c3f3fe4dbab03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ebddfb27364b2ebcc7259d33e7c3f3fe4dbab03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/504d27cb0c705a51f437e0e02a19f2e7512fa8ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BE1YACgkQgTGiTgx5\n76/HVQ//UCMaVKt0hkfZbO6OVoEMS3Nbxfffh+O3n3LCXKfavQSLMfEtzFSUGzRF\nTMgv3YUOdLMUZLckZg6jlaXwh2pPnuobNhazVTrDIM0G8ulfH7gjDWhGkeyc8cUn\n8QG3Z4f4Yxh4xpPV8kWP5q8T3WzU81jYhqZuvQPQFaiK9LLG+RficzATPJunsutr\n7dAP4DNjx/loYAlE/iO4IzKu1cS8UFJxDiVsSFL8k4rjzzgEFJ+7HrL/k9w+aJIt\nAXMi8D1U4xRoKvwSoX73a217sY1kRMmm7omvJEUvHp6+Z4K++CAFOSw7tavfiXgj\nSSrlJNSCeC7jM+s69pA9hBWxX8UWuv09u2KeHgpQjxPrRv6bhaLFd6yRYM+w6stx\n1a8e13G2/rcKcLI317ysRBCXwatwrPceTlwnok4GFUtK5n4TToY5QuwGNaPI7FMt\nuGO9kGNsStmvxR36OYJ5nnHDn5IyF1dC//qBYJq300vCR7m10AhMN+sxBRwWKcGU\nNLk3MHTsmpv6SqZkimkBcm6E5mNHEkeawJPuxPKWCy5zlmRSOTSoEhywTKahcmwA\nYhoYfNqlwlhDfgbhdE3hP1z0j68F9AGySwg86h3svs2tc7kSEEh2R7++8qC/9wbN\nY9K78HA1UwUq86uN5PLxEp/DDbvF5SBNetTNmH/74C2K5MGMERk=\n=Sfuz\n-----END PGP SIGNATURE-----", "payload": "tree 9ebddfb27364b2ebcc7259d33e7c3f3fe4dbab03\nparent 35bf466a2764abde4c78389c5fc91ca9c4e9ab28\nauthor Santiago Pastorino <spastorino@gmail.com> 1606321445 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606488917 -0300\n\nMake super_traits_of return an iterator\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/504d27cb0c705a51f437e0e02a19f2e7512fa8ab", "html_url": "https://github.com/rust-lang/rust/commit/504d27cb0c705a51f437e0e02a19f2e7512fa8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/504d27cb0c705a51f437e0e02a19f2e7512fa8ab/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "url": "https://api.github.com/repos/rust-lang/rust/commits/35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "html_url": "https://github.com/rust-lang/rust/commit/35bf466a2764abde4c78389c5fc91ca9c4e9ab28"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "744aa39b96c23211eb09564199297c3ef0d11400", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/504d27cb0c705a51f437e0e02a19f2e7512fa8ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504d27cb0c705a51f437e0e02a19f2e7512fa8ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=504d27cb0c705a51f437e0e02a19f2e7512fa8ab", "patch": "@@ -2088,34 +2088,37 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`\n     /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.\n     pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n-        self.super_traits_of(trait_def_id).iter().any(|trait_did| {\n-            self.associated_items(*trait_did)\n-                .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, *trait_did)\n+        self.super_traits_of(trait_def_id).any(|trait_did| {\n+            self.associated_items(trait_did)\n+                .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)\n                 .is_some()\n         })\n     }\n \n     /// Computes the def-ids of the transitive super-traits of `trait_def_id`. This (intentionally)\n     /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n     /// to identify which traits may define a given associated type to help avoid cycle errors.\n-    /// Returns `Lrc<FxHashSet<DefId>>` so that cloning is cheaper.\n-    fn super_traits_of(self, trait_def_id: DefId) -> Lrc<FxHashSet<DefId>> {\n+    /// Returns a `DefId` iterator.\n+    fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let mut set = FxHashSet::default();\n         let mut stack = vec![trait_def_id];\n-        while let Some(trait_did) = stack.pop() {\n-            if !set.insert(trait_did) {\n-                continue;\n-            }\n \n+        set.insert(trait_def_id);\n+\n+        iter::from_fn(move || -> Option<DefId> {\n+            let trait_did = stack.pop()?;\n             let generic_predicates = self.super_predicates_of(trait_did);\n+\n             for (predicate, _) in generic_predicates.predicates {\n                 if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n-                    stack.push(data.def_id());\n+                    if set.insert(data.def_id()) {\n+                        stack.push(data.def_id());\n+                    }\n                 }\n             }\n-        }\n \n-        Lrc::new(set)\n+            Some(trait_did)\n+        })\n     }\n \n     /// Given a closure signature, returns an equivalent fn signature. Detuples"}]}