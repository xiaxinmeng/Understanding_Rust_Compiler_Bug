{"sha": "064095742980d4c825391f643e437520599f51d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDA5NTc0Mjk4MGQ0YzgyNTM5MWY2NDNlNDM3NTIwNTk5ZjUxZDg=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-12T15:45:07Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-12T15:58:06Z"}, "message": "Improve autocompletion by looking on the type and name, change implementation, include sort in Completions struct\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "339ac072c6d7c76451804db1f85bc673b9798137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339ac072c6d7c76451804db1f85bc673b9798137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/064095742980d4c825391f643e437520599f51d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/064095742980d4c825391f643e437520599f51d8", "html_url": "https://github.com/rust-lang/rust/commit/064095742980d4c825391f643e437520599f51d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/064095742980d4c825391f643e437520599f51d8/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93bfc2d05d36a47dc05a1799210327473d702dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/93bfc2d05d36a47dc05a1799210327473d702dbc", "html_url": "https://github.com/rust-lang/rust/commit/93bfc2d05d36a47dc05a1799210327473d702dbc"}], "stats": {"total": 124, "additions": 97, "deletions": 27}, "files": [{"sha": "3be8b190325e8cfbd8737480ff91c6014105e2d6", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=064095742980d4c825391f643e437520599f51d8", "patch": "@@ -94,5 +94,8 @@ pub(crate) fn completions(\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n \n+    // Reorder completion items if there is a sort_option\n+    acc.sort();\n+\n     Some(acc)\n }"}, {"sha": "cb899d8ff3cf17a4ecda2e0fcd8f8b910256f166", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=064095742980d4c825391f643e437520599f51d8", "patch": "@@ -1,14 +1,23 @@\n //! FIXME: write short doc here\n \n-use hir::{HasVisibility, HirDisplay, Type};\n+use hir::{\n+    HasVisibility,\n+    // HirDisplay,\n+    Type,\n+};\n \n use crate::completion::completion_item::CompletionKind;\n use crate::{\n-    completion::{completion_context::CompletionContext, completion_item::Completions},\n+    call_info::call_info,\n+    completion::{\n+        completion_context::CompletionContext,\n+        completion_item::{Completions, SortOption},\n+    },\n+    // CallInfo,\n     CompletionItem,\n };\n use rustc_hash::FxHashSet;\n-use std::cmp::Ordering;\n+// use std::cmp::Ordering;\n \n /// Complete dot accesses, i.e. fields or methods (and .await syntax).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -38,30 +47,40 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n \n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     for receiver in receiver.autoderef(ctx.db) {\n-        let mut fields = receiver.fields(ctx.db);\n-        if let Some(call_info) = &ctx.call_info {\n-            if let Some(active_parameter_type) = call_info.active_parameter_type() {\n-                let active_parameter_name = call_info.active_parameter_name().unwrap();\n-                fields.sort_by(|a, b| {\n-                    // For the same type\n-                    if active_parameter_type == a.1.display(ctx.db).to_string() {\n-                        // If same type + same name then go top position\n-                        if active_parameter_name == a.0.name(ctx.db).to_string() {\n-                            Ordering::Less\n-                        } else {\n-                            if active_parameter_type == b.1.display(ctx.db).to_string() {\n-                                Ordering::Equal\n-                            } else {\n-                                Ordering::Less\n-                            }\n-                        }\n-                    } else {\n-                        Ordering::Greater\n-                    }\n-                });\n-            }\n+        let fields = receiver.fields(ctx.db);\n+\n+        // If we use this implementation we can delete call_info in the CompletionContext\n+        if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n+            acc.with_sort_option(SortOption::CallFn(call_info));\n         }\n \n+        // // For Call Fn\n+        // if let Some(call_info) = &ctx.call_info {\n+        //     if let Some(active_parameter_type) = call_info.active_parameter_type() {\n+        //         let active_parameter_name = call_info.active_parameter_name().unwrap();\n+        //         fields.sort_by(|a, b| {\n+        //             // For the same type\n+        //             if active_parameter_type == a.1.display(ctx.db).to_string() {\n+        //                 // If same type + same name then go top position\n+        //                 if active_parameter_name == a.0.name(ctx.db).to_string() {\n+        //                     Ordering::Less\n+        //                 } else {\n+        //                     if active_parameter_type == b.1.display(ctx.db).to_string() {\n+        //                         Ordering::Equal\n+        //                     } else {\n+        //                         Ordering::Less\n+        //                     }\n+        //                 }\n+        //             } else {\n+        //                 Ordering::Greater\n+        //             }\n+        //         });\n+        //     }\n+        // }\n+\n+        // For Lit struct fields\n+        // ---\n+\n         for (field, ty) in fields {\n             if ctx.scope().module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the"}, {"sha": "f8e6e53f17a21328f9f5624a5162b28d05f33a56", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064095742980d4c825391f643e437520599f51d8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=064095742980d4c825391f643e437520599f51d8", "patch": "@@ -1,7 +1,8 @@\n //! FIXME: write short doc here\n \n-use std::fmt;\n+use std::{cmp::Ordering, fmt};\n \n+use crate::CallInfo;\n use hir::Documentation;\n use ra_syntax::TextRange;\n use ra_text_edit::TextEdit;\n@@ -297,10 +298,17 @@ impl<'a> Into<CompletionItem> for Builder {\n     }\n }\n \n+#[derive(Debug)]\n+pub(crate) enum SortOption {\n+    CallFn(CallInfo),\n+    // LitStruct,\n+}\n+\n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n pub(crate) struct Completions {\n     buf: Vec<CompletionItem>,\n+    sort_option: Option<SortOption>,\n }\n \n impl Completions {\n@@ -314,6 +322,46 @@ impl Completions {\n     {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n+\n+    pub(crate) fn with_sort_option(&mut self, sort_option: SortOption) {\n+        self.sort_option = Some(sort_option);\n+    }\n+\n+    pub(crate) fn sort(&mut self) {\n+        if self.sort_option.is_none() {\n+            return;\n+        }\n+        let sort_option = self.sort_option.as_ref().unwrap();\n+\n+        match sort_option {\n+            SortOption::CallFn(call_info) => {\n+                if let Some(active_parameter_type) = call_info.active_parameter_type() {\n+                    let active_parameter_name = call_info.active_parameter_name().unwrap();\n+\n+                    self.buf.sort_by(|a, b| {\n+                        // For the same type\n+                        if let Some(a_parameter_type) = &a.detail {\n+                            if &active_parameter_type == a_parameter_type {\n+                                // If same type + same name then go top position\n+                                if active_parameter_name != a.label {\n+                                    if let Some(b_parameter_type) = &b.detail {\n+                                        if &active_parameter_type == b_parameter_type {\n+                                            return Ordering::Equal;\n+                                        }\n+                                    }\n+                                }\n+                                Ordering::Less\n+                            } else {\n+                                Ordering::Greater\n+                            }\n+                        } else {\n+                            Ordering::Greater\n+                        }\n+                    });\n+                }\n+            } // _ => unimplemented!(\"sort options not already implemented\"),\n+        }\n+    }\n }\n \n impl Into<Vec<CompletionItem>> for Completions {"}, {"sha": "b3d6ddac9bc8368689a27452c873bc69e1582a7b", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/064095742980d4c825391f643e437520599f51d8/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064095742980d4c825391f643e437520599f51d8/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=064095742980d4c825391f643e437520599f51d8", "patch": "@@ -34,7 +34,7 @@ fn check_todo(path: &Path, text: &str) {\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {\n         panic!(\n-            \"\\nTODO markers should not be committed to the master branch,\\n\\\n+            \"\\nTODO markers or todo! macros should not be committed to the master branch,\\n\\\n              use FIXME instead\\n\\\n              {}\\n\",\n             path.display(),"}]}