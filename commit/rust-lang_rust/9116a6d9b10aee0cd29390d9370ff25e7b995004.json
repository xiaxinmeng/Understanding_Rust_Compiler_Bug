{"sha": "9116a6d9b10aee0cd29390d9370ff25e7b995004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMTZhNmQ5YjEwYWVlMGNkMjkzOTBkOTM3MGZmMjVlN2I5OTUwMDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T05:05:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T05:09:15Z"}, "message": "rustc: Support 'crate_type' attribute\n\n[crate_type = \"lib\"] builds it as a library.\n[crate_type = \"bin\"] builds it as an executable.\n\nExecutable is the default. --lib and --bin switches override.", "tree": {"sha": "21804f82ace82c6ae0d51a94c883d111ec7db229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21804f82ace82c6ae0d51a94c883d111ec7db229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9116a6d9b10aee0cd29390d9370ff25e7b995004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9116a6d9b10aee0cd29390d9370ff25e7b995004", "html_url": "https://github.com/rust-lang/rust/commit/9116a6d9b10aee0cd29390d9370ff25e7b995004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9116a6d9b10aee0cd29390d9370ff25e7b995004/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "html_url": "https://github.com/rust-lang/rust/commit/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "1317a9a328c22731260f813444eaf340f91d41cf", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9116a6d9b10aee0cd29390d9370ff25e7b995004/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9116a6d9b10aee0cd29390d9370ff25e7b995004/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=9116a6d9b10aee0cd29390d9370ff25e7b995004", "patch": "@@ -120,6 +120,80 @@ obj session(targ_cfg: @config,\n     fn filesearch() -> filesearch::filesearch { filesearch }\n     fn building_library() -> bool { opts.crate_type == lib_crate }\n }\n+\n+fn building_library(req_crate_type: crate_type, crate: @ast::crate) -> bool {\n+    alt req_crate_type {\n+      bin_crate. { false }\n+      lib_crate. { true }\n+      unknown_crate. {\n+        alt front::attr::get_meta_item_value_str_by_name(\n+            crate.node.attrs,\n+            \"crate_type\") {\n+          option::some(\"lib\") { true }\n+          _ { false }\n+        }\n+      }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    import syntax::ast_util;\n+\n+    fn make_crate_type_attr(t: str) -> ast::attribute {\n+        ast_util::respan(ast_util::dummy_sp(), {\n+            style: ast::attr_outer,\n+            value: ast_util::respan(ast_util::dummy_sp(),\n+                ast::meta_name_value(\n+                    \"crate_type\",\n+                    ast_util::respan(ast_util::dummy_sp(),\n+                                     ast::lit_str(t))))\n+        })\n+    }\n+\n+    fn make_crate(with_bin: bool, with_lib: bool) -> @ast::crate {\n+        let attrs = [];\n+        if with_bin { attrs += [make_crate_type_attr(\"bin\")]; }\n+        if with_lib { attrs += [make_crate_type_attr(\"lib\")]; }\n+        @ast_util::respan(ast_util::dummy_sp(), {\n+            directives: [],\n+            module: {view_items: [], items: []},\n+            attrs: attrs,\n+            config: []\n+        })\n+    }\n+\n+    #[test]\n+    fn bin_crate_type_attr_results_in_bin_output() {\n+        let crate = make_crate(true, false);\n+        assert !building_library(unknown_crate, crate);\n+    }\n+\n+    #[test]\n+    fn lib_crate_type_attr_results_in_lib_output() {\n+        let crate = make_crate(false, true);\n+        assert building_library(unknown_crate, crate);\n+    }\n+\n+    #[test]\n+    fn bin_option_overrides_lib_crate_type() {\n+        let crate = make_crate(false, true);\n+        assert !building_library(bin_crate, crate);\n+    }\n+\n+    #[test]\n+    fn lib_option_overrides_bin_crate_type() {\n+        let crate = make_crate(true, false);\n+        assert building_library(lib_crate, crate);\n+    }\n+\n+    #[test]\n+    fn bin_crate_type_is_default() {\n+        let crate = make_crate(false, false);\n+        assert !building_library(unknown_crate, crate);\n+    }\n+}\n+\n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil"}]}