{"sha": "d68190706448b5a1ca09be690f360c08a7a4f831", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODE5MDcwNjQ0OGI1YTFjYTA5YmU2OTBmMzYwYzA4YTdhNGY4MzE=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T02:40:57Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:46Z"}, "message": "Removed list::find() in favor of iter().find()", "tree": {"sha": "d7f329b0717ffb7edc9ff02b275db5d8b7d5cc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f329b0717ffb7edc9ff02b275db5d8b7d5cc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68190706448b5a1ca09be690f360c08a7a4f831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68190706448b5a1ca09be690f360c08a7a4f831", "html_url": "https://github.com/rust-lang/rust/commit/d68190706448b5a1ca09be690f360c08a7a4f831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68190706448b5a1ca09be690f360c08a7a4f831/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09a4b882d415ea764f58816b963de0203c4e9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a4b882d415ea764f58816b963de0203c4e9f0", "html_url": "https://github.com/rust-lang/rust/commit/a09a4b882d415ea764f58816b963de0203c4e9f0"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "459b0a78a1eecaeb2ebd32243eeaa4dc868ad930", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d68190706448b5a1ca09be690f360c08a7a4f831/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68190706448b5a1ca09be690f360c08a7a4f831/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=d68190706448b5a1ca09be690f360c08a7a4f831", "patch": "@@ -53,26 +53,6 @@ impl<T> List<T> {\n     }\n }\n \n-/**\n- * Search for an element that matches a given predicate\n- *\n- * Apply function `f` to each element of `list`, starting from the first.\n- * When function `f` returns true then an option containing the element\n- * is returned. If `f` matches no elements then none is returned.\n- */\n-pub fn find<T:Clone>(list: @List<T>, f: |&T| -> bool) -> Option<T> {\n-    let mut list = list;\n-    loop {\n-        list = match *list {\n-          Cons(ref head, tail) => {\n-            if f(head) { return Some((*head).clone()); }\n-            tail\n-          }\n-          Nil => return None\n-        }\n-    };\n-}\n-\n /**\n  * Returns true if a list contains an element that matches a given predicate\n  *\n@@ -196,8 +176,6 @@ mod tests {\n     use list::{List, Nil, head, is_empty, tail};\n     use list;\n \n-    use std::option;\n-\n     #[test]\n     fn test_iter() {\n         let list = List::from_vec([0, 1, 2]);\n@@ -254,18 +232,21 @@ mod tests {\n \n     #[test]\n     fn test_find_success() {\n-        fn match_(i: &int) -> bool { return *i == 2; }\n-        let list = @List::from_vec([0, 1, 2]);\n-        assert_eq!(list::find(list, match_), option::Some(2));\n+        fn match_(i: & &int) -> bool { **i == 2 }\n+\n+        let list = List::from_vec([0, 1, 2]);\n+        assert_eq!(list.iter().find(match_).unwrap(), &2);\n     }\n \n     #[test]\n     fn test_find_fail() {\n-        fn match_(_i: &int) -> bool { return false; }\n-        let list = @List::from_vec([0, 1, 2]);\n-        let empty = @list::Nil::<int>;\n-        assert_eq!(list::find(list, match_), option::None::<int>);\n-        assert_eq!(list::find(empty, match_), option::None::<int>);\n+        fn match_(_i: & &int) -> bool { false }\n+\n+        let empty = Nil::<int>;\n+        assert_eq!(empty.iter().find(match_), None);\n+\n+        let list = List::from_vec([0, 1, 2]);\n+        assert_eq!(list.iter().find(match_), None);\n     }\n \n     #[test]"}]}