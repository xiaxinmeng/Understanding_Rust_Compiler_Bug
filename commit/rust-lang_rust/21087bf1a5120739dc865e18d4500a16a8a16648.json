{"sha": "21087bf1a5120739dc865e18d4500a16a8a16648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMDg3YmYxYTUxMjA3MzlkYzg2NWUxOGQ0NTAwYTE2YThhMTY2NDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-09T07:53:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-09T07:53:34Z"}, "message": "syntax: Intern @strs instead of strs", "tree": {"sha": "ea4817378faffb5d0971946c0b6da560c14d9d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4817378faffb5d0971946c0b6da560c14d9d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21087bf1a5120739dc865e18d4500a16a8a16648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21087bf1a5120739dc865e18d4500a16a8a16648", "html_url": "https://github.com/rust-lang/rust/commit/21087bf1a5120739dc865e18d4500a16a8a16648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21087bf1a5120739dc865e18d4500a16a8a16648/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fea5260c2f62fe24e9d86b461d5580d3f217952", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fea5260c2f62fe24e9d86b461d5580d3f217952", "html_url": "https://github.com/rust-lang/rust/commit/8fea5260c2f62fe24e9d86b461d5580d3f217952"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "be06360191eeb300da8cbea81b1a52093d0d1c9e", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=21087bf1a5120739dc865e18d4500a16a8a16648", "patch": "@@ -134,7 +134,7 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     let filemap = codemap::new_filemap_w_substr\n         (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n-    let itr = @interner::mk(str::hash, str::eq);\n+    let itr = @interner::mk::<@str>({|x|str::hash(*x)}, {|x,y|str::eq(*x, *y)});\n     let rdr = lexer::new_reader(sess.span_diagnostic,\n                                 filemap, itr);\n     ret parser(sess, cfg, rdr, ftype);\n@@ -152,7 +152,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, +path: str,\n     let src = @copy result::unwrap(res);\n     let filemap = codemap::new_filemap(path, src, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n-    let itr = @interner::mk(str::hash, str::eq);\n+       let itr = @interner::mk::<@str>({|x|str::hash(*x)}, {|x,y|str::eq(*x, *y)});\n     let rdr = lexer::new_reader(sess.span_diagnostic, filemap, itr);\n     ret parser(sess, cfg, rdr, ftype);\n }"}, {"sha": "d37d517e7d3a1de4d6efba8ab06bf757c0715119", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=21087bf1a5120739dc865e18d4500a16a8a16648", "patch": "@@ -169,7 +169,10 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n     let src = @str::from_bytes(srdr.read_whole_stream());\n-    let itr = @interner::mk::<str>(str::hash, str::eq);\n+    let itr = @interner::mk::<@str>(\n+        {|x|str::hash(*x)},\n+        {|x,y|str::eq(*x, *y)}\n+    );\n     let rdr = new_reader(span_diagnostic,\n                          codemap::new_filemap(path, src, 0u, 0u), itr);\n     let mut comments: [cmnt] = [];"}, {"sha": "c93680b40a08c5282c08ad2633b6ae0f1ebda5b9", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=21087bf1a5120739dc865e18d4500a16a8a16648", "patch": "@@ -12,7 +12,7 @@ type reader = @{\n     mut curr: char,\n     mut chpos: uint,\n     filemap: codemap::filemap,\n-    interner: @interner::interner<str>\n+    interner: @interner::interner<@str>\n };\n \n impl reader for reader {\n@@ -55,7 +55,7 @@ impl reader for reader {\n \n fn new_reader(span_diagnostic: diagnostic::span_handler,\n               filemap: codemap::filemap,\n-              itr: @interner::interner<str>) -> reader {\n+              itr: @interner::interner<@str>) -> reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,\n               mut col: 0u, mut pos: 0u, mut curr: -1 as char,\n               mut chpos: filemap.start_pos.ch,\n@@ -260,12 +260,12 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n         if c == '3' && n == '2' {\n             rdr.bump();\n             rdr.bump();\n-            ret token::LIT_FLOAT(intern(*rdr.interner, num_str),\n+            ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n                                  ast::ty_f32);\n         } else if c == '6' && n == '4' {\n             rdr.bump();\n             rdr.bump();\n-            ret token::LIT_FLOAT(intern(*rdr.interner, num_str),\n+            ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n                                  ast::ty_f64);\n             /* FIXME: if this is out of range for either a 32-bit or\n             64-bit float, it won't be noticed till the back-end (Issue #2252)\n@@ -275,7 +275,7 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n         }\n     }\n     if is_float {\n-        ret token::LIT_FLOAT(interner::intern(*rdr.interner, num_str),\n+        ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n                              ast::ty_f);\n     } else {\n         if str::len(num_str) == 0u {\n@@ -329,8 +329,8 @@ fn next_token_inner(rdr: reader) -> token::token {\n         let is_mod_name = c == ':' && rdr.next() == ':';\n \n         // FIXME: perform NFKC normalization here. (Issue #2253)\n-        ret token::IDENT(interner::intern::<str>(*rdr.interner,\n-                                                 accum_str), is_mod_name);\n+        ret token::IDENT(interner::intern(*rdr.interner,\n+                                          @accum_str), is_mod_name);\n     }\n     if is_dec_digit(c) {\n         ret scan_number(c, rdr);\n@@ -494,8 +494,8 @@ fn next_token_inner(rdr: reader) -> token::token {\n             }\n         }\n         rdr.bump();\n-        ret token::LIT_STR(interner::intern::<str>(*rdr.interner,\n-                                                   accum_str));\n+        ret token::LIT_STR(interner::intern(*rdr.interner,\n+                                            @accum_str));\n       }\n       '-' {\n         if rdr.next() == '>' {"}, {"sha": "75dae09fd0da83b6f3479c57e88fb92a60a6a310", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=21087bf1a5120739dc865e18d4500a16a8a16648", "patch": "@@ -10,7 +10,7 @@ import lexer::reader;\n import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep, seq_sep_opt, seq_sep_none, token_to_str};\n-import common::{parser_common};\n+import common::*;//{parser_common};\n import dvec::{dvec, extensions};\n \n export file_type;\n@@ -151,7 +151,7 @@ class parser {\n         self.sess.span_diagnostic.span_warn(copy self.span, m)\n     }\n     fn get_str(i: token::str_num) -> str {\n-        interner::get(*self.reader.interner, i)\n+        *interner::get(*self.reader.interner, i)\n     }\n     fn get_id() -> node_id { next_node_id(self.sess) }\n "}, {"sha": "ca11dfa1f9b3aa83bb1425c9900c824ce1d500fe", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21087bf1a5120739dc865e18d4500a16a8a16648/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=21087bf1a5120739dc865e18d4500a16a8a16648", "patch": "@@ -83,7 +83,7 @@ fn binop_to_str(o: binop) -> str {\n     }\n }\n \n-fn to_str(in: interner<str>, t: token) -> str {\n+fn to_str(in: interner<@str>, t: token) -> str {\n     alt t {\n       EQ { ret \"=\"; }\n       LT { ret \"<\"; }\n@@ -133,17 +133,17 @@ fn to_str(in: interner<str>, t: token) -> str {\n         ret uint::to_str(u as uint, 10u) + ast_util::uint_ty_to_str(t);\n       }\n       LIT_FLOAT(s, t) {\n-        ret interner::get::<str>(in, s) +\n+        ret *interner::get(in, s) +\n             ast_util::float_ty_to_str(t);\n       }\n       LIT_STR(s) {\n         ret \"\\\"\"\n-            + str::escape_default(interner::get::<str>(in, s))\n+            + str::escape_default(*interner::get(in, s))\n             + \"\\\"\";\n       }\n       /* Name components */\n       IDENT(s, _) {\n-        ret interner::get::<str>(in, s);\n+        ret *interner::get(in, s);\n       }\n       UNDERSCORE { ret \"_\"; }\n       EOF { ret \"<eof>\"; }"}]}