{"sha": "52ca5ca7b71a041bfb9a08fa143847581fce4843", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyY2E1Y2E3YjcxYTA0MWJmYjlhMDhmYTE0Mzg0NzU4MWZjZTQ4NDM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2020-09-25T00:42:20Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2020-09-28T19:32:46Z"}, "message": "Remove skip_only_host_steps\n\nAnd make tests explicitly list their hosts and targets.", "tree": {"sha": "8e85ce0f1d179da1bf26ad8b170730b601e46dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e85ce0f1d179da1bf26ad8b170730b601e46dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ca5ca7b71a041bfb9a08fa143847581fce4843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ca5ca7b71a041bfb9a08fa143847581fce4843", "html_url": "https://github.com/rust-lang/rust/commit/52ca5ca7b71a041bfb9a08fa143847581fce4843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ca5ca7b71a041bfb9a08fa143847581fce4843/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e715c7f234ba25c25b98894c822de9e7cf87558c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e715c7f234ba25c25b98894c822de9e7cf87558c", "html_url": "https://github.com/rust-lang/rust/commit/e715c7f234ba25c25b98894c822de9e7cf87558c"}], "stats": {"total": 81, "additions": 23, "deletions": 58}, "files": [{"sha": "4beeb9c87c4fde54ab7ca9527bf7fe90db7bd7f0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=52ca5ca7b71a041bfb9a08fa143847581fce4843", "patch": "@@ -172,15 +172,7 @@ impl StepDescription {\n         }\n \n         // Determine the targets participating in this rule.\n-        let targets = if self.only_hosts {\n-            if builder.config.skip_only_host_steps {\n-                return; // don't run anything\n-            } else {\n-                &builder.hosts\n-            }\n-        } else {\n-            &builder.targets\n-        };\n+        let targets = if self.only_hosts { &builder.hosts } else { &builder.targets };\n \n         for target in targets {\n             let run = RunConfig { builder, path: pathset.path(builder), target: *target };"}, {"sha": "a367aa53496677e30c3a4ff1415cfa57bf428b62", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 22, "deletions": 45, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=52ca5ca7b71a041bfb9a08fa143847581fce4843", "patch": "@@ -6,7 +6,6 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     let mut config = Config::parse(&[cmd.to_owned()]);\n     // don't save toolstates\n     config.save_toolstates = None;\n-    config.skip_only_host_steps = false;\n     config.dry_run = true;\n     config.ninja_in_file = false;\n     // try to avoid spurious failures in dist where we create/delete each others file\n@@ -20,16 +19,8 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     t!(fs::create_dir_all(&dir));\n     config.out = dir;\n     config.build = TargetSelection::from_user(\"A\");\n-    config.hosts = vec![config.build]\n-        .into_iter()\n-        .chain(host.iter().map(|s| TargetSelection::from_user(s)))\n-        .collect::<Vec<_>>();\n-    config.targets = config\n-        .hosts\n-        .clone()\n-        .into_iter()\n-        .chain(target.iter().map(|s| TargetSelection::from_user(s)))\n-        .collect::<Vec<_>>();\n+    config.hosts = host.iter().map(|s| TargetSelection::from_user(s)).collect();\n+    config.targets = target.iter().map(|s| TargetSelection::from_user(s)).collect();\n     config\n }\n \n@@ -45,7 +36,7 @@ mod defaults {\n \n     #[test]\n     fn build_default() {\n-        let build = Build::new(configure(\"build\", &[], &[]));\n+        let build = Build::new(configure(\"build\", &[\"A\"], &[\"A\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n \n@@ -73,7 +64,7 @@ mod defaults {\n \n     #[test]\n     fn build_stage_0() {\n-        let config = Config { stage: 0, ..configure(\"build\", &[], &[]) };\n+        let config = Config { stage: 0, ..configure(\"build\", &[\"A\"], &[\"A\"]) };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -95,7 +86,7 @@ mod defaults {\n \n     #[test]\n     fn build_cross_compile() {\n-        let config = Config { stage: 1, ..configure(\"build\", &[\"B\"], &[\"B\"]) };\n+        let config = Config { stage: 1, ..configure(\"build\", &[\"A\", \"B\"], &[\"A\", \"B\"]) };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -143,7 +134,7 @@ mod defaults {\n \n     #[test]\n     fn doc_default() {\n-        let mut config = configure(\"doc\", &[], &[]);\n+        let mut config = configure(\"doc\", &[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n         let build = Build::new(config);\n@@ -182,7 +173,7 @@ mod dist {\n \n     #[test]\n     fn dist_baseline() {\n-        let build = Build::new(configure(&[], &[]));\n+        let build = Build::new(configure(&[\"A\"], &[\"A\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -208,7 +199,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_targets() {\n-        let build = Build::new(configure(&[], &[\"B\"]));\n+        let build = Build::new(configure(&[\"A\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -239,7 +230,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -285,7 +276,7 @@ mod dist {\n     fn dist_only_cross_host() {\n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n-        let mut build = Build::new(configure(&[\"B\"], &[]));\n+        let mut build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         build.config.docs = false;\n         build.config.extended = true;\n         build.hosts = vec![b];\n@@ -307,7 +298,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -343,37 +334,25 @@ mod dist {\n \n     #[test]\n     fn dist_with_empty_host() {\n-        let mut config = configure(&[], &[\"C\"]);\n-        config.skip_only_host_steps = true;\n+        let config = configure(&[], &[\"C\"]);\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n         let a = TargetSelection::from_user(\"A\");\n         let c = TargetSelection::from_user(\"C\");\n \n-        assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n-            &[dist::Docs { host: a }, dist::Docs { host: c },]\n-        );\n-        assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n-            &[dist::Mingw { host: a }, dist::Mingw { host: c },]\n-        );\n-        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: c },]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: c },]);\n         assert_eq!(\n             first(builder.cache.all::<dist::Std>()),\n-            &[\n-                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-            ]\n+            &[dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[]);\n     }\n \n     #[test]\n     fn dist_with_same_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[\"B\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -426,7 +405,7 @@ mod dist {\n \n     #[test]\n     fn build_all() {\n-        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(\n             &Builder::get_step_descriptions(Kind::Build),\n@@ -463,8 +442,7 @@ mod dist {\n \n     #[test]\n     fn build_with_empty_host() {\n-        let mut config = configure(&[], &[\"C\"]);\n-        config.skip_only_host_steps = true;\n+        let config = configure(&[], &[\"C\"]);\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -477,7 +455,6 @@ mod dist {\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n             ]\n         );\n@@ -500,7 +477,7 @@ mod dist {\n \n     #[test]\n     fn test_with_no_doc_stage0() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.stage = 0;\n         config.cmd = Subcommand::Test {\n             paths: vec![\"library/std\".into()],\n@@ -540,7 +517,7 @@ mod dist {\n \n     #[test]\n     fn test_exclude() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.exclude = vec![\"src/tools/tidy\".into()];\n         config.cmd = Subcommand::Test {\n             paths: Vec::new(),\n@@ -567,7 +544,7 @@ mod dist {\n \n     #[test]\n     fn doc_ci() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n         let build = Build::new(config);\n@@ -596,7 +573,7 @@ mod dist {\n     #[test]\n     fn test_docs() {\n         // Behavior of `x.py test` doing various documentation tests.\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.cmd = Subcommand::Test {\n             paths: vec![],\n             test_args: vec![],"}, {"sha": "9c6b88243e245bb0336ab7c58c9183c760c0e8e3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca5ca7b71a041bfb9a08fa143847581fce4843/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=52ca5ca7b71a041bfb9a08fa143847581fce4843", "patch": "@@ -66,8 +66,6 @@ pub struct Config {\n     pub test_compare_mode: bool,\n     pub llvm_libunwind: bool,\n \n-    pub skip_only_host_steps: bool,\n-\n     pub on_fail: Option<String>,\n     pub stage: u32,\n     pub keep_stage: Vec<u32>,\n@@ -593,8 +591,6 @@ impl Config {\n         } else {\n             vec![config.build]\n         };\n-        // If host was explicitly given an empty list, don't run any host-only steps.\n-        config.skip_only_host_steps = config.hosts.is_empty();\n         config.targets = if let Some(arg_target) = flags.target {\n             arg_target\n         } else if let Some(file_target) = build.target {"}]}