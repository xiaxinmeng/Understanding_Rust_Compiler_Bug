{"sha": "67404f7200c13deec255ffe1146e1d2c9d0d3028", "node_id": "C_kwDOAAsO6NoAKDY3NDA0ZjcyMDBjMTNkZWVjMjU1ZmZlMTE0NmUxZDJjOWQwZDMwMjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T12:28:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T12:28:59Z"}, "message": "Auto merge of #98238 - cjgillot:lint-mod, r=oli-obk\n\nMake some lints incremental.\n\nThose lints do not track a state, so don't need to be performed for the full crate at once.", "tree": {"sha": "6501dc9abf39fb2d5708b852dd151ae4475eb2ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6501dc9abf39fb2d5708b852dd151ae4475eb2ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67404f7200c13deec255ffe1146e1d2c9d0d3028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67404f7200c13deec255ffe1146e1d2c9d0d3028", "html_url": "https://github.com/rust-lang/rust/commit/67404f7200c13deec255ffe1146e1d2c9d0d3028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67404f7200c13deec255ffe1146e1d2c9d0d3028/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fc228d0d0a68b5ba565758fab13ed7f863fcea", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fc228d0d0a68b5ba565758fab13ed7f863fcea", "html_url": "https://github.com/rust-lang/rust/commit/15fc228d0d0a68b5ba565758fab13ed7f863fcea"}, {"sha": "1e7ec943a8829f77210fb9290720c2b6cf0688dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7ec943a8829f77210fb9290720c2b6cf0688dd", "html_url": "https://github.com/rust-lang/rust/commit/1e7ec943a8829f77210fb9290720c2b6cf0688dd"}], "stats": {"total": 169, "additions": 116, "deletions": 53}, "files": [{"sha": "8266f1566c423f76a89f40b1c84d4f972f257a36", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -1610,13 +1610,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {\n             hir::ItemKind::Const(_, body_id) => {\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n                 // trigger the query once for all constants since that will already report the errors\n-                // FIXME: Use ensure here\n-                let _ = cx.tcx.const_eval_poly(def_id);\n+                cx.tcx.ensure().const_eval_poly(def_id);\n             }\n             hir::ItemKind::Static(_, _, body_id) => {\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n-                // FIXME: Use ensure here\n-                let _ = cx.tcx.eval_static_initializer(def_id);\n+                cx.tcx.ensure().eval_static_initializer(def_id);\n             }\n             _ => {}\n         }"}, {"sha": "c1255ae5056ac54932d395b4f099ab9222b8e941", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -159,28 +159,16 @@ macro_rules! late_lint_passes {\n         $macro!(\n             $args,\n             [\n-                // FIXME: Look into regression when this is used as a module lint\n-                // May Depend on constants elsewhere\n-                UnusedBrokenConst: UnusedBrokenConst,\n-                // Needs to run after UnusedAttributes as it marks all `feature` attributes as used.\n-                UnstableFeatures: UnstableFeatures,\n                 // Tracks state across modules\n                 UnnameableTestItems: UnnameableTestItems::new(),\n                 // Tracks attributes of parents\n                 MissingDoc: MissingDoc::new(),\n-                // Depends on access levels\n+                // Builds a global list of all impls of `Debug`.\n                 // FIXME: Turn the computation of types which implement Debug into a query\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n-                ArrayIntoIter: ArrayIntoIter::default(),\n+                // Keeps a global list of foreign declarations.\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n-                DropTraitConstraints: DropTraitConstraints,\n-                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                NonPanicFmt: NonPanicFmt,\n-                NoopMethodCall: NoopMethodCall,\n-                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n-                InvalidAtomicOrdering: InvalidAtomicOrdering,\n-                NamedAsmLabels: NamedAsmLabels,\n             ]\n         );\n     };\n@@ -216,6 +204,17 @@ macro_rules! late_lint_mod_passes {\n                 ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n                 InvalidValue: InvalidValue,\n                 DerefNullPtr: DerefNullPtr,\n+                // May Depend on constants elsewhere\n+                UnusedBrokenConst: UnusedBrokenConst,\n+                UnstableFeatures: UnstableFeatures,\n+                ArrayIntoIter: ArrayIntoIter::default(),\n+                DropTraitConstraints: DropTraitConstraints,\n+                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n+                NonPanicFmt: NonPanicFmt,\n+                NoopMethodCall: NoopMethodCall,\n+                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n+                InvalidAtomicOrdering: InvalidAtomicOrdering,\n+                NamedAsmLabels: NamedAsmLabels,\n             ]\n         );\n     };"}, {"sha": "4895b53bb2677ed8fae9ecb3e62d3d277ca0a113", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -3,7 +3,7 @@ use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId}\n use crate::mir;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::InternalSubsts;\n-use crate::ty::{self, query::TyCtxtAt, TyCtxt};\n+use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -171,6 +171,39 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     }\n }\n \n+impl<'tcx> TyCtxtEnsure<'tcx> {\n+    /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n+    /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n+    /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub fn const_eval_poly(self, def_id: DefId) {\n+        // In some situations def_id will have substitutions within scope, but they aren't allowed\n+        // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n+        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n+        // encountered.\n+        let substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        let instance = ty::Instance::new(def_id, substs);\n+        let cid = GlobalId { instance, promoted: None };\n+        let param_env =\n+            self.tcx.param_env(def_id).with_reveal_all_normalized(self.tcx).with_const();\n+        // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n+        // improve caching of queries.\n+        let inputs = self.tcx.erase_regions(param_env.and(cid));\n+        self.eval_to_const_value_raw(inputs)\n+    }\n+\n+    /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    pub fn eval_static_initializer(self, def_id: DefId) {\n+        trace!(\"eval_static_initializer: Need to compute {:?}\", def_id);\n+        assert!(self.tcx.is_static(def_id));\n+        let instance = ty::Instance::mono(self.tcx, def_id);\n+        let gid = GlobalId { instance, promoted: None };\n+        let param_env = ty::ParamEnv::reveal_all().with_const();\n+        trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n+        self.eval_to_allocation_raw(param_env.and(gid))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Destructure a type-level constant ADT or array into its variant index and its field values.\n     /// Panics if the destructuring fails, use `try_destructure_const` for fallible version."}, {"sha": "acb9bda31d104bc23762666717eee84cd6436532", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -1,3 +1,15 @@\n+warning: the type `!` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              this code causes undefined behavior when executed\n+   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: `#[warn(invalid_value)]` on by default\n+   = note: the `!` type has no valid value\n+\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n@@ -19,18 +31,6 @@ LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n-warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:4:14\n-   |\n-LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n-   |\n-   = note: `#[warn(invalid_value)]` on by default\n-   = note: the `!` type has no valid value\n-\n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:23:42\n    |"}, {"sha": "acb9bda31d104bc23762666717eee84cd6436532", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -1,3 +1,15 @@\n+warning: the type `!` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              this code causes undefined behavior when executed\n+   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: `#[warn(invalid_value)]` on by default\n+   = note: the `!` type has no valid value\n+\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n@@ -19,18 +31,6 @@ LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n-warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:4:14\n-   |\n-LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n-   |\n-   = note: `#[warn(invalid_value)]` on by default\n-   = note: the `!` type has no valid value\n-\n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:23:42\n    |"}, {"sha": "104899f490012ba433ae6d65b6997781347f3b1b", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -10,7 +10,15 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | static FOO: () = FOO;\n    |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | / static FOO: () = FOO;\n+LL | |\n+LL | | fn main() {\n+LL | |     FOO\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "104899f490012ba433ae6d65b6997781347f3b1b", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -10,7 +10,15 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | static FOO: () = FOO;\n    |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | / static FOO: () = FOO;\n+LL | |\n+LL | | fn main() {\n+LL | |     FOO\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "8d5113cbfd9f5175551f20c96d9874cc97f808f2", "filename": "src/test/ui/consts/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -16,7 +16,17 @@ note: ...which requires const-evaluating + checking `C`...\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n    = note: ...which again requires const-evaluating + checking `C`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/write-to-static-mut-in-static.rs:1:1\n+   |\n+LL | / pub static mut A: u32 = 0;\n+LL | | pub static mut B: () = unsafe { A = 1; };\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4d2c8c3d9ccd63bc5ddac52f9e7f9201b4874e5", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -10,7 +10,14 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | pub static FOO: u32 = FOO;\n    |                       ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-static-definition.rs:1:1\n+   |\n+LL | / pub static FOO: u32 = FOO;\n+LL | |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to previous error\n "}, {"sha": "855e5dca92a7c1102a0c5e5ee9a0e2cf06870f53", "filename": "src/test/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67404f7200c13deec255ffe1146e1d2c9d0d3028/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=67404f7200c13deec255ffe1146e1d2c9d0d3028", "patch": "@@ -49,12 +49,6 @@ error[E0080]: could not evaluate static initializer\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/uninhabited-static.rs:16:32\n-   |\n-LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n-\n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31\n    |\n@@ -67,6 +61,12 @@ LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n    = note: `#[warn(invalid_value)]` on by default\n    = note: enums with no variants have no valid value\n \n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/uninhabited-static.rs:16:32\n+   |\n+LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+\n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:16:32\n    |"}]}