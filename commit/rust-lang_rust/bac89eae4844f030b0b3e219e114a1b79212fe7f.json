{"sha": "bac89eae4844f030b0b3e219e114a1b79212fe7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYzg5ZWFlNDg0NGYwMzBiMGIzZTIxOWUxMTRhMWI3OTIxMmZlN2Y=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T20:13:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T22:51:44Z"}, "message": "Remove hokey-hashes from metadata indexes.", "tree": {"sha": "884fdf081a9c61a405ec7e790be94abadedddcfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884fdf081a9c61a405ec7e790be94abadedddcfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac89eae4844f030b0b3e219e114a1b79212fe7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac89eae4844f030b0b3e219e114a1b79212fe7f", "html_url": "https://github.com/rust-lang/rust/commit/bac89eae4844f030b0b3e219e114a1b79212fe7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac89eae4844f030b0b3e219e114a1b79212fe7f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ed447221303be59381f91852e0fcd50f60be06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed447221303be59381f91852e0fcd50f60be06", "html_url": "https://github.com/rust-lang/rust/commit/c6ed447221303be59381f91852e0fcd50f60be06"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "2d62bf7b4a2ffd7f3000b705735c37efcdee68e1", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=bac89eae4844f030b0b3e219e114a1b79212fe7f", "patch": "@@ -123,16 +123,5 @@ enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_table_adjustments = 0x62\n }\n \n-// djb's cdb hashes.\n-fn hash_node_id(&&node_id: int) -> uint {\n-    return 177573u ^ (node_id as uint);\n-}\n-\n-fn hash_path(&&s: ~str) -> uint {\n-    let mut h = 5381u;\n-    for str::each(s) |ch| { h = (h << 5u) + h ^ (ch as uint); }\n-    return h;\n-}\n-\n type link_meta = {name: ~str, vers: ~str, extras_hash: ~str};\n "}, {"sha": "14244b08208794ca83cbcd1da4842d331504f830", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=bac89eae4844f030b0b3e219e114a1b79212fe7f", "patch": "@@ -16,7 +16,7 @@ use util::ppaux::ty_to_str;\n use syntax::diagnostic::span_handler;\n use common::*;\n use syntax::parse::token::ident_interner;\n-\n+use hash::{Hash, HashUtil};\n \n export class_dtor;\n export get_class_fields;\n@@ -88,7 +88,7 @@ fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n     }\n     lookup_hash(items,\n                 |a| eq_item(a, item_id),\n-                hash_node_id(item_id))\n+                item_id.hash() as uint)\n }\n \n fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {"}, {"sha": "04f2bdcf636f5aeb5a7686d7387426424b92ff60", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac89eae4844f030b0b3e219e114a1b79212fe7f/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=bac89eae4844f030b0b3e219e114a1b79212fe7f", "patch": "@@ -20,6 +20,9 @@ use str::to_bytes;\n use syntax::ast;\n use syntax::diagnostic::span_handler;\n \n+use hash::{Hash, HashUtil};\n+use to_bytes::IterBytes;\n+\n export encode_parms;\n export encode_metadata;\n export encoded_ty;\n@@ -679,7 +682,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n            }\n         }\n         /* Each class has its own index -- encode it */\n-        let bkts = create_index(idx, hash_node_id);\n+        let bkts = create_index(idx);\n         encode_index(ebml_w, bkts, write_int);\n         ebml_w.end_tag();\n \n@@ -865,13 +868,13 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::Writer,\n \n // Path and definition ID indexing\n \n-fn create_index<T: Copy>(index: ~[entry<T>], hash_fn: fn@(T) -> uint) ->\n+fn create_index<T: Copy Hash IterBytes>(index: ~[entry<T>]) ->\n    ~[@~[entry<T>]] {\n     let mut buckets: ~[@mut ~[entry<T>]] = ~[];\n     for uint::range(0u, 256u) |_i| { vec::push(buckets, @mut ~[]); };\n     for index.each |elt| {\n-        let h = hash_fn(elt.val);\n-        vec::push(*buckets[h % 256u], elt);\n+        let h = elt.val.hash() as uint;\n+        vec::push(*buckets[h % 256], elt);\n     }\n \n     let mut buckets_frozen = ~[];\n@@ -1135,7 +1138,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n     ecx.stats.item_bytes = wr.pos - i;\n \n     i = wr.pos;\n-    let items_buckets = create_index(items_index, hash_node_id);\n+    let items_buckets = create_index(items_index);\n     encode_index(ebml_w, items_buckets, write_int);\n     ecx.stats.index_bytes = wr.pos - i;\n     ebml_w.end_tag();"}]}