{"sha": "0257c5adca83a4670772e8ed27cb9d9ee0aada13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNTdjNWFkY2E4M2E0NjcwNzcyZThlZDI3Y2I5ZDllZTBhYWRhMTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-24T05:18:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-25T07:04:53Z"}, "message": "Add a command line flag to print some query stats", "tree": {"sha": "64560c6b7e2eceeb3863d74bd9ff39e5c6424fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64560c6b7e2eceeb3863d74bd9ff39e5c6424fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0257c5adca83a4670772e8ed27cb9d9ee0aada13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0257c5adca83a4670772e8ed27cb9d9ee0aada13", "html_url": "https://github.com/rust-lang/rust/commit/0257c5adca83a4670772e8ed27cb9d9ee0aada13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0257c5adca83a4670772e8ed27cb9d9ee0aada13/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddab10a692aab2e2984b5c826ed9d78a57e94851", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddab10a692aab2e2984b5c826ed9d78a57e94851", "html_url": "https://github.com/rust-lang/rust/commit/ddab10a692aab2e2984b5c826ed9d78a57e94851"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "bebaf8f6e14ef2c05671275c1ec0fb387b00b59a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0257c5adca83a4670772e8ed27cb9d9ee0aada13", "patch": "@@ -1291,6 +1291,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some performance-related statistics\"),\n+    query_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"print some statistics about the query system\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some statistics about AST and HIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],"}, {"sha": "93ed4c061714f180abbfe62461b10722bad1f95c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0257c5adca83a4670772e8ed27cb9d9ee0aada13", "patch": "@@ -913,7 +913,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// as well as all upstream crates. Only populated in incremental mode.\n     pub def_path_hash_to_def_id: Option<FxHashMap<DefPathHash, DefId>>,\n \n-    pub(crate) queries: query::Queries<'tcx>,\n+    pub queries: query::Queries<'tcx>,\n \n     // Records the free variables referenced by every closure\n     // expression. Do not track deps for this, just recompute it from"}, {"sha": "1fc88e44daba1c32d7e2c9a9de0d0e3535b9bc72", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=0257c5adca83a4670772e8ed27cb9d9ee0aada13", "patch": "@@ -63,6 +63,7 @@ use rustc_target::spec::PanicStrategy;\n use std::borrow::Cow;\n use std::ops::Deref;\n use std::sync::Arc;\n+use std::intrinsics::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::symbol::InternedString;\n use syntax::attr;"}, {"sha": "e197359dc8d5fa9ccfa77a308a0e15db9e6d6143", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 104, "deletions": 1, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=0257c5adca83a4670772e8ed27cb9d9ee0aada13", "patch": "@@ -37,6 +37,8 @@ use syntax::source_map::DUMMY_SP;\n pub struct QueryCache<'tcx, D: QueryConfig<'tcx> + ?Sized> {\n     pub(super) results: FxHashMap<D::Key, QueryValue<D::Value>>,\n     pub(super) active: FxHashMap<D::Key, QueryResult<'tcx>>,\n+    #[cfg(debug_assertions)]\n+    pub(super) cache_hits: usize,\n }\n \n pub(super) struct QueryValue<T> {\n@@ -60,6 +62,8 @@ impl<'tcx, M: QueryConfig<'tcx>> Default for QueryCache<'tcx, M> {\n         QueryCache {\n             results: FxHashMap::default(),\n             active: FxHashMap::default(),\n+            #[cfg(debug_assertions)]\n+            cache_hits: 0,\n         }\n     }\n }\n@@ -124,6 +128,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 });\n \n                 let result = Ok((value.value.clone(), value.index));\n+                #[cfg(debug_assertions)]\n+                {\n+                    lock.cache_hits += 1;\n+                }\n                 return TryGetJob::JobCompleted(result);\n             }\n             let job = match lock.active.entry((*key).clone()) {\n@@ -762,6 +770,101 @@ macro_rules! define_queries_inner {\n \n                 jobs\n             }\n+\n+            pub fn print_stats(&self) {\n+                let mut queries = Vec::new();\n+\n+                #[derive(Clone)]\n+                struct QueryStats {\n+                    name: &'static str,\n+                    cache_hits: usize,\n+                    key_size: usize,\n+                    key_type: &'static str,\n+                    value_size: usize,\n+                    value_type: &'static str,\n+                    entry_count: usize,\n+                }\n+\n+                fn stats<'tcx, Q: QueryConfig<'tcx>>(\n+                    name: &'static str,\n+                    map: &QueryCache<'tcx, Q>\n+                ) -> QueryStats {\n+                    QueryStats {\n+                        name,\n+                        #[cfg(debug_assertions)]\n+                        cache_hits: map.cache_hits,\n+                        #[cfg(not(debug_assertions))]\n+                        cache_hits: 0,\n+                        key_size: mem::size_of::<Q::Key>(),\n+                        key_type: unsafe { type_name::<Q::Key>() },\n+                        value_size: mem::size_of::<Q::Value>(),\n+                        value_type: unsafe { type_name::<Q::Value>() },\n+                        entry_count: map.results.len(),\n+                    }\n+                }\n+\n+                $(\n+                    queries.push(stats::<queries::$name<'_>>(\n+                        stringify!($name),\n+                        &*self.$name.lock()\n+                    ));\n+                )*\n+\n+                if cfg!(debug_assertions) {\n+                    let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n+                    let results: usize = queries.iter().map(|s| s.entry_count).sum();\n+                    println!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n+                }\n+\n+                let mut query_key_sizes = queries.clone();\n+                query_key_sizes.sort_by_key(|q| q.key_size);\n+                println!(\"\\nLarge query keys:\");\n+                for q in query_key_sizes.iter().rev()\n+                                        .filter(|q| q.key_size > 8) {\n+                    println!(\n+                        \"   {} - {} x {} - {}\",\n+                        q.name,\n+                        q.key_size,\n+                        q.entry_count,\n+                        q.key_type\n+                    );\n+                }\n+\n+                let mut query_value_sizes = queries.clone();\n+                query_value_sizes.sort_by_key(|q| q.value_size);\n+                println!(\"\\nLarge query values:\");\n+                for q in query_value_sizes.iter().rev()\n+                                          .filter(|q| q.value_size > 8) {\n+                    println!(\n+                        \"   {} - {} x {} - {}\",\n+                        q.name,\n+                        q.value_size,\n+                        q.entry_count,\n+                        q.value_type\n+                    );\n+                }\n+\n+                if cfg!(debug_assertions) {\n+                    let mut query_cache_hits = queries.clone();\n+                    query_cache_hits.sort_by_key(|q| q.cache_hits);\n+                    println!(\"\\nQuery cache hits:\");\n+                    for q in query_cache_hits.iter().rev() {\n+                        println!(\n+                            \"   {} - {} ({}%)\",\n+                            q.name,\n+                            q.cache_hits,\n+                            q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n+                        );\n+                    }\n+                }\n+\n+                let mut query_value_count = queries.clone();\n+                query_value_count.sort_by_key(|q| q.entry_count);\n+                println!(\"\\nQuery value count:\");\n+                for q in query_value_count.iter().rev() {\n+                    println!(\"   {} - {}\", q.name, q.entry_count);\n+                }\n+            }\n         }\n \n         #[allow(nonstandard_style)]\n@@ -950,7 +1053,7 @@ macro_rules! define_queries_inner {\n macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n-        pub(crate) struct Queries<$tcx> {\n+        pub struct Queries<$tcx> {\n             /// This provides access to the incr. comp. on-disk cache for query results.\n             /// Do not access this directly. It is only meant to be used by\n             /// `DepGraph::try_mark_green()` and the query infrastructure."}, {"sha": "f574a1eee88f1a10953d8539d0787d37c7806a5b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257c5adca83a4670772e8ed27cb9d9ee0aada13/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0257c5adca83a4670772e8ed27cb9d9ee0aada13", "patch": "@@ -338,6 +338,10 @@ pub fn compile_input(\n                     }\n                 }\n \n+                if tcx.sess.opts.debugging_opts.query_stats {\n+                    tcx.queries.print_stats();\n+                }\n+\n                 Ok((outputs.clone(), ongoing_codegen, tcx.dep_graph.clone()))\n             },\n         )??"}]}