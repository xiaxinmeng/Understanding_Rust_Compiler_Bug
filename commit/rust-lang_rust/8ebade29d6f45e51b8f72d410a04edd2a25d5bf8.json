{"sha": "8ebade29d6f45e51b8f72d410a04edd2a25d5bf8", "node_id": "C_kwDOAAsO6NoAKDhlYmFkZTI5ZDZmNDVlNTFiOGY3MmQ0MTBhMDRlZGQyYTI1ZDViZjg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-25T09:18:01Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-28T23:57:14Z"}, "message": "Turn `ArgAbi::pad` into a `bool`.\n\nBecause it's only ever set to `None` or `Some(Reg::i32())`.", "tree": {"sha": "8d1ad660be76a7500e2f02acdcb0dfd09279a66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1ad660be76a7500e2f02acdcb0dfd09279a66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8", "html_url": "https://github.com/rust-lang/rust/commit/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2d43265c1691647a9e2adc57c7239a4366a624", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2d43265c1691647a9e2adc57c7239a4366a624", "html_url": "https://github.com/rust-lang/rust/commit/3c2d43265c1691647a9e2adc57c7239a4366a624"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3186b363e359f8d804df49f061a159aa50453267", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebade29d6f45e51b8f72d410a04edd2a25d5bf8/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=8ebade29d6f45e51b8f72d410a04edd2a25d5bf8", "patch": "@@ -126,8 +126,8 @@ impl<'gcc, 'tcx> FnAbiGccExt<'gcc, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n         for arg in self.args.iter() {\n             // add padding\n-            if let Some(ty) = arg.pad {\n-                argument_tys.push(ty.gcc_type(cx));\n+            if arg.pad_i32 {\n+                argument_tys.push(Reg::i32().gcc_type(cx));\n             }\n \n             let arg_ty = match arg.mode {"}]}