{"sha": "c417ee9ae8c30ac307c58591da46cf62e91caac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTdlZTlhZThjMzBhYzMwN2M1ODU5MWRhNDZjZjYyZTkxY2FhYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-25T16:13:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-25T16:13:16Z"}, "message": "Auto merge of #43320 - alexcrichton:new-bootstrap, r=Mark-Simulacrum\n\nBump master to 1.21.0\n\nThis commit bumps the master branch's version to 1.21.0 and also updates the\nbootstrap compiler from the freshly minted beta release.", "tree": {"sha": "8de4b9605fb1ef3b5ddb0ff1ff8277b6981b7f3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de4b9605fb1ef3b5ddb0ff1ff8277b6981b7f3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c417ee9ae8c30ac307c58591da46cf62e91caac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c417ee9ae8c30ac307c58591da46cf62e91caac1", "html_url": "https://github.com/rust-lang/rust/commit/c417ee9ae8c30ac307c58591da46cf62e91caac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c417ee9ae8c30ac307c58591da46cf62e91caac1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a643bdc681120446e3f5b787ae009bfa6b5f01b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a643bdc681120446e3f5b787ae009bfa6b5f01b6", "html_url": "https://github.com/rust-lang/rust/commit/a643bdc681120446e3f5b787ae009bfa6b5f01b6"}, {"sha": "9010567dcc0aba772525841aee67c030ea3450c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9010567dcc0aba772525841aee67c030ea3450c6", "html_url": "https://github.com/rust-lang/rust/commit/9010567dcc0aba772525841aee67c030ea3450c6"}], "stats": {"total": 1078, "additions": 316, "deletions": 762}, "files": [{"sha": "9ee9bdfd7757a2e837f2172216978affd6dde980", "filename": "src/Cargo.lock", "status": "modified", "additions": 44, "deletions": 97, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -75,7 +75,7 @@ version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -88,7 +88,7 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -99,7 +99,7 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -135,7 +135,7 @@ dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -170,59 +170,19 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.21.0\"\n-dependencies = [\n- \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargotest 0.1.0\",\n- \"crates-io 0.10.0\",\n- \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n+version = \"0.22.0\"\n+source = \"git+https://github.com/rust-lang/cargo#88aa6423a164774d09abc78a24e74e8e665f651b\"\n+replace = \"cargo 0.22.0\"\n \n [[package]]\n name = \"cargo\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/rust-lang/cargo#47783c151dcfcd3b835cd2012bfc2810c0f8d017\"\n dependencies = [\n  \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crates-io 0.11.0 (git+https://github.com/rust-lang/cargo)\",\n+ \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargotest 0.1.0\",\n+ \"crates-io 0.11.0\",\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -234,12 +194,13 @@ dependencies = [\n  \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -266,14 +227,14 @@ name = \"cargotest\"\n version = \"0.1.0\"\n dependencies = [\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo 0.21.0\",\n+ \"cargo 0.22.0\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -341,7 +302,7 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -357,22 +318,9 @@ dependencies = [\n  \"rand 0.0.0\",\n ]\n \n-[[package]]\n-name = \"crates-io\"\n-version = \"0.10.0\"\n-dependencies = [\n- \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"crates-io\"\n version = \"0.11.0\"\n-source = \"git+https://github.com/rust-lang/cargo#47783c151dcfcd3b835cd2012bfc2810c0f8d017\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -393,7 +341,7 @@ version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"socket2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -406,7 +354,7 @@ version = \"0.3.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -497,7 +445,7 @@ name = \"filetime\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -513,7 +461,7 @@ name = \"flate2\"\n version = \"0.2.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -537,7 +485,7 @@ version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -562,7 +510,7 @@ version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -703,7 +651,7 @@ name = \"jobserver\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -755,7 +703,7 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.26\"\n+version = \"0.2.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -766,7 +714,7 @@ dependencies = [\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -779,7 +727,7 @@ version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -791,7 +739,7 @@ version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -812,7 +760,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -842,15 +790,15 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -859,7 +807,7 @@ version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -884,7 +832,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -960,7 +908,7 @@ name = \"num_cpus\"\n version = \"1.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -976,7 +924,7 @@ dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -991,7 +939,7 @@ version = \"0.9.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1113,7 +1061,7 @@ name = \"rand\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1641,7 +1589,7 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1746,7 +1694,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1865,7 +1813,7 @@ name = \"syntex_errors\"\n version = \"0.52.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1887,7 +1835,7 @@ version = \"0.52.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1902,7 +1850,7 @@ version = \"0.4.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1933,7 +1881,7 @@ version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1968,7 +1916,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2157,7 +2105,7 @@ name = \"xattr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2189,7 +2137,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f1aabf260a8f3fefa8871f16b531038c98dd9eab1cfa2c575e78c459abfa3a0\"\n \"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n-\"checksum crates-io 0.11.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n \"checksum curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7034c534a1d7d22f7971d6088aa9d281d219ef724026c3428092500f41ae9c2c\"\n \"checksum curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5481162dc4f424d088581db2f979fa7d4c238fe9794595de61d8d7522e277de\"\n@@ -2226,7 +2173,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n-\"checksum libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"30885bcb161cf67054244d10d4a7f4835ffd58773bc72e07d35fecf472295503\"\n+\"checksum libc 0.2.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"719aa0af4c241fa71d396ffdfe584aa758f08f35b4680ec3f03ecc2c3fe69b76\"\n \"checksum libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df18a822100352d9863b302faf6f8f25c0e77f0e60feb40e5dbe1238b7f13b1d\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd64ef8ee652185674455c1d450b83cbc8ad895625d543b5324d923f82e4d8\""}, {"sha": "6e81ec67260d81bb846c3386a461698070ede08e", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -51,4 +51,4 @@ debug = false\n debug-assertions = false\n \n [replace]\n-\"https://github.com/rust-lang/cargo#0.21.0\" = { path = \"tools/cargo\" }\n+\"https://github.com/rust-lang/cargo#0.22.0\" = { path = \"tools/cargo\" }"}, {"sha": "beefaeab90b15f9967d4d5bf5da9df1717e9430d", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.20.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.21.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "d2e181f94c62b500741386725f3bf796c41343df", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -25,15 +25,14 @@ use std::io::Read;\n \n use build_helper::{self, output};\n \n-use {Build, Mode};\n-use dist;\n-use util::{self, dylib_path, dylib_path_var};\n-\n+use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n+use cache::{INTERNER, Interned};\n use compile;\n+use dist;\n use native;\n-use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use tool::{self, Tool};\n-use cache::{INTERNER, Interned};\n+use util::{self, dylib_path, dylib_path_var};\n+use {Build, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -963,16 +962,31 @@ impl Step for Crate {\n \n         builder.ensure(compile::Test { compiler, target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n-        let (name, path, features, root) = match mode {\n+\n+        // If we're not doing a full bootstrap but we're testing a stage2 version of\n+        // libstd, then what we're actually testing is the libstd produced in\n+        // stage1. Reflect that here by updating the compiler that we're working\n+        // with automatically.\n+        let compiler = if build.force_use_stage1(compiler, target) {\n+            builder.compiler(1, compiler.host)\n+        } else {\n+            compiler.clone()\n+        };\n+\n+        let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n+        let (name, root) = match mode {\n             Mode::Libstd => {\n-                (\"libstd\", \"src/libstd\", build.std_features(), \"std\")\n+                compile::std_cargo(build, &compiler, target, &mut cargo);\n+                (\"libstd\", \"std\")\n             }\n             Mode::Libtest => {\n-                (\"libtest\", \"src/libtest\", String::new(), \"test\")\n+                compile::test_cargo(build, &compiler, target, &mut cargo);\n+                (\"libtest\", \"test\")\n             }\n             Mode::Librustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n-                (\"librustc\", \"src/rustc\", build.rustc_features(), \"rustc-main\")\n+                compile::rustc_cargo(build, &compiler, target, &mut cargo);\n+                (\"librustc\", \"rustc-main\")\n             }\n             _ => panic!(\"can only test libraries\"),\n         };\n@@ -983,25 +997,11 @@ impl Step for Crate {\n         println!(\"{} {} stage{} ({} -> {})\", test_kind, name, compiler.stage,\n                 &compiler.host, target);\n \n-        // If we're not doing a full bootstrap but we're testing a stage2 version of\n-        // libstd, then what we're actually testing is the libstd produced in\n-        // stage1. Reflect that here by updating the compiler that we're working\n-        // with automatically.\n-        let compiler = if build.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler.clone()\n-        };\n-\n         // Build up the base `cargo test` command.\n         //\n         // Pass in some standard flags then iterate over the graph we've discovered\n         // in `cargo metadata` with the maps above and figure out what `-p`\n         // arguments need to get passed.\n-        let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n-        cargo.arg(\"--manifest-path\")\n-            .arg(build.src.join(path).join(\"Cargo.toml\"))\n-            .arg(\"--features\").arg(features);\n         if test_kind.subcommand() == \"test\" && !build.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n@@ -1014,16 +1014,18 @@ impl Step for Crate {\n                 let mut visited = HashSet::new();\n                 let mut next = vec![root];\n                 while let Some(name) = next.pop() {\n-                    // Right now jemalloc is our only target-specific crate in the\n-                    // sense that it's not present on all platforms. Custom skip it\n-                    // here for now, but if we add more this probably wants to get\n-                    // more generalized.\n+                    // Right now jemalloc and the sanitizer crates are\n+                    // target-specific crate in the sense that it's not present\n+                    // on all platforms. Custom skip it here for now, but if we\n+                    // add more this probably wants to get more generalized.\n                     //\n-                    // Also skip `build_helper` as it's not compiled normally for\n-                    // target during the bootstrap and it's just meant to be a\n-                    // helper crate, not tested. If it leaks through then it ends up\n-                    // messing with various mtime calculations and such.\n-                    if !name.contains(\"jemalloc\") && *name != *\"build_helper\" {\n+                    // Also skip `build_helper` as it's not compiled normally\n+                    // for target during the bootstrap and it's just meant to be\n+                    // a helper crate, not tested. If it leaks through then it\n+                    // ends up messing with various mtime calculations and such.\n+                    if !name.contains(\"jemalloc\") &&\n+                       *name != *\"build_helper\" &&\n+                       !(name.starts_with(\"rustc_\") && name.ends_with(\"san\")) {\n                         cargo.arg(\"-p\").arg(&format!(\"{}:0.0.0\", name));\n                     }\n                     for dep in build.crates[&name].deps.iter() {"}, {"sha": "2e808c6568472a26b17f5080cdcb523bb510e1a4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 130, "deletions": 107, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -91,47 +91,7 @@ impl Step for Std {\n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n-        let mut features = build.std_features();\n-\n-        if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n-            cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n-        }\n-\n-        // When doing a local rebuild we tell cargo that we're stage1 rather than\n-        // stage0. This works fine if the local rust and being-built rust have the\n-        // same view of what the default allocator is, but fails otherwise. Since\n-        // we don't have a way to express an allocator preference yet, work\n-        // around the issue in the case of a local rebuild with jemalloc disabled.\n-        if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n-            features.push_str(\" force_alloc_system\");\n-        }\n-\n-        if compiler.stage != 0 && build.config.sanitizers {\n-            // This variable is used by the sanitizer runtime crates, e.g.\n-            // rustc_lsan, to build the sanitizer runtime from C code\n-            // When this variable is missing, those crates won't compile the C code,\n-            // so we don't set this variable during stage0 where llvm-config is\n-            // missing\n-            // We also only build the runtimes when --enable-sanitizers (or its\n-            // config.toml equivalent) is used\n-            cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n-        }\n-\n-        cargo.arg(\"--features\").arg(features)\n-            .arg(\"--manifest-path\")\n-            .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n-\n-        if let Some(target) = build.config.target_config.get(&target) {\n-            if let Some(ref jemalloc) = target.jemalloc {\n-                cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n-            }\n-        }\n-        if target.contains(\"musl\") {\n-            if let Some(p) = build.musl_root(target) {\n-                cargo.env(\"MUSL_ROOT\", p);\n-            }\n-        }\n-\n+        std_cargo(build, &compiler, target, &mut cargo);\n         run_cargo(build,\n                 &mut cargo,\n                 &libstd_stamp(build, compiler, target));\n@@ -144,6 +104,53 @@ impl Step for Std {\n     }\n }\n \n+/// Configure cargo to compile the standard library, adding appropriate env vars\n+/// and such.\n+pub fn std_cargo(build: &Build,\n+                 compiler: &Compiler,\n+                 target: Interned<String>,\n+                 cargo: &mut Command) {\n+    let mut features = build.std_features();\n+\n+    if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+        cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n+    }\n+\n+    // When doing a local rebuild we tell cargo that we're stage1 rather than\n+    // stage0. This works fine if the local rust and being-built rust have the\n+    // same view of what the default allocator is, but fails otherwise. Since\n+    // we don't have a way to express an allocator preference yet, work\n+    // around the issue in the case of a local rebuild with jemalloc disabled.\n+    if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n+        features.push_str(\" force_alloc_system\");\n+    }\n+\n+    if compiler.stage != 0 && build.config.sanitizers {\n+        // This variable is used by the sanitizer runtime crates, e.g.\n+        // rustc_lsan, to build the sanitizer runtime from C code\n+        // When this variable is missing, those crates won't compile the C code,\n+        // so we don't set this variable during stage0 where llvm-config is\n+        // missing\n+        // We also only build the runtimes when --enable-sanitizers (or its\n+        // config.toml equivalent) is used\n+        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    }\n+\n+    cargo.arg(\"--features\").arg(features)\n+        .arg(\"--manifest-path\")\n+        .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n+\n+    if let Some(target) = build.config.target_config.get(&target) {\n+        if let Some(ref jemalloc) = target.jemalloc {\n+            cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n+        }\n+    }\n+    if target.contains(\"musl\") {\n+        if let Some(p) = build.musl_root(target) {\n+            cargo.env(\"MUSL_ROOT\", p);\n+        }\n+    }\n+}\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct StdLink {\n@@ -329,11 +336,7 @@ impl Step for Test {\n         let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n         build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"build\");\n-        if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n-            cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n-        }\n-        cargo.arg(\"--manifest-path\")\n-            .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n+        test_cargo(build, &compiler, target, &mut cargo);\n         run_cargo(build,\n                 &mut cargo,\n                 &libtest_stamp(build, compiler, target));\n@@ -346,6 +349,18 @@ impl Step for Test {\n     }\n }\n \n+/// Same as `std_cargo`, but for libtest\n+pub fn test_cargo(build: &Build,\n+                  _compiler: &Compiler,\n+                  _target: Interned<String>,\n+                  cargo: &mut Command) {\n+    if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+        cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n+    }\n+    cargo.arg(\"--manifest-path\")\n+        .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TestLink {\n     pub compiler: Compiler,\n@@ -443,67 +458,7 @@ impl Step for Rustc {\n         build.clear_if_dirty(&out_dir, &libtest_stamp(build, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n-        cargo.arg(\"--features\").arg(build.rustc_features())\n-             .arg(\"--manifest-path\")\n-             .arg(build.src.join(\"src/rustc/Cargo.toml\"));\n-\n-        // Set some configuration variables picked up by build scripts and\n-        // the compiler alike\n-        cargo.env(\"CFG_RELEASE\", build.rust_release())\n-             .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n-             .env(\"CFG_VERSION\", build.rust_version())\n-             .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n-\n-        if compiler.stage == 0 {\n-            cargo.env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n-        } else {\n-            let libdir_relative =\n-                build.config.libdir_relative.clone().unwrap_or(PathBuf::from(\"lib\"));\n-            cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n-        }\n-\n-        // If we're not building a compiler with debugging information then remove\n-        // these two env vars which would be set otherwise.\n-        if build.config.rust_debuginfo_only_std {\n-            cargo.env_remove(\"RUSTC_DEBUGINFO\");\n-            cargo.env_remove(\"RUSTC_DEBUGINFO_LINES\");\n-        }\n-\n-        if let Some(ref ver_date) = build.rust_info.commit_date() {\n-            cargo.env(\"CFG_VER_DATE\", ver_date);\n-        }\n-        if let Some(ref ver_hash) = build.rust_info.sha() {\n-            cargo.env(\"CFG_VER_HASH\", ver_hash);\n-        }\n-        if !build.unstable_features() {\n-            cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n-        }\n-        // Flag that rust llvm is in use\n-        if build.is_rust_llvm(target) {\n-            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-        }\n-        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n-        let target_config = build.config.target_config.get(&target);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            cargo.env(\"CFG_LLVM_ROOT\", s);\n-        }\n-        // Building with a static libstdc++ is only supported on linux right now,\n-        // not for MSVC or macOS\n-        if build.config.llvm_static_stdcpp &&\n-           !target.contains(\"windows\") &&\n-           !target.contains(\"apple\") {\n-            cargo.env(\"LLVM_STATIC_STDCPP\",\n-                      compiler_file(build.cxx(target).unwrap(), \"libstdc++.a\"));\n-        }\n-        if build.config.llvm_link_shared {\n-            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-        }\n-        if let Some(ref s) = build.config.rustc_default_linker {\n-            cargo.env(\"CFG_DEFAULT_LINKER\", s);\n-        }\n-        if let Some(ref s) = build.config.rustc_default_ar {\n-            cargo.env(\"CFG_DEFAULT_AR\", s);\n-        }\n+        rustc_cargo(build, &compiler, target, &mut cargo);\n         run_cargo(build,\n                   &mut cargo,\n                   &librustc_stamp(build, compiler, target));\n@@ -516,6 +471,74 @@ impl Step for Rustc {\n     }\n }\n \n+/// Same as `std_cargo`, but for libtest\n+pub fn rustc_cargo(build: &Build,\n+                   compiler: &Compiler,\n+                   target: Interned<String>,\n+                   cargo: &mut Command) {\n+    cargo.arg(\"--features\").arg(build.rustc_features())\n+         .arg(\"--manifest-path\")\n+         .arg(build.src.join(\"src/rustc/Cargo.toml\"));\n+\n+    // Set some configuration variables picked up by build scripts and\n+    // the compiler alike\n+    cargo.env(\"CFG_RELEASE\", build.rust_release())\n+         .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n+         .env(\"CFG_VERSION\", build.rust_version())\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n+\n+    if compiler.stage == 0 {\n+        cargo.env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n+    } else {\n+        let libdir_relative =\n+            build.config.libdir_relative.clone().unwrap_or(PathBuf::from(\"lib\"));\n+        cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n+    }\n+\n+    // If we're not building a compiler with debugging information then remove\n+    // these two env vars which would be set otherwise.\n+    if build.config.rust_debuginfo_only_std {\n+        cargo.env_remove(\"RUSTC_DEBUGINFO\");\n+        cargo.env_remove(\"RUSTC_DEBUGINFO_LINES\");\n+    }\n+\n+    if let Some(ref ver_date) = build.rust_info.commit_date() {\n+        cargo.env(\"CFG_VER_DATE\", ver_date);\n+    }\n+    if let Some(ref ver_hash) = build.rust_info.sha() {\n+        cargo.env(\"CFG_VER_HASH\", ver_hash);\n+    }\n+    if !build.unstable_features() {\n+        cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n+    }\n+    // Flag that rust llvm is in use\n+    if build.is_rust_llvm(target) {\n+        cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+    }\n+    cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    let target_config = build.config.target_config.get(&target);\n+    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"CFG_LLVM_ROOT\", s);\n+    }\n+    // Building with a static libstdc++ is only supported on linux right now,\n+    // not for MSVC or macOS\n+    if build.config.llvm_static_stdcpp &&\n+       !target.contains(\"windows\") &&\n+       !target.contains(\"apple\") {\n+        cargo.env(\"LLVM_STATIC_STDCPP\",\n+                  compiler_file(build.cxx(target).unwrap(), \"libstdc++.a\"));\n+    }\n+    if build.config.llvm_link_shared {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n+    if let Some(ref s) = build.config.rustc_default_linker {\n+        cargo.env(\"CFG_DEFAULT_LINKER\", s);\n+    }\n+    if let Some(ref s) = build.config.rustc_default_ar {\n+        cargo.env(\"CFG_DEFAULT_AR\", s);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct RustcLink {\n     pub compiler: Compiler,"}, {"sha": "249ed2a2223a5424711802be5fd73c79fd482213", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -442,9 +442,7 @@ impl Step for Std {\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n-        cargo.arg(\"--manifest-path\")\n-             .arg(build.src.join(\"src/libstd/Cargo.toml\"))\n-             .arg(\"--features\").arg(build.std_features());\n+        compile::std_cargo(build, &compiler, target, &mut cargo);\n \n         // We don't want to build docs for internal std dependencies unless\n         // in compiler-docs mode. When not in that mode, we whitelist the crates\n@@ -520,8 +518,7 @@ impl Step for Test {\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"doc\");\n-        cargo.arg(\"--manifest-path\")\n-             .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n+        compile::test_cargo(build, &compiler, target, &mut cargo);\n         build.run(&mut cargo);\n         cp_r(&my_out, &out);\n     }\n@@ -582,9 +579,7 @@ impl Step for Rustc {\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n-        cargo.arg(\"--manifest-path\")\n-             .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n-             .arg(\"--features\").arg(build.rustc_features());\n+        compile::rustc_cargo(build, &compiler, target, &mut cargo);\n \n         if build.config.compiler_docs {\n             // src/rustc/Cargo.toml contains bin crates called rustc and rustdoc"}, {"sha": "f32cddbafc3e70909e9e2ec7c7b0691f78d7962f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -263,7 +263,7 @@ impl Step for Cargo {\n             stage: self.stage,\n             target: self.target,\n             tool: \"cargo\",\n-            mode: Mode::Libstd,\n+            mode: Mode::Librustc,\n         })\n     }\n }"}, {"sha": "91653f87a3000eb55b5c358d4826d96fdc89317b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -85,7 +85,6 @@\n #![cfg_attr(not(test), feature(slice_rotate))]\n #![cfg_attr(not(test), feature(str_checked_slicing))]\n #![cfg_attr(test, feature(rand, test))]\n-#![cfg_attr(stage0, feature(allocator))]\n #![feature(allow_internal_unstable)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n@@ -124,7 +123,7 @@\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(unsize)]\n-#![cfg_attr(not(stage0), feature(allocator_internals))]\n+#![feature(allocator_internals)]\n \n #![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol))]\n #![cfg_attr(test, feature(test, box_heap))]"}, {"sha": "94700cf4475359019e65d8c76680e3511f4897b9", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -12,12 +12,10 @@ test = false\n doc = false\n \n [dependencies]\n-core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n-\n-[target.'cfg(not(stage0))'.dependencies]\n alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }\n+libc = { path = \"../rustc/libc_shim\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "3a9cc1dd5a6b88417d388ccd6467c65f4e108c1c", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -16,26 +16,21 @@\n                       form or name\",\n             issue = \"27783\")]\n #![deny(warnings)]\n+#![feature(alloc)]\n+#![feature(alloc_system)]\n #![feature(libc)]\n-#![feature(staged_api)]\n #![feature(linkage)]\n-#![cfg_attr(stage0, allocator)]\n-#![cfg_attr(stage0, feature(allocator))]\n-#![cfg_attr(not(stage0), feature(global_allocator))]\n-#![cfg_attr(all(not(stage0), not(dummy_jemalloc)), feature(allocator_api))]\n-#![cfg_attr(not(stage0), feature(alloc))]\n-#![cfg_attr(not(stage0), feature(alloc_system))]\n+#![feature(staged_api)]\n #![cfg_attr(dummy_jemalloc, allow(dead_code))]\n+#![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n \n-#[cfg(not(stage0))]\n extern crate alloc;\n-#[cfg(not(stage0))]\n extern crate alloc_system;\n extern crate libc;\n \n-#[cfg(all(not(stage0), not(dummy_jemalloc)))]\n+#[cfg(not(dummy_jemalloc))]\n pub use contents::*;\n-#[cfg(all(not(stage0), not(dummy_jemalloc)))]\n+#[cfg(not(dummy_jemalloc))]\n mod contents {\n     use core::ptr;\n "}, {"sha": "a725a8608be298f5f7655d3f95638e8c3af971ea", "filename": "src/liballoc_system/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2FCargo.toml?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -10,8 +10,6 @@ test = false\n doc = false\n \n [dependencies]\n+alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n-\n-[target.'cfg(not(stage0))'.dependencies]\n-alloc = { path = \"../liballoc\" }"}, {"sha": "9a7cba21e3c78a8a192cc6ffe5f45493e766aae6", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 68, "deletions": 81, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -16,13 +16,10 @@\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n-#![cfg_attr(stage0, allocator)]\n-#![cfg_attr(stage0, feature(allocator))]\n-#![cfg_attr(stage0, feature(core_intrinsics))]\n-#![cfg_attr(not(stage0), feature(global_allocator))]\n-#![cfg_attr(not(stage0), feature(allocator_api))]\n-#![cfg_attr(not(stage0), feature(alloc))]\n-#![cfg_attr(not(stage0), feature(core_intrinsics))]\n+#![feature(global_allocator)]\n+#![feature(allocator_api)]\n+#![feature(alloc)]\n+#![feature(core_intrinsics)]\n #![feature(staged_api)]\n #![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n \n@@ -44,99 +41,89 @@ const MIN_ALIGN: usize = 8;\n               target_arch = \"sparc64\")))]\n const MIN_ALIGN: usize = 16;\n \n-#[cfg(stage0)]\n-pub use old::*;\n-#[cfg(stage0)]\n-mod old;\n+extern crate alloc;\n \n-#[cfg(not(stage0))]\n-pub use new::System;\n-#[cfg(not(stage0))]\n-mod new {\n-    pub extern crate alloc;\n+use self::alloc::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n \n-    use self::alloc::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+pub struct System;\n \n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    pub struct System;\n-\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    unsafe impl Alloc for System {\n-        #[inline]\n-        unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            (&*self).alloc(layout)\n-        }\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+unsafe impl Alloc for System {\n+    #[inline]\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        (&*self).alloc(layout)\n+    }\n \n-        #[inline]\n-        unsafe fn alloc_zeroed(&mut self, layout: Layout)\n-            -> Result<*mut u8, AllocErr>\n-        {\n-            (&*self).alloc_zeroed(layout)\n-        }\n+    #[inline]\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout)\n+        -> Result<*mut u8, AllocErr>\n+    {\n+        (&*self).alloc_zeroed(layout)\n+    }\n \n-        #[inline]\n-        unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-            (&*self).dealloc(ptr, layout)\n-        }\n+    #[inline]\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n+        (&*self).dealloc(ptr, layout)\n+    }\n \n-        #[inline]\n-        unsafe fn realloc(&mut self,\n-                          ptr: *mut u8,\n-                          old_layout: Layout,\n-                          new_layout: Layout) -> Result<*mut u8, AllocErr> {\n-            (&*self).realloc(ptr, old_layout, new_layout)\n-        }\n+    #[inline]\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      old_layout: Layout,\n+                      new_layout: Layout) -> Result<*mut u8, AllocErr> {\n+        (&*self).realloc(ptr, old_layout, new_layout)\n+    }\n \n-        fn oom(&mut self, err: AllocErr) -> ! {\n-            (&*self).oom(err)\n-        }\n+    fn oom(&mut self, err: AllocErr) -> ! {\n+        (&*self).oom(err)\n+    }\n \n-        #[inline]\n-        fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n-            (&self).usable_size(layout)\n-        }\n+    #[inline]\n+    fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n+        (&self).usable_size(layout)\n+    }\n \n-        #[inline]\n-        unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n-            (&*self).alloc_excess(layout)\n-        }\n+    #[inline]\n+    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n+        (&*self).alloc_excess(layout)\n+    }\n \n-        #[inline]\n-        unsafe fn realloc_excess(&mut self,\n-                                 ptr: *mut u8,\n-                                 layout: Layout,\n-                                 new_layout: Layout) -> Result<Excess, AllocErr> {\n-            (&*self).realloc_excess(ptr, layout, new_layout)\n-        }\n+    #[inline]\n+    unsafe fn realloc_excess(&mut self,\n+                             ptr: *mut u8,\n+                             layout: Layout,\n+                             new_layout: Layout) -> Result<Excess, AllocErr> {\n+        (&*self).realloc_excess(ptr, layout, new_layout)\n+    }\n \n-        #[inline]\n-        unsafe fn grow_in_place(&mut self,\n-                                ptr: *mut u8,\n-                                layout: Layout,\n-                                new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-            (&*self).grow_in_place(ptr, layout, new_layout)\n-        }\n+    #[inline]\n+    unsafe fn grow_in_place(&mut self,\n+                            ptr: *mut u8,\n+                            layout: Layout,\n+                            new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n+        (&*self).grow_in_place(ptr, layout, new_layout)\n+    }\n \n-        #[inline]\n-        unsafe fn shrink_in_place(&mut self,\n-                                  ptr: *mut u8,\n-                                  layout: Layout,\n-                                  new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-            (&*self).shrink_in_place(ptr, layout, new_layout)\n-        }\n+    #[inline]\n+    unsafe fn shrink_in_place(&mut self,\n+                              ptr: *mut u8,\n+                              layout: Layout,\n+                              new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n+        (&*self).shrink_in_place(ptr, layout, new_layout)\n     }\n }\n \n-#[cfg(all(not(stage0), any(unix, target_os = \"redox\")))]\n+#[cfg(any(unix, target_os = \"redox\"))]\n mod platform {\n     extern crate libc;\n \n     use core::cmp;\n     use core::ptr;\n \n     use MIN_ALIGN;\n-    use new::System;\n-    use new::alloc::heap::{Alloc, AllocErr, Layout};\n+    use System;\n+    use alloc::heap::{Alloc, AllocErr, Layout};\n \n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     unsafe impl<'a> Alloc for &'a System {\n@@ -272,15 +259,15 @@ mod platform {\n     }\n }\n \n-#[cfg(all(windows, not(stage0)))]\n+#[cfg(windows)]\n #[allow(bad_style)]\n mod platform {\n     use core::cmp;\n     use core::ptr;\n \n     use MIN_ALIGN;\n-    use new::System;\n-    use new::alloc::heap::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n+    use System;\n+    use alloc::heap::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n \n     type LPVOID = *mut u8;\n     type HANDLE = LPVOID;"}, {"sha": "80aa46075944cb293440f57ea50a459bcd8e7d0b", "filename": "src/liballoc_system/old.rs", "status": "removed", "additions": 0, "deletions": 268, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/a643bdc681120446e3f5b787ae009bfa6b5f01b6/src%2Fliballoc_system%2Fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a643bdc681120446e3f5b787ae009bfa6b5f01b6/src%2Fliballoc_system%2Fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Fold.rs?ref=a643bdc681120446e3f5b787ae009bfa6b5f01b6", "patch": "@@ -1,268 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_alloc(size: usize,\n-                                  align: usize,\n-                                  err: *mut u8) -> *mut u8 {\n-    let p = imp::allocate(size, align);\n-    if p.is_null() {\n-        __rust_oom(err);\n-    }\n-    p\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_oom(_err: *const u8) -> ! {\n-    ::core::intrinsics::abort()\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_dealloc(ptr: *mut u8,\n-                                    size: usize,\n-                                    align: usize) {\n-    imp::deallocate(ptr, size, align)\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_usable_size(size: usize,\n-                                        _align: usize,\n-                                        min: *mut usize,\n-                                        max: *mut usize) {\n-    *min = size;\n-    *max = size;\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_realloc(ptr: *mut u8,\n-                                    old_size: usize,\n-                                    old_align: usize,\n-                                    new_size: usize,\n-                                    new_align: usize,\n-                                    err: *mut u8) -> *mut u8 {\n-    if new_align != old_align {\n-        __rust_oom(err);\n-    }\n-    let p = imp::reallocate(ptr, old_size, new_size, new_align);\n-    if p.is_null() {\n-        __rust_oom(err);\n-    }\n-    p\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_alloc_zeroed(size: usize,\n-                                         align: usize,\n-                                         err: *mut u8) -> *mut u8 {\n-    let p = imp::allocate_zeroed(size, align);\n-    if p.is_null() {\n-        __rust_oom(err);\n-    }\n-    p\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_alloc_excess(_size: usize,\n-                                         _align: usize,\n-                                         _excess: *mut usize,\n-                                         err: *mut u8) -> *mut u8 {\n-    __rust_oom(err);\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_realloc_excess(_ptr: *mut u8,\n-                                           _old_size: usize,\n-                                           _old_align: usize,\n-                                           _new_size: usize,\n-                                           _new_align: usize,\n-                                           _excess: *mut usize,\n-                                           err: *mut u8) -> *mut u8 {\n-    __rust_oom(err);\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_grow_in_place(_ptr: *mut u8,\n-                                          _old_size: usize,\n-                                          _old_align: usize,\n-                                          _new_size: usize,\n-                                          _new_align: usize) -> u8 {\n-    0\n-}\n-\n-#[no_mangle]\n-pub unsafe extern fn __rust_shrink_in_place(_ptr: *mut u8,\n-                                            _old_size: usize,\n-                                            _old_align: usize,\n-                                            _new_size: usize,\n-                                            _new_align: usize) -> u8 {\n-    0\n-}\n-\n-#[cfg(any(unix, target_os = \"redox\"))]\n-mod imp {\n-    extern crate libc;\n-\n-    use core::cmp;\n-    use core::ptr;\n-    use MIN_ALIGN;\n-\n-    pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            libc::malloc(size as libc::size_t) as *mut u8\n-        } else {\n-            aligned_malloc(size, align)\n-        }\n-    }\n-\n-    #[cfg(any(target_os = \"android\", target_os = \"redox\"))]\n-    unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n-        // On android we currently target API level 9 which unfortunately\n-        // doesn't have the `posix_memalign` API used below. Instead we use\n-        // `memalign`, but this unfortunately has the property on some systems\n-        // where the memory returned cannot be deallocated by `free`!\n-        //\n-        // Upon closer inspection, however, this appears to work just fine with\n-        // Android, so for this platform we should be fine to call `memalign`\n-        // (which is present in API level 9). Some helpful references could\n-        // possibly be chromium using memalign [1], attempts at documenting that\n-        // memalign + free is ok [2] [3], or the current source of chromium\n-        // which still uses memalign on android [4].\n-        //\n-        // [1]: https://codereview.chromium.org/10796020/\n-        // [2]: https://code.google.com/p/android/issues/detail?id=35391\n-        // [3]: https://bugs.chromium.org/p/chromium/issues/detail?id=138579\n-        // [4]: https://chromium.googlesource.com/chromium/src/base/+/master/\n-        //                                       /memory/aligned_memory.cc\n-        libc::memalign(align as libc::size_t, size as libc::size_t) as *mut u8\n-    }\n-\n-    #[cfg(not(any(target_os = \"android\", target_os = \"redox\")))]\n-    unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n-        let mut out = ptr::null_mut();\n-        let ret = libc::posix_memalign(&mut out, align as libc::size_t, size as libc::size_t);\n-        if ret != 0 {\n-            ptr::null_mut()\n-        } else {\n-            out as *mut u8\n-        }\n-    }\n-\n-    pub unsafe fn allocate_zeroed(size: usize, align: usize) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            libc::calloc(size as libc::size_t, 1) as *mut u8\n-        } else {\n-            let ptr = aligned_malloc(size, align);\n-            if !ptr.is_null() {\n-                ptr::write_bytes(ptr, 0, size);\n-            }\n-            ptr\n-        }\n-    }\n-\n-    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n-        } else {\n-            let new_ptr = allocate(size, align);\n-            if !new_ptr.is_null() {\n-                ptr::copy(ptr, new_ptr, cmp::min(size, old_size));\n-                deallocate(ptr, old_size, align);\n-            }\n-            new_ptr\n-        }\n-    }\n-\n-    pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {\n-        libc::free(ptr as *mut libc::c_void)\n-    }\n-}\n-\n-#[cfg(windows)]\n-#[allow(bad_style)]\n-mod imp {\n-    use core::cmp::min;\n-    use core::ptr::copy_nonoverlapping;\n-    use MIN_ALIGN;\n-\n-    type LPVOID = *mut u8;\n-    type HANDLE = LPVOID;\n-    type SIZE_T = usize;\n-    type DWORD = u32;\n-    type BOOL = i32;\n-\n-    extern \"system\" {\n-        fn GetProcessHeap() -> HANDLE;\n-        fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n-        fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID;\n-        fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n-        fn GetLastError() -> DWORD;\n-    }\n-\n-    #[repr(C)]\n-    struct Header(*mut u8);\n-\n-\n-    const HEAP_ZERO_MEMORY: DWORD = 0x00000008;\n-\n-    unsafe fn get_header<'a>(ptr: *mut u8) -> &'a mut Header {\n-        &mut *(ptr as *mut Header).offset(-1)\n-    }\n-\n-    unsafe fn align_ptr(ptr: *mut u8, align: usize) -> *mut u8 {\n-        let aligned = ptr.offset((align - (ptr as usize & (align - 1))) as isize);\n-        *get_header(aligned) = Header(ptr);\n-        aligned\n-    }\n-\n-    #[inline]\n-    unsafe fn allocate_with_flags(size: usize, align: usize, flags: DWORD) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            HeapAlloc(GetProcessHeap(), flags, size as SIZE_T) as *mut u8\n-        } else {\n-            let ptr = HeapAlloc(GetProcessHeap(), flags, (size + align) as SIZE_T) as *mut u8;\n-            if ptr.is_null() {\n-                return ptr;\n-            }\n-            align_ptr(ptr, align)\n-        }\n-    }\n-\n-    pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n-        allocate_with_flags(size, align, 0)\n-    }\n-\n-    pub unsafe fn allocate_zeroed(size: usize, align: usize) -> *mut u8 {\n-        allocate_with_flags(size, align, HEAP_ZERO_MEMORY)\n-    }\n-\n-    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, size as SIZE_T) as *mut u8\n-        } else {\n-            let new = allocate(size, align);\n-            if !new.is_null() {\n-                copy_nonoverlapping(ptr, new, min(size, old_size));\n-                deallocate(ptr, old_size, align);\n-            }\n-            new\n-        }\n-    }\n-\n-    pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, align: usize) {\n-        if align <= MIN_ALIGN {\n-            let err = HeapFree(GetProcessHeap(), 0, ptr as LPVOID);\n-            debug_assert!(err != 0, \"Failed to free heap memory: {}\", GetLastError());\n-        } else {\n-            let header = get_header(ptr);\n-            let err = HeapFree(GetProcessHeap(), 0, header.0 as LPVOID);\n-            debug_assert!(err != 0, \"Failed to free heap memory: {}\", GetLastError());\n-        }\n-    }\n-}"}, {"sha": "65c18d6d7772b45852b493f57d6c6737083b7b4c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -1229,7 +1229,6 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = unsafe { ctlz_nonzero(x) };\n     /// assert_eq!(num_leading, 3);\n     /// ```\n-    #[cfg(not(stage0))]\n     pub fn ctlz_nonzero<T>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n@@ -1273,7 +1272,6 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = unsafe { cttz_nonzero(x) };\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n-    #[cfg(not(stage0))]\n     pub fn cttz_nonzero<T>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`."}, {"sha": "546d2a21939ff3ea36c0e20a4b52a45889238929", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -93,8 +93,6 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}, {"sha": "185034a5313835b4113a54e29bd1c4a9f1c8f6ba", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -2238,17 +2238,12 @@ macro_rules! uint_impl {\n     }\n }\n \n-#[cfg(stage0)]\n-unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz(x) }\n-#[cfg(not(stage0))]\n-unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz_nonzero(x) }\n-\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2261,7 +2256,7 @@ impl u16 {\n     uint_impl! { u16, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2274,7 +2269,7 @@ impl u32 {\n     uint_impl! { u32, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2287,7 +2282,7 @@ impl u64 {\n     uint_impl! { u64, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2300,7 +2295,7 @@ impl u128 {\n     uint_impl! { u128, u128, 128,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2314,7 +2309,7 @@ impl usize {\n     uint_impl! { usize, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2327,7 +2322,7 @@ impl usize {\n     uint_impl! { usize, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2341,7 +2336,7 @@ impl usize {\n     uint_impl! { usize, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n-        ctlz_nonzero,\n+        intrinsics::ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,"}, {"sha": "4170d91e5fce274fcde59ba2ed64abf45ea08a2c", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -39,7 +39,7 @@\n use fmt;\n \n #[cold] #[inline(never)] // this is the slow path, always\n-#[cfg_attr(not(stage0), lang = \"panic\")]\n+#[lang = \"panic\"]\n pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n@@ -51,35 +51,14 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n-// FIXME: remove when SNAP\n-#[cold] #[inline(never)]\n-#[cfg(stage0)]\n-#[lang = \"panic\"]\n-pub fn panic_old(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n-    let (expr, file, line) = *expr_file_line;\n-    let expr_file_line_col = (expr, file, line, 0);\n-    panic(&expr_file_line_col)\n-}\n-\n #[cold] #[inline(never)]\n-#[cfg_attr(not(stage0), lang = \"panic_bounds_check\")]\n+#[lang = \"panic_bounds_check\"]\n fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                      index: usize, len: usize) -> ! {\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line_col)\n }\n \n-// FIXME: remove when SNAP\n-#[cold] #[inline(never)]\n-#[cfg(stage0)]\n-#[lang = \"panic_bounds_check\"]\n-fn panic_bounds_check_old(file_line: &(&'static str, u32),\n-                     index: usize, len: usize) -> ! {\n-    let (file, line) = *file_line;\n-    panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n-                           len, index), &(file, line, 0))\n-}\n-\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     #[allow(improper_ctypes)]"}, {"sha": "1fb2c6b7dbb5d1919bd27da5a68edb04ad36a92e", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![no_std]\n-#![cfg_attr(not(stage0), feature(profiler_runtime))]\n-#![cfg_attr(not(stage0), profiler_runtime)]\n+#![feature(profiler_runtime)]\n+#![profiler_runtime]\n #![unstable(feature = \"profiler_runtime_lib\",\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]"}, {"sha": "5b0760e561e3f68d4c14e7ed1ee832ec6b6242ec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -41,8 +41,6 @@\n #![feature(trace_macros)]\n #![feature(test)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n #![recursion_limit=\"256\"]\n \n extern crate arena;"}, {"sha": "3429e3bda0f6770bfcb49f84be94a35bc0e23312", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n #![sanitizer_runtime]\n-#![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(allocator_api))]\n-#![cfg_attr(not(stage0), feature(global_allocator))]\n+#![feature(allocator_api)]\n+#![feature(global_allocator)]\n+#![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n@@ -21,9 +21,7 @@\n \n extern crate alloc_system;\n \n-#[cfg(not(stage0))]\n use alloc_system::System;\n \n-#[cfg(not(stage0))]\n #[global_allocator]\n static ALLOC: System = System;"}, {"sha": "731256557929d20d12fb57179220f44a70469c1b", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -14,8 +14,6 @@\n #![no_std]\n #![deny(warnings)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n //! A typesafe bitmask flag generator.\n \n #[cfg(test)]"}, {"sha": "7a63592828f81ab16c57b99fae4d1722c419b134", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -21,8 +21,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "0a74fb8dc86113def8083c734d9a5af7e751c1f9", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -36,9 +36,6 @@\n #![feature(specialization)]\n #![feature(manually_drop)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-#![cfg_attr(stage0, feature(struct_field_attributes))]\n-\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "5b823f91f5ff1071e64711c8b99e3af4b9c3b56a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -27,8 +27,6 @@\n #![feature(link_args)]\n #![feature(static_nobundle)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n extern crate libc;\n #[macro_use]\n #[no_link]"}, {"sha": "81a09e7e21a642b6d8cefd8d9c177940496ea59b", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -11,8 +11,8 @@\n #![sanitizer_runtime]\n #![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(allocator_api))]\n-#![cfg_attr(not(stage0), feature(global_allocator))]\n+#![feature(allocator_api)]\n+#![feature(global_allocator)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n@@ -21,9 +21,7 @@\n \n extern crate alloc_system;\n \n-#[cfg(not(stage0))]\n use alloc_system::System;\n \n-#[cfg(not(stage0))]\n #[global_allocator]\n static ALLOC: System = System;"}, {"sha": "912c2043390f470ad1b2de454b8a40730c80ff8f", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -27,8 +27,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(collection_placement)]\n #![feature(nonzero)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n #[macro_use] extern crate log;\n extern crate graphviz as dot;\n #[macro_use]"}, {"sha": "81a09e7e21a642b6d8cefd8d9c177940496ea59b", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -11,8 +11,8 @@\n #![sanitizer_runtime]\n #![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(allocator_api))]\n-#![cfg_attr(not(stage0), feature(global_allocator))]\n+#![feature(allocator_api)]\n+#![feature(global_allocator)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n@@ -21,9 +21,7 @@\n \n extern crate alloc_system;\n \n-#[cfg(not(stage0))]\n use alloc_system::System;\n \n-#[cfg(not(stage0))]\n #[global_allocator]\n static ALLOC: System = System;"}, {"sha": "7fdba11300b928d1e7aec5f08628d8c01d941995", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -18,8 +18,6 @@\n \n #![feature(rustc_diagnostic_macros)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n #[macro_use]\n extern crate log;\n #[macro_use]"}, {"sha": "70337a91731d7483beaf553758547a5a9567e130", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -34,8 +34,6 @@\n #![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n \n-#![cfg_attr(stage0, feature(associated_consts))]\n-\n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n "}, {"sha": "d76ab31862bfc37a94eaeb96b4f87ec889e0fa33", "filename": "src/libstd/heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fheap.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -13,10 +13,9 @@\n #![unstable(issue = \"32838\", feature = \"allocator_api\")]\n \n pub use alloc::heap::{Heap, Alloc, Layout, Excess, CannotReallocInPlace, AllocErr};\n-#[cfg(not(stage0))]\n pub use alloc_system::System;\n \n-#[cfg(all(not(stage0), not(test)))]\n+#[cfg(not(test))]\n #[doc(hidden)]\n pub mod __default_lib_allocator {\n     use super::{System, Layout, Alloc, AllocErr};"}, {"sha": "7584d7532405f5da1edcf8d7b1a8a895d5bd2d8f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -318,8 +318,7 @@\n #![feature(vec_push_all)]\n #![cfg_attr(test, feature(update_panic_count))]\n \n-#![cfg_attr(not(stage0), default_lib_allocator)]\n-#![cfg_attr(stage0, feature(associated_consts))]\n+#![default_lib_allocator]\n \n // Explicitly import the prelude. The compiler uses this same unstable attribute\n // to import the prelude implicitly when building crates that depend on std."}, {"sha": "0172f89e05b6c3b71ea0444b4964fa3974cf1c31", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -110,7 +110,6 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n     }\n }\n \n-#[cfg(not(stage0))]\n /// Declare a new thread local storage key of type [`std::thread::LocalKey`].\n ///\n /// # Syntax\n@@ -152,7 +151,6 @@ macro_rules! thread_local {\n     );\n }\n \n-#[cfg(not(stage0))]\n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n            reason = \"should not be necessary\",\n@@ -185,71 +183,6 @@ macro_rules! __thread_local_inner {\n     }\n }\n \n-#[cfg(stage0)]\n-/// Declare a new thread local storage key of type `std::thread::LocalKey`.\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n-macro_rules! thread_local {\n-    // rule 0: empty (base case for the recursion)\n-    () => {};\n-\n-    // rule 1: process multiple declarations where the first one is private\n-    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* static $name: $t = $init); // go to rule 2\n-        thread_local!($($rest)*);\n-    );\n-\n-    // rule 2: handle a single private declaration\n-    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr) => (\n-        $(#[$attr])* static $name: $crate::thread::LocalKey<$t> =\n-            __thread_local_inner!($t, $init);\n-    );\n-\n-    // rule 3: handle multiple declarations where the first one is public\n-    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* pub static $name: $t = $init); // go to rule 4\n-        thread_local!($($rest)*);\n-    );\n-\n-    // rule 4: handle a single public declaration\n-    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr) => (\n-        $(#[$attr])* pub static $name: $crate::thread::LocalKey<$t> =\n-            __thread_local_inner!($t, $init);\n-    );\n-}\n-\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\",\n-           reason = \"should not be necessary\",\n-           issue = \"0\")]\n-#[macro_export]\n-#[allow_internal_unstable]\n-macro_rules! __thread_local_inner {\n-    ($t:ty, $init:expr) => {{\n-        fn __init() -> $t { $init }\n-\n-        fn __getit() -> $crate::option::Option<\n-            &'static $crate::cell::UnsafeCell<\n-                $crate::option::Option<$t>>>\n-        {\n-            #[thread_local]\n-            #[cfg(target_thread_local)]\n-            static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n-                $crate::thread::__FastLocalKeyInner::new();\n-\n-            #[cfg(not(target_thread_local))]\n-            static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n-                $crate::thread::__OsLocalKeyInner::new();\n-\n-            __KEY.get()\n-        }\n-\n-        $crate::thread::LocalKey::new(__getit, __init)\n-    }}\n-}\n-\n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"thread_local_state\",\n            reason = \"state querying was recently added\","}, {"sha": "e49b301abbf6bbaf3db26b4eee7f6ec27cd4a876", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c417ee9ae8c30ac307c58591da46cf62e91caac1/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2017-06-15\n+date: 2017-07-18\n rustc: beta\n cargo: beta\n "}, {"sha": "88aa6423a164774d09abc78a24e74e8e665f651b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=c417ee9ae8c30ac307c58591da46cf62e91caac1", "patch": "@@ -1 +1 @@\n-Subproject commit ffab51954ec32d55631c37a8730bb24915fc090b\n+Subproject commit 88aa6423a164774d09abc78a24e74e8e665f651b"}]}