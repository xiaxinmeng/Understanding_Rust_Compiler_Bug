{"sha": "b614b0e64c2990c60207aa748957728d644a5a8d", "node_id": "C_kwDOAAsO6NoAKGI2MTRiMGU2NGMyOTkwYzYwMjA3YWE3NDg5NTc3MjhkNjQ0YTVhOGQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-04-06T03:45:30Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-10-22T05:54:41Z"}, "message": "Bless tests", "tree": {"sha": "536598081b251d594226b922c5dc2a7f2b0d40ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/536598081b251d594226b922c5dc2a7f2b0d40ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b614b0e64c2990c60207aa748957728d644a5a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b614b0e64c2990c60207aa748957728d644a5a8d", "html_url": "https://github.com/rust-lang/rust/commit/b614b0e64c2990c60207aa748957728d644a5a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b614b0e64c2990c60207aa748957728d644a5a8d/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988e75bb65f688d76f4f80e0fb72ef21e831d0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/988e75bb65f688d76f4f80e0fb72ef21e831d0b0", "html_url": "https://github.com/rust-lang/rust/commit/988e75bb65f688d76f4f80e0fb72ef21e831d0b0"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "886145c1bafee4b4d8afe3729087dd68fd2fc3e4", "filename": "src/test/ui/cast/issue-88621.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr?ref=b614b0e64c2990c60207aa748957728d644a5a8d", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `Kind2` as `u8`\n-  --> $DIR/issue-88621.rs:11:13\n+  --> $DIR/issue-88621.rs:9:13\n    |\n LL |     let _ = Kind2::Foo() as u8;\n    |             ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "8cee74696295c5b3ab20c47b50dc399da5dbaeb5", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=b614b0e64c2990c60207aa748957728d644a5a8d", "patch": "@@ -1,5 +1,5 @@\n error[E0732]: `#[repr(inttype)]` must be specified\n-  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n+  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:3:1\n    |\n LL | enum Enum {\n    | ^^^^^^^^^"}, {"sha": "1335cc9d2b17ec16acc72f0e305daa0320f84af5", "filename": "src/test/ui/transmutability/enums/should_order_correctly.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs?ref=b614b0e64c2990c60207aa748957728d644a5a8d", "patch": "@@ -2,7 +2,6 @@\n //! The payloads of an enum variant should be ordered after its tag.\n \n #![crate_type = \"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n #![feature(transmutability)]\n #![allow(dead_code)]\n "}, {"sha": "f3567b405f4044bb7915d899db8ddc9715c02974", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs?ref=b614b0e64c2990c60207aa748957728d644a5a8d", "patch": "@@ -2,7 +2,6 @@\n //! an enum with a multi-byte tag.\n \n #![crate_type = \"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n #![feature(transmutability)]\n #![allow(dead_code)]\n "}, {"sha": "0845a5edf32e5ceb516f8aa7763da4e2269c3106", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b614b0e64c2990c60207aa748957728d644a5a8d/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=b614b0e64c2990c60207aa748957728d644a5a8d", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n-  --> $DIR/should_respect_endianness.rs:37:36\n+  --> $DIR/should_respect_endianness.rs:36:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n    |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/should_respect_endianness.rs:15:14\n+  --> $DIR/should_respect_endianness.rs:14:14\n    |\n LL |       pub fn is_transmutable<Src, Dst>()\n    |              --------------- required by a bound in this"}]}