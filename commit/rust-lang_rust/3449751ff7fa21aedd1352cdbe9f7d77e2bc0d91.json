{"sha": "3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDk3NTFmZjdmYTIxYWVkZDEzNTJjZGJlOWY3ZDc3ZTJiYzBkOTE=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2015-02-03T13:30:10Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2015-02-03T13:31:31Z"}, "message": "iOS: fixed build", "tree": {"sha": "7b04b88dcc94a9350867d08ea93065a8568ddbf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b04b88dcc94a9350867d08ea93065a8568ddbf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "html_url": "https://github.com/rust-lang/rust/commit/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336c8d2e9c6b276b162bdb3edd43706372e6eddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/336c8d2e9c6b276b162bdb3edd43706372e6eddd", "html_url": "https://github.com/rust-lang/rust/commit/336c8d2e9c6b276b162bdb3edd43706372e6eddd"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "50a8e6b73e3866ff2b8d66879f97d3d9bbc20de7", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "patch": "@@ -143,6 +143,7 @@ extern {\n     pub fn sigdelset(set: *mut sigset_t, signum: libc::c_int) -> libc::c_int;\n     pub fn sigemptyset(set: *mut sigset_t) -> libc::c_int;\n \n+    #[cfg(not(target_os = \"ios\"))]\n     pub fn getpwuid_r(uid: libc::uid_t,\n                       pwd: *mut passwd,\n                       buf: *mut libc::c_char,"}, {"sha": "5004ff713c45f42ffa2d13f3db39194a8b9f8936", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=3449751ff7fa21aedd1352cdbe9f7d77e2bc0d91", "patch": "@@ -307,23 +307,23 @@ pub fn args() -> Args {\n     let mut res = Vec::new();\n \n     unsafe {\n-        let processInfoSel = sel_registerName(\"processInfo\\0\".as_ptr());\n-        let argumentsSel = sel_registerName(\"arguments\\0\".as_ptr());\n-        let utf8Sel = sel_registerName(\"UTF8String\\0\".as_ptr());\n-        let countSel = sel_registerName(\"count\\0\".as_ptr());\n-        let objectAtSel = sel_registerName(\"objectAtIndex:\\0\".as_ptr());\n+        let process_info_sel = sel_registerName(\"processInfo\\0\".as_ptr());\n+        let arguments_sel = sel_registerName(\"arguments\\0\".as_ptr());\n+        let utf8_sel = sel_registerName(\"UTF8String\\0\".as_ptr());\n+        let count_sel = sel_registerName(\"count\\0\".as_ptr());\n+        let object_at_sel = sel_registerName(\"objectAtIndex:\\0\".as_ptr());\n \n         let klass = objc_getClass(\"NSProcessInfo\\0\".as_ptr());\n-        let info = objc_msgSend(klass, processInfoSel);\n-        let args = objc_msgSend(info, argumentsSel);\n+        let info = objc_msgSend(klass, process_info_sel);\n+        let args = objc_msgSend(info, arguments_sel);\n \n-        let cnt: int = mem::transmute(objc_msgSend(args, countSel));\n+        let cnt: int = mem::transmute(objc_msgSend(args, count_sel));\n         for i in range(0, cnt) {\n-            let tmp = objc_msgSend(args, objectAtSel, i);\n+            let tmp = objc_msgSend(args, object_at_sel, i);\n             let utf_c_str: *const libc::c_char =\n-                mem::transmute(objc_msgSend(tmp, utf8Sel));\n-            let bytes = ffi::c_str_to_bytes(&utf_c_str).to_vec();\n-            res.push(OsString::from_vec(bytes))\n+                mem::transmute(objc_msgSend(tmp, utf8_sel));\n+            let bytes = ffi::c_str_to_bytes(&utf_c_str);\n+            res.push(OsString::from_str(str::from_utf8(bytes).unwrap()))\n         }\n     }\n \n@@ -455,9 +455,11 @@ pub fn home_dir() -> Option<Path> {\n         Path::new(os.into_vec())\n     });\n \n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"android\",\n+              target_os = \"ios\"))]\n     unsafe fn fallback() -> Option<OsString> { None }\n-    #[cfg(not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"android\",\n+                  target_os = \"ios\")))]\n     unsafe fn fallback() -> Option<OsString> {\n         let mut amt = match libc::sysconf(c::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,"}]}