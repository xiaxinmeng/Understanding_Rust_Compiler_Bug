{"sha": "1d3042294503e6027759baadc92056403aa8c991", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMzA0MjI5NDUwM2U2MDI3NzU5YmFhZGM5MjA1NjQwM2FhOGM5OTE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-03T17:35:16Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-08T14:56:33Z"}, "message": "Enhance LocalUsedVisitor to check closure bodies", "tree": {"sha": "939bd56a0a55dc68d55089457d5e5725c55afdb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939bd56a0a55dc68d55089457d5e5725c55afdb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d3042294503e6027759baadc92056403aa8c991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3042294503e6027759baadc92056403aa8c991", "html_url": "https://github.com/rust-lang/rust/commit/1d3042294503e6027759baadc92056403aa8c991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d3042294503e6027759baadc92056403aa8c991/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14", "html_url": "https://github.com/rust-lang/rust/commit/4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "75a973fe37eb3dfec870d402515d77d1838dfe0b", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleMatch {\n     }\n }\n \n-fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n+fn check_arm<'tcx>(arm: &Arm<'tcx>, wild_outer_arm: &Arm<'tcx>, cx: &LateContext<'tcx>) {\n     if_chain! {\n         let expr = strip_singleton_blocks(arm.body);\n         if let ExprKind::Match(expr_in, arms_inner, _) = expr.kind;\n@@ -84,14 +84,13 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         // the \"wild-like\" branches must be equal\n         if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n         // the binding must not be used in the if guard\n+        let mut used_visitor = LocalUsedVisitor::new(cx, binding_id);\n         if match arm.guard {\n             None => true,\n-            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => {\n-                !LocalUsedVisitor::new(binding_id).check_expr(expr)\n-            }\n+            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => !used_visitor.check_expr(expr),\n         };\n         // ...or anywhere in the inner match\n-        if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n+        if !arms_inner.iter().any(|arm| used_visitor.check_arm(arm));\n         then {\n             span_lint_and_then(\n                 cx,"}, {"sha": "5863eef8a26f804db9a5a5d212cfaf061ac6bfba", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -63,10 +63,11 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.kind;\n-                if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n+                let mut used_visitor = LocalUsedVisitor::new(cx, canonical_id);\n+                if !used_visitor.check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n-                if let Some(value) = check_assign(canonical_id, &*then);\n-                if !LocalUsedVisitor::new(canonical_id).check_expr(value);\n+                if let Some(value) = check_assign(cx, canonical_id, &*then);\n+                if !used_visitor.check_expr(value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n@@ -78,7 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n \n                     let (default_multi_stmts, default) = if let Some(ref else_) = *else_ {\n                         if let hir::ExprKind::Block(ref else_, _) = else_.kind {\n-                            if let Some(default) = check_assign(canonical_id, else_) {\n+                            if let Some(default) = check_assign(cx, canonical_id, else_) {\n                                 (else_.stmts.len() > 1, default)\n                             } else if let Some(ref default) = local.init {\n                                 (true, &**default)\n@@ -133,15 +134,19 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n     }\n }\n \n-fn check_assign<'tcx>(decl: hir::HirId, block: &'tcx hir::Block<'_>) -> Option<&'tcx hir::Expr<'tcx>> {\n+fn check_assign<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    decl: hir::HirId,\n+    block: &'tcx hir::Block<'_>,\n+) -> Option<&'tcx hir::Expr<'tcx>> {\n     if_chain! {\n         if block.expr.is_none();\n         if let Some(expr) = block.stmts.iter().last();\n         if let hir::StmtKind::Semi(ref expr) = expr.kind;\n         if let hir::ExprKind::Assign(ref var, ref value, _) = expr.kind;\n         if path_to_local_id(var, decl);\n         then {\n-            let mut v = LocalUsedVisitor::new(decl);\n+            let mut v = LocalUsedVisitor::new(cx, decl);\n \n             if block.stmts.iter().take(block.stmts.len()-1).any(|stmt| v.check_stmt(stmt)) {\n                 return None;"}, {"sha": "eb185377e209471f5bf9c34c28bb9f9001e23c28", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -1893,8 +1893,8 @@ fn check_for_loop_over_map_kv<'tcx>(\n             let arg_span = arg.span;\n             let (new_pat_span, kind, ty, mutbl) = match *cx.typeck_results().expr_ty(arg).kind() {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n-                    (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n+                    (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", ty, mutbl),\n+                    (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n                     _ => return,\n                 },\n                 _ => return,\n@@ -2145,11 +2145,11 @@ fn check_for_mutation<'tcx>(\n }\n \n /// Returns `true` if the pattern is a `PatWild` or an ident prefixed with `_`.\n-fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+fn pat_is_wild<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n         PatKind::Binding(_, id, ident, None) if ident.as_str().starts_with('_') => {\n-            !LocalUsedVisitor::new(id).check_expr(body)\n+            !LocalUsedVisitor::new(cx, id).check_expr(body)\n         },\n         _ => false,\n     }\n@@ -2188,7 +2188,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             then {\n                 let index_used_directly = path_to_local_id(idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n+                    let mut used_visitor = LocalUsedVisitor::new(self.cx, self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };"}, {"sha": "e33001b16bcde20b2a172738dcf71d98628d1f1f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -911,7 +911,7 @@ fn check_overlapping_arms<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'_>, arms\n     }\n }\n \n-fn check_wild_err_arm(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n+fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'tcx>]) {\n     let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     if is_type_diagnostic_item(cx, ex_ty, sym::result_type) {\n         for arm in arms {\n@@ -924,7 +924,9 @@ fn check_wild_err_arm(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                         // Looking for unused bindings (i.e.: `_e`)\n                         inner.iter().for_each(|pat| {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n-                                if ident.as_str().starts_with('_') && !LocalUsedVisitor::new(id).check_expr(arm.body) {\n+                                if ident.as_str().starts_with('_')\n+                                    && !LocalUsedVisitor::new(cx, id).check_expr(arm.body)\n+                                {\n                                     ident_bind_name = (&ident.name.as_str()).to_string();\n                                     matching_wild = true;\n                                 }"}, {"sha": "24409346ca687c65e5a1c373bcc8cbf2082bd599", "filename": "clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -133,14 +133,16 @@ where\n     }\n }\n \n-pub struct LocalUsedVisitor {\n+pub struct LocalUsedVisitor<'hir> {\n+    hir: Map<'hir>,\n     pub local_hir_id: HirId,\n     pub used: bool,\n }\n \n-impl LocalUsedVisitor {\n-    pub fn new(local_hir_id: HirId) -> Self {\n+impl<'hir> LocalUsedVisitor<'hir> {\n+    pub fn new(cx: &LateContext<'hir>, local_hir_id: HirId) -> Self {\n         Self {\n+            hir: cx.tcx.hir(),\n             local_hir_id,\n             used: false,\n         }\n@@ -151,23 +153,26 @@ impl LocalUsedVisitor {\n         std::mem::replace(&mut self.used, false)\n     }\n \n-    pub fn check_arm(&mut self, arm: &Arm<'_>) -> bool {\n+    pub fn check_arm(&mut self, arm: &'hir Arm<'_>) -> bool {\n         self.check(arm, Self::visit_arm)\n     }\n \n-    pub fn check_expr(&mut self, expr: &Expr<'_>) -> bool {\n+    pub fn check_expr(&mut self, expr: &'hir Expr<'_>) -> bool {\n         self.check(expr, Self::visit_expr)\n     }\n \n-    pub fn check_stmt(&mut self, stmt: &Stmt<'_>) -> bool {\n+    pub fn check_stmt(&mut self, stmt: &'hir Stmt<'_>) -> bool {\n         self.check(stmt, Self::visit_stmt)\n     }\n }\n \n-impl<'v> Visitor<'v> for LocalUsedVisitor {\n+impl<'v> Visitor<'v> for LocalUsedVisitor<'v> {\n     type Map = Map<'v>;\n \n     fn visit_expr(&mut self, expr: &'v Expr<'v>) {\n+        if self.used {\n+            return;\n+        }\n         if path_to_local_id(expr, self.local_hir_id) {\n             self.used = true;\n         } else {\n@@ -176,6 +181,6 @@ impl<'v> Visitor<'v> for LocalUsedVisitor {\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n+        NestedVisitorMap::OnlyBodies(self.hir)\n     }\n }"}, {"sha": "3294da7e8146f51abf10979c63958c70e975fbd7", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d3042294503e6027759baadc92056403aa8c991/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3042294503e6027759baadc92056403aa8c991/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=1d3042294503e6027759baadc92056403aa8c991", "patch": "@@ -224,6 +224,14 @@ fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u\n         },\n         _ => return,\n     }\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            let _ = || {\n+                // usage in closure\n+                println!(\"{:?}\", val);\n+            };\n+        }\n+    }\n }\n \n fn make<T>() -> T {"}]}