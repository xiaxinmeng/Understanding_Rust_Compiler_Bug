{"sha": "809ca13bfa79211aebeef3491f1553ee22fde45b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOWNhMTNiZmE3OTIxMWFlYmVlZjM0OTFmMTU1M2VlMjJmZGU0NWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-17T00:13:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-17T00:13:43Z"}, "message": "fix minor merge errors", "tree": {"sha": "a9cdd661b25fd090c4443d30fbd0569cfad2d40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9cdd661b25fd090c4443d30fbd0569cfad2d40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/809ca13bfa79211aebeef3491f1553ee22fde45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/809ca13bfa79211aebeef3491f1553ee22fde45b", "html_url": "https://github.com/rust-lang/rust/commit/809ca13bfa79211aebeef3491f1553ee22fde45b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/809ca13bfa79211aebeef3491f1553ee22fde45b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22ad0752f9bbe5dc8c9deae99a10b3fc5c8e1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22ad0752f9bbe5dc8c9deae99a10b3fc5c8e1e3", "html_url": "https://github.com/rust-lang/rust/commit/c22ad0752f9bbe5dc8c9deae99a10b3fc5c8e1e3"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "e2d8811a4adb6cade9cf4caf3a55385d10a4a589", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/809ca13bfa79211aebeef3491f1553ee22fde45b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809ca13bfa79211aebeef3491f1553ee22fde45b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=809ca13bfa79211aebeef3491f1553ee22fde45b", "patch": "@@ -5394,17 +5394,17 @@ fn c_stack_tys(ccx: @crate_ctxt,\n //\n fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod) {\n     fn build_shim_fn(lcx: @local_ctxt,\n-                     link_name: str,\n                      native_item: @ast::native_item,\n                      llshimfn: ValueRef,\n                      cc: uint) {\n+        let lname = link_name(native_item);\n         let ccx = lcx_ccx(lcx);\n         let span = native_item.span;\n         let id = native_item.id;\n         let tys = c_stack_tys(ccx, span, id);\n \n         // Declare the \"prototype\" for the base function F:\n-        let llbasefn = decl_fn(ccx.llmod, link_name, cc, tys.base_fn_ty);\n+        let llbasefn = decl_fn(ccx.llmod, lname, cc, tys.base_fn_ty);\n \n         // Declare the body of the shim function:\n         let fcx = new_fn_ctxt(lcx, span, llshimfn);\n@@ -5432,13 +5432,6 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod) {\n         finish_fn(fcx, lltop);\n     }\n \n-    fn select_link_name(user_name: option::t<str>, rust_name: str) -> str {\n-        ret alt user_name {\n-          some(n) { n }\n-          none. { rust_name }\n-        };\n-    }\n-\n     let ccx = lcx_ccx(lcx);\n     let cc: uint = lib::llvm::LLVMCCallConv;\n     alt native_mod.abi {\n@@ -5450,12 +5443,11 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod) {\n     for native_item in native_mod.items {\n       alt native_item.node {\n         ast::native_item_ty. {}\n-        ast::native_item_fn(name, fn_decl, _) {\n+        ast::native_item_fn(fn_decl, _) {\n           let id = native_item.id;\n           alt ccx.item_ids.find(id) {\n             some(llshimfn) {\n-              let link_name = select_link_name(name, native_item.ident);\n-              build_shim_fn(lcx, link_name, native_item, llshimfn, cc);\n+              build_shim_fn(lcx, native_item, llshimfn, cc);\n             }\n \n             none. {\n@@ -5753,16 +5745,20 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, _path: [str], name: str,\n \n fn item_path(item: @ast::item) -> [str] { ret [item.ident]; }\n \n+fn link_name(i: @ast::native_item) -> str {\n+    alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n+      none. { ret i.ident; }\n+      option::some(ln) { ret ln; }\n+    }\n+}\n+\n+\n fn collect_native_item(ccx: @crate_ctxt, i: @ast::native_item, &&pt: [str],\n                        _v: vt<[str]>) {\n     alt i.node {\n       ast::native_item_fn(_, _) {\n         if !ccx.obj_methods.contains_key(i.id) {\n-            let name = i.ident;\n-            alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n-              none. { }\n-              option::some(ln) { name = ln; }\n-            }\n+            let name = link_name(i);\n             register_native_fn(ccx, i.span, pt, name, i.id);\n         }\n       }\n@@ -6163,6 +6159,5 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //"}, {"sha": "8ffe9f7b9618c8cbe3460f5621cc24b9d4e43e04", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/809ca13bfa79211aebeef3491f1553ee22fde45b/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809ca13bfa79211aebeef3491f1553ee22fde45b/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=809ca13bfa79211aebeef3491f1553ee22fde45b", "patch": "@@ -47,18 +47,18 @@ native mod libc {\n }\n \n mod libc_constants {\n-    const O_RDONLY: int   = 0i32;\n-    const O_WRONLY: int   = 1i32;\n-    const O_RDWR: int     = 2i32;\n-    const O_APPEND: int   = 8i32;\n-    const O_CREAT: int    = 512i32;\n-    const O_EXCL: int     = 2048i32;\n-    const O_TRUNC: int    = 1024i32;\n-    const O_TEXT: int     = 0i32;    // nonexistent in darwin libc\n-    const O_BINARY: int   = 0i32;    // nonexistent in darwin libc\n-\n-    const S_IRUSR: uint   = 256u32;\n-    const S_IWUSR: uint   = 128u32;\n+    const O_RDONLY: c_int   = 0i32;\n+    const O_WRONLY: c_int   = 1i32;\n+    const O_RDWR: c_int     = 2i32;\n+    const O_APPEND: c_int   = 8i32;\n+    const O_CREAT: c_int    = 512i32;\n+    const O_EXCL: c_int     = 2048i32;\n+    const O_TRUNC: c_int    = 1024i32;\n+    const O_TEXT: c_int     = 0i32;    // nonexistent in darwin libc\n+    const O_BINARY: c_int   = 0i32;    // nonexistent in darwin libc\n+\n+    const S_IRUSR: unsigned = 256u32;\n+    const S_IWUSR: unsigned = 128u32;\n }\n \n fn pipe() -> {in: fd_t, out: fd_t} {\n@@ -92,7 +92,9 @@ native mod rustrt {\n \n fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n \n-native \"cdecl\" mod mac_libc = \"\" {\n+#[link_name = \"\"]\n+#[abi = \"cdecl\"]\n+native mod mac_libc {\n     fn _NSGetExecutablePath(buf: str::sbuf,\n                             bufsize: *mutable uint32_t) -> c_int;\n }"}]}