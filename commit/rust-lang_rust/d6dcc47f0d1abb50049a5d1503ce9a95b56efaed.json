{"sha": "d6dcc47f0d1abb50049a5d1503ce9a95b56efaed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZGNjNDdmMGQxYWJiNTAwNDlhNWQxNTAzY2U5YTk1YjU2ZWZhZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-29T08:22:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:28Z"}, "message": "Handle errors for intra doc link path lookup", "tree": {"sha": "d8150520401e986f739c2bad2cac613ce1b59777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8150520401e986f739c2bad2cac613ce1b59777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed", "html_url": "https://github.com/rust-lang/rust/commit/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140e77f71d227779a1520aabe10c74d2b7b80d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/140e77f71d227779a1520aabe10c74d2b7b80d5f", "html_url": "https://github.com/rust-lang/rust/commit/140e77f71d227779a1520aabe10c74d2b7b80d5f"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "206de77b00efe6d0be3bca454e4caf864796a4ff", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcc47f0d1abb50049a5d1503ce9a95b56efaed/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d6dcc47f0d1abb50049a5d1503ce9a95b56efaed", "patch": "@@ -34,7 +34,6 @@ use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::lowering::Resolver;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, AdtKind};\n use rustc::middle::stability;\n@@ -826,25 +825,25 @@ impl Clean<Attributes> for [ast::Attribute] {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n             for link in markdown_links(&dox, cx.render_type) {\n                 let path = {\n-                    let is_value: bool;\n+                    let is_value;\n                     let path_str = if let Some(prefix) =\n                         [\"struct\", \"enum\", \"type\", \"trait\", \"union\"].iter()\n                                                                     .find(|p| link.starts_with(**p)) {\n-                        is_value = false;\n+                        is_value = Some(false);\n                         link.trim_left_matches(prefix).trim()\n                     } else if let Some(prefix) =\n                         [\"const\", \"static\"].iter()\n                                            .find(|p| link.starts_with(**p)) {\n-                        is_value = true;\n+                        is_value = Some(true);\n                         link.trim_left_matches(prefix).trim()\n                     } else if link.ends_with(\"()\") {\n-                        is_value = true;\n+                        is_value = Some(true);\n                         link.trim_right_matches(\"()\").trim()\n                     } else if link.ends_with(\"!\") {\n                         // FIXME (misdreavus): macros are resolved with different machinery\n                         continue;\n                     } else {\n-                        is_value = false;\n+                        is_value = None;\n                         link.trim()\n                     };\n \n@@ -862,12 +861,34 @@ impl Clean<Attributes> for [ast::Attribute] {\n                     // but it can't because that would break object safety. This can still be\n                     // fixed.\n                     let components = path_str.split(\"::\").skip(1).collect::<Vec<_>>();\n-                    cx.resolver.borrow_mut().resolve_str_path(DUMMY_SP, None, &components, is_value)\n+                    let resolve = |is_val| cx.resolver.borrow_mut().resolve_str_path_error(DUMMY_SP, None, &components, is_val);\n+\n+                    if let Some(is_value) = is_value {\n+                        if let Ok(path) = resolve(is_value) {\n+                            path\n+                        } else {\n+                            // this could just be a normal link or a broken link\n+                            // we could potentially check if something is\n+                            // \"intra-doc-link-like\" and warn in that case\n+                            continue;\n+                        }\n+                    } else {\n+                        // try both!\n+                        // It is imperative we search for not-a-value first\n+                        // Otherwise we will find struct ctors for when we are looking\n+                        // for structs, etc, and the link won't work.\n+                        if let Ok(path) = resolve(false) {\n+                            path\n+                        } else if let Ok(path) = resolve(true) {\n+                            path\n+                        } else {\n+                            // this could just be a normal link\n+                            continue;\n+                        }\n+                    }\n                 };\n \n-                if path.def != Def::Err {\n-                    attrs.links.push((link, path.def.def_id()));\n-                }\n+                attrs.links.push((link, path.def.def_id()));\n             }\n \n             cx.sess().abort_if_errors();"}]}