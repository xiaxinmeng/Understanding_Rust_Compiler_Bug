{"sha": "2f3789474042e16f0fb35d1a03d1acfce151774e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzc4OTQ3NDA0MmUxNmYwZmIzNWQxYTAzZDFhY2ZjZTE1MTc3NGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-11T17:48:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-11T23:47:01Z"}, "message": "Add E0610", "tree": {"sha": "bc12b6e368de520b8c3bfcb7ea28e624d1c48ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc12b6e368de520b8c3bfcb7ea28e624d1c48ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3789474042e16f0fb35d1a03d1acfce151774e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3789474042e16f0fb35d1a03d1acfce151774e", "html_url": "https://github.com/rust-lang/rust/commit/2f3789474042e16f0fb35d1a03d1acfce151774e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3789474042e16f0fb35d1a03d1acfce151774e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "html_url": "https://github.com/rust-lang/rust/commit/f4dd365bbb362a0aab0beaa31db73bf55d6a0481"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "eea767cd868a4cfd57a513ecc3b45f63f84d878c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -465,6 +465,24 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n+impl<'tcx> TyS<'tcx> {\n+    pub fn is_primitive_ty(&self) -> bool {\n+        match self.sty {\n+            TypeVariants::TyBool |\n+                TypeVariants::TyChar |\n+                TypeVariants::TyInt(_) |\n+                TypeVariants::TyUint(_) |\n+                TypeVariants::TyFloat(_) |\n+                TypeVariants::TyInfer(InferTy::IntVar(_)) |\n+                TypeVariants::TyInfer(InferTy::FloatVar(_)) |\n+                TypeVariants::TyInfer(InferTy::FreshIntTy(_)) |\n+                TypeVariants::TyInfer(InferTy::FreshFloatTy(_)) => true,\n+            TypeVariants::TyRef(_, x) => x.ty.is_primitive_ty(),\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::TyS<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,"}, {"sha": "60bf321277cfded05a97c62ade5b39eed794710e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -2921,29 +2921,34 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .emit();\n             self.tcx().types.err\n         } else {\n-            let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0609,\n-                                             \"no field `{}` on type `{}`\",\n-                                             field.node, expr_t);\n-            match expr_t.sty {\n-                ty::TyAdt(def, _) if !def.is_enum() => {\n-                    if let Some(suggested_field_name) =\n-                        Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n-                            err.span_label(field.span,\n-                                           format!(\"did you mean `{}`?\", suggested_field_name));\n-                        } else {\n-                            err.span_label(field.span,\n-                                           \"unknown field\");\n-                        };\n-                }\n-                ty::TyRawPtr(..) => {\n-                    err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n-                                      `(*{0}).{1}`\",\n-                                      self.tcx.hir.node_to_pretty_string(base.id),\n-                                      field.node));\n+            if !expr_t.is_primitive_ty() {\n+                let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0609,\n+                                                 \"no field `{}` on type `{}`\",\n+                                                 field.node, expr_t);\n+                match expr_t.sty {\n+                    ty::TyAdt(def, _) if !def.is_enum() => {\n+                        if let Some(suggested_field_name) =\n+                            Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n+                                err.span_label(field.span,\n+                                               format!(\"did you mean `{}`?\", suggested_field_name));\n+                            } else {\n+                                err.span_label(field.span, \"unknown field\");\n+                            };\n+                    }\n+                    ty::TyRawPtr(..) => {\n+                        err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref \\\n+                                           with `(*{0}).{1}`\",\n+                                          self.tcx.hir.node_to_pretty_string(base.id),\n+                                          field.node));\n+                    }\n+                    _ => {}\n                 }\n-                _ => {}\n-            }\n-            err.emit();\n+                err\n+            } else {\n+                type_error_struct!(self.tcx().sess, field.span, expr_t, E0610,\n+                                   \"`{}` is a primitive type and therefore doesn't have fields\",\n+                                   expr_t)\n+            }.emit();\n             self.tcx().types.err\n         }\n     }"}, {"sha": "6ccfab0a324b67b70cc0870bf877ccdb07db0120", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -4096,7 +4096,7 @@ assert_eq!(!Question::No, true);\n \"##,\n \n E0609: r##\"\n-An attempt to access a non-existent field in a struct was performed.\n+Attempted to access a non-existent field in a struct.\n \n Erroneous code example:\n \n@@ -4109,8 +4109,8 @@ let s = StructWithFields { x: 0 };\n println!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n ```\n \n-To fix this error, check if you didn't misspell the field's name or that the\n-field actually exist. Example:\n+To fix this error, check that you didn't misspell the field's name or that the\n+field actually exists. Example:\n \n ```\n struct StructWithFields {\n@@ -4122,6 +4122,36 @@ println!(\"{}\", s.x); // ok!\n ```\n \"##,\n \n+E0610: r##\"\n+Attempted to access a field on a primitive type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0610\n+let x: u32 = 0;\n+println!(\"{}\", x.foo); // error: `{integer}` is a primitive type, therefore\n+                       //        doesn't have fields\n+```\n+\n+Primitive types are the most basic types available in Rust and don't have\n+fields. To access data via named fields, struct types are used. Example:\n+\n+```\n+// We declare struct called `Foo` containing two fields:\n+struct Foo {\n+    x: u32,\n+    y: i64,\n+}\n+\n+// We create an instance of this struct:\n+let variable = Foo { x: 0, y: -12 };\n+// And we can now access its fields:\n+println!(\"x: {}, y: {}\", variable.x, variable.y);\n+```\n+\n+For more information see The Rust Book: https://doc.rust-lang.org/book/\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "522d8b0b9438f2ebf3d4e297b34b549066bfa921", "filename": "src/test/compile-fail/E0610.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2FE0610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2FE0610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0610.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 0;\n+    let _ = x.foo; //~ ERROR E0610\n+}"}, {"sha": "3d6c46f5ce3e15f1c27244c5502ade6e97de5d12", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -11,6 +11,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    let _ = x.foo; //~ no field `foo` on type `{integer}`\n-    let _ = x.bar; //~ no field `bar` on type `{integer}`\n+    let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n }"}, {"sha": "619ad74ad00e238df082a12296aa2e18eea53788", "filename": "src/test/compile-fail/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    1.create_a_type_error[ //~ no field `create_a_type_error` on type `{integer}`\n+    1.create_a_type_error[ //~ `{integer}` is a primitive type and therefore doesn't have fields\n         ()+() //~ ERROR binary operation `+` cannot be applied\n               //   ^ ensure that we typeck the inner expression ^\n     ];"}, {"sha": "7dedfcf27275bf7d9832e02241ac4d494a73bae8", "filename": "src/test/compile-fail/parse-error-correct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     let y = 42;\n     let x = y.;  //~ ERROR unexpected token\n     let x = y.();  //~ ERROR unexpected token\n-    let x = y.foo; //~ ERROR no field\n+    let x = y.foo; //~ ERROR `{integer}` is a primitive type and therefore doesn't have fields [E061\n }"}, {"sha": "95db694a0c61f7c607f282f20fc572023fd0f569", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f3789474042e16f0fb35d1a03d1acfce151774e/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=2f3789474042e16f0fb35d1a03d1acfce151774e", "patch": "@@ -7,7 +7,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 50 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n-error[E0609]: no field `fake` on type `{integer}`\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:21:13\n    |\n 21 |           1.fake\n@@ -34,7 +34,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 54 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n-error[E0609]: no field `fake` on type `{integer}`\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:39:13\n    |\n 39 |           1.fake"}]}