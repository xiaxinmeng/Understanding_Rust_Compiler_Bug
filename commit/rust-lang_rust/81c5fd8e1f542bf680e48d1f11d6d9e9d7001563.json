{"sha": "81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYzVmZDhlMWY1NDJiZjY4MGU0OGQxZjExZDZkOWU5ZDcwMDE1NjM=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-01-15T06:54:51Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-01-15T06:54:51Z"}, "message": "Allow get_tydesc intrinsic to accept unsized types\n\nFix tabs\n\nAdded missing ty_str cases when generating type descriptions\n\nReduce code duplication and improve test", "tree": {"sha": "54decb494014787036148de821a4a805be05c44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54decb494014787036148de821a4a805be05c44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "html_url": "https://github.com/rust-lang/rust/commit/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8", "html_url": "https://github.com/rust-lang/rust/commit/6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "978e8a19737b4a6164f78aeab68dcf55ae824c45", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "patch": "@@ -198,6 +198,10 @@ extern \"rust-intrinsic\" {\n     pub fn pref_align_of<T>() -> uint;\n \n     /// Get a static pointer to a type descriptor.\n+    #[cfg(not(stage0))]\n+    pub fn get_tydesc<T: ?Sized>() -> *const TyDesc;\n+\n+    #[cfg(stage0)]\n     pub fn get_tydesc<T>() -> *const TyDesc;\n \n     /// Gets an identifier which is globally unique to the specified type. This"}, {"sha": "d3f3f34b76bbb3e3e079df5de26d51c95bc51e11", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "patch": "@@ -346,12 +346,14 @@ fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, info:\n             let align_ptr = GEPi(bcx, info, &[2u]);\n             (Load(bcx, size_ptr), Load(bcx, align_ptr))\n         }\n-        ty::ty_vec(unit_ty, None) => {\n-            // The info in this case is the length of the vec, so the size is that\n+        ty::ty_vec(_, None) | ty::ty_str => {\n+            let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n+            // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n             let llunit_ty = sizing_type_of(bcx.ccx(), unit_ty);\n+            let unit_align = llalign_of_min(bcx.ccx(), llunit_ty);\n             let unit_size = llsize_of_alloc(bcx.ccx(), llunit_ty);\n-            (Mul(bcx, info, C_uint(bcx.ccx(), unit_size)), C_uint(bcx.ccx(), 8u))\n+            (Mul(bcx, info, C_uint(bcx.ccx(), unit_size)), C_uint(bcx.ccx(), unit_align))\n         }\n         _ => bcx.sess().bug(&format!(\"Unexpected unsized type, found {}\",\n                                     bcx.ty_to_string(t))[])\n@@ -456,8 +458,11 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                  &[PointerCast(bcx, Load(bcx, lluniquevalue), Type::i8p(bcx.ccx()))],\n                  None);\n             bcx\n-        }\n-        ty::ty_vec(ty, None) => tvec::make_drop_glue_unboxed(bcx, v0, ty, false),\n+        },\n+        ty::ty_vec(_, None) | ty::ty_str => {\n+            let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n+            tvec::make_drop_glue_unboxed(bcx, v0, unit_ty, false)\n+        },\n         _ => {\n             assert!(type_is_sized(bcx.tcx(), t));\n             if type_needs_drop(bcx.tcx(), t) &&"}, {"sha": "cbce577451faf94834d0cd35cfea55d7ebe40676", "filename": "src/test/run-pass/issue-21058.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unstable)]\n+\n+struct NT(str);\n+struct DST { a: u32, b: str }\n+\n+fn main() {\n+    // get_tydesc should support unsized types\n+    assert!(unsafe {(\n+        // Slice\n+        (*std::intrinsics::get_tydesc::<[u8]>()).name,\n+        // str\n+        (*std::intrinsics::get_tydesc::<str>()).name,\n+        // Trait\n+        (*std::intrinsics::get_tydesc::<Copy>()).name,\n+        // Newtype\n+        (*std::intrinsics::get_tydesc::<NT>()).name,\n+        // DST\n+        (*std::intrinsics::get_tydesc::<DST>()).name\n+    )} == (\"[u8]\", \"str\", \"core::marker::Copy + 'static\", \"NT\", \"DST\"));\n+}"}]}