{"sha": "c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MmVjM2Q5OTg2ZDQ1MjI0ZDRjNjRiYTliN2IyMmMxZDFkMGFmYjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-11T06:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-11T06:28:32Z"}, "message": "Merge #9208\n\n9208: minor: Populate import maps eagerly to speed up flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nPart of #7542\r\nFollow up of https://github.com/rust-analyzer/rust-analyzer/pull/9206#issuecomment-859097783\r\nReduces `import_on_the_fly @ sel` case in the `integrated_completion_benchmark` by ~300ms.\r\n\r\n\r\nAlso enables cache priming for manual workspace loading to reflect the results in the benchmarks.\r\n\r\nBefore:\r\n<img width=\"1198\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/121606148-4a734a80-ca56-11eb-812a-7955e93817f1.png\">\r\n\r\n\r\nAfter:\r\n<img width=\"1200\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/121606156-4e06d180-ca56-11eb-891b-1ed878b53d7e.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "e69382ca1a8c98a0ff2fd6e0395d6b379f80f705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e69382ca1a8c98a0ff2fd6e0395d6b379f80f705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwwKQCRBK7hj4Ov3rIwAAVX8IAJI8FfE0WaFUV4+L9j017WJV\ns63tw2lm22hWcPQirMqozTENBqLsgTfGF60JQCDh02f+6dmAK5i47hQtkm+gkRRK\npaVC8YnhPNXjr5zrmEebgqfPKsB4uzaDNQKeElhyYnr1lxaiKPG0j9aFE49D67Zx\nw44Fnz4Gb45HzKWLbAFL2b0IB2gz57PKdfl3oFosQ8MaoKMZBJiP2eg7LH4W8cGG\nznFmZbx0Ala3AgBm/ePgPqUmQTNTjSxkgj/ai6m9Ysg3DMhWWGdbZ+KKsiApIp0v\n/febWbf7GRCjB58RMgfJkbT/erjdPE14gnJ45uGxYL80JCo3Ta+CQTKcs0llcPc=\n=OBsB\n-----END PGP SIGNATURE-----\n", "payload": "tree e69382ca1a8c98a0ff2fd6e0395d6b379f80f705\nparent c4c1fcb8e902adcc7879996fa7f53200fb36ce33\nparent 339448157c479f724ae22fce6d5fa78f76c59720\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623392912 +0000\ncommitter GitHub <noreply@github.com> 1623392912 +0000\n\nMerge #9208\n\n9208: minor: Populate import maps eagerly to speed up flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nPart of #7542\r\nFollow up of https://github.com/rust-analyzer/rust-analyzer/pull/9206#issuecomment-859097783\r\nReduces `import_on_the_fly @ sel` case in the `integrated_completion_benchmark` by ~300ms.\r\n\r\n\r\nAlso enables cache priming for manual workspace loading to reflect the results in the benchmarks.\r\n\r\nBefore:\r\n<img width=\"1198\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/121606148-4a734a80-ca56-11eb-812a-7955e93817f1.png\">\r\n\r\n\r\nAfter:\r\n<img width=\"1200\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2690773/121606156-4e06d180-ca56-11eb-891b-1ed878b53d7e.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "html_url": "https://github.com/rust-lang/rust/commit/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c1fcb8e902adcc7879996fa7f53200fb36ce33", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c1fcb8e902adcc7879996fa7f53200fb36ce33", "html_url": "https://github.com/rust-lang/rust/commit/c4c1fcb8e902adcc7879996fa7f53200fb36ce33"}, {"sha": "339448157c479f724ae22fce6d5fa78f76c59720", "url": "https://api.github.com/repos/rust-lang/rust/commits/339448157c479f724ae22fce6d5fa78f76c59720", "html_url": "https://github.com/rust-lang/rust/commit/339448157c479f724ae22fce6d5fa78f76c59720"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "36801c964b52e189d10b038b897ad1004e3386b2", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -33,14 +33,15 @@ pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress)\n     // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that.\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n     // cancellation, so we cannot use rayon.\n-    for (i, krate) in topo.iter().enumerate() {\n-        let crate_name = graph[*krate].display_name.as_deref().unwrap_or_default().to_string();\n+    for (i, &crate_id) in topo.iter().enumerate() {\n+        let crate_name = graph[crate_id].display_name.as_deref().unwrap_or_default().to_string();\n \n         cb(PrimeCachesProgress::StartedOnCrate {\n             on_crate: crate_name,\n             n_done: i,\n             n_total: topo.len(),\n         });\n-        db.crate_def_map(*krate);\n+        db.crate_def_map(crate_id);\n+        db.import_map(crate_id);\n     }\n }"}, {"sha": "25ebcc0ece3287737f43d40bde52b2b7486dfc2e", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -16,7 +16,6 @@ use vfs::Vfs;\n pub use self::{\n     analysis_stats::AnalysisStatsCmd,\n     diagnostics::diagnostics,\n-    load_cargo::{load_workspace, load_workspace_at, LoadCargoConfig},\n     ssr::{apply_ssr_rules, search_for_patterns},\n };\n "}, {"sha": "843c0ca37b0e397e682647fdaaa50bb227f33145", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -70,6 +70,7 @@ impl AnalysisStatsCmd {\n             load_out_dirs_from_check: self.enable_build_scripts,\n             wrap_rustc: false,\n             with_proc_macro: self.enable_proc_macros,\n+            prefill_caches: false,\n         };\n         let (host, vfs, _proc_macro) =\n             load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;"}, {"sha": "dc9a390fe991eb733fc387051173dd5d8dedb379", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -34,8 +34,12 @@ pub fn diagnostics(\n     with_proc_macro: bool,\n ) -> Result<()> {\n     let cargo_config = Default::default();\n-    let load_cargo_config =\n-        LoadCargoConfig { load_out_dirs_from_check, with_proc_macro, wrap_rustc: false };\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check,\n+        with_proc_macro,\n+        wrap_rustc: false,\n+        prefill_caches: false,\n+    };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "19cb1c046d8275d859ca2a4ef5ac657bf26e8850", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -14,13 +14,14 @@ use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{ProjectFolders, SourceRootConfig};\n \n-pub struct LoadCargoConfig {\n-    pub load_out_dirs_from_check: bool,\n-    pub wrap_rustc: bool,\n-    pub with_proc_macro: bool,\n+pub(crate) struct LoadCargoConfig {\n+    pub(crate) load_out_dirs_from_check: bool,\n+    pub(crate) wrap_rustc: bool,\n+    pub(crate) with_proc_macro: bool,\n+    pub(crate) prefill_caches: bool,\n }\n \n-pub fn load_workspace_at(\n+pub(crate) fn load_workspace_at(\n     root: &Path,\n     cargo_config: &CargoConfig,\n     load_config: &LoadCargoConfig,\n@@ -33,7 +34,7 @@ pub fn load_workspace_at(\n     load_workspace(workspace, load_config, progress)\n }\n \n-pub fn load_workspace(\n+fn load_workspace(\n     ws: ProjectWorkspace,\n     config: &LoadCargoConfig,\n     progress: &dyn Fn(String),\n@@ -82,6 +83,10 @@ pub fn load_workspace(\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n     let host =\n         load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n+\n+    if config.prefill_caches {\n+        host.analysis().prime_caches(|_| {})?;\n+    }\n     Ok((host, vfs, proc_macro_client))\n }\n \n@@ -144,6 +149,7 @@ mod tests {\n             load_out_dirs_from_check: false,\n             wrap_rustc: false,\n             with_proc_macro: false,\n+            prefill_caches: false,\n         };\n         let (host, _vfs, _proc_macro) =\n             load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;"}, {"sha": "0b3475e092812bb0012febd29dac0b9ac87caa5b", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -13,6 +13,7 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n         load_out_dirs_from_check: true,\n         wrap_rustc: false,\n         with_proc_macro: true,\n+        prefill_caches: false,\n     };\n     let (host, vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n@@ -39,8 +40,12 @@ pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<Stri\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n     let cargo_config = Default::default();\n-    let load_cargo_config =\n-        LoadCargoConfig { load_out_dirs_from_check: true, wrap_rustc: true, with_proc_macro: true };\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check: true,\n+        wrap_rustc: true,\n+        with_proc_macro: true,\n+        prefill_caches: false,\n+    };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "8ddeb59f769473c9d92b1dfc61c334e418323264", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=c62ec3d9986d45224d4c64ba9b7b22c1d1d0afb2", "patch": "@@ -37,6 +37,7 @@ fn integrated_highlighting_benchmark() {\n         load_out_dirs_from_check: true,\n         wrap_rustc: false,\n         with_proc_macro: false,\n+        prefill_caches: false,\n     };\n \n     let (mut host, vfs, _proc_macro) = {\n@@ -91,6 +92,7 @@ fn integrated_completion_benchmark() {\n         load_out_dirs_from_check: true,\n         wrap_rustc: false,\n         with_proc_macro: false,\n+        prefill_caches: true,\n     };\n \n     let (mut host, vfs, _proc_macro) = {"}]}