{"sha": "75d97d94623c485aacace9fc2b52ba1693d9e849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDk3ZDk0NjIzYzQ4NWFhY2FjZTlmYzJiNTJiYTE2OTNkOWU4NDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-21T15:21:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-21T15:21:09Z"}, "message": "Merge pull request #738 from RalfJung/stacked-borrows-2\n\ntest for new read rules", "tree": {"sha": "f31b5529cb74410daeb61c7314f1ce8c52340fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31b5529cb74410daeb61c7314f1ce8c52340fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d97d94623c485aacace9fc2b52ba1693d9e849", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5BdlCRBK7hj4Ov3rIwAAdHIIAKQR+5a9cO+Z+ygUI+dMf6tV\nENuqOPGfmf1oiDDAnbreDW1IyDvdjUZQvI6GtMhG+657TrTWNsB/7O8eCExiWapf\ngb2sYRcON12gYdvVRylsarX/5kbDsHubPKdyNKFH0JXneV9e8yRnZeYWLiZZ68p9\ney7ButahjsG9MM/xkjMZy/rDdp9wmLcW+QbIiSWbWXD8OwzqRgwxshC8VrQMEhbe\nSIAAHi9fMCHO1K44mOCk//YK9+lGEIb/IxvObBNMBa7dndsku72kf1xZ5DsoZwb4\nMVcRyL2nehXW5sTTRsBabiX1QJ8Jo0tYrOiFHDNHeb8s6sjxphQTVCKAhtMIM7I=\n=Vz0A\n-----END PGP SIGNATURE-----\n", "payload": "tree f31b5529cb74410daeb61c7314f1ce8c52340fe7\nparent 6d65c8553ae02246fdce2853783479ee0f3bcdfd\nparent 74f98b3803404dd86d6c6365081e2276fa7a0543\nauthor Ralf Jung <post@ralfj.de> 1558452069 +0200\ncommitter GitHub <noreply@github.com> 1558452069 +0200\n\nMerge pull request #738 from RalfJung/stacked-borrows-2\n\ntest for new read rules"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d97d94623c485aacace9fc2b52ba1693d9e849", "html_url": "https://github.com/rust-lang/rust/commit/75d97d94623c485aacace9fc2b52ba1693d9e849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d97d94623c485aacace9fc2b52ba1693d9e849/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d65c8553ae02246fdce2853783479ee0f3bcdfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d65c8553ae02246fdce2853783479ee0f3bcdfd", "html_url": "https://github.com/rust-lang/rust/commit/6d65c8553ae02246fdce2853783479ee0f3bcdfd"}, {"sha": "74f98b3803404dd86d6c6365081e2276fa7a0543", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f98b3803404dd86d6c6365081e2276fa7a0543", "html_url": "https://github.com/rust-lang/rust/commit/74f98b3803404dd86d6c6365081e2276fa7a0543"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "e2f8233bd86b23da3e14b9f33d0582901f6d78d5", "filename": "tests/compile-fail/stacked_borrows/interior_mut1.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75d97d94623c485aacace9fc2b52ba1693d9e849/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d97d94623c485aacace9fc2b52ba1693d9e849/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.rs?ref=75d97d94623c485aacace9fc2b52ba1693d9e849", "patch": "@@ -3,8 +3,13 @@ use std::cell::UnsafeCell;\n fn main() { unsafe {\n     let c = &UnsafeCell::new(UnsafeCell::new(0));\n     let inner_uniq = &mut *c.get();\n-    let inner_shr = &*inner_uniq; // a SharedRW with a tag\n-    *c.get() = UnsafeCell::new(1); // invalidates the SharedRW\n+    // stack: [c: SharedReadWrite, inner_uniq: Unique]\n+\n+    let inner_shr = &*inner_uniq; // adds a SharedReadWrite\n+    // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n+\n+    *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n+    // stack: [c: SharedReadWrite]\n+\n     let _val = *inner_shr.get(); //~ ERROR borrow stack\n-    let _val = *inner_uniq.get();\n } }"}, {"sha": "45770020d33d7d60b3dfeff55266ca3c9ca885ea", "filename": "tests/compile-fail/stacked_borrows/interior_mut2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75d97d94623c485aacace9fc2b52ba1693d9e849/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d97d94623c485aacace9fc2b52ba1693d9e849/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.rs?ref=75d97d94623c485aacace9fc2b52ba1693d9e849", "patch": "@@ -0,0 +1,28 @@\n+use std::cell::UnsafeCell;\n+use std::mem;\n+\n+// Like `&mut *x.get()`, but without intermediate raw pointers.\n+#[allow(mutable_transmutes)]\n+unsafe fn unsafe_cell_get<T>(x: &UnsafeCell<T>) -> &'static mut T {\n+    mem::transmute(x)\n+}\n+\n+fn main() { unsafe {\n+    let c = &UnsafeCell::new(UnsafeCell::new(0));\n+    let inner_uniq = &mut *c.get();\n+    let inner_shr = &*inner_uniq;\n+    // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n+\n+    let _val = c.get().read(); // invalidates inner_uniq\n+    // stack: [c: SharedReadWrite, inner_uniq: Disabled, inner_shr: SharedReadWrite]\n+\n+    // We have to be careful not to add any raw pointers above inner_uniq in\n+    // the stack, hence the use of unsafe_cell_get.\n+    let _val = *unsafe_cell_get(inner_shr); // this still works\n+\n+    *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+    // stack: [c: SharedReadWrite]\n+\n+    // now this does not work any more\n+    let _val = *inner_shr.get(); //~ ERROR borrow stack\n+} }"}]}