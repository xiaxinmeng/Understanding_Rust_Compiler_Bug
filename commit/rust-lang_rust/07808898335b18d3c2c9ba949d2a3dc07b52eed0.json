{"sha": "07808898335b18d3c2c9ba949d2a3dc07b52eed0", "node_id": "C_kwDOAAsO6NoAKDA3ODA4ODk4MzM1YjE4ZDNjMmM5YmE5NDlkMmEzZGMwN2I1MmVlZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-25T14:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T14:05:36Z"}, "message": "Rollup merge of #90499 - rusticstuff:macos-target-fixes, r=petrochenkov\n\nLink with default MACOSX_DEPLOYMENT_TARGET if not otherwise specified.\n\nThis PR sets the MACOSX_DEPLOYMENT_TARGET environment variable during the linking stage to our default, if it is not specified. This way it matches the deployment target we pass to llvm. If not set the the linker uses Xcode or Xcode commandline tools default which varies by version.\n\nFixes #90342, #91082.\n\nDrive-by fixes to make Rust behave more like clang:\n* Default to 11.0 deployment target for ARM64 which is the earliest version that had support for it.\n* Set the llvm target to `arm64-apple-macosx<deployment target>` instead of `aarch64-apple-macosx<deployment target>`.", "tree": {"sha": "94ba5f81db193968421c4af92b08bffa036c8794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ba5f81db193968421c4af92b08bffa036c8794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07808898335b18d3c2c9ba949d2a3dc07b52eed0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn5gxCRBK7hj4Ov3rIwAAGwkIAKIMUebJLEfCFPiN+p5BDbNk\nmZOMxIRT5ecmOFs1s1K1fqYVMRFerxzX6+CE6De+i24MWj1luFylrhK0AeQJzxOn\nEu5MDsPrKLJEH0XOtuXnRuurjejuqDWIznnlgmYZjjnzjHRSFLQFZ9bhJv8wXHR9\nSpPqi0sS6Bp71+wTLfY1WlhHaF04i8UrhZwwAFb3gQadyJTpg1/NtwaIYnsTGubg\nl4f/WUCuzE/yAXR9mfhd7nof6b4lRdXfcnHY3DVKS1PTXq19O/7WN05THRXFe28f\nEyfnQrHazHEFKnrt3+akng0axcAfR+d7C2/QA1H8awKSSJgnb8Msc7wkwv+p8M4=\n=eTKL\n-----END PGP SIGNATURE-----\n", "payload": "tree 94ba5f81db193968421c4af92b08bffa036c8794\nparent 90dd7c03af736447f4340d7b17fe00eef0b27af7\nparent b376f5621b801460b911a75048a70698021bbc69\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637849136 +0100\ncommitter GitHub <noreply@github.com> 1637849136 +0100\n\nRollup merge of #90499 - rusticstuff:macos-target-fixes, r=petrochenkov\n\nLink with default MACOSX_DEPLOYMENT_TARGET if not otherwise specified.\n\nThis PR sets the MACOSX_DEPLOYMENT_TARGET environment variable during the linking stage to our default, if it is not specified. This way it matches the deployment target we pass to llvm. If not set the the linker uses Xcode or Xcode commandline tools default which varies by version.\n\nFixes #90342, #91082.\n\nDrive-by fixes to make Rust behave more like clang:\n* Default to 11.0 deployment target for ARM64 which is the earliest version that had support for it.\n* Set the llvm target to `arm64-apple-macosx<deployment target>` instead of `aarch64-apple-macosx<deployment target>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07808898335b18d3c2c9ba949d2a3dc07b52eed0", "html_url": "https://github.com/rust-lang/rust/commit/07808898335b18d3c2c9ba949d2a3dc07b52eed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07808898335b18d3c2c9ba949d2a3dc07b52eed0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90dd7c03af736447f4340d7b17fe00eef0b27af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90dd7c03af736447f4340d7b17fe00eef0b27af7", "html_url": "https://github.com/rust-lang/rust/commit/90dd7c03af736447f4340d7b17fe00eef0b27af7"}, {"sha": "b376f5621b801460b911a75048a70698021bbc69", "url": "https://api.github.com/repos/rust-lang/rust/commits/b376f5621b801460b911a75048a70698021bbc69", "html_url": "https://github.com/rust-lang/rust/commit/b376f5621b801460b911a75048a70698021bbc69"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "3ffc852d65080c1cfd16a32fd2b172fa929ef01c", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=07808898335b18d3c2c9ba949d2a3dc07b52eed0", "patch": "@@ -9,19 +9,19 @@ pub fn target() -> Target {\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n+    base.link_env.extend(super::apple_base::macos_link_env(\"arm64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let arch = \"aarch64\";\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n+    let llvm_target = super::apple_base::macos_llvm_target(\"arm64\");\n \n     Target {\n         llvm_target,\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: arch.to_string(),\n+        arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             mcount: \"\\u{1}mcount\".to_string(),\n             frame_pointer: FramePointer::NonLeaf,"}, {"sha": "ba8f9a8ce11607fcc04629a97b9ccf45e0aaabda", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=07808898335b18d3c2c9ba949d2a3dc07b52eed0", "patch": "@@ -13,8 +13,10 @@ pub fn opts(os: &str) -> TargetOptions {\n     // warnings about the usage of ELF TLS.\n     //\n     // Here we detect what version is being requested, defaulting to 10.7. ELF\n-    // TLS is flagged as enabled if it looks to be supported.\n-    let version = macos_deployment_target();\n+    // TLS is flagged as enabled if it looks to be supported. The architecture\n+    // only matters for default deployment target which is 11.0 for ARM64 and\n+    // 10.7 for everything else.\n+    let has_elf_tls = macos_deployment_target(\"x86_64\") >= (10, 7);\n \n     TargetOptions {\n         os: os.to_string(),\n@@ -31,7 +33,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         has_rpath: true,\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),\n-        has_elf_tls: version >= (10, 7),\n+        has_elf_tls,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,\n@@ -63,15 +65,32 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n }\n \n-fn macos_deployment_target() -> (u32, u32) {\n-    deployment_target(\"MACOSX_DEPLOYMENT_TARGET\").unwrap_or((10, 7))\n+fn macos_default_deployment_target(arch: &str) -> (u32, u32) {\n+    if arch == \"arm64\" { (11, 0) } else { (10, 7) }\n+}\n+\n+fn macos_deployment_target(arch: &str) -> (u32, u32) {\n+    deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n+        .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n pub fn macos_llvm_target(arch: &str) -> String {\n-    let (major, minor) = macos_deployment_target();\n+    let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n+pub fn macos_link_env(arch: &str) -> Vec<(String, String)> {\n+    // Use the default deployment target for linking just as with the LLVM target if not\n+    // specified via MACOSX_DEPLOYMENT_TARGET, otherwise the system linker would use its\n+    // default which varies with Xcode version.\n+    if env::var(\"MACOSX_DEPLOYMENT_TARGET\").is_err() {\n+        let default = macos_default_deployment_target(arch);\n+        vec![(\"MACOSX_DEPLOYMENT_TARGET\".to_string(), format!(\"{}.{}\", default.0, default.1))]\n+    } else {\n+        vec![]\n+    }\n+}\n+\n pub fn macos_link_env_remove() -> Vec<String> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which"}, {"sha": "05217c09aedd0dca102e295f2b4472712c86d05b", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=07808898335b18d3c2c9ba949d2a3dc07b52eed0", "patch": "@@ -5,6 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.link_env.extend(super::apple_base::macos_link_env(\"i686\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "3e20cb0b272ce8a682509b5e81a7909cf6f9828a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07808898335b18d3c2c9ba949d2a3dc07b52eed0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=07808898335b18d3c2c9ba949d2a3dc07b52eed0", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         LinkerFlavor::Gcc,\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n+    base.link_env.extend(super::apple_base::macos_link_env(\"x86_64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}]}