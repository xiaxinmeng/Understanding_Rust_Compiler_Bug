{"sha": "50a8333300146091c721c3ccaf0441bc4345f717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYTgzMzMzMDAxNDYwOTFjNzIxYzNjY2FmMDQ0MWJjNDM0NWY3MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T10:34:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T10:34:59Z"}, "message": "Auto merge of #30996 - oli-obk:fix/load_range_assert, r=nagisa\n\nit makes no sense here, accidentally introduced in #30931\n\nr? @dotdash", "tree": {"sha": "e27fb95e17b34e371ffce78ef0db5e0e78b85c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27fb95e17b34e371ffce78ef0db5e0e78b85c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50a8333300146091c721c3ccaf0441bc4345f717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50a8333300146091c721c3ccaf0441bc4345f717", "html_url": "https://github.com/rust-lang/rust/commit/50a8333300146091c721c3ccaf0441bc4345f717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50a8333300146091c721c3ccaf0441bc4345f717/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d21acaf9b41ea2529b15d5efd06266e924c0496", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d21acaf9b41ea2529b15d5efd06266e924c0496", "html_url": "https://github.com/rust-lang/rust/commit/9d21acaf9b41ea2529b15d5efd06266e924c0496"}, {"sha": "c02ba1618deacf4d633438323d9877691f641b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02ba1618deacf4d633438323d9877691f641b9d", "html_url": "https://github.com/rust-lang/rust/commit/c02ba1618deacf4d633438323d9877691f641b9d"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "2c11aad8940441638d4b9a1e4c0515d4197fe501", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=50a8333300146091c721c3ccaf0441bc4345f717", "patch": "@@ -956,7 +956,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     assert_eq!(val_ty(ptr), llty.ptr_to());\n     let bits = machine::llbitsize_of_real(bcx.ccx(), llty);\n     assert!(bits <= 64);\n-    let  bits = bits as usize;\n+    let bits = bits as usize;\n     let mask = Disr(!0u64 >> (64 - bits));\n     // For a (max) discr of -1, max will be `-1 as usize`, which overflows.\n     // However, that is fine here (it would still represent the full range),\n@@ -969,7 +969,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     } else {\n         // llvm::ConstantRange can deal with ranges that wrap around,\n         // so an overflow on (max + 1) is fine.\n-        LoadRangeAssert(bcx, ptr, min, max.wrapping_add(Disr(1)), /* signed: */ True)\n+        LoadRangeAssert(bcx, ptr, min.0, max.0.wrapping_add(1), /* signed: */ True)\n     }\n }\n "}, {"sha": "4c619f895de56a987bf8d9a6e8829ae93503e2be", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=50a8333300146091c721c3ccaf0441bc4345f717", "patch": "@@ -1023,11 +1023,11 @@ pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ptr: ValueRef, t: Ty<'tcx>) ->\n     }\n \n     let val = if t.is_bool() {\n-        LoadRangeAssert(cx, ptr, Disr(0), Disr(2), llvm::False)\n+        LoadRangeAssert(cx, ptr, 0, 2, llvm::False)\n     } else if t.is_char() {\n         // a char is a Unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only.\n-        LoadRangeAssert(cx, ptr, Disr(0), Disr(0x10FFFF + 1), llvm::False)\n+        LoadRangeAssert(cx, ptr, 0, 0x10FFFF + 1, llvm::False)\n     } else if (t.is_region_ptr() || t.is_unique()) && !common::type_is_fat_ptr(cx.tcx(), t) {\n         LoadNonNull(cx, ptr)\n     } else {"}, {"sha": "5a3fcc8d27f3cb8bf422c6d6e8dabc579eb89d66", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=50a8333300146091c721c3ccaf0441bc4345f717", "patch": "@@ -21,7 +21,6 @@ use syntax::codemap::Span;\n use trans::builder::Builder;\n use trans::type_::Type;\n use trans::debuginfo::DebugLoc;\n-use trans::Disr;\n \n use libc::{c_uint, c_char};\n \n@@ -578,8 +577,8 @@ pub fn AtomicLoad(cx: Block, pointer_val: ValueRef, order: AtomicOrdering) -> Va\n }\n \n \n-pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: Disr,\n-                       hi: Disr, signed: llvm::Bool) -> ValueRef {\n+pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: u64,\n+                       hi: u64, signed: llvm::Bool) -> ValueRef {\n     if cx.unreachable.get() {\n         let ccx = cx.fcx.ccx;\n         let ty = val_ty(pointer_val);\n@@ -592,7 +591,7 @@ pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: Disr,\n             llvm::LLVMGetUndef(eltty.to_ref())\n         }\n     } else {\n-        B(cx).load_range_assert(pointer_val, lo.0, hi.0, signed)\n+        B(cx).load_range_assert(pointer_val, lo, hi, signed)\n     }\n }\n "}, {"sha": "b1f62477bb7672ef059e655f98ba78eaf1c9bfa4", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a8333300146091c721c3ccaf0441bc4345f717/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=50a8333300146091c721c3ccaf0441bc4345f717", "patch": "@@ -27,7 +27,6 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n use trans::type_of;\n-use trans::Disr;\n use middle::infer;\n use middle::ty::{self, Ty};\n use middle::subst::Substs;\n@@ -335,7 +334,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             llarg_rust\n         } else {\n             if passed_arg_tys[i].is_bool() {\n-                let val = LoadRangeAssert(bcx, llarg_rust, Disr(0), Disr(2), llvm::False);\n+                let val = LoadRangeAssert(bcx, llarg_rust, 0, 2, llvm::False);\n                 Trunc(bcx, val, Type::i1(bcx.ccx()))\n             } else {\n                 Load(bcx, llarg_rust)"}]}