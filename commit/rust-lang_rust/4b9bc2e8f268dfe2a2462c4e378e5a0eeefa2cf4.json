{"sha": "4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOWJjMmU4ZjI2OGRmZTJhMjQ2MmM0ZTM3OGU1YTBlZWVmYTJjZjQ=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-17T22:56:56Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-20T10:40:08Z"}, "message": "Implement new mod import sugar\n\nImplements RFC #168.", "tree": {"sha": "ada16b620d93f1ae709185df0986c58a62614e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada16b620d93f1ae709185df0986c58a62614e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "html_url": "https://github.com/rust-lang/rust/commit/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/comments", "author": null, "committer": null, "parents": [{"sha": "50481f55030f02543e1b3b6ae008d77b1cef3e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/50481f55030f02543e1b3b6ae008d77b1cef3e98", "html_url": "https://github.com/rust-lang/rust/commit/50481f55030f02543e1b3b6ae008d77b1cef3e98"}], "stats": {"total": 348, "additions": 268, "deletions": 80}, "files": [{"sha": "bad6a288294f4c25532f080b9aed5c8e670f9986", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -901,21 +901,29 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n             ast::ViewItemUse(ref vpath) => {\n                 match vpath.node {\n                     ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n-                    ast::ViewPathList(_, ref list, _) => {\n+                    ast::ViewPathList(ref prefix, ref list, _) => {\n                         for pid in list.iter() {\n-                            debug!(\"privacy - list {}\", pid.node.id);\n-                            let seg = ast::PathSegment {\n-                                identifier: pid.node.name,\n-                                lifetimes: Vec::new(),\n-                                types: OwnedSlice::empty(),\n-                            };\n-                            let segs = vec!(seg);\n-                            let path = ast::Path {\n-                                global: false,\n-                                span: pid.span,\n-                                segments: segs,\n-                            };\n-                            self.check_path(pid.span, pid.node.id, &path);\n+                            match pid.node {\n+                                ast::PathListIdent { id, name } => {\n+                                    debug!(\"privacy - ident item {}\", id);\n+                                    let seg = ast::PathSegment {\n+                                        identifier: name,\n+                                        lifetimes: Vec::new(),\n+                                        types: OwnedSlice::empty(),\n+                                    };\n+                                    let segs = vec![seg];\n+                                    let path = ast::Path {\n+                                        global: false,\n+                                        span: pid.span,\n+                                        segments: segs,\n+                                    };\n+                                    self.check_path(pid.span, id, &path);\n+                                }\n+                                ast::PathListMod { id } => {\n+                                    debug!(\"privacy - mod item {}\", id);\n+                                    self.check_path(pid.span, id, prefix);\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "0fb377838feb1d039bf10dcdc046ecafd7625b08", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -1455,29 +1455,20 @@ impl<'a> Resolver<'a> {\n                 // Extract and intern the module part of the path. For\n                 // globs and lists, the path is found directly in the AST;\n                 // for simple paths we have to munge the path a little.\n-\n-                let mut module_path = Vec::new();\n-                match view_path.node {\n+                let module_path = match view_path.node {\n                     ViewPathSimple(_, ref full_path, _) => {\n-                        let path_len = full_path.segments.len();\n-                        assert!(path_len != 0);\n-\n-                        for (i, segment) in full_path.segments\n-                                                     .iter()\n-                                                     .enumerate() {\n-                            if i != path_len - 1 {\n-                                module_path.push(segment.identifier)\n-                            }\n-                        }\n+                        full_path.segments\n+                            .as_slice().init()\n+                            .iter().map(|ident| ident.identifier)\n+                            .collect()\n                     }\n \n                     ViewPathGlob(ref module_ident_path, _) |\n                     ViewPathList(ref module_ident_path, _, _) => {\n-                        for segment in module_ident_path.segments.iter() {\n-                            module_path.push(segment.identifier)\n-                        }\n+                        module_ident_path.segments\n+                            .iter().map(|ident| ident.identifier).collect()\n                     }\n-                }\n+                };\n \n                 // Build up the import directives.\n                 let module_ = parent.module();\n@@ -1486,6 +1477,11 @@ impl<'a> Resolver<'a> {\n                     ViewPathSimple(binding, ref full_path, id) => {\n                         let source_ident =\n                             full_path.segments.last().unwrap().identifier;\n+                        if token::get_ident(source_ident).get() == \"mod\" {\n+                            self.resolve_error(view_path.span,\n+                                \"`mod` imports are only allowed within a { } list\");\n+                        }\n+\n                         let subclass = SingleImport(binding,\n                                                     source_ident);\n                         self.build_import_directive(&*module_,\n@@ -1495,16 +1491,50 @@ impl<'a> Resolver<'a> {\n                                                     id,\n                                                     is_public);\n                     }\n-                    ViewPathList(_, ref source_idents, _) => {\n-                        for source_ident in source_idents.iter() {\n-                            let name = source_ident.node.name;\n+                    ViewPathList(_, ref source_items, _) => {\n+                        // Make sure there's at most one `mod` import in the list.\n+                        let mod_spans = source_items.iter().filter_map(|item| match item.node {\n+                            PathListMod { .. } => Some(item.span),\n+                            _ => None\n+                        }).collect::<Vec<Span>>();\n+                        match mod_spans.as_slice() {\n+                            [first, second, ..other] => {\n+                                self.resolve_error(first,\n+                                    \"`mod` import can only appear once in the list\");\n+                                self.session.span_note(second,\n+                                        \"another `mod` import appears here\");\n+                                for &other_span in other.iter() {\n+                                    self.session.span_note(other_span,\n+                                        \"another `mod` import appears here\");\n+                                }\n+                            },\n+                            [_] | [] => ()\n+                        }\n+\n+                        for source_item in source_items.iter() {\n+                            let (module_path, name) = match source_item.node {\n+                                PathListIdent { name, .. } =>\n+                                    (module_path.clone(), name),\n+                                PathListMod { .. } => {\n+                                    let name = match module_path.last() {\n+                                        Some(ident) => ident.clone(),\n+                                        None => {\n+                                            self.resolve_error(source_item.span,\n+                                                \"`mod` import can only appear in an import list \\\n+                                                 with a non-empty prefix\");\n+                                            continue;\n+                                        }\n+                                    };\n+                                    let module_path = module_path.as_slice().init();\n+                                    (Vec::from_slice(module_path), name)\n+                                }\n+                            };\n                             self.build_import_directive(\n                                 &*module_,\n-                                module_path.clone(),\n+                                module_path,\n                                 SingleImport(name, name),\n-                                source_ident.span,\n-                                source_ident.node.id,\n-                                is_public);\n+                                source_item.span,\n+                                source_item.node.id(), is_public);\n                         }\n                     }\n                     ViewPathGlob(_, id) => {\n@@ -5492,7 +5522,7 @@ impl<'a> Resolver<'a> {\n                     ViewPathSimple(_, _, id) => self.finalize_import(id, p.span),\n                     ViewPathList(_, ref list, _) => {\n                         for i in list.iter() {\n-                            self.finalize_import(i.node.id, i.span);\n+                            self.finalize_import(i.node.id(), i.span);\n                         }\n                     },\n                     ViewPathGlob(_, id) => {"}, {"sha": "c4373a023ccb24044872da32aacd84c97118e570", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -1120,16 +1120,23 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n                     }\n                     ast::ViewPathList(ref path, ref list, _) => {\n                         for plid in list.iter() {\n-                            match self.lookup_type_ref(plid.node.id) {\n-                                Some(id) => match self.lookup_def_kind(plid.node.id, plid.span) {\n-                                    Some(kind) => self.fmt.ref_str(kind,\n-                                                                   plid.span,\n-                                                                   Some(plid.span),\n-                                                                   id,\n-                                                                   e.cur_scope),\n-                                    None => (),\n+                            match plid.node {\n+                                ast::PathListIdent { id, .. } => {\n+                                    match self.lookup_type_ref(id) {\n+                                        Some(def_id) =>\n+                                            match self.lookup_def_kind(id, plid.span) {\n+                                                Some(kind) => {\n+                                                    self.fmt.ref_str(\n+                                                        kind, plid.span,\n+                                                        Some(plid.span),\n+                                                        def_id, e.cur_scope);\n+                                                }\n+                                                None => ()\n+                                            },\n+                                        None => ()\n+                                    }\n                                 },\n-                                None => ()\n+                                ast::PathListMod { .. } => ()\n                             }\n                         }\n "}, {"sha": "3cb2e9c6ec9aceff484e18a40c8693bd600e00ec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -1779,13 +1779,13 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n                         // to keep any non-inlineable reexports so they can be\n                         // listed in the documentation.\n                         let remaining = list.iter().filter(|path| {\n-                            match inline::try_inline(path.node.id) {\n+                            match inline::try_inline(path.node.id()) {\n                                 Some(items) => {\n                                     ret.extend(items.move_iter()); false\n                                 }\n                                 None => true,\n                             }\n-                        }).map(|a| a.clone()).collect::<Vec<ast::PathListIdent>>();\n+                        }).map(|a| a.clone()).collect::<Vec<ast::PathListItem>>();\n                         if remaining.len() > 0 {\n                             let path = ast::ViewPathList(a.clone(),\n                                                          remaining,\n@@ -1868,11 +1868,17 @@ pub struct ViewListIdent {\n     pub source: Option<ast::DefId>,\n }\n \n-impl Clean<ViewListIdent> for ast::PathListIdent {\n+impl Clean<ViewListIdent> for ast::PathListItem {\n     fn clean(&self) -> ViewListIdent {\n-        ViewListIdent {\n-            name: self.node.name.clean(),\n-            source: resolve_def(self.node.id),\n+        match self.node {\n+            ast::PathListIdent { id, name } => ViewListIdent {\n+                name: name.clean(),\n+                source: resolve_def(id)\n+            },\n+            ast::PathListMod { id } => ViewListIdent {\n+                name: \"mod\".to_string(),\n+                source: resolve_def(id)\n+            }\n         }\n     }\n }"}, {"sha": "c8f9ed64a77f8f7bed411a1dba8d5ae7bcf49a06", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -187,7 +187,7 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ViewPathList(ref p, ref paths, ref b) => {\n                 let mut mine = Vec::new();\n                 for path in paths.iter() {\n-                    if !self.resolve_id(path.node.id, false, om, please_inline) {\n+                    if !self.resolve_id(path.node.id(), false, om, please_inline) {\n                         mine.push(path.clone());\n                     }\n                 }"}, {"sha": "7ad9a18a15e1b3b27b62a68458138e922ad5f708", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -1033,12 +1033,20 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n-pub struct PathListIdent_ {\n-    pub name: Ident,\n-    pub id: NodeId,\n+pub enum PathListItem_ {\n+    PathListIdent { pub name: Ident, pub id: NodeId },\n+    PathListMod { pub id: NodeId }\n+}\n+\n+impl PathListItem_ {\n+    pub fn id(&self) -> NodeId {\n+        match *self {\n+            PathListIdent { id, .. } | PathListMod { id } => id\n+        }\n+    }\n }\n \n-pub type PathListIdent = Spanned<PathListIdent_>;\n+pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n \n@@ -1056,7 +1064,7 @@ pub enum ViewPath_ {\n     ViewPathGlob(Path, NodeId),\n \n     /// `foo::bar::{a,b,c}`\n-    ViewPathList(Path, Vec<PathListIdent> , NodeId)\n+    ViewPathList(Path, Vec<PathListItem> , NodeId)\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "99726da69c9ec97a3f16f5e952d916d2224d9ba0", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -405,7 +405,7 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n                     ViewPathList(_, ref paths, node_id) => {\n                         self.operation.visit_id(node_id);\n                         for path in paths.iter() {\n-                            self.operation.visit_id(path.node.id)\n+                            self.operation.visit_id(path.node.id())\n                         }\n                     }\n                 }"}, {"sha": "7d683382589b90bed49df493c08363c89c3f25b0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -1045,7 +1045,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn view_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident> , imports: &[ast::Ident]) -> ast::ViewItem {\n         let imports = imports.iter().map(|id| {\n-            respan(sp, ast::PathListIdent_ { name: *id, id: ast::DUMMY_NODE_ID })\n+            respan(sp, ast::PathListIdent { name: *id, id: ast::DUMMY_NODE_ID })\n         }).collect();\n \n         self.view_use(sp, vis,"}, {"sha": "e31ec0486538444a9fbb02b4503f0a49fedaa69d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -55,17 +55,17 @@ pub trait Folder {\n                 let id = self.new_id(node_id);\n                 ViewPathList(self.fold_path(path),\n                              path_list_idents.iter().map(|path_list_ident| {\n-                                let id = self.new_id(path_list_ident.node\n-                                                                    .id);\n                                 Spanned {\n-                                    node: PathListIdent_ {\n-                                        name: path_list_ident.node\n-                                                             .name\n-                                                             .clone(),\n-                                        id: id,\n+                                    node: match path_list_ident.node {\n+                                        PathListIdent { id, name } =>\n+                                            PathListIdent {\n+                                                id: self.new_id(id),\n+                                                name: name.clone()\n+                                            },\n+                                        PathListMod { id } =>\n+                                            PathListMod { id: self.new_id(id) }\n                                     },\n-                                    span: self.new_span(\n-                                        path_list_ident.span)\n+                                    span: self.new_span(path_list_ident.span)\n                                 }\n                              }).collect(),\n                              id)"}, {"sha": "13d2a632f3638aca3d62fe84c46f67439eefeb6e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -24,7 +24,7 @@\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n #![feature(macro_rules, globs, managed_boxes, default_type_params, phase)]\n-#![feature(quote, unsafe_destructor)]\n+#![feature(quote, struct_variant, unsafe_destructor)]\n #![allow(deprecated)]\n \n extern crate fmt_macros;"}, {"sha": "73de47e7b12e7ea534e08988cf507319804fd5b8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -537,12 +537,16 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn parse_path_list_ident(&mut self) -> ast::PathListIdent {\n+    pub fn parse_path_list_item(&mut self) -> ast::PathListItem {\n         let lo = self.span.lo;\n-        let ident = self.parse_ident();\n+        let node = if self.eat_keyword(keywords::Mod) {\n+            ast::PathListMod { id: ast::DUMMY_NODE_ID }\n+        } else {\n+            let ident = self.parse_ident();\n+            ast::PathListIdent { name: ident, id: ast::DUMMY_NODE_ID }\n+        };\n         let hi = self.last_span.hi;\n-        spanned(lo, hi, ast::PathListIdent_ { name: ident,\n-                                              id: ast::DUMMY_NODE_ID })\n+        spanned(lo, hi, node)\n     }\n \n     /// Consume token 'tok' if it exists. Returns true if the given\n@@ -5176,7 +5180,7 @@ impl<'a> Parser<'a> {\n             let idents = self.parse_unspanned_seq(\n                 &token::LBRACE, &token::RBRACE,\n                 seq_sep_trailing_allowed(token::COMMA),\n-                |p| p.parse_path_list_ident());\n+                |p| p.parse_path_list_item());\n             let path = ast::Path {\n                 span: mk_sp(lo, self.span.hi),\n                 global: false,\n@@ -5232,7 +5236,7 @@ impl<'a> Parser<'a> {\n                         &token::LBRACE,\n                         &token::RBRACE,\n                         seq_sep_trailing_allowed(token::COMMA),\n-                        |p| p.parse_path_list_ident()\n+                        |p| p.parse_path_list_item()\n                     );\n                     let path = ast::Path {\n                         span: mk_sp(lo, self.span.hi),"}, {"sha": "305e67a916eb986a295d4dd33afef214a7385362", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -2182,7 +2182,14 @@ impl<'a> State<'a> {\n                     try!(word(&mut self.s, \"::{\"));\n                 }\n                 try!(self.commasep(Inconsistent, idents.as_slice(), |s, w| {\n-                    s.print_ident(w.node.name)\n+                    match w.node {\n+                        ast::PathListIdent { name, .. } => {\n+                            s.print_ident(name)\n+                        },\n+                        ast::PathListMod { .. } => {\n+                            word(&mut s.s, \"mod\")\n+                        }\n+                    }\n                 }));\n                 word(&mut self.s, \"}\")\n             }"}, {"sha": "3c6f06ddfc35d8bf9c49cedf65ff4e873825b6f5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -186,7 +186,12 @@ pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, e\n                 }\n                 ViewPathList(ref path, ref list, _) => {\n                     for id in list.iter() {\n-                        visitor.visit_ident(id.span, id.node.name, env.clone())\n+                        match id.node {\n+                            PathListIdent { name, .. } => {\n+                                visitor.visit_ident(id.span, name, env.clone());\n+                            }\n+                            PathListMod { .. } => ()\n+                        }\n                     }\n                     walk_path(visitor, path, env.clone());\n                 }"}, {"sha": "12d4531078dcd3c60d604478b48648502c36bca6", "filename": "src/test/compile-fail/use-mod-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    use self::{mod};\n+    //~^ ERROR unresolved import `self`. There is no `self` in `???`\n+\n+    use super::{mod};\n+    //~^ ERROR unresolved import `super`. There is no `super` in `???`\n+}\n+\n+fn main() {}"}, {"sha": "0263dc392f1de77ce0f3800742aa7a9bf91e067d", "filename": "src/test/compile-fail/use-mod-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::bar::{\n+    mod //~ ERROR module `bar` is private\n+};\n+use foo::bar::{\n+    Bar, //~ ERROR type `Bar` is inaccessible\n+    //~^ NOTE module `bar` is private\n+    mod //~ ERROR module `bar` is private\n+};\n+\n+mod foo {\n+    mod bar { pub type Bar = int; }\n+}\n+\n+fn main() {}"}, {"sha": "b2b0eb21ace488f1370aaac40a9a5d318bcefcf7", "filename": "src/test/compile-fail/use-mod.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::bar::{\n+    mod,\n+//~^ ERROR `mod` import can only appear once in the list\n+    Bar,\n+    mod\n+//~^ NOTE another `mod` import appears here\n+};\n+\n+use {mod};\n+//~^ ERROR `mod` import can only appear in an import list with a non-empty prefix\n+\n+use foo::mod;\n+//~^ ERROR `mod` imports are only allowed within a { } list\n+\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "34c9f581f0719481dceff585090ee5622bc53678", "filename": "src/test/run-pass/use-mod.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=4b9bc2e8f268dfe2a2462c4e378e5a0eeefa2cf4", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use foo::bar::{mod, First};\n+use self::bar::Second;\n+\n+mod foo {\n+    pub use self::bar::baz::{mod};\n+\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct Fourth;\n+        }\n+        pub struct First;\n+        pub struct Second;\n+    }\n+\n+    pub struct Third;\n+}\n+\n+mod baz {\n+    use super::foo::{bar, mod};\n+    pub use foo::Third;\n+}\n+\n+fn main() {\n+    let _ = First;\n+    let _ = Second;\n+    let _ = baz::Third;\n+    let _ = foo::baz::Fourth;\n+}"}]}