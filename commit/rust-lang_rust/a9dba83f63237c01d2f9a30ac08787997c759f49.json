{"sha": "a9dba83f63237c01d2f9a30ac08787997c759f49", "node_id": "C_kwDOAAsO6NoAKGE5ZGJhODNmNjMyMzdjMDFkMmY5YTMwYWMwODc4Nzk5N2M3NTlmNDk", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-22T12:46:15Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-22T12:46:21Z"}, "message": "Add check to ensure there are no duplicates in rustdoc JSON output format in items fields", "tree": {"sha": "dc4fcca810bfbde94f0e46a7a0822a797cd5e1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc4fcca810bfbde94f0e46a7a0822a797cd5e1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dba83f63237c01d2f9a30ac08787997c759f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dba83f63237c01d2f9a30ac08787997c759f49", "html_url": "https://github.com/rust-lang/rust/commit/a9dba83f63237c01d2f9a30ac08787997c759f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dba83f63237c01d2f9a30ac08787997c759f49/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "html_url": "https://github.com/rust-lang/rust/commit/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "a1f675a3b40f650af97bcafd8f48a684196b18d9", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9dba83f63237c01d2f9a30ac08787997c759f49/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dba83f63237c01d2f9a30ac08787997c759f49/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=a9dba83f63237c01d2f9a30ac08787997c759f49", "patch": "@@ -71,6 +71,19 @@ impl<'a> Validator<'a> {\n         }\n     }\n \n+    fn check_items(&mut self, id: &Id, items: &[Id]) {\n+        let mut visited_ids = HashSet::with_capacity(items.len());\n+\n+        for item in items {\n+            if !visited_ids.insert(item) {\n+                self.fail(\n+                    id,\n+                    ErrorKind::Custom(format!(\"Duplicated entry in `items` field: `{item:?}`\")),\n+                );\n+            }\n+        }\n+    }\n+\n     fn check_item(&mut self, id: &'a Id) {\n         if let Some(item) = &self.krate.index.get(id) {\n             item.links.values().for_each(|id| self.add_any_id(id));\n@@ -83,9 +96,9 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Enum(x) => self.check_enum(x),\n                 ItemEnum::Variant(x) => self.check_variant(x, id),\n                 ItemEnum::Function(x) => self.check_function(x),\n-                ItemEnum::Trait(x) => self.check_trait(x),\n+                ItemEnum::Trait(x) => self.check_trait(x, id),\n                 ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n-                ItemEnum::Impl(x) => self.check_impl(x),\n+                ItemEnum::Impl(x) => self.check_impl(x, id),\n                 ItemEnum::Typedef(x) => self.check_typedef(x),\n                 ItemEnum::OpaqueTy(x) => self.check_opaque_ty(x),\n                 ItemEnum::Constant(x) => self.check_constant(x),\n@@ -94,7 +107,7 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Macro(x) => self.check_macro(x),\n                 ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n                 ItemEnum::Primitive(x) => self.check_primitive_type(x),\n-                ItemEnum::Module(x) => self.check_module(x),\n+                ItemEnum::Module(x) => self.check_module(x, id),\n                 // FIXME: Why don't these have their own structs?\n                 ItemEnum::ExternCrate { .. } => {}\n                 ItemEnum::AssocConst { type_, default: _ } => self.check_type(type_),\n@@ -112,7 +125,8 @@ impl<'a> Validator<'a> {\n     }\n \n     // Core checkers\n-    fn check_module(&mut self, module: &'a Module) {\n+    fn check_module(&mut self, module: &'a Module, id: &Id) {\n+        self.check_items(id, &module.items);\n         module.items.iter().for_each(|i| self.add_mod_item_id(i));\n     }\n \n@@ -181,7 +195,8 @@ impl<'a> Validator<'a> {\n         self.check_fn_decl(&x.decl);\n     }\n \n-    fn check_trait(&mut self, x: &'a Trait) {\n+    fn check_trait(&mut self, x: &'a Trait, id: &Id) {\n+        self.check_items(id, &x.items);\n         self.check_generics(&x.generics);\n         x.items.iter().for_each(|i| self.add_trait_item_id(i));\n         x.bounds.iter().for_each(|i| self.check_generic_bound(i));\n@@ -193,7 +208,8 @@ impl<'a> Validator<'a> {\n         x.params.iter().for_each(|i| self.check_generic_bound(i));\n     }\n \n-    fn check_impl(&mut self, x: &'a Impl) {\n+    fn check_impl(&mut self, x: &'a Impl, id: &Id) {\n+        self.check_items(id, &x.items);\n         self.check_generics(&x.generics);\n         if let Some(path) = &x.trait_ {\n             self.check_path(path, PathKind::Trait);"}]}