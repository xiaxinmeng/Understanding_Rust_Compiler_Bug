{"sha": "b4e49ddbf526547d70ba659136cd56c6acc6f33f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZTQ5ZGRiZjUyNjU0N2Q3MGJhNjU5MTM2Y2Q1NmM2YWNjNmYzM2Y=", "commit": {"author": {"name": "Julien Blanchard", "email": "julien@sideburns.eu", "date": "2016-06-08T11:00:11Z"}, "committer": {"name": "Julien Blanchard", "email": "julien@sideburns.eu", "date": "2016-08-01T08:10:04Z"}, "message": "Fix imports with absolute paths", "tree": {"sha": "8d57c4922efcd5c4be3021e7885735a6de926d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d57c4922efcd5c4be3021e7885735a6de926d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e49ddbf526547d70ba659136cd56c6acc6f33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e49ddbf526547d70ba659136cd56c6acc6f33f", "html_url": "https://github.com/rust-lang/rust/commit/b4e49ddbf526547d70ba659136cd56c6acc6f33f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e49ddbf526547d70ba659136cd56c6acc6f33f/comments", "author": {"login": "julienXX", "id": 53949, "node_id": "MDQ6VXNlcjUzOTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/53949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julienXX", "html_url": "https://github.com/julienXX", "followers_url": "https://api.github.com/users/julienXX/followers", "following_url": "https://api.github.com/users/julienXX/following{/other_user}", "gists_url": "https://api.github.com/users/julienXX/gists{/gist_id}", "starred_url": "https://api.github.com/users/julienXX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julienXX/subscriptions", "organizations_url": "https://api.github.com/users/julienXX/orgs", "repos_url": "https://api.github.com/users/julienXX/repos", "events_url": "https://api.github.com/users/julienXX/events{/privacy}", "received_events_url": "https://api.github.com/users/julienXX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "julienXX", "id": 53949, "node_id": "MDQ6VXNlcjUzOTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/53949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julienXX", "html_url": "https://github.com/julienXX", "followers_url": "https://api.github.com/users/julienXX/followers", "following_url": "https://api.github.com/users/julienXX/following{/other_user}", "gists_url": "https://api.github.com/users/julienXX/gists{/gist_id}", "starred_url": "https://api.github.com/users/julienXX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julienXX/subscriptions", "organizations_url": "https://api.github.com/users/julienXX/orgs", "repos_url": "https://api.github.com/users/julienXX/repos", "events_url": "https://api.github.com/users/julienXX/events{/privacy}", "received_events_url": "https://api.github.com/users/julienXX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "html_url": "https://github.com/rust-lang/rust/commit/22de7ced28aa7bc68d1317a5529d6e0d69ef744e"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "a9d56878ea6a7f35c64bdf65b430dee0be539eee", "filename": "src/imports.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b4e49ddbf526547d70ba659136cd56c6acc6f33f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e49ddbf526547d70ba659136cd56c6acc6f33f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b4e49ddbf526547d70ba659136cd56c6acc6f33f", "patch": "@@ -214,22 +214,20 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n-fn rewrite_single_use_list(path_str: String, vpi: &ast::PathListItem) -> String {\n+fn rewrite_single_use_list(path_str: Option<String>, vpi: &ast::PathListItem) -> String {\n     let path_item_str = if let ast::PathListItemKind::Ident { name, .. } = vpi.node {\n         // A name.\n-        if path_str.is_empty() {\n-            name.to_string()\n-        } else {\n-            format!(\"{}::{}\", path_str, name)\n+        match path_str {\n+            Some(path_str) => format!(\"{}::{}\", path_str, name),\n+            None => name.to_string(),\n         }\n     } else {\n         // `self`.\n-        if !path_str.is_empty() {\n-            path_str\n-        } else {\n+        match path_str {\n+            Some(path_str) => path_str,\n             // This catches the import: use {self}, which is a compiler error, so we just\n             // leave it alone.\n-            \"{self}\".to_owned()\n+            None => \"{self}\".to_owned(),\n         }\n     };\n \n@@ -264,20 +262,26 @@ pub fn rewrite_use_list(width: usize,\n                         span: Span,\n                         context: &RewriteContext)\n                         -> Option<String> {\n-    // 1 = {}\n-    let budget = try_opt!(width.checked_sub(1));\n-    let path_str = try_opt!(rewrite_path(context, false, None, path, budget, offset));\n+    // Returns a different option to distinguish `::foo` and `foo`\n+    let opt_path_str = if !path.to_string().is_empty() {\n+        Some(path.to_string())\n+    } else if path.global {\n+        // path is absolute, we return an empty String to avoid a double `::`\n+        Some(String::new())\n+    } else {\n+        None\n+    };\n \n     match path_list.len() {\n         0 => unreachable!(),\n-        1 => return Some(rewrite_single_use_list(path_str, &path_list[0])),\n+        1 => return Some(rewrite_single_use_list(opt_path_str, &path_list[0])),\n         _ => (),\n     }\n \n     // 2 = ::\n-    let path_separation_w = if !path_str.is_empty() { 2 } else { 0 };\n+    let path_separation_w = if opt_path_str.is_some() { 2 } else { 0 };\n     // 1 = {\n-    let supp_indent = path_str.len() + path_separation_w + 1;\n+    let supp_indent = path.to_string().len() + path_separation_w + 1;\n     // 1 = }\n     let remaining_width = width.checked_sub(supp_indent + 1).unwrap_or(0);\n \n@@ -323,10 +327,9 @@ pub fn rewrite_use_list(width: usize,\n     };\n     let list_str = try_opt!(write_list(&items[first_index..], &fmt));\n \n-    Some(if path_str.is_empty() {\n-        format!(\"{{{}}}\", list_str)\n-    } else {\n-        format!(\"{}::{{{}}}\", path_str, list_str)\n+    Some(match opt_path_str {\n+        Some(opt_path_str) => format!(\"{}::{{{}}}\", opt_path_str, list_str),\n+        None => format!(\"{{{}}}\", list_str),\n     })\n }\n "}, {"sha": "45ed1e03fe0e845bcf5cc5aa2527fc5a52850052", "filename": "tests/source/imports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e49ddbf526547d70ba659136cd56c6acc6f33f/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e49ddbf526547d70ba659136cd56c6acc6f33f/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=b4e49ddbf526547d70ba659136cd56c6acc6f33f", "patch": "@@ -50,3 +50,10 @@ use foo::{self as bar, baz};\n use foo::{self as bar};\n use foo::{qux as bar};\n use foo::{baz, qux as bar};\n+\n+// With absolute paths\n+use ::foo;\n+use ::foo::{Bar};\n+use ::foo::{Bar, Baz};\n+use ::{Foo};\n+use ::{Bar, Baz};"}, {"sha": "4e2f690364471466e9a7deb716423163fc4918d4", "filename": "tests/target/imports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e49ddbf526547d70ba659136cd56c6acc6f33f/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e49ddbf526547d70ba659136cd56c6acc6f33f/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=b4e49ddbf526547d70ba659136cd56c6acc6f33f", "patch": "@@ -45,3 +45,10 @@ use foo::{self as bar, baz};\n use foo as bar;\n use foo::qux as bar;\n use foo::{baz, qux as bar};\n+\n+// With absolute paths\n+use ::foo;\n+use ::foo::Bar;\n+use ::foo::{Bar, Baz};\n+use ::Foo;\n+use ::{Bar, Baz};"}]}