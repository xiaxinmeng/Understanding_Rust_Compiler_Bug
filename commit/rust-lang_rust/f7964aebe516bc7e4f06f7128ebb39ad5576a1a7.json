{"sha": "f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OTY0YWViZTUxNmJjN2U0ZjA2ZjcxMjhlYmIzOWFkNTU3NmExYTc=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-09-13T20:40:48Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-09-20T18:43:41Z"}, "message": "Implement `Copy`/`Clone` for closures", "tree": {"sha": "fb903110af5ee4e9a3437f70b2cd9b7a7466ef6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb903110af5ee4e9a3437f70b2cd9b7a7466ef6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "html_url": "https://github.com/rust-lang/rust/commit/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "html_url": "https://github.com/rust-lang/rust/commit/01c65cb15ac57bfdc91613a4f6032ecc76c402a3"}], "stats": {"total": 230, "additions": 212, "deletions": 18}, "files": [{"sha": "e8a6c5a03474b4d36f5ad5138ebd682d42154b92", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -1340,7 +1340,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n \n             // For other types, we'll use the builtin rules.\n-            let copy_conditions = self.copy_conditions(obligation);\n+            let copy_conditions = self.copy_clone_conditions(obligation);\n             self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates)?;\n         } else if lang_items.sized_trait() == Some(def_id) {\n             // Sized is never implementable by end-users, it is\n@@ -1355,7 +1355,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                  // Same builtin conditions as `Copy`, i.e. every type which has builtin support\n                  // for `Copy` also has builtin support for `Clone`, + tuples and arrays of `Clone`\n                  // types have builtin support for `Clone`.\n-                 let clone_conditions = self.copy_conditions(obligation);\n+                 let clone_conditions = self.copy_clone_conditions(obligation);\n                  self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates)?;\n              }\n \n@@ -2050,7 +2050,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn copy_conditions(&mut self, obligation: &TraitObligation<'tcx>)\n+    fn copy_clone_conditions(&mut self, obligation: &TraitObligation<'tcx>)\n                      -> BuiltinImplConditions<'tcx>\n     {\n         // NOTE: binder moved to (*)\n@@ -2068,8 +2068,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(Vec::new()))\n             }\n \n-            ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |\n-            ty::TyClosure(..) | ty::TyGenerator(..) |\n+            ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) | ty::TyGenerator(..) |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n                 Never\n             }\n@@ -2084,6 +2083,22 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(tys.to_vec()))\n             }\n \n+            ty::TyClosure(def_id, substs) => {\n+                let trait_id = obligation.predicate.def_id();\n+                let copy_closures =\n+                    Some(trait_id) == self.tcx().lang_items().copy_trait() &&\n+                    self.tcx().sess.features.borrow().copy_closures;\n+                let clone_closures =\n+                    Some(trait_id) == self.tcx().lang_items().clone_trait() &&\n+                    self.tcx().sess.features.borrow().clone_closures;\n+\n+                if copy_closures || clone_closures {\n+                    Where(ty::Binder(substs.upvar_tys(def_id, self.tcx()).collect()))\n+                } else {\n+                    Never\n+                }\n+            }\n+\n             ty::TyAdt(..) | ty::TyProjection(..) | ty::TyParam(..) | ty::TyAnon(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n@@ -2370,10 +2385,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     self.sized_conditions(obligation)\n                 }\n                 _ if Some(trait_def) == lang_items.copy_trait() => {\n-                    self.copy_conditions(obligation)\n+                    self.copy_clone_conditions(obligation)\n                 }\n                 _ if Some(trait_def) == lang_items.clone_trait() => {\n-                    self.copy_conditions(obligation)\n+                    self.copy_clone_conditions(obligation)\n                 }\n                 _ => bug!(\"unexpected builtin trait {:?}\", trait_def)\n             };"}, {"sha": "871a23863ac21be3b578d4ead3a51b3fe5f066fa", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -38,7 +38,7 @@ pub enum InstanceDef<'tcx> {\n     /// drop_in_place::<T>; None for empty drop glue.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n-    /// Builtin method implementation, e.g. `Clone::clone`.\n+    ///`<T as Clone>::clone` shim.\n     CloneShim(DefId, Ty<'tcx>),\n }\n "}, {"sha": "31480457723fdef0fc1b187a27cd99a963717a01", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -296,9 +296,15 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n             builder.array_shim(ty, len)\n         }\n-        ty::TyTuple(tys, _) => builder.tuple_shim(tys),\n+        ty::TyClosure(def_id, substs) => {\n+            builder.tuple_like_shim(\n+                &substs.upvar_tys(def_id, tcx).collect::<Vec<_>>(),\n+                AggregateKind::Closure(def_id, substs)\n+            )\n+        }\n+        ty::TyTuple(tys, _) => builder.tuple_like_shim(&**tys, AggregateKind::Tuple),\n         _ => {\n-            bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty);\n+            bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty)\n         }\n     };\n \n@@ -613,7 +619,12 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![], TerminatorKind::Resume, true);\n     }\n \n-    fn tuple_shim(&mut self, tys: &ty::Slice<Ty<'tcx>>) {\n+    fn tuple_like_shim(&mut self, tys: &[ty::Ty<'tcx>], kind: AggregateKind<'tcx>) {\n+        match kind {\n+            AggregateKind::Tuple | AggregateKind::Closure(..) => (),\n+            _ => bug!(\"only tuples and closures are accepted\"),\n+        };\n+\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n \n         let mut returns = Vec::new();\n@@ -646,17 +657,17 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             }\n         }\n \n-        // `return (returns[0], returns[1], ..., returns[tys.len() - 1]);`\n+        // `return kind(returns[0], returns[1], ..., returns[tys.len() - 1]);`\n         let ret_statement = self.make_statement(\n             StatementKind::Assign(\n                 Lvalue::Local(RETURN_POINTER),\n                 Rvalue::Aggregate(\n-                    box AggregateKind::Tuple,\n+                    box kind,\n                     returns.into_iter().map(Operand::Consume).collect()\n                 )\n             )\n         );\n-       self.block(vec![ret_statement], TerminatorKind::Return, false);\n+        self.block(vec![ret_statement], TerminatorKind::Return, false);\n     }\n }\n "}, {"sha": "6560943a9328be968d5ac31b8a5cee3647868255", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -385,6 +385,10 @@ declare_features! (\n \n     // allow '|' at beginning of match arms (RFC 1925)\n     (active, match_beginning_vert, \"1.21.0\", Some(44101)),\n+\n+    // Copy/Clone closures (RFC 2132)\n+    (active, clone_closures, \"1.22.0\", Some(44490)),\n+    (active, copy_closures, \"1.22.0\", Some(44490)),\n );\n \n declare_features! (\n@@ -1573,7 +1577,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {\n     let mut features = Features::new();\n \n-    let mut feature_checker = MutexFeatureChecker::default();\n+    let mut feature_checker = FeatureChecker::default();\n \n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n@@ -1622,14 +1626,16 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n     features\n }\n \n-// A collector for mutually-exclusive features and their flag spans\n+/// A collector for mutually exclusive and interdependent features and their flag spans.\n #[derive(Default)]\n-struct MutexFeatureChecker {\n+struct FeatureChecker {\n     proc_macro: Option<Span>,\n     custom_attribute: Option<Span>,\n+    copy_closures: Option<Span>,\n+    clone_closures: Option<Span>,\n }\n \n-impl MutexFeatureChecker {\n+impl FeatureChecker {\n     // If this method turns out to be a hotspot due to branching,\n     // the branching can be eliminated by modifying `set!()` to set these spans\n     // only for the features that need to be checked for mutual exclusion.\n@@ -1642,6 +1648,14 @@ impl MutexFeatureChecker {\n         if features.custom_attribute {\n             self.custom_attribute = self.custom_attribute.or(Some(span));\n         }\n+\n+        if features.copy_closures {\n+            self.copy_closures = self.copy_closures.or(Some(span));\n+        }\n+\n+        if features.clone_closures {\n+            self.clone_closures = self.clone_closures.or(Some(span));\n+        }\n     }\n \n     fn check(self, handler: &Handler) {\n@@ -1653,6 +1667,15 @@ impl MutexFeatureChecker {\n \n             panic!(FatalError);\n         }\n+\n+        if let (Some(span), None) = (self.copy_closures, self.clone_closures) {\n+            handler.struct_span_err(span, \"`#![feature(copy_closures)]` can only be used with \\\n+                                           `#![feature(clone_closures)]`\")\n+                  .span_note(span, \"`#![feature(copy_closures)]` declared here\")\n+                  .emit();\n+\n+            panic!(FatalError);\n+        }\n     }\n }\n "}, {"sha": "a15153ea7bf0ab947bbd0b04b0288bfc4899ef1d", "filename": "src/test/compile-fail/feature-gate-clone-closures.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-clone-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-clone-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-clone-closures.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Clone)]\n+struct S(i32);\n+\n+fn main() {\n+    let a = S(5);\n+    let hello = move || {\n+        println!(\"Hello {}\", a.0);\n+    };\n+\n+    let hello = hello.clone(); //~ ERROR no method named `clone` found for type\n+}"}, {"sha": "b11b09eb9fd9bfab6787d6dc53f5332d98ae1288", "filename": "src/test/compile-fail/feature-gate-copy-closures.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-copy-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-copy-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-copy-closures.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = 5;\n+    let hello = || {\n+        println!(\"Hello {}\", a);\n+    };\n+\n+    let b = hello;\n+    let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+}"}, {"sha": "2a30dc4fdd49c8ae8939c1d0489d7a3cb11da59f", "filename": "src/test/compile-fail/not-clone-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-clone-closure.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that closures do not implement `Clone` if their environment is not `Clone`.\n+\n+#![feature(clone_closures)]\n+\n+struct S(i32);\n+\n+fn main() {\n+    let a = S(5);\n+    let hello = move || {\n+        println!(\"Hello {}\", a.0);\n+    };\n+\n+    let hello = hello.clone(); //~ ERROR the trait bound `S: std::clone::Clone` is not satisfied\n+}"}, {"sha": "271e6d5fc90fc36f1d7052f8739fe459d8ec6725", "filename": "src/test/compile-fail/not-copy-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-copy-closure.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that closures do not implement `Copy` if their environment is not `Copy`.\n+\n+#![feature(copy_closures)]\n+#![feature(clone_closures)]\n+\n+fn main() {\n+    let mut a = 5;\n+    let hello = || {\n+        a += 1;\n+    };\n+\n+    let b = hello;\n+    let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+}"}, {"sha": "7f554c77fc4f8013fedbb5939fa68a155a363371", "filename": "src/test/run-pass/clone-closure.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Frun-pass%2Fclone-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Frun-pass%2Fclone-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-closure.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that closures implement `Clone`.\n+\n+#![feature(clone_closures)]\n+\n+#[derive(Clone)]\n+struct S(i32);\n+\n+fn main() {\n+    let mut a = S(5);\n+    let mut hello = move || {\n+        a.0 += 1;\n+        println!(\"Hello {}\", a.0);\n+        a.0\n+    };\n+\n+    let mut hello2 = hello.clone();\n+    assert_eq!(6, hello2());\n+    assert_eq!(6, hello());\n+}"}, {"sha": "309c83ebd99ac9e319c846f4a0ed4255e31d561f", "filename": "src/test/run-pass/copy-closure.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Frun-pass%2Fcopy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7964aebe516bc7e4f06f7128ebb39ad5576a1a7/src%2Ftest%2Frun-pass%2Fcopy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcopy-closure.rs?ref=f7964aebe516bc7e4f06f7128ebb39ad5576a1a7", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that closures implement `Copy`.\n+\n+#![feature(copy_closures)]\n+#![feature(clone_closures)]\n+\n+fn call<T, F: FnOnce() -> T>(f: F) -> T { f() }\n+\n+fn main() {\n+    let a = 5;\n+    let hello = || {\n+        println!(\"Hello {}\", a);\n+        a\n+    };\n+\n+    assert_eq!(5, call(hello.clone()));\n+    assert_eq!(5, call(hello));\n+    assert_eq!(5, call(hello));\n+}"}]}