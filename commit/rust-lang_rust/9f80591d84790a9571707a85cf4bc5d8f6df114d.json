{"sha": "9f80591d84790a9571707a85cf4bc5d8f6df114d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODA1OTFkODQ3OTBhOTU3MTcwN2E4NWNmNGJjNWQ4ZjZkZjExNGQ=", "commit": {"author": {"name": "Ramkumar Ramachandra", "email": "artagnon@gmail.com", "date": "2013-06-23T16:48:43Z"}, "committer": {"name": "Ramkumar Ramachandra", "email": "artagnon@gmail.com", "date": "2013-06-25T18:28:48Z"}, "message": "resolve: report duplicate module definitions\n\nadd_child() is responsible for reporting errors about type, value, and\nmodule duplicate definitions.  Although it checks for all three, it uses\nnamespace_to_str() to convert a Namespace value into a string before\nprinting an error like:\n\n  error: duplicate definition of type `foo`\n                                 ^^^^\n  note: first definition of type foo here:\n                            ^^^^\n\nUnfortunately, this string can only be one of \"type\" or\n\"value\" (corresponding to TypeNS and ValueNS respectively), and it\nreports duplicate modules as duplicate types.\n\nTo alleviate the problem, define a special NamespaceError enum to define\nmore specialized errors, and use it instead of attempting to reuse the\nNamespace enum.\n\nReported-by: Corey Richardson <corey@octayn.net>\nSigned-off-by: Ramkumar Ramachandra <artagnon@gmail.com>", "tree": {"sha": "a03261cb60137dcf127e54148616b7137a9e6ca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a03261cb60137dcf127e54148616b7137a9e6ca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f80591d84790a9571707a85cf4bc5d8f6df114d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f80591d84790a9571707a85cf4bc5d8f6df114d", "html_url": "https://github.com/rust-lang/rust/commit/9f80591d84790a9571707a85cf4bc5d8f6df114d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f80591d84790a9571707a85cf4bc5d8f6df114d/comments", "author": {"login": "artagnon", "id": 37226, "node_id": "MDQ6VXNlcjM3MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/37226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artagnon", "html_url": "https://github.com/artagnon", "followers_url": "https://api.github.com/users/artagnon/followers", "following_url": "https://api.github.com/users/artagnon/following{/other_user}", "gists_url": "https://api.github.com/users/artagnon/gists{/gist_id}", "starred_url": "https://api.github.com/users/artagnon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artagnon/subscriptions", "organizations_url": "https://api.github.com/users/artagnon/orgs", "repos_url": "https://api.github.com/users/artagnon/repos", "events_url": "https://api.github.com/users/artagnon/events{/privacy}", "received_events_url": "https://api.github.com/users/artagnon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "artagnon", "id": 37226, "node_id": "MDQ6VXNlcjM3MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/37226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artagnon", "html_url": "https://github.com/artagnon", "followers_url": "https://api.github.com/users/artagnon/followers", "following_url": "https://api.github.com/users/artagnon/following{/other_user}", "gists_url": "https://api.github.com/users/artagnon/gists{/gist_id}", "starred_url": "https://api.github.com/users/artagnon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artagnon/subscriptions", "organizations_url": "https://api.github.com/users/artagnon/orgs", "repos_url": "https://api.github.com/users/artagnon/repos", "events_url": "https://api.github.com/users/artagnon/events{/privacy}", "received_events_url": "https://api.github.com/users/artagnon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b126e4d6dda1eac3881b8ca19772071997a7992", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b126e4d6dda1eac3881b8ca19772071997a7992", "html_url": "https://github.com/rust-lang/rust/commit/3b126e4d6dda1eac3881b8ca19772071997a7992"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "5fb7cc9b9bdadb21f9c5596ec78a9be32ea381cd", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f80591d84790a9571707a85cf4bc5d8f6df114d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80591d84790a9571707a85cf4bc5d8f6df114d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9f80591d84790a9571707a85cf4bc5d8f6df114d", "patch": "@@ -101,6 +101,14 @@ pub enum Namespace {\n     ValueNS\n }\n \n+#[deriving(Eq)]\n+pub enum NamespaceError {\n+    NoError,\n+    ModuleError,\n+    TypeError,\n+    ValueError\n+}\n+\n /// A NamespaceResult represents the result of resolving an import in\n /// a particular namespace. The result is either definitely-resolved,\n /// definitely- unresolved, or unknown.\n@@ -759,10 +767,12 @@ pub fn PrimitiveTypeTable() -> PrimitiveTypeTable {\n }\n \n \n-pub fn namespace_to_str(ns: Namespace) -> ~str {\n+pub fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n     match ns {\n-        TypeNS  => ~\"type\",\n-        ValueNS => ~\"value\",\n+        NoError     => \"\",\n+        ModuleError => \"module\",\n+        TypeError   => \"type\",\n+        ValueError  => \"value\",\n     }\n }\n \n@@ -993,21 +1003,25 @@ impl Resolver {\n                 // * If no duplicate checking was requested at all, do\n                 //   nothing.\n \n-                let mut is_duplicate = false;\n+                let mut duplicate_type = NoError;\n                 let ns = match duplicate_checking_mode {\n                     ForbidDuplicateModules => {\n-                        is_duplicate = child.get_module_if_available().is_some();\n+                        if (child.get_module_if_available().is_some()) {\n+                            duplicate_type = ModuleError;\n+                        }\n                         Some(TypeNS)\n                     }\n                     ForbidDuplicateTypes => {\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n-                            Some(_) => is_duplicate = true\n+                            Some(_) => duplicate_type = TypeError\n                         }\n                         Some(TypeNS)\n                     }\n                     ForbidDuplicateValues => {\n-                        is_duplicate = child.defined_in_namespace(ValueNS);\n+                        if child.defined_in_namespace(ValueNS) {\n+                            duplicate_type = ValueError;\n+                        }\n                         Some(ValueNS)\n                     }\n                     ForbidDuplicateTypesAndValues => {\n@@ -1016,31 +1030,31 @@ impl Resolver {\n                             Some(def_mod(_)) | None => {}\n                             Some(_) => {\n                                 n = Some(TypeNS);\n-                                is_duplicate = true;\n+                                duplicate_type = TypeError;\n                             }\n                         };\n                         if child.defined_in_namespace(ValueNS) {\n-                            is_duplicate = true;\n+                            duplicate_type = ValueError;\n                             n = Some(ValueNS);\n                         }\n                         n\n                     }\n                     OverwriteDuplicates => None\n                 };\n-                if is_duplicate {\n+                if (duplicate_type != NoError) {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n                     let ns = ns.unwrap();\n                     self.session.span_err(sp,\n                         fmt!(\"duplicate definition of %s `%s`\",\n-                             namespace_to_str(ns),\n+                             namespace_error_to_str(duplicate_type),\n                              self.session.str_of(name)));\n                     {\n                         let r = child.span_for_namespace(ns);\n                         for r.iter().advance |sp| {\n                             self.session.span_note(*sp,\n                                  fmt!(\"first definition of %s %s here:\",\n-                                      namespace_to_str(ns),\n+                                      namespace_error_to_str(duplicate_type),\n                                       self.session.str_of(name)));\n                         }\n                     }"}, {"sha": "5502b18f094130910049e6f28d78ae2ce6f3f88e", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f80591d84790a9571707a85cf4bc5d8f6df114d/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80591d84790a9571707a85cf4bc5d8f6df114d/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=9f80591d84790a9571707a85cf4bc5d8f6df114d", "patch": "@@ -10,6 +10,6 @@\n \n pub mod a {}\n \n-pub mod a {} //~ ERROR duplicate definition of type `a`\n+pub mod a {} //~ ERROR duplicate definition of module `a`\n \n fn main() {}"}]}