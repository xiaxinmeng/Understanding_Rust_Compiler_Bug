{"sha": "d7b6bd8f131a269102662ff249e916d6f7069f97", "node_id": "C_kwDOAAsO6NoAKGQ3YjZiZDhmMTMxYTI2OTEwMjY2MmZmMjQ5ZTkxNmQ2ZjcwNjlmOTc", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-27T08:20:55Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-27T16:03:18Z"}, "message": "improve errors for incomplete functions in struct definitions", "tree": {"sha": "052ab776ad1bb20e2d6a09750e7aca277a26509d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/052ab776ad1bb20e2d6a09750e7aca277a26509d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b6bd8f131a269102662ff249e916d6f7069f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b6bd8f131a269102662ff249e916d6f7069f97", "html_url": "https://github.com/rust-lang/rust/commit/d7b6bd8f131a269102662ff249e916d6f7069f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b6bd8f131a269102662ff249e916d6f7069f97/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "746ddfdf4b97e9afca55aa77d738963316ef9fed", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d7b6bd8f131a269102662ff249e916d6f7069f97/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b6bd8f131a269102662ff249e916d6f7069f97/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=d7b6bd8f131a269102662ff249e916d6f7069f97", "patch": "@@ -1753,18 +1753,24 @@ impl<'a> Parser<'a> {\n                 };\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) =\n-                    self.parse_fn(&mut AttrVec::new(), fn_parse_mode, lo, &inherited_vis)\n-                {\n-                    db.delay_as_bug();\n+                match self.parse_fn(&mut AttrVec::new(), fn_parse_mode, lo, &inherited_vis) {\n+                    Ok(_) => {\n+                        let mut err = self.struct_span_err(\n+                            lo.to(self.prev_token.span),\n+                            &format!(\"functions are not allowed in {adt_ty} definitions\"),\n+                        );\n+                        err.help(\n+                            \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n+                        );\n+                        err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                        err\n+                    }\n+                    Err(err) => {\n+                        err.cancel();\n+                        self.restore_snapshot(snapshot);\n+                        self.expected_ident_found()\n+                    }\n                 }\n-                let mut err = self.struct_span_err(\n-                    lo.to(self.prev_token.span),\n-                    &format!(\"functions are not allowed in {adt_ty} definitions\"),\n-                );\n-                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n-                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n-                err\n             } else if self.eat_keyword(kw::Struct) {\n                 match self.parse_item_struct() {\n                     Ok((ident, _)) => {"}, {"sha": "188257ea53a316a94cc27b7aa6eaf60bf7e716ad", "filename": "src/test/ui/parser/fn-field-parse-error-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs?ref=d7b6bd8f131a269102662ff249e916d6f7069f97", "patch": "@@ -3,7 +3,7 @@\n struct Baz {\n     inner : dyn fn ()\n     //~^ ERROR expected `,`, or `}`, found keyword `fn`\n-    //~| ERROR functions are not allowed in struct definitions\n+    //~| ERROR expected identifier, found keyword `fn`\n     //~| ERROR cannot find type `dyn` in this scope\n }\n "}, {"sha": "3bf68e8cc04fe96963a7d6f12cbc58250be952f0", "filename": "src/test/ui/parser/fn-field-parse-error-ice.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr?ref=d7b6bd8f131a269102662ff249e916d6f7069f97", "patch": "@@ -4,16 +4,18 @@ error: expected `,`, or `}`, found keyword `fn`\n LL |     inner : dyn fn ()\n    |                ^ help: try adding a comma: `,`\n \n-error: functions are not allowed in struct definitions\n+error: expected identifier, found keyword `fn`\n   --> $DIR/fn-field-parse-error-ice.rs:4:17\n    |\n LL | struct Baz {\n    |        --- while parsing this struct\n LL |     inner : dyn fn ()\n-   |                 ^^\n+   |                 ^^ expected identifier, found keyword\n    |\n-   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n-   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+help: escape `fn` to use it as an identifier\n+   |\n+LL |     inner : dyn r#fn ()\n+   |                 ++\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/fn-field-parse-error-ice.rs:4:13"}, {"sha": "b43d1d4395a58cf6373db37052cb6641218af5bf", "filename": "src/test/ui/structs/incomplete-fn-in-struct-definition.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs?ref=d7b6bd8f131a269102662ff249e916d6f7069f97", "patch": "@@ -0,0 +1,5 @@\n+fn main() {}\n+\n+struct S {\n+    fn //~ ERROR expected identifier, found keyword `fn`\n+}"}, {"sha": "2c860606710210646523b57dd3cd6731eab592ef", "filename": "src/test/ui/structs/incomplete-fn-in-struct-definition.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b6bd8f131a269102662ff249e916d6f7069f97/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr?ref=d7b6bd8f131a269102662ff249e916d6f7069f97", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/incomplete-fn-in-struct-definition.rs:4:5\n+   |\n+LL |     fn\n+   |     ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL |     r#fn\n+   |     ++\n+\n+error: aborting due to previous error\n+"}]}