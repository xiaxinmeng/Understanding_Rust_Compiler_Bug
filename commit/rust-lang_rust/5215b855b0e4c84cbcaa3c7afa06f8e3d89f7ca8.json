{"sha": "5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "node_id": "C_kwDOAAsO6NoAKDUyMTViODU1YjBlNGM4NGNiY2FhM2M3YWZhMDZmOGUzZDg5ZjdjYTg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-04T06:13:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T06:13:20Z"}, "message": "Rollup merge of #88481 - bjorn3:remove_feature_gates, r=cjgillot\n\nRemove some feature gates\n\nThe first commit removes various feature gates that are unused. The second commit replaces some `Fn` implementations with `Iterator` implementations, which is much cleaner IMO. The third commit replaces an unboxed_closures feature gate with min_specialization. For some reason the unboxed_closures feature gate suppresses the min_specialization feature gate from triggering on an `TrustedStep` impl. The last comment just turns a regular comment into a doc comment as drive by cleanup. I can move it to a separate PR if preferred.", "tree": {"sha": "caed7db34e90ef08c07c22e400506f73ca8fb6b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caed7db34e90ef08c07c22e400506f73ca8fb6b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWpuBCRBK7hj4Ov3rIwAAr1oIAGN9AYVPQmzmWGphwTRzsi4y\nt/StjHzNyfjcFWliHVlVlhUwmJu9MYGR302SjESre0AxMk4BGxxJKy9d+qv/JEG3\nk0T92Q6lQs6mUWHjgjK4XmXjJ5sW958ZwH++h+Uz2YEwfH/i2dKWf2KSUYpButP/\nTTiQyB60Z+28lo3Iui8wVKZLMvzvjg+9KUa/DVujUyQHW3dLYvuop/2H8yE5r+TE\nLjXCO2AEejlAr3JeZu9DfCGkTLZ8G/yoZ7oyFkLKBU2HJOkdxaxGZt7576UPWVOz\ncAXorn0DFxxn9ZOBxT2712q6wqtzB/nTUAY2zw6jI9gm0q2Z2BGtehY8oLGU/1s=\n=V99e\n-----END PGP SIGNATURE-----\n", "payload": "tree caed7db34e90ef08c07c22e400506f73ca8fb6b0\nparent 5e66ba799beaa6d5616e448d3b688e633d0eea62\nparent 9f4cb862caf936858450721b548b303fb3eec351\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633328000 -0700\ncommitter GitHub <noreply@github.com> 1633328000 -0700\n\nRollup merge of #88481 - bjorn3:remove_feature_gates, r=cjgillot\n\nRemove some feature gates\n\nThe first commit removes various feature gates that are unused. The second commit replaces some `Fn` implementations with `Iterator` implementations, which is much cleaner IMO. The third commit replaces an unboxed_closures feature gate with min_specialization. For some reason the unboxed_closures feature gate suppresses the min_specialization feature gate from triggering on an `TrustedStep` impl. The last comment just turns a regular comment into a doc comment as drive by cleanup. I can move it to a separate PR if preferred.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "html_url": "https://github.com/rust-lang/rust/commit/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e66ba799beaa6d5616e448d3b688e633d0eea62", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e66ba799beaa6d5616e448d3b688e633d0eea62", "html_url": "https://github.com/rust-lang/rust/commit/5e66ba799beaa6d5616e448d3b688e633d0eea62"}, {"sha": "9f4cb862caf936858450721b548b303fb3eec351", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4cb862caf936858450721b548b303fb3eec351", "html_url": "https://github.com/rust-lang/rust/commit/9f4cb862caf936858450721b548b303fb3eec351"}], "stats": {"total": 96, "additions": 31, "deletions": 65}, "files": [{"sha": "f22d355e61344d9f0dbddb567d84b2fbd165ff33", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -144,7 +144,7 @@ impl<R> MemberConstraintSet<'tcx, R>\n where\n     R: Copy + Hash + Eq,\n {\n-    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> {\n+    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> + '_ {\n         self.constraints.indices()\n     }\n "}, {"sha": "734a5b4972bcce6c3700489252412bd877a4d8bc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -497,7 +497,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Returns an iterator over all the region indices.\n-    pub fn regions(&self) -> impl Iterator<Item = RegionVid> {\n+    pub fn regions(&self) -> impl Iterator<Item = RegionVid> + '_ {\n         self.definitions.indices()\n     }\n "}, {"sha": "370e8ffed728b9bceec372369635442d02320736", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -7,7 +7,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(allow_internal_unstable)]\n #![feature(array_windows)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]"}, {"sha": "a72a27e07bd77fb2cc74f0ef85140aac307be79a", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -2,9 +2,8 @@\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n-#![feature(unboxed_closures)]\n+#![feature(min_specialization)]\n #![feature(test)]\n-#![feature(fn_traits)]\n \n pub mod bit_set;\n pub mod vec;"}, {"sha": "56ea04539e57fc7abcc40be853fbc9425d079f8b", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -3,9 +3,9 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::iter::{self, FromIterator};\n+use std::iter::FromIterator;\n use std::marker::PhantomData;\n-use std::ops::{Index, IndexMut, Range, RangeBounds};\n+use std::ops::{Index, IndexMut, RangeBounds};\n use std::slice;\n use std::vec;\n \n@@ -518,8 +518,6 @@ impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n     }\n }\n \n-pub type Enumerated<I, J> = iter::Map<iter::Enumerate<J>, IntoIdx<I>>;\n-\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n     pub fn new() -> Self {\n@@ -596,8 +594,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn into_iter_enumerated(self) -> Enumerated<I, vec::IntoIter<T>> {\n-        self.raw.into_iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn into_iter_enumerated(\n+        self,\n+    ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {\n+        self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -606,13 +606,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated(&self) -> Enumerated<I, slice::Iter<'_, T>> {\n-        self.raw.iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &T)> + ExactSizeIterator + '_ {\n+        self.raw.iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n-    pub fn indices(&self) -> iter::Map<Range<usize>, IntoIdx<I>> {\n-        (0..self.len()).map(IntoIdx { _marker: PhantomData })\n+    pub fn indices(&self) -> impl DoubleEndedIterator<Item = I> + ExactSizeIterator + 'static {\n+        (0..self.len()).map(|n| I::new(n))\n     }\n \n     #[inline]\n@@ -621,8 +623,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated_mut(&mut self) -> Enumerated<I, slice::IterMut<'_, T>> {\n-        self.raw.iter_mut().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &mut T)> + ExactSizeIterator + '_ {\n+        self.raw.iter_mut().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -638,7 +642,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n         &'a mut self,\n         range: R,\n     ) -> impl Iterator<Item = (I, T)> + 'a {\n-        self.raw.drain(range).enumerate().map(IntoIdx { _marker: PhantomData })\n+        self.raw.drain(range).enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -832,36 +836,5 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n     }\n }\n \n-pub struct IntoIdx<I: Idx> {\n-    _marker: PhantomData<fn(&I)>,\n-}\n-impl<I: Idx, T> FnOnce<((usize, T),)> for IntoIdx<I> {\n-    type Output = (I, T);\n-\n-    extern \"rust-call\" fn call_once(self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx, T> FnMut<((usize, T),)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx> FnOnce<(usize,)> for IntoIdx<I> {\n-    type Output = I;\n-\n-    extern \"rust-call\" fn call_once(self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n-impl<I: Idx> FnMut<(usize,)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "17eb00545847c046124b049cb288a3817b77845b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -26,7 +26,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(test, feature(test))]\n #![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "1f2bfa5e7d904ae84b2f13d647e235894422fc8d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -41,13 +41,11 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n-#![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]"}, {"sha": "434008ecb1f4f1348fa6f8a4742867445baa85ec", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -1,10 +1,10 @@\n-// This module contains some shared code for encoding and decoding various\n-// things from the `ty` module, and in particular implements support for\n-// \"shorthands\" which allow to have pointers back into the already encoded\n-// stream instead of re-encoding the same thing twice.\n-//\n-// The functionality in here is shared between persisting to crate metadata and\n-// persisting to incr. comp. caches.\n+//! This module contains some shared code for encoding and decoding various\n+//! things from the `ty` module, and in particular implements support for\n+//! \"shorthands\" which allow to have pointers back into the already encoded\n+//! stream instead of re-encoding the same thing twice.\n+//!\n+//! The functionality in here is shared between persisting to crate metadata and\n+//! persisting to incr. comp. caches.\n \n use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};"}, {"sha": "f2b341593826b3e0e3dbd9705e023d9452611f6f", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -1,6 +1,5 @@\n-use core::slice::Iter;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Enumerated, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -337,7 +336,9 @@ impl MovePathLookup {\n \n     /// An enumerated iterator of `local`s and their associated\n     /// `MovePathIndex`es.\n-    pub fn iter_locals_enumerated(&self) -> Enumerated<Local, Iter<'_, MovePathIndex>> {\n+    pub fn iter_locals_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (Local, &MovePathIndex)> + ExactSizeIterator {\n         self.locals.iter_enumerated()\n     }\n }"}, {"sha": "23d5d575d9447d7b97cd7cbb4ae1a42115dd18cb", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -15,7 +15,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n-#![feature(unchecked_math)]\n \n use std::path::{Path, PathBuf};\n "}, {"sha": "60f8e196bcba1c8c4227b3efd28765e0521f5972", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=5215b855b0e4c84cbcaa3c7afa06f8e3d89f7ca8", "patch": "@@ -6,8 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n-#![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}]}