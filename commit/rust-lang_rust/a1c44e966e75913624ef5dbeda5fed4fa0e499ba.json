{"sha": "a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzQ0ZTk2NmU3NTkxMzYyNGVmNWRiZWRhNWZlZDRmYTBlNDk5YmE=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2018-05-22T13:45:14Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-05-23T12:47:48Z"}, "message": "Update to nightly 2018-05-22\n\nFixes #2788", "tree": {"sha": "f3d94181a2be99861c8f2ff43ed09f5db9779275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d94181a2be99861c8f2ff43ed09f5db9779275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "html_url": "https://github.com/rust-lang/rust/commit/a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6503eb4b24897e9317b4af2faaf6b603be32dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6503eb4b24897e9317b4af2faaf6b603be32dd", "html_url": "https://github.com/rust-lang/rust/commit/3c6503eb4b24897e9317b4af2faaf6b603be32dd"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "fae2897762e8d00d3b6dfd8f09b05231921b63e7", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             op.node,\n                             cx,\n                             ty,\n-                            rty,\n+                            rty.into(),\n                             Add: BiAdd,\n                             Sub: BiSub,\n                             Mul: BiMul,"}, {"sha": "3e803c11b1a2ad2e9a69ed85d8166e62236ba591", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -429,9 +429,9 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             ty::TyRef(_, tam, _) => match tam.sty {\n                 ty::TyStr => {\n                     let alloc = tcx\n-                        .interpret_interner\n-                        .get_alloc(ptr.alloc_id)\n-                        .unwrap();\n+                        .alloc_map\n+                        .lock()\n+                        .unwrap_memory(ptr.alloc_id);\n                     let offset = ptr.offset.bytes() as usize;\n                     let n = n as usize;\n                     String::from_utf8(alloc.bytes[offset..(offset + n)].to_owned()).ok().map(Constant::Str)"}, {"sha": "37c0e1ef0c1bd0ba99aa5301f6c6686efde5b447", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -50,9 +50,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n         if let ItemEnum(ref def, _) = item.node {\n             for var in &def.variants {\n                 let variant = &var.node;\n-                if let Some(body_id) = variant.disr_expr {\n+                if let Some(ref anon_const) = variant.disr_expr {\n                     let param_env = ty::ParamEnv::empty();\n-                    let did = cx.tcx.hir.body_owner_def_id(body_id);\n+                    let did = cx.tcx.hir.body_owner_def_id(anon_const.body);\n                     let substs = Substs::identity_for_item(cx.tcx.global_tcx(), did);\n                     let instance = ty::Instance::new(did, substs);\n                     let cid = GlobalId {"}, {"sha": "ca441aa9a93c91401171d10ce075bb41a4f88609", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         let lcpy = is_copy(cx, lty);\n                         let rcpy = is_copy(cx, rty);\n                         // either operator autorefs or both args are copyable\n-                        if (requires_ref || (lcpy && rcpy)) && implements_trait(cx, lty, trait_id, &[rty]) {\n+                        if (requires_ref || (lcpy && rcpy)) && implements_trait(cx, lty, trait_id, &[rty.into()]) {\n                             span_lint_and_then(\n                                 cx,\n                                 OP_REF,\n@@ -106,12 +106,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                     );\n                                 },\n                             )\n-                        } else if lcpy && !rcpy && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right)]) {\n+                        } else if lcpy && !rcpy && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n                                 db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n                             })\n-                        } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty]) {\n+                        } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(\n                                 cx,\n                                 OP_REF,\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                     (&ExprAddrOf(_, ref l), _) => {\n                         let lty = cx.tables.expr_ty(l);\n                         let lcpy = is_copy(cx, lty);\n-                        if (requires_ref || lcpy) && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right)]) {\n+                        if (requires_ref || lcpy) && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n                                 db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                     (_, &ExprAddrOf(_, ref r)) => {\n                         let rty = cx.tables.expr_ty(r);\n                         let rcpy = is_copy(cx, rty);\n-                        if (requires_ref || rcpy) && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty]) {\n+                        if (requires_ref || rcpy) && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n                                 db.span_suggestion(right.span, \"use the right value directly\", rsnip);"}, {"sha": "080a2716fb731494fea45c7c3a2c5e7226027e57", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -495,13 +495,13 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr) {\n     // *arg impls PartialEq<other>\n     if !arg_ty\n         .builtin_deref(true)\n-        .map_or(false, |tam| implements_trait(cx, tam.ty, partial_eq_trait_id, &[other_ty]))\n+        .map_or(false, |tam| implements_trait(cx, tam.ty, partial_eq_trait_id, &[other_ty.into()]))\n         // arg impls PartialEq<*other>\n         && !other_ty\n         .builtin_deref(true)\n-        .map_or(false, |tam| implements_trait(cx, arg_ty, partial_eq_trait_id, &[tam.ty]))\n+        .map_or(false, |tam| implements_trait(cx, arg_ty, partial_eq_trait_id, &[tam.ty.into()]))\n         // arg impls PartialEq<other>\n-        && !implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty])\n+        && !implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty.into()])\n     {\n         return;\n     }"}, {"sha": "907f9cb85feff1b078267edfd187e04d15898c43", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -175,7 +175,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             cx,\n                             cx.tcx.mk_imm_ref(&RegionKind::ReErased, ty),\n                             t.def_id(),\n-                            &t.skip_binder().input_types().skip(1).collect::<Vec<_>>(),\n+                            &t.skip_binder()\n+                                .input_types()\n+                                .skip(1)\n+                                .map(|ty| ty.into())\n+                                .collect::<Vec<_>>(),\n                         )\n                     }),\n                 )"}, {"sha": "05a6650aec551f79d2a97127f3296a426799d039", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -348,15 +348,15 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut Vec<(Name, Span)>) {\n     match ty.node {\n         TySlice(ref sty) => check_ty(cx, sty, bindings),\n-        TyArray(ref fty, body_id) => {\n+        TyArray(ref fty, ref anon_const) => {\n             check_ty(cx, fty, bindings);\n-            check_expr(cx, &cx.tcx.hir.body(body_id).value, bindings);\n+            check_expr(cx, &cx.tcx.hir.body(anon_const.body).value, bindings);\n         },\n         TyPtr(MutTy { ty: ref mty, .. }) | TyRptr(_, MutTy { ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n         TyTup(ref tup) => for t in tup {\n             check_ty(cx, t, bindings)\n         },\n-        TyTypeof(body_id) => check_expr(cx, &cx.tcx.hir.body(body_id).value, bindings),\n+        TyTypeof(ref anon_const) => check_expr(cx, &cx.tcx.hir.body(anon_const.body).value, bindings),\n         _ => (),\n     }\n }"}, {"sha": "deaa796aa054b40564d898402a543e3f60b4d472", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -120,11 +120,11 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprMethodCall(ref l_path, _, ref l_args), &ExprMethodCall(ref r_path, _, ref r_args)) => {\n                 !self.ignore_fn && l_path == r_path && self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprRepeat(ref le, ll_id), &ExprRepeat(ref re, rl_id)) => {\n-                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id));\n-                let ll = celcx.expr(&self.cx.tcx.hir.body(ll_id).value);\n-                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(rl_id));\n-                let rl = celcx.expr(&self.cx.tcx.hir.body(rl_id).value);\n+            (&ExprRepeat(ref le, ref ll_id), &ExprRepeat(ref re, ref rl_id)) => {\n+                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id.body));\n+                let ll = celcx.expr(&self.cx.tcx.hir.body(ll_id.body).value);\n+                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(rl_id.body));\n+                let rl = celcx.expr(&self.cx.tcx.hir.body(rl_id.body).value);\n \n                 self.eq_expr(le, re) && ll == rl\n             },\n@@ -234,16 +234,16 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     fn eq_ty(&mut self, left: &Ty, right: &Ty) -> bool {\n         match (&left.node, &right.node) {\n             (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyArray(ref lt, ll_id), &TyArray(ref rt, rl_id)) => {\n+            (&TyArray(ref lt, ref ll_id), &TyArray(ref rt, ref rl_id)) => {\n                 let full_table = self.tables;\n \n-                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id));\n-                self.tables = self.cx.tcx.body_tables(ll_id);\n-                let ll = celcx.expr(&self.cx.tcx.hir.body(ll_id).value);\n+                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id.body));\n+                self.tables = self.cx.tcx.body_tables(ll_id.body);\n+                let ll = celcx.expr(&self.cx.tcx.hir.body(ll_id.body).value);\n \n-                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(rl_id));\n-                self.tables = self.cx.tcx.body_tables(rl_id);\n-                let rl = celcx.expr(&self.cx.tcx.hir.body(rl_id).value);\n+                let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(rl_id.body));\n+                self.tables = self.cx.tcx.body_tables(rl_id.body);\n+                let rl = celcx.expr(&self.cx.tcx.hir.body(rl_id.body).value);\n \n                 let eq_ty = self.eq_ty(lt, rt);\n                 self.tables = full_table;\n@@ -474,13 +474,13 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(&path.name);\n                 self.hash_exprs(args);\n             },\n-            ExprRepeat(ref e, l_id) => {\n+            ExprRepeat(ref e, ref l_id) => {\n                 let c: fn(_, _) -> _ = ExprRepeat;\n                 c.hash(&mut self.s);\n                 self.hash_expr(e);\n                 let full_table = self.tables;\n-                self.tables = self.cx.tcx.body_tables(l_id);\n-                self.hash_expr(&self.cx.tcx.hir.body(l_id).value);\n+                self.tables = self.cx.tcx.body_tables(l_id.body);\n+                self.hash_expr(&self.cx.tcx.hir.body(l_id.body).value);\n                 self.tables = full_table;\n             },\n             ExprRet(ref e) => {"}, {"sha": "6c3d8bc2989c57fd02259e979f02ad2b139fa1b6", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -330,12 +330,12 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n                 print_expr(cx, base, indent + 1);\n             }\n         },\n-        hir::ExprRepeat(ref val, body_id) => {\n+        hir::ExprRepeat(ref val, ref anon_const) => {\n             println!(\"{}Repeat\", ind);\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.hir.body(body_id).value, indent + 1);\n+            print_expr(cx, &cx.tcx.hir.body(anon_const.body).value, indent + 1);\n         },\n     }\n }"}, {"sha": "86af4e8625f17956d6fae405bdbf98a6905dcbc2", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c44e966e75913624ef5dbeda5fed4fa0e499ba/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a1c44e966e75913624ef5dbeda5fed4fa0e499ba", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::map::Node;\n use rustc::lint::{LateContext, Level, Lint, LintContext};\n use rustc::session::Session;\n use rustc::traits;\n-use rustc::ty::{self, Ty, TyCtxt, layout::{self, IntegerExt}};\n+use rustc::ty::{self, Ty, TyCtxt, layout::{self, IntegerExt}, subst::Kind};\n use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n use std::borrow::Cow;\n use std::env;\n@@ -295,7 +295,7 @@ pub fn implements_trait<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n-    ty_params: &[Ty<'tcx>],\n+    ty_params: &[Kind<'tcx>],\n ) -> bool {\n     let ty = cx.tcx.erase_regions(&ty);\n     let obligation ="}]}