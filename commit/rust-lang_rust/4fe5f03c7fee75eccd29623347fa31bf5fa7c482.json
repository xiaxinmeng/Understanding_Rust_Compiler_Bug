{"sha": "4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "node_id": "C_kwDOAAsO6NoAKDRmZTVmMDNjN2ZlZTc1ZWNjZDI5NjIzMzQ3ZmEzMWJmNWZhN2M0ODI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-16T12:41:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-16T12:41:47Z"}, "message": "Rename compound things to variant things", "tree": {"sha": "4438f0313d61184ab23de803a654b0266a213436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4438f0313d61184ab23de803a654b0266a213436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "html_url": "https://github.com/rust-lang/rust/commit/4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46008d4cf452e04e5fa3befe070e2d15decac93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46008d4cf452e04e5fa3befe070e2d15decac93e", "html_url": "https://github.com/rust-lang/rust/commit/46008d4cf452e04e5fa3befe070e2d15decac93e"}], "stats": {"total": 137, "additions": 101, "deletions": 36}, "files": [{"sha": "428b8d1109f54a6cc6af09d113c013105f6ea521", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -69,24 +69,17 @@ pub(crate) fn inlay_hints(\n \n     let mut hints = Vec::new();\n \n-    if let Some(range_limit) = range_limit {\n-        let range_limit = range_limit.range;\n-        match file.covering_element(range_limit) {\n+    let get_hints = |node| get_hints(&mut hints, &sema, config, node);\n+    match range_limit {\n+        Some(FileRange { range, .. }) => match file.covering_element(range) {\n             NodeOrToken::Token(_) => return hints,\n-            NodeOrToken::Node(n) => {\n-                for node in n\n-                    .descendants()\n-                    .filter(|descendant| range_limit.contains_range(descendant.text_range()))\n-                {\n-                    get_hints(&mut hints, &sema, config, node);\n-                }\n-            }\n-        }\n-    } else {\n-        for node in file.descendants() {\n-            get_hints(&mut hints, &sema, config, node);\n-        }\n-    }\n+            NodeOrToken::Node(n) => n\n+                .descendants()\n+                .filter(|descendant| range.contains_range(descendant.text_range()))\n+                .for_each(get_hints),\n+        },\n+        None => file.descendants().for_each(get_hints),\n+    };\n \n     hints\n }"}, {"sha": "ed59eb6bd3eb42f6e4e16157b65a6eec5984ee92", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -58,7 +58,7 @@ pub(super) enum PathKind {\n \n #[derive(Debug)]\n pub(crate) struct PathCompletionCtx {\n-    /// If this is a call with () already there\n+    /// If this is a call with () already there (or {} in case of record patterns)\n     pub(super) has_call_parens: bool,\n     /// Whether this path stars with a `::`.\n     pub(super) is_absolute_path: bool,\n@@ -890,6 +890,7 @@ impl<'a> CompletionContext<'a> {\n                         Some(PathKind::Pat)\n                     },\n                     ast::RecordPat(it) => {\n+                        path_ctx.has_call_parens = true;\n                         pat_ctx = Some(pattern_context_for(original_file, it.into()));\n                         Some(PathKind::Pat)\n                     },"}, {"sha": "d6fa86b55da815b94d4b2eace2a98993f8cd5f74", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -8,7 +8,7 @@ pub(crate) mod const_;\n pub(crate) mod pattern;\n pub(crate) mod type_alias;\n pub(crate) mod struct_literal;\n-pub(crate) mod compound;\n+pub(crate) mod variant;\n pub(crate) mod union_literal;\n \n use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};"}, {"sha": "9e27a84e2f7da2d747ca1ae365b97df559feb001", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -7,8 +7,9 @@ use syntax::SmolStr;\n use crate::{\n     item::{CompletionItem, ImportEdit},\n     render::{\n-        compound::{format_literal_label, render_record, render_tuple, RenderedCompound},\n-        compute_ref_match, compute_type_match, RenderContext,\n+        compute_ref_match, compute_type_match,\n+        variant::{format_literal_label, render_record, render_tuple, RenderedLiteral},\n+        RenderContext,\n     },\n     CompletionRelevance,\n };\n@@ -56,7 +57,7 @@ fn render(\n             render_record(db, ctx.snippet_cap(), &variant.fields(db), Some(&qualified_name))\n         }\n         StructKind::Unit => {\n-            RenderedCompound { literal: qualified_name.clone(), detail: qualified_name.clone() }\n+            RenderedLiteral { literal: qualified_name.clone(), detail: qualified_name.clone() }\n         }\n     };\n "}, {"sha": "6a46de4229a4da2b50e191cb7a24c1cd13575fcb", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -192,7 +192,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n         Some(PathCompletionCtx { kind: Some(PathKind::Expr), has_call_parens: true, .. }) => {\n             return false\n         }\n-        Some(PathCompletionCtx { kind: Some(PathKind::Use), .. }) => {\n+        Some(PathCompletionCtx { kind: Some(PathKind::Use | PathKind::Type), .. }) => {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "b4fa26add1f2b7928e041bab39be3601f89899b2", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for `struct` literal.\n \n use hir::{HasAttrs, Name, StructKind};\n+use ide_db::SymbolKind;\n use syntax::SmolStr;\n \n use crate::{\n-    render::compound::{\n-        format_literal_label, render_record, render_tuple, visible_fields, RenderedCompound,\n+    render::variant::{\n+        format_literal_label, render_record, render_tuple, visible_fields, RenderedLiteral,\n     },\n     render::RenderContext,\n     CompletionItem, CompletionItemKind,\n@@ -37,12 +38,12 @@ pub(crate) fn render_struct_literal(\n fn build_completion(\n     ctx: &RenderContext<'_>,\n     name: SmolStr,\n-    rendered: RenderedCompound,\n+    rendered: RenderedLiteral,\n     kind: StructKind,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(\n-        CompletionItemKind::Snippet,\n+        CompletionItemKind::SymbolKind(SymbolKind::Struct),\n         ctx.source_range(),\n         format_literal_label(&name, kind),\n     );\n@@ -64,7 +65,7 @@ fn render_literal(\n     name: &str,\n     kind: StructKind,\n     fields: &[hir::Field],\n-) -> Option<RenderedCompound> {\n+) -> Option<RenderedLiteral> {\n     let path_string;\n \n     let qualified_name = if let Some(path) = path {"}, {"sha": "209f0069821baa4c8d76dcea1ce2b44ec7f3eeb4", "filename": "crates/ide_completion/src/render/union_literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for `union` literals.\n \n use hir::{HirDisplay, Name, StructKind};\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n \n use crate::{\n     render::{\n-        compound::{format_literal_label, visible_fields},\n+        variant::{format_literal_label, visible_fields},\n         RenderContext,\n     },\n     CompletionItem, CompletionItemKind,\n@@ -25,7 +26,7 @@ pub(crate) fn render_union_literal(\n     };\n \n     let mut item = CompletionItem::new(\n-        CompletionItemKind::Snippet,\n+        CompletionItemKind::SymbolKind(SymbolKind::Union),\n         ctx.source_range(),\n         format_literal_label(&name, StructKind::Record),\n     );"}, {"sha": "e6a92f387ea4adeb564bda2d6f9b0ef0c02c110e", "filename": "crates/ide_completion/src/render/variant.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fvariant.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -9,7 +9,7 @@ use syntax::SmolStr;\n /// A rendered struct, union, or enum variant, split into fields for actual\n /// auto-completion (`literal`, using `field: ()`) and display in the\n /// completions menu (`detail`, using `field: type`).\n-pub(crate) struct RenderedCompound {\n+pub(crate) struct RenderedLiteral {\n     pub(crate) literal: String,\n     pub(crate) detail: String,\n }\n@@ -21,7 +21,7 @@ pub(crate) fn render_record(\n     snippet_cap: Option<SnippetCap>,\n     fields: &[hir::Field],\n     name: Option<&str>,\n-) -> RenderedCompound {\n+) -> RenderedLiteral {\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n         if snippet_cap.is_some() {\n             f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n@@ -34,7 +34,7 @@ pub(crate) fn render_record(\n         f(&format_args!(\"{}: {}\", field.name(db), field.ty(db).display(db)))\n     });\n \n-    RenderedCompound {\n+    RenderedLiteral {\n         literal: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), completions),\n         detail: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), types),\n     }\n@@ -47,7 +47,7 @@ pub(crate) fn render_tuple(\n     snippet_cap: Option<SnippetCap>,\n     fields: &[hir::Field],\n     name: Option<&str>,\n-) -> RenderedCompound {\n+) -> RenderedLiteral {\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, _), f| {\n         if snippet_cap.is_some() {\n             f(&format_args!(\"${{{}:()}}\", idx + 1))\n@@ -58,7 +58,7 @@ pub(crate) fn render_tuple(\n \n     let types = fields.iter().format_with(\", \", |field, f| f(&field.ty(db).display(db)));\n \n-    RenderedCompound {\n+    RenderedLiteral {\n         literal: format!(\"{}({})\", name.unwrap_or(\"\"), completions),\n         detail: format!(\"{}({})\", name.unwrap_or(\"\"), types),\n     }", "previous_filename": "crates/ide_completion/src/render/compound.rs"}, {"sha": "28b6ba6a374f4dfdec9a50072329671fdbe44ff4", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -378,3 +378,71 @@ fn foo() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn completes_no_delims_if_existing() {\n+    check_empty(\n+        r#\"\n+struct Bar(u32);\n+fn foo() {\n+    match Bar(0) {\n+        B$0(b) => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            kw self::\n+            kw super::\n+            kw crate::\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+struct Foo { bar: u32 }\n+fn foo() {\n+    match Foo { bar: 0 } {\n+        F$0 { bar } => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            kw return\n+            kw self\n+            kw super\n+            kw crate\n+            st Foo\n+            fn foo()  fn()\n+            bt u32\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    TupleVariant(u32)\n+}\n+fn foo() {\n+    match Enum::TupleVariant(0) {\n+        Enum::T$0(b) => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ev TupleVariant(\u2026) TupleVariant(u32)\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    RecordVariant { field: u32 }\n+}\n+fn foo() {\n+    match (Enum::RecordVariant { field: 0 }) {\n+        Enum::RecordV$0 { field } => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ev RecordVariant {\u2026} RecordVariant { field: u32 }\n+        \"#]],\n+    );\n+}"}, {"sha": "0322ecbe39fa4cc6f35d8d7d7bda88a2a41b0b8f", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe5f03c7fee75eccd29623347fa31bf5fa7c482/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=4fe5f03c7fee75eccd29623347fa31bf5fa7c482", "patch": "@@ -166,7 +166,7 @@ fn main() {\n             kw true\n             kw false\n             kw return\n-            sn Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n+            st Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n             fd ..Default::default()\n             fd foo1                 u32\n             fd foo2                 u32"}]}