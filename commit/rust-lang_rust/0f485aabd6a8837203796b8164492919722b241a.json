{"sha": "0f485aabd6a8837203796b8164492919722b241a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNDg1YWFiZDZhODgzNzIwMzc5NmI4MTY0NDkyOTE5NzIyYjI0MWE=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-27T12:52:08Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-27T12:52:08Z"}, "message": "Merge pull request #374 from nrc/fix-fn\n\nUse max width for function decls, not ideal width", "tree": {"sha": "5dabcb3d29c5db9aed5988f085e532ac2403ca5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dabcb3d29c5db9aed5988f085e532ac2403ca5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f485aabd6a8837203796b8164492919722b241a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f485aabd6a8837203796b8164492919722b241a", "html_url": "https://github.com/rust-lang/rust/commit/0f485aabd6a8837203796b8164492919722b241a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f485aabd6a8837203796b8164492919722b241a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afee62e476f10a26bcc5986ff26bdf6f38bc768f", "url": "https://api.github.com/repos/rust-lang/rust/commits/afee62e476f10a26bcc5986ff26bdf6f38bc768f", "html_url": "https://github.com/rust-lang/rust/commit/afee62e476f10a26bcc5986ff26bdf6f38bc768f"}, {"sha": "ba51535a74ac407b53e7ddf27d1e7f5541209116", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba51535a74ac407b53e7ddf27d1e7f5541209116", "html_url": "https://github.com/rust-lang/rust/commit/ba51535a74ac407b53e7ddf27d1e7f5541209116"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "b21fe3d2a076c90f2236e5658715a60335b467e0", "filename": "src/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -216,7 +216,6 @@ macro_rules! create_config {\n create_config! {\n     max_width: usize, \"Maximum width of each line\",\n     ideal_width: usize, \"Ideal width of each line (only used for comments)\",\n-    leeway: usize, \"Leeway of line width (deprecated)\",\n     tab_spaces: usize, \"Number of spaces per tab\",\n     fn_call_width: usize, \"Maximum width of the args of a function call\\\n                            before faling back to vertical formatting\",\n@@ -258,7 +257,6 @@ impl Default for Config {\n         Config {\n             max_width: 100,\n             ideal_width: 80,\n-            leeway: 5,\n             tab_spaces: 4,\n             fn_call_width: 50,\n             struct_lit_width: 12,"}, {"sha": "c7cab867afd19da5215d8d4fc33449fb6743855b", "filename": "src/items.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -513,8 +513,6 @@ impl<'a> FmtVisitor<'a> {\n                                 ret_str_len: usize,\n                                 newline_brace: bool)\n                                 -> (usize, usize, Indent) {\n-        let mut budgets = None;\n-\n         // Try keeping everything on the same line\n         if !result.contains(\"\\n\") {\n             // 3 = `() `, space is before ret_string\n@@ -530,31 +528,28 @@ impl<'a> FmtVisitor<'a> {\n \n             // 2 = `()`\n             let used_space = indent.width() + result.len() + 2;\n-            let max_space = self.config.ideal_width + self.config.leeway;\n+            let max_space = self.config.max_width;\n             debug!(\"compute_budgets_for_args: used_space: {}, max_space: {}\",\n                    used_space,\n                    max_space);\n             if used_space < max_space {\n-                budgets = Some((one_line_budget,\n-                                max_space - used_space,\n-                                indent + result.len() + 1));\n+                return (one_line_budget,\n+                        max_space - used_space,\n+                        indent + result.len() + 1);\n             }\n         }\n \n         // Didn't work. we must force vertical layout and put args on a newline.\n-        if let None = budgets {\n-            let new_indent = indent.block_indent(self.config);\n-            let used_space = new_indent.width() + 2; // account for `(` and `)`\n-            let max_space = self.config.ideal_width + self.config.leeway;\n-            if used_space > max_space {\n-                // Whoops! bankrupt.\n-                // TODO: take evasive action, perhaps kill the indent or something.\n-            } else {\n-                budgets = Some((0, max_space - used_space, new_indent));\n-            }\n+        let new_indent = indent.block_indent(self.config);\n+        let used_space = new_indent.width() + 2; // account for `(` and `)`\n+        let max_space = self.config.max_width;\n+        if used_space <= max_space {\n+            (0, max_space - used_space, new_indent)\n+        } else {\n+            // Whoops! bankrupt.\n+            // TODO: take evasive action, perhaps kill the indent or something.\n+            panic!(\"in compute_budgets_for_args\");\n         }\n-\n-        budgets.unwrap()\n     }\n \n     fn newline_for_brace(&self, where_clause: &ast::WhereClause) -> bool {\n@@ -642,7 +637,7 @@ impl<'a> FmtVisitor<'a> {\n                     } else {\n                         0\n                     };\n-                    let budget = self.config.ideal_width - indent.width() - comma_cost - 1; // 1 = )\n+                    let budget = self.config.max_width - indent.width() - comma_cost - 1; // 1 = )\n \n                     let fmt = ListFormatting {\n                         tactic: ListTactic::HorizontalVertical,\n@@ -779,7 +774,7 @@ impl<'a> FmtVisitor<'a> {\n         };\n \n         // 1 = ,\n-        let budget = self.config.ideal_width - offset.width() + self.config.tab_spaces - 1;\n+        let budget = self.config.max_width - offset.width() + self.config.tab_spaces - 1;\n         let fmt = ListFormatting {\n             tactic: tactic,\n             separator: \",\",\n@@ -984,7 +979,7 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: if where_pred_indent != Visual, then the budgets below might\n         // be out by a char or two.\n \n-        let budget = self.config.ideal_width + self.config.leeway - offset.width();\n+        let budget = self.config.max_width - offset.width();\n         let span_start = span_for_where_pred(&where_clause.predicates[0]).lo;\n         let items = itemize_list(self.codemap,\n                                  where_clause.predicates.iter(),"}, {"sha": "1681aff77b4b42233207210df27f35fbcce84dd5", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -1,6 +1,5 @@\n max_width = 100\n ideal_width = 80\n-leeway = 5\n tab_spaces = 2\n newline_style = \"Unix\"\n fn_brace_style = \"SameLineWhere\""}, {"sha": "4a15562d92b72f605e4830f100d82a2f2b5dcef6", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -27,7 +27,7 @@ enum Bar {\n }\n \n enum LongVariants {\n-    First(LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n+    First(LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n           VARIANT),\n     // This is the second variant\n     Second,"}, {"sha": "c991142fa6c8bb75ce17d67167d48eb642e9f3a1", "filename": "tests/target/fn-custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -2,8 +2,8 @@\n // Test some of the ways function signatures can be customised.\n \n // Test compressed layout of args.\n-fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n-       d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd,\n+       e: Eeeeeeeeeeeeeeeeeee) {\n     foo();\n }\n "}, {"sha": "0f7ddef007cfb6d339c9820d0ceee56439d57ca5", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f485aabd6a8837203796b8164492919722b241a/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=0f485aabd6a8837203796b8164492919722b241a", "patch": "@@ -64,8 +64,7 @@ fn qux(a: dadsfa,   // Comment 1\n /// Blah blah blah.\n impl Bar {\n     fn foo(&mut self,\n-           a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, /* commen\n-                                                                         * t on a */\n+           a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n            b: sdfasdfsdfasfs /* closing comment */)\n            -> isize {\n     }"}]}