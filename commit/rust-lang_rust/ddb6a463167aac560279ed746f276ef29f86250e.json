{"sha": "ddb6a463167aac560279ed746f276ef29f86250e", "node_id": "C_kwDOAAsO6NoAKGRkYjZhNDYzMTY3YWFjNTYwMjc5ZWQ3NDZmMjc2ZWYyOWY4NjI1MGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-26T14:57:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T14:57:50Z"}, "message": "Rollup merge of #99729 - cjgillot:rm-unused-tuple, r=michaelwoerister\n\nRemove unused tuple fields\n\nFound by https://github.com/rust-lang/rust/pull/95977", "tree": {"sha": "1110d20ed3994971750792fb454d84691ef3c09a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1110d20ed3994971750792fb454d84691ef3c09a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb6a463167aac560279ed746f276ef29f86250e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4ADvCRBK7hj4Ov3rIwAALGsIAD0FjBFG3Wkcn4A+IbE/7Chz\nZNpTGmFevdVlK4HjSrLpsJKL3p4E5kIDqMFp+tn4lZIZBc2F3Hxj9GpnOFuP3Ws9\nPDPXOiI8HOX5IhMbLRpeLqPVoHADmsjd4epA+5eWVABy7u38UvUqBEoTj5QpCScp\ns/aBhscBsuN14Air+MTZjD7IgSTVcHBt4ljVm4wDNnQ+tedcwZpCglzKs4RRnDJc\nUJ5CGv9/oGokbexyU5bdUXXaJKi2pHnyYHntridCtAjAQ2IJA3RnpPrYRb6VK+Rd\ncB8/EexFl4WphF1Cna/QLqOz1TVrevnTG9x2xxd2oY2rt6TwOFKD1YZmAfCKmg4=\n=QpBa\n-----END PGP SIGNATURE-----\n", "payload": "tree 1110d20ed3994971750792fb454d84691ef3c09a\nparent dfaf6ec128def4f7235501072881f95a226e7eef\nparent 9450f822fb5e499626db748eb7f1fdefd8e557df\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658847470 +0200\ncommitter GitHub <noreply@github.com> 1658847470 +0200\n\nRollup merge of #99729 - cjgillot:rm-unused-tuple, r=michaelwoerister\n\nRemove unused tuple fields\n\nFound by https://github.com/rust-lang/rust/pull/95977\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb6a463167aac560279ed746f276ef29f86250e", "html_url": "https://github.com/rust-lang/rust/commit/ddb6a463167aac560279ed746f276ef29f86250e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb6a463167aac560279ed746f276ef29f86250e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfaf6ec128def4f7235501072881f95a226e7eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfaf6ec128def4f7235501072881f95a226e7eef", "html_url": "https://github.com/rust-lang/rust/commit/dfaf6ec128def4f7235501072881f95a226e7eef"}, {"sha": "9450f822fb5e499626db748eb7f1fdefd8e557df", "url": "https://api.github.com/repos/rust-lang/rust/commits/9450f822fb5e499626db748eb7f1fdefd8e557df", "html_url": "https://github.com/rust-lang/rust/commit/9450f822fb5e499626db748eb7f1fdefd8e557df"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "39faed0bf365cbbb8a9e772fb5c5c7484b0f994f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -2412,9 +2412,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         #[derive(Debug)]\n         enum SubOrigin<'hir> {\n             GAT(&'hir hir::Generics<'hir>),\n-            Impl(&'hir hir::Generics<'hir>),\n-            Trait(&'hir hir::Generics<'hir>),\n-            Fn(&'hir hir::Generics<'hir>),\n+            Impl,\n+            Trait,\n+            Fn,\n             Unknown,\n         }\n         let sub_origin = 'origin: {\n@@ -2429,34 +2429,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         kind: hir::ImplItemKind::TyAlias(..),\n                                         generics,\n                                         ..\n-                                    }) => SubOrigin::GAT(generics),\n-                                    Node::ImplItem(hir::ImplItem {\n-                                        kind: hir::ImplItemKind::Fn(..),\n-                                        generics,\n-                                        ..\n-                                    }) => SubOrigin::Fn(generics),\n-                                    Node::TraitItem(hir::TraitItem {\n+                                    })\n+                                    | Node::TraitItem(hir::TraitItem {\n                                         kind: hir::TraitItemKind::Type(..),\n                                         generics,\n                                         ..\n                                     }) => SubOrigin::GAT(generics),\n-                                    Node::TraitItem(hir::TraitItem {\n-                                        kind: hir::TraitItemKind::Fn(..),\n-                                        generics,\n+                                    Node::ImplItem(hir::ImplItem {\n+                                        kind: hir::ImplItemKind::Fn(..),\n                                         ..\n-                                    }) => SubOrigin::Fn(generics),\n-                                    Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Trait(_, _, generics, _, _),\n+                                    })\n+                                    | Node::TraitItem(hir::TraitItem {\n+                                        kind: hir::TraitItemKind::Fn(..),\n                                         ..\n-                                    }) => SubOrigin::Trait(generics),\n+                                    })\n+                                    | Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Fn(..), ..\n+                                    }) => SubOrigin::Fn,\n                                     Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Impl(hir::Impl { generics, .. }),\n+                                        kind: hir::ItemKind::Trait(..),\n                                         ..\n-                                    }) => SubOrigin::Impl(generics),\n+                                    }) => SubOrigin::Trait,\n                                     Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Fn(_, generics, _),\n-                                        ..\n-                                    }) => SubOrigin::Fn(generics),\n+                                        kind: hir::ItemKind::Impl(..), ..\n+                                    }) => SubOrigin::Impl,\n                                     _ => continue,\n                                 };\n                             }"}, {"sha": "e955a1798b73563199056b85371e71c56ed16475", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         let crate_root = self.r.resolve_crate_root(source.ident);\n                         let crate_name = match crate_root.kind {\n                             ModuleKind::Def(.., name) => name,\n-                            ModuleKind::Block(..) => unreachable!(),\n+                            ModuleKind::Block => unreachable!(),\n                         };\n                         // HACK(eddyb) unclear how good this is, but keeping `$crate`\n                         // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,\n@@ -936,7 +936,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         if self.block_needs_anonymous_module(block) {\n             let module = self.r.new_module(\n                 Some(parent),\n-                ModuleKind::Block(block.id),\n+                ModuleKind::Block,\n                 expansion.to_expn_id(),\n                 block.span,\n                 parent.no_implicit_prelude,"}, {"sha": "0343e8d9b8ec34f5ac8181d90480f79f0e2a09a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -163,7 +163,7 @@ impl<'a> Resolver<'a> {\n \n         let container = match parent.kind {\n             ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id()),\n-            ModuleKind::Block(..) => \"block\",\n+            ModuleKind::Block => \"block\",\n         };\n \n         let old_noun = match old_binding.is_import() {"}, {"sha": "6e6782881427b678e1ecc863a7bd31524dba17eb", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -218,7 +218,7 @@ impl<'a> Resolver<'a> {\n             return Some((self.expn_def_scope(ctxt.remove_mark()), None));\n         }\n \n-        if let ModuleKind::Block(..) = module.kind {\n+        if let ModuleKind::Block = module.kind {\n             return Some((module.parent.unwrap().nearest_item_scope(), None));\n         }\n \n@@ -333,7 +333,7 @@ impl<'a> Resolver<'a> {\n             };\n \n             match module.kind {\n-                ModuleKind::Block(..) => {} // We can see through blocks\n+                ModuleKind::Block => {} // We can see through blocks\n                 _ => break,\n             }\n "}, {"sha": "6b49c6b1ac63eeaeb66086678a5c6e06d302791e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -1444,7 +1444,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     // Items from this module\n                     self.r.add_module_candidates(module, &mut names, &filter_fn);\n \n-                    if let ModuleKind::Block(..) = module.kind {\n+                    if let ModuleKind::Block = module.kind {\n                         // We can see through blocks\n                     } else {\n                         // Items from the prelude"}, {"sha": "31d10008efbfbe8b9278f8c66c4cf356df41d73c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb6a463167aac560279ed746f276ef29f86250e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ddb6a463167aac560279ed746f276ef29f86250e", "patch": "@@ -437,7 +437,7 @@ enum ModuleKind {\n     ///     f(); // Resolves to (1)\n     /// }\n     /// ```\n-    Block(NodeId),\n+    Block,\n     /// Any module with a name.\n     ///\n     /// This could be:\n@@ -454,7 +454,7 @@ impl ModuleKind {\n     /// Get name of the module.\n     pub fn name(&self) -> Option<Symbol> {\n         match self {\n-            ModuleKind::Block(..) => None,\n+            ModuleKind::Block => None,\n             ModuleKind::Def(.., name) => Some(*name),\n         }\n     }\n@@ -530,7 +530,7 @@ impl<'a> ModuleData<'a> {\n     ) -> Self {\n         let is_foreign = match kind {\n             ModuleKind::Def(_, def_id, _) => !def_id.is_local(),\n-            ModuleKind::Block(_) => false,\n+            ModuleKind::Block => false,\n         };\n         ModuleData {\n             parent,"}]}