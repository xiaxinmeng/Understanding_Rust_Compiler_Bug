{"sha": "61da8b84282d4b44f4dd1742328867cae9e5cefc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZGE4Yjg0MjgyZDRiNDRmNGRkMTc0MjMyODg2N2NhZTllNWNlZmM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-13T20:26:03Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T14:47:19Z"}, "message": "Add OsString from/to bytes helper functions", "tree": {"sha": "25fdf99ed238b9de923b4e0de6c7213742aadca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fdf99ed238b9de923b4e0de6c7213742aadca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61da8b84282d4b44f4dd1742328867cae9e5cefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61da8b84282d4b44f4dd1742328867cae9e5cefc", "html_url": "https://github.com/rust-lang/rust/commit/61da8b84282d4b44f4dd1742328867cae9e5cefc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61da8b84282d4b44f4dd1742328867cae9e5cefc/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6af7a523bc51169858fdaa41f85becf3da3a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6af7a523bc51169858fdaa41f85becf3da3a4d", "html_url": "https://github.com/rust-lang/rust/commit/ad6af7a523bc51169858fdaa41f85becf3da3a4d"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "c2e4131a76d108d8a6af54781c5d5d86015fc624", "filename": "src/helpers.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=61da8b84282d4b44f4dd1742328867cae9e5cefc", "patch": "@@ -1,4 +1,5 @@\n use std::mem;\n+use std::ffi::OsString;\n \n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n@@ -345,3 +346,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n }\n+\n+\n+pub fn bytes_to_os_string<'tcx>(bytes: Vec<u8>) -> InterpResult<'tcx, OsString> {\n+        if cfg!(unix) {\n+            Ok(std::os::unix::ffi::OsStringExt::from_vec(bytes))\n+        } else {\n+            std::str::from_utf8(&bytes)\n+                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes).into())\n+                .map(OsString::from)\n+        }\n+    }\n+\n+pub fn os_string_to_bytes<'tcx>(os_string: OsString) -> InterpResult<'tcx, Vec<u8>> {\n+        if cfg!(unix) {\n+            Ok(std::os::unix::ffi::OsStringExt::into_vec(os_string))\n+        } else {\n+            os_string\n+                .into_string()\n+                .map_err(|os_string| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_string).into())\n+                .map(|s| s.into_bytes())\n+        }\n+    }"}, {"sha": "1fe08aeffb7b0ac69781c8d7dd01441f160ad12b", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=61da8b84282d4b44f4dd1742328867cae9e5cefc", "patch": "@@ -1,9 +1,9 @@\n use std::collections::HashMap;\n use std::env;\n-use std::path::Path;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n+\n use rustc::ty::layout::Size;\n use rustc_mir::interpret::{Memory, Pointer};\n \n@@ -128,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::current_dir() {\n             Ok(cwd) => {\n                 // It is not clear what happens with non-utf8 paths here\n-                let mut bytes = cwd.display().to_string().into_bytes();\n+                let mut bytes = helpers::os_string_to_bytes(cwd.into())?;\n                 // If `size` is smaller or equal than the `bytes.len()`, writing `bytes` plus the\n                 // required null terminator to memory using the `buf` pointer would cause an\n                 // overflow. The desired behavior in this case is to return null.\n@@ -156,16 +156,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"chdir\")?;\n \n-        let path_bytes = this\n-            .memory\n-            .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n-\n-        let path = Path::new(\n-            std::str::from_utf8(path_bytes)\n-                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?,\n-        );\n+        let bytes = this.memory.read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = helpers::bytes_to_os_string(bytes.to_vec());\n \n-        match env::set_current_dir(path) {\n+        match env::set_current_dir(path?) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n                 this.consume_io_error(e)?;"}, {"sha": "cc776295bd49105525a6f1f696eeb41a6885c39c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61da8b84282d4b44f4dd1742328867cae9e5cefc/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=61da8b84282d4b44f4dd1742328867cae9e5cefc", "patch": "@@ -94,11 +94,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path_bytes = this\n+        let bytes = this\n             .memory\n             .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n-        let path = std::str::from_utf8(path_bytes)\n-            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?;\n+        let path: std::path::PathBuf = helpers::bytes_to_os_string(bytes.to_vec())?.into();\n \n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;"}, {"sha": "22b0d723aad8c8c7ff13434929db5029a6f63508", "filename": "tests/compile-fail/chdir_invalid_path.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad6af7a523bc51169858fdaa41f85becf3da3a4d/tests%2Fcompile-fail%2Fchdir_invalid_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6af7a523bc51169858fdaa41f85becf3da3a4d/tests%2Fcompile-fail%2Fchdir_invalid_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fchdir_invalid_path.rs?ref=ad6af7a523bc51169858fdaa41f85becf3da3a4d", "patch": "@@ -1,11 +0,0 @@\n-// compile-flags: -Zmiri-disable-isolation\n-\n-extern {\n-    pub fn chdir(dir: *const u8) -> i32;\n-}\n-\n-fn main() {\n-    let path = vec![0xc3u8, 0x28, 0];\n-    // test that `chdir` errors with invalid utf-8 path\n-    unsafe { chdir(path.as_ptr()) };  //~ ERROR is not a valid utf-8 string\n-}"}]}