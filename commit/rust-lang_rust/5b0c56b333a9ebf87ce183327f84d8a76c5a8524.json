{"sha": "5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "node_id": "C_kwDOAAsO6NoAKDViMGM1NmIzMzNhOWViZjg3Y2UxODMzMjdmODRkOGE3NmM1YTg1MjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-01T03:00:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-02T03:07:30Z"}, "message": "Introduce `UsageMap::user_map`.\n\n`UsageMap` contains `used_map`, which maps from an item to the item it\nuses. This commit add `user_map`, which is the inverse.\n\nWe already compute this inverse, but later on, and it is only held as a\nlocal variable. Its simpler and nicer to put it next to `used_map`.", "tree": {"sha": "35e8b84a5b331368c225f09e2ff5e2f01d635cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35e8b84a5b331368c225f09e2ff5e2f01d635cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "html_url": "https://github.com/rust-lang/rust/commit/5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c56b333a9ebf87ce183327f84d8a76c5a8524/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2911f45464d595a0fabeedd83338da819ade16", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2911f45464d595a0fabeedd83338da819ade16", "html_url": "https://github.com/rust-lang/rust/commit/de2911f45464d595a0fabeedd83338da819ade16"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "51ccdca69c8de4f9310b6b1966d5c53495157365", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c56b333a9ebf87ce183327f84d8a76c5a8524/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c56b333a9ebf87ce183327f84d8a76c5a8524/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "patch": "@@ -213,6 +213,9 @@ pub struct UsageMap<'tcx> {\n     // are represented as a range, which indexes into `used_items`.\n     used_map: FxHashMap<MonoItem<'tcx>, Range<usize>>,\n \n+    // Maps every mono item to the mono items that use it.\n+    user_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>>,\n+\n     // A mono item that is used by N different other mono items will appear\n     // here N times. Indexed into by the ranges in `used_map`.\n     used_items: Vec<MonoItem<'tcx>>,\n@@ -222,7 +225,11 @@ type MonoItems<'tcx> = Vec<Spanned<MonoItem<'tcx>>>;\n \n impl<'tcx> UsageMap<'tcx> {\n     fn new() -> UsageMap<'tcx> {\n-        UsageMap { used_map: FxHashMap::default(), used_items: Vec::new() }\n+        UsageMap {\n+            used_map: FxHashMap::default(),\n+            user_map: FxHashMap::default(),\n+            used_items: Vec::new(),\n+        }\n     }\n \n     fn record_used<'a>(\n@@ -240,11 +247,16 @@ impl<'tcx> UsageMap<'tcx> {\n \n         for Spanned { node: used_item, .. } in used_items.into_iter() {\n             self.used_items.push(*used_item);\n+            self.user_map.entry(*used_item).or_default().push(user_item);\n         }\n \n         assert!(self.used_map.insert(user_item, new_items_range).is_none());\n     }\n \n+    pub fn get_user_items(&self, item: MonoItem<'tcx>) -> Option<&[MonoItem<'tcx>]> {\n+        self.user_map.get(&item).map(|items| items.as_slice())\n+    }\n+\n     /// Internally iterate over all inlined items used by `item`.\n     pub fn for_each_inlined_used_item<F>(&self, tcx: TyCtxt<'tcx>, item: MonoItem<'tcx>, mut f: F)\n     where\n@@ -259,16 +271,6 @@ impl<'tcx> UsageMap<'tcx> {\n             }\n         }\n     }\n-\n-    /// Internally iterate over each item and the items used by it.\n-    pub fn for_each_item_and_its_used_items<F>(&self, mut f: F)\n-    where\n-        F: FnMut(MonoItem<'tcx>, &[MonoItem<'tcx>]),\n-    {\n-        for (&item, range) in &self.used_map {\n-            f(item, &self.used_items[range.clone()])\n-        }\n-    }\n }\n \n #[instrument(skip(tcx, mode), level = \"debug\")]"}, {"sha": "8932288a161734b52d47115f92d82f6e6f552dc1", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c56b333a9ebf87ce183327f84d8a76c5a8524/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c56b333a9ebf87ce183327f84d8a76c5a8524/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "patch": "@@ -514,15 +514,6 @@ fn internalize_symbols<'tcx>(\n         return;\n     }\n \n-    // Build a map from every monomorphization to all the monomorphizations that\n-    // reference it.\n-    let mut user_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>> = Default::default();\n-    cx.usage_map.for_each_item_and_its_used_items(|user_item, used_items| {\n-        for used_item in used_items {\n-            user_map.entry(*used_item).or_default().push(user_item);\n-        }\n-    });\n-\n     // For each internalization candidates in each codegen unit, check if it is\n     // used from outside its defining codegen unit.\n     for cgu in codegen_units {\n@@ -535,7 +526,7 @@ fn internalize_symbols<'tcx>(\n             }\n             debug_assert_eq!(mono_item_placements[item], home_cgu);\n \n-            if let Some(user_items) = user_map.get(item) {\n+            if let Some(user_items) = cx.usage_map.get_user_items(*item) {\n                 if user_items\n                     .iter()\n                     .filter_map(|user_item| {"}]}