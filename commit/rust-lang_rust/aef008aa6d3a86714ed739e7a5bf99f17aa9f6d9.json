{"sha": "aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "node_id": "C_kwDOAAsO6NoAKGFlZjAwOGFhNmQzYTg2NzE0ZWQ3MzllN2E1YmY5OWYxN2FhOWY2ZDk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-07T05:12:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-07T05:12:15Z"}, "message": "Rollup merge of #110094 - lukas-code:less-transmute, r=thomcc\n\nclean up `transmute`s in `core`\n\n* Use `transmute_unchecked` instead of `transmute_copy` for `MaybeUninit::transpose`.\n* Use manual transmute for `Option<Ordering>` \u2192 `i8`.", "tree": {"sha": "6bc1401dbff98f4a3d472513b7b979de8b67f83b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bc1401dbff98f4a3d472513b7b979de8b67f83b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVzMvCRBK7hj4Ov3rIwAAM/oIACe+MIEGTq2tmDi5lqZ+1pCa\nqTitiWzkPxJRXkRGQNL/S46ZLA/VcciKt2ltwg6xbK/ruir/Vb/wH2TLzxT/XIzD\nTWmE7/5wlEhERI/GB82o/Io8Y2rYhKlqPHoSKBLx0W01FEsoIcC04U9X3NBWZoT5\nGnTLP4yPJ0W81HIqeuInFm1CGwxhtmRve24uZCVZHSjPdx3N9X8hcmcSNjy+G+ZZ\nL4pG+pEVu0yLHR8TMHWvhLBpKnrDG2X38NNRKVs2RKrTiI0UcY4FctpyTXPSgrfQ\nV5/XCEFoRd3+R62Z1f9SFLspJOfBww4QbO9zbCBuEe2VihBoKuyj7dyPEdphMCk=\n=Vz2u\n-----END PGP SIGNATURE-----\n", "payload": "tree 6bc1401dbff98f4a3d472513b7b979de8b67f83b\nparent 58597717e20efb22b68605848f25090e6a5aea4e\nparent 7e3b93417c620072169a061e7f3c975705723d30\nauthor Yuki Okushi <jtitor@2k36.org> 1683436335 +0900\ncommitter GitHub <noreply@github.com> 1683436335 +0900\n\nRollup merge of #110094 - lukas-code:less-transmute, r=thomcc\n\nclean up `transmute`s in `core`\n\n* Use `transmute_unchecked` instead of `transmute_copy` for `MaybeUninit::transpose`.\n* Use manual transmute for `Option<Ordering>` \u2192 `i8`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "html_url": "https://github.com/rust-lang/rust/commit/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58597717e20efb22b68605848f25090e6a5aea4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/58597717e20efb22b68605848f25090e6a5aea4e", "html_url": "https://github.com/rust-lang/rust/commit/58597717e20efb22b68605848f25090e6a5aea4e"}, {"sha": "7e3b93417c620072169a061e7f3c975705723d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3b93417c620072169a061e7f3c975705723d30", "html_url": "https://github.com/rust-lang/rust/commit/7e3b93417c620072169a061e7f3c975705723d30"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "d09a24b4b1d5be860affd89ff50d62ca38f34046", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "patch": "@@ -1287,7 +1287,7 @@ impl<T, const N: usize> MaybeUninit<[T; N]> {\n     #[inline]\n     pub const fn transpose(self) -> [MaybeUninit<T>; N] {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n-        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+        unsafe { intrinsics::transmute_unchecked(self) }\n     }\n }\n \n@@ -1307,6 +1307,6 @@ impl<T, const N: usize> [MaybeUninit<T>; N] {\n     #[inline]\n     pub const fn transpose(self) -> MaybeUninit<[T; N]> {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n-        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+        unsafe { intrinsics::transmute_unchecked(self) }\n     }\n }"}, {"sha": "172e5fccb61aa60d1b603434f7fbc06c81dafb32", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=aef008aa6d3a86714ed739e7a5bf99f17aa9f6d9", "patch": "@@ -1,7 +1,6 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n use crate::cmp::Ordering::{self, *};\n-use crate::mem::transmute;\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -142,16 +141,13 @@ macro_rules! maybe_tuple_doc {\n #[inline]\n const fn ordering_is_some(c: Option<Ordering>, x: Ordering) -> bool {\n     // FIXME: Just use `==` once that's const-stable on `Option`s.\n-    // This isn't using `match` because that optimizes worse due to\n-    // making a two-step check (`Some` *then* the inner value).\n-\n-    // SAFETY: There's no public guarantee for `Option<Ordering>`,\n-    // but we're core so we know that it's definitely a byte.\n-    unsafe {\n-        let c: i8 = transmute(c);\n-        let x: i8 = transmute(Some(x));\n-        c == x\n-    }\n+    // This is mapping `None` to 2 and then doing the comparison afterwards\n+    // because it optimizes better (`None::<Ordering>` is represented as 2).\n+    x as i8\n+        == match c {\n+            Some(c) => c as i8,\n+            None => 2,\n+        }\n }\n \n // Constructs an expression that performs a lexical ordering using method `$rel`."}]}