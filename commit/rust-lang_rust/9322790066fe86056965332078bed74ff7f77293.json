{"sha": "9322790066fe86056965332078bed74ff7f77293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMjI3OTAwNjZmZTg2MDU2OTY1MzMyMDc4YmVkNzRmZjdmNzcyOTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-16T09:50:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T09:50:19Z"}, "message": "Merge #4479\n\n4479: Chalk upgrade r=matklad a=flodiebold\n\nThis includes the fix for `dyn Trait` super traits, but I noticed that still a lot of `db.super_trait_method()` calls don't work because the super trait isn't in scope (because it doesn't actually need to be). Somehow, I thought we handled that already, but I'll fix it in a separate PR. Also I'll see what happens if we use more of Chalk's new built-in types and traits in a separate PR.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "cddaabe585da65c8445b8178d8990e4c207f23a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddaabe585da65c8445b8178d8990e4c207f23a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9322790066fe86056965332078bed74ff7f77293", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJev7dbCRBK7hj4Ov3rIwAAdHIIAHutQ8hRRcZWEkE739hj3wdV\nfEhjEAxtCA3FCw2kZj9VduEM+ShwD8KklLK4yQStXHExIMII4Q3bSEGpcmumLyXz\nKxbm0NJDnFH2fTdwBQhaQBVss0oxRx9h3ez7yZkUKKLaetEiZMlUN3P1L+GA3cQT\nEI0D4D14dshMTbSWH7DOpg8iR5tA5UDQN4v3aAnXfROblrei12pYBd2Dm+aErk8w\nwoCj5kOXFrMenNC7m8Vs89jY/KL2Mx+F2GnYAZhv9wle9enaCH3tGgdS9reRnjSw\n+XJzOAPmL3Ptzyevc4dP35vaxLbuEsZm0kz3p3Xbkm5KSzQfYN06Yxb/da3eSOc=\n=9mNX\n-----END PGP SIGNATURE-----\n", "payload": "tree cddaabe585da65c8445b8178d8990e4c207f23a1\nparent 5dcaf108c2897b70b37052c0c466019f7d4499d9\nparent 050601ef7bda598e3ba289987afad7ac7ee46f7d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589622619 +0000\ncommitter GitHub <noreply@github.com> 1589622619 +0000\n\nMerge #4479\n\n4479: Chalk upgrade r=matklad a=flodiebold\n\nThis includes the fix for `dyn Trait` super traits, but I noticed that still a lot of `db.super_trait_method()` calls don't work because the super trait isn't in scope (because it doesn't actually need to be). Somehow, I thought we handled that already, but I'll fix it in a separate PR. Also I'll see what happens if we use more of Chalk's new built-in types and traits in a separate PR.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9322790066fe86056965332078bed74ff7f77293", "html_url": "https://github.com/rust-lang/rust/commit/9322790066fe86056965332078bed74ff7f77293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9322790066fe86056965332078bed74ff7f77293/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcaf108c2897b70b37052c0c466019f7d4499d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcaf108c2897b70b37052c0c466019f7d4499d9", "html_url": "https://github.com/rust-lang/rust/commit/5dcaf108c2897b70b37052c0c466019f7d4499d9"}, {"sha": "050601ef7bda598e3ba289987afad7ac7ee46f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/050601ef7bda598e3ba289987afad7ac7ee46f7d", "html_url": "https://github.com/rust-lang/rust/commit/050601ef7bda598e3ba289987afad7ac7ee46f7d"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "4412b07083bc866c0194125daa6911e83244bcc5", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9322790066fe86056965332078bed74ff7f77293/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9322790066fe86056965332078bed74ff7f77293/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9322790066fe86056965332078bed74ff7f77293", "patch": "@@ -113,8 +113,8 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -124,17 +124,17 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -143,16 +143,16 @@ dependencies = [\n \n [[package]]\n name = \"chalk-macros\"\n-version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -162,8 +162,8 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\","}, {"sha": "5fc0ec5e3c7c928d59fd9e2d20f8d1dd1f9b42ea", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9322790066fe86056965332078bed74ff7f77293/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9322790066fe86056965332078bed74ff7f77293/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=9322790066fe86056965332078bed74ff7f77293", "patch": "@@ -27,9 +27,9 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "5870618a00a7e68ef0728e9f1e8fdd3663f27540", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9322790066fe86056965332078bed74ff7f77293/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9322790066fe86056965332078bed74ff7f77293/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=9322790066fe86056965332078bed74ff7f77293", "patch": "@@ -182,7 +182,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Arc::new(goal)\n     }\n \n-    fn intern_goals(&self, data: impl IntoIterator<Item = Goal<Self>>) -> Self::InternedGoals {\n+    fn intern_goals<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<Goal<Self>, E>>,\n+    ) -> Result<Self::InternedGoals, E> {\n         data.into_iter().collect()\n     }\n \n@@ -222,10 +225,10 @@ impl chalk_ir::interner::Interner for Interner {\n         clause\n     }\n \n-    fn intern_program_clauses(\n+    fn intern_program_clauses<E>(\n         &self,\n-        data: impl IntoIterator<Item = chalk_ir::ProgramClause<Self>>,\n-    ) -> Arc<[chalk_ir::ProgramClause<Self>]> {\n+        data: impl IntoIterator<Item = Result<chalk_ir::ProgramClause<Self>, E>>,\n+    ) -> Result<Arc<[chalk_ir::ProgramClause<Self>]>, E> {\n         data.into_iter().collect()\n     }\n \n@@ -236,10 +239,10 @@ impl chalk_ir::interner::Interner for Interner {\n         &clauses\n     }\n \n-    fn intern_quantified_where_clauses(\n+    fn intern_quantified_where_clauses<E>(\n         &self,\n-        data: impl IntoIterator<Item = chalk_ir::QuantifiedWhereClause<Self>>,\n-    ) -> Self::InternedQuantifiedWhereClauses {\n+        data: impl IntoIterator<Item = Result<chalk_ir::QuantifiedWhereClause<Self>, E>>,\n+    ) -> Result<Self::InternedQuantifiedWhereClauses, E> {\n         data.into_iter().collect()\n     }\n \n@@ -250,10 +253,10 @@ impl chalk_ir::interner::Interner for Interner {\n         clauses\n     }\n \n-    fn intern_parameter_kinds(\n+    fn intern_parameter_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = chalk_ir::ParameterKind<()>>,\n-    ) -> Self::InternedParameterKinds {\n+        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<()>, E>>,\n+    ) -> Result<Self::InternedParameterKinds, E> {\n         data.into_iter().collect()\n     }\n \n@@ -264,10 +267,10 @@ impl chalk_ir::interner::Interner for Interner {\n         &parameter_kinds\n     }\n \n-    fn intern_canonical_var_kinds(\n+    fn intern_canonical_var_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = chalk_ir::ParameterKind<UniverseIndex>>,\n-    ) -> Self::InternedCanonicalVarKinds {\n+        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<UniverseIndex>, E>>,\n+    ) -> Result<Self::InternedCanonicalVarKinds, E> {\n         data.into_iter().collect()\n     }\n \n@@ -460,6 +463,14 @@ impl ToChalk for TypeCtor {\n             TypeName::Struct(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n             TypeName::OpaqueType(_) => unreachable!(),\n+\n+            TypeName::Scalar(_) => unreachable!(),\n+            TypeName::Tuple(_) => unreachable!(),\n+            TypeName::Raw(_) => unreachable!(),\n+            TypeName::Slice => unreachable!(),\n+            TypeName::Ref(_) => unreachable!(),\n+            TypeName::Str => unreachable!(),\n+\n             TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n@@ -862,12 +873,6 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // We don't do coherence checking (yet)\n         unimplemented!()\n     }\n-    fn as_struct_id(&self, id: &TypeName<Interner>) -> Option<StructId> {\n-        match id {\n-            TypeName::Struct(struct_id) => Some(*struct_id),\n-            _ => None,\n-        }\n-    }\n     fn interner(&self) -> &Interner {\n         &Interner\n     }\n@@ -892,6 +897,20 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     ) -> Arc<chalk_rust_ir::OpaqueTyDatum<Interner>> {\n         unimplemented!()\n     }\n+\n+    fn force_impl_for(\n+        &self,\n+        _well_known: chalk_rust_ir::WellKnownTrait,\n+        _ty: &chalk_ir::TyData<Interner>,\n+    ) -> Option<bool> {\n+        // this method is mostly for rustc\n+        None\n+    }\n+\n+    fn is_object_safe(&self, _trait_id: chalk_ir::TraitId<Interner>) -> bool {\n+        // FIXME: implement actual object safety\n+        true\n+    }\n }\n \n pub(crate) fn program_clauses_for_chalk_env_query("}]}