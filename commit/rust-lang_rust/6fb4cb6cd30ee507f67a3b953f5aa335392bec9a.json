{"sha": "6fb4cb6cd30ee507f67a3b953f5aa335392bec9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjRjYjZjZDMwZWU1MDdmNjdhM2I5NTNmNWFhMzM1MzkyYmVjOWE=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T06:35:08Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T06:35:08Z"}, "message": "Run rustfmt on liballoc_system.", "tree": {"sha": "90cace532e8175520e3e91df3b948b68b57d97be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90cace532e8175520e3e91df3b948b68b57d97be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a", "html_url": "https://github.com/rust-lang/rust/commit/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b3b27cf533e50424f749d1c1db23e5d8db952f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b27cf533e50424f749d1c1db23e5d8db952f", "html_url": "https://github.com/rust-lang/rust/commit/81b3b27cf533e50424f749d1c1db23e5d8db952f"}], "stats": {"total": 77, "additions": 48, "deletions": 29}, "files": [{"sha": "c447dfbec4440b75995adc50880e75b75ac65d50", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4cb6cd30ee507f67a3b953f5aa335392bec9a/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=6fb4cb6cd30ee507f67a3b953f5aa335392bec9a", "patch": "@@ -39,29 +39,35 @@ const MIN_ALIGN: usize = 8;\n const MIN_ALIGN: usize = 16;\n \n #[no_mangle]\n-pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n+pub extern \"C\" fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n     unsafe { imp::allocate(size, align) }\n }\n \n #[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n+pub extern \"C\" fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n     unsafe { imp::deallocate(ptr, old_size, align) }\n }\n \n #[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize,\n-                                align: usize) -> *mut u8 {\n+pub extern \"C\" fn __rust_reallocate(ptr: *mut u8,\n+                                    old_size: usize,\n+                                    size: usize,\n+                                    align: usize)\n+                                    -> *mut u8 {\n     unsafe { imp::reallocate(ptr, old_size, size, align) }\n }\n \n #[no_mangle]\n-pub extern fn __rust_reallocate_inplace(ptr: *mut u8, old_size: usize,\n-                                        size: usize, align: usize) -> usize {\n+pub extern \"C\" fn __rust_reallocate_inplace(ptr: *mut u8,\n+                                            old_size: usize,\n+                                            size: usize,\n+                                            align: usize)\n+                                            -> usize {\n     unsafe { imp::reallocate_inplace(ptr, old_size, size, align) }\n }\n \n #[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, align: usize) -> usize {\n+pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n     imp::usable_size(size, align)\n }\n \n@@ -80,7 +86,8 @@ mod imp {\n         #[cfg(not(target_os = \"android\"))]\n         fn posix_memalign(memptr: *mut *mut libc::c_void,\n                           align: libc::size_t,\n-                          size: libc::size_t) -> libc::c_int;\n+                          size: libc::size_t)\n+                          -> libc::c_int;\n     }\n \n     pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n@@ -94,9 +101,7 @@ mod imp {\n             #[cfg(not(target_os = \"android\"))]\n             unsafe fn more_aligned_malloc(size: usize, align: usize) -> *mut u8 {\n                 let mut out = ptr::null_mut();\n-                let ret = posix_memalign(&mut out,\n-                                         align as libc::size_t,\n-                                         size as libc::size_t);\n+                let ret = posix_memalign(&mut out, align as libc::size_t, size as libc::size_t);\n                 if ret != 0 {\n                     ptr::null_mut()\n                 } else {\n@@ -107,8 +112,7 @@ mod imp {\n         }\n     }\n \n-    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize,\n-                             align: usize) -> *mut u8 {\n+    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n         } else {\n@@ -119,8 +123,11 @@ mod imp {\n         }\n     }\n \n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: usize, _size: usize,\n-                                     _align: usize) -> usize {\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8,\n+                                     old_size: usize,\n+                                     _size: usize,\n+                                     _align: usize)\n+                                     -> usize {\n         old_size\n     }\n \n@@ -141,8 +148,7 @@ mod imp {\n     extern \"system\" {\n         fn GetProcessHeap() -> HANDLE;\n         fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n-        fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID,\n-                       dwBytes: SIZE_T) -> LPVOID;\n+        fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID;\n         fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n     }\n \n@@ -165,32 +171,45 @@ mod imp {\n         if align <= MIN_ALIGN {\n             HeapAlloc(GetProcessHeap(), 0, size as SIZE_T) as *mut u8\n         } else {\n-            let ptr = HeapAlloc(GetProcessHeap(), 0,\n-                                (size + align) as SIZE_T) as *mut u8;\n-            if ptr.is_null() { return ptr }\n+            let ptr = HeapAlloc(GetProcessHeap(), 0, (size + align) as SIZE_T) as *mut u8;\n+            if ptr.is_null() {\n+                return ptr\n+            }\n             align_ptr(ptr, align)\n         }\n     }\n \n-    pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize,\n-                             align: usize) -> *mut u8 {\n+    pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n             HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, size as SIZE_T) as *mut u8\n         } else {\n             let header = get_header(ptr);\n-            let new = HeapReAlloc(GetProcessHeap(), 0, header.0 as LPVOID,\n+            let new = HeapReAlloc(GetProcessHeap(),\n+                                  0,\n+                                  header.0 as LPVOID,\n                                   (size + align) as SIZE_T) as *mut u8;\n-            if new.is_null() { return new }\n+            if new.is_null() {\n+                return new\n+            }\n             align_ptr(new, align)\n         }\n     }\n \n-    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: usize, size: usize,\n-                                     align: usize) -> usize {\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8,\n+                                     old_size: usize,\n+                                     size: usize,\n+                                     align: usize)\n+                                     -> usize {\n         if align <= MIN_ALIGN {\n-            let new = HeapReAlloc(GetProcessHeap(), HEAP_REALLOC_IN_PLACE_ONLY,\n-                                  ptr as LPVOID, size as SIZE_T) as *mut u8;\n-            if new.is_null() { old_size } else { size }\n+            let new = HeapReAlloc(GetProcessHeap(),\n+                                  HEAP_REALLOC_IN_PLACE_ONLY,\n+                                  ptr as LPVOID,\n+                                  size as SIZE_T) as *mut u8;\n+            if new.is_null() {\n+                old_size\n+            } else {\n+                size\n+            }\n         } else {\n             old_size\n         }"}]}