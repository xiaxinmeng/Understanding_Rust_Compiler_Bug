{"sha": "9f6e5ae0246333115c53d059a17f5da92988f3bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmU1YWUwMjQ2MzMzMTE1YzUzZDA1OWExN2Y1ZGE5Mjk4OGYzYmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-11T19:41:36Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-11T19:41:36Z"}, "message": "Rollup merge of #48270 - leodasvacas:refactor-casts, r=nikomatsakis\n\nReplace `structurally_resolved_type` in casts check.\n\nThe behaviour of `resolve_type_vars_if_possible` is simpler and infallible. Other minor refactorings.\n\nI'm not sure if this is backwards compatible, in theory resolving obligations between two cast checks could solve a dependency between them, but I don't know if that's actually possible and it doesn't sound like something we'd want to support.", "tree": {"sha": "28be68b4a61dc7dab4e9a1c2d8ae5a4d89729cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28be68b4a61dc7dab4e9a1c2d8ae5a4d89729cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6e5ae0246333115c53d059a17f5da92988f3bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrOZPEACgkQ/vbIBR0O\nATztUA//XDClNS62Jz2gtiYNn6zPvWNIoALPwstRs+mvExhTYH1lvJ51coz1AiMx\nXqQi/Ut8Hi5nLc37fHSuMakalP3Ecu8vQiszmmVEZT6kUHSBcBmS+nrhYt9Nf+N5\nMk+xtdYk62OzBCpdXhaSrj9AK8VPk9EDWwEpuc5CZFhmsQjp3CEz6Nx2xBXrHAjm\nZ6+q0gmtoUs6syaJpqyhQAGrXTiF3RvXrSTz3D1bfiOci7FS3m+n6ZU5FMYeKdJm\nbiiJ5UrHR9FjEgz6jSQjCCy7OQJszCbWD5LIYbcCbPhLJiSMfv2bv4/cPMcEPHtc\nJnbebb5BZoD9h7VbW3/B6mafwIHMcm466+0nZgd+2axIWVbJkoFQwxa9ONDX8ETU\nQxnfdH54ZLbvbHCQWoRfJypli10HmKj3uIW/xNN/pH5d+fkZEj7BqFFKEIl03mvz\nIfQcWF/fK67ZdNTcEhuu9OsUwJNFyRdsbTzFl124/s2H5aM36fEq93KVOzqLldj5\nUD9hR4aFs7qjmwUg5Rb8prCADkJLSsWx7ZBkwonfxQAoFSCmNf1Sqx/KP+BEmtoH\nxUsZCvCHCvCbDCcFqHr3QI1cCWdGXsUOKlqk990P3xR6VfP78ow3M/zpHUvReq8y\nVifCKECO1qy+q320IBNHJ9GEGsIGjlwh+aiKJ1KlknU1TJsyApA=\n=AnCO\n-----END PGP SIGNATURE-----", "payload": "tree 28be68b4a61dc7dab4e9a1c2d8ae5a4d89729cf4\nparent 484e6f0adaebde4c33721860abefbbc7654e1e47\nparent 0a5a5c3418c56546c574b7698d9158ef16aa174e\nauthor kennytm <kennytm@gmail.com> 1523475696 +0800\ncommitter kennytm <kennytm@gmail.com> 1523475696 +0800\n\nRollup merge of #48270 - leodasvacas:refactor-casts, r=nikomatsakis\n\nReplace `structurally_resolved_type` in casts check.\n\nThe behaviour of `resolve_type_vars_if_possible` is simpler and infallible. Other minor refactorings.\n\nI'm not sure if this is backwards compatible, in theory resolving obligations between two cast checks could solve a dependency between them, but I don't know if that's actually possible and it doesn't sound like something we'd want to support.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6e5ae0246333115c53d059a17f5da92988f3bf", "html_url": "https://github.com/rust-lang/rust/commit/9f6e5ae0246333115c53d059a17f5da92988f3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6e5ae0246333115c53d059a17f5da92988f3bf/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484e6f0adaebde4c33721860abefbbc7654e1e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/484e6f0adaebde4c33721860abefbbc7654e1e47", "html_url": "https://github.com/rust-lang/rust/commit/484e6f0adaebde4c33721860abefbbc7654e1e47"}, {"sha": "0a5a5c3418c56546c574b7698d9158ef16aa174e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5a5c3418c56546c574b7698d9158ef16aa174e", "html_url": "https://github.com/rust-lang/rust/commit/0a5a5c3418c56546c574b7698d9158ef16aa174e"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "3ba79d91964abb0a653cb4a434877a5d7af3ee83", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=9f6e5ae0246333115c53d059a17f5da92988f3bf", "patch": "@@ -20,7 +20,6 @@ use syntax::ast;\n pub enum IntTy {\n     U(ast::UintTy),\n     I,\n-    Ivar,\n     CEnum,\n     Bool,\n     Char\n@@ -64,7 +63,7 @@ impl<'tcx> CastTy<'tcx> {\n             ty::TyBool => Some(CastTy::Int(IntTy::Bool)),\n             ty::TyChar => Some(CastTy::Int(IntTy::Char)),\n             ty::TyInt(_) => Some(CastTy::Int(IntTy::I)),\n-            ty::TyInfer(ty::InferTy::IntVar(_)) => Some(CastTy::Int(IntTy::Ivar)),\n+            ty::TyInfer(ty::InferTy::IntVar(_)) => Some(CastTy::Int(IntTy::I)),\n             ty::TyInfer(ty::InferTy::FloatVar(_)) => Some(CastTy::Float),\n             ty::TyUint(u) => Some(CastTy::Int(IntTy::U(u))),\n             ty::TyFloat(_) => Some(CastTy::Float),"}, {"sha": "734d72584da9b2c629e2e11b18ca356a16bb0a7a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9f6e5ae0246333115c53d059a17f5da92988f3bf", "patch": "@@ -486,11 +486,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     ty::TypeVariants::TyInfer(t) => {\n                         match t {\n                             ty::InferTy::IntVar(_) |\n-                            ty::InferTy::FloatVar(_) |\n-                            ty::InferTy::FreshIntTy(_) |\n-                            ty::InferTy::FreshFloatTy(_) => {\n-                                Err(CastError::NeedDeref)\n-                            }\n+                            ty::InferTy::FloatVar(_) => Err(CastError::NeedDeref),\n                             _ => Err(CastError::NeedViaPtr),\n                         }\n                     }"}, {"sha": "80fa5362a8be940c134ea9a112487991f03e805c", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=9f6e5ae0246333115c53d059a17f5da92988f3bf", "patch": "@@ -19,4 +19,9 @@ pub fn main() {\n     assert_eq!(i as u8 as i8, 'Q' as u8 as i8);\n     assert_eq!(0x51 as char, 'Q');\n     assert_eq!(0 as u32, false as u32);\n+\n+    // Test that `_` is correctly inferred.\n+    let x = &\"hello\";\n+    let mut y = x as *const _;\n+    y = 0 as *const _;\n }"}, {"sha": "afcd402343b25b33d2e83d4c4c64a336cc027904", "filename": "src/test/ui/order-dependent-cast-inference.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs?ref=9f6e5ae0246333115c53d059a17f5da92988f3bf", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // Tests case where inference fails due to the order in which casts are checked.\n+    // Ideally this would compile, see #48270.\n+    let x = &\"hello\";\n+    let mut y = 0 as *const _;\n+    //~^ ERROR cannot cast to a pointer of an unknown kind\n+    y = x as *const _;\n+}"}, {"sha": "556acc87cffaf14308fd2bf07f0bd47b61757146", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6e5ae0246333115c53d059a17f5da92988f3bf/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=9f6e5ae0246333115c53d059a17f5da92988f3bf", "patch": "@@ -0,0 +1,13 @@\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/order-dependent-cast-inference.rs:15:17\n+   |\n+LL |     let mut y = 0 as *const _;\n+   |                 ^^^^^--------\n+   |                      |\n+   |                      help: consider giving more type information\n+   |\n+   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0641`."}]}