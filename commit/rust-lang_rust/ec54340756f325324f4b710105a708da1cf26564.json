{"sha": "ec54340756f325324f4b710105a708da1cf26564", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTQzNDA3NTZmMzI1MzI0ZjRiNzEwMTA1YTcwOGRhMWNmMjY1NjQ=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-08-18T19:47:23Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-08-18T19:47:23Z"}, "message": "Fix bug in iter::Chain::size_hint", "tree": {"sha": "f688298392ae0abf0a545e771ce639623b3b4671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f688298392ae0abf0a545e771ce639623b3b4671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec54340756f325324f4b710105a708da1cf26564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec54340756f325324f4b710105a708da1cf26564", "html_url": "https://github.com/rust-lang/rust/commit/ec54340756f325324f4b710105a708da1cf26564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec54340756f325324f4b710105a708da1cf26564/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea52be482ab4945fda63cb65b6a198309a041e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea52be482ab4945fda63cb65b6a198309a041e3c", "html_url": "https://github.com/rust-lang/rust/commit/ea52be482ab4945fda63cb65b6a198309a041e3c"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "c9612596b1ba0e8c523ecba69b1cbf7271f6a784", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec54340756f325324f4b710105a708da1cf26564/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec54340756f325324f4b710105a708da1cf26564/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=ec54340756f325324f4b710105a708da1cf26564", "patch": "@@ -173,17 +173,23 @@ impl<A, B> Iterator for Chain<A, B> where\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (a_lower, a_upper) = self.a.size_hint();\n-        let (b_lower, b_upper) = self.b.size_hint();\n+        match self.state {\n+            ChainState::Both => {\n+                let (a_lower, a_upper) = self.a.size_hint();\n+                let (b_lower, b_upper) = self.b.size_hint();\n \n-        let lower = a_lower.saturating_add(b_lower);\n+                let lower = a_lower.saturating_add(b_lower);\n \n-        let upper = match (a_upper, b_upper) {\n-            (Some(x), Some(y)) => x.checked_add(y),\n-            _ => None\n-        };\n+                let upper = match (a_upper, b_upper) {\n+                    (Some(x), Some(y)) => x.checked_add(y),\n+                    _ => None\n+                };\n \n-        (lower, upper)\n+                (lower, upper)\n+            }\n+            ChainState::Front => self.a.size_hint(),\n+            ChainState::Back => self.b.size_hint(),\n+        }\n     }\n }\n "}, {"sha": "3a4f76852a0d7c384daeae71a76593942df01af4", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ec54340756f325324f4b710105a708da1cf26564/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec54340756f325324f4b710105a708da1cf26564/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=ec54340756f325324f4b710105a708da1cf26564", "patch": "@@ -152,6 +152,54 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_iterator_chain_size_hint() {\n+    struct Iter {\n+        is_empty: bool,\n+    }\n+\n+    impl Iterator for Iter {\n+        type Item = ();\n+\n+        // alternates between `None` and `Some(())`\n+        fn next(&mut self) -> Option<Self::Item> {\n+            if self.is_empty {\n+                self.is_empty = false;\n+                None\n+            } else {\n+                self.is_empty = true;\n+                Some(())\n+            }\n+        }\n+\n+        fn size_hint(&self) -> (usize, Option<usize>) {\n+            if self.is_empty {\n+                (0, Some(0))\n+            } else {\n+                (1, Some(1))\n+            }\n+        }\n+    }\n+\n+    impl DoubleEndedIterator for Iter {\n+        fn next_back(&mut self) -> Option<Self::Item> {\n+            self.next()\n+        }\n+    }\n+\n+    // this chains an iterator of length 0 with an iterator of length 1,\n+    // so after calling `.next()` once, the iterator is empty and the\n+    // state is `ChainState::Back`. `.size_hint()` should now disregard\n+    // the size hint of the left iterator\n+    let mut iter = Iter { is_empty: true }.chain(once(()));\n+    assert_eq!(iter.next(), Some(()));\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+\n+    let mut iter = once(()).chain(Iter { is_empty: true });\n+    assert_eq!(iter.next_back(), Some(()));\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+}\n+\n #[test]\n fn test_zip_nth() {\n     let xs = [0, 1, 2, 4, 5];"}]}