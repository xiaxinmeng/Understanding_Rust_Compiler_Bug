{"sha": "877f001512b2ce16d86d5d4cf16d81e509294d79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2YwMDE1MTJiMmNlMTZkODZkNWQ0Y2YxNmQ4MWU1MDkyOTRkNzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T23:59:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T23:59:44Z"}, "message": "rustc: Don't bother to supply an alignment argument to the memmove intrinsic; LLVM is very fussy about what it considers a constant.", "tree": {"sha": "a9c770ae1ba15833edbb02f038d469542c9edf1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c770ae1ba15833edbb02f038d469542c9edf1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877f001512b2ce16d86d5d4cf16d81e509294d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877f001512b2ce16d86d5d4cf16d81e509294d79", "html_url": "https://github.com/rust-lang/rust/commit/877f001512b2ce16d86d5d4cf16d81e509294d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877f001512b2ce16d86d5d4cf16d81e509294d79/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2ff9c50dc0af698d50fce3304909d60448bd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ff9c50dc0af698d50fce3304909d60448bd8c", "html_url": "https://github.com/rust-lang/rust/commit/ca2ff9c50dc0af698d50fce3304909d60448bd8c"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "eb1e1fd6a567da5094b904a5f870f0db40cfb332", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/877f001512b2ce16d86d5d4cf16d81e509294d79/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877f001512b2ce16d86d5d4cf16d81e509294d79/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=877f001512b2ce16d86d5d4cf16d81e509294d79", "patch": "@@ -2922,20 +2922,20 @@ fn free_ty(&@block_ctxt cx, ValueRef v, ty::t t) -> result {\n     ret res(cx, C_nil());\n }\n \n-fn call_memmove(&@block_ctxt cx, ValueRef dst, ValueRef src, ValueRef n_bytes,\n-                ValueRef align_bytes) -> result {\n+fn call_memmove(&@block_ctxt cx, ValueRef dst, ValueRef src,\n+                ValueRef n_bytes) -> result {\n     // FIXME: switch to the 64-bit variant when on such a platform.\n+    // TODO: Provide LLVM with better alignment information when the alignment\n+    // is statically known (it must be nothing more than a constant int, or\n+    // LLVM complains -- not even a constant element of a tydesc works).\n \n     auto i = cx.fcx.lcx.ccx.intrinsics;\n     assert (i.contains_key(\"llvm.memmove.p0i8.p0i8.i32\"));\n     auto memmove = i.get(\"llvm.memmove.p0i8.p0i8.i32\");\n     auto src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     auto dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n     auto size = cx.build.IntCast(n_bytes, T_i32());\n-    auto align =\n-        if (lib::llvm::llvm::LLVMIsConstant(align_bytes) == True) {\n-            cx.build.IntCast(align_bytes, T_i32())\n-        } else { cx.build.IntCast(C_int(0), T_i32()) };\n+    auto align = C_int(0);\n     auto volatile = C_bool(false);\n     ret res(cx,\n             cx.build.Call(memmove,\n@@ -2965,8 +2965,7 @@ fn memmove_ty(&@block_ctxt cx, ValueRef dst, ValueRef src, &ty::t t) ->\n    result {\n     if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, t)) {\n         auto llsz = size_of(cx, t);\n-        auto llalign = align_of(llsz.bcx, t);\n-        ret call_memmove(llalign.bcx, dst, src, llsz.val, llalign.val);\n+        ret call_memmove(llsz.bcx, dst, src, llsz.val);\n     } else { ret res(cx, cx.build.Store(cx.build.Load(src), dst)); }\n }\n \n@@ -3825,8 +3824,7 @@ mod ivec {\n         on_heap_cx = rslt.bcx;\n         auto new_heap_ptr = rslt.val;\n \n-        rslt = call_memmove(on_heap_cx, new_heap_ptr, heap_ptr, heap_part_sz,\n-                            C_int(4));  // FIXME: align\n+        rslt = call_memmove(on_heap_cx, new_heap_ptr, heap_ptr, heap_part_sz);\n         on_heap_cx = rslt.bcx;\n \n         on_heap_cx.build.Store(new_heap_ptr, heap_ptr_ptr);"}]}