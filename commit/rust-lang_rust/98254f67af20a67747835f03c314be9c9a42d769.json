{"sha": "98254f67af20a67747835f03c314be9c9a42d769", "node_id": "C_kwDOAAsO6NoAKDk4MjU0ZjY3YWYyMGE2Nzc0NzgzNWYwM2MzMTRiZTljOWE0MmQ3Njk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T14:11:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T15:33:29Z"}, "message": "pointer tag tracking: on creation, log the offsets it is created for", "tree": {"sha": "19abe594681c905203086fe567ba2f47361d3f98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19abe594681c905203086fe567ba2f47361d3f98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98254f67af20a67747835f03c314be9c9a42d769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98254f67af20a67747835f03c314be9c9a42d769", "html_url": "https://github.com/rust-lang/rust/commit/98254f67af20a67747835f03c314be9c9a42d769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98254f67af20a67747835f03c314be9c9a42d769/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "428245072e8bc2266cc4d624c9ae48fc3f3b7075", "url": "https://api.github.com/repos/rust-lang/rust/commits/428245072e8bc2266cc4d624c9ae48fc3f3b7075", "html_url": "https://github.com/rust-lang/rust/commit/428245072e8bc2266cc4d624c9ae48fc3f3b7075"}], "stats": {"total": 639, "additions": 354, "deletions": 285}, "files": [{"sha": "28d4733718ef9f0fbd6abb92614a527704fc6549", "filename": "src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -67,7 +67,7 @@ impl MachineStopType for TerminationInfo {}\n \n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n-    CreatedPointerTag(NonZeroU64),\n+    CreatedPointerTag(NonZeroU64, Option<(AllocId, AllocRange)>),\n     /// This `Item` was popped from the borrow stack, either due to an access with the given tag or\n     /// a deallocation when the second argument is `None`.\n     PoppedPointerTag(Item, Option<(SbTagExtra, AccessKind)>),\n@@ -318,7 +318,7 @@ fn report_msg<'mir, 'tcx>(\n     diag_level: DiagLevel,\n     title: &str,\n     span_msg: Vec<String>,\n-    mut helps: Vec<(Option<SpanData>, String)>,\n+    helps: Vec<(Option<SpanData>, String)>,\n     stacktrace: &[FrameInfo<'tcx>],\n ) {\n     let span = stacktrace.first().map_or(DUMMY_SP, |fi| fi.span);\n@@ -344,15 +344,15 @@ fn report_msg<'mir, 'tcx>(\n \n     // Show help messages.\n     if !helps.is_empty() {\n-        // Add visual separator before backtrace.\n-        helps.last_mut().unwrap().1.push('\\n');\n         for (span_data, help) in helps {\n             if let Some(span_data) = span_data {\n                 err.span_help(span_data.span(), &help);\n             } else {\n                 err.help(&help);\n             }\n         }\n+        // Add visual separator before backtrace.\n+        err.note(\"backtrace:\");\n     }\n     // Add backtrace\n     for (idx, frame_info) in stacktrace.iter().enumerate() {\n@@ -448,7 +448,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             for e in diagnostics.drain(..) {\n                 use NonHaltingDiagnostic::*;\n                 let msg = match e {\n-                    CreatedPointerTag(tag) => format!(\"created tag {:?}\", tag),\n+                    CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n+                    CreatedPointerTag(tag, Some((alloc_id, range))) =>\n+                        format!(\"created tag {tag:?} at {alloc_id}{}\", HexRange(range)),\n                     PoppedPointerTag(item, tag) =>\n                         match tag {\n                             None =>"}, {"sha": "cc3d099e1c1c12955e49261f0eded814dc6bb762", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -222,11 +222,9 @@ impl GlobalStateInner {\n         }\n     }\n \n+    /// Generates a new pointer tag. Remember to also check track_pointer_tags and log its creation!\n     fn new_ptr(&mut self) -> SbTag {\n         let id = self.next_ptr_tag;\n-        if self.tracked_pointer_tags.contains(&id) {\n-            register_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(id.0));\n-        }\n         self.next_ptr_tag = SbTag(NonZeroU64::new(id.0.get() + 1).unwrap());\n         id\n     }\n@@ -253,6 +251,9 @@ impl GlobalStateInner {\n     pub fn base_ptr_tag(&mut self, id: AllocId) -> SbTag {\n         self.base_ptr_tags.get(&id).copied().unwrap_or_else(|| {\n             let tag = self.new_ptr();\n+            if self.tracked_pointer_tags.contains(&tag) {\n+                register_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None));\n+            }\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n             self.base_ptr_tags.try_insert(id, tag).unwrap();\n             tag\n@@ -802,16 +803,30 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         let current_span = &mut this.machine.current_span();\n \n+        // It is crucial that this gets called on all code paths, to ensure we track tag creation.\n         let log_creation = |this: &MiriEvalContext<'mir, 'tcx>,\n                             current_span: &mut CurrentSpan<'_, 'mir, 'tcx>,\n-                            alloc_id,\n-                            base_offset,\n-                            orig_tag|\n+                            loc: Option<(AllocId, Size, SbTagExtra)>| // alloc_id, base_offset, orig_tag\n          -> InterpResult<'tcx> {\n+            let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n+            if global.tracked_pointer_tags.contains(&new_tag) {\n+                register_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(\n+                    new_tag.0,\n+                    loc.map(|(alloc_id, base_offset, _)| (alloc_id, alloc_range(base_offset, size))),\n+                ));\n+            }\n+            drop(global); // don't hold that reference any longer than we have to\n+\n+            let Some((alloc_id, base_offset, orig_tag)) = loc else {\n+                return Ok(())\n+            };\n+\n+            // The SB history tracking needs a parent tag, so skip if we come from a wildcard.\n             let SbTagExtra::Concrete(orig_tag) = orig_tag else {\n                 // FIXME: should we log this?\n                 return Ok(())\n             };\n+\n             let extra = this.get_alloc_extra(alloc_id)?;\n             let mut stacked_borrows = extra\n                 .stacked_borrows\n@@ -846,14 +861,15 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Dangling slices are a common case here; it's valid to get their length but with raw\n             // pointer tagging for example all calls to get_unchecked on them are invalid.\n             if let Ok((alloc_id, base_offset, orig_tag)) = this.ptr_try_get_alloc_id(place.ptr) {\n-                log_creation(this, current_span, alloc_id, base_offset, orig_tag)?;\n+                log_creation(this, current_span, Some((alloc_id, base_offset, orig_tag)))?;\n                 return Ok(Some(alloc_id));\n             }\n             // This pointer doesn't come with an AllocId. :shrug:\n+            log_creation(this, current_span, None)?;\n             return Ok(None);\n         }\n         let (alloc_id, base_offset, orig_tag) = this.ptr_get_alloc_id(place.ptr)?;\n-        log_creation(this, current_span, alloc_id, base_offset, orig_tag)?;\n+        log_creation(this, current_span, Some((alloc_id, base_offset, orig_tag)))?;\n \n         // Ensure we bail out if the pointer goes out-of-bounds (see miri#1050).\n         let (alloc_size, _) = this.get_live_alloc_size_and_align(alloc_id)?;"}, {"sha": "e46533ad70d3e5ba44b676550ec45d2a30955b90", "filename": "tests/fail/alloc/deallocate-bad-alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n   --> $DIR/deallocate-bad-alignment.rs:LL:CC"}, {"sha": "d3ca2a4544bf1a8d9ee33eae1153ee9d10d6542b", "filename": "tests/fail/alloc/deallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n   --> $DIR/deallocate-bad-size.rs:LL:CC"}, {"sha": "1fadb277a0e40bde0e97d1cd2ea4aa6bd1402251", "filename": "tests/fail/alloc/deallocate-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n   --> $DIR/deallocate-twice.rs:LL:CC"}, {"sha": "60b91155f5e5361c5ea2868cfba9d5f43e66f831", "filename": "tests/fail/alloc/global_system_mixup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         FREE();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n    = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at RUSTLIB/std/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/global_system_mixup.rs:LL:CC"}, {"sha": "5c11df9539c1cee4c269ee5921c54a4c97449fb3", "filename": "tests/fail/alloc/no_global_allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         __rust_alloc(1, 1);\n    |         ^^^^^^^^^^^^^^^^^^ can't call foreign function: __rust_alloc\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `start` at $DIR/no_global_allocator.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "abe47e29ed324e9dc7e64ebee32f029e30c3798c", "filename": "tests/fail/alloc/reallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n   --> $DIR/reallocate-bad-size.rs:LL:CC"}, {"sha": "c22e44b754c9ab2eb9b5bb7310f2dbc07bd7d8ef", "filename": "tests/fail/alloc/reallocate-change-alloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _z = *x;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/reallocate-change-alloc.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5eeaab8700c8d1bcf6907618a988ecf0c0b282f3", "filename": "tests/fail/alloc/reallocate-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n   --> $DIR/reallocate-dangling.rs:LL:CC"}, {"sha": "6ce522df58d6e1f98d55e553caf947a1a67b6593", "filename": "tests/fail/alloc/stack_free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fstack_free.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "3cb4a8e8a4589ea511d0a7865c7f70f74ca9d449", "filename": "tests/fail/backtrace/bad-backtrace-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   miri_resolve_frame(*frame, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-decl.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f186fb1e571791c564dd45aa41a9200aa00855bb", "filename": "tests/fail/backtrace/bad-backtrace-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         miri_get_backtrace(2, std::ptr::null_mut());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_get_backtrace` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "969523d8b3fecd79d6db3bf3d6b0f4e46672cccb", "filename": "tests/fail/backtrace/bad-backtrace-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         miri_resolve_frame(std::ptr::null_mut(), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cf80488de22dd914862202a1dfb884ec63e3a45d", "filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         miri_resolve_frame(buf[0], 2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c7e0d41009ad0d2f82a7c17daf8b47511c237a38", "filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL | ...   miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::n\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame_names` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0cfe5d7173ce1b241ed58609e94a7672fe9a0975", "filename": "tests/fail/backtrace/bad-backtrace-size-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         miri_backtrace_size(2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_backtrace_size` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad-backtrace-size-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c7fd1c6415e033e4716fb6737d27773bdb3ddc53", "filename": "tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1]\n    |\n LL |     let res = helper(val, ptr);\n    |                      ^^^\n+   = note: backtrace:\n    = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n note: inside `main` at $DIR/box-cell-alias.rs:LL:CC\n   --> $DIR/box-cell-alias.rs:LL:CC"}, {"sha": "15befcd1265535b2b9a124625d2d8657b043ddb0", "filename": "tests/fail/branchless-select-i128-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -10,7 +10,7 @@ LL | |             )\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/branchless-select-i128-pointer.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "be9781ff46ea169a627314703e88a6fe8b7d62aa", "filename": "tests/fail/concurrency/libc_pthread_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_join_detached.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5ac35ffe512e33297500c3e1df3be80daeb24eba", "filename": "tests/fail/concurrency/libc_pthread_join_joined.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_join_joined.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fe136549ce5117708eb3edf0c735669859a0aa35", "filename": "tests/fail/concurrency/libc_pthread_join_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_join(thread_id, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_join_main.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9b91e5a3d0ed1000001426cfd70f155534d4e4f8", "filename": "tests/fail/concurrency/libc_pthread_join_multiple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_join(native_copy, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_join_multiple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "38e758e46c125720182bc58b0177bce2714ed08b", "filename": "tests/fail/concurrency/libc_pthread_join_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_join_self.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2e4b3a045e6915e2c29853fa95d9878811db1f32", "filename": "tests/fail/concurrency/thread-spawn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Fthread-spawn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Fthread-spawn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread-spawn.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -12,7 +12,7 @@ LL | |         );\n    | |_________^ can't create threads on Windows\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `std::sys::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/PLATFORM/thread.rs:LL:CC\n    = note: inside `std::thread::Builder::spawn_unchecked_::<[closure@$DIR/thread-spawn.rs:LL:CC], ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n    = note: inside `std::thread::Builder::spawn_unchecked::<[closure@$DIR/thread-spawn.rs:LL:CC], ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC"}, {"sha": "58e7cf07348f7fd5a0ba37edf5893d3fa067447a", "filename": "tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = *dangling_ptr.0;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/thread_local_static_dealloc.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "093a307685019024f5677fe04e99b181f37c0cb9", "filename": "tests/fail/concurrency/too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     panic!()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "87e22ec1dcf65a85430f8a4b52f57bcb7a33218b", "filename": "tests/fail/concurrency/too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     panic!()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "efd19ef4c51adc104d50a336ec44ad0a86ae0388", "filename": "tests/fail/concurrency/unwind_top_of_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -11,7 +11,7 @@ LL | | }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `thread_start` at $DIR/unwind_top_of_stack.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "a6a2ca1507b50a3d32a48a4cc69fa7841ccb9c5e", "filename": "tests/fail/dangling_pointers/dangling_pointer_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { ptr::addr_of!(*p) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "cca3d0278aec389b419741fd0834473aeaa34e4f", "filename": "tests/fail/dangling_pointers/dangling_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "66626a925cc68a909036263af9c2ddd80ca9494f", "filename": "tests/fail/dangling_pointers/dangling_zst_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_zst_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0dc73a6e3b13316d779f1b3540b0d6e50a9fc16a", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = unsafe { &*x as *const u32 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/deref-invalid-ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e37b6885922bd71b5aff38e0cc5e63962dad80bf", "filename": "tests/fail/dangling_pointers/deref-partially-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let val = unsafe { (*xptr).1 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/deref-partially-dangling.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0abcee595e159bfd6a6cba2e98c7bae5a153d24c", "filename": "tests/fail/dangling_pointers/dyn_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _ptr = unsafe { &*ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dyn_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "222f2a62819626540dbebc3a7a224cf821541a74", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: () = unsafe { *ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/maybe_null_pointer_deref_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "12228bc1d71779ca650f2b7e9b83933f661355f2", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *ptr = zst_val };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "10f4c0f3841678e75cb9fdc0482d2f5b2db20923", "filename": "tests/fail/dangling_pointers/null_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x: i32 = unsafe { *std::ptr::null() };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/null_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "600b9b42549554193135a7169d976948980948cb", "filename": "tests/fail/dangling_pointers/null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x: () = unsafe { *std::ptr::null() };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/null_pointer_deref_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "803191a7fcfb4555d85cd1d6be9fa9069aabe732", "filename": "tests/fail/dangling_pointers/null_pointer_write.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *std::ptr::null_mut() = 0i32 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/null_pointer_write.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2b4d26f8edaf8381907fe6eaaee5aabb2e8572b9", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(&src as *const T, dst, 1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::write::<[u8; 0]>` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC"}, {"sha": "2abc7a457b9a8bb9401e40ae6b26c2f92294c1dc", "filename": "tests/fail/dangling_pointers/out_of_bounds_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/out_of_bounds_read1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e0735dd1f926a3e7ba781c38dbcf6a61d5b9a1ee", "filename": "tests/fail/dangling_pointers/out_of_bounds_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/out_of_bounds_read2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dd24e6dd675cf4efc23539a64fa397ac2e142e47", "filename": "tests/fail/dangling_pointers/stack_temporary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let val = *x;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/stack_temporary.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "23b66325571f7f5655b54e1e310624725ae62cd7", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { &mut *(LEAK as *mut i32) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n   --> $DIR/storage_dead_dangling.rs:LL:CC"}, {"sha": "67b28e25e1ddee04a2ebc3df3a27bb934eea26e7", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/wild_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b180c30bdf3422a4109791c987e97db078321757", "filename": "tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *pointer.load(Ordering::Relaxed)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/alloc_read_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bae65b6262f4a14baae70aad913b74fac320cae3", "filename": "tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *pointer.load(Ordering::Relaxed) = 2;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/alloc_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2a0ca9260782c79f4a64b03e9bcb1266ed040ca5", "filename": "tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             intrinsics::atomic_load_seqcst(c.0 as *mut usize)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_read_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "48a9c85469080bb6481e7e1cd74dc39c66325d3e", "filename": "tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_read_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b3e12168255a7d927fba7c7cdb64dd2c7f8be357", "filename": "tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_write_na_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "69bf6c5f37425caf1fd4c2d15d2131f54dca7f73", "filename": "tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             atomic_store(c.0 as *mut usize, 32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_write_na_read_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6abcf4fe3d12b77df9cb7a1284ce1ae9a4482809", "filename": "tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             atomic_store(c.0 as *mut usize, 64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_write_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2de1c6858888017c8434771fc9132e88eba16533", "filename": "tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/atomic_write_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "66bb8b0be4048685438dccd4c9fe3796da94ff15", "filename": "tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dangling_thread_async_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1fd9afe176331670090072c27c6d5b6e28bd0d19", "filename": "tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_thread_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "eec74e8b542a03b0b911f95dc2b48dceef68f816", "filename": "tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -11,7 +11,7 @@ LL | |             );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "41a1224101fc5c2af05ab21684ee543812f87e77", "filename": "tests/fail/data_race/dealloc_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *ptr.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_read_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3c125e03a680cae661d09e789007a8ee130bd378", "filename": "tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_read_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f16c0040bb8a4945627d75f608c966990af8fc63", "filename": "tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -11,7 +11,7 @@ LL | |             );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6f2e829b42971ced94cc0018c9e32d1fa5461311", "filename": "tests/fail/data_race/dealloc_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *ptr.0 = 2;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ed069bb6fcd61d300cdf1d186fd9992356d0df28", "filename": "tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/dealloc_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cd707bdcfa9c5fd4acf3335d5cda20f1ceaf484a", "filename": "tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/enable_after_join_to_main.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "878342c1bd9ff55f0c286b9999ebd315802cc5e3", "filename": "tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { V = 2 }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/fence_after_load.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b87a7a10974e8d3b753cbfc5ff0319ae890587b9", "filename": "tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/read_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "29739d5083c4c7a53210174e64250f86564c466e", "filename": "tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             stack_var\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/read_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "21f9e6f960352cc84a0ba571b148914239b0276c", "filename": "tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/relax_acquire_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a7bca03547e50f5914ab9ad5e0c8fa45778bf50a", "filename": "tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/release_seq_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "515ce17e16cd0555b251a8b7180a48e170676b79", "filename": "tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/release_seq_race_same_thread.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "905592fc22247104fef75cce3d77f7360e007bf7", "filename": "tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/rmw_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "afb9f4c1edb7969427b80e895113fe9711fe3ecc", "filename": "tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/write_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "97977bc297c16f9f138d6bb96733d0f144b52814", "filename": "tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             stack_var = 1usize;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/write_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bb6525fa8061462602e33ab72438340a22e24fa6", "filename": "tests/fail/environ-gets-deallocated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fenviron-gets-deallocated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fenviron-gets-deallocated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fenviron-gets-deallocated.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = unsafe { *pointer };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/environ-gets-deallocated.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0adb996decdbd4111540c1bf510d007f5b7f895d", "filename": "tests/fail/extern_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fextern_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fextern_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |     let _val = unsafe { std::ptr::addr_of!(FOO) };\n    |                                            ^^^ `extern` static `FOO` from crate `extern_static` is not supported by Miri\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/extern_static.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ebd5dd7fee157b32b189975a70f81a65fdb1a49d", "filename": "tests/fail/extern_static_in_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fextern_static_in_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fextern_static_in_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |     let _val = X;\n    |                ^ `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/extern_static_in_const.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "902c9a1f8bb5316e8731300c773fbfee3ba43d72", "filename": "tests/fail/fast_math_both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_both.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/fast_math_both.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "986b487991f99e1348bf6fec28f8c1813a8410f2", "filename": "tests/fail/fast_math_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_first.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/fast_math_first.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c5abb17f8fac9e702d54439b081331f3151829c2", "filename": "tests/fail/fast_math_second.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_second.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffast_math_second.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_second.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/fast_math_second.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "08f744a5c458849679926051726e8591dbf98435", "filename": "tests/fail/fs/close_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         libc::close(1);\n    |         ^^^^^^^^^^^^^^ stdout cannot be closed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/close_stdout.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e75d7b7c3d93bb2b3c004bc3493a5bb1831d9383", "filename": "tests/fail/fs/isolated_file.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_file.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode a\n    |\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n-           \n+   = note: backtrace:\n    = note: inside closure at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n    = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n    = note: inside `std::sys::PLATFORM::fs::File::open_c` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC"}, {"sha": "fe9700f07b3962b3c7fa3b17e57091d059057262", "filename": "tests/fail/fs/isolated_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fisolated_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fisolated_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_stdin.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    |\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/isolated_stdin.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5c16999cbf79a072b51f2854a740ebfef11c37ac", "filename": "tests/fail/fs/read_from_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fread_from_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fread_from_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fread_from_stdout.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot read from stdout\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/read_from_stdout.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a7297efaff960f5b1eff8976a3be7e673eeb8dfc", "filename": "tests/fail/fs/unix_open_missing_required_mode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...safe { libc::open(name_ptr, libc::O_CREAT) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `test_file_open_missing_needed_mode` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n note: inside `main` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n   --> $DIR/unix_open_missing_required_mode.rs:LL:CC"}, {"sha": "518d36b5551bf99d7514b0e1487c096101782dcc", "filename": "tests/fail/fs/write_to_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fwrite_to_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffs%2Fwrite_to_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fwrite_to_stdin.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         libc::write(0, bytes.as_ptr() as *const libc::c_void, 5);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot write to stdin\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/write_to_stdin.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "952acde9ea5377e9b3dd5e69003575c194ba9bf9", "filename": "tests/fail/function_calls/check_arg_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc(0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/check_arg_abi.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bf24c5c9179425fbdf3996a8b225249a9aa5ab61", "filename": "tests/fail/function_calls/check_arg_count_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         abort(1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/check_arg_count_abort.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ac0ec606dac8b5eb28e8393b539140ea4fee7458", "filename": "tests/fail/function_calls/check_arg_count_too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/check_arg_count_too_few_args.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b465b02b6e42ef97d569810c89ea343902e02ef3", "filename": "tests/fail/function_calls/check_arg_count_too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc(1, 2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/check_arg_count_too_many_args.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5d5c30a203ac2558227af10685d41bb316442c94", "filename": "tests/fail/function_calls/check_callback_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -11,7 +11,7 @@ LL | |         );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/check_callback_abi.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ba2b4de889b7efee691581c1b9dac672ca83c3bc", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             foo();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "358f86c0403b570e3ee6608ee458aa4e35a5aa1a", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ba2b4de889b7efee691581c1b9dac672ca83c3bc", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.no_cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             foo();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0b943432c2076d312f1d2a9f34f6aa06a3b4019a", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { unwind() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f974eb87037a42cc56a685780528ad270a47c1dc", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.extern_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { nounwind() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "998b7c415930ecfe6e7bd1af938da187b3619169", "filename": "tests/fail/function_calls/exported_symbol_clashing.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: then it's defined here again, in crate `exported_symbol_clashing`\n    |\n LL | fn bar() {}\n    | ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "69b99b374733625a0227a2dff1ce378df3aefd7c", "filename": "tests/fail/function_calls/exported_symbol_shim_clashing.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -12,6 +12,7 @@ LL | |\n LL | |     unreachable!()\n LL | | }\n    | |_^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_shim_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2e80e833710e74ad256a21581c11a2918c2673e7", "filename": "tests/fail/function_calls/exported_symbol_wrong_arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { foo(1) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_wrong_arguments.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "900e23d1212ec1874d2ae65e45a8d6ee964a4067", "filename": "tests/fail/function_calls/exported_symbol_wrong_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { FOO() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exported_symbol_wrong_type.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "436cced9f02e5bbea6dc01d1288effd9e8597ce0", "filename": "tests/fail/function_pointers/cast_box_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     (*g)(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_box_int_to_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "972fd9afc8ea70643e98cb3549de185b7c3c489f", "filename": "tests/fail/function_pointers/cast_fn_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "638c4ca6781edcea9390327b39e2b6d8a2cf97e2", "filename": "tests/fail/function_pointers/cast_fn_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e21d1c6b6f7338f3ec64f8528d966265ddcecca4", "filename": "tests/fail/function_pointers/cast_fn_ptr3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b1acafcebe7e1cb7b4f38c443a08000c57fb715f", "filename": "tests/fail/function_pointers/cast_fn_ptr4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g(&42 as *const i32)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c4915f905bf3eba61d9eda378941282901941a9b", "filename": "tests/fail/function_pointers/cast_fn_ptr5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3a80120a9b9269cb3dcef6cee0abeaae9f1ccc20", "filename": "tests/fail/function_pointers/cast_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_int_to_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ecd001964a1bcc39e047e58ebc55c41ac2b5d283", "filename": "tests/fail/function_pointers/deref_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *std::mem::transmute::<fn(), *const u8>(f)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/deref_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b6438934b2b34c9e2e6d1e70e435f49e8d0b2251", "filename": "tests/fail/function_pointers/execute_memory.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         f()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/execute_memory.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b5164d02ace1b5f529f6b54d8c561bcd6b19d31c", "filename": "tests/fail/function_pointers/fn_ptr_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     x();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/fn_ptr_offset.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f1fb366d0652eca95c61b667c18f6e89eaa329ac", "filename": "tests/fail/generator-pinned-moved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fgenerator-pinned-moved.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *num += 1;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/generator-pinned-moved.rs:LL:CC\n note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next` at $DIR/generator-pinned-moved.rs:LL:CC\n   --> $DIR/generator-pinned-moved.rs:LL:CC"}, {"sha": "1664e7ad743f449636b1cdd0fadd1b69e4044258", "filename": "tests/fail/intrinsics/assume.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fassume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fassume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fassume.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::assume(x > 42);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/assume.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "110408227e18106241e3302c23d7720b462ef23f", "filename": "tests/fail/intrinsics/copy_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(std::ptr::null(), ptr, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/copy_null.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "76917ae7ea15768210b24fd80da2852cf0a7e3f4", "filename": "tests/fail/intrinsics/copy_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         copy(src, dst, count)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::intrinsics::copy::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n    = note: inside `std::ptr::mut_ptr::<impl *mut i32>::copy_from` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/copy_overflow.rs:LL:CC"}, {"sha": "9298a87712bbc66d90d7c1f04233fe1346f37060", "filename": "tests/fail/intrinsics/copy_overlapping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(a, b, 2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/copy_overlapping.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "890c7b12e03d706210dfe4f56ebefeff5748ea50", "filename": "tests/fail/intrinsics/copy_unaligned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(&data[5], ptr, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/copy_unaligned.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7d4d3dd8e1b865189c6e8f10ff8a16302f883faa", "filename": "tests/fail/intrinsics/ctlz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         ctlz_nonzero(0u8);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/ctlz_nonzero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "284bfc1c4c994997d504752579d626e10c2eb563", "filename": "tests/fail/intrinsics/cttz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         cttz_nonzero(0u8);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cttz_nonzero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "061123ddc1decd4c85458e3d827799b6897122b0", "filename": "tests/fail/intrinsics/div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = unchecked_div(1i64, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/div-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6564fad475def348bd8125a5e66c5b720d5958e0", "filename": "tests/fail/intrinsics/exact_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(2, 0) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exact_div1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7e8e2ee18121b31b1bd1b92ac2297276739a4460", "filename": "tests/fail/intrinsics/exact_div2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(2u16, 3) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exact_div2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8b1f15794b7cd79260d2682d9e2c53ab2b0e30da", "filename": "tests/fail/intrinsics/exact_div3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(-19i8, 2) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exact_div3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4da670bc846cf824d63d2fc26444eb4fa5362658", "filename": "tests/fail/intrinsics/exact_div4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(i64::MIN, -1) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exact_div4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "88cd4a7c184b465693bcd2b8f147a6fc21f9bacb", "filename": "tests/fail/intrinsics/float_to_int_32_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_inf1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a833001840481b88bdbc9bc890bfa6e138ac6b5b", "filename": "tests/fail/intrinsics/float_to_int_32_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_infneg1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9bf312a9ccbd866a439186f2aa47d24b5aa6f8e1", "filename": "tests/fail/intrinsics/float_to_int_32_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_nan.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "be105ccdaa711fe658c72cbff90bb49e4121e585", "filename": "tests/fail/intrinsics/float_to_int_32_nanneg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_nanneg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6f926d442bb4e923b1f046a3a7b5914a729e8bc5", "filename": "tests/fail/intrinsics/float_to_int_32_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-1.000000001f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_neg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "880eb6f48a9b386cc2b17a7ed905871f022b1692", "filename": "tests/fail/intrinsics/float_to_int_32_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(2147483648.0f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_too_big1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9ee3e2feed2f996a4acefcc4d0c124de86de0061", "filename": "tests/fail/intrinsics/float_to_int_32_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_too_big2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0f23fc05fd7234284f5f89e3f2a37114f93d3ab5", "filename": "tests/fail/intrinsics/float_to_int_32_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(-2147483904.0f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_32_too_small1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "eb493f141cbdd6d6bd2b06dd25ab64628a6de53a", "filename": "tests/fail/intrinsics/float_to_int_64_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_inf1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5e499e27120201d7db0d44cbf146d4e247e08525", "filename": "tests/fail/intrinsics/float_to_int_64_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_infneg1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "da22fa481727fea0ddc84378b721f725833ef8e2", "filename": "tests/fail/intrinsics/float_to_int_64_infneg2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_infneg2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "eff110ad724c4c625750b8ce9bcbeebcc3a34513", "filename": "tests/fail/intrinsics/float_to_int_64_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u32>(f64::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_nan.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8d8851a9d7bf209a097927fa7b37224783e8c97a", "filename": "tests/fail/intrinsics/float_to_int_64_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(-1.0000000000001f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_neg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "53c999ccba92f920886e8009946b67b6c8844f89", "filename": "tests/fail/intrinsics/float_to_int_64_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i32>(2147483648.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4f5927eed59a2fc60956e760a7e93b62bfae6ae1", "filename": "tests/fail/intrinsics/float_to_int_64_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d439b8695efb6e3894bded8eb305408f6a3b73b7", "filename": "tests/fail/intrinsics/float_to_int_64_too_big3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "56677cd31554483c7e183fc4a900518d3ec2581c", "filename": "tests/fail/intrinsics/float_to_int_64_too_big4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(u128::MAX as f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ab5b2c954aecc1ceabc995263007f181cbdea77c", "filename": "tests/fail/intrinsics/float_to_int_64_too_big5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(2402823669209384634633746074317\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e64ab2262715c063d217b796d227fb30722bf73f", "filename": "tests/fail/intrinsics/float_to_int_64_too_big6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::MAX);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e9809e3ba58995bacee0a95df84bd2e892553bea", "filename": "tests/fail/intrinsics/float_to_int_64_too_big7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::MIN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_big7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "714205ca1bebd9a242bf9211d3c7940b0f2b4d95", "filename": "tests/fail/intrinsics/float_to_int_64_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i32>(-2147483649.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_small1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b2302bf905ac62e56f75ea61aab48c758637b6aa", "filename": "tests/fail/intrinsics/float_to_int_64_too_small2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_small2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bcff0fb63042349399a7afa4e19611b20ccd21cc", "filename": "tests/fail/intrinsics/float_to_int_64_too_small3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/float_to_int_64_too_small3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2c4d6bbc50cf85e6fb3ef9c272f40298a96bd473", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_1.rs:LL:CC"}, {"sha": "70ce2dc02a8214a44580cc9889ab89fe5b025163", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_2.rs:LL:CC"}, {"sha": "075f40b54a2c79ff823bf8aebcfbcd63aeb5805c", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_3.rs:LL:CC"}, {"sha": "705ae01188b8c526c9e78d9e302203b2e3c45c9a", "filename": "tests/fail/intrinsics/overflowing-unchecked-rsh.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = unchecked_shr(1i64, 64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/overflowing-unchecked-rsh.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ae9dd15b1330453af9d003142a579c074a23d99b", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::mut_ptr::<impl *mut i32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n   --> $DIR/ptr_offset_0_plus_0.rs:LL:CC"}, {"sha": "699ca1a87ae87a5f8c265db04209eb10023ffcf6", "filename": "tests/fail/intrinsics/ptr_offset_from_oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { ptr_offset_from(end_ptr, end_ptr) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/ptr_offset_from_oob.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "49e02651e9636aff3cadc3fe43e5c4d9e8c5d737", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n   --> $DIR/ptr_offset_int_plus_int.rs:LL:CC"}, {"sha": "fa7a107ab5340e51fd230859bf7d14b6e4bdb9d0", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n   --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC"}, {"sha": "d8596acc33b0cfa044f0c3befd5149c53b67886b", "filename": "tests/fail/intrinsics/ptr_offset_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n   --> $DIR/ptr_offset_overflow.rs:LL:CC"}, {"sha": "c9b7f88385d9093b5f703c64747fe0cf325002ed", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::mut_ptr::<impl *mut u32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n   --> $DIR/ptr_offset_ptr_plus_0.rs:LL:CC"}, {"sha": "1da33d8eaf59c5a247f8cd524c4b5c89baf3a7a4", "filename": "tests/fail/intrinsics/rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = unchecked_rem(3u32, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/rem-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "552749c48ea7d1ba6d2c58f9fe5a93d8697cd775", "filename": "tests/fail/intrinsics/simd-div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_div(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-div-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "98a3c151627080a846a579c70cdbce723b70e509", "filename": "tests/fail/intrinsics/simd-div-overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_div(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-div-overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "233074105b2b9cd52a3242db8637f89d82de9de3", "filename": "tests/fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | implement! { f32 }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2_usize>>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n   --> $DIR/simd-float-to-int.rs:LL:CC"}, {"sha": "6b935bc6e254903653d89f5fab78de09db6016a9", "filename": "tests/fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::simd::Simd::<i8, 4_usize>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-gather.rs:LL:CC\n   --> $DIR/simd-gather.rs:LL:CC"}, {"sha": "5a44861feee1ccf1212a4381e80e552e51db4b4c", "filename": "tests/fail/intrinsics/simd-reduce-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_reduce_any(x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-reduce-invalid-bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dd68d3aa184060a2f54aad6cc48947571093b9fa", "filename": "tests/fail/intrinsics/simd-rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_rem(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-rem-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "24fc6782f149385e7c82d724a9e8e6d7071305e3", "filename": "tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::simd::Simd::<i8, 4_usize>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n   --> $DIR/simd-scatter.rs:LL:CC"}, {"sha": "7b3b3292ef78a40d3504615c0ffed1a8dd76deaf", "filename": "tests/fail/intrinsics/simd-select-bitmask-invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_select_bitmask(0b11111111u8, x, x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-select-bitmask-invalid.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ad5a89310681fcddab9c471aa0dd0e0e838d87c3", "filename": "tests/fail/intrinsics/simd-select-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_select(x, x, x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-select-invalid-bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cea99f681932f272b2c491ec0133820e421fb6af", "filename": "tests/fail/intrinsics/simd-shl-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_shl(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-shl-too-far.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "df3288a805c8ebba1b8626ecffde6d355d7cb99f", "filename": "tests/fail/intrinsics/simd-shr-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         simd_shr(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/simd-shr-too-far.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9d48590593f52ad5a5b5348e35c0596a669f69f1", "filename": "tests/fail/intrinsics/unchecked_add1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_add(40000u16, 30000);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_add1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "64691932e71203227caa737c6c1b18384911e9fb", "filename": "tests/fail/intrinsics/unchecked_add2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_add(-30000i16, -8000);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_add2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "867c8e0a9d398ec140f3d3b0a28d437c45da2f9a", "filename": "tests/fail/intrinsics/unchecked_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_div(i16::MIN, -1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_div1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4d3a45d415757f9a9c6f0080516235fef96fe056", "filename": "tests/fail/intrinsics/unchecked_mul1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_mul(300u16, 250u16);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_mul1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b64ef116be45d47cfcb2d37191a94b70b97dcee2", "filename": "tests/fail/intrinsics/unchecked_mul2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_mul(1_000_000_000i32, -4);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_mul2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8454382777a02174627523f182d45d3b2bcc75e8", "filename": "tests/fail/intrinsics/unchecked_sub1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_sub(14u32, 22);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_sub1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2e6fc2e0b64f544f8898c8a88b9fdb114b3bffea", "filename": "tests/fail/intrinsics/unchecked_sub2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_sub(30000i16, -7000);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unchecked_sub2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8e8156531b16adf474ed3f44c1f9dd57e694516b", "filename": "tests/fail/intrinsics/write_bytes_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/write_bytes_null.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1e5381279529fd3005542b51dbc49e647ad068d4", "filename": "tests/fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         write_bytes(dst, val, count)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::intrinsics::write_bytes::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n    = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC"}, {"sha": "26cd41bdca3aa8bb482497a3014ef646a9503f1b", "filename": "tests/fail/invalid_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_bool.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = b == std::hint::black_box(true);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/invalid_bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d605ae44750b7655deecd6145f3c6299750f9a60", "filename": "tests/fail/invalid_char.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_char.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = c == 'x';\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/invalid_char.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2f5a4541129c970602745f6563ea5fe8eab974d9", "filename": "tests/fail/invalid_enum_tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     Discriminant(intrinsics::discriminant_value(v))\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::mem::discriminant::<Foo>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n   --> $DIR/invalid_enum_tag.rs:LL:CC"}, {"sha": "85aa3fb5a08bc9e0dd049375199d995713a46a73", "filename": "tests/fail/invalid_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Finvalid_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_int.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = i + 0;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/invalid_int.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "89dc8dc327f82e5fdfc5e44f1c07764c5ec79501", "filename": "tests/fail/issue-miri-1112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-1112.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `FunnyPointer::from_data_ptr` at $DIR/issue-miri-1112.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1112.rs:LL:CC\n   --> $DIR/issue-miri-1112.rs:LL:CC"}, {"sha": "853e3a9015e7b2c10934649e4d209cc3607427e6", "filename": "tests/fail/modifying_constants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fmodifying_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fmodifying_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmodifying_constants.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     *y = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/modifying_constants.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4072a0376f5c76e73dd88583e88d7764dafcbd54", "filename": "tests/fail/never_say_never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_say_never.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *(y as *const _ as *const !)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/never_say_never.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2a8ee0a3e9bd1a5ad23a1a4b78bcc9a86a5141a4", "filename": "tests/fail/never_transmute_humans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_transmute_humans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_transmute_humans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_humans.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<Human, !>(Human)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/never_transmute_humans.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "31614ef3edf88b166dc854cfacd91a9bff0532fc", "filename": "tests/fail/never_transmute_void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_transmute_void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fnever_transmute_void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_void.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         match v.0 {}\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `m::f` at $DIR/never_transmute_void.rs:LL:CC\n note: inside `main` at $DIR/never_transmute_void.rs:LL:CC\n   --> $DIR/never_transmute_void.rs:LL:CC"}, {"sha": "a664590e36ae17430fca888e985b4ffc216a2fcc", "filename": "tests/fail/panic/bad_miri_start_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { miri_start_panic(&mut 0) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/bad_miri_start_panic.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "be8a3668ac52225baa82c77fbb5a4b939cb980ad", "filename": "tests/fail/panic/bad_unwind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -8,7 +8,7 @@ LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/bad_unwind.rs:LL:CC\n    = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at RUSTLIB/std/src/panicking.rs:LL:CC"}, {"sha": "df4b9522f46717a9f04127fdde6fb2ae6c00855e", "filename": "tests/fail/panic/unwind_panic_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         miri_start_panic(&mut 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unwind_panic_abort.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cd3c4ddd6ca43cb7ca21add107d3f8f8f3e1f94f", "filename": "tests/fail/pointer_partial_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpointer_partial_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fpointer_partial_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let x = *p;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/pointer_partial_overwrite.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ddbf64f383806f09c5e50d3c7ef7bf2891eca832", "filename": "tests/fail/provenance/provenance_transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = *left_ptr;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `deref` at $DIR/provenance_transmute.rs:LL:CC\n note: inside `main` at $DIR/provenance_transmute.rs:LL:CC\n   --> $DIR/provenance_transmute.rs:LL:CC"}, {"sha": "f0c47e54859ee7d3c4e3a10b4b6fd8dc20154fb8", "filename": "tests/fail/provenance/ptr_int_unexposed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     assert_eq!(unsafe { *ptr }, 3);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/ptr_int_unexposed.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0d6c0f92d93bb3410da5e72dfb5bf2707034d337", "filename": "tests/fail/provenance/ptr_invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { *xptr_invalid };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/ptr_invalid.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8f19d4ec93580de7e370c39ce844e8d68b069aaa", "filename": "tests/fail/provenance/ptr_invalid_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n   --> $DIR/ptr_invalid_offset.rs:LL:CC"}, {"sha": "ff6ab1c9e95bfcfb0c1c4c03e2055cb7a6e77239", "filename": "tests/fail/provenance/strict_provenance_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |     let _ptr = addr as *const i32;\n    |                ^^^^^^^^^^^^^^^^^^ integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\n    |\n    = help: use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/strict_provenance_cast.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f2dd245be3458ca976f019183f3fb04a62513744", "filename": "tests/fail/rc_as_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Frc_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Frc_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Frc_as_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at RUSTLIB/core/src/macros/mod.rs:LL:CC\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d6690f0c7a012f4f6e4218f400c155d5c6326bc1", "filename": "tests/fail/reading_half_a_pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Freading_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Freading_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Freading_half_a_pointer.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         let _x = *d_alias;\n    |                  ^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/reading_half_a_pointer.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "84b09acbac3dcee9e579d3906186d235723c95ab", "filename": "tests/fail/shim_arg_size.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshim_arg_size.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshim_arg_size.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshim_arg_size.32bit.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _p1 = malloc(42);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "98ed99d6d729e068d9537d4567b3285b1c3a207f", "filename": "tests/fail/shim_arg_size.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshim_arg_size.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshim_arg_size.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshim_arg_size.64bit.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _p1 = malloc(42);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0ab02687e2aef84b78eaf080f0403d8f097493d8", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { intrinsics::unreachable() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::hint::unreachable_unchecked` at RUSTLIB/core/src/hint.rs:LL:CC\n note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC"}, {"sha": "ec985cb26a9969ea98c2875bcdde29c049adf7cb", "filename": "tests/fail/stacked_borrows/alias_through_mutation.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     *target = 13;\n    |     ^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/alias_through_mutation.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "34a53aa8f307a4b2ba5058e2730b707782aaa911", "filename": "tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -21,6 +21,7 @@ help: this protector is live for this call\n    |\n LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC\n   --> $DIR/aliasing_mut1.rs:LL:CC"}, {"sha": "7830648ee8f3c5e14f2f85361ba1bfc9500c25fe", "filename": "tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -21,6 +21,7 @@ help: this protector is live for this call\n    |\n LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC\n   --> $DIR/aliasing_mut2.rs:LL:CC"}, {"sha": "8e489b738657a69359a282fe8f59d5df1be5ea3a", "filename": "tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL | pub fn safe(_x: &mut i32, _y: &i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut3.rs:LL:CC\n   --> $DIR/aliasing_mut3.rs:LL:CC"}, {"sha": "f62ce1e51964913f84b8abd86c2469cfd116451d", "filename": "tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -21,6 +21,7 @@ help: this protector is live for this call\n    |\n LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC\n   --> $DIR/aliasing_mut4.rs:LL:CC"}, {"sha": "88ecca87962d558921d1672f004c85b9c8b0596f", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n   --> $DIR/box_exclusive_violation1.rs:LL:CC"}, {"sha": "6e78ed6c7298387725a9301f65a52a2a3ffa4244", "filename": "tests/fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc]\n    |\n LL |         unsafe { from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6e6dc38aaf0614914e1b532f63965ab1d4d102c4", "filename": "tests/fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x10]\n    |\n LL |                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c3ea7a437cdb1727e18859ff75756f2462076f8f", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "d6c31e0649ec3ae00184529c294a140255e9b24f", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "af76183fb25da34b06dca7d7829e374e7953f2c2", "filename": "tests/fail/stacked_borrows/exposed_only_ro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -9,7 +9,7 @@ LL |     unsafe { *ptr = 0 };\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/exposed_only_ro.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3f4ade9a712f0dbb2fe283bd83ffa9c8150a1fe0", "filename": "tests/fail/stacked_borrows/illegal_read1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _val = unsafe { *xraw };\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cb0ac56027828adc9c64982b9c74eabef1a1925e", "filename": "tests/fail/stacked_borrows/illegal_read2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let shr = unsafe { &*xraw };\n    |                        ^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bdeca5f7ec86e422b62ebfca55d65158d77f51d1", "filename": "tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _val = unsafe { *xref1.r };\n    |                         ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "59c2088c0c85d3813aa0d024ef2e0ce7da15db7a", "filename": "tests/fail/stacked_borrows/illegal_read4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d1506f1996847198987418e8c4d2acbbe392b57d", "filename": "tests/fail/stacked_borrows/illegal_read5.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n    |\n LL |     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n    |                          ^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5abea6f611a400b18bedfeed910227f153288b21", "filename": "tests/fail/stacked_borrows/illegal_read6.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         let x = &mut *x; // kill `raw`\n    |                 ^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "56ebd93918bf38275746155781467c83a0c8eb72", "filename": "tests/fail/stacked_borrows/illegal_read7.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         let _val = ptr::read(raw);\n    |                    ^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ef150e84f274e47f5aa3967256598fd3ee84a193", "filename": "tests/fail/stacked_borrows/illegal_read8.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         *y2 += 1;\n    |         ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7c77c62575d704df9d55a64a69f4b3236cf5ca0f", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -9,7 +9,7 @@ LL |         let _val = *root2;\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4fbbd4c6bedebacb14a2a8da395b245f3fe9e991", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -9,7 +9,7 @@ LL |         let _val = *root2;\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_read_despite_exposed2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f939720516922f71eaad563fb3c868bd59b612aa", "filename": "tests/fail/stacked_borrows/illegal_write1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x4]\n    |\n LL |         let x: *mut u32 = xref as *const _ as *mut _;\n    |                           ^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "92dacf214f8c22f73a24e2d5f42fff0b408109e4", "filename": "tests/fail/stacked_borrows/illegal_write2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     drop(&mut *target); // reborrow\n    |          ^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bb6d189f852057a1c32400f37e6f7c9b3b1186b1", "filename": "tests/fail/stacked_borrows/illegal_write3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x4]\n    |\n LL |     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n    |               ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "97301d64deb3fe3e14a4d4c07a80438f6e989017", "filename": "tests/fail/stacked_borrows/illegal_write4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n    |                                       ^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9cb32d7bdfd1c3c935976a7e8af913588123a58b", "filename": "tests/fail/stacked_borrows/illegal_write5.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     unsafe { *xraw = 15 };\n    |              ^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cbf4a22f23f27030caf45b462e6190e5e0f70f49", "filename": "tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -26,6 +26,7 @@ LL | |     unsafe { *y = 2 };\n LL | |     return *a;\n LL | | }\n    | |_^\n+   = note: backtrace:\n    = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n note: inside `main` at $DIR/illegal_write6.rs:LL:CC\n   --> $DIR/illegal_write6.rs:LL:CC"}, {"sha": "0f5834077b3d84abe8241f27be96ef70a77fd3a9", "filename": "tests/fail/stacked_borrows/illegal_write_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -9,7 +9,7 @@ LL |         let _val = *root2;\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/illegal_write_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "73be074ce91a764e3edc32391f20dd498218bd50", "filename": "tests/fail/stacked_borrows/interior_mut1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/interior_mut1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "74e91d49c418d2f513df3f6f320bcfdc77ff47be", "filename": "tests/fail/stacked_borrows/interior_mut2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5f54134a24315f8d0acf21b4e9b09592116f7df9", "filename": "tests/fail/stacked_borrows/invalidate_against_barrier1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -26,6 +26,7 @@ LL | |     // unique for the duration of this call.\n LL | |     let _val = unsafe { *x };\n LL | | }\n    | |_^\n+   = note: backtrace:\n    = note: inside `inner` at $DIR/invalidate_against_barrier1.rs:LL:CC\n note: inside `main` at $DIR/invalidate_against_barrier1.rs:LL:CC\n   --> $DIR/invalidate_against_barrier1.rs:LL:CC"}, {"sha": "15bc91e869f9d987b1c20e0c386e4cb6d9f49114", "filename": "tests/fail/stacked_borrows/invalidate_against_barrier2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -26,6 +26,7 @@ LL | |     // immutable for the duration of this call.\n LL | |     unsafe { *x = 0 };\n LL | | }\n    | |_^\n+   = note: backtrace:\n    = note: inside `inner` at $DIR/invalidate_against_barrier2.rs:LL:CC\n note: inside `main` at $DIR/invalidate_against_barrier2.rs:LL:CC\n   --> $DIR/invalidate_against_barrier2.rs:LL:CC"}, {"sha": "8180a60a837afabca9bc621667dcc10e74d01eb5", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::boxed::Box::<u32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<u32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC"}, {"sha": "61ce006dc82b9cc0d86bd2e9e9c87cbf7f2b7be6", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC"}, {"sha": "293d85cc9f45706e12d96477f623d0bc434c9b87", "filename": "tests/fail/stacked_borrows/load_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/load_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5749daa51fd9f34771e70e4626c98bd4b7f63ee1", "filename": "tests/fail/stacked_borrows/load_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/load_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "acc904794fb533db800e7f856c5fe232339c0507", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC"}, {"sha": "5bbf9bc51847286791362b095db43675c54c4834", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         let _raw2 = ptr2.as_mut();\n    |                     ^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "860a628492c7849bc4da908504e7eeb5ffced3b0", "filename": "tests/fail/stacked_borrows/newtype_retagging.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -23,6 +23,7 @@ LL | / fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n LL | |     dealloc();\n LL | | }\n    | |_^\n+   = note: backtrace:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside closure at $DIR/newtype_retagging.rs:LL:CC"}, {"sha": "d2ada645863126d23f3e4e09ec81945595874680", "filename": "tests/fail/stacked_borrows/outdated_local.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n    |     ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/outdated_local.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "933ef1ad5970a595ce9b32564ad07d7863848344", "filename": "tests/fail/stacked_borrows/pass_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/pass_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "02cf62f0332610586393c6e43350b5413a6b552a", "filename": "tests/fail/stacked_borrows/pass_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/pass_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "66427bdf64d6903b3cb0a0154e2df588c9789b37", "filename": "tests/fail/stacked_borrows/pointer_smuggling.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1]\n    |\n LL |     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n    |     ^^^^^^^^\n+   = note: backtrace:\n    = note: inside `fun2` at $DIR/pointer_smuggling.rs:LL:CC\n note: inside `main` at $DIR/pointer_smuggling.rs:LL:CC\n   --> $DIR/pointer_smuggling.rs:LL:CC"}, {"sha": "2028a91142727b34bbd59dcb747edb6e45c0d0c5", "filename": "tests/fail/stacked_borrows/raw_tracking.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |     let raw2 = &mut l as *mut _; // invalidates raw1\n    |                ^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/raw_tracking.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "230c3e82ff23114be1c00e50e6a235db7ad1c60f", "filename": "tests/fail/stacked_borrows/return_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `foo` at $DIR/return_invalid_mut.rs:LL:CC\n note: inside `main` at $DIR/return_invalid_mut.rs:LL:CC\n   --> $DIR/return_invalid_mut.rs:LL:CC"}, {"sha": "f278113e42577a00639fe8173677c323f80c3280", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/return_invalid_mut_option.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9465fd072ea932bc484ffe83cf4ca3cc3beaee00", "filename": "tests/fail/stacked_borrows/return_invalid_mut_tuple.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "75ea8bb89ec0fb4e13c652f1b2f5aaf7a41da7d4", "filename": "tests/fail/stacked_borrows/return_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `foo` at $DIR/return_invalid_shr.rs:LL:CC\n note: inside `main` at $DIR/return_invalid_shr.rs:LL:CC\n   --> $DIR/return_invalid_shr.rs:LL:CC"}, {"sha": "27656b46ccfcb1f9fbe13a18202c2a072e53c346", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/return_invalid_shr_option.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9fdc87808651453350cd7224fc35d1f42360ae47", "filename": "tests/fail/stacked_borrows/return_invalid_shr_tuple.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8]\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9909778ab28edfdd6f03c1523ce15f9b5fa0a30d", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4]\n    |\n LL |         shr_rw.set(1);\n    |         ^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2c0117577f2e5deb131fd29e1529375a9f7a9ea6", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -19,6 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n    |\n LL |         shr_rw.replace(1);\n    |         ^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "47799b18e1f9d6109906e7e474477a42b344a87c", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x4]\n    |\n LL |         *(x as *const i32 as *mut i32) = 7;\n    |           ^\n+   = note: backtrace:\n    = note: inside `unknown_code` at $DIR/shr_frozen_violation1.rs:LL:CC\n note: inside `foo` at $DIR/shr_frozen_violation1.rs:LL:CC\n   --> $DIR/shr_frozen_violation1.rs:LL:CC"}, {"sha": "c8a0dc8dca2d809fb8a547e18958a8816da125b1", "filename": "tests/fail/stacked_borrows/static_memory_modification.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<&usize, &mut usize>(&X)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/static_memory_modification.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b48abb3df7098163a915ce770dd9478ac6001498", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x4..0x8]\n    |\n LL |     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n    |                ^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/transmute-is-no-escape.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6302ccde983734c1340b24d045906c25eb7fcc86", "filename": "tests/fail/stacked_borrows/unescaped_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -9,7 +9,7 @@ LL |         *raw = 13;\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unescaped_local.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "018ff77b2e939013785d98f00038b2117b5b3132", "filename": "tests/fail/stacked_borrows/unescaped_static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x1]\n    |\n LL |     let ptr_to_first = &ARRAY[0] as *const u8;\n    |                        ^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `main` at $DIR/unescaped_static.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "534f811e48abe233db9855192ea24e4bc76e2d28", "filename": "tests/fail/stacked_borrows/vtable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { PtrRepr { components: PtrComponents { data_address, metadata }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::ptr::from_raw_parts::<dyn Foo>` at RUSTLIB/core/src/ptr/metadata.rs:LL:CC\n note: inside `uwu` at $DIR/vtable.rs:LL:CC\n   --> $DIR/vtable.rs:LL:CC"}, {"sha": "2878f4c069af7ae89a952e40dc4145136c98ad62", "filename": "tests/fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -14,6 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x0]\n    |\n LL |         assert_eq!(*s.get_unchecked(1), 2);\n    |                     ^^^^^^^^^^^^^^^^^^\n+   = note: backtrace:\n    = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at RUSTLIB/core/src/slice/mod.rs:LL:CC\n note: inside `main` at $DIR/zst_slice.rs:LL:CC\n   --> $DIR/zst_slice.rs:LL:CC"}, {"sha": "47590afc1d1a749231dbb1d1c1492c14657adb1b", "filename": "tests/fail/static_memory_modification1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *std::mem::transmute::<&usize, &mut usize>(&X) = 6;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/static_memory_modification1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c8fce81ede550f14801a6e7de99be0c08ad8abb1", "filename": "tests/fail/static_memory_modification2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/static_memory_modification2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "16b06bb3f7968654c9fe18aa2c118fcf9737eef4", "filename": "tests/fail/static_memory_modification3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fstatic_memory_modification3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         transmute::<&[u8], &mut [u8]>(bs)[4] = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/static_memory_modification3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0e1c776f596583115b266d69bc8e5544caef9c3b", "filename": "tests/fail/sync/libc_pthread_cond_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_cond_destroy(cond.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_cond_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dee50249b6b631cd01f1bdf6297fece0e7a9f805", "filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_condattr_destroy(attr.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_condattr_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1b40f39d04bc28775d35200f3d118e38863ee37a", "filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutex_NULL_deadlock.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7606472beb97968694291ddfc12cad49123f197a", "filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutex_default_deadlock.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "40a7b3de09d58e6e656bf9f8c41151a031bec18b", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_destroy(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutex_destroy_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "274d4496266b0728faac28b5ea266601a2df3b96", "filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_destroy(mutex.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutex_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "daa9a7c5144833ce46b50e385833a521e6b4abe5", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_unlock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutex_normal_unlock_unlocked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "83c22b2673d628f37700ea0f57559f69bd65a5a2", "filename": "tests/fail/sync/libc_pthread_mutex_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...t_eq!(libc::pthread_mutex_unlock(lock_copy.0.get() as *mut _), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_mutex_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "44a201fe05836b578f75fbc4428eb9dfc63fba14", "filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_mutexattr_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "43f8b2dcca6f9771847ed75a7954ec75368fc8bd", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_read_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cbaa2b3fcce9fef19bedec3ebfd826126376c988", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_write_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "159e1b9881a90c0d1382d57d1d4611a6887610b8", "filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(&mut lock);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0921f3d4b506c3cb20bbfb7c15f6ce032e678252", "filename": "tests/fail/sync/libc_pthread_rwlock_read_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_rwlock_read_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "67bfde22edcfe5b25af2dbd1deaf152cf8edc974", "filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_unlock(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_unlock_unlocked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d066cb687a1a7496b6c50c02b5869285bde3856a", "filename": "tests/fail/sync/libc_pthread_rwlock_write_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside closure at $DIR/libc_pthread_rwlock_write_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ac6bf8243eee343ea5e8d8fb5af93cc12d65957b", "filename": "tests/fail/transmute-pair-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let v = unsafe { *z.offset(first_undef) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/transmute-pair-uninit.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a2dcffb255fe43a871c504b70c5298c6b98b6748", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/transmute_fat1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f3bd7ca27571d8ddfed9f16311740947eb946a10", "filename": "tests/fail/unaligned_pointers/alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         *(x_ptr as *mut u32) = 42; *(x_ptr.add(1) as *mut u32) = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/alignment.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bde4ff615c295d2cf7d02a7a4068f12cc8dc1df4", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         ::std::intrinsics::atomic_load_seqcst(zptr);\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/atomic_unaligned.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "930ec994d002d61cdd96da7cf0110864727e4a17", "filename": "tests/fail/unaligned_pointers/dyn_alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _ptr = &*ptr;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dyn_alignment.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "963fa81b655c885b12ea6719f960128e2da60987", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *u16_ptr = 2 };\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/intptrcast_alignment_check.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ce667c1e8deced81b1b81fec271320bac4b03d69", "filename": "tests/fail/unaligned_pointers/reference_to_packed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let i = *p;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/reference_to_packed.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c557ebb11f679e30e23896f796fbf56d496870ed", "filename": "tests/fail/unaligned_pointers/unaligned_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unaligned_ptr1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5bff916213178f01d9548497a7cb93e5b2b56bc1", "filename": "tests/fail/unaligned_pointers/unaligned_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unaligned_ptr2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f887f38bec53eb707047b6e00a2da3e8be001d8e", "filename": "tests/fail/unaligned_pointers/unaligned_ptr3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unaligned_ptr3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f2fe961eb6a1301ab3e6cf2f5ef8733fc9ecb6fe", "filename": "tests/fail/unaligned_pointers/unaligned_ptr4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = unsafe { *ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unaligned_ptr4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "157eb68b50d8d8e8ac9e892c5512dd0f5c8e98e2", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { ptr::addr_of!(*x) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "da53e922b7a9498f5fb207419098d153259d73dd", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unaligned_ptr_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e684ca8f0771438d24d64b6ba7bd45c23daaa881", "filename": "tests/fail/uninit_buffer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_buffer.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |         let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n    = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n note: inside `main` at $DIR/uninit_buffer.rs:LL:CC"}, {"sha": "174d0d2416e3d32741d5a2cf7b3074ca927e8a98", "filename": "tests/fail/uninit_byte_read.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_byte_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_byte_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let undef = unsafe { *v.get_unchecked(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/uninit_byte_read.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7241cf04ae4a17cb2b9f0ecbd1e085f527b78305", "filename": "tests/fail/uninit_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funinit_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_raw_ptr.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { std::mem::MaybeUninit::<*const u8>::uninit().assume\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/uninit_raw_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e9eb3649dea4afa647a813c29e3512fb3f484dfe", "filename": "tests/fail/unreachable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funreachable.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { intrinsics::unreachable() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `std::hint::unreachable_unchecked` at RUSTLIB/core/src/hint.rs:LL:CC\n note: inside `main` at $DIR/unreachable.rs:LL:CC\n   --> $DIR/unreachable.rs:LL:CC"}, {"sha": "3298f57dd51e7b40a87ea0f3ad0dd70b6e075d24", "filename": "tests/fail/unsupported_foreign_function.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_foreign_function.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         foo();\n    |         ^^^^^ can't call foreign function: foo\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unsupported_foreign_function.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "622b1876e0f86c98be6b510ce0d478db24d1023f", "filename": "tests/fail/unsupported_signal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funsupported_signal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Funsupported_signal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_signal.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -5,7 +5,7 @@ LL |         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function: signal\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/unsupported_signal.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6ac10b10a003587644304cbbb197556d7eea8de7", "filename": "tests/fail/validity/cast_fn_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     g(0usize as *const i32)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cd73237c867fe31962b63d0ecd0002bdf6cc6a03", "filename": "tests/fail/validity/cast_fn_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = g();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "52e1ae2acb851a71c16a1c327caad750ab6eb3a8", "filename": "tests/fail/validity/dangling_ref1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref1.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: &i32 = unsafe { mem::transmute(16usize) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_ref1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f9d0ad5515c825eef24d7cee0b65c8e0291b2126", "filename": "tests/fail/validity/dangling_ref2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref2.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: &i32 = unsafe { mem::transmute(ptr) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_ref2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "37b8d6bce6e84a5bf3c2263539f1f9350217ce9a", "filename": "tests/fail/validity/dangling_ref3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Fdangling_ref3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref3.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: &i32 = unsafe { mem::transmute(dangling()) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/dangling_ref3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "31575a439b5bbd0493ad970ae3f28a25ddb608f0", "filename": "tests/fail/validity/invalid_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Finvalid_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98254f67af20a67747835f03c314be9c9a42d769/tests%2Ffail%2Fvalidity%2Finvalid_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_bool.stderr?ref=98254f67af20a67747835f03c314be9c9a42d769", "patch": "@@ -6,7 +6,7 @@ LL |     let _b = unsafe { std::mem::transmute::<u8, bool>(2) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n+   = note: backtrace:\n    = note: inside `main` at $DIR/invalid_bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}]}