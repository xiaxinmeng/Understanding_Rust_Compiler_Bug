{"sha": "49f2a566663b125334245563f4dbe51778296feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjJhNTY2NjYzYjEyNTMzNDI0NTU2M2Y0ZGJlNTE3NzgyOTZmZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-06T13:35:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-06T13:35:12Z"}, "message": "Fix tests", "tree": {"sha": "7a27ca5e14db5557f8c3695be0493c4bf7c2b006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a27ca5e14db5557f8c3695be0493c4bf7c2b006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f2a566663b125334245563f4dbe51778296feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f2a566663b125334245563f4dbe51778296feb", "html_url": "https://github.com/rust-lang/rust/commit/49f2a566663b125334245563f4dbe51778296feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f2a566663b125334245563f4dbe51778296feb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a023c2e946f6df4217c62be71313484e673c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a023c2e946f6df4217c62be71313484e673c40", "html_url": "https://github.com/rust-lang/rust/commit/48a023c2e946f6df4217c62be71313484e673c40"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "110b1a0d90c22dbf9ddeb83ec23a112d436fa87d", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49f2a566663b125334245563f4dbe51778296feb/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2a566663b125334245563f4dbe51778296feb/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=49f2a566663b125334245563f4dbe51778296feb", "patch": "@@ -15,16 +15,14 @@ struct Foo<'a>(&'a isize);\n impl<'a> Foo<'a> {\n     //~^ NOTE shadowed lifetime `'a` declared here\n     fn shadow_in_method<'a>(&'a self) -> &'a isize {\n-        //~^ WARNING lifetime name `'a` shadows another lifetime name that is already in scope\n-        //~| NOTE deprecated\n+        //~^ ERROR lifetime name `'a` shadows another lifetime name that is already in scope\n         self.0\n     }\n \n     fn shadow_in_type<'b>(&'b self) -> &'b isize {\n         //~^ NOTE shadowed lifetime `'b` declared here\n         let x: for<'b> fn(&'b isize) = panic!();\n-        //~^ WARNING lifetime name `'b` shadows another lifetime name that is already in scope\n-        //~| NOTE deprecated\n+        //~^ ERROR lifetime name `'b` shadows another lifetime name that is already in scope\n         self.0\n     }\n \n@@ -35,9 +33,4 @@ impl<'a> Foo<'a> {\n }\n \n fn main() {\n-    // intentional error that occurs after `resolve_lifetime` runs,\n-    // just to ensure that this test fails to compile; when shadowed\n-    // lifetimes become either an error or a proper lint, this will\n-    // not be needed.\n-    let x: isize = 3_usize; //~ ERROR mismatched types\n }"}, {"sha": "d98b1d9deae62156f08c575447fff269cfa6fd7f", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49f2a566663b125334245563f4dbe51778296feb/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2a566663b125334245563f4dbe51778296feb/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=49f2a566663b125334245563f4dbe51778296feb", "patch": "@@ -35,7 +35,7 @@ impl<K,V> AssociationList<K,V> {\n impl<'a, K: PartialEq + std::fmt::Debug, V:Clone> Index<&'a K> for AssociationList<K,V> {\n     type Output = V;\n \n-    fn index<'a>(&'a self, index: &K) -> &'a V {\n+    fn index(&self, index: &K) -> &V {\n         for pair in &self.pairs {\n             if pair.key == *index {\n                 return &pair.value"}]}