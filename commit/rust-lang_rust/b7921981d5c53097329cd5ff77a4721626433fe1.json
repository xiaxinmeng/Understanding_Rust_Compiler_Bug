{"sha": "b7921981d5c53097329cd5ff77a4721626433fe1", "node_id": "C_kwDOAAsO6NoAKGI3OTIxOTgxZDVjNTMwOTczMjljZDVmZjc3YTQ3MjE2MjY0MzNmZTE", "commit": {"author": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-06-02T01:22:57Z"}, "committer": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-06-16T03:09:53Z"}, "message": "fix: inline `predicate_may_hold_fatal`", "tree": {"sha": "ce00b4e3bbc84b6680d4301b62601983c6a34224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce00b4e3bbc84b6680d4301b62601983c6a34224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7921981d5c53097329cd5ff77a4721626433fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7921981d5c53097329cd5ff77a4721626433fe1", "html_url": "https://github.com/rust-lang/rust/commit/b7921981d5c53097329cd5ff77a4721626433fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7921981d5c53097329cd5ff77a4721626433fe1/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114fb86ca08cfa6a99087e0f0bc264d03590dc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/114fb86ca08cfa6a99087e0f0bc264d03590dc37", "html_url": "https://github.com/rust-lang/rust/commit/114fb86ca08cfa6a99087e0f0bc264d03590dc37"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "3193d00e11b2ba8cf311e48ba4f2fc877094cc96", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7921981d5c53097329cd5ff77a4721626433fe1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7921981d5c53097329cd5ff77a4721626433fe1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=b7921981d5c53097329cd5ff77a4721626433fe1", "patch": "@@ -292,7 +292,12 @@ fn impl_intersection_has_impossible_obligation<'cx, 'tcx>(\n             Obligation::new(infcx.tcx, ObligationCause::dummy(), param_env, predicate)\n         })\n         .chain(obligations)\n-        .find(|o| !selcx.predicate_may_hold_fatal(o));\n+        .find(|o| {\n+            selcx.evaluate_root_obligation(o).map_or(\n+                false, // Overflow has occurred, and treat the obligation as possibly holding.\n+                |result| !result.may_apply(),\n+            )\n+        });\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);"}, {"sha": "4c5a794bc815bdc035f8fd0fc86b0f22e8385954", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7921981d5c53097329cd5ff77a4721626433fe1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7921981d5c53097329cd5ff77a4721626433fe1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b7921981d5c53097329cd5ff77a4721626433fe1", "patch": "@@ -518,19 +518,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     // The result is \"true\" if the obligation *may* hold and \"false\" if\n     // we can be sure it does not.\n \n-    /// Evaluates whether the obligation `obligation` can be satisfied (by any means).\n-    pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {\n-        debug!(?obligation, \"predicate_may_hold_fatal\");\n-\n-        // This fatal query is a stopgap that should only be used in standard mode,\n-        // where we do not expect overflow to be propagated.\n-        assert!(self.query_mode == TraitQueryMode::Standard);\n-\n-        self.evaluate_root_obligation(obligation)\n-            .expect(\"Overflow should be caught earlier in standard query mode\")\n-            .may_apply()\n-    }\n-\n     /// Evaluates whether the obligation `obligation` can be satisfied\n     /// and returns an `EvaluationResult`. This is meant for the\n     /// *initial* call."}, {"sha": "74c7afd6b9edbb6357d64603fb82c9fb33011f95", "filename": "tests/ui/traits/issue-105231.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7921981d5c53097329cd5ff77a4721626433fe1/tests%2Fui%2Ftraits%2Fissue-105231.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7921981d5c53097329cd5ff77a4721626433fe1/tests%2Fui%2Ftraits%2Fissue-105231.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-105231.rs?ref=b7921981d5c53097329cd5ff77a4721626433fe1", "patch": "@@ -0,0 +1,9 @@\n+//~ ERROR overflow evaluating the requirement `A<A<A<A<A<A<A<...>>>>>>>: Send`\n+struct A<T>(B<T>);\n+//~^ ERROR recursive types `A` and `B` have infinite size\n+struct B<T>(A<A<T>>);\n+trait Foo {}\n+impl<T> Foo for T where T: Send {}\n+impl Foo for B<u8> {}\n+\n+fn main() {}"}, {"sha": "fe20c47c57a805e407f75c0bb1819eb9dc377541", "filename": "tests/ui/traits/issue-105231.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7921981d5c53097329cd5ff77a4721626433fe1/tests%2Fui%2Ftraits%2Fissue-105231.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7921981d5c53097329cd5ff77a4721626433fe1/tests%2Fui%2Ftraits%2Fissue-105231.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-105231.stderr?ref=b7921981d5c53097329cd5ff77a4721626433fe1", "patch": "@@ -0,0 +1,29 @@\n+error[E0072]: recursive types `A` and `B` have infinite size\n+  --> $DIR/issue-105231.rs:2:1\n+   |\n+LL | struct A<T>(B<T>);\n+   | ^^^^^^^^^^^ ---- recursive without indirection\n+LL |\n+LL | struct B<T>(A<A<T>>);\n+   | ^^^^^^^^^^^ ------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n+   |\n+LL ~ struct A<T>(Box<B<T>>);\n+LL |\n+LL ~ struct B<T>(Box<A<A<T>>>);\n+   |\n+\n+error[E0275]: overflow evaluating the requirement `A<A<A<A<A<A<A<...>>>>>>>: Send`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_105231`)\n+note: required because it appears within the type `B<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<A<u8>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-105231.rs:4:8\n+   |\n+LL | struct B<T>(A<A<T>>);\n+   |        ^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0072, E0275.\n+For more information about an error, try `rustc --explain E0072`."}]}