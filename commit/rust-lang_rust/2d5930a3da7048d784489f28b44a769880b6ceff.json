{"sha": "2d5930a3da7048d784489f28b44a769880b6ceff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTkzMGEzZGE3MDQ4ZDc4NDQ4OWYyOGI0NGE3Njk4ODBiNmNlZmY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-07-03T09:48:28Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-07-03T15:29:54Z"}, "message": "Don't lint for predicates generated in macros", "tree": {"sha": "0f0e5ccb35231dc0d387227bf155d74bca74c88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0e5ccb35231dc0d387227bf155d74bca74c88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d5930a3da7048d784489f28b44a769880b6ceff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5930a3da7048d784489f28b44a769880b6ceff", "html_url": "https://github.com/rust-lang/rust/commit/2d5930a3da7048d784489f28b44a769880b6ceff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d5930a3da7048d784489f28b44a769880b6ceff/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a8f03a350e8a392f0aa1c05707b503f549e90b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a8f03a350e8a392f0aa1c05707b503f549e90b", "html_url": "https://github.com/rust-lang/rust/commit/d5a8f03a350e8a392f0aa1c05707b503f549e90b"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "0ef70311fb1cde5a80e9f21b20f21ed511d1093f", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d5930a3da7048d784489f28b44a769880b6ceff/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5930a3da7048d784489f28b44a769880b6ceff/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=2d5930a3da7048d784489f28b44a769880b6ceff", "patch": "@@ -1,4 +1,5 @@\n use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n+use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericBound, Generics, WherePredicate};\n@@ -11,6 +12,8 @@ declare_clippy_lint! {\n     /// **Why is this bad?** Repeating the type for every bound makes the code\n     /// less readable than combining the bounds\n     ///\n+    /// **Known problems:** None.\n+    ///\n     /// **Example:**\n     /// ```rust\n     /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n@@ -53,12 +56,14 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         let mut map = FxHashMap::default();\n         let mut applicability = Applicability::MaybeIncorrect;\n         for bound in gen.where_clause.predicates {\n-            if let WherePredicate::BoundPredicate(ref p) = bound {\n-                if p.bounds.len() as u64 > self.max_trait_bounds {\n-                    return;\n-                }\n+            if_chain! {\n+                if let WherePredicate::BoundPredicate(ref p) = bound;\n+                if p.bounds.len() as u64 <= self.max_trait_bounds;\n+                if !in_macro(p.span);\n                 let h = hash(&p.bounded_ty);\n-                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {\n+                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>());\n+\n+                then {\n                     let mut hint_string = format!(\n                         \"consider combining the bounds: `{}:\",\n                         snippet(cx, p.bounded_ty.span, \"_\")"}, {"sha": "766190f209977fcec1a70bd9f5ae9a4ec467c603", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2d5930a3da7048d784489f28b44a769880b6ceff/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5930a3da7048d784489f28b44a769880b6ceff/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=2d5930a3da7048d784489f28b44a769880b6ceff", "patch": "@@ -37,17 +37,36 @@ where\n }\n \n // Generic distinction (see #4323)\n-pub struct Foo<A>(A);\n-pub struct Bar<A, B> {\n-    a: Foo<A>,\n-    b: Foo<B>,\n+mod issue4323 {\n+    pub struct Foo<A>(A);\n+    pub struct Bar<A, B> {\n+        a: Foo<A>,\n+        b: Foo<B>,\n+    }\n+\n+    impl<A, B> Unpin for Bar<A, B>\n+    where\n+        Foo<A>: Unpin,\n+        Foo<B>: Unpin,\n+    {\n+    }\n }\n \n-impl<A, B> Unpin for Bar<A, B>\n-where\n-    Foo<A>: Unpin,\n-    Foo<B>: Unpin,\n-{\n+// Extern macros shouldn't lint (see #4326)\n+extern crate serde;\n+mod issue4326 {\n+    use serde::{Deserialize, Serialize};\n+\n+    trait Foo {}\n+    impl Foo for String {}\n+\n+    #[derive(Debug, Serialize, Deserialize)]\n+    struct Bar<S>\n+    where\n+        S: Foo,\n+    {\n+        foo: S,\n+    }\n }\n \n fn main() {}"}]}