{"sha": "4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzQ4YTI2OWVjMWUwN2EyNWMyYjhkZDc0ZGVlOGJkYzVkYjU0ZDg=", "commit": {"author": {"name": "chris", "email": "chris", "date": "2018-08-21T22:38:21Z"}, "committer": {"name": "crw5996", "email": "henry11", "date": "2018-08-24T04:58:21Z"}, "message": "Fixed ellipsis bug where rustfmt was creating code that could not be parsed", "tree": {"sha": "1f82a18c1aa58cb2fb733b696b77b5c7a0d88c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f82a18c1aa58cb2fb733b696b77b5c7a0d88c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "html_url": "https://github.com/rust-lang/rust/commit/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/comments", "author": null, "committer": null, "parents": [{"sha": "127a480726fcc1102a4e91eb683f9b358d38dd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a480726fcc1102a4e91eb683f9b358d38dd08", "html_url": "https://github.com/rust-lang/rust/commit/127a480726fcc1102a4e91eb683f9b358d38dd08"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "f70c696f52aa8075d873671af62f831163415118", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "patch": "@@ -369,7 +369,9 @@ fn rewrite_tuple_pat(\n         shape,\n         span,\n         context.config.max_width(),\n-        if add_comma {\n+        if dotdot_pos.is_some() {\n+            Some(SeparatorTactic::Never)\n+        } else if add_comma {\n             Some(SeparatorTactic::Always)\n         } else {\n             None"}, {"sha": "55b5c56e698447539663fb05e4a4e2928d948d66", "filename": "tests/source/issue-2936.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/tests%2Fsource%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/tests%2Fsource%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2936.rs?ref=4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "patch": "@@ -0,0 +1,19 @@\n+struct AStruct {\n+    A: u32,\n+    B: u32,\n+    C: u32,\n+}\n+\n+impl Something for AStruct {\n+    fn a_func() {\n+        match a_val {\n+            ContextualParseError::InvalidMediaRule(ref err) => {\n+                let err: &CStr = match err.kind {\n+                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(..)) => {\n+                        cstr!(\"PEMQExpectedFeatureName\")\n+                    },\n+                };\n+            }\n+        };\n+    }\n+}"}, {"sha": "876050a20f45f5e8a86407c88c6119ce4d6c7bc8", "filename": "tests/target/issue-2936.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/tests%2Ftarget%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8/tests%2Ftarget%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2936.rs?ref=4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "patch": "@@ -0,0 +1,19 @@\n+struct AStruct {\n+    A: u32,\n+    B: u32,\n+    C: u32,\n+}\n+\n+impl Something for AStruct {\n+    fn a_func() {\n+        match a_val {\n+            ContextualParseError::InvalidMediaRule(ref err) => {\n+                let err: &CStr = match err.kind {\n+                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(\n+                        ..\n+                    )) => cstr!(\"PEMQExpectedFeatureName\"),\n+                };\n+            }\n+        };\n+    }\n+}"}]}