{"sha": "900d4d5bda06eb87b5a8a36713720095ef6951e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMGQ0ZDViZGEwNmViODdiNWE4YTM2NzEzNzIwMDk1ZWY2OTUxZTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-30T14:07:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:27Z"}, "message": "Mir typeck Cast for UnsafeFnPtr value", "tree": {"sha": "1951b45fe5c85f7db18993c55a77c537190b9b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1951b45fe5c85f7db18993c55a77c537190b9b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900d4d5bda06eb87b5a8a36713720095ef6951e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900d4d5bda06eb87b5a8a36713720095ef6951e1", "html_url": "https://github.com/rust-lang/rust/commit/900d4d5bda06eb87b5a8a36713720095ef6951e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900d4d5bda06eb87b5a8a36713720095ef6951e1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d56131e831baf6053b5ae3021d11f3b622c3862", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d56131e831baf6053b5ae3021d11f3b622c3862", "html_url": "https://github.com/rust-lang/rust/commit/7d56131e831baf6053b5ae3021d11f3b622c3862"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "0c481f964a793268366cc01570d119b60751b5ed", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/900d4d5bda06eb87b5a8a36713720095ef6951e1/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900d4d5bda06eb87b5a8a36713720095ef6951e1/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=900d4d5bda06eb87b5a8a36713720095ef6951e1", "patch": "@@ -1196,11 +1196,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n+                    CastKind::UnsafeFnPointer => {\n+                        let ty_fn_ptr_from = tcx.safe_to_unsafe_fn_ty(op.ty(mir, tcx).fn_sig(tcx));\n+\n+                        if let Err(terr) = self.eq_types(ty_fn_ptr_from, ty, location.at_self()) {\n+                            span_mirbug!(self, \"\", \"casting {:?}\", terr);\n+                        }\n+                    }\n+\n                     CastKind::ClosureFnPointer |\n-                    CastKind::UnsafeFnPointer |\n                     CastKind::Misc |\n                     CastKind::Unsize => {}\n-\n                 }\n             }\n "}, {"sha": "701a7c6b056a6245961062f4e9e4e292bc6ede52", "filename": "src/test/compile-fail/mir_check_cast_unsafe_fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/900d4d5bda06eb87b5a8a36713720095ef6951e1/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900d4d5bda06eb87b5a8a36713720095ef6951e1/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs?ref=900d4d5bda06eb87b5a8a36713720095ef6951e1", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir -Z nll\n+\n+#![allow(dead_code)]\n+\n+fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n+    // Here the NLL checker must relate the types in `f` to the types\n+    // in `g`. These are related via the `UnsafeFnPointer` cast.\n+    let g: unsafe fn(_) -> _ = f;\n+    //~^ WARNING not reporting region error due to -Znll\n+    unsafe { g(input) }\n+    //~^ ERROR free region `'_#1r` does not outlive free region `'static`\n+}\n+\n+fn main() {}"}]}