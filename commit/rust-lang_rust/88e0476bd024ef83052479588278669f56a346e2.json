{"sha": "88e0476bd024ef83052479588278669f56a346e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTA0NzZiZDAyNGVmODMwNTI0Nzk1ODgyNzg2NjlmNTZhMzQ2ZTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-27T23:53:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-27T23:59:30Z"}, "message": "Add some counters to metadata.", "tree": {"sha": "eca2ea61aebca73a7e4beabb15b28ba0a456850a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca2ea61aebca73a7e4beabb15b28ba0a456850a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e0476bd024ef83052479588278669f56a346e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e0476bd024ef83052479588278669f56a346e2", "html_url": "https://github.com/rust-lang/rust/commit/88e0476bd024ef83052479588278669f56a346e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e0476bd024ef83052479588278669f56a346e2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fafb63d5eeed0194d7cf56b6328823114949b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fafb63d5eeed0194d7cf56b6328823114949b29", "html_url": "https://github.com/rust-lang/rust/commit/9fafb63d5eeed0194d7cf56b6328823114949b29"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "56d2cc86aa76368acc3a953ccfd56509eb3a348c", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88e0476bd024ef83052479588278669f56a346e2/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e0476bd024ef83052479588278669f56a346e2/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=88e0476bd024ef83052479588278669f56a346e2", "patch": "@@ -42,6 +42,7 @@ const borrowck_note_loan: uint = 4096;\n const no_landing_pads: uint = 8192;\n const debug_llvm: uint = 16384;\n const count_type_sizes: uint = 32768;\n+const meta_stats: uint = 65536;\n \n fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"ppregions\", ~\"prettyprint regions with \\\n@@ -66,7 +67,8 @@ fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n       no_landing_pads),\n      (~\"debug-llvm\", ~\"enable debug output from LLVM\", debug_llvm),\n      (~\"count-type-sizes\", ~\"count the sizes of aggregate types\",\n-      count_type_sizes)\n+      count_type_sizes),\n+     (~\"meta-stats\", ~\"gather metadata statistics\", meta_stats)\n     ]\n }\n \n@@ -198,6 +200,7 @@ impl session {\n     fn count_type_sizes() -> bool { self.debugging_opt(count_type_sizes) }\n     fn time_llvm_passes() -> bool { self.debugging_opt(time_llvm_passes) }\n     fn trans_stats() -> bool { self.debugging_opt(trans_stats) }\n+    fn meta_stats() -> bool { self.debugging_opt(meta_stats) }\n     fn no_asm_comments() -> bool { self.debugging_opt(no_asm_comments) }\n     fn no_verify() -> bool { self.debugging_opt(no_verify) }\n     fn trace() -> bool { self.debugging_opt(trace) }"}, {"sha": "5764e5ace59ea54466b9a170079c25083dd6b88c", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/88e0476bd024ef83052479588278669f56a346e2/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e0476bd024ef83052479588278669f56a346e2/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=88e0476bd024ef83052479588278669f56a346e2", "patch": "@@ -54,9 +54,23 @@ type encode_parms = {\n     encode_inlined_item: encode_inlined_item\n };\n \n+type stats = {\n+    mut inline_bytes: uint,\n+    mut attr_bytes: uint,\n+    mut dep_bytes: uint,\n+    mut item_bytes: uint,\n+    mut index_bytes: uint,\n+    mut zero_bytes: uint,\n+    mut total_bytes: uint,\n+\n+    mut n_inlines: uint\n+};\n+\n enum encode_ctxt = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n+    buf: io::MemBuffer,\n+    stats: stats,\n     reachable: hashmap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n     reexports2: middle::resolve3::ExportMap2,\n@@ -1072,9 +1086,21 @@ fn encode_hash(ebml_w: ebml::writer, hash: ~str) {\n }\n \n fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n+    let buf = io::mem_buffer();\n+    let stats =\n+        {mut inline_bytes: 0,\n+         mut attr_bytes: 0,\n+         mut dep_bytes: 0,\n+         mut item_bytes: 0,\n+         mut index_bytes: 0,\n+         mut zero_bytes: 0,\n+         mut total_bytes: 0,\n+         mut n_inlines: 0};\n     let ecx: @encode_ctxt = @encode_ctxt({\n         diag: parms.diag,\n         tcx: parms.tcx,\n+        buf: buf,\n+        stats: stats,\n         reachable: parms.reachable,\n         reexports: parms.reexports,\n         reexports2: parms.reexports2,\n@@ -1086,24 +1112,55 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n         type_abbrevs: ty::new_ty_hash()\n      });\n \n-    let buf = io::mem_buffer();\n     let buf_w = io::mem_buffer_writer(buf);\n     let ebml_w = ebml::writer(buf_w);\n \n     encode_hash(ebml_w, ecx.link_meta.extras_hash);\n \n+    let mut i = buf.pos;\n     let crate_attrs = synthesize_crate_attrs(ecx, crate);\n     encode_attributes(ebml_w, crate_attrs);\n+    ecx.stats.attr_bytes = buf.pos - i;\n \n+    i = buf.pos;\n     encode_crate_deps(ecx, ebml_w, ecx.cstore);\n+    ecx.stats.dep_bytes = buf.pos - i;\n \n     // Encode and index the items.\n     ebml_w.start_tag(tag_items);\n+    i = buf.pos;\n     let items_index = encode_info_for_items(ecx, ebml_w, crate);\n+    ecx.stats.item_bytes = buf.pos - i;\n+\n+    i = buf.pos;\n     let items_buckets = create_index(items_index, hash_node_id);\n     encode_index(ebml_w, items_buckets, write_int);\n+    ecx.stats.index_bytes = buf.pos - i;\n     ebml_w.end_tag();\n \n+    ecx.stats.total_bytes = buf.pos;\n+\n+    if (parms.tcx.sess.meta_stats()) {\n+\n+        do buf.buf.borrow |v| {\n+            do v.each |e| {\n+                if e == 0 {\n+                    ecx.stats.zero_bytes += 1;\n+                }\n+                true\n+            }\n+        }\n+\n+        io::println(\"metadata stats:\");\n+        io::println(fmt!(\"    inline bytes: %u\", ecx.stats.inline_bytes));\n+        io::println(fmt!(\" attribute bytes: %u\", ecx.stats.attr_bytes));\n+        io::println(fmt!(\"       dep bytes: %u\", ecx.stats.dep_bytes));\n+        io::println(fmt!(\"      item bytes: %u\", ecx.stats.item_bytes));\n+        io::println(fmt!(\"     index bytes: %u\", ecx.stats.index_bytes));\n+        io::println(fmt!(\"      zero bytes: %u\", ecx.stats.zero_bytes));\n+        io::println(fmt!(\"     total bytes: %u\", ecx.stats.total_bytes));\n+    }\n+\n     // Pad this, since something (LLVM, presumably) is cutting off the\n     // remaining % 4 bytes.\n     buf_w.write(&[0u8, 0u8, 0u8, 0u8]);"}]}