{"sha": "387efd459c0ad3db7af15f1a573057b8587f9748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4N2VmZDQ1OWMwYWQzZGI3YWYxNWYxYTU3MzA1N2I4NTg3Zjk3NDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T03:11:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T03:11:10Z"}, "message": "Merge branch 'pr-1945'", "tree": {"sha": "cfceec99154b5dfe9939e820a0d1c55da2a84c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfceec99154b5dfe9939e820a0d1c55da2a84c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/387efd459c0ad3db7af15f1a573057b8587f9748", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlnJxU4ACgkQO79NPi73\nn5iy1xAA1klk1xQgtrgwVm++f/Rqo7pugfEzyvxeq9zkqggU3f9kizxU+qdJWDov\nM1pg3gxyZPqA2GArpdaSOsYxcQ95q8gB665OTYL63Z97TZGyuKjTzMkYpHqvuOJZ\npsgGYcRj6iD5lJ+p2MypXN+WQr4oFkPaTaSDPLk9b5vOWNWgDAJHkWVbiLOpCnDJ\nHPdmYExSm8WJbmKUChe2WUBo49XRy0bnnW26AvM1Dj6yiRytI7I8kNpTrrcKyPKk\ngEjaxyDHROE+Vj4gjIMmi8ME6RjnYEspR5XM4ZbEtSSq4ATVAFSfsdWail1NZbvj\nVQaN6a5QRrafq+8BQL4mdUj0pFyLfDbRCuc0T9+ApnprEWQ2l7KVLAt9meDauZlk\ncbToMYy3oOo39S5YhoP8X8dOIIzeSmDdRgUs1DOv7TUh0JbH9Knjz+YhTKqqfNK7\ntuRpcNVjBCsMpDJ62cNctBSsePU60rQpHzd1cdJpF9ZQuMg2o2/idr7tXkJtOS2k\nlh83r28bmaje4QCvHmeUK2fZiUgtzC8lrEBsrg8NoZpuRmkcPsXB3fxF0AgcG5+G\n7JK41hjWcipIKPZNEk7jPk4FolKzVPWJ/MZGU1TQFO4dNNZtiUTCGaSOiAEZFHIY\nn8n+ThidYtP4rVDUahRNzjB8ILHfQqdQ3g7XUPEqWZwueRSDmwM=\n=ET7K\n-----END PGP SIGNATURE-----", "payload": "tree cfceec99154b5dfe9939e820a0d1c55da2a84c02\nparent b1302a07423914d623cb2e664ad2405274df5582\nparent d337c7f9270f6a414ff9c51b6e81e919222488f1\nauthor Manish Goregaokar <manishsmail@gmail.com> 1506395467 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1506395470 -0700\n\nMerge branch 'pr-1945'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/387efd459c0ad3db7af15f1a573057b8587f9748", "html_url": "https://github.com/rust-lang/rust/commit/387efd459c0ad3db7af15f1a573057b8587f9748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/387efd459c0ad3db7af15f1a573057b8587f9748/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1302a07423914d623cb2e664ad2405274df5582", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1302a07423914d623cb2e664ad2405274df5582", "html_url": "https://github.com/rust-lang/rust/commit/b1302a07423914d623cb2e664ad2405274df5582"}, {"sha": "d337c7f9270f6a414ff9c51b6e81e919222488f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d337c7f9270f6a414ff9c51b6e81e919222488f1", "html_url": "https://github.com/rust-lang/rust/commit/d337c7f9270f6a414ff9c51b6e81e919222488f1"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "c95d96c2c3f48247549b17a342c4ebbefd774a7f", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=387efd459c0ad3db7af15f1a573057b8587f9748", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## Trunk\n+* New lint: [`mut_range_bound`]\n+\n ## 0.0.164\n * Update to *rustc 1.22.0-nightly (6c476ce46 2017-09-25)*\n * New lint: [`int_plus_one`]\n@@ -561,6 +564,7 @@ All notable changes to this project will be documented in this file.\n [`modulo_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#modulo_one\n [`mut_from_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_from_ref\n [`mut_mut`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_mut\n+[`mut_range_bound`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_range_bound\n [`mutex_atomic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#naive_bytecount"}, {"sha": "b840c3ddd02e4fba6b9a180a949a9a6dacb6e1cf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=387efd459c0ad3db7af15f1a573057b8587f9748", "patch": "@@ -449,6 +449,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::MANUAL_MEMCPY,\n+        loops::MUT_RANGE_BOUND,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,"}, {"sha": "a0300530a59d2eefa42bb81bf090d765d039d36b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 113, "deletions": 1, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=387efd459c0ad3db7af15f1a573057b8587f9748", "patch": "@@ -2,16 +2,22 @@ use itertools::Itertools;\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n+use rustc::hir::def_id; \n use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::map::Node::{NodeBlock, NodeExpr, NodeStmt};\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n+// use rustc::middle::region::CodeExtent;\n+use rustc::middle::expr_use_visitor::*;\n+use rustc::middle::mem_categorization::Categorization;\n+use rustc::middle::mem_categorization::cmt;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::{Subst, Substs};\n use rustc_const_eval::ConstContext;\n use std::collections::{HashMap, HashSet};\n use syntax::ast;\n+use syntax::codemap::Span;\n use utils::sugg;\n use utils::const_to_u64;\n \n@@ -328,6 +334,14 @@ declare_lint! {\n     \"any loop that will always `break` or `return`\"\n }\n \n+/// TODO: add documentation\n+\n+declare_lint! {\n+    pub MUT_RANGE_BOUND,\n+    Warn,\n+    \"for loop over a range where one of the bounds is a mutable variable\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -348,7 +362,8 @@ impl LintPass for Pass {\n             EMPTY_LOOP,\n             WHILE_LET_ON_ITERATOR,\n             FOR_KV_MAP,\n-            NEVER_LOOP\n+            NEVER_LOOP, \n+            MUT_RANGE_BOUND\n         )\n     }\n }\n@@ -605,6 +620,7 @@ fn check_for_loop<'a, 'tcx>(\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n+    check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n@@ -1294,6 +1310,102 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n     }\n }\n \n+struct MutateDelegate {\n+    node_id_low: Option<NodeId>,\n+    node_id_high: Option<NodeId>,\n+    span_low: Option<Span>,\n+    span_high: Option<Span>,\n+}\n+\n+impl<'tcx> Delegate<'tcx> for MutateDelegate {\n+    fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {\n+    }\n+  \n+    fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {\n+    }\n+\n+    fn consume_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: ConsumeMode) {\n+    }\n+\n+    fn borrow(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n+        if let ty::BorrowKind::MutBorrow = bk {\n+            if let Categorization::Local(id) = cmt.cat {\n+                if Some(id) == self.node_id_low {\n+                    self.span_low = Some(sp)\n+                }\n+                if Some(id) == self.node_id_high {\n+                    self.span_high = Some(sp)\n+                }\n+            }\n+        }\n+    }\n+\n+    fn mutate(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: MutateMode) {\n+        if let Categorization::Local(id) = cmt.cat {\n+            if Some(id) == self.node_id_low {\n+                self.span_low = Some(sp)\n+            }\n+            if Some(id) == self.node_id_high {\n+                self.span_high = Some(sp)\n+            }\n+        }\n+    }\n+\n+    fn decl_without_init(&mut self, _: NodeId, _: Span) {\n+    }\n+}\n+\n+impl<'tcx> MutateDelegate {\n+    fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n+        (self.span_low, self.span_high)\n+    }\n+}\n+\n+fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr) {\n+    if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(arg) {\n+        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n+        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n+            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n+            mut_warn_with_span(cx, span_low);\n+            mut_warn_with_span(cx, span_high);\n+        }\n+    }\n+}\n+\n+fn mut_warn_with_span(cx: &LateContext, span: Option<Span>) {\n+    if let Some(sp) = span {\n+        span_lint(cx, MUT_RANGE_BOUND, sp, \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\");\n+    }\n+}\n+\n+fn check_for_mutability(cx: &LateContext, bound: &Expr) -> Option<NodeId> {\n+    if_let_chain! {[\n+        let ExprPath(ref qpath) = bound.node,\n+        let QPath::Resolved(None, _) = *qpath,\n+    ], {\n+        let def = cx.tables.qpath_def(qpath, bound.hir_id);\n+        if let Def::Local(node_id) = def {\n+            let node_str = cx.tcx.hir.get(node_id);\n+            if_let_chain! {[\n+                let map::Node::NodeBinding(pat) = node_str,\n+                let PatKind::Binding(bind_ann, _, _, _) = pat.node,\n+                let BindingAnnotation::Mutable = bind_ann,\n+            ], {\n+                return Some(node_id);\n+            }}\n+        }\n+    }}\n+    None\n+}\n+\n+fn check_for_mutation(cx: &LateContext, body: &Expr, bound_ids: &[Option<NodeId>]) -> (Option<Span>, Option<Span>) {\n+    let mut delegate = MutateDelegate { node_id_low: bound_ids[0], node_id_high: bound_ids[1], span_low: None, span_high: None };\n+    let def_id = def_id::DefId::local(body.hir_id.owner);\n+    let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n+    ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables).walk_expr(body);\n+    delegate.mutation_span()\n+}\n+\n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`.\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {"}, {"sha": "fdf917d51588cf1dc8e1b99aab86370de80e8355", "filename": "mut_range_bound", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/mut_range_bound", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/mut_range_bound", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mut_range_bound?ref=387efd459c0ad3db7af15f1a573057b8587f9748"}, {"sha": "835ceeedc94d1056a5c0ee0f8523dcf87be69c36", "filename": "tests/ui/mut_range_bound.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/tests%2Fui%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/tests%2Fui%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.rs?ref=387efd459c0ad3db7af15f1a573057b8587f9748", "patch": "@@ -0,0 +1,56 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+\n+fn main() {\n+    mut_range_bound_upper();\n+    mut_range_bound_lower();\n+    mut_range_bound_both();\n+    mut_range_bound_no_mutation();\n+    immut_range_bound();\n+    mut_borrow_range_bound();\n+    immut_borrow_range_bound();\n+}\n+\n+fn mut_range_bound_upper() {\n+    let mut m = 4;\n+    for i in 0..m { m = 5; } // warning\n+}\n+\n+fn mut_range_bound_lower() {\n+    let mut m = 4;\n+    for i in m..10 { m *= 2; } // warning\n+}\n+\n+fn mut_range_bound_both() {\n+    let mut m = 4;\n+    let mut n = 6;\n+    for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+}\n+\n+fn mut_range_bound_no_mutation() {\n+    let mut m = 4;\n+    for i in 0..m { continue; } // no warning\n+}\n+\n+fn mut_borrow_range_bound() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        let n = &mut m;  // warning\n+        *n += 1;\n+    }\n+}\n+\n+fn immut_borrow_range_bound() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        let n = &m;   // should be no warning?\n+    }\n+}\n+\n+\n+fn immut_range_bound() {\n+    let m = 4;\n+    for i in 0..m { continue; } // no warning\n+}"}, {"sha": "d7be7ae1e6fc89c07fa9146791fc8df80a31bcb9", "filename": "tests/ui/mut_range_bound.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/387efd459c0ad3db7af15f1a573057b8587f9748/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/387efd459c0ad3db7af15f1a573057b8587f9748/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=387efd459c0ad3db7af15f1a573057b8587f9748", "patch": "@@ -0,0 +1,34 @@\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:18:21\n+   |\n+18 |     for i in 0..m { m = 5; } // warning\n+   |                     ^^^^^\n+   |\n+   = note: `-D mut-range-bound` implied by `-D warnings`\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:23:22\n+   |\n+23 |     for i in m..10 { m *= 2; } // warning\n+   |                      ^^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:29:21\n+   |\n+29 |     for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+   |                     ^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:29:28\n+   |\n+29 |     for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+   |                            ^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:40:22\n+   |\n+40 |         let n = &mut m;  // warning\n+   |                      ^\n+\n+error: aborting due to 5 previous errors\n+"}]}