{"sha": "b1aae607c56d26333589dc45daa20859950bf6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYWFlNjA3YzU2ZDI2MzMzNTg5ZGM0NWRhYTIwODU5OTUwYmY2ZTE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-03T20:38:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-13T07:16:02Z"}, "message": "Tweak naming and ordering in `StringReader::bump()`.\n\nThis patch removes the \"old\"/\"new\" names in favour of \"foo\"/\"next_foo\",\nwhich matches the field names.\n\nIt also moves the setting of `self.{ch,pos,next_pos}` in the common case\nto the end, so that the meaning of \"foo\"/\"next_foo\" is consistent until\nthe end.", "tree": {"sha": "5176bd1545845ef82e9d27fb88be013789e3514d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5176bd1545845ef82e9d27fb88be013789e3514d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1aae607c56d26333589dc45daa20859950bf6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1aae607c56d26333589dc45daa20859950bf6e1", "html_url": "https://github.com/rust-lang/rust/commit/b1aae607c56d26333589dc45daa20859950bf6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1aae607c56d26333589dc45daa20859950bf6e1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4465b2fbf3487e8f45e2eee4da187776574febec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4465b2fbf3487e8f45e2eee4da187776574febec", "html_url": "https://github.com/rust-lang/rust/commit/4465b2fbf3487e8f45e2eee4da187776574febec"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "a24af857af1425c593bad3f0d5ef1674c98b0d38", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b1aae607c56d26333589dc45daa20859950bf6e1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1aae607c56d26333589dc45daa20859950bf6e1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b1aae607c56d26333589dc45daa20859950bf6e1", "patch": "@@ -442,36 +442,35 @@ impl<'a> StringReader<'a> {\n     /// Advance the StringReader by one character. If a newline is\n     /// discovered, add it to the FileMap's list of line start offsets.\n     pub fn bump(&mut self) {\n-        let new_pos = self.next_pos;\n-        let new_byte_offset = self.byte_offset(new_pos).to_usize();\n+        let next_byte_offset = self.byte_offset(self.next_pos).to_usize();\n         let end = self.terminator.map_or(self.source_text.len(), |t| {\n             self.byte_offset(t).to_usize()\n         });\n-        if new_byte_offset < end {\n-            let old_ch_is_newline = self.ch.unwrap() == '\\n';\n-            let new_ch = char_at(&self.source_text, new_byte_offset);\n-            let new_ch_len = new_ch.len_utf8();\n-\n-            self.ch = Some(new_ch);\n-            self.pos = new_pos;\n-            self.next_pos = new_pos + Pos::from_usize(new_ch_len);\n-            if old_ch_is_newline {\n+        if next_byte_offset < end {\n+            let next_ch = char_at(&self.source_text, next_byte_offset);\n+            let next_ch_len = next_ch.len_utf8();\n+\n+            if self.ch.unwrap() == '\\n' {\n                 if self.save_new_lines_and_multibyte {\n-                    self.filemap.next_line(self.pos);\n+                    self.filemap.next_line(self.next_pos);\n                 }\n                 self.col = CharPos(0);\n             } else {\n                 self.col = self.col + CharPos(1);\n             }\n-            if new_ch_len > 1 {\n+            if next_ch_len > 1 {\n                 if self.save_new_lines_and_multibyte {\n-                    self.filemap.record_multibyte_char(self.pos, new_ch_len);\n+                    self.filemap.record_multibyte_char(self.next_pos, next_ch_len);\n                 }\n             }\n-            self.filemap.record_width(self.pos, new_ch);\n+            self.filemap.record_width(self.next_pos, next_ch);\n+\n+            self.ch = Some(next_ch);\n+            self.pos = self.next_pos;\n+            self.next_pos = self.next_pos + Pos::from_usize(next_ch_len);\n         } else {\n             self.ch = None;\n-            self.pos = new_pos;\n+            self.pos = self.next_pos;\n         }\n     }\n "}]}