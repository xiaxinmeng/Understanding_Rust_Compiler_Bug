{"sha": "5397f2e43647d1a78c3a4637cdcb398120b603f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTdmMmU0MzY0N2QxYTc4YzNhNDYzN2NkY2IzOTgxMjBiNjAzZjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-31T09:53:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-31T09:53:37Z"}, "message": "when using MIRI_LOG, avoid logging for what rustc does before miri gets started", "tree": {"sha": "b87d7f5b3c6e9c94709e4f256cd19b530d0bc791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87d7f5b3c6e9c94709e4f256cd19b530d0bc791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5397f2e43647d1a78c3a4637cdcb398120b603f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5397f2e43647d1a78c3a4637cdcb398120b603f6", "html_url": "https://github.com/rust-lang/rust/commit/5397f2e43647d1a78c3a4637cdcb398120b603f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5397f2e43647d1a78c3a4637cdcb398120b603f6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6a68731e670aeda7cdabc1478e3fd1c34472b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6a68731e670aeda7cdabc1478e3fd1c34472b0", "html_url": "https://github.com/rust-lang/rust/commit/7a6a68731e670aeda7cdabc1478e3fd1c34472b0"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "6d0f0b5f6a23070a7171e7753ab1a4df4d1c94cb", "filename": "src/bin/miri.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5397f2e43647d1a78c3a4637cdcb398120b603f6/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f2e43647d1a78c3a4637cdcb398120b603f6/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=5397f2e43647d1a78c3a4637cdcb398120b603f6", "patch": "@@ -107,6 +107,7 @@ fn after_analysis<'a, 'tcx>(\n     state: &mut CompileState<'a, 'tcx>,\n     validate: bool,\n ) {\n+    init_late_loggers();\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n@@ -150,16 +151,25 @@ fn after_analysis<'a, 'tcx>(\n     }\n }\n \n-fn init_loggers() {\n+fn init_early_loggers() {\n     // Notice that our `extern crate log` is NOT the same as rustc's!  So we have to initialize\n-    // them both.\n-    // First, miri.\n+    // them both.  We always initialize miri early.\n     let env = env_logger::Env::new().filter(\"MIRI_LOG\").write_style(\"MIRI_LOG_STYLE\");\n     env_logger::init_from_env(env);\n-    // Now, change the RUST_LOG env var to control rustc's logger.\n-    // If MIRI_LOG is set and RUST_LOG is not, set RUST_LOG.\n+    // We only initialize rustc if the env var is set (so the user asked for it).\n+    // If it is not set, we avoid initializing now so that we can initialize\n+    // later with our custom settings, and NOT log anything for what happens before\n+    // miri gets started.\n+    if env::var(\"RUST_LOG\").is_ok() {\n+        rustc_driver::init_rustc_env_logger();\n+    }\n+}\n+\n+fn init_late_loggers() {\n+    // Initializing loggers right before we start evaluation.  We overwrite the RUST_LOG\n+    // env var if it is not set, control it based on MIRI_LOG.\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n-        if env::var(\"RUST_LOG\") == Err(env::VarError::NotPresent) {\n+        if env::var(\"RUST_LOG\").is_err() {\n             // We try to be a bit clever here: If MIRI_LOG is just a single level\n             // used for everything, we only apply it to the parts of rustc that are\n             // CTFE-related.  Only if MIRI_LOG contains `module=level`, we just\n@@ -172,9 +182,9 @@ fn init_loggers() {\n                 env::set_var(\"RUST_LOG\",\n                     &format!(\"rustc::mir::interpret={0},rustc_mir::interpret={0}\", var));\n             }\n+            rustc_driver::init_rustc_env_logger();\n         }\n     }\n-    rustc_driver::init_rustc_env_logger();\n }\n \n fn find_sysroot() -> String {\n@@ -199,7 +209,7 @@ fn find_sysroot() -> String {\n }\n \n fn main() {\n-    init_loggers();\n+    init_early_loggers();\n     let mut args: Vec<String> = std::env::args().collect();\n \n     let sysroot_flag = String::from(\"--sysroot\");"}]}