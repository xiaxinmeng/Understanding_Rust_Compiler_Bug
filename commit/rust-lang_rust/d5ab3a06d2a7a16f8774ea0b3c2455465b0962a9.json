{"sha": "d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "node_id": "C_kwDOAAsO6NoAKGQ1YWIzYTA2ZDJhN2ExNmY4Nzc0ZWEwYjNjMjQ1NTQ2NWIwOTYyYTk", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-02-19T01:42:16Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-05-05T23:05:03Z"}, "message": "Add test cases for #104802.", "tree": {"sha": "80489c529c496505c9283777e68771ad15114d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80489c529c496505c9283777e68771ad15114d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "html_url": "https://github.com/rust-lang/rust/commit/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4f22b11cad95d54dbc59d6613c4df767e7de64", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f22b11cad95d54dbc59d6613c4df767e7de64", "html_url": "https://github.com/rust-lang/rust/commit/4f4f22b11cad95d54dbc59d6613c4df767e7de64"}], "stats": {"total": 131, "additions": 120, "deletions": 11}, "files": [{"sha": "78dbb1a299e20e41157e1ab793dce77bca50444f", "filename": "tests/ui/layout/debug.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9/tests%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9/tests%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fdebug.rs?ref=d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "patch": "@@ -1,8 +1,9 @@\n // normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n-#![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n+#![feature(never_type, rustc_attrs, type_alias_impl_trait, repr_simd)]\n #![crate_type = \"lib\"]\n \n #[rustc_layout(debug)]\n+#[derive(Copy, Clone)]\n enum E { Foo, Bar(!, i32, i32) } //~ ERROR: layout_of\n \n #[rustc_layout(debug)]\n@@ -35,6 +36,26 @@ pub union Y { //~ ERROR: layout_of\n     a: [u16; 0],\n }\n \n+#[rustc_layout(debug)]\n+#[repr(packed(1))]\n+union P1 { x: u32 } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(packed(1))]\n+union P2 { x: (u32, u32) } //~ ERROR: layout_of\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct F32x4(f32, f32, f32, f32);\n+\n+#[rustc_layout(debug)]\n+#[repr(packed(1))]\n+union P3 { x: F32x4 } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(packed(1))]\n+union P4 { x: E } //~ ERROR: layout_of\n+\n #[rustc_layout(debug)]\n type X = std::mem::MaybeUninit<u8>; //~ ERROR: layout_of\n "}, {"sha": "c296c2ba797c7d72fe6c37024aa003dd8c1083cc", "filename": "tests/ui/layout/debug.stderr", "status": "modified", "additions": 98, "deletions": 10, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9/tests%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9/tests%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fdebug.stderr?ref=d5ab3a06d2a7a16f8774ea0b3c2455465b0962a9", "patch": "@@ -81,7 +81,7 @@ error: layout_of(E) = Layout {\n                ],\n            },\n        }\n-  --> $DIR/debug.rs:6:1\n+  --> $DIR/debug.rs:7:1\n    |\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^\n@@ -125,7 +125,7 @@ error: layout_of(S) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:9:1\n+  --> $DIR/debug.rs:10:1\n    |\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^\n@@ -147,7 +147,7 @@ error: layout_of(U) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:12:1\n+  --> $DIR/debug.rs:13:1\n    |\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^\n@@ -276,7 +276,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                ],\n            },\n        }\n-  --> $DIR/debug.rs:15:1\n+  --> $DIR/debug.rs:16:1\n    |\n LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^\n@@ -302,7 +302,7 @@ error: layout_of(i32) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:18:1\n+  --> $DIR/debug.rs:19:1\n    |\n LL | type T = impl std::fmt::Debug;\n    | ^^^^^^\n@@ -324,7 +324,7 @@ error: layout_of(V) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:21:1\n+  --> $DIR/debug.rs:22:1\n    |\n LL | pub union V {\n    | ^^^^^^^^^^^\n@@ -346,7 +346,7 @@ error: layout_of(W) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:27:1\n+  --> $DIR/debug.rs:28:1\n    |\n LL | pub union W {\n    | ^^^^^^^^^^^\n@@ -368,11 +368,99 @@ error: layout_of(Y) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:33:1\n+  --> $DIR/debug.rs:34:1\n    |\n LL | pub union Y {\n    | ^^^^^^^^^^^\n \n+error: layout_of(P1) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               1,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:41:1\n+   |\n+LL | union P1 { x: u32 }\n+   | ^^^^^^^^\n+\n+error: layout_of(P2) = Layout {\n+           size: Size(8 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               1,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:45:1\n+   |\n+LL | union P2 { x: (u32, u32) }\n+   | ^^^^^^^^\n+\n+error: layout_of(P3) = Layout {\n+           size: Size(16 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               1,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:53:1\n+   |\n+LL | union P3 { x: F32x4 }\n+   | ^^^^^^^^\n+\n+error: layout_of(P4) = Layout {\n+           size: Size(12 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               1,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:57:1\n+   |\n+LL | union P4 { x: E }\n+   | ^^^^^^^^\n+\n error: layout_of(std::mem::MaybeUninit<u8>) = Layout {\n            size: Size(1 bytes),\n            align: AbiAndPrefAlign {\n@@ -395,10 +483,10 @@ error: layout_of(std::mem::MaybeUninit<u8>) = Layout {\n                index: 0,\n            },\n        }\n-  --> $DIR/debug.rs:39:1\n+  --> $DIR/debug.rs:60:1\n    |\n LL | type X = std::mem::MaybeUninit<u8>;\n    | ^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 13 previous errors\n "}]}