{"sha": "4de8c0980e4cd218e6b681d6957845d37f6dea10", "node_id": "C_kwDOAAsO6NoAKDRkZThjMDk4MGU0Y2QyMThlNmI2ODFkNjk1Nzg0NWQzN2Y2ZGVhMTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T10:00:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T10:00:43Z"}, "message": "Auto merge of #14857 - Veykril:perf, r=Veykril\n\ninternal: Shrink ProcMacroExpander from 8 to 4 bytes", "tree": {"sha": "bd38e7d2a5e848e51bba4718edcc0cc58dccaaaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd38e7d2a5e848e51bba4718edcc0cc58dccaaaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de8c0980e4cd218e6b681d6957845d37f6dea10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de8c0980e4cd218e6b681d6957845d37f6dea10", "html_url": "https://github.com/rust-lang/rust/commit/4de8c0980e4cd218e6b681d6957845d37f6dea10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de8c0980e4cd218e6b681d6957845d37f6dea10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb78059be4d090571bd70de57831f84eee5be678", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb78059be4d090571bd70de57831f84eee5be678", "html_url": "https://github.com/rust-lang/rust/commit/bb78059be4d090571bd70de57831f84eee5be678"}, {"sha": "14dc1ac3bf763685e56366c9ad0ae7f60536122b", "url": "https://api.github.com/repos/rust-lang/rust/commits/14dc1ac3bf763685e56366c9ad0ae7f60536122b", "html_url": "https://github.com/rust-lang/rust/commit/14dc1ac3bf763685e56366c9ad0ae7f60536122b"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "c9539210abf657cf7bd55a6be2a8b65c281e186a", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4de8c0980e4cd218e6b681d6957845d37f6dea10/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de8c0980e4cd218e6b681d6957845d37f6dea10/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=4de8c0980e4cd218e6b681d6957845d37f6dea10", "patch": "@@ -7,20 +7,23 @@ use crate::{db::ExpandDatabase, tt, ExpandError, ExpandResult};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n-    proc_macro_id: Option<ProcMacroId>,\n+    proc_macro_id: ProcMacroId,\n }\n \n+const DUMMY_ID: u32 = !0;\n+\n impl ProcMacroExpander {\n     pub fn new(proc_macro_id: ProcMacroId) -> Self {\n-        Self { proc_macro_id: Some(proc_macro_id) }\n+        assert_ne!(proc_macro_id.0, DUMMY_ID);\n+        Self { proc_macro_id }\n     }\n \n     pub fn dummy() -> Self {\n-        Self { proc_macro_id: None }\n+        Self { proc_macro_id: ProcMacroId(DUMMY_ID) }\n     }\n \n     pub fn is_dummy(&self) -> bool {\n-        self.proc_macro_id.is_none()\n+        self.proc_macro_id.0 == DUMMY_ID\n     }\n \n     pub fn expand(\n@@ -32,7 +35,10 @@ impl ProcMacroExpander {\n         attr_arg: Option<&tt::Subtree>,\n     ) -> ExpandResult<tt::Subtree> {\n         match self.proc_macro_id {\n-            Some(id) => {\n+            ProcMacroId(DUMMY_ID) => {\n+                ExpandResult::new(tt::Subtree::empty(), ExpandError::UnresolvedProcMacro(def_crate))\n+            }\n+            ProcMacroId(id) => {\n                 let proc_macros = db.proc_macros();\n                 let proc_macros = match proc_macros.get(&def_crate) {\n                     Some(Ok(proc_macros)) => proc_macros,\n@@ -44,13 +50,13 @@ impl ProcMacroExpander {\n                         );\n                     }\n                 };\n-                let proc_macro = match proc_macros.get(id.0 as usize) {\n+                let proc_macro = match proc_macros.get(id as usize) {\n                     Some(proc_macro) => proc_macro,\n                     None => {\n                         never!(\n                             \"Proc macro index out of bounds: the length is {} but the index is {}\",\n                             proc_macros.len(),\n-                            id.0\n+                            id\n                         );\n                         return ExpandResult::new(\n                             tt::Subtree::empty(),\n@@ -81,9 +87,6 @@ impl ProcMacroExpander {\n                     },\n                 }\n             }\n-            None => {\n-                ExpandResult::new(tt::Subtree::empty(), ExpandError::UnresolvedProcMacro(def_crate))\n-            }\n         }\n     }\n }"}, {"sha": "af37206eadc27862b7a1ad9dd72494adc263528c", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de8c0980e4cd218e6b681d6957845d37f6dea10/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de8c0980e4cd218e6b681d6957845d37f6dea10/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=4de8c0980e4cd218e6b681d6957845d37f6dea10", "patch": "@@ -50,7 +50,7 @@ impl DeclarationLocation {\n     pub fn original_name_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n         if let Some(file_id) = self.hir_file_id.file_id() {\n             // fast path to prevent parsing\n-            return Some(FileRange { file_id, range: self.ptr.text_range() });\n+            return Some(FileRange { file_id, range: self.name_ptr.text_range() });\n         }\n         let node = resolve_node(db, self.hir_file_id, &self.name_ptr);\n         node.as_ref().original_file_range_opt(db.upcast())"}]}