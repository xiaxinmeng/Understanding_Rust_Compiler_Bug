{"sha": "6807d3773dad925cab3797aef7e7e5a50bfabfef", "node_id": "C_kwDOAAsO6NoAKDY4MDdkMzc3M2RhZDkyNWNhYjM3OTdhZWY3ZTdlNWE1MGJmYWJmZWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T15:11:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T15:11:45Z"}, "message": "Add some new tests with amusing diagnostics", "tree": {"sha": "4a286275b428f693c56d975be93540e04a5e31ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a286275b428f693c56d975be93540e04a5e31ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6807d3773dad925cab3797aef7e7e5a50bfabfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6807d3773dad925cab3797aef7e7e5a50bfabfef", "html_url": "https://github.com/rust-lang/rust/commit/6807d3773dad925cab3797aef7e7e5a50bfabfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6807d3773dad925cab3797aef7e7e5a50bfabfef/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c7b6108fc89765d812c39c2c6d1df1a9dd2b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c7b6108fc89765d812c39c2c6d1df1a9dd2b5f", "html_url": "https://github.com/rust-lang/rust/commit/80c7b6108fc89765d812c39c2c6d1df1a9dd2b5f"}], "stats": {"total": 95, "additions": 91, "deletions": 4}, "files": [{"sha": "f39bf4aeb29ae1ef349ddc1b1b573cba36622164", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -1,4 +1,3 @@\n-\n #![feature(type_alias_impl_trait)]\n \n type Foo<'a, 'b> = impl std::fmt::Debug;\n@@ -7,4 +6,4 @@ fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n     (i, i) //~^ ERROR concrete type differs from previous\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "49d08dda9f994b10c4524df0cf01355446017122", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:6:1\n+  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:5:1\n    |\n LL | fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'a i32`, got `&'b i32`\n    |\n note: previous use here\n-  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:6:1\n+  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:5:1\n    |\n LL | fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4cdfbf080410633389ad2d2cc1ff23d3bd390f5e", "filename": "src/test/ui/type-alias-impl-trait/nested.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl std::fmt::Debug;\n+type Bar = impl Trait<Foo>;\n+\n+trait Trait<T> {}\n+\n+impl<T, U> Trait<T> for U {}\n+\n+fn bar() -> Bar {\n+    42\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", bar());\n+    //~^ ERROR `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` doesn't implement `Debug`\n+}"}, {"sha": "43bdd73454b28d308f57812eb6d6993d8020a650", "filename": "src/test/ui/type-alias-impl-trait/nested.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` doesn't implement `Debug`\n+  --> $DIR/nested.rs:15:22\n+   |\n+LL |     println!(\"{:?}\", bar());\n+   |                      ^^^^^ `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = help: the trait `Debug` is not implemented for `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>`\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e9ace992c8b9ddd79f5ce5cf53e3e84807ec2e9b", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl std::fmt::Debug;\n+type Bar = impl PartialEq<Foo>;\n+\n+fn bar() -> Bar {\n+    42_i32 //~ ERROR can't compare `i32` with `impl Debug`\n+}\n+\n+fn main() {}"}, {"sha": "2c3630dc39425ce37843abc7a04acf2b1a5ab365", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: can't compare `i32` with `impl Debug`\n+  --> $DIR/self-referential-2.rs:7:5\n+   |\n+LL |     42_i32\n+   |     ^^^^^^ no implementation for `i32 == impl Debug`\n+   |\n+   = help: the trait `PartialEq<impl Debug>` is not implemented for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d40715717d49d1b7d559d98036b98dca570ef956", "filename": "src/test/ui/type-alias-impl-trait/self-referential-3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}, {"sha": "d5085b9419e8e3c9c13e2503446f097562fa5a50", "filename": "src/test/ui/type-alias-impl-trait/self-referential.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'a>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i //~ ERROR can't compare `&i32` with `impl PartialEq<Opaque\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 69;\n+    assert_eq!(bar(&meh), bar(&meh));\n+}"}, {"sha": "8bc2cb9b05cd108e7461daf7e745d090d08234e0", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6807d3773dad925cab3797aef7e7e5a50bfabfef/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=6807d3773dad925cab3797aef7e7e5a50bfabfef", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: can't compare `&i32` with `impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug`\n+  --> $DIR/self-referential.rs:6:5\n+   |\n+LL |     i\n+   |     ^ no implementation for `&i32 == impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug`\n+   |\n+   = help: the trait `PartialEq<impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug>` is not implemented for `&i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}