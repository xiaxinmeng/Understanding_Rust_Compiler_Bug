{"sha": "16e936b93f5318aa34d309a8a3c4904a32b30c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTkzNmI5M2Y1MzE4YWEzNGQzMDlhOGEzYzQ5MDRhMzJiMzBjOTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-26T13:40:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-26T13:40:11Z"}, "message": "Rustfmt", "tree": {"sha": "197ed2d11a5c74699c9f066c60ed47bf3b1436f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197ed2d11a5c74699c9f066c60ed47bf3b1436f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e936b93f5318aa34d309a8a3c4904a32b30c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e936b93f5318aa34d309a8a3c4904a32b30c95", "html_url": "https://github.com/rust-lang/rust/commit/16e936b93f5318aa34d309a8a3c4904a32b30c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e936b93f5318aa34d309a8a3c4904a32b30c95/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc84888830d872bc4d51f0c47a578a3325edbef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc84888830d872bc4d51f0c47a578a3325edbef1", "html_url": "https://github.com/rust-lang/rust/commit/bc84888830d872bc4d51f0c47a578a3325edbef1"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "23888070259856b74021aa8556c87e9ec2b655f6", "filename": "src/abi.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=16e936b93f5318aa34d309a8a3c4904a32b30c95", "patch": "@@ -49,7 +49,11 @@ fn get_pass_mode<'a, 'tcx: 'a>(\n         PassMode::ByVal(ret_ty)\n     } else {\n         if abi == Abi::C {\n-            unimpl!(\"Non scalars are not yet supported for \\\"C\\\" abi ({:?}) is_return: {:?}\", ty, is_return);\n+            unimpl!(\n+                \"Non scalars are not yet supported for \\\"C\\\" abi ({:?}) is_return: {:?}\",\n+                ty,\n+                is_return\n+            );\n         }\n         PassMode::ByRef\n     }\n@@ -667,9 +671,10 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     assert_eq!(args.len(), 1);\n                     let layout = fx.layout_of(substs.type_at(0));\n                     let size = match &layout.ty.sty {\n-                        _ if !layout.is_unsized() => {\n-                            fx.bcx.ins().iconst(fx.module.pointer_type(), layout.size.bytes() as i64)\n-                        }\n+                        _ if !layout.is_unsized() => fx\n+                            .bcx\n+                            .ins()\n+                            .iconst(fx.module.pointer_type(), layout.size.bytes() as i64),\n                         ty::Slice(elem) => {\n                             let len = args[0].load_value_pair(fx).1;\n                             let elem_size = fx.layout_of(elem).size.bytes();\n@@ -690,9 +695,10 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     assert_eq!(args.len(), 1);\n                     let layout = fx.layout_of(substs.type_at(0));\n                     let align = match &layout.ty.sty {\n-                        _ if !layout.is_unsized() => {\n-                            fx.bcx.ins().iconst(fx.module.pointer_type(), layout.align.abi() as i64)\n-                        }\n+                        _ if !layout.is_unsized() => fx\n+                            .bcx\n+                            .ins()\n+                            .iconst(fx.module.pointer_type(), layout.align.abi() as i64),\n                         ty::Slice(elem) => {\n                             let align = fx.layout_of(elem).align.abi() as i64;\n                             fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n@@ -860,7 +866,8 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 _ if intrinsic.starts_with(\"atomic_fence\") => {}\n                 _ if intrinsic.starts_with(\"atomic_load\") => {\n                     assert_eq!(args.len(), 1);\n-                    let inner_layout = fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n+                    let inner_layout =\n+                        fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n                     let val = CValue::ByRef(args[0].load_value(fx), inner_layout);\n                     ret.write_cvalue(fx, val);\n                 }"}, {"sha": "f3088da411986c9cb2f794b29d9793dc5296ae9e", "filename": "src/base.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=16e936b93f5318aa34d309a8a3c4904a32b30c95", "patch": "@@ -27,8 +27,11 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                         if inst.def_id().krate == LOCAL_CRATE =>\n                     {\n                         let mut mir = ::std::io::Cursor::new(Vec::new());\n-                        crate::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n-                            .unwrap();\n+                        crate::rustc_mir::util::write_mir_pretty(\n+                            tcx,\n+                            Some(inst.def_id()),\n+                            &mut mir,\n+                        ).unwrap();\n                         String::from_utf8(mir.into_inner()).unwrap()\n                     }\n                     InstanceDef::Item(_)\n@@ -436,12 +439,10 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                                     let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n                                     fx.bcx.ins().bint(types::I8, res)\n                                 }\n-                                ty::Uint(_) | ty::Int(_) => {\n-                                    fx.bcx.ins().bnot(val)\n-                                }\n+                                ty::Uint(_) | ty::Int(_) => fx.bcx.ins().bnot(val),\n                                 _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n                             }\n-                        },\n+                        }\n                         UnOp::Neg => match layout.ty.sty {\n                             ty::Int(_) => {\n                                 let clif_ty = fx.cton_type(layout.ty).unwrap();\n@@ -1001,7 +1002,10 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n                 let res = match bin_op {\n                     BinOp::Eq => fx.bcx.ins().icmp(IntCC::Equal, lhs, rhs),\n                     BinOp::Ne => fx.bcx.ins().icmp(IntCC::NotEqual, lhs, rhs),\n-                    _ => unimplemented!(\"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\", bin_op),\n+                    _ => unimplemented!(\n+                        \"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\",\n+                        bin_op\n+                    ),\n                 };\n \n                 assert_eq!(fx.tcx.types.bool, ret_ty);"}, {"sha": "51706c888e4dedf48ddee5357035dc3962e4dd32", "filename": "src/common.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=16e936b93f5318aa34d309a8a3c4904a32b30c95", "patch": "@@ -372,7 +372,9 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         match (&self.layout().ty.sty, &from.layout().ty.sty) {\n             (ty::Ref(_, t, dest_mut), ty::Ref(_, u, src_mut))\n-                if (if *dest_mut != crate::rustc::hir::Mutability::MutImmutable && src_mut != dest_mut {\n+                if (if *dest_mut != crate::rustc::hir::Mutability::MutImmutable\n+                    && src_mut != dest_mut\n+                {\n                     false\n                 } else if t != u {\n                     false\n@@ -449,7 +451,11 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     ) -> CPlace<'tcx> {\n         match self {\n             CPlace::Var(var, layout) => {\n-                bug!(\"Tried to project {:?}, which is put in SSA var {:?}\", layout.ty, var);\n+                bug!(\n+                    \"Tried to project {:?}, which is put in SSA var {:?}\",\n+                    layout.ty,\n+                    var\n+                );\n             }\n             CPlace::Addr(base, extra, layout) => {\n                 let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);"}, {"sha": "30dab10495f959253ad3ba5c5eb1b823f42bdfab", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=16e936b93f5318aa34d309a8a3c4904a32b30c95", "patch": "@@ -154,7 +154,8 @@ fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n     def_id: DefId,\n ) -> DataId {\n     let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n-    let is_mutable = if let crate::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n+    let is_mutable =\n+        if let crate::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n             true\n         } else {\n             !tcx.type_of(def_id)\n@@ -235,11 +236,13 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n                 AllocType::Function(instance) => {\n                     let (func_name, sig) = crate::abi::get_function_name_and_sig(tcx, instance);\n-                    let func_id = module.declare_function(&func_name, Linkage::Import, &sig).unwrap();\n+                    let func_id = module\n+                        .declare_function(&func_name, Linkage::Import, &sig)\n+                        .unwrap();\n                     let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n                     data_ctx.write_function_addr(reloc_offset as u32, local_func_id);\n                     continue;\n-                },\n+                }\n                 AllocType::Memory(_) => {\n                     cx.todo.insert(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(module, reloc)"}, {"sha": "e8e3899e38891d153e66811a7de7d36c3dcdbca3", "filename": "src/vtable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e936b93f5318aa34d309a8a3c4904a32b30c95/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=16e936b93f5318aa34d309a8a3c4904a32b30c95", "patch": "@@ -81,8 +81,9 @@ fn build_vtable<'a, 'tcx: 'a>(\n         .layout_of(ParamEnv::reveal_all().and(ty))\n         .unwrap()\n         .size_and_align();\n-    let drop_in_place_fn =\n-        fx.get_function_id(crate::rustc_mir::monomorphize::resolve_drop_in_place(tcx, ty));\n+    let drop_in_place_fn = fx.get_function_id(\n+        crate::rustc_mir::monomorphize::resolve_drop_in_place(tcx, ty),\n+    );\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n "}]}