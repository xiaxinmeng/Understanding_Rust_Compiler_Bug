{"sha": "3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "node_id": "C_kwDOAAsO6NoAKDNhYmNhZTJiZWIxYmM4ZDJlZjFkOTJmZDc0ZmRkNmNhNGFlYjExNzM", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-08T16:55:28Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-09T14:07:20Z"}, "message": "Document tool lints", "tree": {"sha": "837d584aac53bf002ff10a0023859a29d0a4aac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837d584aac53bf002ff10a0023859a29d0a4aac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "html_url": "https://github.com/rust-lang/rust/commit/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c306f6dcd600b1fcc74439c780e8ebef338d84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c306f6dcd600b1fcc74439c780e8ebef338d84c", "html_url": "https://github.com/rust-lang/rust/commit/7c306f6dcd600b1fcc74439c780e8ebef338d84c"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "a14dc20fca369e701337454e4f0b6ca53245ba16", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "patch": "@@ -17,6 +17,11 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n declare_tool_lint! {\n+    /// The `default_hash_type` lint detects use of [`std::collections::HashMap`]/[`std::collections::HashSet`],\n+    /// suggesting the use of `FxHashMap`/`FxHashSet`.\n+    ///\n+    /// This can help as `FxHasher` can perform better than the default hasher. DOS protection is not\n+    /// required as input is assumed to be trusted.\n     pub rustc::DEFAULT_HASH_TYPES,\n     Allow,\n     \"forbid HashMap and HashSet and suggest the FxHash* variants\",\n@@ -67,6 +72,12 @@ fn typeck_results_of_method_fn<'tcx>(\n }\n \n declare_tool_lint! {\n+    /// The `potential_query_instability` lint detects use of methods which can lead to\n+    /// potential query instability, such as iterating over a `HashMap`.\n+    ///\n+    /// Due to the [incremental compilation](https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation.html) model,\n+    /// queries must return deterministic, stable results. `HashMap` iteration order can change between compilations,\n+    /// and will introduce instability if query results expose the order.\n     pub rustc::POTENTIAL_QUERY_INSTABILITY,\n     Allow,\n     \"require explicit opt-in when using potentially unstable methods or functions\",\n@@ -92,13 +103,17 @@ impl LateLintPass<'_> for QueryStability {\n }\n \n declare_tool_lint! {\n+    /// The `usage_of_ty_tykind` lint detects usages of `ty::TyKind::<kind>`,\n+    /// where `ty::<kind>` would suffice.\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,\n     \"usage of `ty::TyKind` outside of the `ty::sty` module\",\n     report_in_external_macro: true\n }\n \n declare_tool_lint! {\n+    /// The `usage_of_qualified_ty` lint detects usages of `ty::TyKind`,\n+    /// where `Ty` should be used instead.\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n     \"using `ty::{Ty,TyCtxt}` instead of importing it\",\n@@ -254,6 +269,8 @@ fn gen_args(segment: &PathSegment<'_>) -> String {\n }\n \n declare_tool_lint! {\n+    /// The `lint_pass_impl_without_macro` detects manual implementations of a lint\n+    /// pass, without using [`declare_lint_pass`] or [`impl_lint_pass`].\n     pub rustc::LINT_PASS_IMPL_WITHOUT_MACRO,\n     Allow,\n     \"`impl LintPass` without the `declare_lint_pass!` or `impl_lint_pass!` macros\"\n@@ -285,6 +302,8 @@ impl EarlyLintPass for LintPassImpl {\n }\n \n declare_tool_lint! {\n+    /// The `existing_doc_keyword` lint detects use `#[doc()]` keywords\n+    /// that don't exist, e.g. `#[doc(keyword = \"..\")]`.\n     pub rustc::EXISTING_DOC_KEYWORD,\n     Allow,\n     \"Check that documented keywords in std and core actually exist\",\n@@ -325,13 +344,22 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n }\n \n declare_tool_lint! {\n+    /// The `untranslatable_diagnostic` lint detects diagnostics created\n+    /// without using translatable Fluent strings.\n+    ///\n+    /// More details on translatable diagnostics can be found [here](https://rustc-dev-guide.rust-lang.org/diagnostics/translation.html).\n     pub rustc::UNTRANSLATABLE_DIAGNOSTIC,\n     Allow,\n     \"prevent creation of diagnostics which cannot be translated\",\n     report_in_external_macro: true\n }\n \n declare_tool_lint! {\n+    /// The `diagnostic_outside_of_impl` lint detects diagnostics created manually,\n+    /// and inside an `IntoDiagnostic`/`AddToDiagnostic` implementation,\n+    /// or a `#[derive(Diagnostic)]`/`#[derive(Subdiagnostic)]` expansion.\n+    ///\n+    /// More details on diagnostics implementations can be found [here](https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html).\n     pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n     Allow,\n     \"prevent creation of diagnostics outside of `IntoDiagnostic`/`AddToDiagnostic` impls\",\n@@ -396,6 +424,8 @@ impl LateLintPass<'_> for Diagnostics {\n }\n \n declare_tool_lint! {\n+    /// The `bad_opt_access` lint detects accessing options by field instad of\n+    /// the wrapper function.\n     pub rustc::BAD_OPT_ACCESS,\n     Deny,\n     \"prevent using options by field access when there is a wrapper function\","}]}