{"sha": "9f933b5642c08e4241cbfed0f15270df552ce8e6", "node_id": "C_kwDOAAsO6NoAKDlmOTMzYjU2NDJjMDhlNDI0MWNiZmVkMGYxNTI3MGRmNTUyY2U4ZTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-21T22:18:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-23T17:02:50Z"}, "message": "Hack to suppress bad labels in type mismatch inference deduction code", "tree": {"sha": "af403e84ac338b87da05bc79bedbd87bdd69ac8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af403e84ac338b87da05bc79bedbd87bdd69ac8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f933b5642c08e4241cbfed0f15270df552ce8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f933b5642c08e4241cbfed0f15270df552ce8e6", "html_url": "https://github.com/rust-lang/rust/commit/9f933b5642c08e4241cbfed0f15270df552ce8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f933b5642c08e4241cbfed0f15270df552ce8e6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed3bb53d207c1bf92c26833e8d3d4280550f83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed3bb53d207c1bf92c26833e8d3d4280550f83e", "html_url": "https://github.com/rust-lang/rust/commit/bed3bb53d207c1bf92c26833e8d3d4280550f83e"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "8e23ded3c09b4bf7ab024c3b279254c7960c811b", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f933b5642c08e4241cbfed0f15270df552ce8e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f933b5642c08e4241cbfed0f15270df552ce8e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=9f933b5642c08e4241cbfed0f15270df552ce8e6", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected);\n         if !suggested {\n-            self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected);\n+            self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected, expr.span);\n         }\n     }\n \n@@ -222,6 +222,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         found: Ty<'tcx>,\n         expected: Ty<'tcx>,\n+        mismatch_span: Span,\n     ) -> bool {\n         let map = self.tcx.hir();\n \n@@ -281,7 +282,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             },\n         };\n         let mut prev = eraser.fold_ty(ty);\n-        let mut prev_span = None;\n+        let mut prev_span: Option<Span> = None;\n \n         for binding in expr_finder.uses {\n             // In every expression where the binding is referenced, we will look at that\n@@ -334,13 +335,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let arg = &args[i];\n                             let arg_ty = self.node_ty(arg.hir_id);\n                             if !arg.span.overlaps(mismatch_span) {\n-                            err.span_label(\n-                                arg.span,\n-                                &format!(\n-                                    \"this is of type `{arg_ty}`, which causes `{ident}` to be \\\n-                                     inferred as `{ty}`\",\n-                                ),\n-                            );\n+                                err.span_label(\n+                                    arg.span,\n+                                    &format!(\n+                                        \"this is of type `{arg_ty}`, which causes `{ident}` to be \\\n+                                        inferred as `{ty}`\",\n+                                    ),\n+                                );\n                             }\n                             param_args.insert(param_ty, (arg, arg_ty));\n                         }\n@@ -384,12 +385,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     && self.can_eq(self.param_env, ty, found).is_ok()\n                 {\n                     // We only point at the first place where the found type was inferred.\n+                    if !segment.ident.span.overlaps(mismatch_span) {\n                     err.span_label(\n                         segment.ident.span,\n                         with_forced_trimmed_paths!(format!(\n                             \"here the type of `{ident}` is inferred to be `{ty}`\",\n                         )),\n-                    );\n+                    );}\n                     break;\n                 } else if !param_args.is_empty() {\n                     break;\n@@ -408,12 +410,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We use the *previous* span because if the type is known *here* it means\n                     // it was *evaluated earlier*. We don't do this for method calls because we\n                     // evaluate the method's self type eagerly, but not in any other case.\n-                    err.span_label(\n-                        span,\n-                        with_forced_trimmed_paths!(format!(\n-                            \"here the type of `{ident}` is inferred to be `{ty}`\",\n-                        )),\n-                    );\n+                    if !span.overlaps(mismatch_span) {\n+                        err.span_label(\n+                            span,\n+                            with_forced_trimmed_paths!(format!(\n+                                \"here the type of `{ident}` is inferred to be `{ty}`\",\n+                            )),\n+                        );\n+                    }\n                     break;\n                 }\n                 prev = ty;"}, {"sha": "677c80297b9126830e73ec21457ba3d1e99a2513", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f933b5642c08e4241cbfed0f15270df552ce8e6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f933b5642c08e4241cbfed0f15270df552ce8e6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=9f933b5642c08e4241cbfed0f15270df552ce8e6", "patch": "@@ -808,7 +808,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     kind: TypeVariableOriginKind::MiscVariable,\n                     span: full_call_span,\n                 });\n-                self.point_at_expr_source_of_inferred_type(&mut err, rcvr, expected, callee_ty);\n+                self.point_at_expr_source_of_inferred_type(\n+                    &mut err,\n+                    rcvr,\n+                    expected,\n+                    callee_ty,\n+                    provided_arg_span,\n+                );\n             }\n             // Call out where the function is defined\n             self.label_fn_like("}, {"sha": "a807f030cfce46d1de90db77a9efde8b1deca935", "filename": "tests/ui/typeck/bad-type-in-vec-push.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f933b5642c08e4241cbfed0f15270df552ce8e6/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f933b5642c08e4241cbfed0f15270df552ce8e6/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.rs?ref=9f933b5642c08e4241cbfed0f15270df552ce8e6", "patch": "@@ -12,3 +12,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     // So it thinks that the type of `result` is constrained here.\n }\n+\n+fn example2() {\n+    let mut x = vec![1];\n+    x.push(\"\");\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "e4c99ec8e701f99a1f72792c438a9626c947886a", "filename": "tests/ui/typeck/bad-type-in-vec-push.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f933b5642c08e4241cbfed0f15270df552ce8e6/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f933b5642c08e4241cbfed0f15270df552ce8e6/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr?ref=9f933b5642c08e4241cbfed0f15270df552ce8e6", "patch": "@@ -4,17 +4,26 @@ error[E0308]: mismatched types\n LL |     vector.sort();\n    |     ------ here the type of `vector` is inferred to be `Vec<_>`\n LL |     result.push(vector);\n-   |            ---- ^^^^^^\n-   |            |    |\n-   |            |    expected integer, found struct `Vec`\n-   |            |    this is of type `Vec<_>`, which causes `result` to be inferred as `Vec<{integer}>`\n+   |            ---- ^^^^^^ expected integer, found struct `Vec`\n+   |            |\n    |            arguments to this method are incorrect\n    |\n    = note: expected type `{integer}`\n             found struct `Vec<_>`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/bad-type-in-vec-push.rs:18:12\n+   |\n+LL |     x.push(\"\");\n+   |       ---- ^^ expected integer, found `&str`\n+   |       |\n+   |       arguments to this method are incorrect\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}