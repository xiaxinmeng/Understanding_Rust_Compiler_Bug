{"sha": "f9c59d37524d267638ae941b19aa49c5b4baaf41", "node_id": "C_kwDOAAsO6NoAKGY5YzU5ZDM3NTI0ZDI2NzYzOGFlOTQxYjE5YWE0OWM1YjRiYWFmNDE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-09T17:13:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-09T17:13:15Z"}, "message": "Use known names instead of string literals", "tree": {"sha": "e2ba4adc95772ee8c111b37eba9ca3e0284e70ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ba4adc95772ee8c111b37eba9ca3e0284e70ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c59d37524d267638ae941b19aa49c5b4baaf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c59d37524d267638ae941b19aa49c5b4baaf41", "html_url": "https://github.com/rust-lang/rust/commit/f9c59d37524d267638ae941b19aa49c5b4baaf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c59d37524d267638ae941b19aa49c5b4baaf41/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "067d87e8a9f170452a5554dcc7b3e264cc12142b", "url": "https://api.github.com/repos/rust-lang/rust/commits/067d87e8a9f170452a5554dcc7b3e264cc12142b", "html_url": "https://github.com/rust-lang/rust/commit/067d87e8a9f170452a5554dcc7b3e264cc12142b"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "23f81d3c7f5aca5d82a12b1145a6eee758ad1ad6", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=f9c59d37524d267638ae941b19aa49c5b4baaf41", "patch": "@@ -334,6 +334,13 @@ pub mod known {\n         gt,\n         le,\n         lt,\n+        // lang items\n+        not,\n+        neg,\n+        future_trait,\n+        owned_box,\n+        index,\n+        partial_ord\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "ce6cb815400326aa6b863e5bf3e6f33b24b0cad5", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=f9c59d37524d267638ae941b19aa49c5b4baaf41", "patch": "@@ -28,11 +28,10 @@ use hir_def::{\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, HasModule, Lookup,\n     TraitId, TypeAliasId, VariantId,\n };\n-use hir_expand::name::name;\n+use hir_expand::name::{name, Name};\n use la_arena::ArenaMap;\n use rustc_hash::FxHashMap;\n use stdx::impl_from;\n-use syntax::SmolStr;\n \n use crate::{\n     db::HirDatabase, fold_tys, infer::coerce::CoerceMany, lower::ImplTraitLoweringMode,\n@@ -719,10 +718,9 @@ impl<'a> InferenceContext<'a> {\n         self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n     }\n \n-    fn resolve_lang_item(&self, name: &str) -> Option<LangItemTarget> {\n+    fn resolve_lang_item(&self, name: Name) -> Option<LangItemTarget> {\n         let krate = self.resolver.krate()?;\n-        let name = SmolStr::new_inline(name);\n-        self.db.lang_item(krate, name)\n+        self.db.lang_item(krate, name.to_smol_str())\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n@@ -743,22 +741,22 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(\"neg\")?.as_trait()?;\n+        let trait_ = self.resolve_lang_item(name![neg])?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_ops_not_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(\"not\")?.as_trait()?;\n+        let trait_ = self.resolve_lang_item(name![not])?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(\"future_trait\")?.as_trait()?;\n+        let trait_ = self.resolve_lang_item(name![future_trait])?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_boxed_box(&self) -> Option<AdtId> {\n-        let struct_ = self.resolve_lang_item(\"owned_box\")?.as_struct()?;\n+        let struct_ = self.resolve_lang_item(name![owned_box])?.as_struct()?;\n         Some(struct_.into())\n     }\n \n@@ -799,7 +797,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_ops_index(&self) -> Option<TraitId> {\n-        self.resolve_lang_item(\"index\")?.as_trait()\n+        self.resolve_lang_item(name![index])?.as_trait()\n     }\n \n     fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {"}, {"sha": "2b8dc793ccbf464a45621eeb216e20a679b6b463", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c59d37524d267638ae941b19aa49c5b4baaf41/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f9c59d37524d267638ae941b19aa49c5b4baaf41", "patch": "@@ -1276,41 +1276,43 @@ impl<'a> InferenceContext<'a> {\n         let (name, lang_item) = match op {\n             BinaryOp::LogicOp(_) => return None,\n             BinaryOp::ArithOp(aop) => match aop {\n-                ArithOp::Add => (name!(add), \"add\"),\n-                ArithOp::Mul => (name!(mul), \"mul\"),\n-                ArithOp::Sub => (name!(sub), \"sub\"),\n-                ArithOp::Div => (name!(div), \"div\"),\n-                ArithOp::Rem => (name!(rem), \"rem\"),\n-                ArithOp::Shl => (name!(shl), \"shl\"),\n-                ArithOp::Shr => (name!(shr), \"shr\"),\n-                ArithOp::BitXor => (name!(bitxor), \"bitxor\"),\n-                ArithOp::BitOr => (name!(bitor), \"bitor\"),\n-                ArithOp::BitAnd => (name!(bitand), \"bitand\"),\n+                ArithOp::Add => (name!(add), name!(add)),\n+                ArithOp::Mul => (name!(mul), name!(mul)),\n+                ArithOp::Sub => (name!(sub), name!(sub)),\n+                ArithOp::Div => (name!(div), name!(div)),\n+                ArithOp::Rem => (name!(rem), name!(rem)),\n+                ArithOp::Shl => (name!(shl), name!(shl)),\n+                ArithOp::Shr => (name!(shr), name!(shr)),\n+                ArithOp::BitXor => (name!(bitxor), name!(bitxor)),\n+                ArithOp::BitOr => (name!(bitor), name!(bitor)),\n+                ArithOp::BitAnd => (name!(bitand), name!(bitand)),\n             },\n             BinaryOp::Assignment { op: Some(aop) } => match aop {\n-                ArithOp::Add => (name!(add_assign), \"add_assign\"),\n-                ArithOp::Mul => (name!(mul_assign), \"mul_assign\"),\n-                ArithOp::Sub => (name!(sub_assign), \"sub_assign\"),\n-                ArithOp::Div => (name!(div_assign), \"div_assign\"),\n-                ArithOp::Rem => (name!(rem_assign), \"rem_assign\"),\n-                ArithOp::Shl => (name!(shl_assign), \"shl_assign\"),\n-                ArithOp::Shr => (name!(shr_assign), \"shr_assign\"),\n-                ArithOp::BitXor => (name!(bitxor_assign), \"bitxor_assign\"),\n-                ArithOp::BitOr => (name!(bitor_assign), \"bitor_assign\"),\n-                ArithOp::BitAnd => (name!(bitand_assign), \"bitand_assign\"),\n+                ArithOp::Add => (name!(add_assign), name!(add_assign)),\n+                ArithOp::Mul => (name!(mul_assign), name!(mul_assign)),\n+                ArithOp::Sub => (name!(sub_assign), name!(sub_assign)),\n+                ArithOp::Div => (name!(div_assign), name!(div_assign)),\n+                ArithOp::Rem => (name!(rem_assign), name!(rem_assign)),\n+                ArithOp::Shl => (name!(shl_assign), name!(shl_assign)),\n+                ArithOp::Shr => (name!(shr_assign), name!(shr_assign)),\n+                ArithOp::BitXor => (name!(bitxor_assign), name!(bitxor_assign)),\n+                ArithOp::BitOr => (name!(bitor_assign), name!(bitor_assign)),\n+                ArithOp::BitAnd => (name!(bitand_assign), name!(bitand_assign)),\n             },\n             BinaryOp::CmpOp(cop) => match cop {\n-                CmpOp::Eq { negated: false } => (name!(eq), \"eq\"),\n-                CmpOp::Eq { negated: true } => (name!(ne), \"eq\"),\n+                CmpOp::Eq { negated: false } => (name!(eq), name!(eq)),\n+                CmpOp::Eq { negated: true } => (name!(ne), name!(eq)),\n                 CmpOp::Ord { ordering: Ordering::Less, strict: false } => {\n-                    (name!(le), \"partial_ord\")\n+                    (name!(le), name!(partial_ord))\n+                }\n+                CmpOp::Ord { ordering: Ordering::Less, strict: true } => {\n+                    (name!(lt), name!(partial_ord))\n                 }\n-                CmpOp::Ord { ordering: Ordering::Less, strict: true } => (name!(lt), \"partial_ord\"),\n                 CmpOp::Ord { ordering: Ordering::Greater, strict: false } => {\n-                    (name!(ge), \"partial_ord\")\n+                    (name!(ge), name!(partial_ord))\n                 }\n                 CmpOp::Ord { ordering: Ordering::Greater, strict: true } => {\n-                    (name!(gt), \"partial_ord\")\n+                    (name!(gt), name!(partial_ord))\n                 }\n             },\n             BinaryOp::Assignment { op: None } => return None,"}]}