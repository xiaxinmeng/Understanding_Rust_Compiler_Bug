{"sha": "6c20ab744b0f82646d90ce9d25894823abc9c669", "node_id": "C_kwDOAAsO6NoAKDZjMjBhYjc0NGIwZjgyNjQ2ZDkwY2U5ZDI1ODk0ODIzYWJjOWM2Njk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T14:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T14:46:29Z"}, "message": "Auto merge of #99082 - matthiaskrgr:rollup-nouwsh7, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #99022 (MIR dataflow: Rename function to `always_storage_live_locals`)\n - #99050 (Clarify MIR semantics of storage statements)\n - #99067 (Intra-doc-link-ify reference to Clone::clone_from)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1820a637f57ac531df1ad3f677b205bbe2642150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1820a637f57ac531df1ad3f677b205bbe2642150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c20ab744b0f82646d90ce9d25894823abc9c669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c20ab744b0f82646d90ce9d25894823abc9c669", "html_url": "https://github.com/rust-lang/rust/commit/6c20ab744b0f82646d90ce9d25894823abc9c669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c20ab744b0f82646d90ce9d25894823abc9c669/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73443a05908b0f8043659295a854295013987876", "url": "https://api.github.com/repos/rust-lang/rust/commits/73443a05908b0f8043659295a854295013987876", "html_url": "https://github.com/rust-lang/rust/commit/73443a05908b0f8043659295a854295013987876"}, {"sha": "e89ed4f752dc3aab2f8b88a2caa54a9c70f759dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89ed4f752dc3aab2f8b88a2caa54a9c70f759dc", "html_url": "https://github.com/rust-lang/rust/commit/e89ed4f752dc3aab2f8b88a2caa54a9c70f759dc"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "2e47cf89210737b50de1ee1885dfa428b5669872", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_mir_dataflow::storage::always_live_locals;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n@@ -707,7 +707,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as live that have no `Storage*` annotations.\n-        let always_live = always_live_locals(self.body());\n+        let always_live = always_storage_live_locals(self.body());\n         for local in locals.indices() {\n             if always_live.contains(local) {\n                 locals[local].value = LocalValue::Live(Operand::Immediate(Immediate::Uninit));"}, {"sha": "d3bf6b49f1205f1806ce554db07f5959745db96a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n-use rustc_mir_dataflow::storage::always_live_locals;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::{Size, VariantIdx};\n \n@@ -49,7 +49,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n         let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n \n-        let always_live_locals = always_live_locals(body);\n+        let always_live_locals = always_storage_live_locals(body);\n         let storage_liveness = MaybeStorageLive::new(always_live_locals)\n             .into_engine(tcx, body)\n             .iterate_to_fixpoint()\n@@ -206,7 +206,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         }\n \n         if self.reachable_blocks.contains(location.block) && context.is_use() {\n-            // Uses of locals must occur while the local's storage is allocated.\n+            // We check that the local is live whenever it is used. Technically, violating this\n+            // restriction is only UB and not actually indicative of not well-formed MIR. This means\n+            // that an optimization which turns MIR that already has UB into MIR that fails this\n+            // check is not necessarily wrong. However, we have no such optimizations at the moment,\n+            // and so we include this check anyway to help us catch bugs. If you happen to write an\n+            // optimization that might cause this to incorrectly fire, feel free to remove this\n+            // check.\n             self.storage_liveness.seek_after_primary_effect(location);\n             let locals_with_storage = self.storage_liveness.get();\n             if !locals_with_storage.contains(local) {"}, {"sha": "45fc5f24a607a449f2231e93cd2982c4779b2d7f", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -237,19 +237,19 @@ pub enum StatementKind<'tcx> {\n \n     /// `StorageLive` and `StorageDead` statements mark the live range of a local.\n     ///\n-    /// Using a local before a `StorageLive` or after a `StorageDead` is not well-formed. These\n-    /// statements are not required. If the entire MIR body contains no `StorageLive`/`StorageDead`\n-    /// statements for a particular local, the local is always considered live.\n-    ///\n-    /// More precisely, the MIR validator currently does a `MaybeStorageLiveLocals` analysis to\n-    /// check validity of each use of a local. I believe this is equivalent to requiring for every\n-    /// use of a local, there exist at least one path from the root to that use that contains a\n-    /// `StorageLive` more recently than a `StorageDead`.\n-    ///\n-    /// **Needs clarification**: Is it permitted to have two `StorageLive`s without an intervening\n-    /// `StorageDead`? Two `StorageDead`s without an intervening `StorageLive`? LLVM says poison,\n-    /// yes. If the answer to any of these is \"no,\" is breaking that rule UB or is it an error to\n-    /// have a path in the CFG that might do this?\n+    /// At any point during the execution of a function, each local is either allocated or\n+    /// unallocated. Except as noted below, all locals except function parameters are initially\n+    /// unallocated. `StorageLive` statements cause memory to be allocated for the local while\n+    /// `StorageDead` statements cause the memory to be freed. Using a local in any way (not only\n+    /// reading/writing from it) while it is unallocated is UB.\n+    ///\n+    /// Some locals have no `StorageLive` or `StorageDead` statements within the entire MIR body.\n+    /// These locals are implicitly allocated for the full duration of the function. There is a\n+    /// convenience method at `rustc_mir_dataflow::storage::always_storage_live_locals` for\n+    /// computing these locals.\n+    ///\n+    /// If the local is already allocated, calling `StorageLive` again is UB. However, for an\n+    /// unallocated local an additional `StorageDead` all is simply a nop.\n     StorageLive(Local),\n \n     /// See `StorageLive` above."}, {"sha": "566c9d2d5054e6d1bf4333d3aead9fdae586b552", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::mir::{self, Local};\n //\n // FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n // as a field in the `LocalDecl` for each `Local`.\n-pub fn always_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n+pub fn always_storage_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n     let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n \n     for block in body.basic_blocks() {"}, {"sha": "9fdea8359671f0240cc3cc1573d3efd89a88b1c7", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -67,7 +67,7 @@ use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_mir_dataflow::impls::{\n     MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n };\n-use rustc_mir_dataflow::storage;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n@@ -1379,7 +1379,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             },\n         );\n \n-        let always_live_locals = storage::always_live_locals(&body);\n+        let always_live_locals = always_storage_live_locals(&body);\n \n         let liveness_info =\n             locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);"}, {"sha": "904a53bb4acc73418e1f3431cba56f4b29057994", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c20ab744b0f82646d90ce9d25894823abc9c669/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c20ab744b0f82646d90ce9d25894823abc9c669/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=6c20ab744b0f82646d90ce9d25894823abc9c669", "patch": "@@ -60,7 +60,7 @@ pub trait ToOwned {\n \n     /// Uses borrowed data to replace owned data, usually by cloning.\n     ///\n-    /// This is borrow-generalized version of `Clone::clone_from`.\n+    /// This is borrow-generalized version of [`Clone::clone_from`].\n     ///\n     /// # Examples\n     ///"}]}