{"sha": "e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "node_id": "C_kwDOAAsO6NoAKGUwYzJmZjdjY2MwYjBmZmUwOTViYmY3ZTFhZTM1OGQ5NmJiOTE1MmY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-29T12:15:17Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-24T07:57:40Z"}, "message": "Allow more cases to match ~const Drop.", "tree": {"sha": "6110471eec615f2248bfac88cb852ee5f6e0178c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6110471eec615f2248bfac88cb852ee5f6e0178c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmGd8HYACgkQAn35M4hi\nrd3CDxAAjtCfMR7+6o/NTkMbycVaEWU00NPXOXN9r8OXN0CZWEXZ6zq56nPETdaz\nkJr4u9HCZqaOiNgu09b2kLFnd2rISHVKalkhSlssmngBrAtalJK9pvlZKToU8cMK\nSyHw86U7JjIVyrjZRxllD0AYgABoDiK35cPqCHzOMI5BviTPKKG5TGOEiunj1GqH\nhJDrPtIoERb/WA0GSMQoaeMF7F1Yv9wFho1RCdrVtQ3oEpZFnZSi4mOTIolmWuzB\n0uih9PhL3pLZNLX1YjaaL2BOStDTX9azuEY49CCj4CiQL2G7IznPi48fRcFf1T/2\nlFYtIRe3jbc1+dtKQCV93S1iyLJRKTev/3DJUNSjX7Vo80R4ZT+jc90PmTYyVCEn\nHf5hoFCwS+30kw9pjBUyBh/7S2dY5iEofwWPN2DbUW63V2/PNI9Ug7Ib55gVSR+1\nFfwZQoc8X+MyQaGP6fZxkZKnui1OYZOiGb9hgrC3NobPRppoHY7ya/rm5QJxMiIH\ngMLvZkEO1d4nXo7+J3Jr5fQ4sDapHC39WScN4cP5eZoBTJcY9+gB68PtLfyHeje9\n2ABRg3E6YviPJfuMC+lcvUN1E+ct6c4Op/YxN+it3MTfBtDctiy6qhuVmZHZEndZ\nC4cW6iYh/T/zXfVK5bYPSXSLCNBnx1dGsMYM/lALCArSd86ZxD0=\n=J4bQ\n-----END PGP SIGNATURE-----", "payload": "tree 6110471eec615f2248bfac88cb852ee5f6e0178c\nparent 3b25e92a8fbb5856499a84e02bf393a9c18eb962\nauthor Deadbeef <ent3rm4n@gmail.com> 1632917717 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1637740660 +0800\n\nAllow more cases to match ~const Drop.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "html_url": "https://github.com/rust-lang/rust/commit/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b25e92a8fbb5856499a84e02bf393a9c18eb962", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b25e92a8fbb5856499a84e02bf393a9c18eb962", "html_url": "https://github.com/rust-lang/rust/commit/3b25e92a8fbb5856499a84e02bf393a9c18eb962"}], "stats": {"total": 100, "additions": 68, "deletions": 32}, "files": [{"sha": "c925672fa3529754f4708d09cefad19a7d051e3a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 48, "deletions": 32, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "patch": "@@ -284,32 +284,32 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // structs and enums.\n                 self.assemble_candidates_from_impls(obligation, &mut candidates);\n \n-                // For other types, we'll use the builtin rules.\n-                let copy_conditions = self.copy_clone_conditions(obligation);\n-                self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);\n-            } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n-                // `DiscriminantKind` is automatically implemented for every type.\n-                candidates.vec.push(DiscriminantKindCandidate);\n-            } else if lang_items.pointee_trait() == Some(def_id) {\n-                // `Pointee` is automatically implemented for every type.\n-                candidates.vec.push(PointeeCandidate);\n-            } else if lang_items.sized_trait() == Some(def_id) {\n-                // Sized is never implementable by end-users, it is\n-                // always automatically computed.\n-                let sized_conditions = self.sized_conditions(obligation);\n-                self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n-            } else if lang_items.unsize_trait() == Some(def_id) {\n-                self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n-            } else if lang_items.drop_trait() == Some(def_id)\n-                && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-            {\n-                if self.is_in_const_context {\n-                    self.assemble_const_drop_candidates(obligation, &mut candidates)?;\n-                } else {\n-                    debug!(\"passing ~const Drop bound; in non-const context\");\n-                    // `~const Drop` when we are not in a const context has no effect.\n-                    candidates.vec.push(ConstDropCandidate)\n-                }\n+                            // For other types, we'll use the builtin rules.\n+            let copy_conditions = self.copy_clone_conditions(obligation);\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);\n+        } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n+            // `DiscriminantKind` is automatically implemented for every type.\n+            candidates.vec.push(DiscriminantKindCandidate);\n+        } else if lang_items.pointee_trait() == Some(def_id) {\n+            // `Pointee` is automatically implemented for every type.\n+            candidates.vec.push(PointeeCandidate);\n+        } else if lang_items.sized_trait() == Some(def_id) {\n+            // Sized is never implementable by end-users, it is\n+            // always automatically computed.\n+            let sized_conditions = self.sized_conditions(obligation);\n+            self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n+        } else if lang_items.unsize_trait() == Some(def_id) {\n+            self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n+        } else if lang_items.drop_trait() == Some(def_id)\n+            && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        {\n+            if self.is_in_const_context {\n+                self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n+            } else {\n+                debug!(\"passing ~const Drop bound; in non-const context\");\n+                // `~const Drop` when we are not in a const context has no effect.\n+                candidates.vec.push(ConstDropCandidate)\n+            }\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -911,9 +911,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn assemble_const_drop_candidates(\n+    fn assemble_const_drop_candidates<'a>(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n+        obligation_stack: &TraitObligationStack<'a, 'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n         let mut stack: Vec<(Ty<'tcx>, usize)> = vec![(obligation.self_ty().skip_binder(), 0)];\n@@ -922,7 +923,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let mut noreturn = false;\n \n             self.check_recursion_depth(depth, obligation)?;\n-            let mut copy_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+            let mut new_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n             let mut copy_obligation =\n                 obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n                     trait_ref: ty::TraitRef {\n@@ -933,13 +934,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     polarity: ty::ImplPolarity::Positive,\n                 }));\n             copy_obligation.recursion_depth = depth + 1;\n-            self.assemble_candidates_from_impls(&copy_obligation, &mut copy_candidates);\n+            self.assemble_candidates_from_impls(&copy_obligation, &mut new_candidates);\n             let copy_conditions = self.copy_clone_conditions(&copy_obligation);\n-            self.assemble_builtin_bound_candidates(copy_conditions, &mut copy_candidates);\n-            if !copy_candidates.vec.is_empty() {\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut new_candidates);\n+            let copy_stack = self.push_stack(obligation_stack.list(), &copy_obligation);\n+            self.assemble_candidates_from_caller_bounds(&copy_stack, &mut new_candidates)?;\n+\n+            let const_drop_obligation =\n+                obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n+                    trait_ref: ty::TraitRef {\n+                        def_id: self.tcx().require_lang_item(hir::LangItem::Drop, None),\n+                        substs: self.tcx().mk_substs_trait(ty, &[]),\n+                    },\n+                    constness: ty::BoundConstness::ConstIfConst,\n+                }));\n+\n+            let const_drop_stack = self.push_stack(obligation_stack.list(), &const_drop_obligation);\n+            self.assemble_candidates_from_caller_bounds(&const_drop_stack, &mut new_candidates)?;\n+\n+            if !new_candidates.vec.is_empty() {\n                 noreturn = true;\n             }\n-            debug!(?copy_candidates.vec, \"assemble_const_drop_candidates - copy\");\n+            debug!(?new_candidates.vec, \"assemble_const_drop_candidates\");\n \n             match ty.kind() {\n                 ty::Int(_)"}, {"sha": "83fa32bf092bb9140c8404d06cf893e5f0e75bd9", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs?ref=e0c2ff7ccc0b0ffe095bbf7e1ae358d96bb9152f", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_precise_live_drops)]\n+\n+const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Drop {\n+    match res {\n+        Ok(t) => Some(t),\n+        Err(_e) => None,\n+    }\n+}\n+\n+pub struct Foo<T>(T);\n+\n+const fn baz<T: ~const Drop, E: ~const Drop>(res: Result<Foo<T>, Foo<E>>) -> Option<Foo<T>> {\n+    foo(res)\n+}\n+\n+fn main() {}"}]}