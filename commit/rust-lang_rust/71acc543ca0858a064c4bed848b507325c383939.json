{"sha": "71acc543ca0858a064c4bed848b507325c383939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYWNjNTQzY2EwODU4YTA2NGM0YmVkODQ4YjUwNzMyNWMzODM5Mzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-10-30T00:29:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-11-05T20:51:18Z"}, "message": "Make TypeContents consider the type `T` to be reachable via `*T` pointers\n\nFixes #9509", "tree": {"sha": "36c5449d3a5f50b7eb3b11e315284e5d2f1cc94b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c5449d3a5f50b7eb3b11e315284e5d2f1cc94b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71acc543ca0858a064c4bed848b507325c383939", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71acc543ca0858a064c4bed848b507325c383939", "html_url": "https://github.com/rust-lang/rust/commit/71acc543ca0858a064c4bed848b507325c383939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71acc543ca0858a064c4bed848b507325c383939/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "html_url": "https://github.com/rust-lang/rust/commit/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f"}], "stats": {"total": 140, "additions": 128, "deletions": 12}, "files": [{"sha": "96bb2897e0e2610b2b764c7e5bc80b50e39347bf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71acc543ca0858a064c4bed848b507325c383939/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71acc543ca0858a064c4bed848b507325c383939/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=71acc543ca0858a064c4bed848b507325c383939", "patch": "@@ -2088,7 +2088,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let result = match get(ty).sty {\n             // Scalar and unique types are sendable, freezable, and durable\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-            ty_bare_fn(_) | ty_ptr(_) | ty::ty_char => {\n+            ty_bare_fn(_) | ty::ty_char => {\n                 TC::None\n             }\n \n@@ -2108,6 +2108,10 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 object_contents(cx, store, mutbl, bounds)\n             }\n \n+            ty_ptr(ref mt) => {\n+                tc_ty(cx, mt.ty, cache).other_pointer(TC::None)\n+            }\n+\n             ty_rptr(r, ref mt) => {\n                 tc_ty(cx, mt.ty, cache).other_pointer(\n                     borrowed_contents(r, mt.mutbl))"}, {"sha": "3f119bc8ccbf002ff01695b24b0fb25dda48e2af", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71acc543ca0858a064c4bed848b507325c383939/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71acc543ca0858a064c4bed848b507325c383939/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=71acc543ca0858a064c4bed848b507325c383939", "patch": "@@ -414,10 +414,10 @@ impl UvIoFactory {\n /// callback in a situation where the task wil be immediately blocked\n /// afterwards. The `FsCallback` yielded must be invoked to reschedule the task\n /// (once the result of the operation is known).\n-fn uv_fs_helper<T>(loop_: &mut Loop,\n-                   retfn: extern \"Rust\" fn(&mut FsRequest) -> T,\n-                   cb: &fn(&mut FsRequest, &mut Loop, FsCallback))\n-        -> Result<T, IoError> {\n+fn uv_fs_helper<T:Send>(loop_: &mut Loop,\n+                        retfn: extern \"Rust\" fn(&mut FsRequest) -> T,\n+                        cb: &fn(&mut FsRequest, &mut Loop, FsCallback))\n+                        -> Result<T, IoError> {\n     let result_cell = Cell::new_empty();\n     let result_cell_ptr: *Cell<Result<T, IoError>> = &result_cell;\n     do task::unkillable { // FIXME(#8674)\n@@ -1025,14 +1025,12 @@ fn read_stream(mut watcher: StreamWatcher,\n     let result_cell = Cell::new_empty();\n     let result_cell_ptr: *Cell<Result<uint, IoError>> = &result_cell;\n \n-    let buf_ptr: *&mut [u8] = &buf;\n+    let uv_buf = slice_to_uv_buf(buf);\n     do scheduler.deschedule_running_task_and_then |_sched, task| {\n         let task_cell = Cell::new(task);\n         // XXX: We shouldn't reallocate these callbacks every\n         // call to read\n-        let alloc: AllocCallback = |_| unsafe {\n-            slice_to_uv_buf(*buf_ptr)\n-        };\n+        let alloc: AllocCallback = |_| uv_buf;\n         do watcher.read_start(alloc) |mut watcher, nread, _buf, status| {\n \n             // Stop reading so that no read callbacks are\n@@ -1280,11 +1278,10 @@ impl RtioUdpSocket for UvUdpSocket {\n         do self.home_for_io_with_sched |self_, scheduler| {\n             let result_cell = Cell::new_empty();\n             let result_cell_ptr: *Cell<Result<(uint, SocketAddr), IoError>> = &result_cell;\n-\n-            let buf_ptr: *&mut [u8] = &buf;\n+            let uv_buf = slice_to_uv_buf(buf);\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell::new(task);\n-                let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n+                let alloc: AllocCallback = |_| uv_buf;\n                 do self_.watcher.recv_start(alloc) |mut watcher, nread, _buf, addr, flags, status| {\n                     let _ = flags; // /XXX add handling for partials?\n "}, {"sha": "c83892e2a3b31a0ffb5e720efb6b6ec4e6c4178b", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/71acc543ca0858a064c4bed848b507325c383939/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71acc543ca0858a064c4bed848b507325c383939/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=71acc543ca0858a064c4bed848b507325c383939", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test which of the builtin types are considered freezeable.\n+\n+fn assert_freeze<T:Freeze>() { }\n+trait Dummy { }\n+\n+fn test<'a,T,U:Freeze>(_: &'a int) {\n+    // lifetime pointers are ok...\n+    assert_freeze::<&'static int>();\n+    assert_freeze::<&'a int>();\n+    assert_freeze::<&'a str>();\n+    assert_freeze::<&'a [int]>();\n+\n+    // ...unless they are mutable\n+    assert_freeze::<&'static mut int>(); //~ ERROR does not fulfill `Freeze`\n+    assert_freeze::<&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n+\n+    // ~ pointers are ok\n+    assert_freeze::<~int>();\n+    assert_freeze::<~str>();\n+    assert_freeze::<~[int]>();\n+\n+    // but not if they own a bad thing\n+    assert_freeze::<~&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n+\n+    // careful with object types, who knows what they close over...\n+    assert_freeze::<&'a Dummy>(); //~ ERROR does not fulfill `Freeze`\n+    assert_freeze::<~Dummy>(); //~ ERROR does not fulfill `Freeze`\n+\n+    // ...unless they are properly bounded\n+    assert_freeze::<&'a Dummy:Freeze>();\n+    assert_freeze::<&'static Dummy:Freeze>();\n+    assert_freeze::<~Dummy:Freeze>();\n+\n+    // ...but even then the pointer overrides\n+    assert_freeze::<&'a mut Dummy:Freeze>(); //~ ERROR does not fulfill `Freeze`\n+\n+    // closures are like an `&mut` object\n+    assert_freeze::<&fn()>(); //~ ERROR does not fulfill `Freeze`\n+\n+    // unsafe ptrs are ok unless they point at unfreezeable things\n+    assert_freeze::<*int>();\n+    assert_freeze::<*&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n+}\n+\n+fn main() {\n+}"}, {"sha": "bb5851ac5c8f1195a511d90159425136910eacd5", "filename": "src/test/compile-fail/kindck-send.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/71acc543ca0858a064c4bed848b507325c383939/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71acc543ca0858a064c4bed848b507325c383939/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs?ref=71acc543ca0858a064c4bed848b507325c383939", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test which of the builtin types are considered sendable.\n+\n+fn assert_send<T:Send>() { }\n+trait Dummy { }\n+\n+fn test<'a,T,U:Send>(_: &'a int) {\n+    // lifetime pointers with 'static lifetime are ok\n+    assert_send::<&'static int>();\n+    assert_send::<&'static str>();\n+    assert_send::<&'static [int]>();\n+\n+    // whether or not they are mutable\n+    assert_send::<&'static mut int>();\n+\n+    // otherwise lifetime pointers are not ok\n+    assert_send::<&'a int>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<&'a str>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<&'a [int]>(); //~ ERROR does not fulfill `Send`\n+\n+    // ~ pointers are ok\n+    assert_send::<~int>();\n+    assert_send::<~str>();\n+    assert_send::<~[int]>();\n+\n+    // but not if they own a bad thing\n+    assert_send::<~&'a int>(); //~ ERROR does not fulfill `Send`\n+\n+    // careful with object types, who knows what they close over...\n+    assert_send::<&'static Dummy>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<&'a Dummy>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<&'a Dummy:Send>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<~Dummy:>(); //~ ERROR does not fulfill `Send`\n+\n+    // ...unless they are properly bounded\n+    assert_send::<&'static Dummy:Send>();\n+    assert_send::<~Dummy:Send>();\n+\n+    // but closure and object types can have lifetime bounds which make\n+    // them not ok (FIXME #5121)\n+    // assert_send::<~fn:'a()>(); // ERROR does not fulfill `Send`\n+    // assert_send::<~Dummy:'a>(); // ERROR does not fulfill `Send`\n+\n+    // unsafe ptrs are ok unless they point at unsendable things\n+    assert_send::<*int>();\n+    assert_send::<*&'a int>(); //~ ERROR does not fulfill `Send`\n+}\n+\n+fn main() {\n+}"}]}