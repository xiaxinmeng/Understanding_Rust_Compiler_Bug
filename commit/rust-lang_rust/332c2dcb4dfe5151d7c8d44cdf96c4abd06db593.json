{"sha": "332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMmMyZGNiNGRmZTUxNTFkN2M4ZDQ0Y2RmOTZjNGFiZDA2ZGI1OTM=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-06T21:48:04Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-15T08:29:53Z"}, "message": "Fix dogfood after MatchTypeOnDiagItem", "tree": {"sha": "cddf40fa7e2fbd095c722e8ed46f410a742294b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddf40fa7e2fbd095c722e8ed46f410a742294b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "html_url": "https://github.com/rust-lang/rust/commit/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afa7ed6aec37c5423cffe12dbc854c954799fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afa7ed6aec37c5423cffe12dbc854c954799fb3", "html_url": "https://github.com/rust-lang/rust/commit/8afa7ed6aec37c5423cffe12dbc854c954799fb3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3d2fd0eee85a70c2536c83d170ad8d8f84342651", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "patch": "@@ -1114,7 +1114,7 @@ fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&\n             if let Some(self_expr) = args.get(0);\n             if let Some(pushed_item) = args.get(1);\n             // Check that the method being called is push() on a Vec\n-            if match_type(cx, cx.typeck_results().expr_ty(self_expr), &paths::VEC);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr), sym!(vec_type));\n             if path.ident.name.as_str() == \"push\";\n             then {\n                 return Some((self_expr, pushed_item))"}, {"sha": "de966cccd111c3da615ce9dceb35f9a87e4a86ff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "patch": "@@ -1808,7 +1808,7 @@ fn lint_or_fun_call<'tcx>(\n                     _ => (),\n                 }\n \n-                if match_type(cx, ty, &paths::VEC) {\n+                if is_type_diagnostic_item(cx, ty, sym!(vec_type)) {\n                     return;\n                 }\n             }"}, {"sha": "60e5e7bfed398e03ccd9226b3ce47d30b0edae41", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "patch": "@@ -1,6 +1,6 @@\n use crate::utils;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{match_type, paths, span_lint_and_sugg};\n+use crate::utils::{is_type_diagnostic_item, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n \n use rustc_errors::Applicability;\n@@ -73,7 +73,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(ref path, _, &[ref receiver], _) = &expr.kind {\n         path.ident.name.to_ident_string() == \"ok\"\n-            && match_type(cx, &cx.typeck_results().expr_ty(&receiver), &paths::RESULT)\n+            && is_type_diagnostic_item(cx, &cx.typeck_results().expr_ty(&receiver), sym!(result_type))\n     } else {\n         false\n     }"}]}