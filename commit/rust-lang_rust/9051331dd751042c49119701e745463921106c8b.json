{"sha": "9051331dd751042c49119701e745463921106c8b", "node_id": "C_kwDOAAsO6NoAKDkwNTEzMzFkZDc1MTA0MmM0OTExOTcwMWU3NDU0NjM5MjExMDZjOGI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:00:35Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:00:35Z"}, "message": "Lift `Pointer`'s requirement for the pointer to be thin\n\nfat pointers rule!", "tree": {"sha": "4d4a96c7a2d34c5c39b4815195ca94c7dc1a67e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4a96c7a2d34c5c39b4815195ca94c7dc1a67e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9051331dd751042c49119701e745463921106c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9051331dd751042c49119701e745463921106c8b", "html_url": "https://github.com/rust-lang/rust/commit/9051331dd751042c49119701e745463921106c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9051331dd751042c49119701e745463921106c8b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26232f1ff5a28f1dadd159a9604e668c55e40585", "url": "https://api.github.com/repos/rust-lang/rust/commits/26232f1ff5a28f1dadd159a9604e668c55e40585", "html_url": "https://github.com/rust-lang/rust/commit/26232f1ff5a28f1dadd159a9604e668c55e40585"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "2d0adfe2ae35b8a37566590d37fedba3adf9ab67", "filename": "compiler/rustc_data_structures/src/aligned.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs?ref=9051331dd751042c49119701e745463921106c8b", "patch": "@@ -0,0 +1,31 @@\n+use std::mem;\n+\n+/// Returns the ABI-required minimum alignment of a type in bytes.\n+///\n+/// This is equivalent to [`mem::align_of`], but also works for some unsized\n+/// types (e.g. slices or rustc's `List`s).\n+pub const fn align_of<T: ?Sized + Aligned>() -> usize {\n+    T::ALIGN\n+}\n+\n+/// A type with a statically known alignment.\n+///\n+/// # Safety\n+///\n+/// `Self::ALIGN` must be equal to the alignment of `Self`. For sized types it\n+/// is [`mem::align_of<Self>()`], for unsized types it depends on the type, for\n+/// example `[T]` has alignment of `T`.\n+///\n+/// [`mem::align_of<Self>()`]: mem::align_of\n+pub unsafe trait Aligned {\n+    /// Alignment of `Self`.\n+    const ALIGN: usize;\n+}\n+\n+unsafe impl<T> Aligned for T {\n+    const ALIGN: usize = mem::align_of::<Self>();\n+}\n+\n+unsafe impl<T> Aligned for [T] {\n+    const ALIGN: usize = mem::align_of::<T>();\n+}"}, {"sha": "ea1f71d7115ca97305d07a33a570524568d2a5a7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=9051331dd751042c49119701e745463921106c8b", "patch": "@@ -83,6 +83,7 @@ pub mod transitive_relation;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n+pub mod aligned;\n pub mod frozen;\n pub mod owned_slice;\n pub mod sso;"}, {"sha": "f45f5a42156451d5f84cc6e7d51b72f11eff53af", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=9051331dd751042c49119701e745463921106c8b", "patch": "@@ -13,12 +13,14 @@\n //! The tag must implement the `Tag` trait. We assert that the tag and `Pointer`\n //! are compatible at compile time.\n \n-use std::mem::{self, ManuallyDrop};\n+use std::mem::ManuallyDrop;\n use std::ops::Deref;\n use std::ptr::NonNull;\n use std::rc::Rc;\n use std::sync::Arc;\n \n+use crate::aligned::Aligned;\n+\n mod copy;\n mod drop;\n \n@@ -31,8 +33,7 @@ pub use drop::TaggedPtr;\n /// # Safety\n ///\n /// The pointer returned from [`into_ptr`] must be a [valid], pointer to\n-/// [`<Self as Deref>::Target`]. Note that pointers to [`Self::Target`] must be\n-/// thin, even though [`Self::Target`] may not be `Sized`.\n+/// [`<Self as Deref>::Target`].\n ///\n /// Note that if `Self` implements [`DerefMut`] the pointer returned from\n /// [`into_ptr`] must be valid for writes (and thus calling [`NonNull::as_mut`]\n@@ -110,7 +111,7 @@ pub unsafe trait Tag: Copy {\n     unsafe fn from_usize(tag: usize) -> Self;\n }\n \n-unsafe impl<T> Pointer for Box<T> {\n+unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n \n     #[inline]\n@@ -130,7 +131,7 @@ unsafe impl<T> Pointer for Box<T> {\n     }\n }\n \n-unsafe impl<T> Pointer for Rc<T> {\n+unsafe impl<T: ?Sized + Aligned> Pointer for Rc<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n \n     #[inline]\n@@ -149,7 +150,7 @@ unsafe impl<T> Pointer for Rc<T> {\n     }\n }\n \n-unsafe impl<T> Pointer for Arc<T> {\n+unsafe impl<T: ?Sized + Aligned> Pointer for Arc<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n \n     #[inline]\n@@ -168,7 +169,7 @@ unsafe impl<T> Pointer for Arc<T> {\n     }\n }\n \n-unsafe impl<'a, T: 'a> Pointer for &'a T {\n+unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a T {\n     const BITS: usize = bits_for::<Self::Target>();\n \n     #[inline]\n@@ -186,7 +187,7 @@ unsafe impl<'a, T: 'a> Pointer for &'a T {\n     }\n }\n \n-unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n+unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n     const BITS: usize = bits_for::<Self::Target>();\n \n     #[inline]\n@@ -206,8 +207,8 @@ unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n \n /// Returns the number of bits available for use for tags in a pointer to `T`\n /// (this is based on `T`'s alignment).\n-pub const fn bits_for<T>() -> usize {\n-    let bits = mem::align_of::<T>().trailing_zeros();\n+pub const fn bits_for<T: ?Sized + Aligned>() -> usize {\n+    let bits = crate::aligned::align_of::<T>().trailing_zeros();\n \n     // This is a replacement for `.try_into().unwrap()` unavailable in `const`\n     // (it's fine to make an assert here, since this is only called in compile time)"}, {"sha": "09d55b20ab4de1f9e4d43ea57ffedf554cd1c607", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=9051331dd751042c49119701e745463921106c8b", "patch": "@@ -55,12 +55,7 @@ where\n     }\n \n     const TAG_BIT_SHIFT: usize = usize::BITS as usize - T::BITS;\n-    const ASSERTION: () = {\n-        assert!(T::BITS <= P::BITS);\n-        // Used for the transmute_copy's below\n-        // TODO(waffle): do we need this assert anymore?\n-        assert!(std::mem::size_of::<&P::Target>() == std::mem::size_of::<usize>());\n-    };\n+    const ASSERTION: () = { assert!(T::BITS <= P::BITS) };\n \n     /// Pack pointer `ptr` that comes from [`P::into_ptr`] with a `tag`.\n     ///"}, {"sha": "590beef7f7d425048fcd44042c187b90e20851b3", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051331dd751042c49119701e745463921106c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=9051331dd751042c49119701e745463921106c8b", "patch": "@@ -1,5 +1,5 @@\n use crate::arena::Arena;\n-use rustc_data_structures::tagged_ptr::bits_for;\n+use rustc_data_structures::aligned::Aligned;\n use rustc_serialize::{Encodable, Encoder};\n use std::alloc::Layout;\n use std::cmp::Ordering;\n@@ -8,7 +8,7 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::mem;\n use std::ops::Deref;\n-use std::ptr::{self, NonNull};\n+use std::ptr;\n use std::slice;\n \n /// `List<T>` is a bit like `&[T]`, but with some critical differences.\n@@ -199,20 +199,17 @@ impl<'a, T: Copy> IntoIterator for &'a List<T> {\n \n unsafe impl<T: Sync> Sync for List<T> {}\n \n-unsafe impl<'a, T: 'a> rustc_data_structures::tagged_ptr::Pointer for &'a List<T> {\n-    const BITS: usize = bits_for::<usize>();\n-\n-    #[inline]\n-    fn into_ptr(self) -> NonNull<List<T>> {\n-        NonNull::from(self)\n-    }\n-\n-    #[inline]\n-    unsafe fn from_ptr(ptr: NonNull<List<T>>) -> &'a List<T> {\n-        ptr.as_ref()\n-    }\n+// Safety:\n+// Layouts of `Equivalent<T>` and `List<T>` are the same, modulo opaque tail,\n+// thus aligns of `Equivalent<T>` and `List<T>` must be the same.\n+unsafe impl<T> Aligned for List<T> {\n+    const ALIGN: usize = {\n+        #[repr(C)]\n+        struct Equivalent<T> {\n+            _len: usize,\n+            _data: [T; 0],\n+        }\n \n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<List<T>>, f: F) -> R {\n-        f(&ptr.as_ref())\n-    }\n+        mem::align_of::<Equivalent<T>>()\n+    };\n }"}]}