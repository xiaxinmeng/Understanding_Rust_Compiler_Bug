{"sha": "7e9a8e322a62e594146b2349ff427148ec7922ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWE4ZTMyMmE2MmU1OTQxNDZiMjM0OWZmNDI3MTQ4ZWM3OTIyYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T11:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T11:41:24Z"}, "message": "Auto merge of #26177 - jooert:fix26169, r=alexcrichton\n\nCloses #26169.\r\n\r\nr? @steveklabnik", "tree": {"sha": "3423a07dde080acc7be4f5369d7334f16a72e40e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3423a07dde080acc7be4f5369d7334f16a72e40e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9a8e322a62e594146b2349ff427148ec7922ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a8e322a62e594146b2349ff427148ec7922ae", "html_url": "https://github.com/rust-lang/rust/commit/7e9a8e322a62e594146b2349ff427148ec7922ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a8e322a62e594146b2349ff427148ec7922ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9e4245508a8ec94e2a3494d2e60c246b3a70ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9e4245508a8ec94e2a3494d2e60c246b3a70ce", "html_url": "https://github.com/rust-lang/rust/commit/fc9e4245508a8ec94e2a3494d2e60c246b3a70ce"}, {"sha": "5c9f069ece7a2d1bdbf79f085fe96de0d4033f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9f069ece7a2d1bdbf79f085fe96de0d4033f0f", "html_url": "https://github.com/rust-lang/rust/commit/5c9f069ece7a2d1bdbf79f085fe96de0d4033f0f"}], "stats": {"total": 125, "additions": 71, "deletions": 54}, "files": [{"sha": "1b8ee8db5f47a1ac485fe286f925ab6ac7efe81b", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 71, "deletions": 54, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a8e322a62e594146b2349ff427148ec7922ae/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a8e322a62e594146b2349ff427148ec7922ae/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=7e9a8e322a62e594146b2349ff427148ec7922ae", "patch": "@@ -216,7 +216,7 @@ impl AtomicBool {\n     ///\n     /// let some_bool = AtomicBool::new(true);\n     ///\n-    /// let value = some_bool.load(Ordering::Relaxed);\n+    /// assert_eq!(some_bool.load(Ordering::Relaxed), true);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -236,6 +236,7 @@ impl AtomicBool {\n     /// let some_bool = AtomicBool::new(true);\n     ///\n     /// some_bool.store(false, Ordering::Relaxed);\n+    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n     ///\n     /// # Panics\n@@ -260,7 +261,8 @@ impl AtomicBool {\n     ///\n     /// let some_bool = AtomicBool::new(true);\n     ///\n-    /// let value = some_bool.swap(false, Ordering::Relaxed);\n+    /// assert_eq!(some_bool.swap(false, Ordering::Relaxed), true);\n+    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +287,11 @@ impl AtomicBool {\n     ///\n     /// let some_bool = AtomicBool::new(true);\n     ///\n-    /// let value = some_bool.store(false, Ordering::Relaxed);\n+    /// assert_eq!(some_bool.compare_and_swap(true, false, Ordering::Relaxed), true);\n+    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n+    ///\n+    /// assert_eq!(some_bool.compare_and_swap(true, true, Ordering::Relaxed), false);\n+    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -309,16 +315,16 @@ impl AtomicBool {\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_and(false, Ordering::SeqCst));\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_and(false, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_and(true, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_and(true, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     ///\n     /// let foo = AtomicBool::new(false);\n-    /// assert_eq!(false, foo.fetch_and(false, Ordering::SeqCst));\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_and(false, Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -341,17 +347,17 @@ impl AtomicBool {\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_nand(false, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_nand(false, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_nand(true, Ordering::SeqCst));\n-    /// assert_eq!(0, foo.load(Ordering::SeqCst) as usize);\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_nand(true, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst) as usize, 0);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     ///\n     /// let foo = AtomicBool::new(false);\n-    /// assert_eq!(false, foo.fetch_nand(false, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_nand(false, Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -374,16 +380,16 @@ impl AtomicBool {\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_or(false, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_or(false, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_or(true, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_or(true, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     ///\n     /// let foo = AtomicBool::new(false);\n-    /// assert_eq!(false, foo.fetch_or(false, Ordering::SeqCst));\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_or(false, Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -406,16 +412,16 @@ impl AtomicBool {\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_xor(false, Ordering::SeqCst));\n-    /// assert_eq!(true, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_xor(false, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     ///\n     /// let foo = AtomicBool::new(true);\n-    /// assert_eq!(true, foo.fetch_xor(true, Ordering::SeqCst));\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_xor(true, Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     ///\n     /// let foo = AtomicBool::new(false);\n-    /// assert_eq!(false, foo.fetch_xor(false, Ordering::SeqCst));\n-    /// assert_eq!(false, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_xor(false, Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -458,7 +464,7 @@ impl AtomicIsize {\n     ///\n     /// let some_isize = AtomicIsize::new(5);\n     ///\n-    /// let value = some_isize.load(Ordering::Relaxed);\n+    /// assert_eq!(some_isize.load(Ordering::Relaxed), 5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -478,6 +484,7 @@ impl AtomicIsize {\n     /// let some_isize = AtomicIsize::new(5);\n     ///\n     /// some_isize.store(10, Ordering::Relaxed);\n+    /// assert_eq!(some_isize.load(Ordering::Relaxed), 10);\n     /// ```\n     ///\n     /// # Panics\n@@ -500,7 +507,7 @@ impl AtomicIsize {\n     ///\n     /// let some_isize = AtomicIsize::new(5);\n     ///\n-    /// let value = some_isize.swap(10, Ordering::Relaxed);\n+    /// assert_eq!(some_isize.swap(10, Ordering::Relaxed), 5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -523,7 +530,11 @@ impl AtomicIsize {\n     ///\n     /// let some_isize = AtomicIsize::new(5);\n     ///\n-    /// let value = some_isize.compare_and_swap(5, 10, Ordering::Relaxed);\n+    /// assert_eq!(some_isize.compare_and_swap(5, 10, Ordering::Relaxed), 5);\n+    /// assert_eq!(some_isize.load(Ordering::Relaxed), 10);\n+    ///\n+    /// assert_eq!(some_isize.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n+    /// assert_eq!(some_isize.load(Ordering::Relaxed), 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -539,8 +550,8 @@ impl AtomicIsize {\n     /// use std::sync::atomic::{AtomicIsize, Ordering};\n     ///\n     /// let foo = AtomicIsize::new(0);\n-    /// assert_eq!(0, foo.fetch_add(10, Ordering::SeqCst));\n-    /// assert_eq!(10, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -556,8 +567,8 @@ impl AtomicIsize {\n     /// use std::sync::atomic::{AtomicIsize, Ordering};\n     ///\n     /// let foo = AtomicIsize::new(0);\n-    /// assert_eq!(0, foo.fetch_sub(10, Ordering::SeqCst));\n-    /// assert_eq!(-10, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 0);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), -10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -573,8 +584,8 @@ impl AtomicIsize {\n     /// use std::sync::atomic::{AtomicIsize, Ordering};\n     ///\n     /// let foo = AtomicIsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_and(&self, val: isize, order: Ordering) -> isize {\n@@ -589,8 +600,8 @@ impl AtomicIsize {\n     /// use std::sync::atomic::{AtomicIsize, Ordering};\n     ///\n     /// let foo = AtomicIsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_or(&self, val: isize, order: Ordering) -> isize {\n@@ -605,8 +616,8 @@ impl AtomicIsize {\n     /// use std::sync::atomic::{AtomicIsize, Ordering};\n     ///\n     /// let foo = AtomicIsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_xor(&self, val: isize, order: Ordering) -> isize {\n@@ -646,7 +657,7 @@ impl AtomicUsize {\n     ///\n     /// let some_usize = AtomicUsize::new(5);\n     ///\n-    /// let value = some_usize.load(Ordering::Relaxed);\n+    /// assert_eq!(some_usize.load(Ordering::Relaxed), 5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -666,6 +677,7 @@ impl AtomicUsize {\n     /// let some_usize = AtomicUsize::new(5);\n     ///\n     /// some_usize.store(10, Ordering::Relaxed);\n+    /// assert_eq!(some_usize.load(Ordering::Relaxed), 10);\n     /// ```\n     ///\n     /// # Panics\n@@ -688,7 +700,8 @@ impl AtomicUsize {\n     ///\n     /// let some_usize= AtomicUsize::new(5);\n     ///\n-    /// let value = some_usize.swap(10, Ordering::Relaxed);\n+    /// assert_eq!(some_usize.swap(10, Ordering::Relaxed), 5);\n+    /// assert_eq!(some_usize.load(Ordering::Relaxed), 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -711,7 +724,11 @@ impl AtomicUsize {\n     ///\n     /// let some_usize = AtomicUsize::new(5);\n     ///\n-    /// let value = some_usize.compare_and_swap(5, 10, Ordering::Relaxed);\n+    /// assert_eq!(some_usize.compare_and_swap(5, 10, Ordering::Relaxed), 5);\n+    /// assert_eq!(some_usize.load(Ordering::Relaxed), 10);\n+    ///\n+    /// assert_eq!(some_usize.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n+    /// assert_eq!(some_usize.load(Ordering::Relaxed), 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -727,8 +744,8 @@ impl AtomicUsize {\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n     /// let foo = AtomicUsize::new(0);\n-    /// assert_eq!(0, foo.fetch_add(10, Ordering::SeqCst));\n-    /// assert_eq!(10, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -744,8 +761,8 @@ impl AtomicUsize {\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n     /// let foo = AtomicUsize::new(10);\n-    /// assert_eq!(10, foo.fetch_sub(10, Ordering::SeqCst));\n-    /// assert_eq!(0, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 10);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -761,8 +778,8 @@ impl AtomicUsize {\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n     /// let foo = AtomicUsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_and(&self, val: usize, order: Ordering) -> usize {\n@@ -777,8 +794,8 @@ impl AtomicUsize {\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n     /// let foo = AtomicUsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_or(&self, val: usize, order: Ordering) -> usize {\n@@ -793,8 +810,8 @@ impl AtomicUsize {\n     /// use std::sync::atomic::{AtomicUsize, Ordering};\n     ///\n     /// let foo = AtomicUsize::new(0b101101);\n-    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n-    /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n+    /// assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_xor(&self, val: usize, order: Ordering) -> usize {"}]}