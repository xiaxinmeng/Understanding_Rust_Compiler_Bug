{"sha": "f8d3aa590808a4953770012a2af8dbc4a6e1c120", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDNhYTU5MDgwOGE0OTUzNzcwMDEyYTJhZjhkYmM0YTZlMWMxMjA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-22T23:12:02Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-22T23:12:02Z"}, "message": "Add a path to the parent dir of rustfmt.toml as a prefix\n\nPaths users specify in `ignore` configuraiton option is relative to the\ndirectory which contains the rustfmt.toml file. When processing the ignore paths\ninternally, rustfmt should add a path to the directory as a  prefix since\nRealPath passed from libsyntax is a full path.", "tree": {"sha": "28ae4046b98949e08c77aabd15e0d4ff0a052206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ae4046b98949e08c77aabd15e0d4ff0a052206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d3aa590808a4953770012a2af8dbc4a6e1c120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d3aa590808a4953770012a2af8dbc4a6e1c120", "html_url": "https://github.com/rust-lang/rust/commit/f8d3aa590808a4953770012a2af8dbc4a6e1c120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d3aa590808a4953770012a2af8dbc4a6e1c120/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f61286293d1dc6ccde1713c5ded5cbdb2240b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f61286293d1dc6ccde1713c5ded5cbdb2240b20", "html_url": "https://github.com/rust-lang/rust/commit/1f61286293d1dc6ccde1713c5ded5cbdb2240b20"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "7c4298dcf1c099b59e149c666780ad58110b900f", "filename": "src/config/config_type.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=f8d3aa590808a4953770012a2af8dbc4a6e1c120", "patch": "@@ -141,7 +141,7 @@ macro_rules! create_config {\n                 ConfigWasSet(self)\n             }\n \n-            fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n+            fn fill_from_parsed_config(mut self, parsed: PartialConfig, dir: &Path) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n                     if self.$i.3 {\n@@ -160,6 +160,7 @@ macro_rules! create_config {\n             )+\n                 self.set_heuristics();\n                 self.set_license_template();\n+                self.set_ignore(dir);\n                 self\n             }\n \n@@ -286,6 +287,9 @@ macro_rules! create_config {\n                 }\n             }\n \n+            fn set_ignore(&mut self, dir: &Path) {\n+                self.ignore.2.add_prefix(dir);\n+            }\n \n             /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {"}, {"sha": "c0221e93e0259b5ca383a4df3ce63e50ba3a09fd", "filename": "src/config/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=f8d3aa590808a4953770012a2af8dbc4a6e1c120", "patch": "@@ -190,7 +190,8 @@ impl Config {\n         let mut file = File::open(&file_path)?;\n         let mut toml = String::new();\n         file.read_to_string(&mut toml)?;\n-        Config::from_toml(&toml).map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+        Config::from_toml(&toml, file_path.parent().unwrap())\n+            .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n     }\n \n     /// Resolves the config for input in `dir`.\n@@ -252,7 +253,7 @@ impl Config {\n         }\n     }\n \n-    pub(crate) fn from_toml(toml: &str) -> Result<Config, String> {\n+    pub(crate) fn from_toml(toml: &str, dir: &Path) -> Result<Config, String> {\n         let parsed: ::toml::Value = toml\n             .parse()\n             .map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n@@ -271,7 +272,7 @@ impl Config {\n                 if !err.is_empty() {\n                     eprint!(\"{}\", err);\n                 }\n-                Ok(Config::default().fill_from_parsed_config(parsed_config))\n+                Ok(Config::default().fill_from_parsed_config(parsed_config, dir))\n             }\n             Err(e) => {\n                 err.push_str(\"Error: Decoding config file failed:\\n\");\n@@ -425,7 +426,7 @@ mod test {\n \n     #[test]\n     fn test_was_set() {\n-        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+        let config = Config::from_toml(\"hard_tabs = true\", Path::new(\"\")).unwrap();\n \n         assert_eq!(config.was_set().hard_tabs(), true);\n         assert_eq!(config.was_set().verbose(), false);"}, {"sha": "b0ebef621706fcbc493bc237297b2f844f58add2", "filename": "src/ignore_path.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=f8d3aa590808a4953770012a2af8dbc4a6e1c120", "patch": "@@ -1,6 +1,7 @@\n-use ignore::{self, gitignore};\n use std::path::PathBuf;\n \n+use ignore::{self, gitignore};\n+\n use crate::config::{FileName, IgnoreList};\n \n pub struct IgnorePathSet {\n@@ -33,16 +34,19 @@ impl IgnorePathSet {\n \n #[cfg(test)]\n mod test {\n+    use std::path::{Path, PathBuf};\n+\n     use crate::config::{Config, FileName};\n     use crate::ignore_path::IgnorePathSet;\n-    use std::path::PathBuf;\n \n     #[test]\n     fn test_ignore_path_set() {\n         match option_env!(\"CFG_RELEASE_CHANNEL\") {\n             // this test requires nightly\n             None | Some(\"nightly\") => {\n-                let config = Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#).unwrap();\n+                let config =\n+                    Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#, Path::new(\"\"))\n+                        .unwrap();\n                 let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n \n                 assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));"}, {"sha": "6766ba2af5462b3879a8a3c7252a76704421a94e", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d3aa590808a4953770012a2af8dbc4a6e1c120/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=f8d3aa590808a4953770012a2af8dbc4a6e1c120", "patch": "@@ -564,7 +564,7 @@ fn get_config(config_file: Option<&Path>) -> Config {\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config).expect(\"invalid TOML\")\n+    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"invalid TOML\")\n }\n \n // Reads significant comments of the form: `// rustfmt-key: value` into a hash map."}]}