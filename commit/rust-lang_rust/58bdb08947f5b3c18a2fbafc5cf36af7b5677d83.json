{"sha": "58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmRiMDg5NDdmNWIzYzE4YTJmYmFmYzVjZjM2YWY3YjU2NzdkODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T14:00:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T14:00:49Z"}, "message": "Auto merge of #84299 - lcnr:const-generics-defaults-name-res, r=varkor\n\nvarious const parameter defaults improvements\n\nActually resolve names in const parameter defaults, fixing `struct Foo<const N: usize = { usize::MAX }>`.\n\n---\nSplit generic parameter ban rib for types and consts, allowing\n```rust\n#![feature(const_generics_defaults)]\nstruct Q;\nstruct Foo<T = Q, const Q: usize = 3>(T);\n```\n\n---\nRemove the type/const ordering restriction if `const_generics_defaults` is active, even if `const_generics` is not. allowing us to stabilize and test const param defaults separately.\n\n---\nCheck well formedness of const parameter defaults, eagerly emitting an error for `struct Foo<const N: usize = { 0 - 1 }>`\n\n---\nDo not forbid const parameters in param defaults, allowing `struct Foo<const N: usize, T = [u8; N]>(T)` and `struct Foo<const N: usize, const M: usize = N>`. Note that this should not change anything which is stabilized, as on stable, type parameters must be in front of const parameters, which means that type parameter defaults are only allowed if no const parameters exist.\n\nWe still forbid generic parameters inside of const param types.\n\nr? `@varkor` `@petrochenkov`", "tree": {"sha": "0d765ee7eb8eeb41cf8e285dc319bc0c8c71836c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d765ee7eb8eeb41cf8e285dc319bc0c8c71836c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "html_url": "https://github.com/rust-lang/rust/commit/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f0adb34570ba83fee391abeb0bec0eec28a234", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f0adb34570ba83fee391abeb0bec0eec28a234", "html_url": "https://github.com/rust-lang/rust/commit/06f0adb34570ba83fee391abeb0bec0eec28a234"}, {"sha": "d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "html_url": "https://github.com/rust-lang/rust/commit/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d"}], "stats": {"total": 604, "additions": 386, "deletions": 218}, "files": [{"sha": "6d6438920c09b9d04e3c76dbe02ed359947fd51f", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -754,7 +754,7 @@ fn validate_generic_param_order(\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                let unordered = sess.features_untracked().const_generics;\n+                let unordered = sess.features_untracked().unordered_const_ty_params();\n                 (ParamKindOrd::Const { unordered }, Some(format!(\"const {}: {}\", param.ident, ty)))\n             }\n         };"}, {"sha": "7ae7e0094c6d193b2bf1e02cf6d730e2c1b0f3aa", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -63,6 +63,10 @@ macro_rules! declare_features {\n                     _ => panic!(\"`{}` was not listed in `declare_features`\", feature),\n                 }\n             }\n+\n+            pub fn unordered_const_ty_params(&self) -> bool {\n+                self.const_generics || self.const_generics_defaults\n+            }\n         }\n     };\n }"}, {"sha": "5baaaad7370fc6f2bbf1c813154a147743d367e2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -296,7 +296,9 @@ impl GenericArg<'_> {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => ast::ParamKindOrd::Const { unordered: feats.const_generics },\n+            GenericArg::Const(_) => {\n+                ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n+            }\n         }\n     }\n }"}, {"sha": "c8fdbc30d1591cd2089819c1119da7557937d0e0", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -36,7 +36,7 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n             GenericParamDefKind::Const { .. } => {\n-                ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n+                ast::ParamKindOrd::Const { unordered: tcx.features().unordered_const_ty_params() }\n             }\n         }\n     }"}, {"sha": "c5f12c0c691b3c948b1cde39e2fdab2fc1d4907e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -472,17 +472,6 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n-            ResolutionError::ParamInAnonConstInTyDefault(name) => {\n-                let mut err = self.session.struct_span_err(\n-                    span,\n-                    \"constant values inside of type parameter defaults must not depend on generic parameters\",\n-                );\n-                err.span_label(\n-                    span,\n-                    format!(\"the anonymous constant must not depend on the parameter `{}`\", name),\n-                );\n-                err\n-            }\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,"}, {"sha": "92f21191de4308a8c12082a128382675f9b16570", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -555,18 +555,23 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut default_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n-        let mut found_default = false;\n-        default_ban_rib.bindings.extend(generics.params.iter().filter_map(\n-            |param| match param.kind {\n-                GenericParamKind::Type { default: Some(_), .. }\n-                | GenericParamKind::Const { default: Some(_), .. } => {\n-                    found_default = true;\n-                    Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n+        let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        for param in generics.params.iter() {\n+            match param.kind {\n+                GenericParamKind::Type { .. } => {\n+                    forward_ty_ban_rib\n+                        .bindings\n+                        .insert(Ident::with_dummy_span(param.ident.name), Res::Err);\n                 }\n-                _ => None,\n-            },\n-        ));\n+                GenericParamKind::Const { .. } => {\n+                    forward_const_ban_rib\n+                        .bindings\n+                        .insert(Ident::with_dummy_span(param.ident.name), Res::Err);\n+                }\n+                GenericParamKind::Lifetime => {}\n+            }\n+        }\n \n         // rust-lang/rust#61631: The type `Self` is essentially\n         // another type parameter. For ADTs, we consider it\n@@ -579,7 +584,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // such as in the case of `trait Add<Rhs = Self>`.)\n         if self.diagnostic_metadata.current_self_item.is_some() {\n             // (`Some` if + only if we are in ADT's generics.)\n-            default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n+            forward_ty_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n         }\n \n         for param in &generics.params {\n@@ -591,32 +596,38 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n \n                     if let Some(ref ty) = default {\n-                        self.ribs[TypeNS].push(default_ban_rib);\n-                        self.with_rib(ValueNS, ForwardGenericParamBanRibKind, |this| {\n-                            // HACK: We use an empty `ForwardGenericParamBanRibKind` here which\n-                            // is only used to forbid the use of const parameters inside of\n-                            // type defaults.\n-                            //\n-                            // While the rib name doesn't really fit here, it does allow us to use the same\n-                            // code for both const and type parameters.\n-                            this.visit_ty(ty);\n-                        });\n-                        default_ban_rib = self.ribs[TypeNS].pop().unwrap();\n+                        self.ribs[TypeNS].push(forward_ty_ban_rib);\n+                        self.ribs[ValueNS].push(forward_const_ban_rib);\n+                        self.visit_ty(ty);\n+                        forward_const_ban_rib = self.ribs[ValueNS].pop().unwrap();\n+                        forward_ty_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                     }\n \n                     // Allow all following defaults to refer to this type parameter.\n-                    default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n+                    forward_ty_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n-                    // FIXME(const_generics_defaults): handle `default` value here\n-                    for bound in &param.bounds {\n-                        self.visit_param_bound(bound);\n-                    }\n+                GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n+                    // Const parameters can't have param bounds.\n+                    assert!(param.bounds.is_empty());\n+\n                     self.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n                     self.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n                     self.visit_ty(ty);\n                     self.ribs[TypeNS].pop().unwrap();\n                     self.ribs[ValueNS].pop().unwrap();\n+\n+                    if let Some(ref expr) = default {\n+                        self.ribs[TypeNS].push(forward_ty_ban_rib);\n+                        self.ribs[ValueNS].push(forward_const_ban_rib);\n+                        self.visit_anon_const(expr);\n+                        forward_const_ban_rib = self.ribs[ValueNS].pop().unwrap();\n+                        forward_ty_ban_rib = self.ribs[TypeNS].pop().unwrap();\n+                    }\n+\n+                    // Allow all following defaults to refer to this const parameter.\n+                    forward_const_ban_rib\n+                        .bindings\n+                        .remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n             }\n         }"}, {"sha": "1d1969f7e78abeba3a9ce9b6aed0237280510b3e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 50, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -239,8 +239,6 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n-    /// constant values inside of type parameter defaults must not depend on generic parameters.\n-    ParamInAnonConstInTyDefault(Symbol),\n     /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n@@ -2672,26 +2670,18 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n-                let mut in_ty_param_default = false;\n                 for rib in ribs {\n-                    let has_generic_params = match rib.kind {\n+                    let has_generic_params: HasGenericParams = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..) => {\n+                        | MacroDefinition(..)\n+                        | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n \n-                        // We only forbid constant items if we are inside of type defaults,\n-                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardGenericParamBanRibKind => {\n-                            // FIXME(const_generic_defaults): we may need to distinguish between\n-                            // being in type parameter defaults and const parameter defaults\n-                            in_ty_param_default = true;\n-                            continue;\n-                        }\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n@@ -2720,19 +2710,7 @@ impl<'a> Resolver<'a> {\n                                 }\n                             }\n \n-                            if in_ty_param_default {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInAnonConstInTyDefault(\n-                                            rib_ident.name,\n-                                        ),\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            } else {\n-                                continue;\n-                            }\n+                            continue;\n                         }\n \n                         // This was an attempt to use a type parameter outside its scope.\n@@ -2770,23 +2748,15 @@ impl<'a> Resolver<'a> {\n                     ribs.next();\n                 }\n \n-                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..) => continue,\n-\n-                        // We only forbid constant items if we are inside of type defaults,\n-                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardGenericParamBanRibKind => {\n-                            // FIXME(const_generic_defaults): we may need to distinguish between\n-                            // being in type parameter defaults and const parameter defaults\n-                            in_ty_param_default = true;\n-                            continue;\n-                        }\n+                        | MacroDefinition(..)\n+                        | ForwardGenericParamBanRibKind => continue,\n+\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n@@ -2808,19 +2778,7 @@ impl<'a> Resolver<'a> {\n                                 return Res::Err;\n                             }\n \n-                            if in_ty_param_default {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInAnonConstInTyDefault(\n-                                            rib_ident.name,\n-                                        ),\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            } else {\n-                                continue;\n-                            }\n+                            continue;\n                         }\n \n                         ItemRibKind(has_generic_params) => has_generic_params,"}, {"sha": "2bbb38c294d5755587b49f2451aadfa973c481a0", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -286,7 +286,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                         ParamKindOrd::Const {\n                                                             unordered: tcx\n                                                                 .features()\n-                                                                .const_generics,\n+                                                                .unordered_const_ty_params(),\n                                                         }\n                                                     }\n                                                 },\n@@ -309,7 +309,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n                                             GenericArg::Type(_) => ParamKindOrd::Type,\n                                             GenericArg::Const(_) => ParamKindOrd::Const {\n-                                                unordered: tcx.features().const_generics,\n+                                                unordered: tcx\n+                                                    .features()\n+                                                    .unordered_const_ty_params(),\n                                             },\n                                         }),\n                                         Some(&format!("}, {"sha": "62a1584d16be0754ecfe1b32319b5810edca2994", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -513,7 +513,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).into()\n+                            tcx.const_param_default(param.def_id)\n+                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n+                                .into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "a50f8e1c655996fef3a7f50d24e7509314ac67c8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1446,7 +1446,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default, .. } => {\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).into()\n+                            tcx.const_param_default(param.def_id)\n+                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n+                                .into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "26871d6f0285cecbf1449e44e3cdec0c1c0133e6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -728,20 +728,36 @@ fn check_where_clauses<'tcx, 'fcx>(\n     //\n     // Here, the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n     for param in &generics.params {\n-        if let GenericParamDefKind::Type { .. } = param.kind {\n-            if is_our_default(&param) {\n-                let ty = fcx.tcx.type_of(param.def_id);\n-                // Ignore dependent defaults -- that is, where the default of one type\n-                // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n-                // be sure if it will error or not as user might always specify the other.\n-                if !ty.needs_subst() {\n+        match param.kind {\n+            GenericParamDefKind::Type { .. } => {\n+                if is_our_default(&param) {\n+                    let ty = fcx.tcx.type_of(param.def_id);\n+                    // Ignore dependent defaults -- that is, where the default of one type\n+                    // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n+                    // be sure if it will error or not as user might always specify the other.\n+                    if !ty.needs_subst() {\n+                        fcx.register_wf_obligation(\n+                            ty.into(),\n+                            fcx.tcx.def_span(param.def_id),\n+                            ObligationCauseCode::MiscObligation,\n+                        );\n+                    }\n+                }\n+            }\n+            GenericParamDefKind::Const { .. } => {\n+                // FIXME(const_generics_defaults): Figure out if this\n+                // is the behavior we want, see the comment further below.\n+                if is_our_default(&param) {\n+                    let default_ct = tcx.const_param_default(param.def_id);\n                     fcx.register_wf_obligation(\n-                        ty.into(),\n+                        default_ct.into(),\n                         fcx.tcx.def_span(param.def_id),\n                         ObligationCauseCode::MiscObligation,\n                     );\n                 }\n             }\n+            // Doesn't have defaults.\n+            GenericParamDefKind::Lifetime => {}\n         }\n     }\n \n@@ -774,14 +790,25 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 fcx.tcx.mk_param_from_def(param)\n             }\n             GenericParamDefKind::Const { .. } => {\n+                // FIXME(const_generics_defaults): I(@lcnr) feel like always\n+                // using the const parameter is the right choice here, even\n+                // if it needs substs.\n+                //\n+                // Before stabilizing this we probably want to get some tests\n+                // where this makes a difference and figure out what's the exact\n+                // behavior we want here.\n+\n+                // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    // Const params currently have to be concrete.\n-                    assert!(!default_ct.needs_subst());\n-                    default_ct.into()\n-                } else {\n-                    fcx.tcx.mk_param_from_def(param)\n+                    // ... and it's not a dependent default, ...\n+                    if !default_ct.needs_subst() {\n+                        // ... then substitute it with the default.\n+                        return default_ct.into();\n+                    }\n                 }\n+\n+                fcx.tcx.mk_param_from_def(param)\n             }\n         }\n     });"}, {"sha": "46ee82454326a2695dce7f5b80849252fb1558a2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1327,29 +1327,31 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-struct AnonConstInParamListDetector {\n-    in_param_list: bool,\n-    found_anon_const_in_list: bool,\n+struct AnonConstInParamTyDetector {\n+    in_param_ty: bool,\n+    found_anon_const_in_param_ty: bool,\n     ct: HirId,\n }\n \n-impl<'v> Visitor<'v> for AnonConstInParamListDetector {\n+impl<'v> Visitor<'v> for AnonConstInParamTyDetector {\n     type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n     fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n-        let prev = self.in_param_list;\n-        self.in_param_list = true;\n-        intravisit::walk_generic_param(self, p);\n-        self.in_param_list = prev;\n+        if let GenericParamKind::Const { ref ty, default: _ } = p.kind {\n+            let prev = self.in_param_ty;\n+            self.in_param_ty = true;\n+            self.visit_ty(ty);\n+            self.in_param_ty = prev;\n+        }\n     }\n \n     fn visit_anon_const(&mut self, c: &'v hir::AnonConst) {\n-        if self.in_param_list && self.ct == c.hir_id {\n-            self.found_anon_const_in_list = true;\n+        if self.in_param_ty && self.ct == c.hir_id {\n+            self.found_anon_const_in_param_ty = true;\n         } else {\n             intravisit::walk_anon_const(self, c)\n         }\n@@ -1377,27 +1379,24 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n-            let mut in_param_list = false;\n+            let mut in_param_ty = false;\n             for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n                 if let Some(generics) = node.generics() {\n-                    let mut visitor = AnonConstInParamListDetector {\n-                        in_param_list: false,\n-                        found_anon_const_in_list: false,\n+                    let mut visitor = AnonConstInParamTyDetector {\n+                        in_param_ty: false,\n+                        found_anon_const_in_param_ty: false,\n                         ct: hir_id,\n                     };\n \n                     visitor.visit_generics(generics);\n-                    in_param_list = visitor.found_anon_const_in_list;\n+                    in_param_ty = visitor.found_anon_const_in_param_ty;\n                     break;\n                 }\n             }\n \n-            if in_param_list {\n+            if in_param_ty {\n                 // We do not allow generic parameters in anon consts if we are inside\n-                // of a param list.\n-                //\n-                // This affects both default type bindings, e.g. `struct<T, U = [u8; std::mem::size_of::<T>()]>(T, U)`,\n-                // and the types of const parameters, e.g. `struct V<const N: usize, const M: [u8; N]>();`.\n+                // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n                 // HACK(eddyb) this provides the correct generics when"}, {"sha": "6514409698e3e6fda6c46dfd28083691563207f6", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "e0e2b6c69f28062230e181bbfe87ac2ed6fa89cd", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/complex-generic-default-expr.rs:6:34\n+   |\n+LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+   |                                  ^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/complex-generic-default-expr.rs:10:21\n+   |\n+LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+   |                     ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "58abd8db9f09fe3760d9168817a9a84b4f4186d5", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,20 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-generic-default-expr.rs:6:47\n+   |\n+LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+   |                                               ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-generic-default-expr.rs:10:62\n+   |\n+LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+   |                                                              ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a7b712f7b4b863652f1dd4d91a88d4090eb1075e", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,14 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n+\n+struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n+\n+fn main() {}"}, {"sha": "4fa21b8b1fb787b557a7bd52128425a6a8f3a6ba", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "59ac261f44fd5bcea26ce74777c3eeb4494885d2", "filename": "src/test/ui/const-generics/defaults/const-param-as-default-value.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: usize, const M: usize = N>([u8; N], [u8; M]);\n+\n+fn foo<const N: usize>() -> Foo<N> {\n+    let x = [0; N];\n+    Foo(x, x)\n+}\n+\n+// To check that we actually apply the correct substs for const param defaults.\n+fn concrete_foo() -> Foo<13> {\n+    Foo(Default::default(), Default::default())\n+}\n+\n+\n+fn main() {\n+    let val = foo::<13>();\n+    assert_eq!(val.0, val.1);\n+\n+    let val = concrete_foo();\n+    assert_eq!(val.0, val.1);\n+}"}, {"sha": "3f534ca0308ba819fea027149bd265ac76192829", "filename": "src/test/ui/const-generics/defaults/const-param-in-ty-defaults.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: usize, T = [u8; N]>(T);\n+\n+impl<const N: usize> Foo<N> {\n+    fn new() -> Self {\n+        Foo([0; N])\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(Foo::new().0, [0; 10]);\n+}"}, {"sha": "c417a26842ed199cd97d7edc7dc816fa8ae1a846", "filename": "src/test/ui/const-generics/defaults/default-on-impl.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,8 @@\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default-on-impl.rs:8:12\n+   |\n+LL | impl<const N: usize = 1> Foo<N> {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c417a26842ed199cd97d7edc7dc816fa8ae1a846", "filename": "src/test/ui/const-generics/defaults/default-on-impl.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,8 @@\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default-on-impl.rs:8:12\n+   |\n+LL | impl<const N: usize = 1> Foo<N> {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "735549defeaf07f9e5c35accf60917803098b000", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,11 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize = 1> Foo<N> {}\n+//~^ ERROR defaults for const parameters are only allowed\n+\n+fn main() {}"}, {"sha": "4bb56c6a1c08c35129d8400e6989f3881b9b1a44", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,5 @@\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: u8 = { 255 + 1 }>;\n+//~^ ERROR evaluation of constant value failed\n+fn main() {}"}, {"sha": "8464ea98bf695497f618143f3c3204621ddb9315", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/default-param-wf-concrete.rs:3:28\n+   |\n+LL | struct Foo<const N: u8 = { 255 + 1 }>;\n+   |                            ^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "32acf567cf2b98d19012d742adf726381737629e", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,5 +1,7 @@\n // aux-build:const_defaulty.rs\n // check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "29d835e36c6eb74d9830d0cb2bcc25494235b0a3", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`"}, {"sha": "985e7b655ece9482038d40a1b564aee406129f59", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,26 +1,14 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n \n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:32\n-   |\n-LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:10:28\n-   |\n-LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "307e3aaf1fbf38f532b155af97bdcf47b15c4942", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,15 +1,13 @@\n-// revisions: full min\n // Checks that lifetimes cannot be interspersed between consts and types.\n+// revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters\n-//[min]~^^ Error type parameters must be declared prior to const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//[full]~^ Error lifetime parameters must be declared prior to type parameters\n-//[min]~^^ Error type parameters must be declared prior to const parameters\n-//[min]~| Error lifetime parameters must be declared prior to const parameters\n+//~^ Error lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "be4f364d8ee62dc779480933c2d2842c28f2858d", "filename": "src/test/ui/const-generics/defaults/mismatch.full.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:11:28\n+  --> $DIR/mismatch.rs:12:28\n    |\n LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n    |            |\n    |            expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:13:34\n+  --> $DIR/mismatch.rs:14:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -18,7 +18,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n+  --> $DIR/mismatch.rs:16:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -29,7 +29,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:17:28\n+  --> $DIR/mismatch.rs:18:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -40,7 +40,7 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n+  --> $DIR/mismatch.rs:22:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`", "previous_filename": "src/test/ui/const-generics/defaults/mismatch.stderr"}, {"sha": "be4f364d8ee62dc779480933c2d2842c28f2858d", "filename": "src/test/ui/const-generics/defaults/mismatch.min.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:12:28\n+   |\n+LL |     let e: Example::<13> = ();\n+   |            -------------   ^^ expected struct `Example`, found `()`\n+   |            |\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:14:34\n+   |\n+LL |     let e: Example2::<u32, 13> = ();\n+   |            -------------------   ^^ expected struct `Example2`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example2`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:16:34\n+   |\n+LL |     let e: Example3::<13, u32> = ();\n+   |            -------------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example3`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:18:28\n+   |\n+LL |     let e: Example3::<7> = ();\n+   |            -------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example3<7_usize>`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:22:28\n+   |\n+LL |     let e: Example4::<7> = ();\n+   |            -------------   ^^ expected struct `Example4`, found `()`\n+   |            |\n+   |            expected due to this\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "68a640c0a08b31bb6fd8cdf3c5427cc42b017f26", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,4 +1,5 @@\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "7a57950dfc924d9cb19e851e008cd79dd3d84d1e", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -10,4 +10,4 @@ trait Foo<const KIND: bool = true> {}\n \n fn foo<const SIZE: usize = 5>() {}\n \n-struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = {FROM + LEN}>;\n+struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = FROM>;"}, {"sha": "f549993c413d4c080850f4103fe9e69738101396", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -17,4 +17,4 @@ trait Foo<const KIND : bool = true> { }\n fn foo<const SIZE : usize = 5>() { }\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n-             { FROM + LEN }>;\n+             FROM>;"}, {"sha": "c64c2974c8f8f94fb81585ec9fd3f40093ea5db2", "filename": "src/test/ui/const-generics/defaults/repr-c-issue-82792.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -6,7 +6,7 @@\n #![allow(incomplete_features)]\n \n #[repr(C)]\n-pub struct Loaf<T: Sized, const N: usize = 1usize> {\n+pub struct Loaf<T: Sized, const N: usize = 1> {\n     head: [T; N],\n     slice: [T],\n }"}, {"sha": "0746c64ac8cf4d710c4f0856f38fa83856aaad5a", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f0adb34570ba83fee391abeb0bec0eec28a234/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06f0adb34570ba83fee391abeb0bec0eec28a234/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=06f0adb34570ba83fee391abeb0bec0eec28a234", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/simple-defaults.rs:8:40\n-   |\n-LL | struct FixedOutput<'a, const N: usize, T=u32> {\n-   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "c003cb2c5a6ee556d9723169e95bd14acc980453", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,12 +1,12 @@\n-// [full] run-pass\n-// revisions: min full\n-// Checks some basic test cases for defaults.\n+// run-pass\n+// Checks that type param defaults are allowed after const params.\n+// revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     out: &'a [T; N],\n }\n "}, {"sha": "e68075ee3c627e24cdc2db8ebd1be70bb45f39d5", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct N;\n+\n+struct Foo<const N: usize = 1, T = N>(T);\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Foo(N)\n+    }\n+}\n+\n+fn main() {\n+    let Foo::<1, N>(N) = Foo::new();\n+}"}, {"sha": "eb0bcb282155691fd7081e15c62ee227e40caf23", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,19 +1,8 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:4:10\n+  --> $DIR/wrong-order.rs:6:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wrong-order.rs:2:27\n-   |\n-LL | #![cfg_attr(full, feature(const_generics))]\n-   |                           ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "eb0bcb282155691fd7081e15c62ee227e40caf23", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,10 +1,8 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:4:10\n+  --> $DIR/wrong-order.rs:6:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: aborting due to previous error\n "}, {"sha": "88e9e96ba43f961ef071a49a0f5ff147d62bd1ae", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,5 +1,7 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n \n struct A<T = u32, const N: usize> {\n     //~^ ERROR generic parameters with a default must be trailing"}, {"sha": "e8fd9e7769b791b70195e575b9348912b4bc86fb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,22 +1,17 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:6:44\n-   |\n-LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |                                            ^ the anonymous constant must not depend on the parameter `T`\n-\n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |                     ^ the anonymous constant must not depend on the parameter `N`\n+   |                     ^ defaulted generic parameters cannot be forward declared\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0128`."}, {"sha": "5fa6423306c5a5e7cac46e25c983fa404d4d6363", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,25 +1,26 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:6:44\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:5:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |                     ^ the anonymous constant must not depend on the parameter `N`\n+   |                     ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0128`."}, {"sha": "76c1b84aef557864846ab7f9695be49113ac3561", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -1,15 +1,12 @@\n // revisions: full min\n-\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-//[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters may not be used in const operations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n-// FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n-//~^ ERROR constant values inside of type parameter defaults\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n //~| ERROR generic parameters with a default\n \n fn main() {}"}, {"sha": "16ea71d48c8259dfbeff4f387b37189b3ed9700e", "filename": "src/test/ui/generics/generic-non-trailing-defaults.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -5,5 +5,6 @@ struct Vec<A = Heap, T>(A, T);\n \n struct Foo<A, B = Vec<C>, C>(A, B, C);\n //~^ ERROR generic parameters with a default must be trailing\n+//~| ERROR generic parameters with a default cannot use\n \n fn main() {}"}, {"sha": "713ba091b861c8f01fb9710cc125d345e51aa275", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "patch": "@@ -10,5 +10,12 @@ error: generic parameters with a default must be trailing\n LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n    |               ^\n \n-error: aborting due to 2 previous errors\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/generic-non-trailing-defaults.rs:6:23\n+   |\n+LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n+   |                       ^ defaulted generic parameters cannot be forward declared\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0128`."}]}