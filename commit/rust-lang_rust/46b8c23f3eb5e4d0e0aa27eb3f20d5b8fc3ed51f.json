{"sha": "46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "node_id": "C_kwDOAAsO6NoAKDQ2YjhjMjNmM2ViNWU0ZDBlMGFhMjdlYjNmMjBkNWI4ZmMzZWQ1MWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T20:14:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T20:14:34Z"}, "message": "Auto merge of #93967 - cjgillot:short-struct-span, r=petrochenkov\n\nShorten def_span for more items.\n\nThe `def_span` query only returns the signature span for functions.\nStruct/enum/union definitions can also have a very long body.\nThis PR shortens the associated span.", "tree": {"sha": "06c025dccbade55a55b020f16453d44257832a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c025dccbade55a55b020f16453d44257832a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "html_url": "https://github.com/rust-lang/rust/commit/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5018181c79a6fe37913fd931005ad2a63c85be7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5018181c79a6fe37913fd931005ad2a63c85be7b", "html_url": "https://github.com/rust-lang/rust/commit/5018181c79a6fe37913fd931005ad2a63c85be7b"}, {"sha": "42e4eee8931479a02c11c88ddaddb3a494e136c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e4eee8931479a02c11c88ddaddb3a494e136c6", "html_url": "https://github.com/rust-lang/rust/commit/42e4eee8931479a02c11c88ddaddb3a494e136c6"}], "stats": {"total": 5666, "additions": 2171, "deletions": 3495}, "files": [{"sha": "c3768d5b2d6911b2110174a15e3bc5d0d4698da0", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 90, "deletions": 30, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -934,28 +934,105 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Gets the span of the definition of the specified HIR node.\n-    /// This is used by `tcx.get_span`\n+    /// This is used by `tcx.def_span`.\n     pub fn span(self, hir_id: HirId) -> Span {\n         self.opt_span(hir_id)\n             .unwrap_or_else(|| bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id))\n     }\n \n     pub fn opt_span(self, hir_id: HirId) -> Option<Span> {\n+        fn until_within(outer: Span, end: Span) -> Span {\n+            if let Some(end) = end.find_ancestor_inside(outer) {\n+                outer.with_hi(end.hi())\n+            } else {\n+                outer\n+            }\n+        }\n+\n+        fn named_span(item_span: Span, ident: Ident, generics: Option<&Generics<'_>>) -> Span {\n+            if ident.name != kw::Empty {\n+                let mut span = until_within(item_span, ident.span);\n+                if let Some(g) = generics\n+                    && !g.span.is_dummy()\n+                    && let Some(g_span) = g.span.find_ancestor_inside(item_span)\n+                {\n+                    span = span.to(g_span);\n+                }\n+                span\n+            } else {\n+                item_span\n+            }\n+        }\n+\n         let span = match self.find(hir_id)? {\n-            Node::Param(param) => param.span,\n+            // Function-like.\n+            Node::Item(Item { kind: ItemKind::Fn(sig, ..), .. })\n+            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, ..), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, ..), .. }) => sig.span,\n+            // Constants and Statics.\n+            Node::Item(Item {\n+                kind:\n+                    ItemKind::Const(ty, ..)\n+                    | ItemKind::Static(ty, ..)\n+                    | ItemKind::Impl(Impl { self_ty: ty, .. }),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Const(ty, ..),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Const(ty, ..),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::ForeignItem(ForeignItem {\n+                kind: ForeignItemKind::Static(ty, ..),\n+                span: outer_span,\n+                ..\n+            }) => until_within(*outer_span, ty.span),\n+            // With generics and bounds.\n+            Node::Item(Item {\n+                kind: ItemKind::Trait(_, _, generics, bounds, _),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Type(bounds, _),\n+                generics,\n+                span: outer_span,\n+                ..\n+            }) => {\n+                let end = if let Some(b) = bounds.last() { b.span() } else { generics.span };\n+                until_within(*outer_span, end)\n+            }\n+            // Other cases.\n             Node::Item(item) => match &item.kind {\n-                ItemKind::Fn(sig, _, _) => sig.span,\n-                _ => item.span,\n+                ItemKind::Use(path, _) => path.span,\n+                _ => named_span(item.span, item.ident, item.kind.generics()),\n             },\n-            Node::ForeignItem(foreign_item) => foreign_item.span,\n-            Node::TraitItem(trait_item) => match &trait_item.kind {\n-                TraitItemKind::Fn(sig, _) => sig.span,\n-                _ => trait_item.span,\n-            },\n-            Node::ImplItem(impl_item) => match &impl_item.kind {\n-                ImplItemKind::Fn(sig, _) => sig.span,\n-                _ => impl_item.span,\n+            Node::ImplItem(item) => named_span(item.span, item.ident, Some(item.generics)),\n+            Node::ForeignItem(item) => match item.kind {\n+                ForeignItemKind::Fn(decl, _, _) => until_within(item.span, decl.output.span()),\n+                _ => named_span(item.span, item.ident, None),\n             },\n+            Node::Ctor(..) => return self.opt_span(self.get_parent_node(hir_id)),\n+            _ => self.span_with_body(hir_id),\n+        };\n+        Some(span)\n+    }\n+\n+    /// Like `hir.span()`, but includes the body of items\n+    /// (instead of just the item header)\n+    pub fn span_with_body(self, hir_id: HirId) -> Span {\n+        match self.get(hir_id) {\n+            Node::Param(param) => param.span,\n+            Node::Item(item) => item.span,\n+            Node::ForeignItem(foreign_item) => foreign_item.span,\n+            Node::TraitItem(trait_item) => trait_item.span,\n+            Node::ImplItem(impl_item) => impl_item.span,\n             Node::Variant(variant) => variant.span,\n             Node::Field(field) => field.span,\n             Node::AnonConst(constant) => self.body(constant.body).value.span,\n@@ -973,29 +1050,12 @@ impl<'hir> Map<'hir> {\n             Node::Pat(pat) => pat.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n-            Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {\n-                Node::Item(item) => item.span,\n-                Node::Variant(variant) => variant.span,\n-                _ => unreachable!(),\n-            },\n+            Node::Ctor(..) => self.span_with_body(self.get_parent_node(hir_id)),\n             Node::Lifetime(lifetime) => lifetime.span,\n             Node::GenericParam(param) => param.span,\n             Node::Infer(i) => i.span,\n             Node::Local(local) => local.span,\n             Node::Crate(item) => item.spans.inner_span,\n-        };\n-        Some(span)\n-    }\n-\n-    /// Like `hir.span()`, but includes the body of function items\n-    /// (instead of just the function header)\n-    pub fn span_with_body(self, hir_id: HirId) -> Span {\n-        match self.find(hir_id) {\n-            Some(Node::TraitItem(item)) => item.span,\n-            Some(Node::ImplItem(impl_item)) => impl_item.span,\n-            Some(Node::Item(item)) => item.span,\n-            Some(_) => self.span(hir_id),\n-            _ => bug!(\"hir::map::Map::span_with_body: id not in map: {:?}\", hir_id),\n         }\n     }\n "}, {"sha": "97cbfe408f261c6b939228d1ed6ba89a461e5e8d", "filename": "src/test/incremental/issue-61323.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fincremental%2Fissue-61323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fincremental%2Fissue-61323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61323.rs?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,6 +10,6 @@ struct C(Box<A>);\n \n #[cfg(cfail)]\n struct C(A);\n-//[cfail]~^ ERROR 12:1: 12:13: recursive type `C` has infinite size [E0072]\n+//[cfail]~^ ERROR 12:1: 12:9: recursive type `C` has infinite size [E0072]\n \n fn main() {}"}, {"sha": "268d8f464646f56a9a31936536c95bae92845f9d", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -40,11 +40,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:28\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:28\n       }\n - }\n - "}, {"sha": "2e63c2c25fac325ac7f3552ba3edb21b20ea11c8", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,6 +12,6 @@ static BOP: &i32 = {\n         _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n         _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n         StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:22: 16:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:16:1: 16:24\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:16:1: 16:17\n     }\n }"}, {"sha": "322a1b206f9489d81f0bb900f8289865dae92f1d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -42,11 +42,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:28\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:28\n       }\n   }\n - "}, {"sha": "701e291f46ecfd163ce79d14e26abb43e40f7d60", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}` after SimplifyCfg-promote-consts\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n \n-<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}: usize = {\n+<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}: usize = {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n "}, {"sha": "701e291f46ecfd163ce79d14e26abb43e40f7d60", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}` after SimplifyCfg-promote-consts\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n \n-<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}: usize = {\n+<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}: usize = {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n "}, {"sha": "980f07d5f109607e9093124bee0dfc70363b67ed", "filename": "src/test/mir-opt/retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 19:2>::foo` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 19:2>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n+fn <impl at $DIR/retag.rs:11:1: 11:10>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:13:16: 13:21\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:13:23: 13:24\n     let mut _0: &mut i32;                // return place in scope 0 at $DIR/retag.rs:13:42: 13:53"}, {"sha": "9c252d63fc72cbcc2851e639670d2962d976c1f1", "filename": "src/test/mir-opt/retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 19:2>::foo_shr` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo_shr` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 19:2>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n+fn <impl at $DIR/retag.rs:11:1: 11:10>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:16:20: 16:25\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:16:27: 16:28\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:16:42: 16:49"}, {"sha": "2c4738aa86618b45f911273c3eef65febb048135", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -198,6 +198,6 @@ static XXX: &Foo = {\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n-        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 5:25\n     }\n }"}, {"sha": "c41fe61d48bf10d14019d37f65cd7e75d9bf50ec", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,10 +1,10 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT` 0 mir_map\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n \n-const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 = {\n+const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:35\n     }\n }"}, {"sha": "c41fe61d48bf10d14019d37f65cd7e75d9bf50ec", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,10 +1,10 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT` 0 mir_map\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n \n-const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 = {\n+const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:35\n     }\n }"}, {"sha": "9e51ecd2ba017f3e273d1d211e1f3ddb0d5d72e7", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,9 +1,8 @@\n error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:19:1\n    |\n-LL | / pub mod module1 {\n-LL | | }\n-   | |_^\n+LL | pub mod module1 {\n+   | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-missing-doc-code-example.rs:2:9"}, {"sha": "ec44e1bc65c90b955792864b658c9d173c171a76", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,10 +14,10 @@ extern crate source_code;\n #[path = \"auxiliary/source-code-bar.rs\"]\n pub mod bar;\n \n-// @count - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#5-7\"]' 4\n+// @count - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#5\"]' 4\n use bar::Bar;\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#13-17\"]' 'self'\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'Trait'\n+// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#13\"]' 'self'\n+// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n use bar::sub::{self, Trait};\n \n pub struct Foo;\n@@ -42,8 +42,8 @@ pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::Sour\n     y.hello();\n }\n \n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'bar::sub::Trait'\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'Trait'\n+// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'bar::sub::Trait'\n+// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V, b: bool) {}\n \n pub trait AnotherTrait {}"}, {"sha": "5daa0d4baad6316e25d9cbee998146057771afb3", "filename": "src/test/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -15,5 +15,5 @@ extern crate macros;\n // @has - '//*[@class=\"docblock\"]' 'docs for my_macro'\n // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.2.3: text'\n // @has - '//*[@class=\"stab unstable\"]' 'macro_test'\n-// @has - '//a/@href' '../src/macros/macros.rs.html#8-10'\n+// @has - '//a/@href' '../src/macros/macros.rs.html#8'\n pub use macros::my_macro;"}, {"sha": "4832398713dbe7276e25bc0f656a5a6e7aae325e", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/array_const_index-0.rs:2:16\n    |\n LL | const B: i32 = (&A)[1];\n-   | ---------------^^^^^^^-\n-   |                |\n-   |                index out of bounds: the length is 0 but the index is 1\n+   | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ error: any use of this value will cause an error\n   --> $DIR/array_const_index-0.rs:2:16\n    |\n LL | const B: i32 = (&A)[1];\n-   | ---------------^^^^^^^-\n-   |                |\n-   |                index out of bounds: the length is 0 but the index is 1\n+   | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "361f518c052f01f205aeb80a1eab4353dddc42cc", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/array_const_index-1.rs:2:16\n    |\n LL | const B: i32 = A[1];\n-   | ---------------^^^^-\n-   |                |\n-   |                index out of bounds: the length is 0 but the index is 1\n+   | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ error: any use of this value will cause an error\n   --> $DIR/array_const_index-1.rs:2:16\n    |\n LL | const B: i32 = A[1];\n-   | ---------------^^^^-\n-   |                |\n-   |                index out of bounds: the length is 0 but the index is 1\n+   | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "58a8aceca2f24fc6d83c510fd3c91bf56a04e033", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ note: associated constant defined here does not match type\n   --> $DIR/assoc-const-ty-mismatch.rs:5:3\n    |\n LL |   const N: usize;\n-   |   ^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^\n \n error: mismatch in bind of associated type, got const\n   --> $DIR/assoc-const-ty-mismatch.rs:25:18\n@@ -20,7 +20,7 @@ note: associated type defined here does not match const\n   --> $DIR/assoc-const-ty-mismatch.rs:9:3\n    |\n LL |   type T;\n-   |   ^^^^^^^\n+   |   ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5435f22321c921d71a5bb72195a8b70853042190", "filename": "src/test/ui/associated-consts/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,12 +8,12 @@ note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:10:5\n    |\n LL |     const ID: i32 = 1;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `Bar` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:14:5\n    |\n LL |     const ID: i32 = 3;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n help: disambiguate the associated constant for candidate #1\n    |\n LL | const X: i32 = <i32 as Foo>::ID;"}, {"sha": "a3fa3002e1efb9029fbc6bc44fbb10a7eab0b853", "filename": "src/test/ui/associated-consts/associated-const-private-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated constant `ID` is private\n   --> $DIR/associated-const-private-impl.rs:13:30\n    |\n LL |             const ID: i32 = 1;\n-   |             ------------------ private associated constant defined here\n+   |             ------------- private associated constant defined here\n ...\n LL |     assert_eq!(1, bar1::Foo::ID);\n    |                              ^^ private associated constant"}, {"sha": "582473905cfdd6cc2f9668aa8a849a76ff7d7e00", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,13 +2,13 @@ error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n   --> $DIR/defaults-cyclic-fail.rs:5:5\n    |\n LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:16:16"}, {"sha": "66ee6031c7156c6fd06b0a4381831aeee378f8ef", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/defaults-not-assumed-fail.rs:8:19\n    |\n LL |     const B: u8 = Self::A + 1;\n-   |     --------------^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n+   |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -34,9 +32,7 @@ error: any use of this value will cause an error\n   --> $DIR/defaults-not-assumed-fail.rs:8:19\n    |\n LL |     const B: u8 = Self::A + 1;\n-   |     --------------^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n+   |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "51a50cfdaf981ac7e1e3677c4d46e83eb2ecb08b", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`\n+error[E0391]: cycle detected when elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:22\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n@@ -8,23 +8,23 @@ note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR` for CTFE...\n+   |     ^^^^^^^^^^^^^^\n+note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`, completing the cycle\n+   |     ^^^^^^^^^^^^^^\n+   = note: ...which again requires elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "b9d1808feb367e4d776f492c4105d51bcd2b4d4c", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,22 +8,22 @@ note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n note: ...which requires caching mir of `FooDefault::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    = note: ...which again requires elaborating drops for `FooDefault::BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n "}, {"sha": "271e69206cd7a91dd574413a7d117c2e488df11f", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`\n+error[E0391]: cycle detected when elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:22\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n@@ -8,23 +8,23 @@ note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR` for CTFE...\n+   |     ^^^^^^^^^^^^^^\n+note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`, completing the cycle\n+   |     ^^^^^^^^^^^^^^\n+   = note: ...which again requires elaborating drops for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "f4efd131248ce2dac8e917f2e3af21025c9ee863", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0201]: duplicate definitions with name `bar`:\n   --> $DIR/associated-item-duplicate-names-2.rs:5:5\n    |\n LL |     const bar: bool = true;\n-   |     ----------------------- previous definition of `bar` here\n+   |     --------------- previous definition of `bar` here\n LL |     fn bar() {}\n    |     ^^^^^^^^ duplicate definition\n "}, {"sha": "03782f663480003af7bf5da87f7cb202a2a61c67", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,9 @@ error[E0201]: duplicate definitions with name `Bar`:\n   --> $DIR/associated-item-duplicate-names-3.rs:14:5\n    |\n LL |     type Bar = i16;\n-   |     --------------- previous definition of `Bar` here\n+   |     -------- previous definition of `Bar` here\n LL |     type Bar = u16;\n-   |     ^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definition\n \n error: aborting due to previous error\n "}, {"sha": "c9119c10271118ec1cb8e706eeb8054049e2b2c6", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,17 +2,17 @@ error[E0201]: duplicate definitions with name `Ty`:\n   --> $DIR/associated-item-duplicate-names.rs:11:5\n    |\n LL |     type Ty = ();\n-   |     ------------- previous definition of `Ty` here\n+   |     ------- previous definition of `Ty` here\n LL |     type Ty = usize;\n-   |     ^^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `BAR`:\n   --> $DIR/associated-item-duplicate-names.rs:13:5\n    |\n LL |     const BAR: u32 = 7;\n-   |     ------------------- previous definition of `BAR` here\n+   |     -------------- previous definition of `BAR` here\n LL |     const BAR: u32 = 8;\n-   |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to 2 previous errors\n "}, {"sha": "236552baf9287b82e9ebf7f7821c024143870fea", "filename": "src/test/ui/associated-types/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,10 +2,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:16:24\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn a<C:Vehicle+Box>(_: C::Color) {\n    |                        ^^^^^^^^ ambiguous associated type `Color`\n@@ -23,10 +23,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:20:12\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn b<C>(_: C::Color) where C : Vehicle+Box {\n    |            ^^^^^^^^ ambiguous associated type `Color`\n@@ -44,10 +44,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:24:12\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn c<C>(_: C::Color) where C : Vehicle, C : Box {\n    |            ^^^^^^^^ ambiguous associated type `Color`\n@@ -65,10 +65,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:35:20\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL |     fn e(&self, _: X::Color) where X : Box;\n    |                    ^^^^^^^^ ambiguous associated type `Color`\n@@ -86,10 +86,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:38:20\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL |     fn f(&self, _: X::Color) where X : Box { }\n    |                    ^^^^^^^^ ambiguous associated type `Color`\n@@ -107,10 +107,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:30:20\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL |     fn d(&self, _: X::Color) where X : Box { }\n    |                    ^^^^^^^^ ambiguous associated type `Color`"}, {"sha": "e765f932398411b5f099d018fbd89195bb6aeb5b", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,10 +10,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:19:32\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n@@ -31,10 +31,10 @@ error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n    |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n@@ -49,10 +49,10 @@ error[E0191]: the value of the associated types `Color` (from trait `Box`), `Col\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:30\n    |\n LL |     type Color;\n-   |     ----------- `Vehicle::Color` defined here\n+   |     ---------- `Vehicle::Color` defined here\n ...\n LL |     type Color;\n-   |     ----------- `Box::Color` defined here\n+   |     ---------- `Box::Color` defined here\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n    |                              ^^^^^^^^^^^^^^^^^^^ associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified\n@@ -63,10 +63,10 @@ error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:28:29\n    |\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Vehicle`\n+   |     ---------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n-   |     ----------- ambiguous `Color` from `Box`\n+   |     ---------- ambiguous `Color` from `Box`\n ...\n LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n    |                             ^^^^^^^^ ambiguous associated type `Color`\n@@ -84,10 +84,10 @@ error[E0191]: the value of the associated types `Color` (from trait `Box`), `Col\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:32\n    |\n LL |     type Color;\n-   |     ----------- `Vehicle::Color` defined here\n+   |     ---------- `Vehicle::Color` defined here\n ...\n LL |     type Color;\n-   |     ----------- `Box::Color` defined here\n+   |     ---------- `Box::Color` defined here\n ...\n LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n    |                                ^^^^^^ associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified"}, {"sha": "40c02dca32f0d163cd2d01852d9986d338c4e808", "filename": "src/test/ui/associated-types/associated-types-coherence-failure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,19 +2,19 @@ error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `Co\n   --> $DIR/associated-types-coherence-failure.rs:21:1\n    |\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n-   | ----------------------------------------------------------------------------- first implementation here\n+   | ------------------------------------------------------------ first implementation here\n ...\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Cow<'_, _>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Cow<'_, _>`\n \n error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `&_`\n   --> $DIR/associated-types-coherence-failure.rs:28:1\n    |\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n-   | ----------------------------------------------------------------------------- first implementation here\n+   | ------------------------------------------------------------ first implementation here\n ...\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for &'a B where B: ToOwned {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32866c714680520fce6139b7e5fd91ffdb84d49d", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0191]: the value of the associated type `B` (from trait `Foo`) must be sp\n   --> $DIR/associated-types-incomplete-object.rs:23:30\n    |\n LL |     type B;\n-   |     ------- `B` defined here\n+   |     ------ `B` defined here\n ...\n LL |     let b = &42isize as &dyn Foo<A=usize>;\n    |                              ^^^^^^^^^^^^ help: specify the associated type: `Foo<A=usize, B = Type>`\n@@ -11,7 +11,7 @@ error[E0191]: the value of the associated type `A` (from trait `Foo`) must be sp\n   --> $DIR/associated-types-incomplete-object.rs:26:30\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n ...\n LL |     let c = &42isize as &dyn Foo<B=char>;\n    |                              ^^^^^^^^^^^ help: specify the associated type: `Foo<B=char, A = Type>`\n@@ -20,9 +20,9 @@ error[E0191]: the value of the associated types `A` (from trait `Foo`), `B` (fro\n   --> $DIR/associated-types-incomplete-object.rs:29:30\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n LL |     type B;\n-   |     ------- `B` defined here\n+   |     ------ `B` defined here\n ...\n LL |     let d = &42isize as &dyn Foo;\n    |                              ^^^ help: specify the associated types: `Foo<A = Type, B = Type>`"}, {"sha": "9e40d8095862b3421f1bb1f3958ef9fc251de591", "filename": "src/test/ui/associated-types/associated-types-issue-17359.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0046]: not all trait items implemented, missing: `Type`\n   --> $DIR/associated-types-issue-17359.rs:8:1\n    |\n LL |     type Type;\n-   |     ---------- `Type` from trait\n+   |     --------- `Type` from trait\n ...\n LL | impl Trait for isize {}\n    | ^^^^^^^^^^^^^^^^^^^^ missing `Type` in implementation"}, {"sha": "a67f77e37c707481ad6576d2af93593a5bb5d33a", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,10 +8,10 @@ error[E0221]: ambiguous associated type `A` in bounds of `T`\n   --> $DIR/associated-types-path-1.rs:11:34\n    |\n LL |     type A;\n-   |     ------- ambiguous `A` from `Foo`\n+   |     ------ ambiguous `A` from `Foo`\n ...\n LL |     type A;\n-   |     ------- ambiguous `A` from `Bar`\n+   |     ------ ambiguous `A` from `Bar`\n ...\n LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n    |                                  ^^^^ ambiguous associated type `A`"}, {"sha": "0f4a6968c70dd3f0362f11b1c99fabeba078ec44", "filename": "src/test/ui/associated-types/defaults-mixed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0046]: not all trait items implemented, missing: `Bar`\n   --> $DIR/defaults-mixed.rs:11:1\n    |\n LL |     type Bar;\n-   |     --------- `Bar` from trait\n+   |     -------- `Bar` from trait\n ...\n LL | impl Trait for () {}\n    | ^^^^^^^^^^^^^^^^^ missing `Bar` in implementation\n@@ -11,7 +11,7 @@ error[E0046]: not all trait items implemented, missing: `Bar`\n   --> $DIR/defaults-mixed.rs:14:1\n    |\n LL |     type Bar;\n-   |     --------- `Bar` from trait\n+   |     -------- `Bar` from trait\n ...\n LL | impl Trait for bool {\n    | ^^^^^^^^^^^^^^^^^^^ missing `Bar` in implementation"}, {"sha": "e007f5a163b41f7f2dac4aee481f46a7e7a2a06e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,13 +1,8 @@\n error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n   --> $DIR/hr-associated-type-bound-2.rs:11:1\n    |\n-LL | / impl X<'_> for u32\n-LL | | where\n-LL | |     for<'b> <Self as X<'b>>::U: Clone,\n-LL | | {\n-LL | |     type U = str;\n-LL | | }\n-   | |_^\n+LL | impl X<'_> for u32\n+   | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`"}, {"sha": "939c9bbdb6b86470a77bc03fc966b0d485507487", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n   --> $DIR/impl-wf-cycle-1.rs:15:1\n    |\n-LL | / impl<T: Grault> Grault for (T,)\n-LL | |\n-LL | | where\n-LL | |     Self::A: Baz,\n-...  |\n-LL | |     type B = bool;\n-LL | | }\n-   | |_^\n+LL | impl<T: Grault> Grault for (T,)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required because of the requirements on the impl of `Grault` for `(T,)`\n   --> $DIR/impl-wf-cycle-1.rs:15:17"}, {"sha": "d02ed2cacdf85854b4aa9491cc309467d641e306", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n   --> $DIR/impl-wf-cycle-2.rs:7:1\n    |\n-LL | / impl<T: Grault> Grault for (T,)\n-LL | |\n-LL | | where\n-LL | |     Self::A: Copy,\n-LL | | {\n-LL | |     type A = ();\n-LL | | }\n-   | |_^\n+LL | impl<T: Grault> Grault for (T,)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required because of the requirements on the impl of `Grault` for `(T,)`\n   --> $DIR/impl-wf-cycle-2.rs:7:17"}, {"sha": "700923c1b3f58686b1b138ba0ff1d11044cb8a5a", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,26 +1,22 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:9:23\n    |\n-LL | / trait Sub<Rhs=Self> {\n-LL | |     type Output;\n-LL | | }\n-   | |_- type parameter `Rhs` must be specified for this\n-LL |\n-LL |   type Test = dyn Add + Sub;\n-   |                         ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n+LL | trait Sub<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n+...\n+LL | type Test = dyn Add + Sub;\n+   |                       ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:9:17\n    |\n-LL | / trait Add<Rhs=Self> {\n-LL | |     type Output;\n-LL | | }\n-   | |_- type parameter `Rhs` must be specified for this\n+LL | trait Add<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n ...\n-LL |   type Test = dyn Add + Sub;\n-   |                   ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+LL | type Test = dyn Add + Sub;\n+   |                 ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n@@ -39,10 +35,10 @@ error[E0191]: the value of the associated types `Output` (from trait `Add`), `Ou\n   --> $DIR/issue-22560.rs:9:17\n    |\n LL |     type Output;\n-   |     ------------ `Output` defined here\n+   |     ----------- `Output` defined here\n ...\n LL |     type Output;\n-   |     ------------ `Output` defined here\n+   |     ----------- `Output` defined here\n ...\n LL | type Test = dyn Add + Sub;\n    |                 ^^^   ^^^ associated type `Output` must be specified"}, {"sha": "4307477a56afe49df9aeceeb4998de16cb8ec56a", "filename": "src/test/ui/associated-types/issue-23595-1.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,14 +2,11 @@ error[E0191]: the value of the associated types `ChildKey` (from trait `Hierarch\n   --> $DIR/issue-23595-1.rs:8:58\n    |\n LL |     type Value;\n-   |     ----------- `Value` defined here\n+   |     ---------- `Value` defined here\n LL |     type ChildKey;\n-   |     -------------- `ChildKey` defined here\n+   |     ------------- `ChildKey` defined here\n LL |     type Children = dyn Index<Self::ChildKey, Output=dyn Hierarchy>;\n-   |     -----------------------------------------------------^^^^^^^^^--\n-   |     |                                                    |\n-   |     |                                                    help: specify the associated types: `Hierarchy<Value = Type, ChildKey = Type, Children = Type>`\n-   |     `Children` defined here\n+   |     ------------- `Children` defined here                ^^^^^^^^^ help: specify the associated types: `Hierarchy<Value = Type, ChildKey = Type, Children = Type>`\n \n error: aborting due to previous error\n "}, {"sha": "a84b599b52b68d2c28913dfdb70c5d08f8714bf6", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -5,10 +5,7 @@ LL | / pub trait ThriftService<Bug: NotFoo>:\n LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n-...  |\n-LL | |\n-LL | | }\n-   | |_^ the trait `Foo` is not implemented for `Bug`\n+   | |______________________________________________^ the trait `Foo` is not implemented for `Bug`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "bddd1dce8e647ed5e35198fb98d85e3f21847400", "filename": "src/test/ui/associated-types/issue-85103.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: layout error: NormalizationFailure(<[E] as std::borrow::ToOwned>::Owned,\n   --> $DIR/issue-85103.rs:6:1\n    |\n LL | type Edges<'a, E> = Cow<'a, [E]>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f617df984ae35e2b1b2a1fb05c2c5b330d82d176", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (\n   --> $DIR/missing-associated-types.rs:12:21\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n ...\n LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n    |                     ^^^^^^^^   ^^^^^^^^   ^^^^^^   ^^^^^^ associated type `A` must be specified\n@@ -42,9 +42,9 @@ error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from\n   --> $DIR/missing-associated-types.rs:15:21\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n LL |     type B;\n-   |     ------- `B` defined here\n+   |     ------ `B` defined here\n ...\n LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     ^^^^^^^^   ^^^^^^^^   ^^^^^^   ^^^^^^ associated types `A`, `B`, `Output` must be specified\n@@ -78,7 +78,7 @@ error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (\n   --> $DIR/missing-associated-types.rs:18:21\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n ...\n LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n    |                     ^^^^^^^^   ^^^^^^^^   ^^^^^^ associated type `A` must be specified"}, {"sha": "97b2d7221fdb57b8b34b7544b4ad262f4d4df2ac", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: cross-crate traits with a default impl, like `Send`, should not be specia\n   --> $DIR/suspicious-impls-lint.rs:9:1\n    |\n LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/suspicious-impls-lint.rs:1:9\n@@ -16,13 +16,13 @@ note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:8:1\n    |\n LL | struct MayImplementSendErr<T>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:21:1\n    |\n LL | unsafe impl Send for ContainsVec<i32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n@@ -31,13 +31,13 @@ note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:20:1\n    |\n LL | struct ContainsVec<T>(Vec<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:32:1\n    |\n LL | unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n@@ -46,13 +46,13 @@ note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:31:1\n    |\n LL | struct TwoParamsSame<T, U>(T, U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:40:1\n    |\n LL | unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n@@ -61,13 +61,13 @@ note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:39:1\n    |\n LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:46:1\n    |\n LL | unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n@@ -76,7 +76,7 @@ note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:44:1\n    |\n LL | pub struct WithLifetime<'a, T>(&'a (), T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b9c7e1bea706a0d8f08036f950cb9d83548fdf50", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 33, "deletions": 87, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,18 +10,12 @@ note: an implementation of `Add<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Add<_>`\n+   | ^^^^^^^^ must implement `Add<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Add<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot subtract `A` from `A`\n   --> $DIR/issue-28837.rs:8:7\n@@ -35,18 +29,12 @@ note: an implementation of `Sub<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Sub<_>`\n+   | ^^^^^^^^ must implement `Sub<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Sub<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `-` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn sub(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Sub<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot multiply `A` by `A`\n   --> $DIR/issue-28837.rs:10:7\n@@ -60,18 +48,12 @@ note: an implementation of `Mul<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Mul<_>`\n+   | ^^^^^^^^ must implement `Mul<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Mul<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `*` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn mul(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Mul<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot divide `A` by `A`\n   --> $DIR/issue-28837.rs:12:7\n@@ -85,18 +67,12 @@ note: an implementation of `Div<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Div<_>`\n+   | ^^^^^^^^ must implement `Div<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Div<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `/` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn div(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Div<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: cannot mod `A` by `A`\n   --> $DIR/issue-28837.rs:14:7\n@@ -110,18 +86,12 @@ note: an implementation of `Rem<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Rem<_>`\n+   | ^^^^^^^^ must implement `Rem<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Rem<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `%` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn rem(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Rem<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A & A`\n   --> $DIR/issue-28837.rs:16:7\n@@ -135,18 +105,12 @@ note: an implementation of `BitAnd<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `BitAnd<_>`\n+   | ^^^^^^^^ must implement `BitAnd<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait BitAnd<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `&` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn bitand(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait BitAnd<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A | A`\n   --> $DIR/issue-28837.rs:18:7\n@@ -160,18 +124,12 @@ note: an implementation of `BitOr<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `BitOr<_>`\n+   | ^^^^^^^^ must implement `BitOr<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait BitOr<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `|` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn bitor(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait BitOr<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A << A`\n   --> $DIR/issue-28837.rs:20:7\n@@ -185,18 +143,12 @@ note: an implementation of `Shl<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Shl<_>`\n+   | ^^^^^^^^ must implement `Shl<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait Shl<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `<<` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn shl(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Shl<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: no implementation for `A >> A`\n   --> $DIR/issue-28837.rs:22:7\n@@ -210,18 +162,12 @@ note: an implementation of `Shr<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `Shr<_>`\n+   | ^^^^^^^^ must implement `Shr<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait Shr<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `>>` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn shr(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Shr<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `==` cannot be applied to type `A`\n   --> $DIR/issue-28837.rs:24:7\n@@ -235,7 +181,7 @@ note: an implementation of `PartialEq<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n LL | #[derive(PartialEq)]\n@@ -253,7 +199,7 @@ note: an implementation of `PartialEq<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n LL | #[derive(PartialEq)]\n@@ -271,7 +217,7 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL | #[derive(PartialEq, PartialOrd)]\n@@ -289,7 +235,7 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL | #[derive(PartialEq, PartialOrd)]\n@@ -307,7 +253,7 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL | #[derive(PartialEq, PartialOrd)]\n@@ -325,7 +271,7 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL | #[derive(PartialEq, PartialOrd)]"}, {"sha": "f21f890691120cdd4e50c07fda0f9324e52aa4d5", "filename": "src/test/ui/binop/issue-3820.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,14 +14,8 @@ LL | struct Thing {\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait Mul<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `*` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn mul(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Mul<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eb64fea9433981b6080feb36df5f357e8b404a5b", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/blind-item-block-middle.rs:6:9\n    |\n LL | mod foo { pub struct bar; }\n-   |           --------------- unit struct defined here\n+   |           -------------- unit struct defined here\n ...\n LL |     let bar = 5;\n    |         ^^^   - this expression has type `{integer}`"}, {"sha": "d79394834dcad615cab6f1d3dfc8a0c0f63b8392", "filename": "src/test/ui/borrowck/issue-81365-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-1.rs:12:5\n    |\n LL |     type Target = DerefTarget;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "764eaaa7cc7b4cb253846e71101af7b2e13c60f8", "filename": "src/test/ui/borrowck/issue-81365-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-2.rs:12:5\n    |\n LL |     type Target = DerefTarget;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9447174fd21ea2e7dbb1568f38ea9f1f688e110a", "filename": "src/test/ui/borrowck/issue-81365-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-3.rs:23:5\n    |\n LL |     type Target = Container;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ab3fa92706b059b525a522237778c9f741ce922", "filename": "src/test/ui/borrowck/issue-81365-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-4.rs:24:5\n    |\n LL |     type Target = Container;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "20ff229ffe7dd3ed1c6e9aedd1980c0eefe8dd26", "filename": "src/test/ui/borrowck/issue-81365-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-5.rs:19:5\n    |\n LL |     type Target = DerefTarget;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "575aed73b4663107b2a0232e864cd429e741c0a9", "filename": "src/test/ui/borrowck/issue-81365-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-6.rs:9:5\n    |\n LL |     type Target = [()];\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "52d2d9e75a9515c317fa7cc8d7bb550d090427ea", "filename": "src/test/ui/borrowck/issue-81365-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-7.rs:12:5\n    |\n LL |     type Target = DerefTarget;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fd83e10a295dc10f47913308cacdc8c58c94c28d", "filename": "src/test/ui/borrowck/issue-81365-8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,7 +13,7 @@ note: deref defined here\n   --> $DIR/issue-81365-8.rs:12:5\n    |\n LL |     type Target = DerefTarget;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "29288be49341c50c5a259575ac8046290da509fe", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -16,9 +16,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-81899.rs:4:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | ----------------------^^^^^^^^^^^^^^^-\n-   |                       |\n-   |                       referenced constant has errors\n+   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -32,9 +30,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-81899.rs:4:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | ----------------------^^^^^^^^^^^^^^^-\n-   |                       |\n-   |                       referenced constant has errors\n+   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "daded200bd9204f112d29cf03e7395ac25ad038f", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -16,9 +16,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-88434-minimal-example.rs:3:21\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   | --------------------^^^^^^^^^^^-\n-   |                     |\n-   |                     referenced constant has errors\n+   | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -32,9 +30,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-88434-minimal-example.rs:3:21\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   | --------------------^^^^^^^^^^^-\n-   |                     |\n-   |                     referenced constant has errors\n+   | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "ce6a37ee418f92a1841718917742c38b14a5c6d1", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -16,9 +16,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | ----------------------^^^^^^^^^^^^^^^-\n-   |                       |\n-   |                       referenced constant has errors\n+   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -32,9 +30,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | ----------------------^^^^^^^^^^^^^^^-\n-   |                       |\n-   |                       referenced constant has errors\n+   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "e0678bc718fa00612b5fc719f4e59fad71772b9f", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -25,7 +25,7 @@ note: `E1` defined here\n   --> $DIR/auxiliary/match_non_exhaustive_lib.rs:2:1\n    |\n LL | pub enum E1 {}\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n@@ -44,7 +44,7 @@ note: `E2` defined here\n   --> $DIR/auxiliary/match_non_exhaustive_lib.rs:5:1\n    |\n LL | pub enum E2 { A, B }\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "7f373e595a35f1881f1b601189a4ededa4391978", "filename": "src/test/ui/coherence/coherence-overlap-downstream.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,7 +10,7 @@ error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`\n   --> $DIR/coherence-overlap-downstream.rs:14:1\n    |\n LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n-   | --------------------------------------- first implementation here\n+   | ----------------------- first implementation here\n LL | impl<X> Foo<X> for i32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |"}, {"sha": "f6145c1883a09951a001e7849a956913cd22a4f3", "filename": "src/test/ui/coherence/coherence-overlap-upstream.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `Foo` for type `i16`\n   --> $DIR/coherence-overlap-upstream.rs:13:1\n    |\n LL | impl<T> Foo for T where T: Remote {}\n-   | --------------------------------- first implementation here\n+   | ----------------- first implementation here\n LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |"}, {"sha": "aa74e2315392da59f745ff44601ed8f11d1c9f62", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,22 +1,11 @@\n error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`\n   --> $DIR/coherence-wasm-bindgen.rs:28:1\n    |\n-LL | / impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n-LL | | where\n-LL | |     A: FromWasmAbi,\n-LL | |     R: ReturnWasmAbi,\n-LL | | {\n-LL | | }\n-   | |_- first implementation here\n+LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n+   | ------------------------------------------------------------ first implementation here\n ...\n-LL | / impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n-LL | | where\n-LL | |     A: RefFromWasmAbi,\n-LL | |     R: ReturnWasmAbi,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n+LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n    |\n note: the lint level is defined here\n   --> $DIR/coherence-wasm-bindgen.rs:10:9"}, {"sha": "0c7c50d67300c1e10bf34b03a7606e5f679282c8", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -21,72 +21,61 @@ error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:29:1\n    |\n LL | struct F(i32);\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:33:1\n    |\n LL | struct G(i32);\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:37:1\n    |\n LL | struct H(i32);\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n   --> $DIR/conflicting-repr-hints.rs:40:1\n    |\n LL | struct I(i32);\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n   --> $DIR/conflicting-repr-hints.rs:44:1\n    |\n LL | struct J(i32);\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:50:1\n    |\n-LL | / union X {\n-LL | |\n-LL | |     i: i32,\n-LL | | }\n-   | |_^\n+LL | union X {\n+   | ^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:57:1\n    |\n-LL | / union Y {\n-LL | |\n-LL | |     i: i32,\n-LL | | }\n-   | |_^\n+LL | union Y {\n+   | ^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:64:1\n    |\n-LL | / union Z {\n-LL | |\n-LL | |     i: i32,\n-LL | | }\n-   | |_^\n+LL | union Z {\n+   | ^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:70:1\n    |\n LL | pub struct S(u16);\n-   | ^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:73:1\n    |\n-LL | / pub union U {\n-LL | |     u: u16\n-LL | | }\n-   | |_^\n+LL | pub union U {\n+   | ^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "2d9de8805bb55257748ada9a18c2edd40b033f48", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n   --> $DIR/eval-privacy.rs:16:5\n    |\n LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^ can't leak private type\n ...\n LL | const fn my_const_fn(val: u8) -> u8 {\n    | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private"}, {"sha": "28ddddf1be62bbd5bb32d4ed2384a1fb3a153b18", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, { T::DIM },\n   --> $DIR/issue-83765.rs:5:5\n    |\n LL |     const DIM: usize;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n note: ...which requires checking if `TensorDimension` fulfills its obligations...\n   --> $DIR/issue-83765.rs:4:1"}, {"sha": "ce281797e566639f0687d0b6fb901abeb0efdf5f", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -44,7 +44,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:26:1\n    |\n LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -55,7 +55,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:28:1\n    |\n LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size_of::<&u32>()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -66,7 +66,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:30:1\n    |\n LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -76,13 +76,8 @@ LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4)\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:33:1\n    |\n-LL | / pub static S7: &[u16] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n-LL | |\n-LL | |     from_raw_parts(ptr, 4)\n-LL | | };\n-   | |__^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+LL | pub static S7: &[u16] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -163,12 +158,8 @@ LL |     from_ptr_range(ptr..ptr.add(2))\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:53:1\n    |\n-LL | / pub static R4: &[u8] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D1) as *const MaybeUninit<&u32> as *const u8;\n-LL | |     from_ptr_range(ptr..ptr.add(1))\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n+LL | pub static R4: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -178,12 +169,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:58:1\n    |\n-LL | / pub static R5: &[u8] = unsafe {\n-LL | |\n-LL | |     let ptr = &D3 as *const &u32;\n-LL | |     from_ptr_range(ptr.cast()..ptr.add(1).cast())\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n+LL | pub static R5: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -193,12 +180,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:63:1\n    |\n-LL | / pub static R6: &[bool] = unsafe {\n-LL | |\n-LL | |     let ptr = &D0 as *const u32 as *const bool;\n-LL | |     from_ptr_range(ptr..ptr.add(4))\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n+LL | pub static R6: &[bool] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -208,12 +191,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:68:1\n    |\n-LL | / pub static R7: &[u16] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n-LL | |     from_ptr_range(ptr..ptr.add(4))\n-LL | | };\n-   | |__^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+LL | pub static R7: &[u16] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "6c484f7c95bfa7cf3cb45aa5564025baa464565c", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -44,7 +44,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:26:1\n    |\n LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -55,7 +55,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:28:1\n    |\n LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size_of::<&u32>()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -66,7 +66,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:30:1\n    |\n LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -76,13 +76,8 @@ LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4)\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:33:1\n    |\n-LL | / pub static S7: &[u16] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n-LL | |\n-LL | |     from_raw_parts(ptr, 4)\n-LL | | };\n-   | |__^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+LL | pub static S7: &[u16] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -163,12 +158,8 @@ LL |     from_ptr_range(ptr..ptr.add(2))\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:53:1\n    |\n-LL | / pub static R4: &[u8] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D1) as *const MaybeUninit<&u32> as *const u8;\n-LL | |     from_ptr_range(ptr..ptr.add(1))\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n+LL | pub static R4: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -178,12 +169,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:58:1\n    |\n-LL | / pub static R5: &[u8] = unsafe {\n-LL | |\n-LL | |     let ptr = &D3 as *const &u32;\n-LL | |     from_ptr_range(ptr.cast()..ptr.add(1).cast())\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n+LL | pub static R5: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -193,12 +180,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:63:1\n    |\n-LL | / pub static R6: &[bool] = unsafe {\n-LL | |\n-LL | |     let ptr = &D0 as *const u32 as *const bool;\n-LL | |     from_ptr_range(ptr..ptr.add(4))\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n+LL | pub static R6: &[bool] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -208,12 +191,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:68:1\n    |\n-LL | / pub static R7: &[u16] = unsafe {\n-LL | |\n-LL | |     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n-LL | |     from_ptr_range(ptr..ptr.add(4))\n-LL | | };\n-   | |__^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+LL | pub static R7: &[u16] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "f3b9170d428af716b83d66ffda88c65356aee4ea", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,11 +1,10 @@\n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:14:9\n    |\n-LL | /     const _BAD1: () = unsafe {\n-LL | |         MaybeUninit::<!>::uninit().assume_init();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-LL | |     };\n-   | |______-\n+LL |     const _BAD1: () = unsafe {\n+   |     ---------------\n+LL |         MaybeUninit::<!>::uninit().assume_init();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -14,23 +13,21 @@ LL | |     };\n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:17:9\n    |\n-LL | /     const _BAD2: () = unsafe {\n-LL | |         intrinsics::assert_uninit_valid::<bool>();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n-LL | |     };\n-   | |______-\n+LL |     const _BAD2: () = unsafe {\n+   |     ---------------\n+LL |         intrinsics::assert_uninit_valid::<bool>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:20:9\n    |\n-LL | /     const _BAD3: () = unsafe {\n-LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n-LL | |     };\n-   | |______-\n+LL |     const _BAD3: () = unsafe {\n+   |     ---------------\n+LL |         intrinsics::assert_zero_valid::<&'static i32>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -41,11 +38,10 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:14:9\n    |\n-LL | /     const _BAD1: () = unsafe {\n-LL | |         MaybeUninit::<!>::uninit().assume_init();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-LL | |     };\n-   | |______-\n+LL |     const _BAD1: () = unsafe {\n+   |     ---------------\n+LL |         MaybeUninit::<!>::uninit().assume_init();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -55,11 +51,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:17:9\n    |\n-LL | /     const _BAD2: () = unsafe {\n-LL | |         intrinsics::assert_uninit_valid::<bool>();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n-LL | |     };\n-   | |______-\n+LL |     const _BAD2: () = unsafe {\n+   |     ---------------\n+LL |         intrinsics::assert_uninit_valid::<bool>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -69,11 +64,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:20:9\n    |\n-LL | /     const _BAD3: () = unsafe {\n-LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n-LL | |     };\n-   | |______-\n+LL |     const _BAD3: () = unsafe {\n+   |     ---------------\n+LL |         intrinsics::assert_zero_valid::<&'static i32>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "17cbaef1f06d75b87295cac994ca92af46ac2299", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/assoc_const_generic_impl.rs:11:34\n    |\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n-   |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                  |\n-   |                                  index out of bounds: the length is 1 but the index is 4\n+   |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9\n@@ -27,9 +25,7 @@ warning: any use of this value will cause an error\n   --> $DIR/assoc_const_generic_impl.rs:11:34\n    |\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n-   |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                  |\n-   |                                  index out of bounds: the length is 1 but the index is 4\n+   |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9"}, {"sha": "6c51ed89393a5d70009278df1e77150981a5d16f", "filename": "src/test/ui/consts/const-as-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-as-fn.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0618]: expected function, found `usize`\n   --> $DIR/const-as-fn.rs:4:5\n    |\n LL | const FOO: usize = 0;\n-   | --------------------- `FOO` defined here\n+   | ---------------- `FOO` defined here\n ...\n LL |     FOO();\n    |     ^^^--"}, {"sha": "1b94aa080dda5bd720eac8a97f73f8cba548697d", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:3:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   attempt to negate `i8::MIN`, which would overflow\n+   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -18,9 +16,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n-   | ------------------^^^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -29,9 +25,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n-   | ------------------^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -40,9 +34,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:9:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ------------------^^^^^^^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -51,9 +43,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:11:19\n    |\n LL | pub const E: u8 = [5u8][1];\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   index out of bounds: the length is 1 but the index is 1\n+   | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -65,9 +55,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:3:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   attempt to negate `i8::MIN`, which would overflow\n+   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -82,9 +70,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n-   | ------------------^^^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -99,9 +85,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n-   | ------------------^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -116,9 +100,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:9:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ------------------^^^^^^^^^^^^^^^^^-\n-   |                   |\n-   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -133,9 +115,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:11:19\n    |\n LL | pub const E: u8 = [5u8][1];\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   index out of bounds: the length is 1 but the index is 1\n+   | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9"}, {"sha": "f179843654e9ba449d7e54fbdc363b5db5a63e50", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   attempt to negate `i8::MIN`, which would overflow\n+   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n@@ -18,9 +16,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:6:19\n    |\n LL | pub const B: i8 = A;\n-   | ------------------^-\n-   |                   |\n-   |                   referenced constant has errors\n+   | ---------------   ^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -29,9 +25,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ------------------^-------\n-   |                   |\n-   |                   referenced constant has errors\n+   | ---------------   ^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -40,9 +34,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:12:24\n    |\n LL | pub const D: i8 = 50 - A;\n-   | -----------------------^-\n-   |                        |\n-   |                        referenced constant has errors\n+   | ---------------        ^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -54,9 +46,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ------------------^^^^^^^^-\n-   |                   |\n-   |                   attempt to negate `i8::MIN`, which would overflow\n+   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n@@ -71,9 +61,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:6:19\n    |\n LL | pub const B: i8 = A;\n-   | ------------------^-\n-   |                   |\n-   |                   referenced constant has errors\n+   | ---------------   ^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n@@ -88,9 +76,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ------------------^-------\n-   |                   |\n-   |                   referenced constant has errors\n+   | ---------------   ^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n@@ -105,9 +91,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:12:24\n    |\n LL | pub const D: i8 = 50 - A;\n-   | -----------------------^-\n-   |                        |\n-   |                        referenced constant has errors\n+   | ---------------        ^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9"}, {"sha": "e3b0d29c853241dffead0933d1e2ab8cc611d598", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const-err.rs:11:17\n    |\n LL | const FOO: u8 = [5u8][1];\n-   | ----------------^^^^^^^^-\n-   |                 |\n-   |                 index out of bounds: the length is 1 but the index is 1\n+   | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9\n@@ -34,9 +32,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const-err.rs:11:17\n    |\n LL | const FOO: u8 = [5u8][1];\n-   | ----------------^^^^^^^^-\n-   |                 |\n-   |                 index out of bounds: the length is 1 but the index is 1\n+   | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9"}, {"sha": "2312e2a45db5b780bbf886c46c2c251be2284636", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/conditional_array_execution.rs:7:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ------------------^^^^^---------------------------\n-   |                   |\n-   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n+   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n@@ -38,9 +36,7 @@ warning: any use of this value will cause an error\n   --> $DIR/conditional_array_execution.rs:7:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ------------------^^^^^---------------------------\n-   |                   |\n-   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n+   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9"}, {"sha": "cf50c19caa7ddfa45f13d980ca0356f5884525c4", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -17,9 +17,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const-eval-overflow-2.rs:11:25\n    |\n LL | const NEG_NEG_128: i8 = -NEG_128;\n-   | ------------------------^^^^^^^^-\n-   |                         |\n-   |                         attempt to negate `i8::MIN`, which would overflow\n+   | ---------------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow-2.rs:4:36"}, {"sha": "dab9a76c7d42337450fe4bb4d37ea68fda5582f1", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 76, "deletions": 92, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,11 @@\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MIN - 1,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -19,88 +18,81 @@ LL | #![deny(const_err)]\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MIN - 1,\n+   |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -111,12 +103,11 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MIN - 1,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -130,12 +121,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -149,12 +139,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -168,12 +157,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -187,12 +175,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MIN - 1,\n+   |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -206,11 +193,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -224,11 +210,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -242,12 +227,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MIN - 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9"}, {"sha": "5fe9917437e008b04be1030ca2e094a53ef9208f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 76, "deletions": 92, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,11 @@\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MAX + 1,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -19,88 +18,81 @@ LL | #![deny(const_err)]\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MAX + 1,\n+   |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -111,12 +103,11 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MAX + 1,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -130,12 +121,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -149,12 +139,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -168,12 +157,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -187,12 +175,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MAX + 1,\n+   |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -206,11 +193,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -224,11 +210,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -242,12 +227,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MAX + 1,\n+   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9"}, {"sha": "d5f3a0fb1c3f4d15ab8d89ab82df3ac962a34383", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 76, "deletions": 92, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,11 @@\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MIN * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MIN * 2,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -19,88 +18,81 @@ LL | #![deny(const_err)]\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MAX * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MAX * 2,\n+   |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -111,12 +103,11 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:14:6\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |     (\n-LL | |      i8::MIN * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I8: (i8,) =\n+   | --------------------\n+LL |     (\n+LL |      i8::MIN * 2,\n+   |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -130,12 +121,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:21:6\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |     (\n-LL | |      i16::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I16: (i16,) =\n+   | ----------------------\n+LL |     (\n+LL |      i16::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -149,12 +139,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |     (\n-LL | |      i32::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I32: (i32,) =\n+   | ----------------------\n+LL |     (\n+LL |      i32::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -168,12 +157,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:35:6\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |     (\n-LL | |      i64::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_I64: (i64,) =\n+   | ----------------------\n+LL |     (\n+LL |      i64::MIN * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -187,12 +175,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:42:6\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |     (\n-LL | |      u8::MAX * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U8: (u8,) =\n+   | --------------------\n+LL |     (\n+LL |      u8::MAX * 2,\n+   |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -206,11 +193,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:48:6\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      u16::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U16: (u16,) = (\n+   | ----------------------\n+LL |      u16::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -224,11 +210,10 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:54:6\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      u32::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U32: (u32,) = (\n+   | ----------------------\n+LL |      u32::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -242,12 +227,11 @@ Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:61:6\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |     (\n-LL | |      u64::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n-LL | |      );\n-   | |_______-\n+LL | const VALS_U64: (u64,) =\n+   | ----------------------\n+LL |     (\n+LL |      u64::MAX * 2,\n+   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9"}, {"sha": "0ae7bfa86bc761c1f522b41031ea5c8ef2c8573e", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const-eval-query-stack.rs:19:16\n    |\n LL | const X: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8\n@@ -40,9 +38,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const-eval-query-stack.rs:19:16\n    |\n LL | const X: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8"}, {"sha": "655a7d520545c0dbadf09820bd001f644132afa0", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 56, "deletions": 164, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:26:49\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     --------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                                 |\n-   |                                                 unable to turn pointer into raw bytes\n+   |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -14,9 +12,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -25,9 +21,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -36,9 +30,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:38:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -47,9 +39,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:42:45\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -58,7 +48,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:46:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -69,9 +59,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:49:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -80,9 +68,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:53:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -91,9 +77,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:57:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -102,9 +86,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:61:45\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -113,7 +95,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:65:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -124,9 +106,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:68:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -135,9 +115,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:72:45\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -146,9 +124,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:76:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                               |\n-   |                                               unable to turn pointer into raw bytes\n+   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -157,9 +133,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:80:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                               |\n-   |                                               unable to turn pointer into raw bytes\n+   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -168,9 +142,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:84:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -179,9 +151,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -190,9 +160,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:92:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -201,9 +169,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:96:41\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -212,9 +178,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:100:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -223,9 +187,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:104:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -234,9 +196,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:108:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -245,9 +205,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:112:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -256,9 +214,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:116:41\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -267,9 +223,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:120:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -278,9 +232,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:124:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -289,9 +241,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:128:41\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -300,9 +250,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:132:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -311,9 +259,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:136:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -326,9 +272,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:26:49\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     --------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                                 |\n-   |                                                 unable to turn pointer into raw bytes\n+   |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -339,9 +283,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -352,9 +294,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -365,9 +305,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:38:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -378,9 +316,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:42:45\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -391,9 +327,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:49:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -404,9 +338,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:53:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -417,9 +349,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:57:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -430,9 +360,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:61:45\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -443,9 +371,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:68:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -456,9 +382,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:72:45\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                             |\n-   |                                             unable to turn pointer into raw bytes\n+   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -469,9 +393,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:76:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                               |\n-   |                                               unable to turn pointer into raw bytes\n+   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -482,9 +404,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:80:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                               |\n-   |                                               unable to turn pointer into raw bytes\n+   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -495,9 +415,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:84:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -508,9 +426,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -521,9 +437,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:92:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -534,9 +448,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:96:41\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -547,9 +459,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:100:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -560,9 +470,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:104:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -573,9 +481,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:108:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -586,9 +492,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:112:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -599,9 +503,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:116:41\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -612,9 +514,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:120:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -625,9 +525,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:124:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -638,9 +536,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:128:41\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                         |\n-   |                                         unable to turn pointer into raw bytes\n+   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -651,9 +547,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:132:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -664,9 +558,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:136:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                           |\n-   |                                           unable to turn pointer into raw bytes\n+   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "f6ffa1ef2969e1ef29df84283ef8c6a602aafcaf", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -33,7 +33,7 @@ LL |     x(y)\n    |     inside `Y` at $DIR/const_fn_ptr_fail2.rs:15:18\n ...\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n-   | ---------------------------\n+   | --------------\n    |\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n@@ -55,7 +55,7 @@ LL |     x(y)\n    |     inside `Z` at $DIR/const_fn_ptr_fail2.rs:16:18\n ...\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n-   | --------------------------------\n+   | --------------\n    |\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10"}, {"sha": "adfb4cc61cc6239274bed94f035ba5a0eeb1ed3d", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,9 +14,7 @@ warning: any use of this value will cause an error\n   --> $DIR/erroneous-const.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |     -----------------^^^^^^^-\n-   |                      |\n-   |                      index out of bounds: the length is 1 but the index is 2\n+   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9\n@@ -46,9 +44,7 @@ warning: any use of this value will cause an error\n   --> $DIR/erroneous-const.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |     -----------------^^^^^^^-\n-   |                      |\n-   |                      index out of bounds: the length is 1 but the index is 2\n+   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9"}, {"sha": "e947d93e4058213e65b60b3f7603cefe925e5aab", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,9 +14,7 @@ warning: any use of this value will cause an error\n   --> $DIR/erroneous-const2.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |     -----------------^^^^^^^-\n-   |                      |\n-   |                      index out of bounds: the length is 1 but the index is 2\n+   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9\n@@ -40,9 +38,7 @@ warning: any use of this value will cause an error\n   --> $DIR/erroneous-const2.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |     -----------------^^^^^^^-\n-   |                      |\n-   |                      index out of bounds: the length is 1 but the index is 2\n+   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9"}, {"sha": "00ab0dfc557dd354ba241071007bbceb8bde01ba", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: untyped pointers are not allowed in constant\n   --> $DIR/alloc_intrinsic_nontransient_fail.rs:6:1\n    |\n LL | const FOO: *const i32 = foo();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f1a780926e74b28feb1ccc17f1c6907de89320dc", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc_intrinsic_uninit.rs:8:1\n    |\n LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "2eb401226f876154865740aa342a6f04c2e16ce1", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc_intrinsic_uninit.rs:8:1\n    |\n LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "36002b850b7e7340bb6c4600e318f93ad79b70bc", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: untyped pointers are not allowed in constant\n   --> $DIR/alloc_intrinsic_untyped.rs:6:1\n    |\n LL | const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "da4a21e08ab177ac103738abdf3c46ba818f4664", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/index-out-of-bounds-never-type.rs:10:61\n    |\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n-   |     --------------------------------------------------------^^^^^---\n-   |                                                             |\n-   |                                                             index out of bounds: the length is 0 but the index is 0\n+   |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9\n@@ -27,9 +25,7 @@ warning: any use of this value will cause an error\n   --> $DIR/index-out-of-bounds-never-type.rs:10:61\n    |\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n-   |     --------------------------------------------------------^^^^^---\n-   |                                                             |\n-   |                                                             index out of bounds: the length is 0 but the index is 0\n+   |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9"}, {"sha": "91065f416825685d3b66c25797dd5ac171e01ebb", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:10:20\n    |\n LL |     const X: u32 = 0 - 1;\n-   |     ---------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n@@ -18,9 +16,7 @@ warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:13:24\n    |\n LL |     const Y: u32 = foo(0 - 1);\n-   |     -------------------^^^^^--\n-   |                        |\n-   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -65,9 +61,7 @@ warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:10:20\n    |\n LL |     const X: u32 = 0 - 1;\n-   |     ---------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n@@ -82,9 +76,7 @@ warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:13:24\n    |\n LL |     const Y: u32 = foo(0 - 1);\n-   |     -------------------^^^^^--\n-   |                        |\n-   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9"}, {"sha": "81e563b4f54605753b44c689bc5d2842f29443b4", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,9 +12,7 @@ warning: any use of this value will cause an error\n   --> $DIR/issue-44578.rs:15:24\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n-   |     -------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                        |\n-   |                        index out of bounds: the length is 1 but the index is 1\n+   |     ----------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/issue-44578.rs:3:10"}, {"sha": "cc19caca72414a6168508eb7597ff7e2f8162d34", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-50814-2.rs:14:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     -------------------^^^^^^^^^^^^^^^^^-\n-   |                        |\n-   |                        index out of bounds: the length is 3 but the index is 42\n+   |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -30,9 +28,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-50814-2.rs:14:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     -------------------^^^^^^^^^^^^^^^^^-\n-   |                        |\n-   |                        index out of bounds: the length is 3 but the index is 42\n+   |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "6ceef91a042aa21edb55783dd20f1fe1c58a6513", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-50814.rs:15:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ----------------^^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n+   |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -30,9 +28,7 @@ error: any use of this value will cause an error\n   --> $DIR/issue-50814.rs:15:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ----------------^^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n+   |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "b007dda246de333b5c7fce8f338e5210d4d88e6f", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,16 +1,11 @@\n error: any use of this value will cause an error\n   --> $DIR/partial_ptr_overwrite.rs:8:9\n    |\n-LL | / const PARTIAL_OVERWRITE: () = {\n-LL | |     let mut p = &42;\n-LL | |     unsafe {\n-LL | |         let ptr: *mut _ = &mut p;\n-LL | |         *(ptr as *mut u8) = 123;\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n-...  |\n-LL | |     let x = *p;\n-LL | | };\n-   | |__-\n+LL | const PARTIAL_OVERWRITE: () = {\n+   | ---------------------------\n+...\n+LL |         *(ptr as *mut u8) = 123;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -22,16 +17,11 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/partial_ptr_overwrite.rs:8:9\n    |\n-LL | / const PARTIAL_OVERWRITE: () = {\n-LL | |     let mut p = &42;\n-LL | |     unsafe {\n-LL | |         let ptr: *mut _ = &mut p;\n-LL | |         *(ptr as *mut u8) = 123;\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n-...  |\n-LL | |     let x = *p;\n-LL | | };\n-   | |__-\n+LL | const PARTIAL_OVERWRITE: () = {\n+   | ---------------------------\n+...\n+LL |         *(ptr as *mut u8) = 123;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "cfca8ef07464fa5ae10aa6bbfddb9ce0146181cf", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -43,21 +43,15 @@ LL |     [1, 2, 3][4]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:15:5\n    |\n-LL |       0 - 1\n-   |       ^^^^^\n-   |       |\n-   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+LL |     0 - 1\n+   |     ^^^^^\n+   |     |\n+   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |     inside `X` at $DIR/promoted_errors.rs:43:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -70,15 +64,10 @@ LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-   | |                            ^^^^^^^^^^^ referenced constant has errors\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+LL |     let _x: &'static u32 = &overflow();\n+   |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -89,21 +78,15 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:15:5\n    |\n-LL |       0 - 1\n-   |       ^^^^^\n-   |       |\n-   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+LL |     0 - 1\n+   |     ^^^^^\n+   |     |\n+   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |     inside `X` at $DIR/promoted_errors.rs:43:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -117,15 +100,10 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-   | |                            ^^^^^^^^^^^ referenced constant has errors\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+LL |     let _x: &'static u32 = &overflow();\n+   |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9"}, {"sha": "984484a850f46467edc4db6dad62367d2bdfb899", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 26, "deletions": 48, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -43,21 +43,15 @@ LL |     [1, 2, 3][4]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:21:5\n    |\n-LL |       1 / 0\n-   |       ^^^^^\n-   |       |\n-   |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n-   |       inside `X` at $DIR/promoted_errors.rs:46:29\n+LL |     1 / 0\n+   |     ^^^^^\n+   |     |\n+   |     attempt to divide `1_i32` by zero\n+   |     inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n+   |     inside `X` at $DIR/promoted_errors.rs:46:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -70,16 +64,11 @@ LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:46:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n-   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+...\n+LL |     let _x: &'static i32 = &div_by_zero1();\n+   |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -90,21 +79,15 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:21:5\n    |\n-LL |       1 / 0\n-   |       ^^^^^\n-   |       |\n-   |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n-   |       inside `X` at $DIR/promoted_errors.rs:46:29\n+LL |     1 / 0\n+   |     ^^^^^\n+   |     |\n+   |     attempt to divide `1_i32` by zero\n+   |     inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n+   |     inside `X` at $DIR/promoted_errors.rs:46:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -118,16 +101,11 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:46:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n-   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+...\n+LL |     let _x: &'static i32 = &div_by_zero1();\n+   |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9"}, {"sha": "cfca8ef07464fa5ae10aa6bbfddb9ce0146181cf", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -43,21 +43,15 @@ LL |     [1, 2, 3][4]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:15:5\n    |\n-LL |       0 - 1\n-   |       ^^^^^\n-   |       |\n-   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+LL |     0 - 1\n+   |     ^^^^^\n+   |     |\n+   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |     inside `X` at $DIR/promoted_errors.rs:43:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -70,15 +64,10 @@ LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-   | |                            ^^^^^^^^^^^ referenced constant has errors\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+LL |     let _x: &'static u32 = &overflow();\n+   |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -89,21 +78,15 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:15:5\n    |\n-LL |       0 - 1\n-   |       ^^^^^\n-   |       |\n-   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |       inside `X` at $DIR/promoted_errors.rs:43:29\n+LL |     0 - 1\n+   |     ^^^^^\n+   |     |\n+   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |     inside `X` at $DIR/promoted_errors.rs:43:29\n ...\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n@@ -117,15 +100,10 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n    |\n-LL | / const X: () = {\n-LL | |     let _x: &'static u32 = &overflow();\n-   | |                            ^^^^^^^^^^^ referenced constant has errors\n-LL | |\n-LL | |\n-...  |\n-LL | |     let _x: &'static i32 = &oob();\n-LL | | };\n-   | |__-\n+LL | const X: () = {\n+   | -----------\n+LL |     let _x: &'static u32 = &overflow();\n+   |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9"}, {"sha": "36197a7ab598ea637f4223de8ec9f545cd63f668", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/pub_const_err.rs:6:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | -------------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9\n@@ -21,9 +19,7 @@ warning: any use of this value will cause an error\n   --> $DIR/pub_const_err.rs:6:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | -------------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9"}, {"sha": "2eef3b8f5c4187cdb4551f251b3f9bd60da851fa", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/pub_const_err_bin.rs:4:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | -------------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9\n@@ -21,9 +19,7 @@ warning: any use of this value will cause an error\n   --> $DIR/pub_const_err_bin.rs:4:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | -------------------^^^^^-\n-   |                    |\n-   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n+   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9"}, {"sha": "0e3743588100983b534c15dd97e7602469a258b0", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------------------^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -29,9 +27,7 @@ error: any use of this value will cause an error\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------------------^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "0e3743588100983b534c15dd97e7602469a258b0", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------------------^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -29,9 +27,7 @@ error: any use of this value will cause an error\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------------------^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "09fd79986958de5e096eccab5d17667c393a111c", "filename": "src/test/ui/consts/const-eval/transmute-const.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/transmute-const.rs:4:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {"}, {"sha": "09fd79986958de5e096eccab5d17667c393a111c", "filename": "src/test/ui/consts/const-eval/transmute-const.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/transmute-const.rs:4:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {"}, {"sha": "8560112ae3b70ab1af872f0c45989e3baa176043", "filename": "src/test/ui/consts/const-eval/ub-enum-overwrite.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum-overwrite.rs:8:1\n    |\n-LL | / const _: u8 = {\n-LL | |\n-LL | |     let mut e = E::A(1);\n-LL | |     let p = if let E::A(x) = &mut e { x as *mut u8 } else { unreachable!() };\n-...  |\n-LL | |     unsafe { *p }\n-LL | | };\n-   | |__^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n+LL | const _: u8 = {\n+   | ^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {"}, {"sha": "2f8b44da0fc9b7b481d03d1bbd88232bde8c67e9", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x00000001, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x00000001, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -13,7 +13,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -23,7 +23,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -32,7 +32,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:43:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -43,7 +43,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -52,7 +52,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:49:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -61,7 +61,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:59:1\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -72,7 +72,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:63:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -81,7 +81,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:81:1\n    |\n LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute(1u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -92,7 +92,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:83:1\n    |\n LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -103,7 +103,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:91:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute(!0u32) }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -130,7 +130,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -141,7 +141,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -152,7 +152,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -163,7 +163,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:49:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -174,7 +174,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:63:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "3a05a5150f1a7a6025ac3c138801c3b1fc18a40a", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x0000000000000001, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x0000000000000001, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -13,7 +13,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -23,7 +23,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -32,7 +32,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:43:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -43,7 +43,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -52,7 +52,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:49:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -61,7 +61,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:59:1\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -72,7 +72,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:63:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -81,7 +81,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:81:1\n    |\n LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute(1u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -92,7 +92,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:83:1\n    |\n LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -103,7 +103,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:91:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute(!0u32) }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -130,7 +130,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -141,7 +141,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -152,7 +152,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -163,7 +163,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:49:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -174,7 +174,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:63:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "c6422447a4b79b88519efce3a0883a7aec7b7cb2", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.32bit.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,9 +13,8 @@ LL |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-incorrect-vtable.rs:34:1\n    |\n-LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n-LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n-   | |_____________________________________________________________________________________________^ constructing invalid value at .0: encountered invalid vtable: alignment `1000` is not a power of 2\n+LL | const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid vtable: alignment `1000` is not a power of 2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -25,9 +24,8 @@ LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1us\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-incorrect-vtable.rs:39:1\n    |\n-LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n-LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n-   | |______________________________________________________________________________________________^ constructing invalid value at .0: encountered invalid vtable: size is bigger than largest supported object\n+LL | const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid vtable: size is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "e594ad71b5b48c8b7f20118a7cd8d80d2c8caf8e", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.64bit.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,9 +13,8 @@ LL |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-incorrect-vtable.rs:34:1\n    |\n-LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n-LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n-   | |_____________________________________________________________________________________________^ constructing invalid value at .0: encountered invalid vtable: alignment `1000` is not a power of 2\n+LL | const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid vtable: alignment `1000` is not a power of 2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -25,9 +24,8 @@ LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1us\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-incorrect-vtable.rs:39:1\n    |\n-LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n-LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n-   | |______________________________________________________________________________________________^ constructing invalid value at .0: encountered invalid vtable: size is bigger than largest supported object\n+LL | const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid vtable: size is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "8eece9e30e4b0d98ecdd26da1a1f289ed9da4f02", "filename": "src/test/ui/consts/const-eval/ub-int-array.32bit.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:14:1\n    |\n-LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     [\n-...  |\n-LL | |     ]\n-LL | | };\n-   | |__^ constructing invalid value at [0]: encountered uninitialized bytes\n+LL | const UNINIT_INT_0: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {\n@@ -18,14 +12,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:23:1\n    |\n-LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     mem::transmute(\n-...  |\n-LL | |     )\n-LL | | };\n-   | |__^ constructing invalid value at [1]: encountered uninitialized bytes\n+LL | const UNINIT_INT_1: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [1]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {\n@@ -35,14 +23,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:43:1\n    |\n-LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     mem::transmute(\n-...  |\n-LL | |     )\n-LL | | };\n-   | |__^ constructing invalid value at [2]: encountered uninitialized bytes\n+LL | const UNINIT_INT_2: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [2]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {"}, {"sha": "8eece9e30e4b0d98ecdd26da1a1f289ed9da4f02", "filename": "src/test/ui/consts/const-eval/ub-int-array.64bit.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:14:1\n    |\n-LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     [\n-...  |\n-LL | |     ]\n-LL | | };\n-   | |__^ constructing invalid value at [0]: encountered uninitialized bytes\n+LL | const UNINIT_INT_0: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {\n@@ -18,14 +12,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:23:1\n    |\n-LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     mem::transmute(\n-...  |\n-LL | |     )\n-LL | | };\n-   | |__^ constructing invalid value at [1]: encountered uninitialized bytes\n+LL | const UNINIT_INT_1: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [1]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {\n@@ -35,14 +23,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-int-array.rs:43:1\n    |\n-LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n-LL | |\n-LL | |\n-LL | |     mem::transmute(\n-...  |\n-LL | |     )\n-LL | | };\n-   | |__^ constructing invalid value at [2]: encountered uninitialized bytes\n+LL | const UNINIT_INT_2: [u32; 3] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [2]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 12, align: 4) {"}, {"sha": "d450a814cfa73880eea3f61245da0b525bb1cc59", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:12:1\n    |\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -19,7 +19,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -30,7 +30,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -41,7 +41,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -52,7 +52,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -63,7 +63,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "ed0d91aabd33b53c890331e11b4db6a608e580d9", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:12:1\n    |\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -19,7 +19,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -30,7 +30,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -41,7 +41,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -52,7 +52,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -63,7 +63,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "b60e3337b444ae764913232b08bb7f135639e63f", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:13:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:17:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -24,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:21:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -35,7 +35,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:24:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -46,7 +46,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -56,9 +56,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -67,9 +65,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                      |\n-   |                                      referenced constant has errors\n+   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -78,9 +74,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                      |\n-   |                                                                                      unable to turn pointer into raw bytes\n+   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -89,9 +83,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                     |\n-   |                                                                                     referenced constant has errors\n+   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -100,7 +92,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:47:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -111,7 +103,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:50:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -122,7 +114,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:53:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -133,7 +125,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:56:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -144,7 +136,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:58:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a proper pointer or integer value\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -155,7 +147,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:60:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x0000000d, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x0000000d, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -166,7 +158,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:62:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered pointer to alloc43, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered pointer to alloc43, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -181,7 +173,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -192,9 +184,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -205,9 +195,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                      |\n-   |                                      referenced constant has errors\n+   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -218,9 +206,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                      |\n-   |                                                                                      unable to turn pointer into raw bytes\n+   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -231,9 +217,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                     |\n-   |                                                                                     referenced constant has errors\n+   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "505ef2dd7d782cd6e5a144978626cbe4278a39b2", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:13:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:17:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -24,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:21:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -35,7 +35,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:24:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -46,7 +46,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -56,9 +56,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -67,9 +65,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                      |\n-   |                                      referenced constant has errors\n+   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -78,9 +74,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                      |\n-   |                                                                                      unable to turn pointer into raw bytes\n+   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -89,9 +83,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                     |\n-   |                                                                                     referenced constant has errors\n+   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -100,7 +92,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:47:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -111,7 +103,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:50:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -122,7 +114,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:53:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -133,7 +125,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:56:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -144,7 +136,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:58:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a proper pointer or integer value\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -155,7 +147,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:60:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x000000000000000d, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x000000000000000d, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -166,7 +158,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:62:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered pointer to alloc43, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered pointer to alloc43, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -181,7 +173,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -192,9 +184,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                       |\n-   |                                       unable to turn pointer into raw bytes\n+   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -205,9 +195,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                      |\n-   |                                      referenced constant has errors\n+   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -218,9 +206,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                      |\n-   |                                                                                      unable to turn pointer into raw bytes\n+   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -231,9 +217,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:41:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n-   |                                                                                     |\n-   |                                                                                     referenced constant has errors\n+   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "7f0feb13004943d268208c8fb3ec52789dfd7db5", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:15:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n@@ -11,7 +11,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -22,7 +22,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}"}, {"sha": "4dcbbc2f5e41b879a840c29539fae2ab25b45565", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:15:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n@@ -11,7 +11,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -22,7 +22,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}"}, {"sha": "43f73f6ec7f2792a00bfe5fc06f74dbfda847947", "filename": "src/test/ui/consts/const-eval/ub-upvars.32bit.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-upvars.rs:6:1\n    |\n-LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n-LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n-LL | |     let another_var = 13;\n-LL | |     move || { let _ = bad_ref; let _ = another_var; }\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>.<dyn-downcast>.<captured-var(bad_ref)>: encountered a null reference\n+LL | const BAD_UPVAR: &dyn FnOnce() = &{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.<captured-var(bad_ref)>: encountered a null reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "64185a063629733372ce4b842bbe1a9322ea7f37", "filename": "src/test/ui/consts/const-eval/ub-upvars.64bit.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-upvars.rs:6:1\n    |\n-LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n-LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n-LL | |     let another_var = 13;\n-LL | |     move || { let _ = bad_ref; let _ = another_var; }\n-LL | | };\n-   | |__^ constructing invalid value at .<deref>.<dyn-downcast>.<captured-var(bad_ref)>: encountered a null reference\n+LL | const BAD_UPVAR: &dyn FnOnce() = &{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.<captured-var(bad_ref)>: encountered a null reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "74f21c7c34fc8bc98c93c106d5477ff2a325b17f", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 39, "deletions": 59, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:37:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:39:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -24,7 +24,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:42:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -34,7 +34,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -43,7 +43,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:49:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -54,7 +54,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:53:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -65,7 +65,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:56:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -75,12 +75,8 @@ LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUni\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:63:1\n    |\n-LL | / const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n-LL | |\n-LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n-LL | |     mem::transmute((42, uninit_len))\n-LL | | };\n-   | |__^ constructing invalid value: encountered uninitialized reference\n+LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -91,7 +87,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:69:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -102,7 +98,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:72:1\n    |\n LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, isize::MAX)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -113,7 +109,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:75:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -122,7 +118,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:79:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -133,7 +129,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:82:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -142,7 +138,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:87:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -153,9 +149,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:87:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                        |\n-   |                                        referenced constant has errors\n+   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -164,7 +158,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:95:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -175,9 +169,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:95:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -186,7 +178,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:100:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -197,22 +189,16 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:100:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:109:1\n    |\n-LL | / const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n-LL | |\n-LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n-LL | |     mem::transmute((42, uninit_len))\n-LL | | };\n-   | |__^ constructing invalid value: encountered uninitialized raw pointer\n+LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -223,7 +209,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:117:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u8))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -234,7 +220,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u64))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -245,7 +231,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, 4usize))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered dangling vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -256,7 +242,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:125:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered unaligned vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -267,7 +253,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:127:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -278,7 +264,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:129:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -289,7 +275,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:131:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &[&42u8; 8]))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -300,7 +286,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:135:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -311,7 +297,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:139:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered dangling vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -322,7 +308,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:141:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -349,7 +335,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:42:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -360,7 +346,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -371,7 +357,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:75:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -382,7 +368,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:82:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -393,9 +379,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:87:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                        |\n-   |                                        referenced constant has errors\n+   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -406,9 +390,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:95:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -419,9 +401,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:100:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "1775b0dc2ed9097925a13688a42a14e3b5d09772", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 39, "deletions": 59, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:37:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:39:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -24,7 +24,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:42:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -34,7 +34,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -43,7 +43,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:49:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -54,7 +54,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:53:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -65,7 +65,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:56:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -75,12 +75,8 @@ LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUni\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:63:1\n    |\n-LL | / const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n-LL | |\n-LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n-LL | |     mem::transmute((42, uninit_len))\n-LL | | };\n-   | |__^ constructing invalid value: encountered uninitialized reference\n+LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -91,7 +87,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:69:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -102,7 +98,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:72:1\n    |\n LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, isize::MAX)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -113,7 +109,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:75:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -122,7 +118,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:79:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -133,7 +129,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:82:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -142,7 +138,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:87:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -153,9 +149,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:87:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                        |\n-   |                                        referenced constant has errors\n+   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -164,7 +158,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:95:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -175,9 +169,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:95:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -186,7 +178,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:100:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -197,22 +189,16 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:100:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:109:1\n    |\n-LL | / const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n-LL | |\n-LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n-LL | |     mem::transmute((42, uninit_len))\n-LL | | };\n-   | |__^ constructing invalid value: encountered uninitialized raw pointer\n+LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -223,7 +209,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:117:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u8))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -234,7 +220,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u64))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -245,7 +231,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, 4usize))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered dangling vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -256,7 +242,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:125:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered unaligned vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -267,7 +253,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:127:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -278,7 +264,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:129:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -289,7 +275,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:131:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &[&42u8; 8]))) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -300,7 +286,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:135:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -311,7 +297,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:139:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered dangling vtable pointer in wide pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -322,7 +308,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:141:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -349,7 +335,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:42:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -360,7 +346,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -371,7 +357,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:75:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -382,7 +368,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:82:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -393,9 +379,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:87:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                        |\n-   |                                        referenced constant has errors\n+   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -406,9 +390,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:95:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -419,9 +401,7 @@ error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:100:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |\n-   |                                          referenced constant has errors\n+   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "c512e6825042ff1fe3f82f80dd346a6dec829672", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-const-eval-field.rs:28:5\n    |\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "21a54550900bb923d78d5be6a3c42d98e3dbfd78", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:14:1\n    |\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -12,11 +12,8 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:16:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct {\n-LL | |     a: 42,\n-LL | |     b: unsafe { UNION.field3 },\n-LL | | };\n-   | |__^ constructing invalid value at .b: encountered uninitialized bytes, but expected initialized bytes\n+LL | const FIELD_PATH: Struct = Struct {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .b: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -26,14 +23,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:26:1\n    |\n-LL | / const FIELD_PATH2: Struct2 = Struct2 {\n-LL | |     b: [\n-LL | |         21,\n-LL | |         unsafe { UNION.field3 },\n-...  |\n-LL | |     a: 42,\n-LL | | };\n-   | |__^ constructing invalid value at .b[1]: encountered uninitialized bytes\n+LL | const FIELD_PATH2: Struct2 = Struct2 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .b[1]: encountered uninitialized bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 40, align: 8) {"}, {"sha": "baf6825966007859f037b131cb09e494e79dadb5", "filename": "src/test/ui/consts/const-eval/union-ub.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:33:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:35:1\n    |\n LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {"}, {"sha": "baf6825966007859f037b131cb09e494e79dadb5", "filename": "src/test/ui/consts/const-eval/union-ub.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:33:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:35:1\n    |\n LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a boolean\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered uninitialized bytes, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 1, align: 1) {"}, {"sha": "df5bd524f2727f02fc9c50082e55dec5b80245bc", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/unused-broken-const.rs:5:18\n    |\n LL | const FOO: i32 = [][0];\n-   | -----------------^^^^^-\n-   |                  |\n-   |                  index out of bounds: the length is 0 but the index is 0\n+   | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ error: any use of this value will cause an error\n   --> $DIR/unused-broken-const.rs:5:18\n    |\n LL | const FOO: i32 = [][0];\n-   | -----------------^^^^^-\n-   |                  |\n-   |                  index out of bounds: the length is 0 but the index is 0\n+   | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "bdaeb4a0fbee0b5d48a2be5d0fcb367f822de35c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:23:1\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}"}, {"sha": "bdaeb4a0fbee0b5d48a2be5d0fcb367f822de35c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:23:1\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}"}, {"sha": "b77c6591d4975d4ea15d53333069d2a11025179e", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -60,7 +60,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:30:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -73,7 +73,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:33:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -85,7 +85,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:41:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -97,7 +97,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:44:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -167,7 +167,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:57:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -179,7 +179,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:60:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -191,7 +191,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:66:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -203,7 +203,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:69:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -219,7 +219,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:30:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -233,7 +233,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:33:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -247,7 +247,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:41:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -261,7 +261,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:44:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -275,7 +275,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:57:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -289,7 +289,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:60:34\n    |\n LL |             const _: () = assert!($a);\n-   |             --------------------------\n+   |             -----------\n ...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n@@ -303,7 +303,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:66:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n@@ -317,7 +317,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:69:38\n    |\n LL |             const _: () = assert!($a == $b);\n-   |             --------------------------------\n+   |             -----------\n ...\n LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors"}, {"sha": "d1bf4b92e6a506e4dc3033c7f71e0badeb64710a", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-len-underflow-separate-spans.rs:7:20\n    |\n LL | const LEN: usize = ONE - TWO;\n-   | -------------------^^^^^^^^^-\n-   |                    |\n-   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n+   | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -24,9 +22,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-len-underflow-separate-spans.rs:7:20\n    |\n LL | const LEN: usize = ONE - TWO;\n-   | -------------------^^^^^^^^^-\n-   |                    |\n-   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n+   | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "f2aec37a72922d1dab907fd7509fa8951387eac5", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,7 +14,7 @@ error: encountered dangling pointer in final constant\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:25:1\n    |\n LL | const B: Option<&mut i32> = helper2();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a2b8f072c6ea7f43bb238b58fa7fabbf7ddeba35", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::\n   --> $DIR/const-pattern-irrefutable.rs:12:9\n    |\n LL | const a: u8 = 2;\n-   | ---------------- constant defined here\n+   | ----------- constant defined here\n ...\n LL |     let a = 4;\n    |         ^\n@@ -16,7 +16,7 @@ error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::\n   --> $DIR/const-pattern-irrefutable.rs:13:9\n    |\n LL |     pub const b: u8 = 2;\n-   |     -------------------- constant defined here\n+   |     --------------- constant defined here\n ...\n LL |     let c = 4;\n    |         ^\n@@ -30,7 +30,7 @@ error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::\n   --> $DIR/const-pattern-irrefutable.rs:14:9\n    |\n LL |     pub const d: u8 = 2;\n-   |     -------------------- constant defined here\n+   |     --------------- constant defined here\n ...\n LL |     let d = 4;\n    |         ^"}, {"sha": "97825dd0eb5170b9c5ef868d18176e901ca9b3fc", "filename": "src/test/ui/consts/const-points-to-static.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:6:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "0d4a5a8ce4f332860ee62613fe442a7c01c5fae9", "filename": "src/test/ui/consts/const-points-to-static.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:6:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "ea5ad24b0b1357871a5c7cee2940911f89b782c2", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n LL | const TEST: u8 = MY_STATIC;\n-   | -----------------^^^^^^^^^-\n-   |                  |\n-   |                  constant accesses static\n+   | --------------   ^^^^^^^^^ constant accesses static\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -25,9 +23,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n LL | const TEST: u8 = MY_STATIC;\n-   | -----------------^^^^^^^^^-\n-   |                  |\n-   |                  constant accesses static\n+   | --------------   ^^^^^^^^^ constant accesses static\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "d19a89378eca1b34f459df43b047a7010eefe73f", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n    |\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               `extern type` does not have known layout\n+   | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -14,9 +12,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n    |\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n-   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                |\n-   |                                `extern type` does not have known layout\n+   | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -28,9 +24,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n    |\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               `extern type` does not have known layout\n+   | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -41,9 +35,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n    |\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n-   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                |\n-   |                                `extern type` does not have known layout\n+   | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "27c21e7af149b793b74d3089350638ec583d28ec", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-slice-oob.rs:4:18\n    |\n LL | const BAR: u32 = FOO[5];\n-   | -----------------^^^^^^-\n-   |                  |\n-   |                  index out of bounds: the length is 3 but the index is 5\n+   | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-slice-oob.rs:4:18\n    |\n LL | const BAR: u32 = FOO[5];\n-   | -----------------^^^^^^-\n-   |                  |\n-   |                  index out of bounds: the length is 3 but the index is 5\n+   | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "e450f4aa3bd518f7841902eabb247475f87a9298", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,15 +1,11 @@\n error: any use of this value will cause an error\n   --> $DIR/const_eval_limit_reached.rs:6:11\n    |\n-LL | / const X: usize = {\n-LL | |     let mut x = 0;\n-LL | |     while x != 1000 {\n-   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-LL | |\n-...  |\n-LL | |     x\n-LL | | };\n-   | |__-\n+LL | const X: usize = {\n+   | --------------\n+LL |     let mut x = 0;\n+LL |     while x != 1000 {\n+   |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -21,15 +17,11 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $DIR/const_eval_limit_reached.rs:6:11\n    |\n-LL | / const X: usize = {\n-LL | |     let mut x = 0;\n-LL | |     while x != 1000 {\n-   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-LL | |\n-...  |\n-LL | |     x\n-LL | | };\n-   | |__-\n+LL | const X: usize = {\n+   | --------------\n+LL |     let mut x = 0;\n+LL |     while x != 1000 {\n+   |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "8410034c041daaed520371f865ae3871ba578469", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,8 @@\n error: encountered dangling pointer in final constant\n   --> $DIR/dangling-alloc-id-ice.rs:9:1\n    |\n-LL | / const FOO: &() = {\n-LL | |\n-LL | |     let y = ();\n-LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n-LL | | };\n-   | |__^\n+LL | const FOO: &() = {\n+   | ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bdfe1e4effe3ed4b5a8d3955f9404e3eed0c6e58", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,11 +1,8 @@\n error: encountered dangling pointer in final constant\n   --> $DIR/dangling_raw_ptr.rs:1:1\n    |\n-LL | / const FOO: *const u32 = {\n-LL | |     let x = 42;\n-LL | |     &x\n-LL | | };\n-   | |__^\n+LL | const FOO: *const u32 = {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4797d10b7a80c719b80a91bdf6dd7708c03553f3", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9"}, {"sha": "755c7fb7d4d9f122d7a593da8d32c690fdfc00ce", "filename": "src/test/ui/consts/issue-63952.32bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-63952.rs:17:1\n    |\n-LL | / const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n-LL | |     SliceTransmute {\n-LL | |         repr: SliceRepr {\n-LL | |             ptr: &42,\n-...  |\n-LL | |     .slice\n-LL | | };\n-   | |__^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+LL | const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "abdb9a4f7920d10dca4e0d3b248c0a87f636a4c5", "filename": "src/test/ui/consts/issue-63952.64bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-63952.rs:17:1\n    |\n-LL | / const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n-LL | |     SliceTransmute {\n-LL | |         repr: SliceRepr {\n-LL | |             ptr: &42,\n-...  |\n-LL | |     .slice\n-LL | | };\n-   | |__^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n+LL | const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "c7aba555370885a60024628fcb644178b4d83362", "filename": "src/test/ui/consts/issue-79690.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-79690.rs:30:1\n    |\n LL | const G: Fat = unsafe { Transmute { t: FOO }.u };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .1.<deref>.size.foo: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^ constructing invalid value at .1.<deref>.size.foo: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "c810c8a7848c7d17bff33c4bea80d372f49c13f5", "filename": "src/test/ui/consts/issue-83182.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-83182.rs:5:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[&()]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered a pointer in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered a pointer in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "5fc2c934474dc37f3c26d176056c838f632e868f", "filename": "src/test/ui/consts/issue-83182.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-83182.rs:5:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[&()]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered a pointer in `str`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered a pointer in `str`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "afcf11bd5f2479826fe774d35988eba465de8d23", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,22 +1,18 @@\n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           unable to turn pointer into raw bytes\n-   |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         unable to turn pointer into raw bytes\n+   |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         inside `C` at $DIR/issue-miri-1910.rs:7:5\n    |\n   ::: $DIR/issue-miri-1910.rs:4:1\n    |\n-LL | / const C: () = unsafe {\n-LL | |     let foo = Some(&42 as *const i32);\n-LL | |     let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n-LL | |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n-LL | | };\n-   | |__-\n+LL | const C: () = unsafe {\n+   | -----------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -28,22 +24,18 @@ Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           unable to turn pointer into raw bytes\n-   |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         unable to turn pointer into raw bytes\n+   |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         inside `C` at $DIR/issue-miri-1910.rs:7:5\n    |\n   ::: $DIR/issue-miri-1910.rs:4:1\n    |\n-LL | / const C: () = unsafe {\n-LL | |     let foo = Some(&42 as *const i32);\n-LL | |     let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n-LL | |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n-LL | | };\n-   | |__-\n+LL | const C: () = unsafe {\n+   | -----------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "1f82ac827ad1d42173e3a3c1b4baf039041d6a3e", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -30,7 +30,7 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n   ::: $DIR/assoc_const.rs:14:5\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |     ----------------------------\n+   |     ------------\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const.rs:4:10"}, {"sha": "cbf02199f5bf5be85cfa2b2cfce7e5266c7eaad2", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,9 +12,7 @@ warning: any use of this value will cause an error\n   --> $DIR/assoc_const_2.rs:12:20\n    |\n LL |     const F: u32 = 100 / U::X;\n-   |     ---------------^^^^^^^^^^-\n-   |                    |\n-   |                    attempt to divide `100_u32` by zero\n+   |     ------------   ^^^^^^^^^^ attempt to divide `100_u32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const_2.rs:3:10"}, {"sha": "fa2088124b0bb18acf0d83489c8ae3df0b25320a", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -51,12 +51,11 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static.rs:13:5\n    |\n-LL | / const MUTATE_INTERIOR_MUT: usize = {\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n-LL | | };\n-   | |__-\n+LL | const MUTATE_INTERIOR_MUT: usize = {\n+   | --------------------------------\n+LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n@@ -70,12 +69,11 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static.rs:18:14\n    |\n-LL | / const READ_INTERIOR_MUT: usize = {\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n-   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | | };\n-   | |__-\n+LL | const READ_INTERIOR_MUT: usize = {\n+   | ------------------------------\n+LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n@@ -90,9 +88,7 @@ warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static.rs:22:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   | -------------------------------^^^^^^^---\n-   |                                |\n-   |                                constant accesses static\n+   | -------------------            ^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10"}, {"sha": "b3ad81e49bc16af5742031127cf3f9bdd8493e9b", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.32bit.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:11:1\n    |\n-LL | / const REF_INTERIOR_MUT: &usize = {\n-LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const REF_INTERIOR_MUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -16,12 +12,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:18:1\n    |\n-LL | / const READ_IMMUT: &usize = {\n-LL | |\n-LL | |     static FOO: usize = 0;\n-LL | |     &FOO\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const READ_IMMUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "24bd0709282655887858f614ca58dc615230fcc6", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,12 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:11:1\n    |\n-LL | / const REF_INTERIOR_MUT: &usize = {\n-LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const REF_INTERIOR_MUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -16,12 +12,8 @@ LL | | };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:18:1\n    |\n-LL | / const READ_IMMUT: &usize = {\n-LL | |\n-LL | |     static FOO: usize = 0;\n-LL | |     &FOO\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const READ_IMMUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "20a96b57f29b94458e505a878063e0c2c1f34089", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,11 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n-LL | / const SLICE_MUT: &[u8; 1] = {\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const SLICE_MUT: &[u8; 1] = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -21,11 +18,8 @@ LL |         SLICE_MUT => true,\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n-LL | / const U8_MUT: &u8 = {\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO[0] }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const U8_MUT: &u8 = {\n+   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -41,14 +35,10 @@ LL |         U8_MUT => true,\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n-LL | / const U8_MUT2: &u8 = {\n-LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT2: &u8 = {\n+   | ------------------\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n@@ -67,14 +57,10 @@ LL |         U8_MUT2 => true,\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n-LL | / const U8_MUT3: &u8 = {\n-LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT3: &u8 = {\n+   | ------------------\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n@@ -174,14 +160,10 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n-LL | / const U8_MUT2: &u8 = {\n-LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT2: &u8 = {\n+   | ------------------\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n@@ -195,14 +177,10 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n-LL | / const U8_MUT3: &u8 = {\n-LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT3: &u8 = {\n+   | ------------------\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8"}, {"sha": "dfa0f76baa1865f2ac436c8fe8cae3fb23e23c07", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,11 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n-LL | / const SLICE_MUT: &[u8; 1] = {\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const SLICE_MUT: &[u8; 1] = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -21,11 +18,8 @@ LL |         SLICE_MUT => true,\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n-LL | / const U8_MUT: &u8 = {\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO[0] }\n-LL | | };\n-   | |__^ constructing invalid value: encountered a reference pointing to a static variable\n+LL | const U8_MUT: &u8 = {\n+   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -41,14 +35,10 @@ LL |         U8_MUT => true,\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n-LL | / const U8_MUT2: &u8 = {\n-LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT2: &u8 = {\n+   | ------------------\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n@@ -67,14 +57,10 @@ LL |         U8_MUT2 => true,\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n-LL | / const U8_MUT3: &u8 = {\n-LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT3: &u8 = {\n+   | ------------------\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n@@ -174,14 +160,10 @@ Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n-LL | / const U8_MUT2: &u8 = {\n-LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT2: &u8 = {\n+   | ------------------\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n@@ -195,14 +177,10 @@ Future breakage diagnostic:\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n-LL | / const U8_MUT3: &u8 = {\n-LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+LL | const U8_MUT3: &u8 = {\n+   | ------------------\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8"}, {"sha": "bb8636f1225ad6e6ddaae1eeb4fd8911ca2f7170", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.32bit.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,10 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:17:1\n    |\n-LL | / const MUH: Meh = Meh {\n-LL | |     x: &UnsafeCell::new(42),\n-LL | | };\n-   | |__^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n+LL | const MUH: Meh = Meh {\n+   | ^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -15,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:27:1\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -26,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:31:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "f1652da922a57456c7a1f14ee78ad09a804a424c", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,10 +1,8 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:17:1\n    |\n-LL | / const MUH: Meh = Meh {\n-LL | |     x: &UnsafeCell::new(42),\n-LL | | };\n-   | |__^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n+LL | const MUH: Meh = Meh {\n+   | ^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -15,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:27:1\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -26,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:31:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n+   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "e145f6dd2ef58602d09855c2714800b8462b00b1", "filename": "src/test/ui/consts/miri_unleashed/raw_mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: untyped pointers are not allowed in constant\n   --> $DIR/raw_mutable_const.rs:7:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |"}, {"sha": "69936ee6c13e88328fa9fda9b9cd8e77d63f3fff", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -22,9 +22,7 @@ error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:65:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -34,9 +32,7 @@ error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -49,9 +45,7 @@ error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:65:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -62,9 +56,7 @@ error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------\n-   |                           |\n-   |                           unable to turn pointer into raw bytes\n+   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "0ebe1e95ca3efab5ebd13417e815bcc3aaa13234", "filename": "src/test/ui/consts/raw-ptr-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: untyped pointers are not allowed in constant\n   --> $DIR/raw-ptr-const.rs:7:1\n    |\n LL | const CONST_RAW: *const Vec<i32> = &Vec::new() as *const _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d68960b0972138e956d2b2ec4cd258e4a9b840ec", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:18"}, {"sha": "d68960b0972138e956d2b2ec4cd258e4a9b840ec", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:18"}, {"sha": "647ed1db20bdc62d900a36c8186c9bb994a35c41", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -21,7 +21,7 @@ LL |     f(x);\n    |     inside `X` at $DIR/recursive.rs:9:15\n ...\n LL | const X: () = f(1);\n-   | -------------------\n+   | -----------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -42,7 +42,7 @@ LL |     f(x);\n    |     inside `X` at $DIR/recursive.rs:9:15\n ...\n LL | const X: () = f(1);\n-   | -------------------\n+   | -----------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "79efcd3f62eedb951a1a7d239e1ed2172a687a45", "filename": "src/test/ui/consts/std/alloc.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:9:1\n    |\n LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:13:1\n    |\n LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unchecked(9, 3) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x00000003, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x00000003, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "cb477b72b312173d518b60aae687b2c764483a43", "filename": "src/test/ui/consts/std/alloc.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:9:1\n    |\n LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:13:1\n    |\n LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unchecked(9, 3) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x0000000000000003, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .align.0.<enum-tag>: encountered 0x0000000000000003, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "937fa7db0c8c08e6d18ea97474c9f97acb039d55", "filename": "src/test/ui/consts/std/cell.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,25 +2,25 @@ error: encountered dangling pointer in final constant\n   --> $DIR/cell.rs:6:1\n    |\n LL | static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n   --> $DIR/cell.rs:8:1\n    |\n LL | const FOO_CONST: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n   --> $DIR/cell.rs:22:1\n    |\n LL | const FOO4_CONST: Wrap<*mut u32> = Wrap(FOO3_CONST.0.as_ptr());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n   --> $DIR/cell.rs:27:1\n    |\n LL | const FOO2: *mut u32 = Cell::new(42).as_ptr();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d3177784789fcbb39890982df4dcbeca5acfe08c", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -135,7 +135,7 @@ LL |     hint_unreachable()\n    |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     ---------------------------------------------\n+   |     -------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -288,7 +288,7 @@ LL |     hint_unreachable()\n    |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     ---------------------------------------------\n+   |     -------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "a5dbc718145ca3254692f156e99d58843a29854f", "filename": "src/test/ui/consts/validate_never_arrays.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type [!; 1]\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type [!; 1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:7:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -24,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:8:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "dac4e200a89deaa30680e65f144c2750676be117", "filename": "src/test/ui/consts/validate_never_arrays.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type [!; 1]\n+   | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type [!; 1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:7:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -24,7 +24,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:8:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered a value of the never type `!`\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}, {"sha": "395b2d42f97a3be7d73fcabc40fe17f57b15734d", "filename": "src/test/ui/consts/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ error[E0391]: cycle detected when const-evaluating + checking `C`\n   --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `C`...\n   --> $DIR/write-to-static-mut-in-static.rs:5:34"}, {"sha": "55847aeec559f05012a5020eb97f9f1b20d166ce", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ LL | struct Bar<T: Foo> {\n    | doesn't satisfy `Bar<NotClone>: Clone`\n ...\n LL | struct NotClone;\n-   | ---------------- doesn't satisfy `NotClone: Clone`\n+   | --------------- doesn't satisfy `NotClone: Clone`\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method cannot be called on `Bar<NotClone>` due to unsatisfied trait bounds"}, {"sha": "f655600b76004ffaedc9d6e30d6ad18ab3b4eb7b", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n@@ -31,7 +31,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "ce4b00bfbf574cd32ac377dee97d88c6d422ed50", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n@@ -31,7 +31,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "c5c8f255fb3dbf90e3fe2bc5b063bb117b1b2152", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n@@ -31,7 +31,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "f5d609cb33fe6ba10fc82938b841f6da9752c0e5", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n@@ -31,7 +31,7 @@ note: an implementation of `PartialEq<_>` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "f3ff95a85da1a3b314ed0a30af84a166a279f54f", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,7 +7,7 @@ LL | #[derive(Eqr)]\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub macro Eq($item:item) {\n-   | ------------------------ similarly named derive macro `Eq` defined here\n+   | ------------ similarly named derive macro `Eq` defined here\n \n error: cannot find derive macro `Eqr` in this scope\n   --> $DIR/deriving-meta-unknown-trait.rs:1:10\n@@ -18,7 +18,7 @@ LL | #[derive(Eqr)]\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub macro Eq($item:item) {\n-   | ------------------------ similarly named derive macro `Eq` defined here\n+   | ------------ similarly named derive macro `Eq` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7875f07235661894e54733d292bd998365a47990", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `PartialEq<_>` might be missing for `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:1:1\n    |\n LL | struct NoCloneOrEq;\n-   | ^^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NoCloneOrEq` with `#[derive(PartialEq)]`\n    |\n@@ -31,7 +31,7 @@ note: an implementation of `PartialEq<_>` might be missing for `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:1:1\n    |\n LL | struct NoCloneOrEq;\n-   | ^^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NoCloneOrEq` with `#[derive(PartialEq)]`\n    |"}, {"sha": "5b4feaeb52a329cb3f00a1b335021b7f678e7a5b", "filename": "src/test/ui/derives/issue-91492.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut\n   --> $DIR/issue-91492.rs:4:9\n    |\n LL | pub struct NoDerives;\n-   | --------------------- doesn't satisfy `NoDerives: Clone`\n+   | -------------------- doesn't satisfy `NoDerives: Clone`\n LL | fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n LL |     foo.extend_from_slice(bar);\n    |         ^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut\n   --> $DIR/issue-91492.rs:12:9\n    |\n LL | pub struct SomeDerives;\n-   | ----------------------- doesn't satisfy `SomeDerives: Clone`\n+   | ---------------------- doesn't satisfy `SomeDerives: Clone`\n LL | fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n LL |     foo.extend_from_slice(bar);\n    |         ^^^^^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ error[E0599]: the method `use_clone` exists for struct `Object<NoDerives, SomeDe\n   --> $DIR/issue-91492.rs:22:9\n    |\n LL | pub struct NoDerives;\n-   | --------------------- doesn't satisfy `NoDerives: Clone`\n+   | -------------------- doesn't satisfy `NoDerives: Clone`\n ...\n LL | struct Object<T, A>(T, A);\n    |        ------ method `use_clone` not found for this struct"}, {"sha": "3608052e2ffcfb5bdb9e0a14c38a95b92dc8d21b", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0599]: the method `insert` exists for struct `HashSet<Value>`, but its tr\n   --> $DIR/issue-91550.rs:8:8\n    |\n LL | struct Value(u32);\n-   | ------------------\n+   | ------------\n    | |\n    | doesn't satisfy `Value: Eq`\n    | doesn't satisfy `Value: Hash`\n@@ -22,7 +22,7 @@ error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its\n   --> $DIR/issue-91550.rs:26:9\n    |\n LL | pub struct NoDerives;\n-   | --------------------- doesn't satisfy `NoDerives: Eq`\n+   | -------------------- doesn't satisfy `NoDerives: Eq`\n LL |\n LL | struct Object<T>(T);\n    |        ------ method `use_eq` not found for this struct\n@@ -41,7 +41,7 @@ error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but it\n   --> $DIR/issue-91550.rs:27:9\n    |\n LL | pub struct NoDerives;\n-   | --------------------- doesn't satisfy `NoDerives: Ord`\n+   | -------------------- doesn't satisfy `NoDerives: Ord`\n LL |\n LL | struct Object<T>(T);\n    |        ------ method `use_ord` not found for this struct\n@@ -60,7 +60,7 @@ error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoD\n   --> $DIR/issue-91550.rs:28:9\n    |\n LL | pub struct NoDerives;\n-   | ---------------------\n+   | --------------------\n    | |\n    | doesn't satisfy `NoDerives: Ord`\n    | doesn't satisfy `NoDerives: PartialOrd`"}, {"sha": "e45344aa51fc335c3db50d7d8b91bee8c2d7be90", "filename": "src/test/ui/destructuring-assignment/note-unsupported.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -52,14 +52,8 @@ LL | struct S { x: u8, y: u8 }\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait AddAssign<Rhs = Self> {\n-LL | |     /// Performs the `+=` operation.\n-LL | |     ///\n-LL | |     /// # Example\n-...  |\n-LL | |     fn add_assign(&mut self, rhs: Rhs);\n-LL | | }\n-   | |_^\n+LL | pub trait AddAssign<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/note-unsupported.rs:17:22"}, {"sha": "473468af6eef8a6eacaf637d654786c5edf1dc9f", "filename": "src/test/ui/did_you_mean/compatible-variants-in-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants-in-pat.rs:21:9\n    |\n LL | struct S;\n-   | --------- unit struct defined here\n+   | -------- unit struct defined here\n ...\n LL |     match s {\n    |           - this expression has type `Option<S>`\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants-in-pat.rs:32:9\n    |\n LL | struct S;\n-   | --------- unit struct defined here\n+   | -------- unit struct defined here\n ...\n LL |     match s {\n    |           - this expression has type `Result<S, S>`"}, {"sha": "ec81c2ea646f83ef295b5d0c9f018807a4bb48eb", "filename": "src/test/ui/dropck/issue-38868.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,21 +1,15 @@\n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/issue-38868.rs:5:1\n    |\n-LL | / impl Drop for List<i32> {\n-LL | |     fn drop(&mut self) {\n-LL | |         panic!()\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl Drop for List<i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `i32` is not a generic parameter\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/issue-38868.rs:1:1\n    |\n-LL | / pub struct List<T> {\n-LL | |     head: T,\n-LL | | }\n-   | |_^\n+LL | pub struct List<T> {\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ebd484b880001bc254c7f259a66fb8f76abbf597", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:4:1\n    |\n LL | struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:28:67\n@@ -20,33 +20,33 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:5:1\n    |\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:34:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `'static` is not a generic parameter\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:7:1\n    |\n LL | struct N<'n> { x: &'n i8 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:39:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `i8` is not a generic parameter\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:9:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:42:14\n@@ -58,7 +58,7 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:10:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsRBnd: 'rbnd` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:45:21\n@@ -70,59 +70,59 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:11:1\n    |\n LL | struct R<Tr> { x: *const Tr }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:54:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `One` is mentioned multiple times\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:15:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:57:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `'lw` is mentioned multiple times\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:16:1\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:60:1\n    |\n LL | impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `3_usize` is not a generic parameter\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:17:1\n    |\n LL | struct X<const Ca: usize>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:63:1\n    |\n LL | impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `Ca` is mentioned multiple times\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:18:1\n    |\n LL | struct Y<const Ca: usize, const Cb: usize>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:66:14\n@@ -134,7 +134,7 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:20:1\n    |\n LL | enum Enum<T> { Variant(T) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:69:14\n@@ -146,7 +146,7 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:21:1\n    |\n LL | struct TupleStruct<T>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:72:21\n@@ -158,7 +158,7 @@ note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:22:1\n    |\n LL | union Union<T: Copy> { f: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 13 previous errors\n "}, {"sha": "3d9685db683f64504c1d842eff7debb1bb9c475b", "filename": "src/test/ui/dropck/relate_lt_in_type_outlives_bound.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,10 +7,8 @@ LL |     T: 'static,\n note: the implementor must specify the same requirement\n   --> $DIR/relate_lt_in_type_outlives_bound.rs:1:1\n    |\n-LL | / struct Wrapper<'a, T>(&'a T)\n-LL | | where\n-LL | |     T: 'a;\n-   | |__________^\n+LL | struct Wrapper<'a, T>(&'a T)\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6692a63dce8f9a890d467873ca8ab99f57f96a8a", "filename": "src/test/ui/duplicate/dupe-symbols-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-6.rs:10:1\n    |\n LL | static HELLO_TWICE: u16 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5fc0a916a09c1c8b3e2d620583758dcc836dd767", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,7 +10,7 @@ LL |     let e1 = Empty1;\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+   | ------------------ similarly named unit struct `XEmpty2` defined here\n    |\n help: use struct literal syntax instead\n    |\n@@ -33,7 +33,7 @@ LL |     let e1 = Empty1();\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+   | ------------------ similarly named unit struct `XEmpty2` defined here\n    |\n help: use struct literal syntax instead\n    |\n@@ -73,7 +73,7 @@ LL |     let xe1 = XEmpty1;\n LL | pub struct XEmpty1 {}\n    | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+   | ------------------ similarly named unit struct `XEmpty2` defined here\n    |\n help: use struct literal syntax instead\n    |\n@@ -95,7 +95,7 @@ LL |     let xe1 = XEmpty1();\n LL | pub struct XEmpty1 {}\n    | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+   | ------------------ similarly named unit struct `XEmpty2` defined here\n    |\n help: use struct literal syntax instead\n    |"}, {"sha": "7fb5cb2034a8313f32920ed7251ddd10c3da9f79", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,7 +10,7 @@ LL |         Empty1() => ()\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use struct pattern syntax instead\n    |\n@@ -33,7 +33,7 @@ LL | pub struct XEmpty1 {}\n    | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use struct pattern syntax instead\n    |\n@@ -56,7 +56,7 @@ LL |         Empty1(..) => ()\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use struct pattern syntax instead\n    |\n@@ -79,7 +79,7 @@ LL | pub struct XEmpty1 {}\n    | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use struct pattern syntax instead\n    |"}, {"sha": "cd51274dce81b9b6247d709bf834c599fe7474fb", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0618]: expected function, found `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:15:14\n    |\n LL | struct Empty2;\n-   | -------------- `Empty2` defined here\n+   | ------------- `Empty2` defined here\n ...\n LL |     let e2 = Empty2();\n    |              ^^^^^^--"}, {"sha": "acd1070d5d6f2665560afba81b0b0e0738fc42e5", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,7 +10,7 @@ LL |         Empty2() => ()\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use this syntax instead\n    |\n@@ -30,9 +30,9 @@ LL |         XEmpty2() => ()\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n-   | ------------------- `XEmpty2` defined here\n+   | ------------------ `XEmpty2` defined here\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use this syntax instead\n    |\n@@ -55,7 +55,7 @@ LL |         Empty2(..) => ()\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use this syntax instead\n    |\n@@ -75,9 +75,9 @@ LL |         XEmpty2(..) => ()\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n-   | ------------------- `XEmpty2` defined here\n+   | ------------------ `XEmpty2` defined here\n LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   | ------------------ similarly named tuple struct `XEmpty6` defined here\n    |\n help: use this syntax instead\n    |"}, {"sha": "6f5bb4309c350e77fb6160671bab8620e0eff6c7", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,17 +7,14 @@ LL |     match x { }\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     None,\n-   | |     ^^^^ not covered\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     None,\n+   |     ^^^^ not covered\n+...\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "f01a77bd374b60dc06b10c9964980f965f37175e", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -9,16 +9,11 @@ LL |     let Some(y) = x;\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     None,\n-   | |     ^^^^ not covered\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     None,\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "830e4db345ac0e726634ee81109a61c4716cd8ee", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: `const` item defined here\n   --> $DIR/E0017.rs:2:1\n    |\n LL | const C: i32 = 2;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0017.rs:5:30\n@@ -52,7 +52,7 @@ note: `const` item defined here\n   --> $DIR/E0017.rs:2:1\n    |\n LL | const C: i32 = 2;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0764]: mutable references are not allowed in the final value of statics\n   --> $DIR/E0017.rs:11:38"}, {"sha": "3f927726a030fd733813c252bdebcb28982ca0bf", "filename": "src/test/ui/error-codes/E0075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0075]: SIMD vector cannot be empty\n   --> $DIR/E0075.rs:4:1\n    |\n LL | struct Bad;\n-   | ^^^^^^^^^^^\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7d4ff8798168633f88e58771bb3046b570488150", "filename": "src/test/ui/error-codes/E0076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0076]: SIMD vector should be homogeneous\n   --> $DIR/E0076.rs:4:1\n    |\n LL | struct Bad(u16, u32, u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n+   | ^^^^^^^^^^ SIMD elements must have the same type\n \n error: aborting due to previous error\n "}, {"sha": "9a84b2ec4069f6252bf4b4d9a5d9baece4c2133f", "filename": "src/test/ui/error-codes/E0077.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0077]: SIMD vector element type should be a primitive scalar (integer/flo\n   --> $DIR/E0077.rs:4:1\n    |\n LL | struct Bad(String);\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "29f7e4ad683d3a593142b7cdd79168e32ef8d66e", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0152]: found duplicate lang item `owned_box`\n   --> $DIR/E0152.rs:5:1\n    |\n LL | struct Foo<T>(T);\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^\n    |\n    = note: the lang item is first defined in crate `alloc` (which `std` depends on)\n    = note: first definition in `alloc` loaded from SYSROOT/liballoc-*.rlib"}, {"sha": "cf80c9c46ca2c07950872465c6184969c4a7af68", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0191]: the value of the associated type `Bar` (from trait `Trait`) must b\n   --> $DIR/E0191.rs:5:16\n    |\n LL |     type Bar;\n-   |     --------- `Bar` defined here\n+   |     -------- `Bar` defined here\n ...\n LL | type Foo = dyn Trait;\n    |                ^^^^^ help: specify the associated type: `Trait<Bar = Type>`"}, {"sha": "94e06894144ca66019d123606dbd8b7261574590", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -18,10 +18,10 @@ error[E0201]: duplicate definitions with name `Quux`:\n   --> $DIR/E0201.rs:18:5\n    |\n LL |     type Quux = u32;\n-   |     ---------------- previous definition of `Quux` here\n+   |     --------- previous definition of `Quux` here\n ...\n LL |     type Quux = u32;\n-   |     ^^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^ duplicate definition\n \n error: aborting due to 3 previous errors\n "}, {"sha": "11763ce788dacdc05e7f66bf4e868d0654efede1", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ error[E0191]: the value of the associated type `Bar` (from trait `Trait`) must b\n   --> $DIR/E0220.rs:5:16\n    |\n LL |     type Bar;\n-   |     --------- `Bar` defined here\n+   |     -------- `Bar` defined here\n ...\n LL | type Foo = dyn Trait<F=i32>;\n    |                ^^^^^^^^^^^^ help: specify the associated type: `Trait<F=i32, Bar = Type>`"}, {"sha": "5414d77ad7c5163b1f425cde32a2b6a700fd32a8", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,10 +2,10 @@ error[E0221]: ambiguous associated type `A` in bounds of `Self`\n   --> $DIR/E0221.rs:11:16\n    |\n LL |     type A: T1;\n-   |     ----------- ambiguous `A` from `Foo`\n+   |     ---------- ambiguous `A` from `Foo`\n ...\n LL |     type A: T2;\n-   |     ----------- ambiguous `A` from `Bar`\n+   |     ---------- ambiguous `A` from `Bar`\n LL |     fn do_something() {\n LL |         let _: Self::A;\n    |                ^^^^^^^ ambiguous associated type `A`\n@@ -23,7 +23,7 @@ error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n   --> $DIR/E0221.rs:21:16\n    |\n LL |     type Err: T3;\n-   |     ------------- ambiguous `Err` from `My`\n+   |     ------------ ambiguous `Err` from `My`\n LL |     fn test() {\n LL |         let _: Self::Err;\n    |                ^^^^^^^^^ ambiguous associated type `Err`"}, {"sha": "e8e35a12cbb497200d482bd9d8d0d0313248c968", "filename": "src/test/ui/error-codes/E0264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0264]: unknown external lang item: `cake`\n   --> $DIR/E0264.rs:5:5\n    |\n LL |     fn cake();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "693b079238d71d47f0a53b6a9a6aeaad83ab2efb", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,16 +7,11 @@ LL |     for Some(x) in xs {}\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     None,\n-   | |     ^^^^ not covered\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     None,\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<i32>`\n \n error: aborting due to previous error"}, {"sha": "68e15e6f8fe81e765190c40272041bf171686943", "filename": "src/test/ui/error-codes/E0374.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0374.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,9 +1,8 @@\n error[E0374]: the trait `CoerceUnsized` may only be implemented for a coercion between structures with one field being coerced, none found\n   --> $DIR/E0374.rs:8:1\n    |\n-LL | / impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>\n-LL | |     where T: CoerceUnsized<U> {}\n-   | |________________________________^\n+LL | impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e91efb045c156ac7a9f3ed641460367f90c9f8be", "filename": "src/test/ui/error-codes/E0376.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0376.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0376]: the trait `CoerceUnsized` may only be implemented for a coercion b\n   --> $DIR/E0376.rs:8:1\n    |\n LL | impl<T, U> CoerceUnsized<U> for Foo<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "106efc19ac9cf5e297828f635c5449b33e665ecb", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ note: `const` item defined here\n   --> $DIR/E0388.rs:2:1\n    |\n LL | const C: i32 = 2;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0388.rs:4:30\n@@ -52,7 +52,7 @@ note: `const` item defined here\n   --> $DIR/E0388.rs:2:1\n    |\n LL | const C: i32 = 2;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error[E0764]: mutable references are not allowed in the final value of statics\n   --> $DIR/E0388.rs:10:38"}, {"sha": "d9f70b729301645c683f4e5b711fc3d22696344a", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n   --> $DIR/E0393.rs:3:47\n    |\n LL | trait A<T=Self> {}\n-   | ------------------ type parameter `T` must be specified for this\n+   | --------------- type parameter `T` must be specified for this\n LL |\n LL | fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n    |                                               ^ help: set the type parameter to the desired type: `A<T>`"}, {"sha": "23b7a335047672e35dff63271be333171b9fa246", "filename": "src/test/ui/error-codes/E0445.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -5,7 +5,7 @@ LL | trait Foo {\n    | --------- `Foo` declared as private\n ...\n LL | pub trait Bar : Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   | ^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `Foo` in public interface\n   --> $DIR/E0445.rs:7:1\n@@ -14,7 +14,7 @@ LL | trait Foo {\n    | --------- `Foo` declared as private\n ...\n LL | pub struct Bar2<T: Foo>(pub T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `Foo` in public interface\n   --> $DIR/E0445.rs:9:1"}, {"sha": "b6a195c40a93a12e6b7d5772887922b50a8d562d", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0446]: private type `Bar` in public interface\n   --> $DIR/E0446.rs:4:5\n    |\n LL |     struct Bar(u32);\n-   |     ---------------- `Bar` declared as private\n+   |     ---------- `Bar` declared as private\n LL |\n LL |     pub fn bar() -> Bar {\n    |     ^^^^^^^^^^^^^^^^^^^ can't leak private type"}, {"sha": "65ebfcdbe32ca79853b093031dab165e404a6234", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,13 +11,11 @@ LL | #![feature(specialization)]\n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/E0520.rs:17:5\n    |\n-LL | / impl<T: Clone> SpaceLlama for T {\n-LL | |     fn fly(&self) {}\n-LL | | }\n-   | |_- parent `impl` is here\n+LL | impl<T: Clone> SpaceLlama for T {\n+   | ------------------------------- parent `impl` is here\n ...\n-LL |       default fn fly(&self) {}\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `fly`\n+LL |     default fn fly(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `fly`\n    |\n    = note: to specialize, `fly` in the parent `impl` must be marked `default`\n "}, {"sha": "43122c13efba88cdca97cd3f0176bf6d082a20f7", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -44,14 +44,8 @@ LL | enum Question {\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait Not {\n-LL | |     /// The resulting type after applying the `!` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn not(self) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Not {\n+   | ^^^^^^^^^^^^^\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:25:5"}, {"sha": "18dfddc46bd366b5042e7b25c3d2359a6b04c65d", "filename": "src/test/ui/extern/extern-main-issue-86110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fextern%2Fextern-main-issue-86110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fextern%2Fextern-main-issue-86110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-issue-86110.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: the `main` function cannot be declared in an `extern` block\n   --> $DIR/extern-main-issue-86110.rs:4:5\n    |\n LL |     fn main();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ca25aa64eb8be0454d435a49a6000b06c10bc26e", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/extern-types-distinct-types.rs:9:5\n    |\n LL |     type A;\n-   |     ------- the found foreign type\n+   |     ------ the found foreign type\n LL |     type B;\n-   |     ------- the expected foreign type\n+   |     ------ the expected foreign type\n ...\n LL | fn foo(r: &A) -> &B {\n    |                  -- expected `&B` because of return type"}, {"sha": "f8349391a0fe78bc586d5b442ab79029953182f0", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -9,15 +9,11 @@ LL |     let Ok(_x) = foo();\n note: `Result<u32, !>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-LL | / pub enum Result<T, E> {\n-LL | |     /// Contains the success value\n-LL | |     #[lang = \"Ok\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-   | |     ^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Result<T, E> {\n+   | ---------------------\n+...\n+LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n+   |     ^^^ not covered\n    = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "c7ebb9880f710a0734d39e69abc301ef2cce61da", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,10 +14,10 @@ error[E0276]: impl has stricter requirements than trait\n   --> $DIR/generic-associated-types-where.rs:22:5\n    |\n LL |     type Assoc3<T>;\n-   |     --------------- definition of `Assoc3` from trait\n+   |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6aa52b179a3c68a363f298faa24935db67f9bf8e", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,25 +2,25 @@ error: `impl` associated type signature for `A` doesn't match `trait` associated\n   --> $DIR/impl_bounds.rs:15:5\n    |\n LL |     type A<'a> where Self: 'a;\n-   |     -------------------------- expected\n+   |     ---------- expected\n ...\n LL |     type A<'a> = (&'a ()) where Self: 'static;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n+   |     ^^^^^^^^^^ found\n \n error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n   --> $DIR/impl_bounds.rs:17:5\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n-   |     ---------------------------- expected\n+   |     -------------- expected\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n+   |     ^^^^^^^^^^^^^^ found\n \n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:22\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n-   |     ---------------------------- definition of `B` from trait\n+   |     -------------- definition of `B` from trait\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                      ^^^^^^^^^^^^^^^             - help: try copying this clause from the trait: `, 'a: 'b`\n@@ -40,7 +40,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:20:5\n    |\n LL |     type C = String where Self: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n   --> $DIR/impl_bounds.rs:11:10\n@@ -54,7 +54,7 @@ LL | trait Foo {\n    |       --- in this trait\n ...\n LL |     type C where Self: Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ this trait associated type doesn't have the requirement `Fooy<T>: Copy`\n+   |     ^^^^^^ this trait associated type doesn't have the requirement `Fooy<T>: Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "c560e2405d5a77c8d6b94d1860233642aafd783e", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,10 +2,10 @@ error[E0276]: impl has stricter requirements than trait\n   --> $DIR/issue-47206-where-clause.rs:12:5\n    |\n LL |     type Assoc3<T>;\n-   |     --------------- definition of `Assoc3` from trait\n+   |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to previous error\n "}, {"sha": "d487f19ba74906d57f33c7e1a8476d7e013a9683", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -45,7 +45,7 @@ note: ...does not necessarily outlive the static lifetime introduced by the comp\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:21:1\n    |\n LL | impl C for Box<dyn A + 'static> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: incompatible lifetime on type\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:18"}, {"sha": "457c582e8c8d8c2288ce0b06e143020dda19d8cc", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n   --> $DIR/issue-90014.rs:14:20\n    |\n LL |     type Fut<'a> where Self: 'a;\n-   |     ---------------------------- definition of `Fut` from trait\n+   |     ------------ definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`"}, {"sha": "baf4889cc1dd52e8fa7183e63d667902699c5224", "filename": "src/test/ui/generic-associated-types/issue-91883.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,14 +1,11 @@\n error[E0478]: lifetime bound not satisfied\n   --> $DIR/issue-91883.rs:32:24\n    |\n-LL | /     type Cursor<'tx>: Cursor<'tx>\n-LL | |     where\n-LL | |         'db: 'tx,\n-LL | |         Self: 'tx;\n-   | |__________________- definition of `Cursor` from trait\n+LL |     type Cursor<'tx>: Cursor<'tx>\n+   |     ----------------------------- definition of `Cursor` from trait\n ...\n-LL |       type Cursor<'tx> = CursorImpl<'tx>;\n-   |                          ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n+LL |     type Cursor<'tx> = CursorImpl<'tx>;\n+   |                        ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n    |\n note: lifetime parameter instantiated with the lifetime `'db` as defined here\n   --> $DIR/issue-91883.rs:31:6"}, {"sha": "6dd901027d7bab249ae483c6934485626377b53b", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,13 +1,11 @@\n error[E0477]: the type `&'s Texture` does not fulfill the required lifetime\n   --> $DIR/issue-92033.rs:22:28\n    |\n-LL | /     type TextureIter<'a>: Iterator<Item = &'a Texture>\n-LL | |     where\n-LL | |         Self: 'a;\n-   | |_________________- definition of `TextureIter` from trait\n+LL |     type TextureIter<'a>: Iterator<Item = &'a Texture>\n+   |     -------------------------------------------------- definition of `TextureIter` from trait\n ...\n-LL |       type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n+LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-92033.rs:22:22"}, {"sha": "2804364890f01371843dc0199ecd404a49ee5982", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0599]: the method `f` exists for struct `S`, but its trait bounds were no\n   --> $DIR/method-unsatified-assoc-type-predicate.rs:30:7\n    |\n LL | struct S;\n-   | ---------\n+   | --------\n    | |      |\n    | |      method `f` not found for this struct\n    | doesn't satisfy `<S as X>::Y<i32> = i32`"}, {"sha": "0256d2f20fc1e0d9d8ac50c8dbe0c9766c86e2af", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,10 +2,10 @@ error: `impl` associated type signature for `Assoc` doesn't match `trait` associ\n   --> $DIR/missing-where-clause-on-trait.rs:9:5\n    |\n LL |     type Assoc<'a, 'b>;\n-   |     ------------------- expected\n+   |     ------------------ expected\n ...\n LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n+   |     ^^^^^^^^^^^^^^^^^^ found\n \n error: aborting due to previous error\n "}, {"sha": "2d14faf76775d67e6f33c86d10e85d88fd7a59bc", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -18,7 +18,7 @@ LL |     WrongImpl::<()>::foo(0i32);\n    |                      ^^^ function or associated item cannot be called on `SafeImpl<(), RawImpl<()>>` due to unsatisfied trait bounds\n ...\n LL | pub struct RawImpl<T>(PhantomData<T>);\n-   | -------------------------------------- doesn't satisfy `RawImpl<()>: Raw<()>`\n+   | --------------------- doesn't satisfy `RawImpl<()>: Raw<()>`\n ...\n LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    |            -------- function or associated item `foo` not found for this struct\n@@ -28,10 +28,8 @@ LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n note: the following trait must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |\n-LL | / pub trait Raw<T: ?Sized> {\n-LL | |     type Value;\n-LL | | }\n-   | |_^\n+LL | pub trait Raw<T: ?Sized> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `RawImpl<()>: Raw<()>` is not satisfied\n   --> $DIR/issue-62742.rs:6:5"}, {"sha": "214be091ccece5510e4a21915758ca580af63712", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,8 @@ error[E0072]: recursive type `Take` has infinite size\n   --> $DIR/infinite-struct.rs:1:1\n    |\n LL | struct Take(Take);\n-   | ^^^^^^^^^^^^----^^\n-   | |           |\n-   | |           recursive without indirection\n+   | ^^^^^^^^^^^ ---- recursive without indirection\n+   | |\n    | recursive type has infinite size\n    |\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Take` representable\n@@ -16,7 +15,7 @@ error[E0391]: cycle detected when computing drop-check constraints for `Take`\n   --> $DIR/infinite-struct.rs:1:1\n    |\n LL | struct Take(Take);\n-   | ^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing drop-check constraints for `Take` again\n    = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: Take } }`"}, {"sha": "b925b3b018c0a6bae1876043577eff6d446e135f", "filename": "src/test/ui/infinite/infinite-trait-alias-recursion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when computing the super predicates of `T1`\n   --> $DIR/infinite-trait-alias-recursion.rs:3:1\n    |\n LL | trait T1 = T2;\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n    |\n note: ...which requires computing the super traits of `T1`...\n   --> $DIR/infinite-trait-alias-recursion.rs:3:12\n@@ -13,7 +13,7 @@ note: ...which requires computing the super predicates of `T2`...\n   --> $DIR/infinite-trait-alias-recursion.rs:6:1\n    |\n LL | trait T2 = T3;\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n note: ...which requires computing the super traits of `T2`...\n   --> $DIR/infinite-trait-alias-recursion.rs:6:12\n    |\n@@ -23,7 +23,7 @@ note: ...which requires computing the super predicates of `T3`...\n   --> $DIR/infinite-trait-alias-recursion.rs:8:1\n    |\n LL | trait T3 = T1 + T3;\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n note: ...which requires computing the super traits of `T3`...\n   --> $DIR/infinite-trait-alias-recursion.rs:8:12\n    |"}, {"sha": "b5b32d2f0bd36e33a2b6ce40399a285148e77e46", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,22 +1,16 @@\n error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:10:1\n    |\n-LL | / impl<T, U> DispatchFromDyn<WrapperWithExtraField<U>> for WrapperWithExtraField<T>\n-LL | | where\n-LL | |     T: DispatchFromDyn<U>,\n-LL | | {}\n-   | |__^\n+LL | impl<T, U> DispatchFromDyn<WrapperWithExtraField<U>> for WrapperWithExtraField<T>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: extra field `1` of type `i32` is not allowed\n \n error[E0378]: implementing the `DispatchFromDyn` trait requires multiple coercions\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:21:1\n    |\n-LL | / impl<T: ?Sized, U: ?Sized> DispatchFromDyn<MultiplePointers<U>> for MultiplePointers<T>\n-LL | | where\n-LL | |     T: Unsize<U>,\n-LL | | {}\n-   | |__^\n+LL | impl<T: ?Sized, U: ?Sized> DispatchFromDyn<MultiplePointers<U>> for MultiplePointers<T>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `DispatchFromDyn` may only be implemented for a coercion between structures with a single field being coerced\n    = note: currently, 2 fields need coercions: `ptr1` (`*const T` to `*const U`), `ptr2` (`*const T` to `*const U`)\n@@ -25,25 +19,19 @@ error[E0378]: the trait `DispatchFromDyn` may only be implemented for a coercion\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:31:1\n    |\n LL | impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NothingToCoerce<T>> for NothingToCoerce<U> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0378]: structs implementing `DispatchFromDyn` may not have `#[repr(packed)]` or `#[repr(C)]`\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:37:1\n    |\n-LL | / impl<T: ?Sized, U: ?Sized> DispatchFromDyn<HasReprC<U>> for HasReprC<T>\n-LL | | where\n-LL | |     T: Unsize<U>,\n-LL | | {}\n-   | |__^\n+LL | impl<T: ?Sized, U: ?Sized> DispatchFromDyn<HasReprC<U>> for HasReprC<T>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:46:1\n    |\n-LL | / impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n-LL | |     where\n-LL | |         T: Unsize<U>,\n-LL | | {}\n-   | |__^\n+LL | impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: extra field `1` of type `OverAlignedZst` is not allowed\n "}, {"sha": "a191afd7980c65865392a4367b064fea46a8cff4", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,18 +8,12 @@ note: an implementation of `Not` might be missing for `BytePos`\n   --> $DIR/issue-14091-2.rs:6:1\n    |\n LL | pub struct BytePos(pub u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `Not`\n+   | ^^^^^^^^^^^^^^^^^^ must implement `Not`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait Not {\n-LL | |     /// The resulting type after applying the `!` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn not(self) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait Not {\n+   | ^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ae3b7f334c65a7e1c95d61892c81e4c2b1a8e42f", "filename": "src/test/ui/issues/issue-16250.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -16,7 +16,7 @@ note: the type is defined here\n   --> $DIR/issue-16250.rs:3:1\n    |\n LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f6eae73e585043022fd4af08af8b4a291afe517", "filename": "src/test/ui/issues/issue-16725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ note: the function `bar` is defined here\n   --> $DIR/auxiliary/issue-16725.rs:2:5\n    |\n LL |     fn bar();\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3a629e1ebf47206d4529257c81ccf4c42e69374c", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires const-evaluating + checking `FOO` again\n note: cycle used when const-evaluating + checking `main::{constant#0}`"}, {"sha": "133a6360bf9a0b3ffc8f69c20cad9a84dc6da20c", "filename": "src/test/ui/issues/issue-17718-const-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -20,7 +20,7 @@ note: the constant `BAR` is defined here\n   --> $DIR/auxiliary/issue-17718-const-privacy.rs:4:1\n    |\n LL | const BAR: usize = 3;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb795febf795459f9eb10f34448835a64caf7ab2", "filename": "src/test/ui/issues/issue-17959.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,10 +7,8 @@ LL | impl<T> Drop for G<T> {\n note: the implementor must specify the same requirement\n   --> $DIR/issue-17959.rs:7:1\n    |\n-LL | / struct G<T: ?Sized> {\n-LL | |     _ptr: *const T\n-LL | | }\n-   | |_^\n+LL | struct G<T: ?Sized> {\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6ce78c45d6e5afa33748d2c6ae81af4b07190b41", "filename": "src/test/ui/issues/issue-18389.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-18389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-18389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18389.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,9 +8,7 @@ LL | / pub trait Public: Private<\n LL | |\n LL | |     <Self as Public>::P,\n LL | |     <Self as Public>::R\n-...  |\n-LL | |     fn call_inner(&self);\n-LL | | }\n+LL | | > {\n    | |_^ can't leak private trait\n \n error: aborting due to previous error"}, {"sha": "d51cc1f081e2d32cd2784bb033e4abad362a8be1", "filename": "src/test/ui/issues/issue-19482.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0191]: the value of the associated type `A` (from trait `Foo`) must be sp\n   --> $DIR/issue-19482.rs:10:16\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n ...\n LL | fn bar(x: &dyn Foo) {}\n    |                ^^^ help: specify the associated type: `Foo<A = Type>`"}, {"sha": "2d88ce5e51107a6eb61486d4f7f82162a57adf38", "filename": "src/test/ui/issues/issue-20714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0618]: expected function, found `G`\n   --> $DIR/issue-20714.rs:4:13\n    |\n LL | struct G;\n-   | --------- `G` defined here\n+   | -------- `G` defined here\n ...\n LL |     let g = G();\n    |             ^--"}, {"sha": "22b9f5bd4cb9f0d8a544d07719894bd693605059", "filename": "src/test/ui/issues/issue-20772.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,19 +1,15 @@\n error[E0391]: cycle detected when computing the super traits of `T` with associated type name `Item`\n   --> $DIR/issue-20772.rs:1:1\n    |\n-LL | / trait T : Iterator<Item=Self::Item>\n-LL | |\n-LL | | {}\n-   | |__^\n+LL | trait T : Iterator<Item=Self::Item>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing the super traits of `T` with associated type name `Item` again\n note: cycle used when computing the super traits of `T`\n   --> $DIR/issue-20772.rs:1:1\n    |\n-LL | / trait T : Iterator<Item=Self::Item>\n-LL | |\n-LL | | {}\n-   | |__^\n+LL | trait T : Iterator<Item=Self::Item>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ada6f44319dec4089de15e49db649f540e06c9a6", "filename": "src/test/ui/issues/issue-21701.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,7 +12,7 @@ error[E0618]: expected function, found `Bar`\n   --> $DIR/issue-21701.rs:9:13\n    |\n LL | struct Bar;\n-   | ----------- `Bar` defined here\n+   | ---------- `Bar` defined here\n ...\n LL |     let f = Bar();\n    |             ^^^--"}, {"sha": "4909398bb848f6b6ce02b9597b7c806b1e46fca8", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,21 +1,19 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:10:25\n    |\n-LL | / trait Add<Rhs=Self> {\n-LL | |     type Output;\n-LL | | }\n-   | |_- type parameter `Rhs` must be specified for this\n+LL | trait Add<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n ...\n-LL |       let x = &10 as &dyn Add;\n-   |                           ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+LL |     let x = &10 as &dyn Add;\n+   |                         ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0191]: the value of the associated type `Output` (from trait `Add`) must be specified\n   --> $DIR/issue-21950.rs:10:25\n    |\n LL |     type Output;\n-   |     ------------ `Output` defined here\n+   |     ----------- `Output` defined here\n ...\n LL |     let x = &10 as &dyn Add;\n    |                         ^^^ help: specify the associated type: `Add<Output = Type>`"}, {"sha": "cd27c4e4e4edfce4a6e7a01801dc5a727fdc935f", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n   --> $DIR/issue-22370.rs:3:14\n    |\n LL | trait A<T=Self> {}\n-   | ------------------ type parameter `T` must be specified for this\n+   | --------------- type parameter `T` must be specified for this\n LL |\n LL | fn f(a: &dyn A) {}\n    |              ^ help: set the type parameter to the desired type: `A<T>`"}, {"sha": "b97fa2503b8a8672552b9bd91aa4e16bd94a424e", "filename": "src/test/ui/issues/issue-22434.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0191]: the value of the associated type `A` (from trait `Foo`) must be sp\n   --> $DIR/issue-22434.rs:5:23\n    |\n LL |     type A;\n-   |     ------- `A` defined here\n+   |     ------ `A` defined here\n ...\n LL | type I<'a> = &'a (dyn Foo + 'a);\n    |                       ^^^ help: specify the associated type: `Foo<A = Type>`"}, {"sha": "dcb99605da01236325c6502ddd02d5620d71c97e", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,19 +2,19 @@ error[E0391]: cycle detected when const-evaluating + checking `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n note: cycle used when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e933745c44e87a09e9d73a8f7903d22fb86636eb", "filename": "src/test/ui/issues/issue-25901.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -9,7 +9,7 @@ note: deref defined here\n   --> $DIR/issue-25901.rs:10:5\n    |\n LL |     type Target = B;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n note: impl defined here, but it is not `const`\n   --> $DIR/issue-25901.rs:9:1\n    |"}, {"sha": "c6e703f4876f8d640445d13918aff8eba4b2b750", "filename": "src/test/ui/issues/issue-2718-a.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,8 @@ error[E0072]: recursive type `Pong` has infinite size\n   --> $DIR/issue-2718-a.rs:8:5\n    |\n LL |     pub struct Pong(SendPacket<Ping>);\n-   |     ^^^^^^^^^^^^^^^^----------------^^\n-   |     |               |\n-   |     |               recursive without indirection\n+   |     ^^^^^^^^^^^^^^^ ---------------- recursive without indirection\n+   |     |\n    |     recursive type has infinite size\n    |\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Pong` representable"}, {"sha": "d9e7c3b16e76ebbe13455289ddc6e8ca5a82f82d", "filename": "src/test/ui/issues/issue-33504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-33504.rs:7:13\n    |\n LL | struct Test;\n-   | ------------ unit struct defined here\n+   | ----------- unit struct defined here\n ...\n LL |         let Test = 1;\n    |             ^^^^   - this expression has type `{integer}`"}, {"sha": "a66289a1cf8eb6b79d50ce92911b31f3c7b3ff2f", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-35241.rs:3:20\n    |\n LL | struct Foo(u32);\n-   | ---------------- fn(u32) -> Foo {Foo} defined here\n+   | ---------- fn(u32) -> Foo {Foo} defined here\n LL |\n LL | fn test() -> Foo { Foo }\n    |              ---   ^^^ expected struct `Foo`, found fn item"}, {"sha": "23090c1ed7866ce448e5f19427d7009be18f6d97", "filename": "src/test/ui/issues/issue-38857.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,7 +14,7 @@ note: the module `sys` is defined here\n   --> $SRC_DIR/std/src/lib.rs:LL:COL\n    |\n LL | mod sys;\n-   | ^^^^^^^^\n+   | ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "531130fecab1ef1104a678c91f98a84e6fe2051e", "filename": "src/test/ui/issues/issue-43355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>`\n   --> $DIR/issue-43355.rs:13:1\n    |\n LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-   | --------------------------------------------- first implementation here\n+   | -------------------------- first implementation here\n ...\n LL | impl<X> Trait1<Box<X>> for A {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`"}, {"sha": "512827b2dbdcd837c64644eeca99fcdb35097502", "filename": "src/test/ui/issues/issue-46771.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0618]: expected function, found `Foo`\n   --> $DIR/issue-46771.rs:3:23\n    |\n LL |     struct Foo;\n-   |     ----------- `Foo` defined here\n+   |     ---------- `Foo` defined here\n LL |     (1 .. 2).find(|_| Foo(0) == 0);\n    |                       ^^^---\n    |                       |"}, {"sha": "bbaca4ed28f5b8bc6f584a4c72e4731812210fef", "filename": "src/test/ui/issues/issue-4968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4968.rs:5:16\n    |\n LL | const A: (isize,isize) = (4,2);\n-   | ------------------------------- constant defined here\n+   | ---------------------- constant defined here\n LL | fn main() {\n LL |     match 42 { A => () }\n    |           --   ^"}, {"sha": "2c2cd5c5244cf865d0f0b6e5401bc614acc4bc80", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -8,7 +8,7 @@ error[E0046]: not all trait items implemented, missing: `MyA`\n   --> $DIR/issue-69602-type-err-during-codegen-ice.rs:16:1\n    |\n LL |     type MyA: TraitA;\n-   |     ----------------- `MyA` from trait\n+   |     ---------------- `MyA` from trait\n ...\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation"}, {"sha": "4b8b979665cc347828143b992de93c5374820017", "filename": "src/test/ui/issues/issue-73112.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -1,19 +1,14 @@\n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/issue-73112.rs:9:5\n    |\n-LL | /     struct SomeStruct {\n-LL | |\n-LL | |         page_table: PageTable,\n-LL | |     }\n-   | |_____^\n+LL |     struct SomeStruct {\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: `PageTable` has a `#[repr(align)]` attribute\n   --> $DIR/auxiliary/issue-73112.rs:8:1\n    |\n-LL | / pub struct PageTable {\n-LL | |     entries: [PageTableEntry; 512],\n-LL | | }\n-   | |_^\n+LL | pub struct PageTable {\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "13749804796b2c653d3df6bb5e00ef96793960e2", "filename": "src/test/ui/issues/issue-76191.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-76191.rs:13:9\n    |\n LL | const RANGE: RangeInclusive<i32> = 0..=255;\n-   | ------------------------------------------- constant defined here\n+   | -------------------------------- constant defined here\n ...\n LL |     match n {\n    |           - this expression has type `i32`\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-76191.rs:15:9\n    |\n LL | const RANGE2: RangeInclusive<i32> = panic!();\n-   | --------------------------------------------- constant defined here\n+   | --------------------------------- constant defined here\n ...\n LL |     match n {\n    |           - this expression has type `i32`"}, {"sha": "a55ac23e3ed9f4b8215bdccf7c62df54bbd87cda", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -21,7 +21,7 @@ error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/issue-77919.rs:12:1\n    |\n LL |     const VAL: T;\n-   |     ------------- `VAL` from trait\n+   |     ------------ `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation"}, {"sha": "419652e13492f5c7fc179e8ffc9e77ec90f7ddfd", "filename": "src/test/ui/keyword/keyword-self-as-type-param.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -18,9 +18,8 @@ error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/keyword-self-as-type-param.rs:3:1\n    |\n LL | struct Foo<Self>(Self);\n-   | ^^^^^^^^^^^^^^^^^----^^\n-   | |                |\n-   | |                recursive without indirection\n+   | ^^^^^^^^^^^^^^^^ ---- recursive without indirection\n+   | |\n    | recursive type has infinite size\n    |\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable"}, {"sha": "7ba9657fcd6f1b090ceaad3ed6ceb7178cd2a75b", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -84,7 +84,7 @@ error: layout_of(E) = Layout {\n   --> $DIR/debug.rs:6:1\n    |\n LL | enum E { Foo, Bar(!, i32, i32) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(S) = Layout {\n            fields: Arbitrary {\n@@ -128,7 +128,7 @@ error: layout_of(S) = Layout {\n   --> $DIR/debug.rs:9:1\n    |\n LL | struct S { f1: i32, f2: (), f3: i32 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^\n \n error: layout_of(U) = Layout {\n            fields: Union(\n@@ -150,7 +150,7 @@ error: layout_of(U) = Layout {\n   --> $DIR/debug.rs:12:1\n    |\n LL | union U { f1: (i32, i32), f3: i32 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^\n \n error: layout_of(std::result::Result<i32, i32>) = Layout {\n            fields: Arbitrary {\n@@ -279,7 +279,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n   --> $DIR/debug.rs:15:1\n    |\n LL | type Test = Result<i32, i32>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: layout_of(i32) = Layout {\n            fields: Primitive,\n@@ -305,7 +305,7 @@ error: layout_of(i32) = Layout {\n   --> $DIR/debug.rs:18:1\n    |\n LL | type T = impl std::fmt::Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f3123cb0ad22ee2f7b4f4bf0b54d14746cbb97be", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -66,7 +66,7 @@ error: layout_of(A) = Layout {\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n LL | enum A { Apple }\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n@@ -136,7 +136,7 @@ error: layout_of(B) = Layout {\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n@@ -206,7 +206,7 @@ error: layout_of(C) = Layout {\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n@@ -276,7 +276,7 @@ error: layout_of(P) = Layout {\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n@@ -346,7 +346,7 @@ error: layout_of(T) = Layout {\n   --> $DIR/hexagon-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e19216a99dbe581e7b7063ab0660f928e692dc32", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,13 +2,13 @@ error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 byt\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:22:1\n    |\n LL | pub type TestMiddle = Middle;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:33:1\n    |\n LL | pub type TestFinal = Final;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "17d639da0240a2a67ed97c71c33beebb771cebdb", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,31 +2,31 @@ error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 byt\n   --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:53:1\n    |\n LL | pub type Test1 = BaseCase;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:57:1\n    |\n LL | pub type Test2 = WithPhantomData;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:61:1\n    |\n LL | pub type Test3 = WithEmptyRustStruct;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:65:1\n    |\n LL | pub type Test4 = WithTransitivelyEmptyRustStruct;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:69:1\n    |\n LL | pub type Test5 = WithEmptyRustEnum;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "84d8bc799b93f3749d5aa030dddd3b9dfd761646", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -105,11 +105,8 @@ error: layout_of(MissingPayloadField) = Layout {\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n    |\n-LL | / pub enum MissingPayloadField {\n-LL | |     Some(u8),\n-LL | |     None\n-LL | | }\n-   | |_^\n+LL | pub enum MissingPayloadField {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(CommonPayloadField) = Layout {\n            fields: Arbitrary {\n@@ -237,11 +234,8 @@ error: layout_of(CommonPayloadField) = Layout {\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n    |\n-LL | / pub enum CommonPayloadField {\n-LL | |     A(u8),\n-LL | |     B(u8),\n-LL | | }\n-   | |_^\n+LL | pub enum CommonPayloadField {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            fields: Arbitrary {\n@@ -366,11 +360,8 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n    |\n-LL | / pub enum CommonPayloadFieldIsMaybeUninit {\n-LL | |     A(u8),\n-LL | |     B(MaybeUninit<u8>),\n-LL | | }\n-   | |_^\n+LL | pub enum CommonPayloadFieldIsMaybeUninit {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(NicheFirst) = Layout {\n            fields: Arbitrary {\n@@ -513,12 +504,8 @@ error: layout_of(NicheFirst) = Layout {\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n    |\n-LL | / pub enum NicheFirst {\n-LL | |     A(HasNiche, u8),\n-LL | |     B,\n-LL | |     C\n-LL | | }\n-   | |_^\n+LL | pub enum NicheFirst {\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(NicheSecond) = Layout {\n            fields: Arbitrary {\n@@ -661,12 +648,8 @@ error: layout_of(NicheSecond) = Layout {\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:50:1\n    |\n-LL | / pub enum NicheSecond {\n-LL | |     A(u8, HasNiche),\n-LL | |     B,\n-LL | |     C,\n-LL | | }\n-   | |_^\n+LL | pub enum NicheSecond {\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e6ed626d5f1aae32e3d3769a2fdf1e8a1e326946", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -66,7 +66,7 @@ error: layout_of(A) = Layout {\n   --> $DIR/thumb-enum.rs:16:1\n    |\n LL | enum A { Apple }\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n@@ -136,7 +136,7 @@ error: layout_of(B) = Layout {\n   --> $DIR/thumb-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n@@ -206,7 +206,7 @@ error: layout_of(C) = Layout {\n   --> $DIR/thumb-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n@@ -276,7 +276,7 @@ error: layout_of(P) = Layout {\n   --> $DIR/thumb-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n@@ -346,7 +346,7 @@ error: layout_of(T) = Layout {\n   --> $DIR/thumb-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "de2b863e4caa519d6f5bcb60d464b730af0a0563", "filename": "src/test/ui/layout/zero-sized-array-union.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,25 +2,25 @@ error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 byt\n   --> $DIR/zero-sized-array-union.rs:59:1\n    |\n LL | type TestBaz1 = Baz1;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:70:1\n    |\n LL | type TestBaz2 = Baz2;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:81:1\n    |\n LL | type TestBaz3 = Baz3;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^\n \n error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:92:1\n    |\n LL | type TestBaz4 = Baz4;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e6b9c67627893cd0f768530b9f6c38102f0ed6c6", "filename": "src/test/ui/limits/issue-56762.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flimits%2Fissue-56762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flimits%2Fissue-56762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-56762.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,13 +2,13 @@ error[E0080]: values of the type `[u8; 2305843009213693951]` are too big for the\n   --> $DIR/issue-56762.rs:19:1\n    |\n LL | static MY_TOO_BIG_ARRAY_1: TooBigArray = TooBigArray::new();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: values of the type `[u8; 2305843009213693951]` are too big for the current architecture\n   --> $DIR/issue-56762.rs:21:1\n    |\n LL | static MY_TOO_BIG_ARRAY_2: [u8; HUGE_SIZE] = [0x00; HUGE_SIZE];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06a070822630e7d7e0b9c143113aaf0394bfbc2a", "filename": "src/test/ui/linkage-attr/linkage-detect-extern-generated-name-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: symbol `collision` is already defined\n   --> $DIR/auxiliary/def_colliding_external.rs:6:5\n    |\n LL |     pub static collision: *const i32;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e0be1ac2117bdeaaa61de6a781c9a6ae75734540", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: symbol `collision` is already defined\n   --> $DIR/linkage-detect-local-generated-name-collision.rs:10:9\n    |\n LL |         pub static collision: *const i32;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5abbe745c6a215d043d43e8ad1f5da93a908c319", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n   --> $DIR/auxiliary/def_illtyped_external.rs:5:1\n    |\n LL | pub static EXTERN: u32 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a6ac0aad077874d6b70ce71adced4dab7bad5e65", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n   --> $DIR/linkage2.rs:12:5\n    |\n LL |     static foo: i32;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f2579c6e850f784678102370ebef5050ed1c6319", "filename": "src/test/ui/linkage-attr/linkage3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,7 +2,7 @@ error: invalid linkage specified\n   --> $DIR/linkage3.rs:11:5\n    |\n LL |     static foo: *const i32;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "915b3b86fe80ec0e9353fe11a9252d2bcae3477a", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/allowed-cli-deny-by-default-lint.rs:6:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ warning: any use of this value will cause an error\n   --> $DIR/allowed-cli-deny-by-default-lint.rs:6:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "3b36d1d0227192c4ff5279d36bff33bab856c0d3", "filename": "src/test/ui/lint/force-warn/allowed-deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/allowed-deny-by-default-lint.rs:7:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ warning: any use of this value will cause an error\n   --> $DIR/allowed-deny-by-default-lint.rs:7:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "a2e5baa8b9d42c3e2e6f847cc35f8343cdf34ff6", "filename": "src/test/ui/lint/force-warn/deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,9 +2,7 @@ warning: any use of this value will cause an error\n   --> $DIR/deny-by-default-lint.rs:5:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -17,9 +15,7 @@ warning: any use of this value will cause an error\n   --> $DIR/deny-by-default-lint.rs:5:16\n    |\n LL | const C: i32 = 1 / 0;\n-   | ---------------^^^^^-\n-   |                |\n-   |                attempt to divide `1_i32` by zero\n+   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "a9538b5e3a49e76cb6a4a7914c7c33d0129509ce", "filename": "src/test/ui/lint/issue-14309.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,10 +14,8 @@ LL | #![deny(improper_ctypes)]\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n-LL | / struct A {\n-LL | |     x: i32\n-LL | | }\n-   | |_^\n+LL | struct A {\n+   | ^^^^^^^^\n \n error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:31:15\n@@ -30,10 +28,8 @@ LL |     fn bar(x: B);\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n-LL | / struct A {\n-LL | |     x: i32\n-LL | | }\n-   | |_^\n+LL | struct A {\n+   | ^^^^^^^^\n \n error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:33:15\n@@ -46,10 +42,8 @@ LL |     fn qux(x: A2);\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n-LL | / struct A {\n-LL | |     x: i32\n-LL | | }\n-   | |_^\n+LL | struct A {\n+   | ^^^^^^^^\n \n error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:34:16\n@@ -62,10 +56,8 @@ LL |     fn quux(x: B2);\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n-LL | / struct A {\n-LL | |     x: i32\n-LL | | }\n-   | |_^\n+LL | struct A {\n+   | ^^^^^^^^\n \n error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:36:16\n@@ -78,10 +70,8 @@ LL |     fn fred(x: D);\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n-LL | / struct A {\n-LL | |     x: i32\n-LL | | }\n-   | |_^\n+LL | struct A {\n+   | ^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "94d876423e7491c67401406c96d28be75a82d6d0", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,7 +10,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:26:1\n    |\n LL | const ARRAY: [u8; 1] = [25];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n   --> $DIR/lint-const-item-mutation.rs:38:5\n@@ -23,7 +23,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n   --> $DIR/lint-const-item-mutation.rs:39:5\n@@ -36,7 +36,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n   --> $DIR/lint-const-item-mutation.rs:40:5\n@@ -55,7 +55,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n   --> $DIR/lint-const-item-mutation.rs:41:5\n@@ -69,7 +69,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n   --> $DIR/lint-const-item-mutation.rs:42:5\n@@ -83,7 +83,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n   --> $DIR/lint-const-item-mutation.rs:54:5\n@@ -96,7 +96,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:30:1\n    |\n LL | const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n   --> $DIR/lint-const-item-mutation.rs:55:5\n@@ -115,7 +115,7 @@ note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:31:1\n    |\n LL | const VEC: Vec<i32> = Vec::new();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^\n \n warning: 8 warnings emitted\n "}, {"sha": "de532f69ac0a558103ee00fb865b1f9e742e1959", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -14,10 +14,8 @@ LL | #![deny(improper_ctypes)]\n note: the type is defined here\n   --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n-LL | / enum U {\n-LL | |     A,\n-LL | | }\n-   | |_^\n+LL | enum U {\n+   | ^^^^^^\n \n error: `extern` block uses type `B`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:61:13\n@@ -30,11 +28,8 @@ LL |    fn bf(x: B);\n note: the type is defined here\n   --> $DIR/lint-ctypes-enum.rs:12:1\n    |\n-LL | / enum B {\n-LL | |     C,\n-LL | |     D,\n-LL | | }\n-   | |_^\n+LL | enum B {\n+   | ^^^^^^\n \n error: `extern` block uses type `T`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:62:13\n@@ -47,12 +42,8 @@ LL |    fn tf(x: T);\n note: the type is defined here\n   --> $DIR/lint-ctypes-enum.rs:16:1\n    |\n-LL | / enum T {\n-LL | |     E,\n-LL | |     F,\n-LL | |     G,\n-LL | | }\n-   | |_^\n+LL | enum T {\n+   | ^^^^^^\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:74:23"}, {"sha": "6f8d76411aaebbf406dea27d5710d88f121a4435", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -100,7 +100,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes-fn.rs:28:1\n    |\n LL | pub struct ZeroSize;\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:110:40\n@@ -113,7 +113,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes-fn.rs:63:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:113:51"}, {"sha": "bfec40e1955357e6d56cc18ade0b18d01ccee6ef", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -15,7 +15,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes.rs:26:1\n    |\n LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:49:28\n@@ -29,7 +29,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes.rs:26:1\n    |\n LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^\n \n error: `extern` block uses type `((),)`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:51:25\n@@ -139,7 +139,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes.rs:22:1\n    |\n LL | pub struct ZeroSize;\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:64:33\n@@ -152,7 +152,7 @@ note: the type is defined here\n   --> $DIR/lint-ctypes.rs:45:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `PhantomData<bool>`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:67:12"}, {"sha": "88121a1836da4144c10a71df9e31da7d3cc3e736", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -400,11 +400,8 @@ LL |         let _val: Fruit = mem::uninitialized();\n note: enums have to be initialized to a variant\n   --> $DIR/uninitialized-zeroed.rs:26:1\n    |\n-LL | / enum Fruit {\n-LL | |     Apple,\n-LL | |     Banana,\n-LL | | }\n-   | |_^\n+LL | enum Fruit {\n+   | ^^^^^^^^^^\n \n error: the type `[bool; 2]` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:101:31"}, {"sha": "bf85a2d75db23e406b8b7feba43d271ac632c64d", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "modified", "additions": 39, "deletions": 49, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -13,70 +13,60 @@ LL |       pong!();\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | /  macro_rules! pong {\n-LL | |      () => { syntax error };\n-   | |                     ^^^^^ expected one of 8 possible tokens\n-LL | |  }\n-   | |__- in this expansion of `pong!` (#2)\n+LL | / macro_rules! pong {\n+LL | |     () => { syntax error };\n+   | |                    ^^^^^ expected one of 8 possible tokens\n+LL | | }\n+   | |_- in this expansion of `pong!` (#2)\n ...\n-LL |        ping!();\n-   |        ------- in this macro invocation (#1)\n+LL |       ping!();\n+   |       ------- in this macro invocation (#1)\n    |\n   ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |  / macro_rules! ping {\n-LL |  |     () => {\n-LL |  |         pong!();\n-   |  |         ------- in this macro invocation (#2)\n-LL |  |     }\n-LL |  | }\n-   |  |_- in this expansion of `ping!` (#1)\n+LL |   macro_rules! ping {\n+   |   ----------------- in this expansion of `ping!` (#1)\n+LL |       () => {\n+LL |           pong!();\n+   |           ------- in this macro invocation (#2)\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | /  macro_rules! pong {\n-LL | |      () => { syntax error };\n-   | |                     ^^^^^ expected one of 8 possible tokens\n-LL | |  }\n-   | |__- in this expansion of `pong!` (#5)\n+LL | / macro_rules! pong {\n+LL | |     () => { syntax error };\n+   | |                    ^^^^^ expected one of 8 possible tokens\n+LL | | }\n+   | |_- in this expansion of `pong!` (#5)\n ...\n-LL |        deep!();\n-   |        ------- in this macro invocation (#1)\n+LL |       deep!();\n+   |       ------- in this macro invocation (#1)\n    |\n   ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |  / macro_rules! ping {\n-LL |  |     () => {\n-LL |  |         pong!();\n-   |  |         ------- in this macro invocation (#5)\n-LL |  |     }\n-LL |  | }\n-   |  |_- in this expansion of `ping!` (#4)\n+LL |   macro_rules! ping {\n+   |   ----------------- in this expansion of `ping!` (#4)\n+LL |       () => {\n+LL |           pong!();\n+   |           ------- in this macro invocation (#5)\n ...\n-LL | /  macro_rules! deep {\n-LL | |      () => {\n-LL | |          foo!();\n-   | |          ------ in this macro invocation (#2)\n-LL | |      }\n-LL | |  }\n-   | |__- in this expansion of `deep!` (#1)\n+LL |   macro_rules! deep {\n+   |   ----------------- in this expansion of `deep!` (#1)\n+LL |       () => {\n+LL |           foo!();\n+   |           ------ in this macro invocation (#2)\n ...\n-LL | /  macro_rules! foo {\n-LL | |      () => {\n-LL | |          bar!();\n-   | |          ------ in this macro invocation (#3)\n-LL | |      }\n-LL | |  }\n-   | |__- in this expansion of `foo!` (#2)\n+LL |   macro_rules! foo {\n+   |   ---------------- in this expansion of `foo!` (#2)\n+LL |       () => {\n+LL |           bar!();\n+   |           ------ in this macro invocation (#3)\n ...\n-LL | /  macro_rules! bar {\n-LL | |      () => {\n-LL | |          ping!();\n-   | |          ------- in this macro invocation (#4)\n-LL | |      }\n-LL | |  }\n-   | |__- in this expansion of `bar!` (#3)\n+LL |   macro_rules! bar {\n+   |   ---------------- in this expansion of `bar!` (#3)\n+LL |       () => {\n+LL |           ping!();\n+   |           ------- in this macro invocation (#4)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8f9dba16578eb9b4ad184f86c3f6b4f575c7359c", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,12 +7,8 @@ LL | macro_rules! unknown { () => () }\n error[E0773]: attempted to define built-in macro more than once\n   --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-LL | /     macro_rules! line {\n-LL | |         () => {\n-LL | |             /* compiler built-in */\n-LL | |         };\n-LL | |     }\n-   | |_____^\n+LL |     macro_rules! line {\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: previously defined here\n   --> $DIR/unknown-builtin.rs:9:1"}, {"sha": "ac218e30b9b85db96dee7db87af88bc3cb260775", "filename": "src/test/ui/marker_trait_attr/marker-trait-with-associated-items.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -2,13 +2,13 @@ error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:6:5\n    |\n LL |     const N: usize;\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n \n error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:12:5\n    |\n LL |     type Output;\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:18:5\n@@ -20,13 +20,13 @@ error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:24:5\n    |\n LL |     const N: usize = 43;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n \n error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:30:5\n    |\n LL |     type Output = ();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:36:5"}, {"sha": "9d92f8fdbb4b3760e38f4ade5525447c5e94a350", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -25,7 +25,7 @@ note: `E1` defined here\n   --> $DIR/auxiliary/match_non_exhaustive_lib.rs:2:1\n    |\n LL | pub enum E1 {}\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n@@ -44,7 +44,7 @@ note: `E2` defined here\n   --> $DIR/auxiliary/match_non_exhaustive_lib.rs:5:1\n    |\n LL | pub enum E2 { A, B }\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "4be588fe7f92ac9cb132837b3b88c170d62fcefa", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -50,7 +50,7 @@ error[E0599]: `Foo` is not an iterator\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n-   | ---------------\n+   | --------------\n    | |          |\n    | |          method `take` not found for this struct\n    | doesn't satisfy `Foo: Iterator`\n@@ -64,14 +64,8 @@ LL |      .take()\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-LL | / pub trait Iterator {\n-LL | |     /// The type of the elements being iterated over.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Item;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | pub trait Iterator {\n+   | ^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `take`, perhaps you need to implement it:\n            candidate #1: `Iterator`"}, {"sha": "ffd95b48ac2b72992ba581014f459a8becfc47df", "filename": "src/test/ui/mismatched_types/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -10,18 +10,12 @@ note: an implementation of `AddAssign<_>` might be missing for `Foo`\n   --> $DIR/assignment-operator-unimplemented.rs:1:1\n    |\n LL | struct Foo;\n-   | ^^^^^^^^^^^ must implement `AddAssign<_>`\n+   | ^^^^^^^^^^ must implement `AddAssign<_>`\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n-LL | / pub trait AddAssign<Rhs = Self> {\n-LL | |     /// Performs the `+=` operation.\n-LL | |     ///\n-LL | |     /// # Example\n-...  |\n-LL | |     fn add_assign(&mut self, rhs: Rhs);\n-LL | | }\n-   | |_^\n+LL | pub trait AddAssign<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3968774e35793515f31e02f5ce4693244aa8c2a1", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -188,7 +188,7 @@ LL |     call(Foo);\n    |     required by a bound introduced by this call\n ...\n LL | struct Foo(u8);\n-   | --------------- takes 1 argument\n+   | ---------- takes 1 argument\n    |\n note: required by a bound in `call`\n   --> $DIR/closure-arg-count.rs:42:30"}, {"sha": "980d9dd167d2035e2b69f5f967f5b9c8e21e56c3", "filename": "src/test/ui/missing-trait-bounds/issue-69725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,7 +7,7 @@ LL |     let _ = Struct::<A>::new().clone();\n   ::: $DIR/auxiliary/issue-69725.rs:2:1\n    |\n LL | pub struct Struct<A>(A);\n-   | ------------------------ doesn't satisfy `Struct<A>: Clone`\n+   | -------------------- doesn't satisfy `Struct<A>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `A: Clone`"}, {"sha": "9e94aa2c7b3b9916efb01ea902a8b2694992383e", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -30,7 +30,7 @@ error[E0599]: the method `foo` exists for reference `&Fin<T>`, but its trait bou\n   --> $DIR/missing-trait-bounds-for-method-call.rs:27:14\n    |\n LL | struct Fin<T> where T: Bar {\n-   | -------------------------- doesn't satisfy `Fin<T>: Bar`\n+   | ------------- doesn't satisfy `Fin<T>: Bar`\n ...\n LL |         self.foo();\n    |              ^^^ method cannot be called on `&Fin<T>` due to unsatisfied trait bounds"}, {"sha": "5760f4a7fdc35d659b434924c4e47bc8e85ac44d", "filename": "src/test/ui/moves/move-deref-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmoves%2Fmove-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fmoves%2Fmove-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-deref-coercion.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,7 +12,7 @@ note: deref defined here\n   --> $DIR/move-deref-coercion.rs:17:5\n    |\n LL |     type Target = NotCopy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error[E0382]: borrow of partially moved value: `val`\n   --> $DIR/move-deref-coercion.rs:30:5\n@@ -28,7 +28,7 @@ note: deref defined here\n   --> $DIR/move-deref-coercion.rs:17:5\n    |\n LL |     type Target = NotCopy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbd86bdb661f207f8b1115c01edd516d7b1e799d", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -33,7 +33,7 @@ LL |     check(xm1::S);\n   ::: $DIR/auxiliary/namespace-mix.rs:3:5\n    |\n LL |     pub struct TS();\n-   |     ---------------- similarly named tuple struct `TS` defined here\n+   |     ------------- similarly named tuple struct `TS` defined here\n    |\n    = note: can't use a type alias as a constructor\n help: a tuple struct with a similar name exists"}, {"sha": "f9f7c787ecbc3bc9e4867d560c843334ce061c34", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -5,7 +5,7 @@ LL | impl MyTrait for MyFoo {}\n    | ---------------------- first implementation here\n LL | // This will conflict with the first impl if we impl `for<T> T: From<!>`.\n LL | impl<T> MyTrait for T where T: From<!> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFoo`\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFoo`\n    |\n    = note: permitting this impl would forbid us from adding `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\n "}, {"sha": "9ae41e78c227dc769e9b2bde8ea00f4a6dcb6131", "filename": "src/test/ui/no-capture-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -17,7 +17,7 @@ note: deref defined here\n   --> $SRC_DIR/alloc/src/sync.rs:LL:COL\n    |\n LL |     type Target = T;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "564b05854740ccfc6b63771872fc52337c71d500", "filename": "src/test/ui/no-reuse-move-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -17,7 +17,7 @@ note: deref defined here\n   --> $SRC_DIR/alloc/src/sync.rs:LL:COL\n    |\n LL |     type Target = T;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "920720a4f53e2558afea17f400dfa896c3ee91cc", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -38,14 +38,8 @@ LL | enum E { A, B }\n note: the following trait must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    |\n-LL | / pub trait BitOr<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `|` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn bitor(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^\n+LL | pub trait BitOr<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "75d27c614e2028192f063c6179f8bae2b956001d", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -234,30 +234,30 @@ LL |         const async unsafe extern \"C\" fn ft5();\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `(): Future`\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5::{opaque#0}`\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`\n   --> $DIR/fn-header-semantic-fail.rs:34:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |\n@@ -270,30 +270,30 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5::{opaque#0}`\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`\n   --> $DIR/fn-header-semantic-fail.rs:47:48\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n   --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n   --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n   --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |"}, {"sha": "019cd414d2e99e856874742635f0ad634d04a3e4", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -16,9 +16,9 @@ LL |         Z0() => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n    |\n LL | pub struct Z0;\n-   | -------------- `Z0` defined here\n+   | ------------- `Z0` defined here\n LL | pub struct Z1();\n-   | ---------------- similarly named tuple struct `Z1` defined here\n+   | ------------- similarly named tuple struct `Z1` defined here\n    |\n help: use this syntax instead\n    |\n@@ -38,9 +38,9 @@ LL |         Z0(x) => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n    |\n LL | pub struct Z0;\n-   | -------------- `Z0` defined here\n+   | ------------- `Z0` defined here\n LL | pub struct Z1();\n-   | ---------------- similarly named tuple struct `Z1` defined here\n+   | ------------- similarly named tuple struct `Z1` defined here\n    |\n help: use this syntax instead\n    |\n@@ -126,7 +126,7 @@ LL |         Z1(x) => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:2:1\n    |\n LL | pub struct Z1();\n-   | ---------------- tuple struct has 0 fields\n+   | ------------- tuple struct has 0 fields\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:18:9"}, {"sha": "9e13a2dc9fbfe209162e3df5ff5064c13e2b85e7", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -271,7 +271,7 @@ error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 0\n   --> $DIR/pat-tuple-overfield.rs:59:12\n    |\n LL | struct Z1();\n-   | ------------ tuple struct has 0 fields\n+   | --------- tuple struct has 0 fields\n ...\n LL |         Z1(_) => {}\n    |            ^ expected 0 fields, found 1\n@@ -280,7 +280,7 @@ error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has\n   --> $DIR/pat-tuple-overfield.rs:60:12\n    |\n LL | struct Z1();\n-   | ------------ tuple struct has 0 fields\n+   | --------- tuple struct has 0 fields\n ...\n LL |         Z1(_, _) => {}\n    |            ^  ^ expected 0 fields, found 2"}, {"sha": "643e734f9d4fa7109d5489fb8f81f6ed1c095851", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,13 +7,8 @@ LL |     match HiddenEnum::A {\n note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:1:1\n    |\n-LL | / pub enum HiddenEnum {\n-LL | |     A,\n-LL | |     B,\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_^\n+LL | pub enum HiddenEnum {\n+   | ^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -30,14 +25,11 @@ LL |     match HiddenEnum::A {\n note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum HiddenEnum {\n-LL | |     A,\n-LL | |     B,\n-   | |     ^ not covered\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_-\n+LL | pub enum HiddenEnum {\n+   | -------------------\n+LL |     A,\n+LL |     B,\n+   |     ^ not covered\n    = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -54,14 +46,11 @@ LL |     match HiddenEnum::A {\n note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum HiddenEnum {\n-LL | |     A,\n-LL | |     B,\n-   | |     ^ not covered\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_-\n+LL | pub enum HiddenEnum {\n+   | -------------------\n+LL |     A,\n+LL |     B,\n+   |     ^ not covered\n    = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n@@ -78,15 +67,11 @@ LL |     match None {\n note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<HiddenEnum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "2247b818d4385943266555f1bc6536c2a016ce9a", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -108,14 +108,8 @@ LL |     match Some(A) {\n note: `Option<Enum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-LL | | }\n-   | |_^\n+LL | pub enum Option<T> {\n+   | ^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `Option<Enum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |"}, {"sha": "eb8c63919b6445fbd4576ffec0af6968e62a3a7f", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -11,7 +11,7 @@ LL | / pub struct Box<\n LL | |     T: ?Sized,\n LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n LL | | >(Unique<T>, A);\n-   | |________________^\n+   | |_^\n    = note: the matched value is of type `Box<ElementKind>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "a2b66f5ed67523cb62ea0f35b63fae7bf36b3751", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -20,18 +20,14 @@ LL |     match Some(Some(North)) {\n note: `Option<Option<Direction>>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^\n-   | |     |\n-   | |     not covered\n-   | |     not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n+   |     |\n+   |     not covered\n+   |     not covered\n    = note: the matched value is of type `Option<Option<Direction>>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "4607cfaae1719db36dfec2abc9bc7270ab8fb073", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,15 +7,11 @@ LL |     match private::DATA {\n note: `Option<Private>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<Private>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "f2362c316dfb988971b45314c186949dbb4061cb", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -37,15 +37,11 @@ LL |     match Some(10) {\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum Option<T> {\n+   | ------------------\n+...\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^ not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "98c75953add89304a4b2ea828f3733ab8f6000bc", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,16 +7,11 @@ LL |     match UnstableEnum::Stable {\n note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:9:5\n    |\n-LL | / pub enum UnstableEnum {\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-LL | |     Stable,\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-LL | |     Stable2,\n-   | |     ^^^^^^^ not covered\n-LL | |     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-LL | |     Unstable,\n-LL | | }\n-   | |_-\n+LL | pub enum UnstableEnum {\n+   | ---------------------\n+...\n+LL |     Stable2,\n+   |     ^^^^^^^ not covered\n    = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n@@ -33,14 +28,8 @@ LL |     match UnstableEnum::Stable {\n note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:5:1\n    |\n-LL | / pub enum UnstableEnum {\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-LL | |     Stable,\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-...  |\n-LL | |     Unstable,\n-LL | | }\n-   | |_^\n+LL | pub enum UnstableEnum {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "f07a25ca89b27541ec16bb1df377a1f441337c10", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -7,15 +7,11 @@ LL |     match UnstableEnum::Stable {\n note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:11:5\n    |\n-LL | / pub enum UnstableEnum {\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-LL | |     Stable,\n-LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-...  |\n-LL | |     Unstable,\n-   | |     ^^^^^^^^ not covered\n-LL | | }\n-   | |_-\n+LL | pub enum UnstableEnum {\n+   | ---------------------\n+...\n+LL |     Unstable,\n+   |     ^^^^^^^^ not covered\n    = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "dc98cfe3bb6c47cf1640fcec5156f1a3e35711c1", "filename": "src/test/ui/privacy/issue-30079.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fprivacy%2Fissue-30079.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f/src%2Ftest%2Fui%2Fprivacy%2Fissue-30079.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-30079.stderr?ref=46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "patch": "@@ -12,19 +12,19 @@ error[E0446]: private type `m2::Priv` in public interface\n   --> $DIR/issue-30079.rs:18:9\n    |\n LL |     struct Priv;\n-   |     ------------ `m2::Priv` declared as private\n+   |     ----------- `m2::Priv` declared as private\n LL |     impl ::std::ops::Deref for ::SemiPriv {\n LL |         type Target = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m3::Priv` in public interface\n   --> $DIR/issue-30079.rs:35:9\n    |\n LL |     struct Priv;\n-   |     ------------ `m3::Priv` declared as private\n+   |     ----------- `m3::Priv` declared as private\n LL |     impl ::SemiPrivTrait for () {\n LL |         type Assoc = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^ can't leak private type\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}]}