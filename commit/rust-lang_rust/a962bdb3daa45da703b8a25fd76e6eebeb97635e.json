{"sha": "a962bdb3daa45da703b8a25fd76e6eebeb97635e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjJiZGIzZGFhNDVkYTcwM2I4YTI1ZmQ3NmU2ZWViZWI5NzYzNWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-26T19:39:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-30T10:57:57Z"}, "message": "Use `#[rustc_paren_sugar]` as a more extensible way of deciding when\nparen sugar is legal.", "tree": {"sha": "416868d0ca409e4b6bbd5c0bfdbd23ec336aeb4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/416868d0ca409e4b6bbd5c0bfdbd23ec336aeb4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a962bdb3daa45da703b8a25fd76e6eebeb97635e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a962bdb3daa45da703b8a25fd76e6eebeb97635e", "html_url": "https://github.com/rust-lang/rust/commit/a962bdb3daa45da703b8a25fd76e6eebeb97635e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a962bdb3daa45da703b8a25fd76e6eebeb97635e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c793c1d360570837d897a713a64b450f50f028", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c793c1d360570837d897a713a64b450f50f028", "html_url": "https://github.com/rust-lang/rust/commit/80c793c1d360570837d897a713a64b450f50f028"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "8960667fdfa861481f82f4d721c9a6ff5ee9f925", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -70,6 +70,7 @@\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]\n+#![feature(unboxed_closures)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(core)]\n #![feature(hash)]"}, {"sha": "80232764ed42f392971c17c7a437a357b5847f72", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -1166,6 +1166,7 @@ impl<F,A,R> FnOnce<A,R> for F\n #[unstable(feature = \"core\",\n            reason = \"uncertain about variadic generics, input versus associated types\")]\n #[cfg(not(stage0))]\n+#[rustc_paren_sugar]\n pub trait Fn<Args> {\n     type Output;\n \n@@ -1178,6 +1179,7 @@ pub trait Fn<Args> {\n #[unstable(feature = \"core\",\n            reason = \"uncertain about variadic generics, input versus associated types\")]\n #[cfg(not(stage0))]\n+#[rustc_paren_sugar]\n pub trait FnMut<Args> {\n     type Output;\n \n@@ -1190,6 +1192,7 @@ pub trait FnMut<Args> {\n #[unstable(feature = \"core\",\n            reason = \"uncertain about variadic generics, input versus associated types\")]\n #[cfg(not(stage0))]\n+#[rustc_paren_sugar]\n pub trait FnOnce<Args> {\n     type Output;\n "}, {"sha": "ee7c0ee894fc7b927200ca7744e81ab010c0f4a5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -670,6 +670,7 @@ impl LintPass for UnusedAttributes {\n             // FIXME: #19470 this shouldn't be needed forever\n             \"old_orphan_check\",\n             \"old_impl_check\",\n+            \"rustc_paren_sugar\", // FIXME: #18101 temporary unboxed closure hack\n         ];\n \n         static CRATE_ATTRS: &'static [&'static str] = &["}, {"sha": "242ab630a20ef424a8eaef8ebd506b9d12dc9da7", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -265,3 +265,5 @@ pub const tag_polarity: uint = 0xb4;\n pub const tag_macro_defs: uint = 0xb5;\n pub const tag_macro_def: uint = 0xb6;\n pub const tag_macro_def_body: uint = 0xb7;\n+\n+pub const tag_paren_sugar: uint = 0xb8;"}, {"sha": "93ca42e9a2872c41fb2d5b64ad946c39c49b8d8c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -371,6 +371,11 @@ fn parse_unsafety(item_doc: rbml::Doc) -> ast::Unsafety {\n     }\n }\n \n+fn parse_paren_sugar(item_doc: rbml::Doc) -> bool {\n+    let paren_sugar_doc = reader::get_doc(item_doc, tag_paren_sugar);\n+    reader::doc_as_u8(paren_sugar_doc) != 0\n+}\n+\n fn parse_polarity(item_doc: rbml::Doc) -> ast::ImplPolarity {\n     let polarity_doc = reader::get_doc(item_doc, tag_polarity);\n     if reader::doc_as_u8(polarity_doc) != 0 {\n@@ -400,8 +405,10 @@ pub fn get_trait_def<'tcx>(cdata: Cmd,\n     let bounds = trait_def_bounds(item_doc, tcx, cdata);\n     let unsafety = parse_unsafety(item_doc);\n     let associated_type_names = parse_associated_type_names(item_doc);\n+    let paren_sugar = parse_paren_sugar(item_doc);\n \n     ty::TraitDef {\n+        paren_sugar: paren_sugar,\n         unsafety: unsafety,\n         generics: generics,\n         bounds: bounds,"}, {"sha": "6767f77de84bb61ed017a3b2874f6ed500be4209", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -1317,6 +1317,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_item_variances(rbml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n         encode_unsafety(rbml_w, trait_def.unsafety);\n+        encode_paren_sugar(rbml_w, trait_def.paren_sugar);\n         encode_associated_type_names(rbml_w, trait_def.associated_type_names.as_slice());\n         encode_generics(rbml_w, ecx, &trait_def.generics, tag_item_generics);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n@@ -1697,6 +1698,11 @@ fn encode_unsafety(rbml_w: &mut Encoder, unsafety: ast::Unsafety) {\n     rbml_w.wr_tagged_u8(tag_unsafety, byte);\n }\n \n+fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) {\n+    let byte: u8 = if paren_sugar {1} else {0};\n+    rbml_w.wr_tagged_u8(tag_paren_sugar, byte);\n+}\n+\n fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) {\n     rbml_w.start_tag(tag_associated_type_names);\n     for &name in names.iter() {"}, {"sha": "425acbae483fe4824245056986c1bb80794e93d7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -2221,6 +2221,12 @@ pub struct TypeScheme<'tcx> {\n pub struct TraitDef<'tcx> {\n     pub unsafety: ast::Unsafety,\n \n+    /// If `true`, then this trait had the `#[rustc_paren_sugar]`\n+    /// attribute, indicating that it should be used with `Foo()`\n+    /// sugar. This is a temporary thing -- eventually any trait wil\n+    /// be usable with the sugar (or without it).\n+    pub paren_sugar: bool,\n+\n     /// Generic type definitions. Note that `Self` is listed in here\n     /// as having a single bound, the trait itself (e.g., in the trait\n     /// `Eq`, there is a single bound `Self : Eq`). This is so that"}, {"sha": "350227c6662433757bbede36c59a63a9c0a06d24", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -614,11 +614,9 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n \n     let (regions, types, assoc_bindings) = match path.segments.last().unwrap().parameters {\n         ast::AngleBracketedParameters(ref data) => {\n-            // For now, require that parenthetical notation be used\n+            // For now, require that parenthetical5D notation be used\n             // only with `Fn()` etc.\n-            if !this.tcx().sess.features.borrow().unboxed_closures &&\n-                this.tcx().lang_items.fn_trait_kind(trait_def_id).is_some()\n-            {\n+            if !this.tcx().sess.features.borrow().unboxed_closures && trait_def.paren_sugar {\n                 span_err!(this.tcx().sess, path.span, E0215,\n                                          \"angle-bracket notation is not stable when \\\n                                          used with the `Fn` family of traits, use parentheses\");\n@@ -632,9 +630,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n         ast::ParenthesizedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n             // only with `Fn()` etc.\n-            if !this.tcx().sess.features.borrow().unboxed_closures &&\n-                this.tcx().lang_items.fn_trait_kind(trait_def_id).is_none()\n-            {\n+            if !this.tcx().sess.features.borrow().unboxed_closures && !trait_def.paren_sugar {\n                 span_err!(this.tcx().sess, path.span, E0216,\n                                          \"parenthetical notation is only stable when \\\n                                          used with the `Fn` family of traits\");"}, {"sha": "ed33ddd458a54223de475475d659c74b577454e6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962bdb3daa45da703b8a25fd76e6eebeb97635e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a962bdb3daa45da703b8a25fd76e6eebeb97635e", "patch": "@@ -855,6 +855,17 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n         }\n     };\n \n+    let paren_sugar = ty::has_attr(tcx, def_id, \"rustc_paren_sugar\");\n+    if paren_sugar && !ccx.tcx.sess.features.borrow().unboxed_closures {\n+        ccx.tcx.sess.span_err(\n+            it.span,\n+            \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n+             which traits can use parenthetical notation\");\n+        span_help!(ccx.tcx.sess, it.span,\n+                   \"add `#![feature(unboxed_closures)]` to \\\n+                    the crate attributes to use it\");\n+    }\n+\n     let substs = ccx.tcx.mk_substs(mk_trait_substs(ccx, generics));\n \n     let ty_generics = ty_generics_for_trait(ccx,\n@@ -887,6 +898,7 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n     });\n \n     let trait_def = Rc::new(ty::TraitDef {\n+        paren_sugar: paren_sugar,\n         unsafety: unsafety,\n         generics: ty_generics,\n         bounds: bounds,"}]}