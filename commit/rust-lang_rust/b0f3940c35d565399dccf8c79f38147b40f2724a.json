{"sha": "b0f3940c35d565399dccf8c79f38147b40f2724a", "node_id": "C_kwDOAAsO6NoAKGIwZjM5NDBjMzVkNTY1Mzk5ZGNjZjhjNzlmMzgxNDdiNDBmMjcyNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T11:07:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T11:07:50Z"}, "message": "Auto merge of #103691 - michaelwoerister:consistent-slice-and-str-cpp-like-debuginfo-names, r=wesleywiser\n\n[debuginfo] Make cpp-like debuginfo type names for slices and str consistent.\n\nBefore this PR, the compiler would emit the debuginfo name `slice$<T>` for all kinds of slices, regardless of whether they are behind a reference or not and regardless of the kind of reference. As a consequence, the types `Foo<&[T]>`, `Foo<[T]>`, and `Foo<&mut [T]>` would end up with the same type name `Foo<slice$<T> >` in debuginfo, making it impossible to disambiguate between them by name. Similarly, `&str` would get the name `str` in debuginfo, so the debuginfo name for `Foo<str>` and `Foo<&str>` would be the same. In contrast, `*const [bool]` and `*mut [bool]` would be `ptr_const$<slice$<bool> >` and `ptr_mut$<slice$<bool> >`, i.e. the encoding does not lose information about the type.\n\nThis PR removes all special handling for slices and `str`. The types `&[bool]`, `&mut [bool]`, and `&str` thus get the names `ref$<slice2$<bool> >`, `ref_mut$<slice2$<bool> >`, and `ref$<str$>` respectively -- as one would expect.\n\nThe new special name for slices is `slice2$` to differentiate it from the previous name `slice$`, which has different semantics. The same is true for `str` and `str$`. This kind of versioning already has a precedent with the case of `enum$` and `enum2$` and hopefully will make it easier to transition existing consumers of these names.\n\ncc `@rust-lang/wg-debugging` `@vadimcn`\n\nr? `@wesleywiser`\n\nUPDATE: Here is a table to clarify the changes\n\n| Rust type | DWARF name | C++-like name (before) | C++-like name (after) |\n|-----------|------------|------------------------|------------------------|\n| `[T]`        | `[T]`        | `slice$<T>`              | `slice2$<T>`           |\n| `&[T]`       | `&[T]`       | `slice$<T>`              | `ref$<slice2$<T> >`    |\n| `&mut [T]`   | `&mut [T]`   | `slice$<T>`              | `ref_mut$<slice2$<T> >`|\n| `str`        | `str`        | `str`                    | `str$`           |\n| `&str`       | `&str`       | `str`                    | `ref$<str$>`    |\n| `&mut str`   | `&mut str`   | `str`                    | `ref_mut$<str$>`|\n| `*const [T]` | `*const [T]` | `ptr_const$<slice$<T> >` | `ptr_const$<slice2$<T> >` |\n| `*mut [T]`   | `*mut [T]`   | `ptr_mut$<slice$<T> >`   | `ptr_mut$<slice2$<T> >` |\n\nAs you can see, before the PR many types would end up with the same name, making it impossible to distinguish between them in NatVis or other places where types are matched or looked up by name. The DWARF version of names is not changed.", "tree": {"sha": "d2fed32e9a1274b4bafc6b4c75a9bea54ebfcae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2fed32e9a1274b4bafc6b4c75a9bea54ebfcae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f3940c35d565399dccf8c79f38147b40f2724a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3940c35d565399dccf8c79f38147b40f2724a", "html_url": "https://github.com/rust-lang/rust/commit/b0f3940c35d565399dccf8c79f38147b40f2724a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3940c35d565399dccf8c79f38147b40f2724a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452cf4f7109f58433ac38be7d3da527408571054", "url": "https://api.github.com/repos/rust-lang/rust/commits/452cf4f7109f58433ac38be7d3da527408571054", "html_url": "https://github.com/rust-lang/rust/commit/452cf4f7109f58433ac38be7d3da527408571054"}, {"sha": "0cd2dd7263a20ba62591039cd3591c8eaef13878", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd2dd7263a20ba62591039cd3591c8eaef13878", "html_url": "https://github.com/rust-lang/rust/commit/0cd2dd7263a20ba62591039cd3591c8eaef13878"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "8647fbace2a75458988d8589c1c1c498c39f7d5d", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -59,7 +59,13 @@ fn push_debuginfo_type_name<'tcx>(\n     match *t.kind() {\n         ty::Bool => output.push_str(\"bool\"),\n         ty::Char => output.push_str(\"char\"),\n-        ty::Str => output.push_str(\"str\"),\n+        ty::Str => {\n+            if cpp_like_debuginfo {\n+                output.push_str(\"str$\")\n+            } else {\n+                output.push_str(\"str\")\n+            }\n+        }\n         ty::Never => {\n             if cpp_like_debuginfo {\n                 output.push_str(\"never$\");\n@@ -152,25 +158,19 @@ fn push_debuginfo_type_name<'tcx>(\n             }\n         }\n         ty::Ref(_, inner_type, mutbl) => {\n-            // Slices and `&str` are treated like C++ pointers when computing debug\n-            // info for MSVC debugger. However, wrapping these types' names in a synthetic type\n-            // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n-            // types out to aid debugging in MSVC.\n-            let is_slice_or_str = matches!(*inner_type.kind(), ty::Slice(_) | ty::Str);\n-\n-            if !cpp_like_debuginfo {\n-                output.push('&');\n-                output.push_str(mutbl.prefix_str());\n-            } else if !is_slice_or_str {\n+            if cpp_like_debuginfo {\n                 match mutbl {\n                     Mutability::Not => output.push_str(\"ref$<\"),\n                     Mutability::Mut => output.push_str(\"ref_mut$<\"),\n                 }\n+            } else {\n+                output.push('&');\n+                output.push_str(mutbl.prefix_str());\n             }\n \n             push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);\n \n-            if cpp_like_debuginfo && !is_slice_or_str {\n+            if cpp_like_debuginfo {\n                 push_close_angle_bracket(cpp_like_debuginfo, output);\n             }\n         }\n@@ -195,7 +195,7 @@ fn push_debuginfo_type_name<'tcx>(\n         }\n         ty::Slice(inner_type) => {\n             if cpp_like_debuginfo {\n-                output.push_str(\"slice$<\");\n+                output.push_str(\"slice2$<\");\n             } else {\n                 output.push('[');\n             }"}, {"sha": "8c16a562e349e5fd7c339cad1d5358c405945878", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -1,6 +1,10 @@\n \ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-  <Type Name=\"str\">\n+  <Type Name=\"ref$&lt;str$&gt;\">\n+    <AlternativeType Name=\"ref_mut$&lt;str$&gt;\" />\n+    <AlternativeType Name=\"ptr_const$&lt;str$&gt;\" />\n+    <AlternativeType Name=\"ptr_mut$&lt;str$&gt;\" />\n+\n     <DisplayString>{(char*)data_ptr,[length]s8}</DisplayString>\n     <StringView>(char*)data_ptr,[length]s8</StringView>\n     <Expand>\n@@ -15,7 +19,11 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n-  <Type Name=\"slice$&lt;*&gt;\">\n+  <Type Name=\"ref$&lt;slice2$&lt;*&gt; &gt;\">\n+    <AlternativeType Name=\"ref_mut$&lt;slice2$&lt;*&gt; &gt;\" />\n+    <AlternativeType Name=\"ptr_const$&lt;slice2$&lt;*&gt; &gt;\" />\n+    <AlternativeType Name=\"ptr_mut$&lt;slice2$&lt;*&gt; &gt;\" />\n+\n     <DisplayString>{{ len={length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>"}, {"sha": "41f4a3767f59974c959bee9b0e5c3d8fda3f0d35", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -85,7 +85,7 @@\n   </Type>\n \n   <!-- alloc::rc::Rc<[T]> -->\n-  <Type Name=\"alloc::rc::Rc&lt;slice$&lt;*&gt; &gt;\">\n+  <Type Name=\"alloc::rc::Rc&lt;slice2$&lt;*&gt; &gt;\">\n     <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n@@ -115,7 +115,7 @@\n   </Type>\n \n   <!-- alloc::rc::Weak<[T]> -->\n-  <Type Name=\"alloc::rc::Weak&lt;slice$&lt;*&gt; &gt;\">\n+  <Type Name=\"alloc::rc::Weak&lt;slice2$&lt;*&gt; &gt;\">\n     <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n@@ -144,7 +144,7 @@\n   </Type>\n \n   <!-- alloc::sync::Arc<[T]> -->\n-  <Type Name=\"alloc::sync::Arc&lt;slice$&lt;*&gt; &gt;\">\n+  <Type Name=\"alloc::sync::Arc&lt;slice2$&lt;*&gt; &gt;\">\n     <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n@@ -173,7 +173,7 @@\n   </Type>\n \n   <!-- alloc::sync::Weak<[T]> -->\n-  <Type Name=\"alloc::sync::Weak&lt;slice$&lt;*&gt; &gt;\">\n+  <Type Name=\"alloc::sync::Weak&lt;slice2$&lt;*&gt; &gt;\">\n     <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>"}, {"sha": "9e82f0714690e5c744364b5f05d39c41462a054a", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -47,7 +47,6 @@\n // gdbg-check:$15 = {data_ptr = [...] \"Hello, World!\", length = 13}\n // gdbr-check:$15 = \"Hello, World!\"\n \n-\n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n@@ -96,7 +95,6 @@\n // lldbg-check:[...]$12 = 3.5\n // lldbr-check:(f64) f64 = 3.5\n \n-\n // === CDB TESTS ===================================================================================\n \n // cdb-command:g\n@@ -131,7 +129,7 @@\n // cdb-command:.enable_unicode 1\n // FIXME(#88840): The latest version of the Windows SDK broke the visualizer for str.\n // cdb-command:dx  s\n-// cdb-check:s                : [...] [Type: str]\n+// cdb-check:s                : [...] [Type: ref$<str$>]\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n@@ -156,4 +154,6 @@ fn main() {\n     _zzz(); // #break\n }\n \n-fn _zzz() {()}\n+fn _zzz() {\n+    ()\n+}"}, {"sha": "d66e4c660f7b5c5f1771bae78cb189624fdf3cea", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -116,13 +116,13 @@\n // cdb-check: niche_w_fields_3_niche5,d : F [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n \n // cdb-command: dx -r3 niche_w_fields_std_result_ok,d\n-// cdb-check: niche_w_fields_std_result_ok,d : Ok [Type: enum2$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n-// cdb-check:    [+0x[...]] __0              [Type: alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>]\n+// cdb-check: niche_w_fields_std_result_ok,d : Ok [Type: enum2$<core::result::Result<alloc::boxed::Box<slice2$<u8>,alloc::alloc::Global>,u64> >]\n+// cdb-check:    [+0x[...]] __0              [Type: alloc::boxed::Box<slice2$<u8>,alloc::alloc::Global>]\n // cdb-check:        [+0x[...]] data_ptr         : [...]\n // cdb-check:        [+0x[...]] length           : 3 [...]\n \n // cdb-command: dx -r3 niche_w_fields_std_result_err,d\n-// cdb-check: niche_w_fields_std_result_err,d : Err [Type: enum2$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n+// cdb-check: niche_w_fields_std_result_err,d : Err [Type: enum2$<core::result::Result<alloc::boxed::Box<slice2$<u8>,alloc::alloc::Global>,u64> >]\n // cdb-check:    [+0x[...]] __0              : 789 [Type: unsigned __int64]\n \n // cdb-command: dx -r2 arbitrary_discr1,d"}, {"sha": "ae67f6981519e4942ee1896381c02d4a6e0b7a1c", "filename": "src/test/debuginfo/msvc-scalarpair-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -38,14 +38,14 @@\n // cdb-command: g\n \n // cdb-command: dx s\n-// cdb-check:s                : \"this is a static str\" [Type: str]\n+// cdb-check:s                : \"this is a static str\" [Type: ref$<str$>]\n // cdb-check:    [len]            : 0x14 [Type: unsigned [...]]\n // cdb-check:    [chars]\n \n // cdb-command: g\n \n // cdb-command: dx s\n-// cdb-check:s                : { len=0x5 } [Type: slice$<u8>]\n+// cdb-check:s                : { len=0x5 } [Type: ref$<slice2$<u8> >]\n // cdb-check:    [len]            : 0x5 [Type: unsigned [...]]\n // cdb-check:    [0]              : 0x1 [Type: unsigned char]\n // cdb-check:    [1]              : 0x2 [Type: unsigned char]"}, {"sha": "d8c6344e0b6ac091e50323aa633065c8d6569f4d", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -69,7 +69,7 @@\n // cdb-command: g\n \n // cdb-command: dx slice,d\n-// cdb-check:slice,d          : { len=4 } [Type: slice$<i32>]\n+// cdb-check:slice,d          : { len=4 } [Type: ref$<slice2$<i32> >]\n // cdb-check:    [len]            : 4 [Type: [...]]\n // cdb-check:    [0]              : 0 [Type: int]\n // cdb-check:    [1]              : 1 [Type: int]\n@@ -86,7 +86,7 @@\n // cdb-check:    [3]              : 7 [Type: unsigned __int64]\n \n // cdb-command: dx str_slice\n-// cdb-check:str_slice        : \"IAMA string slice!\" [Type: str]\n+// cdb-check:str_slice        : \"IAMA string slice!\" [Type: ref$<str$>]\n \n // cdb-command: dx string\n // cdb-check:string           : \"IAMA string!\" [Type: [...]::String]"}, {"sha": "5d5492d72177761c117de053241ff59110a89f1f", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -57,7 +57,7 @@\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx slice_rc,d\n-// cdb-check:slice_rc,d       : { len=3 } [Type: alloc::rc::Rc<slice$<u32> >]\n+// cdb-check:slice_rc,d       : { len=3 } [Type: alloc::rc::Rc<slice2$<u32> >]\n // cdb-check:    [Length]         : 3 [Type: [...]]\n // cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n@@ -66,7 +66,7 @@\n // cdb-check:    [2]              : 3 [Type: u32]\n \n // cdb-command:dx slice_rc_weak,d\n-// cdb-check:slice_rc_weak,d  : { len=3 } [Type: alloc::rc::Weak<slice$<u32> >]\n+// cdb-check:slice_rc_weak,d  : { len=3 } [Type: alloc::rc::Weak<slice2$<u32> >]\n // cdb-check:    [Length]         : 3 [Type: [...]]\n // cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n@@ -85,7 +85,7 @@\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n // cdb-command:dx slice_arc,d\n-// cdb-check:slice_arc,d      : { len=3 } [Type: alloc::sync::Arc<slice$<u32> >]\n+// cdb-check:slice_arc,d      : { len=3 } [Type: alloc::sync::Arc<slice2$<u32> >]\n // cdb-check:    [Length]         : 3 [Type: [...]]\n // cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n@@ -94,7 +94,7 @@\n // cdb-check:    [2]              : 6 [Type: u32]\n \n // cdb-command:dx slice_arc_weak,d\n-// cdb-check:slice_arc_weak,d : { len=3 } [Type: alloc::sync::Weak<slice$<u32> >]\n+// cdb-check:slice_arc_weak,d : { len=3 } [Type: alloc::sync::Weak<slice2$<u32> >]\n // cdb-check:    [Length]         : 3 [Type: [...]]\n // cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]"}, {"sha": "f1944fa38d27ea0d44d277e1d1ed3aebfb79c13b", "filename": "src/test/debuginfo/result-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fresult-types.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -7,12 +7,12 @@\n // cdb-command: g\n \n // cdb-command: dx x,d\n-// cdb-check:x,d              : Ok [Type: enum2$<core::result::Result<i32,str> >]\n+// cdb-check:x,d              : Ok [Type: enum2$<core::result::Result<i32,ref$<str$> > >]\n // cdb-check:    [...] __0              : -3 [Type: int]\n \n // cdb-command: dx y\n-// cdb-check:y                : Err [Type: enum2$<core::result::Result<i32,str> >]\n-// cdb-check:    [...] __0              : \"Some error message\" [Type: str]\n+// cdb-check:y                : Err [Type: enum2$<core::result::Result<i32,ref$<str$> > >]\n+// cdb-check:    [...] __0              : \"Some error message\" [Type: ref$<str$>]\n \n fn main() {\n     let x: Result<i32, &str> = Ok(-3);"}, {"sha": "d7b79a845d25474260071922147cc301304070a3", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -95,7 +95,7 @@\n // gdb-check:type = &[usize]\n \n // gdb-command:whatis slice2\n-// gdb-check:type = &[type_names::mod1::Enum2]\n+// gdb-check:type = &mut [type_names::mod1::Enum2]\n \n // TRAITS\n // gdb-command:whatis box_trait\n@@ -218,8 +218,8 @@\n // cdb-check:struct alloc::vec::Vec<usize,alloc::alloc::Global> vec1 = [...]\n // cdb-check:struct alloc::vec::Vec<enum2$<type_names::mod1::Enum2>,alloc::alloc::Global> vec2 = [...]\n // cdb-command:dv /t slice*\n-// cdb-check:struct slice$<usize> slice1 = [...]\n-// cdb-check:struct slice$<enum2$<type_names::mod1::Enum2> > slice2 = [...]\n+// cdb-check:struct ref$<slice2$<usize> > slice1 = [...]\n+// cdb-check:struct ref_mut$<slice2$<enum2$<type_names::mod1::Enum2> > > slice2 = [...]\n \n // TRAITS\n // cdb-command:dv /t *_trait\n@@ -417,8 +417,8 @@ fn main() {\n \n     let vec1 = vec![0_usize, 2, 3];\n     let slice1 = &*vec1;\n-    let vec2 = vec![mod1::Enum2::Variant2(Struct1)];\n-    let slice2 = &*vec2;\n+    let mut vec2 = vec![mod1::Enum2::Variant2(Struct1)];\n+    let slice2 = &mut *vec2;\n \n     // Trait Objects\n     let box_trait = Box::new(0_isize) as Box<dyn Trait1>;"}, {"sha": "b1ec9b068305997a8878782ade563d60de78f605", "filename": "src/test/debuginfo/unsized.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3940c35d565399dccf8c79f38147b40f2724a/src%2Ftest%2Fdebuginfo%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funsized.rs?ref=b0f3940c35d565399dccf8c79f38147b40f2724a", "patch": "@@ -32,13 +32,13 @@\n \n // cdb-command: g\n // cdb-command:dx a\n-// cdb-check:a                [Type: ref$<unsized::Foo<slice$<u8> > >]\n-// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: unsized::Foo<slice$<u8> > *]\n+// cdb-check:a                [Type: ref$<unsized::Foo<slice2$<u8> > >]\n+// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: unsized::Foo<slice2$<u8> > *]\n // cdb-check:    [...] length           : 0x4 [Type: unsigned [...]int[...]\n \n // cdb-command:dx b\n-// cdb-check:b                [Type: ref$<unsized::Foo<unsized::Foo<slice$<u8> > > >]\n-// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: unsized::Foo<unsized::Foo<slice$<u8> > > *]\n+// cdb-check:b                [Type: ref$<unsized::Foo<unsized::Foo<slice2$<u8> > > >]\n+// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: unsized::Foo<unsized::Foo<slice2$<u8> > > *]\n // cdb-check:    [...] length           : 0x4 [Type: unsigned [...]int[...]\n \n // cdb-command:dx c\n@@ -53,8 +53,8 @@\n // cdb-check:[...] vtable           : 0x[...] [Type: unsigned [...]int[...] (*)[3]]\n \n // cdb-command:dx tuple_slice\n-// cdb-check:tuple_slice      [Type: ref$<tuple$<i32,i32,slice$<i32> > >]\n-// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: tuple$<i32,i32,slice$<i32> > *]\n+// cdb-check:tuple_slice      [Type: ref$<tuple$<i32,i32,slice2$<i32> > >]\n+// cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: tuple$<i32,i32,slice2$<i32> > *]\n // cdb-check:    [...] length           : 0x2 [Type: unsigned [...]int[...]\n \n // cdb-command:dx tuple_dyn"}]}