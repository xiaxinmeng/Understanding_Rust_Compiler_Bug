{"sha": "c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NzdiODc3NWRkNzJkMTkxZmYxZDhlOGRjZWFmNGI0Y2Q1ZGI4NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T20:47:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T20:47:52Z"}, "message": "Auto merge of #72437 - ecstatic-morse:stabilize-const-if-match, r=oli-obk\n\nStabilize `#![feature(const_if_match)]`\n\nQuoting from the [stabilization report](https://github.com/rust-lang/rust/issues/49146#issuecomment-616301045):\n\n> `if` and `match` expressions as well as the short-circuiting logic operators `&&` and `||` will become legal in all [const contexts](https://doc.rust-lang.org/reference/const_eval.html#const-context). A const context is any of the following:\n>\n> - The initializer of a `const`, `static`, `static mut` or enum discriminant.\n> - The body of a `const fn`.\n> - The value of a const generic (nightly only).\n> - The length of an array type (`[u8; 3]`) or an array repeat expression (`[0u8; 3]`).\n>\n> Furthermore, the short-circuiting logic operators will no longer be lowered to their bitwise equivalents (`&` and `|` respectively) in `const` and `static` initializers (see #57175). As a result, `let` bindings can be used alongside short-circuiting logic in those initializers.\n\nResolves #49146.\n\nIdeally, we would resolve :whale: #66753 before this lands on stable, so it might be worth pushing this back a release. Also, this means we should get the process started for #52000, otherwise people will have no recourse except recursion for iterative `const fn`.\n\nr? @oli-obk", "tree": {"sha": "6c2daa59e240a4c245503456ae4fd2efd1ddfa2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2daa59e240a4c245503456ae4fd2efd1ddfa2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "html_url": "https://github.com/rust-lang/rust/commit/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f517ce6f28b5d638cce4c1eccdbe63255b11420", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f517ce6f28b5d638cce4c1eccdbe63255b11420", "html_url": "https://github.com/rust-lang/rust/commit/2f517ce6f28b5d638cce4c1eccdbe63255b11420"}, {"sha": "8509b6951a6a4f29b9426227e1edff6d6484571f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8509b6951a6a4f29b9426227e1edff6d6484571f", "html_url": "https://github.com/rust-lang/rust/commit/8509b6951a6a4f29b9426227e1edff6d6484571f"}], "stats": {"total": 2105, "additions": 348, "deletions": 1757}, "files": [{"sha": "ee9cfcbd9dee2b9acf73b428f4ac6b0afd36dd4f", "filename": "src/doc/unstable-book/src/language-features/const-if-match.md", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-if-match.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-if-match.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-if-match.md?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,14 +0,0 @@\n-# `const_if_match`\n-\n-The tracking issue for this feature is: [#49146]\n-\n-[#49146]: https://github.com/rust-lang/rust/issues/49146\n-\n-------------------------\n-\n-Allows for the use of conditionals (`if` and `match`) in a const context.\n-Const contexts include `static`, `static mut`, `const`, `const fn`, const\n-generics, and array initializers. Enabling this feature flag will also make\n-`&&` and `||` function normally in a const-context by removing the hack that\n-replaces them with their non-short-circuiting equivalents, `&` and `|`, in a\n-`const` or `static`."}, {"sha": "5f18fe8bfab845dd30da591aefa9b80ab918a99d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -87,7 +87,7 @@\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(cow_is_borrowed)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]"}, {"sha": "aeb52bffbf24c2ed92a2011788dd5bc19486d6cf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -73,8 +73,8 @@\n #![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n+#![cfg_attr(bootstrap, feature(const_loop))]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]"}, {"sha": "1714d2ee98ef217239f81d4e35c5e581299c591e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1578,7 +1578,7 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[allow_internal_unstable(const_if_match)]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n                  if self.is_negative() {\n@@ -1867,7 +1867,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[allow_internal_unstable(const_if_match)]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 if self == Self::MIN {\n                     (Self::MIN, true)\n@@ -2160,7 +2160,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[allow_internal_unstable(const_if_match)]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn abs(self) -> Self {"}, {"sha": "5c1c9d6ab906e6964f62aceafaa1bbca4ad062ec", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -7,7 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_panic)]\n #![feature(const_transmute)]"}, {"sha": "b164b21913d6e7361a9ff0c356ce178129391e28", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -261,6 +261,10 @@ declare_features! (\n     (accepted, transparent_enums, \"1.42.0\", Some(60405), None),\n     /// Allows using subslice patterns, `[a, .., b]` and `[a, xs @ .., b]`.\n     (accepted, slice_patterns, \"1.42.0\", Some(62254), None),\n+    /// Allows the use of `if` and `match` in constants.\n+    (accepted, const_if_match, \"1.45.0\", Some(49146), None),\n+    /// Allows the use of `loop` and `while` in constants.\n+    (accepted, const_loop, \"1.45.0\", Some(52000), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "8660d6a8d64105aacffc69392eb6b579c213e611", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -518,9 +518,6 @@ declare_features! (\n     /// Allows using the `#[register_tool]` attribute.\n     (active, register_tool, \"1.41.0\", Some(66079), None),\n \n-    /// Allows the use of `if` and `match` in constants.\n-    (active, const_if_match, \"1.41.0\", Some(49146), None),\n-\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n \n@@ -530,9 +527,6 @@ declare_features! (\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n \n-    /// Allows the use of `loop` and `while` in constants.\n-    (active, const_loop, \"1.41.0\", Some(52000), None),\n-\n     /// Allows bindings in the subpattern of a binding pattern.\n     /// For example, you can write `x @ Some(y)`.\n     (active, bindings_after_at, \"1.41.0\", Some(65490), None),"}, {"sha": "20ac2a04b474fa7f690e831c9db3a85aaadb4e29", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -3,7 +3,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]"}, {"sha": "6fef49668da5fc38d7558dfccfebf0b72dee8d79", "filename": "src/librustc_index/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_index%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_index%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n #![feature(allow_internal_unstable)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(extend_one)]"}, {"sha": "27e086f1d5002f67521920f3552e5a0fcec040f0", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -17,7 +17,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(never_type)]"}, {"sha": "676346fbebdd19bad462e63605d8b089d3c68208", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -27,7 +27,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_transmute)]"}, {"sha": "0ed0d9050078c04e34e61a6139e948f71833d343", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,8 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/index.html\n \n-// ignore-tidy-filelength\n-\n use crate::mir::interpret::{GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n@@ -148,14 +146,6 @@ pub struct Body<'tcx> {\n     /// Debug information pertaining to user variables, including captures.\n     pub var_debug_info: Vec<VarDebugInfo<'tcx>>,\n \n-    /// Mark this MIR of a const context other than const functions as having converted a `&&` or\n-    /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n-    /// this conversion from happening and use short circuiting, we will cause the following code\n-    /// to change the value of `x`: `let mut x = 42; false && { x = 55; true };`\n-    ///\n-    /// List of places where control flow was destroyed. Used for error reporting.\n-    pub control_flow_destroyed: Vec<(Span, String)>,\n-\n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n \n@@ -185,7 +175,6 @@ impl<'tcx> Body<'tcx> {\n         arg_count: usize,\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n         span: Span,\n-        control_flow_destroyed: Vec<(Span, String)>,\n         generator_kind: Option<GeneratorKind>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n@@ -212,7 +201,6 @@ impl<'tcx> Body<'tcx> {\n             span,\n             required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n-            control_flow_destroyed,\n             predecessor_cache: PredecessorCache::new(),\n         }\n     }\n@@ -236,7 +224,6 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             span: DUMMY_SP,\n             required_consts: Vec::new(),\n-            control_flow_destroyed: Vec::new(),\n             generator_kind: None,\n             var_debug_info: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,"}, {"sha": "cb6893166fd79a9094b208d7f39e2ddfc04a852a", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -10,8 +10,8 @@ Rust MIR: a lowered representation of Rust.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n+#![cfg_attr(bootstrap, feature(const_loop))]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "5671b5b4f04c1d37fbc62d50bc917293a6b7ac1b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -251,7 +251,6 @@ fn new_body<'tcx>(\n         arg_count,\n         vec![],\n         span,\n-        vec![],\n         None,\n     )\n }"}, {"sha": "ea025f208e49d733a25a3be51bf856cdcfb0a101", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -142,19 +142,6 @@ impl NonConstOp for HeapAllocation {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct IfOrMatch;\n-impl NonConstOp for IfOrMatch {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_if_match)\n-    }\n-\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        // This should be caught by the HIR const-checker.\n-        ccx.tcx.sess.delay_span_bug(span, \"complex control flow is forbidden in a const context\");\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct InlineAsm;\n impl NonConstOp for InlineAsm {}\n@@ -177,19 +164,6 @@ impl NonConstOp for LiveDrop {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Loop;\n-impl NonConstOp for Loop {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_loop)\n-    }\n-\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        // This should be caught by the HIR const-checker.\n-        ccx.tcx.sess.delay_span_bug(span, \"complex control flow is forbidden in a const context\");\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {"}, {"sha": "ca1f0aecd048a9d4adac6c72b59a2dc46bdafd41", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -207,14 +207,6 @@ impl Validator<'mir, 'tcx> {\n             }\n         }\n \n-        check_short_circuiting_in_const_local(self.ccx);\n-\n-        if body.is_cfg_cyclic() {\n-            // We can't provide a good span for the error here, but this should be caught by the\n-            // HIR const-checker anyways.\n-            self.check_op_spanned(ops::Loop, body.span);\n-        }\n-\n         self.visit_body(&body);\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n@@ -483,21 +475,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 self.super_statement(statement, location);\n             }\n \n-            StatementKind::FakeRead(\n-                FakeReadCause::ForMatchedPlace\n-                | FakeReadCause::ForMatchGuard\n-                | FakeReadCause::ForGuardBinding,\n-                _,\n-            ) => {\n-                self.super_statement(statement, location);\n-                self.check_op(ops::IfOrMatch);\n-            }\n             StatementKind::LlvmInlineAsm { .. } => {\n                 self.super_statement(statement, location);\n                 self.check_op(ops::InlineAsm);\n             }\n \n-            StatementKind::FakeRead(FakeReadCause::ForLet | FakeReadCause::ForIndex, _)\n+            StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag { .. }\n@@ -626,44 +609,6 @@ fn error_min_const_fn_violation(tcx: TyCtxt<'_>, span: Span, msg: Cow<'_, str>)\n         .emit();\n }\n \n-fn check_short_circuiting_in_const_local(ccx: &ConstCx<'_, 'tcx>) {\n-    let body = ccx.body;\n-\n-    if body.control_flow_destroyed.is_empty() {\n-        return;\n-    }\n-\n-    let mut locals = body.vars_iter();\n-    if let Some(local) = locals.next() {\n-        let span = body.local_decls[local].source_info.span;\n-        let mut error = ccx.tcx.sess.struct_span_err(\n-            span,\n-            &format!(\n-                \"new features like let bindings are not permitted in {}s \\\n-                which also use short circuiting operators\",\n-                ccx.const_kind(),\n-            ),\n-        );\n-        for (span, kind) in body.control_flow_destroyed.iter() {\n-            error.span_note(\n-                *span,\n-                &format!(\n-                    \"use of {} here does not actually short circuit due to \\\n-                     the const evaluator presently not being able to do control flow. \\\n-                     See issue #49146 <https://github.com/rust-lang/rust/issues/49146> \\\n-                     for more information.\",\n-                    kind\n-                ),\n-            );\n-        }\n-        for local in locals {\n-            let span = body.local_decls[local].source_info.span;\n-            error.span_note(span, \"more locals are defined here\");\n-        }\n-        error.emit();\n-    }\n-}\n-\n fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId) {\n     let ty = body.return_ty();\n     tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "2c1565b54261c264adf0efcf221d6b29ce90bbdd", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -134,7 +134,6 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             body.arg_count,\n             Default::default(),\n             tcx.def_span(source.def_id()),\n-            Default::default(),\n             body.generator_kind,\n         );\n "}, {"sha": "bd7ebaa01f81b236593e9dd9afcf27913cfef034", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1142,7 +1142,6 @@ pub fn promote_candidates<'tcx>(\n             0,\n             vec![],\n             body.span,\n-            vec![],\n             body.generator_kind,\n         );\n         promoted.ignore_interior_mut_in_const_validation = true;"}, {"sha": "5a3663384fb872f3424c7f146998a82d66aadedc", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -239,12 +239,6 @@ fn check_statement(\n             check_rvalue(tcx, body, def_id, rval, span)\n         }\n \n-        StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _)\n-            if !feature_allowed(tcx, def_id, sym::const_if_match) =>\n-        {\n-            Err((span, \"loops and conditional expressions are not stable in const fn\".into()))\n-        }\n-\n         StatementKind::FakeRead(_, place) => check_place(tcx, **place, span, def_id, body),\n \n         // just an assignment\n@@ -355,10 +349,6 @@ fn check_terminator(\n             check_operand(tcx, value, span, def_id, body)\n         }\n \n-        TerminatorKind::SwitchInt { .. } if !feature_allowed(tcx, def_id, sym::const_if_match) => {\n-            Err((span, \"loops and conditional expressions are not stable in const fn\".into()))\n-        }\n-\n         TerminatorKind::SwitchInt { discr, switch_ty: _, values: _, targets: _ } => {\n             check_operand(tcx, discr, span, def_id, body)\n         }"}, {"sha": "e69f6b30abd5cb89c27c87597a1640bb98484300", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -778,7 +778,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.arg_count,\n             self.var_debug_info,\n             self.fn_span,\n-            self.hir.control_flow_destroyed(),\n             self.generator_kind,\n         )\n     }"}, {"sha": "d36990684e03b46ae2c0a1907322609c32e7fce1", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -255,20 +255,6 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             } else {\n                 // FIXME overflow\n                 match (op.node, cx.constness) {\n-                    // Destroy control flow if `#![feature(const_if_match)]` is not enabled.\n-                    (hir::BinOpKind::And, hir::Constness::Const)\n-                        if !cx.tcx.features().const_if_match =>\n-                    {\n-                        cx.control_flow_destroyed.push((op.span, \"`&&` operator\".into()));\n-                        ExprKind::Binary { op: BinOp::BitAnd, lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n-                    }\n-                    (hir::BinOpKind::Or, hir::Constness::Const)\n-                        if !cx.tcx.features().const_if_match =>\n-                    {\n-                        cx.control_flow_destroyed.push((op.span, \"`||` operator\".into()));\n-                        ExprKind::Binary { op: BinOp::BitOr, lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n-                    }\n-\n                     (hir::BinOpKind::And, _) => ExprKind::LogicalOp {\n                         op: LogicalOp::And,\n                         lhs: lhs.to_ref(),"}, {"sha": "d8b3ac79e6b9c81c32db548e40ad53197898ca80", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -47,9 +47,6 @@ crate struct Cx<'a, 'tcx> {\n \n     /// Whether this constant/function needs overflow checks.\n     check_overflow: bool,\n-\n-    /// See field with the same name on `mir::Body`.\n-    control_flow_destroyed: Vec<(Span, String)>,\n }\n \n impl<'a, 'tcx> Cx<'a, 'tcx> {\n@@ -89,13 +86,8 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             body_owner: src_def_id.to_def_id(),\n             body_owner_kind,\n             check_overflow,\n-            control_flow_destroyed: Vec::new(),\n         }\n     }\n-\n-    crate fn control_flow_destroyed(self) -> Vec<(Span, String)> {\n-        self.control_flow_destroyed\n-    }\n }\n \n impl<'a, 'tcx> Cx<'a, 'tcx> {"}, {"sha": "b44d8eee462f09dfd5ba77974b13ec21f6b33f5d", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "738754557d84cfba8aaf5bc6154864e861d70754", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 60, "deletions": 49, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -7,6 +7,7 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n+use rustc_attr as attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -23,15 +24,13 @@ use rustc_span::{sym, Span, Symbol};\n enum NonConstExpr {\n     Loop(hir::LoopSource),\n     Match(hir::MatchSource),\n-    OrPattern,\n }\n \n impl NonConstExpr {\n     fn name(self) -> String {\n         match self {\n             Self::Loop(src) => format!(\"`{}`\", src.name()),\n             Self::Match(src) => format!(\"`{}`\", src.name()),\n-            Self::OrPattern => \"or-pattern\".to_string(),\n         }\n     }\n \n@@ -40,22 +39,18 @@ impl NonConstExpr {\n         use hir::MatchSource::*;\n \n         let gates: &[_] = match self {\n-            Self::Match(Normal)\n-            | Self::Match(IfDesugar { .. })\n-            | Self::Match(IfLetDesugar { .. })\n-            | Self::OrPattern => &[sym::const_if_match],\n-\n-            Self::Loop(Loop) => &[sym::const_loop],\n-\n-            Self::Loop(While)\n-            | Self::Loop(WhileLet)\n-            | Self::Match(WhileDesugar | WhileLetDesugar) => {\n-                &[sym::const_loop, sym::const_if_match]\n+            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n+            // so they are not yet allowed.\n+            // Likewise, `?` desugars to a call to `Try::into_result`.\n+            Self::Loop(ForLoop) | Self::Match(ForLoopDesugar | TryDesugar | AwaitDesugar) => {\n+                return None;\n             }\n \n-            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n-            // so they are not yet allowed with `#![feature(const_loop)]`.\n-            _ => return None,\n+            // All other expressions are allowed.\n+            Self::Loop(Loop | While | WhileLet)\n+            | Self::Match(\n+                WhileDesugar | WhileLetDesugar | Normal | IfDesugar { .. } | IfLetDesugar { .. },\n+            ) => &[],\n         };\n \n         Some(gates)\n@@ -75,35 +70,63 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n struct CheckConstVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     const_kind: Option<hir::ConstContext>,\n+    def_id: Option<LocalDefId>,\n }\n \n impl<'tcx> CheckConstVisitor<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Self {\n-        CheckConstVisitor { tcx, const_kind: None }\n+        CheckConstVisitor { tcx, const_kind: None, def_id: None }\n     }\n \n     /// Emits an error when an unsupported expression is found in a const context.\n     fn const_check_violated(&self, expr: NonConstExpr, span: Span) {\n-        let features = self.tcx.features();\n+        let Self { tcx, def_id, const_kind } = *self;\n+\n+        let features = tcx.features();\n         let required_gates = expr.required_feature_gates();\n+\n+        let is_feature_allowed = |feature_gate| {\n+            // All features require that the corresponding gate be enabled,\n+            // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+            if !tcx.features().enabled(feature_gate) {\n+                return false;\n+            }\n+\n+            // If `def_id` is `None`, we don't need to consider stability attributes.\n+            let def_id = match def_id {\n+                Some(x) => x.to_def_id(),\n+                None => return true,\n+            };\n+\n+            // If this crate is not using stability attributes, or this function is not claiming to be a\n+            // stable `const fn`, that is all that is required.\n+            if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n+                return true;\n+            }\n+\n+            // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n+            // opt-in via `allow_internal_unstable`.\n+            attr::allow_internal_unstable(&tcx.get_attrs(def_id), &tcx.sess.diagnostic())\n+                .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+        };\n+\n         match required_gates {\n             // Don't emit an error if the user has enabled the requisite feature gates.\n-            Some(gates) if gates.iter().all(|&g| features.enabled(g)) => return,\n+            Some(gates) if gates.iter().copied().all(is_feature_allowed) => return,\n \n             // `-Zunleash-the-miri-inside-of-you` only works for expressions that don't have a\n             // corresponding feature gate. This encourages nightly users to use feature gates when\n             // possible.\n-            None if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n-                self.tcx.sess.span_warn(span, \"skipping const checks\");\n+            None if tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n+                tcx.sess.span_warn(span, \"skipping const checks\");\n                 return;\n             }\n \n             _ => {}\n         }\n \n-        let const_kind = self\n-            .const_kind\n-            .expect(\"`const_check_violated` may only be called inside a const context\");\n+        let const_kind =\n+            const_kind.expect(\"`const_check_violated` may only be called inside a const context\");\n \n         let msg = format!(\"{} is not allowed in a `{}`\", expr.name(), const_kind.keyword_name());\n \n@@ -112,21 +135,10 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();\n \n         match missing_gates.as_slice() {\n-            &[] => struct_span_err!(self.tcx.sess, span, E0744, \"{}\", msg).emit(),\n-\n-            // If the user enabled `#![feature(const_loop)]` but not `#![feature(const_if_match)]`,\n-            // explain why their `while` loop is being rejected.\n-            &[gate @ sym::const_if_match] if required_gates.contains(&sym::const_loop) => {\n-                feature_err(&self.tcx.sess.parse_sess, gate, span, &msg)\n-                    .note(\n-                        \"`#![feature(const_loop)]` alone is not sufficient, \\\n-                           since this loop expression contains an implicit conditional\",\n-                    )\n-                    .emit();\n-            }\n+            &[] => struct_span_err!(tcx.sess, span, E0744, \"{}\", msg).emit(),\n \n             &[missing_primary, ref missing_secondary @ ..] => {\n-                let mut err = feature_err(&self.tcx.sess.parse_sess, missing_primary, span, &msg);\n+                let mut err = feature_err(&tcx.sess.parse_sess, missing_primary, span, &msg);\n \n                 // If multiple feature gates would be required to enable this expression, include\n                 // them as help messages. Don't emit a separate error for each missing feature gate.\n@@ -149,10 +161,18 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n     }\n \n     /// Saves the parent `const_kind` before calling `f` and restores it afterwards.\n-    fn recurse_into(&mut self, kind: Option<hir::ConstContext>, f: impl FnOnce(&mut Self)) {\n+    fn recurse_into(\n+        &mut self,\n+        kind: Option<hir::ConstContext>,\n+        def_id: Option<LocalDefId>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        let parent_def_id = self.def_id;\n         let parent_kind = self.const_kind;\n+        self.def_id = def_id;\n         self.const_kind = kind;\n         f(self);\n+        self.def_id = parent_def_id;\n         self.const_kind = parent_kind;\n     }\n }\n@@ -166,22 +186,13 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n-        self.recurse_into(kind, |this| intravisit::walk_anon_const(this, anon));\n+        self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let owner = self.tcx.hir().body_owner_def_id(body.id());\n         let kind = self.tcx.hir().body_const_context(owner);\n-        self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n-    }\n-\n-    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n-        if self.const_kind.is_some() {\n-            if let hir::PatKind::Or { .. } = p.kind {\n-                self.const_check_violated(NonConstExpr::OrPattern, p.span);\n-            }\n-        }\n-        intravisit::walk_pat(self, p)\n+        self.recurse_into(kind, Some(owner), |this| intravisit::walk_body(this, body));\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {"}, {"sha": "74a54176774ca65e29a8d060038a065e857dd727", "filename": "src/librustc_query_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_query_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_query_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,6 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(const_fn)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]"}, {"sha": "6dcb1430cdc17cf5b56017413cfe88d521c7a49d", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -6,7 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(negative_impls)]"}, {"sha": "ec6deb5b0595254f069d9c11441aaf35ad5714ee", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -9,7 +9,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n-#![feature(const_if_match)]\n+#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(nll)]"}, {"sha": "21bd6252219035f947e9a010d60743c8ddc8bcce", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n-    //~^ ERROR `loop` is not allowed in a `const`\n+\n     [(); loop { break }]; //~ ERROR mismatched types\n-    //~^ ERROR `loop` is not allowed in a `const`\n+\n     [(); {while true {break}; 0}];\n-    //~^ ERROR `while` is not allowed in a `const`\n-    //~| WARN denote infinite loops with\n+    //~^ WARN denote infinite loops with\n+\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n     //~| ERROR calls in constants are limited to constant functions"}, {"sha": "d8a9ae6ca20307363f872a753270fe254d8e4fd9", "filename": "src/test/ui/array-slice-vec/subslice-patterns-const-eval-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,7 +2,8 @@\n \n // run-pass\n \n-#![feature(const_fn, const_if_match)]\n+#![feature(const_fn)]\n+\n #[derive(PartialEq, Debug, Clone)]\n struct N(u8);\n "}, {"sha": "9e7c5847b3b2ee846aff7bea81d414cef29f0725", "filename": "src/test/ui/async-await/issue-70594.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,7 +4,6 @@ async fn fun() {\n     [1; ().await];\n     //~^ error: `await` is only allowed inside `async` functions and blocks\n     //~| error: `.await` is not allowed in a `const`\n-    //~| error: `loop` is not allowed in a `const`\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `()` is not a future\n }"}, {"sha": "badb7ae9f6f6529f407e0d857e8c9c587586c7d4", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -12,15 +12,6 @@ error[E0744]: `.await` is not allowed in a `const`\n LL |     [1; ().await];\n    |         ^^^^^^^^\n \n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:9\n-   |\n-LL |     [1; ().await];\n-   |         ^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0744]: `.await` is not allowed in a `const`\n   --> $DIR/issue-70594.rs:4:9\n    |\n@@ -36,7 +27,7 @@ LL |     [1; ().await];\n    = help: the trait `std::future::Future` is not implemented for `()`\n    = note: required by `std::future::Future::poll`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0658, E0728, E0744.\n+Some errors have detailed explanations: E0277, E0728, E0744.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "3e803f3b6d8b2d4901fad28f77964036dfa73d14", "filename": "src/test/ui/borrowck/issue-64453.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,7 +2,8 @@ struct Project;\n struct Value;\n \n static settings_dir: String = format!(\"\");\n-//~^ ERROR `match` is not allowed in a `static`\n+//~^ ERROR calls in statics are limited to constant functions\n+//~| ERROR calls in statics are limited to constant functions\n \n fn from_string(_: String) -> Value {\n     Value\n@@ -11,6 +12,7 @@ fn set_editor(_: Value) {}\n \n fn main() {\n     let settings_data = from_string(settings_dir);\n+    //~^ ERROR cannot move out of static item\n     let args: i32 = 0;\n \n     match args {"}, {"sha": "081ccd37861cb29df50ca16402882a0b3c37b8a8", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,26 @@\n-error[E0658]: `match` is not allowed in a `static`\n+error[E0507]: cannot move out of static item `settings_dir`\n+  --> $DIR/issue-64453.rs:14:37\n+   |\n+LL |     let settings_data = from_string(settings_dir);\n+   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-64453.rs:4:31\n+   |\n+LL | static settings_dir: String = format!(\"\");\n+   |                               ^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0015, E0507.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "f79a0bd35486aa388eb91d188bc60cb23dc405f2", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n-    //~| ERROR: `loop` is not allowed in a `const`\n     //~| ERROR: type annotations needed\n     //~| ERROR mismatched types\n }"}, {"sha": "54825cb746d4298cdeacabcc5ec9de61afca6ee8", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,15 +4,6 @@ error: invalid label name `'static`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^\n \n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-52437.rs:2:13\n-   |\n-LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0282]: type annotations needed\n   --> $DIR/issue-52437.rs:2:30\n    |\n@@ -27,7 +18,7 @@ LL | fn main() {\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[(); _]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0282, E0308, E0658.\n+Some errors have detailed explanations: E0282, E0308.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "14a573ccf5ac635149b5be2842b0b77506e5d62e", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,10 +4,8 @@ fn main() {\n     let _ = [(); {\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 {\n-        //~^ ERROR `while` is not allowed in a `const`\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n-            //~| ERROR `if` is not allowed in a `const`\n         }\n         n\n     }];"}, {"sha": "d01376e595945f8cb0fbb65254dff3687cd12e8b", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,34 +1,9 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/infinite_loop.rs:6:9\n-   |\n-LL | /         while n != 0 {\n-LL | |\n-LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-LL | |\n-LL | |\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/infinite_loop.rs:8:17\n-   |\n-LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:8:17\n+  --> $DIR/infinite_loop.rs:7:17\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ea24578c7dd0cfd28f6937987db69918d647e143", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n-    //~^ ERROR `loop` is not allowed in a `const`\n-    //~| ERROR casting pointers to integers in constants is unstable\n+    //~^ ERROR casting pointers to integers in constants is unstable\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "53a87837e16e3881cf80f74e9eb0c4ba5cb3d04d", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-52442.rs:2:14\n-   |\n-LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |              ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-52442.rs:2:13\n    |\n@@ -22,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "ce65407bbab0b5d928795c8b4fdc82297aac8625", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -3,7 +3,6 @@ fn main() {\n         let mut x = &0;\n         let mut n = 0;\n         while n < 5 {\n-        //~^ ERROR `while` is not allowed in a `const`\n             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n             x = &0; // Materialize a new AllocId\n         }"}, {"sha": "8536ff02c6dae89b96403ba90c8fd15b61f58a3b", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,24 +1,9 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/issue-52475.rs:5:9\n-   |\n-LL | /         while n < 5 {\n-LL | |\n-LL | |             n = (n + 1) % 5;\n-LL | |             x = &0; // Materialize a new AllocId\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:7:17\n+  --> $DIR/issue-52475.rs:6:17\n    |\n LL |             n = (n + 1) % 5;\n    |                 ^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "19abd91252db9725abc28b2a6e80bd58383b9625", "filename": "src/test/ui/consts/const-eval/issue-62272.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,11 +0,0 @@\n-// `loop`s unconditionally-broken-from used to be allowed in constants, but are now forbidden by\n-// the HIR const-checker.\n-//\n-// See https://github.com/rust-lang/rust/pull/66170 and\n-// https://github.com/rust-lang/rust/issues/62272.\n-\n-const FOO: () = loop { break; }; //~ ERROR `loop` is not allowed in a `const`\n-\n-fn main() {\n-    [FOO; { let x; loop { x = 5; break; } x }]; //~ ERROR `loop` is not allowed in a `const`\n-}"}, {"sha": "380f68bee09ce939876b463717e89e69c4e22210", "filename": "src/test/ui/consts/const-eval/issue-62272.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-62272.rs:7:17\n-   |\n-LL | const FOO: () = loop { break; };\n-   |                 ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-62272.rs:10:20\n-   |\n-LL |     [FOO; { let x; loop { x = 5; break; } x }];\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3c81afa67a69fc046938b16d013c4c3f3b23511f", "filename": "src/test/ui/consts/const-eval/issue-70723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_loop)]\n-\n static _X: () = loop {}; //~ ERROR could not evaluate static initializer\n \n fn main() {}"}, {"sha": "09fb3e060dc4c367dae3e9153225d393378a9225", "filename": "src/test/ui/consts/const-eval/issue-70723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-70723.rs:3:17\n+  --> $DIR/issue-70723.rs:1:17\n    |\n LL | static _X: () = loop {};\n    |                 ^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)"}, {"sha": "66b7d05808084785300aa2efa34a49718eb6baff", "filename": "src/test/ui/consts/const-eval/livedrop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,6 +1,3 @@\n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n-\n const _: Option<Vec<i32>> = {\n     let mut never_returned = Some(Vec::new());\n     let mut always_returned = None; //~ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "1e8b4230c6f111cea74e8ee43023bbfd4a2ec91a", "filename": "src/test/ui/consts/const-eval/livedrop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/livedrop.rs:6:9\n+  --> $DIR/livedrop.rs:3:9\n    |\n LL |     let mut always_returned = None;\n    |         ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors"}, {"sha": "f6b5ad005a8841430515c5129a46883de2f094e1", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n-            //~| ERROR `match` is not allowed in a `const`\n             //~| ERROR evaluation of constant value failed\n             0 => 42,\n             n => n,"}, {"sha": "48dbe661492d408f87dd327aa37acad435e92df4", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,18 +1,3 @@\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/match-test-ptr-null.rs:6:9\n-   |\n-LL | /         match &1 as *const i32 as usize {\n-LL | |\n-LL | |\n-LL | |\n-LL | |             0 => 42,\n-LL | |             n => n,\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n@@ -28,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "6864f7247ad5f4e35840b29b37fd0290b2572255", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,12 +1,11 @@\n+// run-pass\n+\n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later.\n //\n // See https://github.com/rust-lang/rust/issues/51350 for more information.\n-//\n-// It is now forbidden by the HIR const-checker.\n-//\n-// See https://github.com/rust-lang/rust/pull/66170.\n \n-const CRASH: () = 'a: while break 'a {}; //~ ERROR `while` is not allowed in a `const`\n+#[allow(unreachable_code)]\n+const _: () = 'a: while break 'a {};\n \n fn main() {}"}, {"sha": "ac845df227c4230a34c2a95ce1b9bd333494d97c", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,13 +0,0 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/const-labeled-break.rs:10:19\n-   |\n-LL | const CRASH: () = 'a: while break 'a {};\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "90680c0194c554735b1cfd9043d5c7c7e020e96a", "filename": "src/test/ui/consts/const-match-pattern-arm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,12 +1,12 @@\n-#![allow(warnings)]\n+// check-pass\n \n-const x: bool = match Some(true) { //~ ERROR `match` is not allowed in a `const`\n+const _: bool = match Some(true) {\n     Some(value) => true,\n     _ => false\n };\n \n-const y: bool = {\n-    match Some(true) { //~ ERROR `match` is not allowed in a `const`\n+const _: bool = {\n+    match Some(true) {\n         Some(value) => true,\n         _ => false\n     }"}, {"sha": "412e1609ccfab8c138a4f2ebd3455b8534122783", "filename": "src/test/ui/consts/const-match-pattern-arm.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,28 +0,0 @@\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/const-match-pattern-arm.rs:3:17\n-   |\n-LL |   const x: bool = match Some(true) {\n-   |  _________________^\n-LL | |     Some(value) => true,\n-LL | |     _ => false\n-LL | | };\n-   | |_^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/const-match-pattern-arm.rs:9:5\n-   |\n-LL | /     match Some(true) {\n-LL | |         Some(value) => true,\n-LL | |         _ => false\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a38731ceb8a860995727c9ef926454e75410b905", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_if_match)]\n #![warn(indirect_structural_match)]\n \n struct CustomEq;"}, {"sha": "a1f9838ca088573ba7c595c2e7ac0512cdfacbfc", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(const_if_match)]\n #![warn(indirect_structural_match)]\n //~^ NOTE lint level is defined here\n "}, {"sha": "0be1cca806ed1bedcbbe6794a7c4e42796063501", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,11 +1,11 @@\n warning: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/custom-eq-branch-warn.rs:33:9\n+  --> $DIR/custom-eq-branch-warn.rs:32:9\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/custom-eq-branch-warn.rs:4:9\n+  --> $DIR/custom-eq-branch-warn.rs:3:9\n    |\n LL | #![warn(indirect_structural_match)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c7f02c615a02a75bff67836a40bed0a5e0309fff", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_if_match)]\n #![warn(indirect_structural_match)]\n \n struct NoEq;"}, {"sha": "ee78c6f5c3e9f9206b603857e0372ed5d104027d", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,11 +1,11 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/no-eq-branch-fail.rs:22:9\n+  --> $DIR/no-eq-branch-fail.rs:21:9\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n \n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/no-eq-branch-fail.rs:22:9\n+  --> $DIR/no-eq-branch-fail.rs:21:9\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^"}, {"sha": "efb134d2eef1ad5049c235ca0ff318bd26e65eb5", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,6 +2,5 @@ fn main() {}\n \n const fn slice(&[a, b]: &[i32]) -> i32 {\n     //~^ ERROR refutable pattern in function argument\n-    //~| ERROR loops and conditional expressions are not stable in const fn\n     a + b\n }"}, {"sha": "d7e8c048f7dcce7ae8ad7c4b4a7f10f1707ee29e", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -6,16 +6,6 @@ LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n    |\n    = note: the matched value is of type `&[i32]`\n \n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/const_let_refutable.rs:3:17\n-   |\n-LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n-   |                 ^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0005, E0723.\n-For more information about an error, try `rustc --explain E0005`.\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "629d1f02a30f3d88f4db73470e3b0289a80fe3a4", "filename": "src/test/ui/consts/const_limit/const_eval_limit_not_reached.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_eval_limit)]\n-#![feature(const_loop, const_if_match)]\n \n // This needs to be higher than the number of loop iterations since each pass through the loop may\n // hit more than one terminator."}, {"sha": "069dac00c9ace7c1b605e0433037e8e4fc41adeb", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_eval_limit)]\n-#![feature(const_loop, const_if_match)]\n-\n-#![const_eval_limit=\"500\"]\n+#![const_eval_limit = \"500\"]\n \n const X: usize = {\n     let mut x = 0;"}, {"sha": "8785c9e54b9bfef14162fd8f2693a08c3f28dc0e", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_eval_limit_reached.rs:8:5\n+  --> $DIR/const_eval_limit_reached.rs:6:5\n    |\n LL |  / const X: usize = {\n LL |  |     let mut x = 0;"}, {"sha": "6403fbb17dd58ded8f5781992effcee065ba970a", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,13 @@\n+// check-pass\n+\n const _: bool = false && false;\n const _: bool = true && false;\n const _: bool = {\n     let mut x = true && false;\n-    //~^ ERROR new features like let bindings are not permitted\n     x\n };\n const _: bool = {\n     let x = true && false;\n-    //~^ ERROR new features like let bindings are not permitted\n     x\n };\n "}, {"sha": "b020382af07c87621af056c72792b2cdc4d4915e", "filename": "src/test/ui/consts/const_short_circuit.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,26 +0,0 @@\n-error: new features like let bindings are not permitted in constants which also use short circuiting operators\n-  --> $DIR/const_short_circuit.rs:4:9\n-   |\n-LL |     let mut x = true && false;\n-   |         ^^^^^\n-   |\n-note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information.\n-  --> $DIR/const_short_circuit.rs:4:22\n-   |\n-LL |     let mut x = true && false;\n-   |                      ^^\n-\n-error: new features like let bindings are not permitted in constants which also use short circuiting operators\n-  --> $DIR/const_short_circuit.rs:9:9\n-   |\n-LL |     let x = true && false;\n-   |         ^\n-   |\n-note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information.\n-  --> $DIR/const_short_circuit.rs:9:18\n-   |\n-LL |     let x = true && false;\n-   |                  ^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "7dd60cfb5458fd6973bbda97ea0b01569638fc0b", "filename": "src/test/ui/consts/control-flow/assert.both.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,13 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/assert.rs:12:15\n-   |\n-LL | const _: () = assert!(false);\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:12:15\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "466fb7c3ec5b1a1c28af9bf7ebb6a94bb83954a2", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,23 +0,0 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:8:15\n-   |\n-LL | const _: () = assert!(true);\n-   |               ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:12:15\n-   |\n-LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "03662a352090927a1e25d7504c08c43e7bcfd029", "filename": "src/test/ui/consts/control-flow/assert.panic.stderr", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,23 +1,13 @@\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/assert.rs:8:15\n-   |\n-LL | const _: () = assert!(true);\n-   |               ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/assert.rs:12:15\n+error: any use of this value will cause an error\n+  --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^\n+   | --------------^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "30cd31ee8a734bcb9eea457e8f8d6c7be06d61d7", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,17 +1,14 @@\n-// Test that `assert` works only when both `const_if_match` and `const_panic` are enabled.\n+// Test that `assert` works when `const_panic` is enabled.\n \n-// revisions: stock if_match panic both\n+// revisions: stock panic\n \n-#![cfg_attr(any(both, if_match), feature(const_if_match))]\n-#![cfg_attr(any(both, panic), feature(const_panic))]\n+#![cfg_attr(panic, feature(const_panic))]\n \n const _: () = assert!(true);\n-//[stock,panic]~^ ERROR `if` is not allowed in a `const`\n-//[if_match]~^^ ERROR panicking in constants is unstable\n+//[stock]~^ ERROR panicking in constants is unstable\n \n const _: () = assert!(false);\n-//[stock,panic]~^ ERROR `if` is not allowed in a `const`\n-//[if_match]~^^ ERROR panicking in constants is unstable\n-//[both]~^^^ ERROR any use of this value will cause an error\n+//[stock]~^ ERROR panicking in constants is unstable\n+//[panic]~^^ ERROR any use of this value will cause an error\n \n fn main() {}"}, {"sha": "fd344533ce10fe4f19677982f9d81fd0de0897ba", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,21 +1,21 @@\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/assert.rs:8:15\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/assert.rs:7:15\n    |\n LL | const _: () = assert!(true);\n    |               ^^^^^^^^^^^^^\n    |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/assert.rs:12:15\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "6dd6192941d384dba861e54fd0c76f9a22410a9e", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -3,8 +3,6 @@\n // run-pass\n \n #![feature(const_panic)]\n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_fn)]\n \n const X: u32 = 4;"}, {"sha": "0b0b2443a4a464a3d2c43b64de9b70377b7d3461", "filename": "src/test/ui/consts/control-flow/drop-fail.precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,11 +1,11 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:10:9\n+  --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n    |         ^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:41:9\n+  --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n    |         ^^^^^^^ constants cannot evaluate destructors"}, {"sha": "efa5a11c941e9158f20242450fc66386a4dd31e4", "filename": "src/test/ui/consts/control-flow/drop-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // revisions: stock precise\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n // `x` is *not* always moved into the final value and may be dropped inside the initializer."}, {"sha": "72ca4fa08bc4ee8f0e5d097c655865f961a6c1ad", "filename": "src/test/ui/consts/control-flow/drop-fail.stock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:10:9\n+  --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n    |         ^ constants cannot evaluate destructors\n@@ -8,7 +8,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:23:9\n+  --> $DIR/drop-fail.rs:21:9\n    |\n LL |     let vec_tuple = (Vec::new(),);\n    |         ^^^^^^^^^ constants cannot evaluate destructors\n@@ -17,7 +17,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:31:9\n+  --> $DIR/drop-fail.rs:29:9\n    |\n LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n    |         ^ constants cannot evaluate destructors\n@@ -26,7 +26,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:41:9\n+  --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n    |         ^^^^^^^ constants cannot evaluate destructors"}, {"sha": "95f954a59a8ddf3a2303d04e0a016deb2347725e", "filename": "src/test/ui/consts/control-flow/drop-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // revisions: stock precise\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n // `x` is always moved into the final value and is not dropped inside the initializer."}, {"sha": "4ecc5ef78dd5ccbd8d2aac5c492e01e7f457b613", "filename": "src/test/ui/consts/control-flow/drop-precise.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // gate-test-const_precise_live_drops\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_precise_live_drops)]\n \n const _: Vec<i32> = {"}, {"sha": "4320133dfdbcc8a4709dcc8de70f6071fd32054d", "filename": "src/test/ui/consts/control-flow/exhaustive-c-like-enum-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(const_if_match)]\n-\n enum E {\n     A,\n     B,"}, {"sha": "21e3f2af15ad6280ce4ca9b38300f7a023126f5f", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.if_match.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,14 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate-const-if-match.rs:108:1\n-   |\n-LL | / fn main() {\n-LL | |     let _ = [0; {\n-LL | |         let x = if false { 0 } else { 1 };\n-LL | |\n-...  |\n-LL | |     }];\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "cb66bc75309b63447612744c4a239e29380f01e0", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.rs", "status": "modified", "additions": 37, "deletions": 58, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,117 +1,96 @@\n-// Ensure that `if`, `if let` and `match` are only allowed in the various const contexts when\n-// `#![feature(const_if_match)]` is enabled. When the feature gate is removed, the `#[rustc_error]`\n-// on `main` should be removed and this test converted to `check-pass`.\n+// check-pass\n \n-// revisions: stock if_match\n+const _: i32 = if true { 5 } else { 6 };\n \n-#![feature(rustc_attrs)]\n-#![cfg_attr(if_match, feature(const_if_match))]\n+const _: i32 = if let Some(true) = Some(false) { 0 } else { 1 };\n \n-const _: i32 = if true { //[stock]~ ERROR `if` is not allowed in a `const`\n-    5\n-} else {\n-    6\n-};\n-\n-const _: i32 = if let Some(true) = Some(false) { //[stock]~ ERROR `if` is not allowed in a `const`\n-    0\n-} else {\n-    1\n-};\n-\n-const _: i32 = match 1 { //[stock]~ ERROR `match` is not allowed in a `const`\n+const _: i32 = match 1 {\n     2 => 3,\n     4 => 5,\n     _ => 0,\n };\n \n static FOO: i32 = {\n     let x = if true { 0 } else { 1 };\n-    //[stock]~^ ERROR `if` is not allowed in a `static`\n-    let x = match x { 0 => 1, _ => 0 };\n-    //[stock]~^ ERROR `match` is not allowed in a `static`\n+    let x = match x {\n+        0 => 1,\n+        _ => 0,\n+    };\n     if let Some(x) = Some(x) { x } else { 1 }\n-    //[stock]~^ ERROR `if` is not allowed in a `static`\n };\n \n static mut BAR: i32 = {\n     let x = if true { 0 } else { 1 };\n-    //[stock]~^ ERROR `if` is not allowed in a `static mut`\n-    let x = match x { 0 => 1, _ => 0 };\n-    //[stock]~^ ERROR `match` is not allowed in a `static mut`\n+    let x = match x {\n+        0 => 1,\n+        _ => 0,\n+    };\n     if let Some(x) = Some(x) { x } else { 1 }\n-    //[stock]~^ ERROR `if` is not allowed in a `static mut`\n };\n \n const fn if_() -> i32 {\n-    if true { 5 } else { 6 } //[stock]~ ERROR `if` is not allowed in a `const fn`\n+    if true { 5 } else { 6 }\n }\n \n const fn if_let(a: Option<bool>) -> i32 {\n-    if let Some(true) = a { //[stock]~ ERROR `if` is not allowed in a `const fn`\n-        0\n-    } else {\n-        1\n-    }\n+    if let Some(true) = a { 0 } else { 1 }\n }\n \n const fn match_(i: i32) -> i32 {\n-    match i { //[stock]~ ERROR `match` is not allowed in a `const fn`\n+    match i {\n         i if i > 10 => i,\n         1 => 2,\n-        _ => 0\n+        _ => 0,\n     }\n }\n \n pub trait Foo {\n     const IF: i32 = if true { 5 } else { 6 };\n-    //[stock]~^ ERROR `if` is not allowed in a `const`\n-\n     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n-    //[stock]~^ ERROR `if` is not allowed in a `const`\n-\n-    const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n-    //[stock]~^ ERROR `match` is not allowed in a `const`\n+    const MATCH: i32 = match 0 {\n+        1 => 2,\n+        _ => 0,\n+    };\n }\n \n impl Foo for () {\n     const IF: i32 = if true { 5 } else { 6 };\n-    //[stock]~^ ERROR `if` is not allowed in a `const`\n-\n     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n-    //[stock]~^ ERROR `if` is not allowed in a `const`\n-\n-    const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n-    //[stock]~^ ERROR `match` is not allowed in a `const`\n+    const MATCH: i32 = match 0 {\n+        1 => 2,\n+        _ => 0,\n+    };\n }\n \n fn non_const_outside() {\n     const fn const_inside(y: bool) -> i32 {\n         let x = if y { 0 } else { 1 };\n-        //[stock]~^ ERROR `if` is not allowed in a `const fn`\n-        let x = match x { 0 => 1, _ => 0 };\n-        //[stock]~^ ERROR `match` is not allowed in a `const fn`\n+        let x = match x {\n+            0 => 1,\n+            _ => 0,\n+        };\n         if let Some(x) = Some(x) { x } else { 1 }\n-        //[stock]~^ ERROR `if` is not allowed in a `const fn`\n     }\n }\n \n const fn const_outside() {\n     fn non_const_inside(y: bool) -> i32 {\n         let x = if y { 0 } else { 1 };\n-        let x = match x { 0 => 1, _ => 0 };\n+        let x = match x {\n+            0 => 1,\n+            _ => 0,\n+        };\n         if let Some(x) = Some(x) { x } else { 1 }\n     }\n }\n \n-#[rustc_error]\n-fn main() { //[if_match]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n     let _ = [0; {\n         let x = if false { 0 } else { 1 };\n-        //[stock]~^ ERROR `if` is not allowed in a `const`\n-        let x = match x { 0 => 1, _ => 0 };\n-        //[stock]~^ ERROR `match` is not allowed in a `const`\n+        let x = match x {\n+            0 => 1,\n+            _ => 0,\n+        };\n         if let Some(x) = Some(x) { x } else { 1 }\n-        //[stock]~^ ERROR `if` is not allowed in a `const`\n     }];\n }"}, {"sha": "b27971dccac6c3766f61725851848fb8a201195e", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.stock.stderr", "status": "removed", "additions": 0, "deletions": 242, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,242 +0,0 @@\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:10:16\n-   |\n-LL |   const _: i32 = if true {\n-   |  ________________^\n-LL | |     5\n-LL | | } else {\n-LL | |     6\n-LL | | };\n-   | |_^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:16:16\n-   |\n-LL |   const _: i32 = if let Some(true) = Some(false) {\n-   |  ________________^\n-LL | |     0\n-LL | | } else {\n-LL | |     1\n-LL | | };\n-   | |_^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:22:16\n-   |\n-LL |   const _: i32 = match 1 {\n-   |  ________________^\n-LL | |     2 => 3,\n-LL | |     4 => 5,\n-LL | |     _ => 0,\n-LL | | };\n-   | |_^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:29:13\n-   |\n-LL |     let x = if true { 0 } else { 1 };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:31:13\n-   |\n-LL |     let x = match x { 0 => 1, _ => 0 };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `static`\n-  --> $DIR/feature-gate-const-if-match.rs:33:5\n-   |\n-LL |     if let Some(x) = Some(x) { x } else { 1 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:38:13\n-   |\n-LL |     let x = if true { 0 } else { 1 };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:40:13\n-   |\n-LL |     let x = match x { 0 => 1, _ => 0 };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-if-match.rs:42:5\n-   |\n-LL |     if let Some(x) = Some(x) { x } else { 1 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:47:5\n-   |\n-LL |     if true { 5 } else { 6 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:51:5\n-   |\n-LL | /     if let Some(true) = a {\n-LL | |         0\n-LL | |     } else {\n-LL | |         1\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:59:5\n-   |\n-LL | /     match i {\n-LL | |         i if i > 10 => i,\n-LL | |         1 => 2,\n-LL | |         _ => 0\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:90:17\n-   |\n-LL |         let x = if y { 0 } else { 1 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:92:17\n-   |\n-LL |         let x = match x { 0 => 1, _ => 0 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-if-match.rs:94:9\n-   |\n-LL |         if let Some(x) = Some(x) { x } else { 1 }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:110:17\n-   |\n-LL |         let x = if false { 0 } else { 1 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:112:17\n-   |\n-LL |         let x = match x { 0 => 1, _ => 0 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:114:9\n-   |\n-LL |         if let Some(x) = Some(x) { x } else { 1 }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:67:21\n-   |\n-LL |     const IF: i32 = if true { 5 } else { 6 };\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:70:25\n-   |\n-LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:73:24\n-   |\n-LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:78:21\n-   |\n-LL |     const IF: i32 = if true { 5 } else { 6 };\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:81:25\n-   |\n-LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/feature-gate-const-if-match.rs:84:24\n-   |\n-LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error: aborting due to 24 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a6d44237b0d98436e580426b0922470e961eb42e", "filename": "src/test/ui/consts/control-flow/interior-mutability.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,9 +1,6 @@\n // Ensure that *any* assignment to the return place of a value with interior mutability\n // disqualifies it from promotion.\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n-\n use std::cell::Cell;\n \n const X: Option<Cell<i32>> = {\n@@ -39,7 +36,6 @@ const Z: Option<Cell<i32>> = {\n     z\n };\n \n-\n fn main() {\n     let x: &'static _ = &X; //~ ERROR temporary value dropped while borrowed\n     let y: &'static _ = &Y; //~ ERROR temporary value dropped while borrowed"}, {"sha": "4f9c7d34c35f4fc5db581d76698446d4bdc99a28", "filename": "src/test/ui/consts/control-flow/interior-mutability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:44:26\n+  --> $DIR/interior-mutability.rs:40:26\n    |\n LL |     let x: &'static _ = &X;\n    |            ----------    ^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:45:26\n+  --> $DIR/interior-mutability.rs:41:26\n    |\n LL |     let y: &'static _ = &Y;\n    |            ----------    ^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:46:26\n+  --> $DIR/interior-mutability.rs:42:26\n    |\n LL |     let z: &'static _ = &Z;\n    |            ----------    ^ creates a temporary which is freed while still in use"}, {"sha": "edf62f23266193b667da1d761005cd65908943de", "filename": "src/test/ui/consts/control-flow/issue-46843.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,16 +1,14 @@\n-// revisions: stock if_match\n-\n-#![cfg_attr(if_match, feature(const_if_match))]\n-\n-enum Thing { This, That }\n+enum Thing {\n+    This,\n+    That,\n+}\n \n fn non_const() -> Thing {\n     Thing::This\n }\n \n pub const Q: i32 = match non_const() {\n-    //[stock]~^ ERROR `match` is not allowed in a `const`\n-    //[if_match]~^^ ERROR calls in constants are limited to constant functions\n+    //~^ ERROR calls in constants are limited to constant functions\n     Thing::This => 1,\n     Thing::That => 0\n };"}, {"sha": "ea9ea25f9e12d34d6bf1e0af16d6b7dda88b9fcf", "filename": "src/test/ui/consts/control-flow/issue-46843.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-46843.rs:11:26\n+  --> $DIR/issue-46843.rs:10:26\n    |\n LL | pub const Q: i32 = match non_const() {\n    |                          ^^^^^^^^^^^", "previous_filename": "src/test/ui/consts/control-flow/issue-46843.if_match.stderr"}, {"sha": "e4650da2075bdedcd56b287d621a77123fa67c8a", "filename": "src/test/ui/consts/control-flow/issue-46843.stock.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,18 +0,0 @@\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/issue-46843.rs:11:20\n-   |\n-LL |   pub const Q: i32 = match non_const() {\n-   |  ____________________^\n-LL | |\n-LL | |\n-LL | |     Thing::This => 1,\n-LL | |     Thing::That => 0\n-LL | | };\n-   | |_^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "beb9a44fca52d28b49094cc850e5ce57dc1f67ff", "filename": "src/test/ui/consts/control-flow/issue-50577.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,6 @@\n-// revisions: stock if_match\n-\n-#![cfg_attr(if_match, feature(const_if_match))]\n-\n fn main() {\n     enum Foo {\n-        Drop = assert_eq!(1, 1)\n-        //[stock,if_match]~^ ERROR `if` may be missing an `else` clause\n-        //[stock]~^^ ERROR `match` is not allowed in a `const`\n-        //[stock]~| ERROR `match` is not allowed in a `const`\n-        //[stock]~| ERROR `if` is not allowed in a `const`\n+        Drop = assert_eq!(1, 1),\n+        //~^ ERROR `if` may be missing an `else` clause\n     }\n }"}, {"sha": "b7b4c3a30d1bf80df11fb746db041b46fb3925f0", "filename": "src/test/ui/consts/control-flow/issue-50577.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,7 @@\n error[E0317]: `if` may be missing an `else` clause\n-  --> $DIR/issue-50577.rs:7:16\n+  --> $DIR/issue-50577.rs:3:16\n    |\n-LL |         Drop = assert_eq!(1, 1)\n+LL |         Drop = assert_eq!(1, 1),\n    |                ^^^^^^^^^^^^^^^^\n    |                |\n    |                expected `()`, found `isize`", "previous_filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr"}, {"sha": "9d0d2831d9af3a996215fb08670000a913c63b5b", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,47 +0,0 @@\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:7:16\n-   |\n-LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:7:16\n-   |\n-LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:7:16\n-   |\n-LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0317]: `if` may be missing an `else` clause\n-  --> $DIR/issue-50577.rs:7:16\n-   |\n-LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected `()`, found `isize`\n-   |                found here\n-   |\n-   = note: `if` expressions without `else` evaluate to `()`\n-   = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0317, E0658.\n-For more information about an error, try `rustc --explain E0317`."}, {"sha": "e8ff3624b7720a38e9188013c2b1faad857b8ea2", "filename": "src/test/ui/consts/control-flow/loop.if_match.stderr", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,151 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:10:15\n-   |\n-LL | const _: () = loop {};\n-   |               ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `static`\n-  --> $DIR/loop.rs:12:19\n-   |\n-LL | static FOO: i32 = loop { break 4; };\n-   |                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:15:5\n-   |\n-LL |     loop {}\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:28:9\n-   |\n-LL |         loop {}\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:40:9\n-   |\n-LL |         while false {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:49:5\n-   |\n-LL | /     while x < 4 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:53:5\n-   |\n-LL | /     while x < 8 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:63:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:67:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:77:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:84:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:96:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:97:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:19:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:23:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to 15 previous errors\n-\n-Some errors have detailed explanations: E0658, E0744.\n-For more information about an error, try `rustc --explain E0658`."}, {"sha": "3d739f4d2b41b0fade374313c71412f2a0ee0f21", "filename": "src/test/ui/consts/control-flow/loop.loop_.stderr", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,96 +0,0 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:40:9\n-   |\n-LL |         while false {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:49:5\n-   |\n-LL | /     while x < 4 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:53:5\n-   |\n-LL | /     while x < 8 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:63:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:67:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:79:9\n-   |\n-LL | /         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:86:9\n-   |\n-LL | /         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:96:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:97:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n-\n-error: aborting due to 9 previous errors\n-\n-Some errors have detailed explanations: E0658, E0744.\n-For more information about an error, try `rustc --explain E0658`."}, {"sha": "2b8561a2644888486e4cf3648bd54b2405e3d3cc", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,31 +1,22 @@\n-// Ensure that loops are forbidden in a const context unless `#![feature(const_loop)]` is enabled.\n-// `while` loops require `#![feature(const_if_match)]` to be enabled as well.\n+const _: () = loop { break (); };\n \n-// gate-test-const_loop\n-// revisions: stock if_match loop_ both\n-\n-#![cfg_attr(any(both, if_match), feature(const_if_match))]\n-#![cfg_attr(any(both, loop_), feature(const_loop))]\n-\n-const _: () = loop {}; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n-\n-static FOO: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `static`\n+static FOO: i32 = loop { break 4; };\n \n const fn foo() {\n-    loop {} //[stock,if_match]~ ERROR `loop` is not allowed in a `const fn`\n+    loop {}\n }\n \n pub trait Foo {\n-    const BAR: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+    const BAR: i32 = loop { break 4; };\n }\n \n impl Foo for () {\n-    const BAR: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+    const BAR: i32 = loop { break 4; };\n }\n \n fn non_const_outside() {\n     const fn const_inside() {\n-        loop {} //[stock,if_match]~ ERROR `loop` is not allowed in a `const fn`\n+        loop {}\n     }\n }\n \n@@ -38,19 +29,18 @@ const fn const_outside() {\n fn main() {\n     let x = [0; {\n         while false {}\n-        //[stock,if_match,loop_]~^ ERROR `while` is not allowed in a `const`\n         4\n     }];\n }\n \n const _: i32 = {\n     let mut x = 0;\n \n-    while x < 4 { //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n+    while x < 4 {\n         x += 1;\n     }\n \n-    while x < 8 { //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n+    while x < 8 {\n         x += 1;\n     }\n \n@@ -60,11 +50,11 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    for i in 0..4 { //[stock,if_match,loop_,both]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n-    for i in 0..4 { //[stock,if_match,loop_,both]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n@@ -74,16 +64,16 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+    loop {\n         x += 1;\n-        if x == 4 { //[stock,loop_]~ ERROR `if` is not allowed in a `const`\n+        if x == 4 {\n             break;\n         }\n     }\n \n-    loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+    loop {\n         x += 1;\n-        if x == 8 { //[stock,loop_]~ ERROR `if` is not allowed in a `const`\n+        if x == 8 {\n             break;\n         }\n     }\n@@ -93,7 +83,7 @@ const _: i32 = {\n \n const _: i32 = {\n     let mut x = 0;\n-    while let None = Some(x) { } //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n-    while let None = Some(x) { } //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n+    while let None = Some(x) { }\n+    while let None = Some(x) { }\n     x\n };"}, {"sha": "7b99fa4fe4609c29f2fd9eb5386fb99287cfaf65", "filename": "src/test/ui/consts/control-flow/loop.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,13 @@\n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:63:5\n+  --> $DIR/loop.rs:53:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:67:5\n+  --> $DIR/loop.rs:57:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;", "previous_filename": "src/test/ui/consts/control-flow/loop.both.stderr"}, {"sha": "987ced9655186c184471be3624d1b697e398ecb1", "filename": "src/test/ui/consts/control-flow/loop.stock.stderr", "status": "removed", "additions": 0, "deletions": 178, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,178 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:10:15\n-   |\n-LL | const _: () = loop {};\n-   |               ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `static`\n-  --> $DIR/loop.rs:12:19\n-   |\n-LL | static FOO: i32 = loop { break 4; };\n-   |                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:15:5\n-   |\n-LL |     loop {}\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:28:9\n-   |\n-LL |         loop {}\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:40:9\n-   |\n-LL |         while false {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:49:5\n-   |\n-LL | /     while x < 4 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:53:5\n-   |\n-LL | /     while x < 8 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:63:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:67:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:77:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:79:9\n-   |\n-LL | /         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:84:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:86:9\n-   |\n-LL | /         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:96:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:97:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:19:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:23:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to 17 previous errors\n-\n-Some errors have detailed explanations: E0658, E0744.\n-For more information about an error, try `rustc --explain E0658`."}, {"sha": "4dfa22b8ebaf6310da8333e30a337114288604cd", "filename": "src/test/ui/consts/control-flow/short-circuit-let.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(const_if_match)]\n #![feature(const_panic)]\n \n const X: i32 = {"}, {"sha": "f6ba28e7b7246e64945af31c6e0a75277d50d445", "filename": "src/test/ui/consts/control-flow/short-circuit.if_match.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/short-circuit.rs:14:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f6a0f03a4a6b89905560524f34200ae98d03e86f", "filename": "src/test/ui/consts/control-flow/short-circuit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,14 +1,14 @@\n-// Test that both `&&` and `||` actually short-circuit when the `const_if_match` feature flag is\n-// enabled. Without the feature flag, both sides are evaluated unconditionally.\n+// run-pass\n \n-// revisions: stock if_match\n+// Test that both `&&` and `||` actually short-circuit.\n+// Formerly, both sides were evaluated unconditionally\n \n-#![feature(rustc_attrs)]\n #![feature(const_panic)]\n-#![cfg_attr(if_match, feature(const_if_match))]\n \n-const _: bool = true || panic!();  //[stock]~ ERROR any use of this value will cause an error\n-const _: bool = false && panic!(); //[stock]~ ERROR any use of this value will cause an error\n+const TRUE: bool = true || panic!();\n+const FALSE: bool = false && panic!();\n \n-#[rustc_error]\n-fn main() {} //[if_match]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n+    assert!(TRUE);\n+    assert!(!FALSE);\n+}"}, {"sha": "f32f248af4557a0255fc7b3485ed52a8423dd6ef", "filename": "src/test/ui/consts/control-flow/short-circuit.stock.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,23 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/short-circuit.rs:10:25\n-   |\n-LL | const _: bool = true || panic!();\n-   | ------------------------^^^^^^^^-\n-   |                         |\n-   |                         the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:10:25\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: any use of this value will cause an error\n-  --> $DIR/short-circuit.rs:11:26\n-   |\n-LL | const _: bool = false && panic!();\n-   | -------------------------^^^^^^^^-\n-   |                          |\n-   |                          the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:11:26\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "b59be00ffb7885943f8be3574fd0de511461c5ce", "filename": "src/test/ui/consts/control-flow/single_variant_match_ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(const_if_match)]\n-\n enum Foo {\n     Prob,\n }"}, {"sha": "7d85a412b47226a3015444f6f6bb9b58632de40d", "filename": "src/test/ui/consts/control-flow/try.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,8 +1,6 @@\n // The `?` operator is still not const-evaluatable because it calls `From::from` on the error\n // variant.\n \n-#![feature(const_if_match)]\n-\n const fn opt() -> Option<i32> {\n     let x = Some(2);\n     x?; //~ ERROR `?` is not allowed in a `const fn`"}, {"sha": "35075a3e60b98d3cba64200099064eecf64cbe6e", "filename": "src/test/ui/consts/control-flow/try.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0744]: `?` is not allowed in a `const fn`\n-  --> $DIR/try.rs:8:5\n+  --> $DIR/try.rs:6:5\n    |\n LL |     x?;\n    |     ^^"}, {"sha": "754a1d7c2a3a7bba5c2513fc773f7444d751333e", "filename": "src/test/ui/consts/min_const_fn/loop_ice.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,5 +0,0 @@\n-const fn foo() {\n-    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n-}\n-\n-fn main() {}"}, {"sha": "f48b7396e77c6ca4d064d184535a6c952416f890", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop_ice.rs:2:5\n-   |\n-LL |     loop {}\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "2ebd9dd10c5123014b2b3b4c6d1c4a72971d8098", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -98,13 +98,13 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n //~^ ERROR casting pointers to ints is unstable\n const fn foo30_6() -> bool { let x = true; x }\n-const fn foo36(a: bool, b: bool) -> bool { a && b }\n-//~^ ERROR loops and conditional expressions are not stable in const fn\n-const fn foo37(a: bool, b: bool) -> bool { a || b }\n-//~^ ERROR loops and conditional expressions are not stable in const fn\n const fn inc(x: &mut i32) { *x += 1 }\n //~^ ERROR mutable references in const fn are unstable\n \n+// ok\n+const fn foo36(a: bool, b: bool) -> bool { a && b }\n+const fn foo37(a: bool, b: bool) -> bool { a || b }\n+\n fn main() {}\n \n impl<T: std::fmt::Debug> Foo<T> {"}, {"sha": "9b55b6c6f3bbc97bad469192d7230db86eb9093f", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -166,26 +166,8 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:101:44\n-   |\n-LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n-   |                                            ^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:103:44\n-   |\n-LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n-   |                                            ^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:105:14\n+  --> $DIR/min_const_fn.rs:101:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -283,7 +265,7 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 30 previous errors\n \n Some errors have detailed explanations: E0493, E0723.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "08d68b039bead295625a4d615868b5ad71cde644", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -2,8 +2,7 @@\n // aux-build:static_cross_crate.rs\n #![allow(const_err)]\n \n-// `const_if_match` is a HIR check and thus needed even when unleashed.\n-#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match)]\n+#![feature(exclusive_range_pattern, half_open_range_patterns)]\n \n extern crate static_cross_crate;\n "}, {"sha": "52662ef9eaf5a0ec1a2aacc78bc0d68149e1f379", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n@@ -11,13 +11,13 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n@@ -29,13 +29,13 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:48:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:14\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n@@ -46,19 +46,19 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:24:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:59:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n@@ -69,95 +69,90 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:31:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:48:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:59:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "29d3dc18fa7cc06bdfd1ca168d78073850b9e70b", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,7 +4,6 @@\n // gate was not enabled in libcore.\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![feature(const_if_match)]\n #![feature(rustc_const_unstable)]\n #![feature(staged_api)]\n "}, {"sha": "be797cae7ca97cfc65320645c77be589f834461c", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n+  --> $DIR/unstable-const-fn-in-libcore.rs:23:26\n    |\n LL |             Opt::None => f(),\n    |                          ^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:19:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:18:53\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                                     ^ constant functions cannot evaluate destructors\n@@ -14,7 +14,7 @@ LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:19:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:18:47\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                               ^^^^ constant functions cannot evaluate destructors"}, {"sha": "b3694bb4216c67eee40e259acab2db9e9e803879", "filename": "src/test/ui/enum-discriminant/niche.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(const_panic)]\n-#![feature(const_if_match)]\n \n //! Make sure that we read and write enum discriminants correctly for corner cases caused\n //! by layout optimizations."}, {"sha": "3b3a2950942d0bb8640e986c7a4f9292a5b72489", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,10 +1,14 @@\n+// Don't allow unstable features in stable functions without `allow_internal_unstable`.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n #![feature(staged_api)]\n-#![feature(const_if_match)]\n+#![feature(const_transmute, const_fn)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-const fn foo() -> i32 {\n-    if true { 4 } else { 5 } //~ loops and conditional expressions are not stable in const fn\n+pub const fn foo() -> i32 {\n+    unsafe { std::mem::transmute(4u32) } //~ ERROR is not stable as `const fn`\n }\n \n fn main() {}"}, {"sha": "5a2c58f3928dc34d0d754afe9b518cd44c9120d9", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,8 +1,8 @@\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/internal-unstable-const.rs:7:5\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const std::intrinsics::transmute::<u32, i32>` is not stable as `const fn`\n+  --> $DIR/internal-unstable-const.rs:11:14\n    |\n-LL |     if true { 4 } else { 5 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe { std::mem::transmute(4u32) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable"}, {"sha": "0dc588d75c654dfc7338d77ef605ea2140514935", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -10,5 +10,4 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n-    //~| ERROR `while` is not allowed in a `const`\n }"}, {"sha": "023d9013ab4ed48061d41dc68685977a9888d462", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,3 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/issue-51714.rs:11:17\n-   |\n-LL |     [(); return while let Some(n) = Some(0) {}];\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:2:14\n    |\n@@ -32,7 +22,6 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0572, E0658.\n-For more information about an error, try `rustc --explain E0572`.\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "4585bcc8cd57fac92d54a14143465527e85b8259", "filename": "src/test/ui/issues/issue-66706.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -19,7 +19,6 @@ fn c() {\n fn d() {\n     [0; match [|f @ &ref _| () ] {} ]\n     //~^ ERROR expected identifier, found reserved identifier `_`\n-    //~| ERROR `match` is not allowed in a `const`\n     //~| ERROR mismatched types\n }\n "}, {"sha": "f0b93ac91111a88bbcea399c7b418593826d3e50", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -26,15 +26,6 @@ error: expected identifier, found reserved identifier `_`\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |                          ^ expected identifier, found reserved identifier\n \n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/issue-66706.rs:20:9\n-   |\n-LL |     [0; match [|f @ &ref _| () ] {} ]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0282]: type annotations needed\n   --> $DIR/issue-66706.rs:2:11\n    |\n@@ -65,7 +56,7 @@ LL | fn d() {\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0282, E0308, E0658.\n+Some errors have detailed explanations: E0282, E0308.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "f4af2f0d2dd4059224981dfef34229842f4fc145", "filename": "src/test/ui/or-patterns/const-fn.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,35 +1,30 @@\n+// check-pass\n #![feature(or_patterns)]\n \n const fn foo((Ok(a) | Err(a)): Result<i32, i32>) {\n-    //~^ ERROR or-pattern is not allowed in a `const fn`\n     let x = Ok(3);\n     let Ok(y) | Err(y) = x;\n-    //~^ ERROR or-pattern is not allowed in a `const fn`\n }\n \n const X: () = {\n     let x = Ok(3);\n     let Ok(y) | Err(y) = x;\n-    //~^ ERROR or-pattern is not allowed in a `const`\n };\n \n static Y: () = {\n     let x = Ok(3);\n     let Ok(y) | Err(y) = x;\n-    //~^ ERROR or-pattern is not allowed in a `static`\n };\n \n static mut Z: () = {\n     let x = Ok(3);\n     let Ok(y) | Err(y) = x;\n-    //~^ ERROR or-pattern is not allowed in a `static mut`\n };\n \n fn main() {\n     let _: [(); {\n         let x = Ok(3);\n         let Ok(y) | Err(y) = x;\n-        //~^ ERROR or-pattern is not allowed in a `const`\n         2\n     }];\n }", "previous_filename": "src/test/ui/or-patterns/feature-gate-const-fn.rs"}, {"sha": "345d6c7098112da8b1ef1b0d260909b255f25a81", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.stderr", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,57 +0,0 @@\n-error[E0658]: or-pattern is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-fn.rs:3:15\n-   |\n-LL | const fn foo((Ok(a) | Err(a)): Result<i32, i32>) {\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: or-pattern is not allowed in a `const fn`\n-  --> $DIR/feature-gate-const-fn.rs:6:9\n-   |\n-LL |     let Ok(y) | Err(y) = x;\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: or-pattern is not allowed in a `const`\n-  --> $DIR/feature-gate-const-fn.rs:12:9\n-   |\n-LL |     let Ok(y) | Err(y) = x;\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: or-pattern is not allowed in a `static`\n-  --> $DIR/feature-gate-const-fn.rs:18:9\n-   |\n-LL |     let Ok(y) | Err(y) = x;\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: or-pattern is not allowed in a `static mut`\n-  --> $DIR/feature-gate-const-fn.rs:24:9\n-   |\n-LL |     let Ok(y) | Err(y) = x;\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: or-pattern is not allowed in a `const`\n-  --> $DIR/feature-gate-const-fn.rs:31:13\n-   |\n-LL |         let Ok(y) | Err(y) = x;\n-   |             ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f21eac37c17b5325405b37638ee5fba497d0d15c", "filename": "src/test/ui/return/return-match-array-const.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,13 +1,10 @@\n fn main() {\n     [(); return match 0 { n => n }];\n     //~^ ERROR: return statement outside of function body\n-    //~| ERROR: `match` is not allowed in a `const`\n \n     [(); return match 0 { 0 => 0 }];\n     //~^ ERROR: return statement outside of function body\n-    //~| ERROR: `match` is not allowed in a `const`\n \n     [(); return match () { 'a' => 0, _ => 0 }];\n     //~^ ERROR: return statement outside of function body\n-    //~| ERROR: `match` is not allowed in a `const`\n }"}, {"sha": "8e801e3fbb7abd9f030b1b2ad719008205f5f860", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,49 +1,21 @@\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/return-match-array-const.rs:2:17\n-   |\n-LL |     [(); return match 0 { n => n }];\n-   |                 ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/return-match-array-const.rs:6:17\n-   |\n-LL |     [(); return match 0 { 0 => 0 }];\n-   |                 ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/return-match-array-const.rs:10:17\n-   |\n-LL |     [(); return match () { 'a' => 0, _ => 0 }];\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0572]: return statement outside of function body\n   --> $DIR/return-match-array-const.rs:2:10\n    |\n LL |     [(); return match 0 { n => n }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:6:10\n+  --> $DIR/return-match-array-const.rs:5:10\n    |\n LL |     [(); return match 0 { 0 => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:10:10\n+  --> $DIR/return-match-array-const.rs:8:10\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0572, E0658.\n-For more information about an error, try `rustc --explain E0572`.\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "71af704c69f0d1e7865b0b9e870ad91c90027c5c", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -216,17 +216,14 @@ fn inside_const_generic_arguments() {\n \n     if let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     while let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     if A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~| ERROR `match` is not allowed in a `const`\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out."}, {"sha": "7f343d1a853ac95bb6d205581a7f147a089ba2ec", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,` or `>`, found `&&`\n-  --> $DIR/disallowed-positions.rs:239:14\n+  --> $DIR/disallowed-positions.rs:236:14\n    |\n LL |         true && let 1 = 1\n    |              ^^ expected one of `,` or `>`\n@@ -482,7 +482,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:223:17\n+  --> $DIR/disallowed-positions.rs:222:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -491,7 +491,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:228:17\n+  --> $DIR/disallowed-positions.rs:226:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -516,33 +516,6 @@ LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n \n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/disallowed-positions.rs:218:17\n-   |\n-LL |         true && let 1 = 1\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/disallowed-positions.rs:223:17\n-   |\n-LL |         true && let 1 = 1\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n-error[E0658]: `match` is not allowed in a `const`\n-  --> $DIR/disallowed-positions.rs:228:17\n-   |\n-LL |         true && let 1 = 1\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |\n@@ -983,7 +956,7 @@ LL |         let 0 = 0?;\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 106 previous errors; 2 warnings emitted\n+error: aborting due to 103 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0277, E0308, E0600, E0614, E0658.\n+Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "655d4d7400b78a93caeb62d57818207bd73577aa", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -4,12 +4,13 @@\n #![allow(incomplete_features)]\n \n pub trait MyTrait {\n-    fn method(&self);\n+    fn method(&self) -> Option<()>;\n }\n \n impl const MyTrait for () {\n-    fn method(&self) {\n-        match *self {} //~ ERROR `match` is not allowed in a `const fn`\n+    fn method(&self) -> Option<()> {\n+        Some(())?; //~ ERROR `?` is not allowed in a `const fn`\n+        None\n     }\n }\n "}, {"sha": "8c76d7eb597b6a29c08e42820c934acc1a739bc1", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: `match` is not allowed in a `const fn`\n+error[E0744]: `?` is not allowed in a `const fn`\n   --> $DIR/hir-const-check.rs:12:9\n    |\n-LL |         match *self {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n-   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+LL |         Some(())?;\n+   |         ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "8b4e2d21331cd9e6ca0ff31fa88601ac8c7d3148", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]"}, {"sha": "b0904e41b6f43d976137e46fd8205e55e779dcd9", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]"}, {"sha": "51a6f4350d32c3f4daaf15fdcd0b95034dabb029", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,73 +1,73 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:18:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching.rs:22:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:26:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:32:15\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:35:15\n+  --> $DIR/redundant_pattern_matching.rs:33:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:51:5\n+  --> $DIR/redundant_pattern_matching.rs:49:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:56:5\n+  --> $DIR/redundant_pattern_matching.rs:54:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:61:5\n+  --> $DIR/redundant_pattern_matching.rs:59:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:66:5\n+  --> $DIR/redundant_pattern_matching.rs:64:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:71:5\n+  --> $DIR/redundant_pattern_matching.rs:69:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:76:5\n+  --> $DIR/redundant_pattern_matching.rs:74:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:81:13\n+  --> $DIR/redundant_pattern_matching.rs:79:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,61 +131,61 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:86:20\n+  --> $DIR/redundant_pattern_matching.rs:84:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:89:20\n+  --> $DIR/redundant_pattern_matching.rs:87:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:95:20\n+  --> $DIR/redundant_pattern_matching.rs:93:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:97:19\n+  --> $DIR/redundant_pattern_matching.rs:95:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:99:19\n+  --> $DIR/redundant_pattern_matching.rs:97:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:101:19\n+  --> $DIR/redundant_pattern_matching.rs:99:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:134:19\n+  --> $DIR/redundant_pattern_matching.rs:132:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:135:16\n+  --> $DIR/redundant_pattern_matching.rs:133:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:141:12\n+  --> $DIR/redundant_pattern_matching.rs:139:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:15\n+  --> $DIR/redundant_pattern_matching.rs:140:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`"}, {"sha": "8a81e92f04a7321f7e579fbafbad134a6be7c49b", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_result)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(unused)]"}, {"sha": "1cd515441d13a5e1f6c6989f2631510fb8a69cbe", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_result)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(unused)]"}, {"sha": "8ecd72158d33c8c86271578c4e60730199b1b9d0", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "patch": "@@ -1,31 +1,31 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n+  --> $DIR/redundant_pattern_matching_const_result.rs:10:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:14:12\n+  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n+  --> $DIR/redundant_pattern_matching_const_result.rs:14:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:18:15\n+  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:20:5\n+  --> $DIR/redundant_pattern_matching_const_result.rs:18:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +34,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:25:5\n+  --> $DIR/redundant_pattern_matching_const_result.rs:23:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,"}]}