{"sha": "ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "node_id": "C_kwDOAAsO6NoAKGFkMmIzNGQwZTM3ZTJmOTY4ZjIyNmUyNDAxYmNiODk0MjA3Y2ExYzU", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-08-09T00:14:43Z"}, "committer": {"name": "kadiwa", "email": "kalle.wachsmuth@gmail.com", "date": "2023-04-12T17:27:18Z"}, "message": "remove some unneeded imports", "tree": {"sha": "66be076f5111ae974971f1836d7da023cf60230d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66be076f5111ae974971f1836d7da023cf60230d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmQ26fYACgkQC1KuORxn\nTOXSKBAAq/rsDdpYGEFlFKiMho5KoiGAfjm5c1DDyb59fHNCgSYUD915UqWww1SF\nKFhHZTYX2H/hNLcZ57vHtt2q+8O8PK1wbNegAl2LwS5uFEA+JrsXVVQzadk9WSzC\nwbHjSJ+JsgshvfV/Zc8Ee5e9U0RwMWs7X+Qgr1MoalTmth+RcAXW9vYIFDwvDKFA\nq94KDw69CtNOY+Sk+gNM9Mfr9RYqXbYLaRLm4Twkmr7cybljuTgrpCvYU6rha63q\n89zYoBSYDBWSypqW55Yt7XeiDQahPDDmw7jcz5R8EA/cZyB+BMrWco8p0S9GM+aU\nH6Y68ztKTSDkckJ4SAgHQssjPrfccyDCE+G66hR58YMXGUmMkjmg9CEGqWtf14se\n6S6aYyzc0DnmjD7G8MpheOefYrSnVGAVTh8fbokW6FCslOKlKuTUZFS8brJEfEO1\nQ414NWJ7IPAazPEZunCEFPiJfucEb90SA5owEDhGEDTmzEguNCewVMMVnkl29jI6\n7svfF3OqOWyW7yxPuSYMy05zCHxOP0KB0SkjUiiZpasbqT0u2sU76CQDuH/+TMQk\nOFeLBtLUaYjWwM/NgI9iHDr8NHM5WwMeWckTWNvkxCCFJIDYO6GAhmTtt2xVs/js\nt6Lri7RuQKZoEHbjdzjiulv5Dsodpo0orxEWo5ke45KjetPflFM=\n=vII+\n-----END PGP SIGNATURE-----", "payload": "tree 66be076f5111ae974971f1836d7da023cf60230d\nparent 661b33f5247debc4e0cd948caa388997e18e9cb8\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1660004083 +0200\ncommitter kadiwa <kalle.wachsmuth@gmail.com> 1681320438 +0200\n\nremove some unneeded imports\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "html_url": "https://github.com/rust-lang/rust/commit/ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661b33f5247debc4e0cd948caa388997e18e9cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/661b33f5247debc4e0cd948caa388997e18e9cb8", "html_url": "https://github.com/rust-lang/rust/commit/661b33f5247debc4e0cd948caa388997e18e9cb8"}], "stats": {"total": 199, "additions": 64, "deletions": 135}, "files": [{"sha": "ec1b0a8eba039c32b9cb01ca664707caa072389b", "filename": "library/alloc/benches/btree/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,5 +1,4 @@\n use std::collections::BTreeMap;\n-use std::iter::Iterator;\n use std::ops::RangeBounds;\n use std::vec::Vec;\n "}, {"sha": "c1d3e1bdfe79d60d7b8c52426d35b22b0176c9d1", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,5 +1,5 @@\n use rand::RngCore;\n-use std::iter::{repeat, FromIterator};\n+use std::iter::repeat;\n use test::{black_box, Bencher};\n \n #[bench]"}, {"sha": "7f88327bf190a150166ab03756c681a02400559f", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -150,16 +150,13 @@ use core::any::Any;\n use core::async_iter::AsyncIterator;\n use core::borrow;\n use core::cmp::Ordering;\n-use core::convert::{From, TryFrom};\n use core::error::Error;\n use core::fmt;\n use core::future::Future;\n use core::hash::{Hash, Hasher};\n-#[cfg(not(no_global_oom_handling))]\n-use core::iter::FromIterator;\n-use core::iter::{FusedIterator, Iterator};\n+use core::iter::FusedIterator;\n use core::marker::Tuple;\n-use core::marker::{Unpin, Unsize};\n+use core::marker::Unsize;\n use core::mem;\n use core::ops::{\n     CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Generator, GeneratorState, Receiver,"}, {"sha": "8aa4d342e6e37656e117f1082f09dcebda158bfa", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -144,7 +144,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::fmt;\n-use core::iter::{FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n+use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n use core::mem::{self, swap, ManuallyDrop};\n use core::num::NonZeroUsize;\n use core::ops::{Deref, DerefMut};\n@@ -263,7 +263,6 @@ mod tests;\n /// more detailed analysis.\n ///\n /// [`core::cmp::Reverse`]: core::cmp::Reverse\n-/// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell\n /// [push]: BinaryHeap::push\n@@ -1418,7 +1417,6 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BinaryHeap::into_iter\n-/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {"}, {"sha": "7b378ccc01adb57560861853d55fc8b4e653d04b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -3,7 +3,7 @@ use core::borrow::Borrow;\n use core::cmp::Ordering;\n use core::fmt::{self, Debug};\n use core::hash::{Hash, Hasher};\n-use core::iter::{FromIterator, FusedIterator};\n+use core::iter::FusedIterator;\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop};\n use core::ops::{Bound, Index, RangeBounds};\n@@ -420,7 +420,6 @@ impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n-/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_insignificant_dtor]\n pub struct IntoIter<\n@@ -650,7 +649,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n         // avoid moving the allocator\n-        mem::drop(BTreeMap {\n+        drop(BTreeMap {\n             root: mem::replace(&mut self.root, None),\n             length: mem::replace(&mut self.length, 0),\n             alloc: self.alloc.clone(),"}, {"sha": "1c6ed0b4f8bc4176f4f0db6e9d279200946d0307", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -9,8 +9,7 @@ use crate::testing::ord_chaos::{Cyclic3, Governed, Governor};\n use crate::testing::rng::DeterministicRng;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n-use std::convert::TryFrom;\n-use std::iter::{self, FromIterator};\n+use std::iter;\n use std::mem;\n use std::ops::Bound::{self, Excluded, Included, Unbounded};\n use std::ops::RangeBounds;"}, {"sha": "232a017314e5e601973fdae201eab07ba6eea8ff", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -4,7 +4,7 @@ use core::cmp::Ordering::{self, Equal, Greater, Less};\n use core::cmp::{max, min};\n use core::fmt::{self, Debug};\n use core::hash::{Hash, Hasher};\n-use core::iter::{FromIterator, FusedIterator, Peekable};\n+use core::iter::{FusedIterator, Peekable};\n use core::mem::ManuallyDrop;\n use core::ops::{BitAnd, BitOr, BitXor, RangeBounds, Sub};\n \n@@ -30,7 +30,6 @@ use crate::alloc::{Allocator, Global};\n /// Iterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\n /// logarithmic and amortized constant time per item returned.\n ///\n-/// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell\n ///\n@@ -147,7 +146,6 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BTreeSet#method.into_iter\n-/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<"}, {"sha": "a7c839d77ed4c56d840dd9dd4e77e19c355fb3a3", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -4,7 +4,6 @@ use crate::testing::rng::DeterministicRng;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n use std::ops::Bound::{Excluded, Included};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n "}, {"sha": "1743a155c5abf0ef5862b4bd8d7789e5b7df9501", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -15,7 +15,7 @@\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{FromIterator, FusedIterator};\n+use core::iter::FusedIterator;\n use core::marker::PhantomData;\n use core::mem;\n use core::ptr::NonNull;\n@@ -130,7 +130,6 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: LinkedList::into_iter\n-/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "d9e274df0f5f24769ceb85c3d9e8a7593e93fae8", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -12,7 +12,6 @@ use super::VecDeque;\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: VecDeque::into_iter\n-/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<"}, {"sha": "8916b42eda05ef424628cc081923b32ceb434d58", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -10,7 +10,7 @@\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{repeat_n, repeat_with, ByRefSized, FromIterator};\n+use core::iter::{repeat_n, repeat_with, ByRefSized};\n use core::mem::{ManuallyDrop, SizedTypeProperties};\n use core::ops::{Index, IndexMut, Range, RangeBounds};\n use core::ptr;"}, {"sha": "dfd30d99cf041e385eaee50a48a4e4340ab06f16", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -4,7 +4,6 @@ use core::alloc::LayoutError;\n use core::cmp;\n use core::intrinsics;\n use core::mem::{self, ManuallyDrop, MaybeUninit, SizedTypeProperties};\n-use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n "}, {"sha": "cf93a40496fdf209012938d7ef484042962517c0", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -15,7 +15,7 @@\n //!\n //! [`Rc`] uses non-atomic reference counting. This means that overhead is very\n //! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\n-//! does not implement [`Send`][send]. As a result, the Rust compiler\n+//! does not implement [`Send`]. As a result, the Rust compiler\n //! will check *at compile time* that you are not sending [`Rc`]s between\n //! threads. If you need multi-threaded, atomic reference counting, use\n //! [`sync::Arc`][arc].\n@@ -232,7 +232,6 @@\n //! [clone]: Clone::clone\n //! [`Cell`]: core::cell::Cell\n //! [`RefCell`]: core::cell::RefCell\n-//! [send]: core::marker::Send\n //! [arc]: crate::sync::Arc\n //! [`Deref`]: core::ops::Deref\n //! [downgrade]: Rc::downgrade\n@@ -251,13 +250,12 @@ use core::any::Any;\n use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n-use core::convert::{From, TryFrom};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n #[cfg(not(no_global_oom_handling))]\n use core::iter;\n-use core::marker::{self, PhantomData, Unpin, Unsize};\n+use core::marker::{PhantomData, Unsize};\n #[cfg(not(no_global_oom_handling))]\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw, forget};\n@@ -321,15 +319,15 @@ pub struct Rc<T: ?Sized> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> !marker::Send for Rc<T> {}\n+impl<T: ?Sized> !Send for Rc<T> {}\n \n // Note that this negative impl isn't strictly necessary for correctness,\n // as `Rc` transitively contains a `Cell`, which is itself `!Sync`.\n // However, given how important `Rc`'s `!Sync`-ness is,\n // having an explicit negative impl is nice for documentation purposes\n // and results in nicer error messages.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> !marker::Sync for Rc<T> {}\n+impl<T: ?Sized> !Sync for Rc<T> {}\n \n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Rc<T> {}\n@@ -1060,7 +1058,7 @@ impl<T: ?Sized> Rc<T> {\n     #[inline]\n     #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n     pub unsafe fn decrement_strong_count(ptr: *const T) {\n-        unsafe { mem::drop(Rc::from_raw(ptr)) };\n+        unsafe { drop(Rc::from_raw(ptr)) };\n     }\n \n     /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to\n@@ -1496,7 +1494,7 @@ impl<T> Rc<[T]> {\n     ///\n     /// Behavior is undefined should the size be wrong.\n     #[cfg(not(no_global_oom_handling))]\n-    unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {\n+    unsafe fn from_iter_exact(iter: impl Iterator<Item = T>, len: usize) -> Rc<[T]> {\n         // Panic guard while cloning T elements.\n         // In the event of a panic, elements that have been written\n         // into the new RcBox will be dropped, then the memory freed.\n@@ -2088,7 +2086,7 @@ impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]> {\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]\n-impl<T> iter::FromIterator<T> for Rc<[T]> {\n+impl<T> FromIterator<T> for Rc<[T]> {\n     /// Takes each element in the `Iterator` and collects it into an `Rc<[T]>`.\n     ///\n     /// # Performance characteristics\n@@ -2127,7 +2125,7 @@ impl<T> iter::FromIterator<T> for Rc<[T]> {\n     /// let evens: Rc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n     /// # assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n     /// ```\n-    fn from_iter<I: iter::IntoIterator<Item = T>>(iter: I) -> Self {\n+    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {\n         ToRcSlice::to_rc_slice(iter.into_iter())\n     }\n }\n@@ -2204,9 +2202,9 @@ pub struct Weak<T: ?Sized> {\n }\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n-impl<T: ?Sized> !marker::Send for Weak<T> {}\n+impl<T: ?Sized> !Send for Weak<T> {}\n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n-impl<T: ?Sized> !marker::Sync for Weak<T> {}\n+impl<T: ?Sized> !Sync for Weak<T> {}\n \n #[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}"}, {"sha": "be41919b9dc23b351b6b400c106d0755ad56f5e7", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -45,9 +45,9 @@\n use core::error::Error;\n use core::fmt;\n use core::hash;\n-use core::iter::FusedIterator;\n #[cfg(not(no_global_oom_handling))]\n-use core::iter::{from_fn, FromIterator};\n+use core::iter::from_fn;\n+use core::iter::FusedIterator;\n #[cfg(not(no_global_oom_handling))]\n use core::ops::Add;\n #[cfg(not(no_global_oom_handling))]"}, {"sha": "5bfe537bc830fe9eb5028763a7ce63691f5be51e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -11,14 +11,13 @@\n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n-use core::convert::{From, TryFrom};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::hint;\n use core::intrinsics::abort;\n #[cfg(not(no_global_oom_handling))]\n use core::iter;\n-use core::marker::{PhantomData, Unpin, Unsize};\n+use core::marker::{PhantomData, Unsize};\n #[cfg(not(no_global_oom_handling))]\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw};\n@@ -188,8 +187,6 @@ macro_rules! acquire {\n /// [mutex]: ../../std/sync/struct.Mutex.html\n /// [rwlock]: ../../std/sync/struct.RwLock.html\n /// [atomic]: core::sync::atomic\n-/// [`Send`]: core::marker::Send\n-/// [`Sync`]: core::marker::Sync\n /// [deref]: core::ops::Deref\n /// [downgrade]: Arc::downgrade\n /// [upgrade]: Weak::upgrade\n@@ -1241,7 +1238,7 @@ impl<T: ?Sized> Arc<T> {\n     #[inline]\n     #[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]\n     pub unsafe fn decrement_strong_count(ptr: *const T) {\n-        unsafe { mem::drop(Arc::from_raw(ptr)) };\n+        unsafe { drop(Arc::from_raw(ptr)) };\n     }\n \n     #[inline]\n@@ -1404,7 +1401,7 @@ impl<T> Arc<[T]> {\n     ///\n     /// Behavior is undefined should the size be wrong.\n     #[cfg(not(no_global_oom_handling))]\n-    unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Arc<[T]> {\n+    unsafe fn from_iter_exact(iter: impl Iterator<Item = T>, len: usize) -> Arc<[T]> {\n         // Panic guard while cloning T elements.\n         // In the event of a panic, elements that have been written\n         // into the new ArcInner will be dropped, then the memory freed.\n@@ -2818,7 +2815,7 @@ impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]> {\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]\n-impl<T> iter::FromIterator<T> for Arc<[T]> {\n+impl<T> FromIterator<T> for Arc<[T]> {\n     /// Takes each element in the `Iterator` and collects it into an `Arc<[T]>`.\n     ///\n     /// # Performance characteristics\n@@ -2857,7 +2854,7 @@ impl<T> iter::FromIterator<T> for Arc<[T]> {\n     /// let evens: Arc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n     /// # assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n     /// ```\n-    fn from_iter<I: iter::IntoIterator<Item = T>>(iter: I) -> Self {\n+    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {\n         ToArcSlice::to_arc_slice(iter.into_iter())\n     }\n }"}, {"sha": "2c799605b7b672a9f48be7e2d51d817ec2c488af", "filename": "library/alloc/src/vec/cow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,5 +1,4 @@\n use crate::borrow::Cow;\n-use core::iter::FromIterator;\n \n use super::Vec;\n "}, {"sha": "02faf8e638948156fe10f4c5079b0caa6e5b9765", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -108,7 +108,7 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     /// ```\n     /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();\n     /// let mut into_iter = std::mem::replace(&mut into_iter, Vec::new().into_iter());\n-    /// (&mut into_iter).for_each(core::mem::drop);\n+    /// (&mut into_iter).for_each(drop);\n     /// std::mem::forget(into_iter);\n     /// ```\n     ///"}, {"sha": "3736a6e0b0ecbf8fc80921e7a23647b336968ad4", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -56,12 +56,9 @@\n #[cfg(not(no_global_oom_handling))]\n use core::cmp;\n use core::cmp::Ordering;\n-use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::iter;\n-#[cfg(not(no_global_oom_handling))]\n-use core::iter::FromIterator;\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit, SizedTypeProperties};\n use core::ops::{self, Index, IndexMut, Range, RangeBounds};\n@@ -2990,7 +2987,7 @@ impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {\n     }\n }\n \n-/// Implements comparison of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n+/// Implements comparison of vectors, [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd, A: Allocator> PartialOrd for Vec<T, A> {\n     #[inline]\n@@ -3002,7 +2999,7 @@ impl<T: PartialOrd, A: Allocator> PartialOrd for Vec<T, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq, A: Allocator> Eq for Vec<T, A> {}\n \n-/// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n+/// Implements ordering of vectors, [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord, A: Allocator> Ord for Vec<T, A> {\n     #[inline]"}, {"sha": "d3cd74a4483755430aeb05fda23ee95d9742060e", "filename": "library/core/src/iter/sources/repeat_with.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -19,7 +19,6 @@ use crate::ops::Try;\n /// please open a GitHub issue explaining your use case.\n ///\n /// [`repeat()`]: crate::iter::repeat\n-/// [`DoubleEndedIterator`]: crate::iter::DoubleEndedIterator\n ///\n /// # Examples\n ///"}, {"sha": "02877604248df85c665d828fd16305fce66aa9b4", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -764,7 +764,6 @@ pub trait Iterator {\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n-    /// [`FnMut`]: crate::ops::FnMut\n     ///\n     /// # Examples\n     ///"}, {"sha": "b9a1924d668980a0bf709b94f8c795691c0402fb", "filename": "library/core/src/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnet%2Fparser.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -9,7 +9,7 @@ use crate::fmt;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n use crate::str::FromStr;\n \n-trait ReadNumberHelper: crate::marker::Sized {\n+trait ReadNumberHelper: Sized {\n     const ZERO: Self;\n     fn checked_mul(&self, other: u32) -> Option<Self>;\n     fn checked_add(&self, other: u32) -> Option<Self>;"}, {"sha": "3df990e5dd9fee4bf5d29baa6b0cd9713ba42973", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -577,7 +577,6 @@ impl Copy for () {\n /// [`is_null`]: pointer::is_null\n /// [`offset`]: pointer::offset\n #[doc = concat!(\"[`into_raw`]: \", include_str!(\"../primitive_docs/box_into_raw.md\"))]\n-/// [`drop`]: mem::drop\n /// [`write`]: ptr::write\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n@@ -1026,7 +1025,6 @@ mod prim_str {}\n /// * [`UnwindSafe`]\n /// * [`RefUnwindSafe`]\n ///\n-/// [`Unpin`]: marker::Unpin\n /// [`UnwindSafe`]: panic::UnwindSafe\n /// [`RefUnwindSafe`]: panic::RefUnwindSafe\n ///\n@@ -1405,10 +1403,6 @@ mod prim_ref {}\n ///\n /// *See also the traits [`Fn`], [`FnMut`], and [`FnOnce`].*\n ///\n-/// [`Fn`]: ops::Fn\n-/// [`FnMut`]: ops::FnMut\n-/// [`FnOnce`]: ops::FnOnce\n-///\n /// Function pointers are pointers that point to *code*, not data. They can be called\n /// just like functions. Like references, function pointers are, among other things, assumed to\n /// not be null, so if you want to pass a function pointer over FFI and be able to accommodate null"}, {"sha": "3f3e19c55d4ba76faee9e6ba215cb33a60a8e30a", "filename": "library/core/src/sync/exclusive.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -69,9 +69,6 @@ use core::task::{Context, Poll};\n /// for any value. This is a parallel with the fact that\n /// `&` and `&mut` references together can be thought of as a _compile-time_\n /// version of a read-write lock.\n-///\n-///\n-/// [`Sync`]: core::marker::Sync\n #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n #[doc(alias = \"SyncWrapper\")]\n #[doc(alias = \"SyncCell\")]"}, {"sha": "b5ba198e5041b82e76e03c31143d70cbd2bd9f02", "filename": "library/portable-simd/crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -257,7 +257,7 @@ where\n     }\n }\n \n-impl<T, const LANES: usize> core::convert::From<Mask<T, LANES>> for Simd<T, LANES>\n+impl<T, const LANES: usize> From<Mask<T, LANES>> for Simd<T, LANES>\n where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,"}, {"sha": "f4e90544197217b3c37941eda824b5f9c2b81851", "filename": "library/proc_macro/src/bridge/fxhash.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -5,8 +5,6 @@\n //! on the `rustc_hash` crate.\n \n use std::collections::HashMap;\n-use std::convert::TryInto;\n-use std::default::Default;\n use std::hash::BuildHasherDefault;\n use std::hash::Hasher;\n use std::mem::size_of;"}, {"sha": "9d081c8b842d5b767a5b6ed57cdd8f80a9f16c5c", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -47,7 +47,7 @@ use std::cmp::Ordering;\n use std::ops::RangeBounds;\n use std::path::PathBuf;\n use std::str::FromStr;\n-use std::{error, fmt, iter};\n+use std::{error, fmt};\n \n /// Determines whether proc_macro has been made accessible to the currently\n /// running program.\n@@ -310,7 +310,7 @@ impl ConcatStreamsHelper {\n \n /// Collects a number of token trees into a single stream.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-impl iter::FromIterator<TokenTree> for TokenStream {\n+impl FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {\n         let iter = trees.into_iter();\n         let mut builder = ConcatTreesHelper::new(iter.size_hint().0);\n@@ -322,7 +322,7 @@ impl iter::FromIterator<TokenTree> for TokenStream {\n /// A \"flattening\" operation on token streams, collects token trees\n /// from multiple token streams into a single stream.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n-impl iter::FromIterator<TokenStream> for TokenStream {\n+impl FromIterator<TokenStream> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {\n         let iter = streams.into_iter();\n         let mut builder = ConcatStreamsHelper::new(iter.size_hint().0);"}, {"sha": "3afc8287ecc0098363934619e33d32300e47347a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1446,7 +1446,6 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n-/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Example\n ///"}, {"sha": "ac906e682d5f04c20b55a345b8435f5dc273c72a", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1272,7 +1272,6 @@ pub struct Iter<'a, K: 'a> {\n /// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n-/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Examples\n ///"}, {"sha": "49d3b7a1f6143e603e1c5553ec65fb2bf3af8cf1", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -395,8 +395,6 @@\n //! // ...but the key hasn't changed. b is still \"baz\", not \"xyz\".\n //! assert_eq!(map.keys().next().unwrap().b, \"baz\");\n //! ```\n-//!\n-//! [IntoIterator]: crate::iter::IntoIterator \"iter::IntoIterator\"\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "5c0541d3caf3308d271c54d940307309e792dc21", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -6,7 +6,6 @@ use crate::cmp;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::iter::Extend;\n use crate::ops;\n use crate::rc::Rc;\n use crate::str::FromStr;"}, {"sha": "34c0ce9dcf848288607ac1be02ba2f7e4bba810c", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -11,7 +11,6 @@ mod repr_unpacked;\n #[cfg(not(target_pointer_width = \"64\"))]\n use repr_unpacked::Repr;\n \n-use crate::convert::From;\n use crate::error;\n use crate::fmt;\n use crate::result;"}, {"sha": "43842bee992a7959fffa941164864af0999b14ae", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1678,7 +1678,7 @@ mod super_keyword {}\n /// below `Iterator` is a **supertrait** and `ThreeIterator` is a **subtrait**:\n ///\n /// ```rust\n-/// trait ThreeIterator: std::iter::Iterator {\n+/// trait ThreeIterator: Iterator {\n ///     fn next_three(&mut self) -> Option<[Self::Item; 3]>;\n /// }\n /// ```"}, {"sha": "8014ba992eaf83e09ea47e044d50e71a5d441794", "filename": "library/std/src/path.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -78,7 +78,7 @@ use crate::fmt;\n use crate::fs;\n use crate::hash::{Hash, Hasher};\n use crate::io;\n-use crate::iter::{self, FusedIterator};\n+use crate::iter::FusedIterator;\n use crate::ops::{self, Deref};\n use crate::rc::Rc;\n use crate::str::FromStr;\n@@ -450,26 +450,26 @@ impl<'a> PrefixComponent<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::PartialEq for PrefixComponent<'a> {\n+impl<'a> PartialEq for PrefixComponent<'a> {\n     #[inline]\n     fn eq(&self, other: &PrefixComponent<'a>) -> bool {\n-        cmp::PartialEq::eq(&self.parsed, &other.parsed)\n+        self.parsed == other.parsed\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::PartialOrd for PrefixComponent<'a> {\n+impl<'a> PartialOrd for PrefixComponent<'a> {\n     #[inline]\n     fn partial_cmp(&self, other: &PrefixComponent<'a>) -> Option<cmp::Ordering> {\n-        cmp::PartialOrd::partial_cmp(&self.parsed, &other.parsed)\n+        PartialOrd::partial_cmp(&self.parsed, &other.parsed)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Ord for PrefixComponent<'_> {\n+impl Ord for PrefixComponent<'_> {\n     #[inline]\n     fn cmp(&self, other: &Self) -> cmp::Ordering {\n-        cmp::Ord::cmp(&self.parsed, &other.parsed)\n+        Ord::cmp(&self.parsed, &other.parsed)\n     }\n }\n \n@@ -988,7 +988,7 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n impl FusedIterator for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::PartialEq for Components<'a> {\n+impl<'a> PartialEq for Components<'a> {\n     #[inline]\n     fn eq(&self, other: &Components<'a>) -> bool {\n         let Components { path: _, front: _, back: _, has_physical_root: _, prefix: _ } = self;\n@@ -1015,18 +1015,18 @@ impl<'a> cmp::PartialEq for Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Eq for Components<'_> {}\n+impl Eq for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::PartialOrd for Components<'a> {\n+impl<'a> PartialOrd for Components<'a> {\n     #[inline]\n     fn partial_cmp(&self, other: &Components<'a>) -> Option<cmp::Ordering> {\n         Some(compare_components(self.clone(), other.clone()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Ord for Components<'_> {\n+impl Ord for Components<'_> {\n     #[inline]\n     fn cmp(&self, other: &Self) -> cmp::Ordering {\n         compare_components(self.clone(), other.clone())\n@@ -1741,7 +1741,7 @@ impl FromStr for PathBuf {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n+impl<P: AsRef<Path>> FromIterator<P> for PathBuf {\n     fn from_iter<I: IntoIterator<Item = P>>(iter: I) -> PathBuf {\n         let mut buf = PathBuf::new();\n         buf.extend(iter);\n@@ -1750,7 +1750,7 @@ impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n+impl<P: AsRef<Path>> Extend<P> for PathBuf {\n     fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {\n         iter.into_iter().for_each(move |p| self.push(p.as_ref()));\n     }\n@@ -1904,7 +1904,7 @@ impl ToOwned for Path {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::PartialEq for PathBuf {\n+impl PartialEq for PathBuf {\n     #[inline]\n     fn eq(&self, other: &PathBuf) -> bool {\n         self.components() == other.components()\n@@ -1919,18 +1919,18 @@ impl Hash for PathBuf {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Eq for PathBuf {}\n+impl Eq for PathBuf {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::PartialOrd for PathBuf {\n+impl PartialOrd for PathBuf {\n     #[inline]\n     fn partial_cmp(&self, other: &PathBuf) -> Option<cmp::Ordering> {\n         Some(compare_components(self.components(), other.components()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Ord for PathBuf {\n+impl Ord for PathBuf {\n     #[inline]\n     fn cmp(&self, other: &PathBuf) -> cmp::Ordering {\n         compare_components(self.components(), other.components())\n@@ -3025,7 +3025,7 @@ impl fmt::Display for Display<'_> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::PartialEq for Path {\n+impl PartialEq for Path {\n     #[inline]\n     fn eq(&self, other: &Path) -> bool {\n         self.components() == other.components()\n@@ -3084,18 +3084,18 @@ impl Hash for Path {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Eq for Path {}\n+impl Eq for Path {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::PartialOrd for Path {\n+impl PartialOrd for Path {\n     #[inline]\n     fn partial_cmp(&self, other: &Path) -> Option<cmp::Ordering> {\n         Some(compare_components(self.components(), other.components()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl cmp::Ord for Path {\n+impl Ord for Path {\n     #[inline]\n     fn cmp(&self, other: &Path) -> cmp::Ordering {\n         compare_components(self.components(), other.components())"}, {"sha": "1b29c887d21003a8d1bf3e03b5a82d83f9f8c28b", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -34,7 +34,7 @@\n //!   marker traits that indicate fundamental properties of types.\n //! * <code>[std::ops]::{[Drop], [Fn], [FnMut], [FnOnce]}</code>, various\n //!   operations for both destructors and overloading `()`.\n-//! * <code>[std::mem]::[drop][mem::drop]</code>, a convenience function for explicitly\n+//! * <code>[std::mem]::[drop]</code>, a convenience function for explicitly\n //!   dropping a value.\n //! * <code>[std::boxed]::[Box]</code>, a way to allocate values on the heap.\n //! * <code>[std::borrow]::[ToOwned]</code>, the conversion trait that defines\n@@ -66,7 +66,6 @@\n //! * <code>[std::convert]::{[TryFrom], [TryInto]}</code>,\n //! * <code>[std::iter]::[FromIterator]</code>.\n //!\n-//! [mem::drop]: crate::mem::drop\n //! [std::borrow]: crate::borrow\n //! [std::boxed]: crate::boxed\n //! [std::clone]: crate::clone\n@@ -86,9 +85,6 @@\n //! [std::slice]: crate::slice\n //! [std::string]: crate::string\n //! [std::vec]: mod@crate::vec\n-//! [TryFrom]: crate::convert::TryFrom\n-//! [TryInto]: crate::convert::TryInto\n-//! [FromIterator]: crate::iter::FromIterator\n //! [`to_owned`]: crate::borrow::ToOwned::to_owned\n //! [book-closures]: ../../book/ch13-01-closures.html\n //! [book-dtor]: ../../book/ch15-03-drop.html"}, {"sha": "3df990e5dd9fee4bf5d29baa6b0cd9713ba42973", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -577,7 +577,6 @@ impl Copy for () {\n /// [`is_null`]: pointer::is_null\n /// [`offset`]: pointer::offset\n #[doc = concat!(\"[`into_raw`]: \", include_str!(\"../primitive_docs/box_into_raw.md\"))]\n-/// [`drop`]: mem::drop\n /// [`write`]: ptr::write\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n@@ -1026,7 +1025,6 @@ mod prim_str {}\n /// * [`UnwindSafe`]\n /// * [`RefUnwindSafe`]\n ///\n-/// [`Unpin`]: marker::Unpin\n /// [`UnwindSafe`]: panic::UnwindSafe\n /// [`RefUnwindSafe`]: panic::RefUnwindSafe\n ///\n@@ -1405,10 +1403,6 @@ mod prim_ref {}\n ///\n /// *See also the traits [`Fn`], [`FnMut`], and [`FnOnce`].*\n ///\n-/// [`Fn`]: ops::Fn\n-/// [`FnMut`]: ops::FnMut\n-/// [`FnOnce`]: ops::FnOnce\n-///\n /// Function pointers are pointers that point to *code*, not data. They can be called\n /// just like functions. Like references, function pointers are, among other things, assumed to\n /// not be null, so if you want to pass a function pointer over FFI and be able to accommodate null"}, {"sha": "01505e94487b2a629dd7e0d12ecf51efeeaa63d7", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -3,7 +3,6 @@\n use crate::arch::asm;\n use crate::cell::UnsafeCell;\n use crate::cmp;\n-use crate::convert::TryInto;\n use crate::mem;\n use crate::ops::{CoerceUnsized, Deref, DerefMut, Index, IndexMut};\n use crate::ptr::{self, NonNull};"}, {"sha": "d310be6c7a1eb8ba59174cd710518f955cb9f7fb", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -273,8 +273,6 @@ pub mod zircon {\n \n #[cfg(target_os = \"fuchsia\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n-    use crate::convert::TryFrom;\n-\n     // Sleep forever if the timeout is longer than fits in a i64.\n     let deadline = timeout\n         .and_then(|d| {"}, {"sha": "a345af76fa217d791c64a0790cc5a493192d05de", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -7,7 +7,6 @@ mod tests;\n \n use crate::os::unix::prelude::*;\n \n-use crate::convert::TryFrom;\n use crate::error::Error as StdError;\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;"}, {"sha": "e45c380a0bb8497e9af068ec20680d35aa50bc76", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -166,7 +166,6 @@ impl Process {\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        use crate::default::Default;\n         use crate::sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();\n@@ -199,7 +198,6 @@ impl Process {\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        use crate::default::Default;\n         use crate::sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();"}, {"sha": "cb24caa1e8a60ea93f699fa2d47b924d99216382", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -2,7 +2,6 @@\n mod tests;\n \n use crate::cmp;\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, BorrowedCursor, ErrorKind, IoSlice, IoSliceMut};\n use crate::mem;"}, {"sha": "5376c4ec9c325281a9b6bad8b96c48185de9e9cf", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,9 +1,8 @@\n use std::any::{Any, TypeId};\n use std::borrow::Borrow;\n use std::cell::RefCell;\n-use std::cmp::{Ord, Ordering, PartialOrd};\n+use std::cmp::Ordering;\n use std::collections::HashMap;\n-use std::convert::AsRef;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::marker::PhantomData;"}, {"sha": "02cec16b35c4443df158e91050d6b51f9ea455b7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -35,7 +35,6 @@ use rustc_span::{self, ExpnKind};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::collections::BTreeMap;\n-use std::default::Default;\n use std::hash::Hash;\n use std::mem;\n use thin_vec::ThinVec;"}, {"sha": "6d2ce9e2833f4ffaa26494bb7a45bdfe9b4e7e8d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,6 +1,5 @@\n use std::borrow::Cow;\n use std::cell::RefCell;\n-use std::default::Default;\n use std::hash::Hash;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -980,7 +979,7 @@ pub(crate) trait NestedAttributesExt {\n     /// Returns `true` if the attribute list contains a specific `word`\n     fn has_word(self, word: Symbol) -> bool\n     where\n-        Self: std::marker::Sized,\n+        Self: Sized,\n     {\n         <Self as NestedAttributesExt>::get_word_attr(self, word).is_some()\n     }"}, {"sha": "b97bb190dd8cce7671847313f25e67c7d43248f0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,5 +1,4 @@\n use std::collections::BTreeMap;\n-use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;"}, {"sha": "00aadb8e82aebea222a07332da5602d9df337c5d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -36,7 +36,6 @@ use rustc_span::{Span, Symbol};\n use once_cell::sync::Lazy;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n-use std::default::Default;\n use std::fmt::Write;\n use std::ops::{ControlFlow, Range};\n use std::str;"}, {"sha": "463184acaa14f3fa61918c76d9b479e59fda1938", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -38,7 +38,6 @@ pub(crate) use self::context::*;\n pub(crate) use self::span_map::{collect_spans_and_sources, LinkFromSrc};\n \n use std::collections::VecDeque;\n-use std::default::Default;\n use std::fmt::{self, Write};\n use std::fs;\n use std::iter::Peekable;"}, {"sha": "f5b4a3f5abd659ae690b85e68571ee8df2e257e2", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn build_index<'tcx>(\n         // `sort_unstable_by_key` produces lifetime errors\n         let k1 = (&k1.path, k1.name.as_str(), &k1.ty, &k1.parent);\n         let k2 = (&k2.path, k2.name.as_str(), &k2.ty, &k2.parent);\n-        std::cmp::Ord::cmp(&k1, &k2)\n+        Ord::cmp(&k1, &k2)\n     });\n \n     // Set up alias indexes."}, {"sha": "cd6509607d5616c8d140a25c2d57589d20d55d5f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -4,7 +4,6 @@\n \n #![allow(rustc::default_hash_types)]\n \n-use std::convert::From;\n use std::fmt;\n \n use rustc_ast::ast;"}, {"sha": "9fd130c4717b4cc3e143d55b87ac9b6f7da100a0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -69,7 +69,6 @@ extern crate test;\n #[cfg(feature = \"jemalloc\")]\n extern crate jemalloc_sys;\n \n-use std::default::Default;\n use std::env::{self, VarError};\n use std::io::{self, IsTerminal};\n use std::process;"}, {"sha": "b007f9a22c36ff6a1074b606ef018d1369aaea46", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -2,7 +2,6 @@ use anyhow::{Context, Error};\n use curl::easy::Easy;\n use indexmap::IndexMap;\n use std::collections::HashMap;\n-use std::convert::TryInto;\n \n const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];"}, {"sha": "197e9a9965f7d729b4f728b0e4eb641d755e1786", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -57,8 +57,8 @@ mod os_impl {\n             match fs::File::create(&path) {\n                 Ok(file) => {\n                     let exec = is_executable(&path).unwrap_or(false);\n-                    std::mem::drop(file);\n-                    std::fs::remove_file(&path).expect(\"Deleted temp file\");\n+                    drop(file);\n+                    fs::remove_file(&path).expect(\"Deleted temp file\");\n                     // If the file is executable, then we assume that this\n                     // filesystem does not track executability, so skip this check.\n                     return if exec { Unsupported } else { Supported };"}, {"sha": "6fd41e833624fcc3dc94a4bf87812532c1119a31", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -31,7 +31,6 @@\n //! this in the long term.\n \n use crate::walk::{filter_dirs, walk};\n-use std::iter::Iterator;\n use std::path::Path;\n \n // Paths that may contain platform-specific code."}, {"sha": "7547b49ab2a54e82478de82ab204afcb0c2cc95a", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,6 +1,5 @@\n use crate::fmt_list;\n use std::collections::{BTreeMap, BTreeSet, HashMap};\n-use std::convert::TryFrom;\n use std::fmt::{self, Write};\n use std::ops::Range;\n "}, {"sha": "9b613a94c579549af4971575c70d47230755423b", "filename": "src/tools/unicode-table-generator/src/skiplist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fskiplist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fskiplist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fskiplist.rs?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,6 +1,5 @@\n use crate::fmt_list;\n use crate::raw_emitter::RawEmitter;\n-use std::convert::TryInto;\n use std::fmt::Write as _;\n use std::ops::Range;\n "}, {"sha": "a7252a400277013893301b71bc833e02ee27e851", "filename": "tests/ui/hygiene/panic-location.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b34d0e37e2f968f226e2401bcb894207ca1c5/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fpanic-location.run.stderr?ref=ad2b34d0e37e2f968f226e2401bcb894207ca1c5", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'capacity overflow', library/alloc/src/raw_vec.rs:525:5\n+thread 'main' panicked at 'capacity overflow', library/alloc/src/raw_vec.rs:524:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}