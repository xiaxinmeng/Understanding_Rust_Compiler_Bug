{"sha": "2f2ea77d88c86a61111f060069146d529065ff2e", "node_id": "C_kwDOAAsO6NoAKDJmMmVhNzdkODhjODZhNjExMTFmMDYwMDY5MTQ2ZDUyOTA2NWZmMmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T14:56:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T14:56:21Z"}, "message": "Move existing_derives into PathKind::Derive", "tree": {"sha": "739e916b8f0df6084e65023573ce587381afe7ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739e916b8f0df6084e65023573ce587381afe7ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f2ea77d88c86a61111f060069146d529065ff2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2ea77d88c86a61111f060069146d529065ff2e", "html_url": "https://github.com/rust-lang/rust/commit/2f2ea77d88c86a61111f060069146d529065ff2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f2ea77d88c86a61111f060069146d529065ff2e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "531060f10384cdcaba1ac7711f492a664fc3299a", "url": "https://api.github.com/repos/rust-lang/rust/commits/531060f10384cdcaba1ac7711f492a664fc3299a", "html_url": "https://github.com/rust-lang/rust/commit/531060f10384cdcaba1ac7711f492a664fc3299a"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "3aaaecd4746cec4e818b5d18bff47ff618c3d242", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=2f2ea77d88c86a61111f060069146d529065ff2e", "patch": "@@ -11,8 +11,10 @@ use crate::{\n };\n \n pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n-    let qualified = match ctx.path_context() {\n-        Some(&PathCompletionCtx { kind: PathKind::Derive, ref qualified, .. }) => qualified,\n+    let (qualified, existing_derives) = match ctx.path_context() {\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Derive { existing_derives }, qualified, ..\n+        }) => (qualified, existing_derives),\n         _ => return,\n     };\n \n@@ -32,7 +34,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                 let add_def = match def {\n                     ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => {\n-                        !ctx.existing_derives.contains(&mac) && mac.is_derive(ctx.db)\n+                        !existing_derives.contains(&mac) && mac.is_derive(ctx.db)\n                     }\n                     ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n                     _ => false,\n@@ -48,7 +50,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n             ctx.process_all_names(&mut |name, def| {\n                 let mac = match def {\n                     ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac))\n-                        if !ctx.existing_derives.contains(&mac) && mac.is_derive(ctx.db) =>\n+                        if !existing_derives.contains(&mac) && mac.is_derive(ctx.db) =>\n                     {\n                         mac\n                     }\n@@ -74,7 +76,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n                         let mut components = vec![derive_completion.label];\n                         components.extend(derive_completion.dependencies.iter().filter(\n                             |&&dependency| {\n-                                !ctx.existing_derives\n+                                !existing_derives\n                                     .iter()\n                                     .map(|it| it.name(ctx.db))\n                                     .any(|it| it.to_smol_str() == dependency)"}, {"sha": "33ae365cff769f8218260943dd468910f728c894", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=2f2ea77d88c86a61111f060069146d529065ff2e", "patch": "@@ -120,7 +120,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n                         kind @ (PathKind::Expr { .. }\n                         | PathKind::Type { .. }\n                         | PathKind::Attr { .. }\n-                        | PathKind::Derive\n+                        | PathKind::Derive { .. }\n                         | PathKind::Pat),\n                     ..\n                 })),\n@@ -188,10 +188,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(ctx.db),\n             (PathKind::Attr { .. }, _) => false,\n \n-            (PathKind::Derive, ItemInNs::Macros(mac)) => {\n-                mac.is_derive(ctx.db) && !ctx.existing_derives.contains(&mac)\n+            (PathKind::Derive { existing_derives }, ItemInNs::Macros(mac)) => {\n+                mac.is_derive(ctx.db) && !existing_derives.contains(&mac)\n             }\n-            (PathKind::Derive, _) => false,\n+            (PathKind::Derive { .. }, _) => false,\n         }\n     };\n "}, {"sha": "781dcfd403d5acf760ffac15c2067512a7aca6fa", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=2f2ea77d88c86a61111f060069146d529065ff2e", "patch": "@@ -101,7 +101,9 @@ pub(super) enum PathKind {\n         kind: AttrKind,\n         annotated_item_kind: Option<SyntaxKind>,\n     },\n-    Derive,\n+    Derive {\n+        existing_derives: FxHashSet<hir::Macro>,\n+    },\n     /// Path in item position, that is inside an (Assoc)ItemList\n     Item {\n         kind: ItemListKind,\n@@ -332,8 +334,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) qualifier_ctx: QualifierCtx,\n \n-    pub(super) existing_derives: FxHashSet<hir::Macro>,\n-\n     pub(super) locals: FxHashMap<Name, Local>,\n }\n \n@@ -556,7 +556,6 @@ impl<'a> CompletionContext<'a> {\n             ident_ctx: IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: None },\n             pattern_ctx: None,\n             qualifier_ctx: Default::default(),\n-            existing_derives: Default::default(),\n             locals,\n         };\n         ctx.expand_and_fill("}, {"sha": "1989c3365f52c1c28f53bd34c6ad7190a594b193", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2ea77d88c86a61111f060069146d529065ff2e/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=2f2ea77d88c86a61111f060069146d529065ff2e", "patch": "@@ -339,22 +339,22 @@ impl<'a> CompletionContext<'a> {\n \n         // Overwrite the path kind for derives\n         if let Some((original_file, file_with_fake_ident, offset, origin_attr)) = derive_ctx {\n-            self.existing_derives = self\n-                .sema\n-                .resolve_derive_macro(&origin_attr)\n-                .into_iter()\n-                .flatten()\n-                .flatten()\n-                .collect();\n-\n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)\n             {\n                 let parent = name_ref.syntax().parent()?;\n                 let (mut nameref_ctx, _, _) =\n                     Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n                 if let Some(NameRefKind::Path(path_ctx)) = &mut nameref_ctx.kind {\n-                    path_ctx.kind = PathKind::Derive;\n+                    path_ctx.kind = PathKind::Derive {\n+                        existing_derives: self\n+                            .sema\n+                            .resolve_derive_macro(&origin_attr)\n+                            .into_iter()\n+                            .flatten()\n+                            .flatten()\n+                            .collect(),\n+                    };\n                 }\n                 self.ident_ctx = IdentContext::NameRef(nameref_ctx);\n                 return Some(());"}]}