{"sha": "c42765a5470ae7a5cce01977fd58062365733ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Mjc2NWE1NDcwYWU3YTVjY2UwMTk3N2ZkNTgwNjIzNjU3MzNlZTk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-18T03:40:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-18T06:29:55Z"}, "message": "Use `elem` instead of `bit` consistently for arguments.", "tree": {"sha": "a2a0770efef0db52cab388df10a22435ca710d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a0770efef0db52cab388df10a22435ca710d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42765a5470ae7a5cce01977fd58062365733ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42765a5470ae7a5cce01977fd58062365733ee9", "html_url": "https://github.com/rust-lang/rust/commit/c42765a5470ae7a5cce01977fd58062365733ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42765a5470ae7a5cce01977fd58062365733ee9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80cb47889e0ad9400b6708ce2b4c4b364b71982", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80cb47889e0ad9400b6708ce2b4c4b364b71982", "html_url": "https://github.com/rust-lang/rust/commit/b80cb47889e0ad9400b6708ce2b4c4b364b71982"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "19a407b2a3bffd95d25192f648745a76dba362f1", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c42765a5470ae7a5cce01977fd58062365733ee9/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42765a5470ae7a5cce01977fd58062365733ee9/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=c42765a5470ae7a5cce01977fd58062365733ee9", "patch": "@@ -61,21 +61,21 @@ impl<T: Idx> BitSet<T> {\n     }\n \n     /// Sets all elements up to and including `size`.\n-    pub fn set_up_to(&mut self, bit: usize) {\n+    pub fn set_up_to(&mut self, elem: usize) {\n         for word in &mut self.words {\n             *word = !0;\n         }\n-        self.clear_above(bit);\n+        self.clear_above(elem);\n     }\n \n-    /// Clear all elements above `bit`.\n-    fn clear_above(&mut self, bit: usize) {\n-        let first_clear_block = bit / WORD_BITS;\n+    /// Clear all elements above `elem`.\n+    fn clear_above(&mut self, elem: usize) {\n+        let first_clear_block = elem / WORD_BITS;\n \n         if first_clear_block < self.words.len() {\n-            // Within `first_clear_block`, the `bit % WORD_BITS` LSBs should\n+            // Within `first_clear_block`, the `elem % WORD_BITS` LSBs should\n             // remain.\n-            let mask = (1 << (bit % WORD_BITS)) - 1;\n+            let mask = (1 << (elem % WORD_BITS)) - 1;\n             self.words[first_clear_block] &= mask;\n \n             // All the blocks above `first_clear_block` are fully cleared.\n@@ -96,10 +96,10 @@ impl<T: Idx> BitSet<T> {\n         self.words.iter().map(|e| e.count_ones() as usize).sum()\n     }\n \n-    /// True if `self` contains the bit `bit`.\n+    /// True if `self` contains `elem`.\n     #[inline]\n-    pub fn contains(&self, bit: T) -> bool {\n-        let (word_index, mask) = word_index_and_mask(bit);\n+    pub fn contains(&self, elem: T) -> bool {\n+        let (word_index, mask) = word_index_and_mask(elem);\n         (self.words[word_index] & mask) != 0\n     }\n \n@@ -118,10 +118,10 @@ impl<T: Idx> BitSet<T> {\n         self.words.iter().all(|a| *a == 0)\n     }\n \n-    /// Insert a bit. Returns true if the bit has changed.\n+    /// Insert `elem`. Returns true if the set has changed.\n     #[inline]\n-    pub fn insert(&mut self, bit: T) -> bool {\n-        let (word_index, mask) = word_index_and_mask(bit);\n+    pub fn insert(&mut self, elem: T) -> bool {\n+        let (word_index, mask) = word_index_and_mask(elem);\n         let word_ref = &mut self.words[word_index];\n         let word = *word_ref;\n         let new_word = word | mask;\n@@ -136,10 +136,10 @@ impl<T: Idx> BitSet<T> {\n         }\n     }\n \n-    /// Returns true if the bit has changed.\n+    /// Returns true if the set has changed.\n     #[inline]\n-    pub fn remove(&mut self, bit: T) -> bool {\n-        let (word_index, mask) = word_index_and_mask(bit);\n+    pub fn remove(&mut self, elem: T) -> bool {\n+        let (word_index, mask) = word_index_and_mask(elem);\n         let word_ref = &mut self.words[word_index];\n         let word = *word_ref;\n         let new_word = word & !mask;\n@@ -547,16 +547,16 @@ impl<T: Idx> GrowableBitSet<T> {\n         GrowableBitSet { bit_set: BitSet::new_empty(bits) }\n     }\n \n-    /// Returns true if the bit has changed.\n+    /// Returns true if the set has changed.\n     #[inline]\n-    pub fn insert(&mut self, bit: T) -> bool {\n-        self.grow(bit);\n-        self.bit_set.insert(bit)\n+    pub fn insert(&mut self, elem: T) -> bool {\n+        self.grow(elem);\n+        self.bit_set.insert(elem)\n     }\n \n     #[inline]\n-    pub fn contains(&self, bit: T) -> bool {\n-        let (word_index, mask) = word_index_and_mask(bit);\n+    pub fn contains(&self, elem: T) -> bool {\n+        let (word_index, mask) = word_index_and_mask(elem);\n         if let Some(word) = self.bit_set.words.get(word_index) {\n             (word & mask) != 0\n         } else {"}]}