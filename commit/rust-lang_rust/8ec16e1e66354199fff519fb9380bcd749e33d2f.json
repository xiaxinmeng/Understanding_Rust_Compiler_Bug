{"sha": "8ec16e1e66354199fff519fb9380bcd749e33d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzE2ZTFlNjYzNTQxOTlmZmY1MTlmYjkzODBiY2Q3NDllMzNkMmY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-09T08:36:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:58Z"}, "message": "green: de-~[].", "tree": {"sha": "394c18630fed4756e6697d44e91584d928da22a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394c18630fed4756e6697d44e91584d928da22a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec16e1e66354199fff519fb9380bcd749e33d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec16e1e66354199fff519fb9380bcd749e33d2f", "html_url": "https://github.com/rust-lang/rust/commit/8ec16e1e66354199fff519fb9380bcd749e33d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec16e1e66354199fff519fb9380bcd749e33d2f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1403b35be70d30fccdf68378b3555d1ce74e852b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1403b35be70d30fccdf68378b3555d1ce74e852b", "html_url": "https://github.com/rust-lang/rust/commit/1403b35be70d30fccdf68378b3555d1ce74e852b"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "2877768dd8bfe1aee20e3fc9aae592e8a4a5e742", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=8ec16e1e66354199fff519fb9380bcd749e33d2f", "patch": "@@ -27,30 +27,30 @@ pub fn event_loop() -> ~EventLoop:Send {\n }\n \n struct BasicLoop {\n-    work: ~[proc():Send],             // pending work\n+    work: Vec<proc():Send>,             // pending work\n     idle: Option<*mut BasicPausable>, // only one is allowed\n-    remotes: ~[(uint, ~Callback:Send)],\n+    remotes: Vec<(uint, ~Callback:Send)>,\n     next_remote: uint,\n-    messages: Exclusive<~[Message]>,\n+    messages: Exclusive<Vec<Message>>,\n }\n \n enum Message { RunRemote(uint), RemoveRemote(uint) }\n \n impl BasicLoop {\n     fn new() -> BasicLoop {\n         BasicLoop {\n-            work: ~[],\n+            work: vec![],\n             idle: None,\n             next_remote: 0,\n-            remotes: ~[],\n-            messages: Exclusive::new(~[]),\n+            remotes: vec![],\n+            messages: Exclusive::new(vec![]),\n         }\n     }\n \n     /// Process everything in the work queue (continually)\n     fn work(&mut self) {\n         while self.work.len() > 0 {\n-            for work in replace(&mut self.work, ~[]).move_iter() {\n+            for work in replace(&mut self.work, vec![]).move_iter() {\n                 work();\n             }\n         }\n@@ -60,7 +60,7 @@ impl BasicLoop {\n         let messages = unsafe {\n             self.messages.with(|messages| {\n                 if messages.len() > 0 {\n-                    Some(replace(messages, ~[]))\n+                    Some(replace(messages, vec![]))\n                 } else {\n                     None\n                 }\n@@ -165,12 +165,12 @@ impl EventLoop for BasicLoop {\n }\n \n struct BasicRemote {\n-    queue: Exclusive<~[Message]>,\n+    queue: Exclusive<Vec<Message>>,\n     id: uint,\n }\n \n impl BasicRemote {\n-    fn new(queue: Exclusive<~[Message]>, id: uint) -> BasicRemote {\n+    fn new(queue: Exclusive<Vec<Message>>, id: uint) -> BasicRemote {\n         BasicRemote { queue: queue, id: id }\n     }\n }"}, {"sha": "820627b6b7d13d8d395f04449926b90248608a06", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=8ec16e1e66354199fff519fb9380bcd749e33d2f", "patch": "@@ -195,6 +195,7 @@\n // NB this does *not* include globs, please keep it that way.\n #![feature(macro_rules, phase)]\n #![allow(visible_private_types)]\n+#![deny(deprecated_owned_vector)]\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;\n@@ -209,7 +210,6 @@ use std::rt;\n use std::sync::atomics::{SeqCst, AtomicUint, INIT_ATOMIC_UINT};\n use std::sync::deque;\n use std::task::TaskOpts;\n-use std::slice;\n use std::sync::arc::UnsafeArc;\n \n use sched::{Shutdown, Scheduler, SchedHandle, TaskFromFriend, NewNeighbor};\n@@ -318,9 +318,9 @@ impl PoolConfig {\n /// used to keep the pool alive and also reap the status from the pool.\n pub struct SchedPool {\n     id: uint,\n-    threads: ~[Thread<()>],\n-    handles: ~[SchedHandle],\n-    stealers: ~[deque::Stealer<~task::GreenTask>],\n+    threads: Vec<Thread<()>>,\n+    handles: Vec<SchedHandle>,\n+    stealers: Vec<deque::Stealer<~task::GreenTask>>,\n     next_friend: uint,\n     stack_pool: StackPool,\n     deque_pool: deque::BufferPool<~task::GreenTask>,\n@@ -356,9 +356,9 @@ impl SchedPool {\n         // The pool of schedulers that will be returned from this function\n         let (p, state) = TaskState::new();\n         let mut pool = SchedPool {\n-            threads: ~[],\n-            handles: ~[],\n-            stealers: ~[],\n+            threads: vec![],\n+            handles: vec![],\n+            stealers: vec![],\n             id: unsafe { POOL_ID.fetch_add(1, SeqCst) },\n             sleepers: SleeperList::new(),\n             stack_pool: StackPool::new(),\n@@ -371,8 +371,14 @@ impl SchedPool {\n \n         // Create a work queue for each scheduler, ntimes. Create an extra\n         // for the main thread if that flag is set. We won't steal from it.\n-        let arr = slice::from_fn(nscheds, |_| pool.deque_pool.deque());\n-        let (workers, stealers) = slice::unzip(arr.move_iter());\n+        let mut workers = Vec::with_capacity(nscheds);\n+        let mut stealers = Vec::with_capacity(nscheds);\n+\n+        for _ in range(0, nscheds) {\n+            let (w, s) = pool.deque_pool.deque();\n+            workers.push(w);\n+            stealers.push(s);\n+        }\n         pool.stealers = stealers;\n \n         // Now that we've got all our work queues, create one scheduler per\n@@ -420,7 +426,7 @@ impl SchedPool {\n         }\n \n         // Jettison the task away!\n-        self.handles[idx].send(TaskFromFriend(task));\n+        self.handles.get_mut(idx).send(TaskFromFriend(task));\n     }\n \n     /// Spawns a new scheduler into this M:N pool. A handle is returned to the\n@@ -466,7 +472,7 @@ impl SchedPool {\n     /// This only waits for all tasks in *this pool* of schedulers to exit, any\n     /// native tasks or extern pools will not be waited on\n     pub fn shutdown(mut self) {\n-        self.stealers = ~[];\n+        self.stealers = vec![];\n \n         // Wait for everyone to exit. We may have reached a 0-task count\n         // multiple times in the past, meaning there could be several buffered\n@@ -478,10 +484,10 @@ impl SchedPool {\n         }\n \n         // Now that everyone's gone, tell everything to shut down.\n-        for mut handle in replace(&mut self.handles, ~[]).move_iter() {\n+        for mut handle in replace(&mut self.handles, vec![]).move_iter() {\n             handle.send(Shutdown);\n         }\n-        for thread in replace(&mut self.threads, ~[]).move_iter() {\n+        for thread in replace(&mut self.threads, vec![]).move_iter() {\n             thread.join();\n         }\n     }"}, {"sha": "9971dfee828157e0c5f5a05af6138705e62d0d73", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=8ec16e1e66354199fff519fb9380bcd749e33d2f", "patch": "@@ -49,7 +49,7 @@ pub struct Scheduler {\n     work_queue: deque::Worker<~GreenTask>,\n     /// Work queues for the other schedulers. These are created by\n     /// cloning the core work queues.\n-    work_queues: ~[deque::Stealer<~GreenTask>],\n+    work_queues: Vec<deque::Stealer<~GreenTask>>,\n     /// The queue of incoming messages from other schedulers.\n     /// These are enqueued by SchedHandles after which a remote callback\n     /// is triggered to handle the message.\n@@ -125,7 +125,7 @@ impl Scheduler {\n     pub fn new(pool_id: uint,\n                event_loop: ~EventLoop:Send,\n                work_queue: deque::Worker<~GreenTask>,\n-               work_queues: ~[deque::Stealer<~GreenTask>],\n+               work_queues: Vec<deque::Stealer<~GreenTask>>,\n                sleeper_list: SleeperList,\n                state: TaskState)\n         -> Scheduler {\n@@ -138,7 +138,7 @@ impl Scheduler {\n     pub fn new_special(pool_id: uint,\n                        event_loop: ~EventLoop:Send,\n                        work_queue: deque::Worker<~GreenTask>,\n-                       work_queues: ~[deque::Stealer<~GreenTask>],\n+                       work_queues: Vec<deque::Stealer<~GreenTask>>,\n                        sleeper_list: SleeperList,\n                        run_anything: bool,\n                        friend: Option<SchedHandle>,\n@@ -502,7 +502,7 @@ impl Scheduler {\n         let len = work_queues.len();\n         let start_index = self.rng.gen_range(0, len);\n         for index in range(0, len).map(|i| (i + start_index) % len) {\n-            match work_queues[index].steal() {\n+            match work_queues.get_mut(index).steal() {\n                 deque::Data(task) => {\n                     rtdebug!(\"found task by stealing\");\n                     return Some(task)\n@@ -1137,7 +1137,7 @@ mod test {\n             let mut pool = BufferPool::new();\n             let (normal_worker, normal_stealer) = pool.deque();\n             let (special_worker, special_stealer) = pool.deque();\n-            let queues = ~[normal_stealer, special_stealer];\n+            let queues = vec![normal_stealer, special_stealer];\n             let (_p, state) = TaskState::new();\n \n             // Our normal scheduler\n@@ -1326,7 +1326,7 @@ mod test {\n     #[test]\n     fn multithreading() {\n         run(proc() {\n-            let mut rxs = ~[];\n+            let mut rxs = vec![];\n             for _ in range(0, 10) {\n                 let (tx, rx) = channel();\n                 spawn(proc() {"}, {"sha": "1f06ba379f0fa00c9c8a27a341a1430c5f9aaac4", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec16e1e66354199fff519fb9380bcd749e33d2f/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=8ec16e1e66354199fff519fb9380bcd749e33d2f", "patch": "@@ -126,13 +126,13 @@ impl Drop for Stack {\n pub struct StackPool {\n     // Ideally this would be some datastructure that preserved ordering on\n     // Stack.min_size.\n-    stacks: ~[Stack],\n+    stacks: Vec<Stack>,\n }\n \n impl StackPool {\n     pub fn new() -> StackPool {\n         StackPool {\n-            stacks: ~[],\n+            stacks: vec![],\n         }\n     }\n "}]}