{"sha": "b247d176297f85c01e89c64d6058dbdd539cb95a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDdkMTc2Mjk3Zjg1YzAxZTg5YzY0ZDYwNThkYmRkNTM5Y2I5NWE=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T13:36:55Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T13:36:55Z"}, "message": "bigint: remove unnecessary method implements", "tree": {"sha": "b87c751091ad2f5d08dad46ba9117eab1bd063e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87c751091ad2f5d08dad46ba9117eab1bd063e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b247d176297f85c01e89c64d6058dbdd539cb95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b247d176297f85c01e89c64d6058dbdd539cb95a", "html_url": "https://github.com/rust-lang/rust/commit/b247d176297f85c01e89c64d6058dbdd539cb95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b247d176297f85c01e89c64d6058dbdd539cb95a/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d698d544953c7fc03a8bf10ea9423e47732ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d698d544953c7fc03a8bf10ea9423e47732ab8", "html_url": "https://github.com/rust-lang/rust/commit/36d698d544953c7fc03a8bf10ea9423e47732ab8"}], "stats": {"total": 42, "additions": 0, "deletions": 42}, "files": [{"sha": "f15f4db2ebdb67749b70961da24330a4341d5dc6", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b247d176297f85c01e89c64d6058dbdd539cb95a/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b247d176297f85c01e89c64d6058dbdd539cb95a/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=b247d176297f85c01e89c64d6058dbdd539cb95a", "patch": "@@ -88,14 +88,10 @@ pub struct BigUint {\n }\n \n impl Eq for BigUint {\n-\n     fn eq(&self, other: &BigUint) -> bool { self.equals(other) }\n-\n-    fn ne(&self, other: &BigUint) -> bool { !self.equals(other) }\n }\n \n impl TotalEq for BigUint {\n-\n     fn equals(&self, other: &BigUint) -> bool {\n         match self.cmp(other) { Equal => true, _ => false }\n     }\n@@ -106,18 +102,6 @@ impl Ord for BigUint {\n     fn lt(&self, other: &BigUint) -> bool {\n         match self.cmp(other) { Less => true, _ => false}\n     }\n-\n-    fn le(&self, other: &BigUint) -> bool {\n-        match self.cmp(other) { Less | Equal => true, _ => false }\n-    }\n-\n-    fn ge(&self, other: &BigUint) -> bool {\n-        match self.cmp(other) { Greater | Equal => true, _ => false }\n-    }\n-\n-    fn gt(&self, other: &BigUint) -> bool {\n-        match self.cmp(other) { Greater => true, _ => false }\n-    }\n }\n \n impl TotalOrd for BigUint {\n@@ -710,18 +694,6 @@ impl Ord for Sign {\n     fn lt(&self, other: &Sign) -> bool {\n         match self.cmp(other) { Less => true, _ => false}\n     }\n-\n-    fn le(&self, other: &Sign) -> bool {\n-        match self.cmp(other) { Less | Equal => true, _ => false }\n-    }\n-\n-    fn ge(&self, other: &Sign) -> bool {\n-        match self.cmp(other) { Greater | Equal => true, _ => false }\n-    }\n-\n-    fn gt(&self, other: &Sign) -> bool {\n-        match self.cmp(other) { Greater => true, _ => false }\n-    }\n }\n \n impl TotalEq for Sign {\n@@ -762,8 +734,6 @@ pub struct BigInt {\n impl Eq for BigInt {\n \n     fn eq(&self, other: &BigInt) -> bool { self.equals(other) }\n-\n-    fn ne(&self, other: &BigInt) -> bool { !self.equals(other) }\n }\n \n impl TotalEq for BigInt {\n@@ -778,18 +748,6 @@ impl Ord for BigInt {\n     fn lt(&self, other: &BigInt) -> bool {\n         match self.cmp(other) { Less => true, _ => false}\n     }\n-\n-    fn le(&self, other: &BigInt) -> bool {\n-        match self.cmp(other) { Less | Equal => true, _ => false }\n-    }\n-\n-    fn ge(&self, other: &BigInt) -> bool {\n-        match self.cmp(other) { Greater | Equal => true, _ => false }\n-    }\n-\n-    fn gt(&self, other: &BigInt) -> bool {\n-        match self.cmp(other) { Greater => true, _ => false }\n-    }\n }\n \n impl TotalOrd for BigInt {"}]}