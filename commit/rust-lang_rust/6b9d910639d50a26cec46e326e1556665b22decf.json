{"sha": "6b9d910639d50a26cec46e326e1556665b22decf", "node_id": "C_kwDOAAsO6NoAKDZiOWQ5MTA2MzlkNTBhMjZjZWM0NmUzMjZlMTU1NjY2NWIyMmRlY2Y", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-05T23:04:09Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-20T18:54:31Z"}, "message": "Point at source of trait bound obligations in more places\n\nBe more thorough in using `ItemObligation` and `BindingObligation` when\nevaluating obligations so that we can point at trait bounds that\nintroduced unfulfilled obligations. We no longer incorrectly point at\nunrelated trait bounds (`substs-ppaux.verbose.stderr`).\n\nIn particular, we now point at trait bounds on method calls.\n\nWe no longer point at \"obvious\" obligation sources (we no longer have a\nnote pointing at `Trait` saying \"required by a bound in `Trait`\", like\nin `associated-types-no-suitable-supertrait*`).\n\nAddress part of #89418.", "tree": {"sha": "773eff83fdd65cbe5b397373665889c97d4eccb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773eff83fdd65cbe5b397373665889c97d4eccb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b9d910639d50a26cec46e326e1556665b22decf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9d910639d50a26cec46e326e1556665b22decf", "html_url": "https://github.com/rust-lang/rust/commit/6b9d910639d50a26cec46e326e1556665b22decf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b9d910639d50a26cec46e326e1556665b22decf/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93542a8240c5f926ac5f3f99cef99366082f9c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/93542a8240c5f926ac5f3f99cef99366082f9c2b", "html_url": "https://github.com/rust-lang/rust/commit/93542a8240c5f926ac5f3f99cef99366082f9c2b"}], "stats": {"total": 971, "additions": 550, "deletions": 421}, "files": [{"sha": "5f4d16fa8b9ac5139ed4488166b84b29fbb449d7", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -2113,10 +2113,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         None\n                     },\n                     self.tcx.generics_of(owner.to_def_id()),\n+                    hir.span(hir_id),\n                 )\n             });\n+\n+        let span = match generics {\n+            // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n+            // for other diagnostics, so we need to recover it here.\n+            Some((_, _, node)) if span.is_dummy() => node,\n+            _ => span,\n+        };\n+\n         let type_param_span = match (generics, bound_kind) {\n-            (Some((_, ref generics)), GenericKind::Param(ref param)) => {\n+            (Some((_, ref generics, _)), GenericKind::Param(ref param)) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n@@ -2153,7 +2162,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         let new_lt = generics\n             .as_ref()\n-            .and_then(|(parent_g, g)| {\n+            .and_then(|(parent_g, g, _)| {\n                 let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n                 let mut lts_names = g\n                     .params\n@@ -2175,7 +2184,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics\n             .as_ref()\n-            .and_then(|(_, g)| g.params.first())\n+            .and_then(|(_, g, _)| g.params.first())\n             .and_then(|param| param.def_id.as_local())\n             .map(|def_id| {\n                 ("}, {"sha": "2aaebed28ced759939b87cb4269f916357896325", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -192,14 +192,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ObligationCauseCode::MatchImpl(parent, ..) => &parent.code,\n                 _ => &cause.code,\n             };\n-            if let ObligationCauseCode::ItemObligation(item_def_id) = *code {\n+            if let (ObligationCauseCode::ItemObligation(item_def_id), None) =\n+                (code, override_error_code)\n+            {\n                 // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n                 // lifetime as above, but called using a fully-qualified path to the method:\n                 // `Foo::qux(bar)`.\n                 let mut v = TraitObjectVisitor(FxHashSet::default());\n                 v.visit_ty(param.param_ty);\n                 if let Some((ident, self_ty)) =\n-                    self.get_impl_ident_and_self_ty_from_trait(item_def_id, &v.0)\n+                    self.get_impl_ident_and_self_ty_from_trait(*item_def_id, &v.0)\n                 {\n                     if self.suggest_constrain_dyn_trait_in_impl(&mut err, &v.0, ident, self_ty) {\n                         override_error_code = Some(ident);"}, {"sha": "6d2323abba465e152e76ed1c23538c725626fb4e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -9,7 +9,9 @@ use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n-pub use rustc_infer::traits::util::*;\n+pub use rustc_infer::traits::{self, util::*};\n+\n+use std::iter;\n \n ///////////////////////////////////////////////////////////////////////////\n // `TraitAliasExpander` iterator\n@@ -229,11 +231,16 @@ pub fn predicates_for_generics<'tcx>(\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n     debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n \n-    generic_bounds.predicates.into_iter().map(move |predicate| Obligation {\n-        cause: cause.clone(),\n-        recursion_depth,\n-        param_env,\n-        predicate,\n+    iter::zip(generic_bounds.predicates, generic_bounds.spans).map(move |(predicate, span)| {\n+        let cause = match cause.code {\n+            traits::ItemObligation(def_id) if !span.is_dummy() => traits::ObligationCause::new(\n+                cause.span,\n+                cause.body_id,\n+                traits::BindingObligation(def_id, span),\n+            ),\n+            _ => cause.clone(),\n+        };\n+        Obligation { cause, recursion_depth, param_env, predicate }\n     })\n }\n "}, {"sha": "2a66684e2a2a0937a498866a831992877c24f02e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -709,7 +709,12 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n             .map(|((pred, span), origin_def_id)| {\n-                let cause = self.cause(traits::BindingObligation(origin_def_id, span));\n+                let code = if span.is_dummy() {\n+                    traits::MiscObligation\n+                } else {\n+                    traits::BindingObligation(origin_def_id, span)\n+                };\n+                let cause = self.cause(code);\n                 traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())"}, {"sha": "894955703757f363105942feba04abc258ab9fb0", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -1385,12 +1385,13 @@ pub fn check_type_bounds<'tcx>(\n \n         let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n         let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-        let mk_cause = |span| {\n-            ObligationCause::new(\n-                impl_ty_span,\n-                impl_ty_hir_id,\n-                ObligationCauseCode::BindingObligation(trait_ty.def_id, span),\n-            )\n+        let mk_cause = |span: Span| {\n+            let code = if span.is_dummy() {\n+                traits::MiscObligation\n+            } else {\n+                traits::BindingObligation(trait_ty.def_id, span)\n+            };\n+            ObligationCause::new(impl_ty_span, impl_ty_hir_id, code)\n         };\n \n         let obligations = tcx"}, {"sha": "142a0a8fc2501e922c4a35058f87537cec07aed7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -586,38 +586,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Given a fully substituted set of bounds (`generic_bounds`), and the values with which each\n-    /// type/region parameter was instantiated (`substs`), creates and registers suitable\n-    /// trait/region obligations.\n-    ///\n-    /// For example, if there is a function:\n-    ///\n-    /// ```\n-    /// fn foo<'a,T:'a>(...)\n-    /// ```\n-    ///\n-    /// and a reference:\n-    ///\n-    /// ```\n-    /// let f = foo;\n-    /// ```\n-    ///\n-    /// Then we will create a fresh region variable `'$0` and a fresh type variable `$1` for `'a`\n-    /// and `T`. This routine will add a region obligation `$1:'$0` and register it locally.\n-    pub fn add_obligations_for_parameters(\n-        &self,\n-        cause: traits::ObligationCause<'tcx>,\n-        predicates: ty::InstantiatedPredicates<'tcx>,\n-    ) {\n-        assert!(!predicates.has_escaping_bound_vars());\n-\n-        debug!(\"add_obligations_for_parameters(predicates={:?})\", predicates);\n-\n-        for obligation in traits::predicates_for_generics(cause, self.param_env, predicates) {\n-            self.register_predicate(obligation);\n-        }\n-    }\n-\n     // FIXME(arielb1): use this instead of field.ty everywhere\n     // Only for fields! Returns <none> for methods>\n     // Indifferent to privacy flags\n@@ -1522,20 +1490,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n     #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n-    fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n-        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n+    crate fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n-        for (i, mut obligation) in traits::predicates_for_generics(\n+        for obligation in traits::predicates_for_generics(\n             traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n             self.param_env,\n             bounds,\n-        )\n-        .enumerate()\n-        {\n-            // This makes the error point at the bound, but we want to point at the argument\n-            if let Some(span) = spans.get(i) {\n-                obligation.cause.make_mut().code = traits::BindingObligation(def_id, *span);\n-            }\n+        ) {\n             self.register_predicate(obligation);\n         }\n     }"}, {"sha": "a119a6838b8d2f3e900d74f7bd8a144b8daa5c01", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -509,10 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            let (bounds, _) = self.instantiate_bounds(path_span, did, substs);\n-            let cause =\n-                traits::ObligationCause::new(path_span, self.body_id, traits::ItemObligation(did));\n-            self.add_obligations_for_parameters(cause, bounds);\n+            self.add_required_obligations(path_span, did, substs);\n \n             Some((variant, ty))\n         } else {"}, {"sha": "dabfe92190b33ade90375e7742bca4c22da47513", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -120,7 +120,12 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n         if illegal_sized_bound.is_none() {\n-            self.add_obligations(self.tcx.mk_fn_ptr(method_sig), all_substs, method_predicates);\n+            self.add_obligations(\n+                self.tcx.mk_fn_ptr(method_sig),\n+                all_substs,\n+                method_predicates,\n+                pick.item.def_id,\n+            );\n         }\n \n         // Create the final `MethodCallee`.\n@@ -471,16 +476,23 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         fty: Ty<'tcx>,\n         all_substs: SubstsRef<'tcx>,\n         method_predicates: ty::InstantiatedPredicates<'tcx>,\n+        def_id: DefId,\n     ) {\n         debug!(\n-            \"add_obligations: fty={:?} all_substs={:?} method_predicates={:?}\",\n-            fty, all_substs, method_predicates\n+            \"add_obligations: fty={:?} all_substs={:?} method_predicates={:?} def_id={:?}\",\n+            fty, all_substs, method_predicates, def_id\n         );\n \n-        self.add_obligations_for_parameters(\n-            traits::ObligationCause::misc(self.span, self.body_id),\n+        // FIXME: could replace with the following, but we already calculated `method_predicates`,\n+        // so we just call `predicates_for_generics` directly to avoid redoing work.\n+        // `self.add_required_obligations(self.span, def_id, &all_substs);`\n+        for obligation in traits::predicates_for_generics(\n+            traits::ObligationCause::new(self.span, self.body_id, traits::ItemObligation(def_id)),\n+            self.param_env,\n             method_predicates,\n-        );\n+        ) {\n+            self.register_predicate(obligation);\n+        }\n \n         // this is a projection from a trait reference, so we have to\n         // make sure that the trait reference inputs are well-formed."}, {"sha": "498c9f7c64ef6b85f26e7230b5a4066e0e2d83b6", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -1990,16 +1990,12 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         // prove that the trait applies to the types that were\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n-        let mut span = tcx.def_span(def_id);\n-        if tcx.sess.source_map().is_local_span(span) {\n-            // `guess_head_span` reads the actual source file from\n-            // disk to try to determine the 'head' snippet of the span.\n-            // Don't do this for a span that comes from a file outside\n-            // of our crate, since this would make our query output\n-            // (and overall crate metadata) dependent on the\n-            // *current* state of an external file.\n-            span = tcx.sess.source_map().guess_head_span(span);\n-        }\n+        //\n+        // We use a DUMMY_SP here as a way to signal trait bounds that come\n+        // from the trait itself that *shouldn't* be shown as the source of\n+        // an obligation and instead be skipped. Otherwise we'd use\n+        // `tcx.def_span(def_id);`\n+        let span = rustc_span::DUMMY_SP;\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n                 ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),"}, {"sha": "4ecae471ec2da3909602ebca1931fec9685c623a", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,13 +5,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Send`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub unsafe auto trait Send {\n-LL | |     // empty.\n-LL | | }\n-   | |_^ required by this bound in `Send`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n@@ -24,17 +17,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Iterator`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL | / pub trait Iterator {\n-LL | |     /// The type of the elements being iterated over.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Item;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ required by this bound in `Iterator`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n@@ -47,17 +29,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Sync`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub unsafe auto trait Sync {\n-LL | |     // FIXME(estebank): once support to add notes in `rustc_on_unimplemented`\n-LL | |     // lands in beta, and it has been extended to check whether a closure is\n-LL | |     // anywhere in the requirement chain, extend it as such (#48534):\n-...  |\n-LL | |     // Empty\n-LL | | }\n-   | |_^ required by this bound in `Sync`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {"}, {"sha": "4e2313bd4e4a90709aabcdc0101a2e2cd1fe28db", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,17 +5,6 @@ LL |     type A: Iterator<Item: Debug>;\n    |                            ^^^^^ `<<Self as Case1>::A as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `<<Self as Case1>::A as Iterator>::Item`\n-note: required by a bound in `Debug`\n-  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL | / pub trait Debug {\n-LL | |     /// Formats the value using the given formatter.\n-LL | |     ///\n-LL | |     /// # Examples\n-...  |\n-LL | |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-LL | | }\n-   | |_^ required by this bound in `Debug`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n@@ -27,17 +16,6 @@ error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is n\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n    |                                      ^^^^^^^ the trait `Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n    |\n-note: required by a bound in `Default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL | / pub trait Default: Sized {\n-LL | |     /// Returns the \"default value\" for a type.\n-LL | |     ///\n-LL | |     /// Default values are often some kind of initial value, identity value, or anything else that\n-...  |\n-LL | |     fn default() -> Self;\n-LL | | }\n-   | |_^ required by this bound in `Default`\n help: consider further restricting the associated type\n    |\n LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }"}, {"sha": "6552c8be7808926e1b4acb7cd25536ed2c708795", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-for-unimpl-trait.rs:4:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "b2ee1b5e6d04527fb56eb6eddb0b65ce4e8d8381", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `T: Get` is not satisfied\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n    |                     ^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-bound.rs:1:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider restricting type parameter `T`\n    |\n LL |     fn uhoh<T: Get>(foo: <T as Get>::Value) {}"}, {"sha": "2e40dbd065d3ef5579d5495b95590646d5e086a0", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait-2.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "da79c7ac77f9d1bf5e64b63a8ad154ef56bde2d3", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n@@ -19,12 +14,6 @@ error[E0277]: the trait bound `(T, U): Get` is not satisfied\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n-   |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2e67c21940fc712c05aebfd3170128e287c54434", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:5:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;"}, {"sha": "83d1a02c876b19e3ca71523aba19fdc147b0005d", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -12,11 +12,11 @@ note: required because it appears within the type `Sleep`\n    |\n LL | struct Sleep(std::marker::PhantomPinned);\n    |        ^^^^^\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error: aborting due to previous error\n "}, {"sha": "de654fdc1a4b5540125520e7825586a083a7f672", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T, A: Allocator> Box<T, A> {\n+   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:7:13\n@@ -31,11 +31,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n-note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T, A: Allocator> Box<T, A> {\n+   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:11:13"}, {"sha": "57902efa2015cb8de239e3d780c9806fd31ae613", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL |     let s = S {\n    = help: the following implementations were found:\n              <Option<T> as Foo>\n              <i32 as Foo>\n-note: required by `S`\n-  --> $DIR/type_wf.rs:6:1\n+note: required by a bound in `S`\n+  --> $DIR/type_wf.rs:6:13\n    |\n LL | struct S<T: Foo> {\n-   | ^^^^^^^^^^^^^^^^\n+   |             ^^^ required by this bound in `S`\n \n error: aborting due to previous error\n "}, {"sha": "8b38d5ff4592cf9a28eede7f4b86a643ce66b7d5", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -8,6 +8,11 @@ LL |     let y = x.or_else(4);\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Option::<T>::or_else`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n \n error: aborting due to previous error\n "}, {"sha": "24db272534730a30c7b9ac40def0c09a48ab648e", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,6 +7,11 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "5b389f24bf15128e287bf32482b5de09ddb12089", "filename": "src/test/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -12,11 +12,6 @@ LL | impl<T: AB> C for T {}\n LL | #[rustc_strict_coherence]\n LL | impl C for u32 {}\n    | ^^^^^^^^^^^^^^\n-note: required by a bound in `C`\n-  --> $DIR/coherence-overlap-trait-alias.rs:11:1\n-   |\n-LL | trait C {}\n-   | ^^^^^^^ required by this bound in `C`\n \n error: aborting due to previous error\n "}, {"sha": "02dce4f7a97e829d1f886d0a8025a41a77d81e64", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -41,11 +41,6 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n-note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:8:1\n-   |\n-LL | pub trait True {}\n-   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26\n@@ -54,11 +49,6 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n-note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:8:1\n-   |\n-LL | pub trait True {}\n-   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0332e82fe0727eefc311ff62320d91826f5c82a2", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83765.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -14,6 +14,11 @@ LL |         self.reference.size()\n    |                        ^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+note: required by a bound in `TensorSize::size`\n+  --> $DIR/issue-83765.rs:9:31\n+   |\n+LL |     fn size(&self) -> [usize; Self::DIM];\n+   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-83765.rs:32:9"}, {"sha": "486a298a9ffe573510cd84273173c418c9751c51", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -6,13 +6,11 @@ LL |     let _ = A;\n    |\n    = help: the following implementations were found:\n              <A<7_usize> as Bar<N>>\n-note: required by `A`\n-  --> $DIR/unused-substs-1.rs:7:1\n+note: required by a bound in `A`\n+  --> $DIR/unused-substs-1.rs:9:11\n    |\n-LL | / struct A<const N: usize>\n-LL | | where\n-LL | |     A<N>: Bar<N>;\n-   | |_________________^\n+LL |     A<N>: Bar<N>;\n+   |           ^^^^^^ required by this bound in `A`\n \n error: aborting due to previous error\n "}, {"sha": "af4576b7a17a2021c927b90dad14ac08b520ce94", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Hash)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n+note: required by `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e4e507be2f24c845162a2487affd0ded03b50feb", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Hash)]\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n+note: required by `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "401df39155d0cdcfbd94372c95debf7855943985", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n+note: required by `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ec92a1360fd0cab5394cbde43bbf66d0e9715bc9", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n+note: required by `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "44504aeb07c55a60f0743437349a45a56db23bf4", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,6 +7,11 @@ LL |     f1.foo(1usize);\n    = help: the following implementations were found:\n              <Bar as Foo<i32>>\n              <Bar as Foo<u8>>\n+note: required by `Foo::foo`\n+  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:2:5\n+   |\n+LL |     fn foo(&self, a: A) -> A {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c0553a37313b0b35c529e676f0e4ab6ca6303c17", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -10,6 +10,11 @@ LL |     f1.foo(1usize);\n              <Bar as Foo<i8>>\n              <Bar as Foo<u16>>\n            and 2 others\n+note: required by `Foo::foo`\n+  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:2:5\n+   |\n+LL |     fn foo(&self, a: A) -> A {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dfffbb182ad31566d1044c3d306506915dcff60c", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -12,11 +12,6 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/E0275.rs:1:1\n-   |\n-LL | trait Foo {}\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "33f966a6e6bdce2d0e7716efc8a5e8dd097cf112", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -29,6 +29,11 @@ LL | impl Into<u32> for Impl {\n    = note: and another `impl` found in the `core` crate:\n            - impl<T, U> Into<U> for T\n              where U: From<T>;\n+note: required by `into`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn into(self) -> T;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53924e24e4638a40107a6c0e31011d9d7b13dbd2", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -20,6 +20,11 @@ LL | |     });\n    | |_____^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n    |\n    = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c5d72d7efefb37fcc3b8694e136a372de15fc4e", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -139,13 +139,6 @@ error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is n\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `Copy` is not implemented for `<<Self as _Tr3>::A as Iterator>::Item`\n    |\n-note: required by a bound in `Copy`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub trait Copy: Clone {\n-LL | |     // Empty.\n-LL | | }\n-   | |_^ required by this bound in `Copy`\n help: consider further restricting the associated type\n    |\n LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {"}, {"sha": "2f29cd5d9e900176a6fa820e796b44a66e6db1e1", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -11,8 +11,9 @@ LL | | {\n ...  |\n LL | |\n LL | | }\n-   | |_^ ...so that the type `T` will meet its required lifetime bounds...\n+   | |_^\n    |\n+   = note: ...so that the type `T` will meet its required lifetime bounds...\n note: ...that is required by this bound\n   --> $DIR/issue-86483.rs:7:16\n    |"}, {"sha": "5db17cb1bf4ec63b8c49109a354762c5dd0d217e", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -2,12 +2,20 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n-   |                   ^ expected struct `Unit4`, found associated type\n+   |                   ^ expected associated type, found struct `Unit4`\n    |\n-   = note:       expected struct `Unit4`\n-           found associated type `<_ as Ty<'_>>::V`\n-   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = note: expected associated type `<_ as Ty<'_>>::V`\n+                       found struct `Unit4`\n+   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4` or calling a method that returns `<_ as Ty<'_>>::V`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `T1::m`\n+  --> $DIR/issue-62203-hrtb-ice.rs:27:51\n+   |\n+LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n+   |        - required by a bound in this\n+LL |     where\n+LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:40:9\n@@ -19,13 +27,21 @@ LL | /         L {\n LL | |\n LL | |             f : |x| { drop(x); Unit4 }\n LL | |         });\n-   | |_________^ expected struct `Unit4`, found struct `Unit3`\n+   | |_________^ expected struct `Unit3`, found struct `Unit4`\n    |\n note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>\n    |                ^^^^^^^^^     ^^^^\n+note: required by a bound in `T1::m`\n+  --> $DIR/issue-62203-hrtb-ice.rs:27:12\n+   |\n+LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n+   |        - required by a bound in this\n+LL |     where\n+LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0369196c9108eda7de5377a4d9d4563762ada94c", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -10,6 +10,15 @@ LL |         .get(&\"key\".into())\n            - impl Borrow<str> for String;\n            - impl<T> Borrow<T> for T\n              where T: ?Sized;\n+note: required by a bound in `HashMap::<K, V, S>::get`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL |         K: Borrow<Q>,\n+   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |         .get::<Q>(&\"key\".into())\n+   |             +++++\n \n error: aborting due to previous error\n "}, {"sha": "efaaeeda2fab6798d18b0b99e1f2eee73d8f9597", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n-note: required by `Box::<T>::new`\n+note: required by a bound in `Box::<T>::new`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn new(x: T) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T> Box<T> {\n+   |      ^ required by this bound in `Box::<T>::new`\n \n error: aborting due to previous error\n "}, {"sha": "696ca402d11f94b6a7b20852ebd14e2036809c72", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -12,6 +12,11 @@ LL | impl<'a, T, S> Set<&'a [T]> for S where\n    |                ^^^^^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>` for `{integer}`\n+note: required by `Set::contains`\n+  --> $DIR/issue-18400.rs:2:5\n+   |\n+LL |     fn contains(&self, _: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd18d46223e69162ae8cdd869df402f0d84b35d7", "filename": "src/test/ui/issues/issue-18611.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `isize: HasState` is not satisfied\n    |\n LL | fn add_state(op: <isize as HasState>::State) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasState` is not implemented for `isize`\n-   |\n-note: required by a bound in `HasState`\n-  --> $DIR/issue-18611.rs:5:1\n-   |\n-LL | trait HasState {\n-   | ^^^^^^^^^^^^^^ required by this bound in `HasState`\n \n error: aborting due to previous error\n "}, {"sha": "6848c3f0d8a546cc01d1b50a7bc78caec63a081d", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,6 +3,12 @@ error[E0277]: the trait bound `X: Ord` is not satisfied\n    |\n LL |     b.sort();\n    |       ^^^^ the trait `Ord` is not implemented for `X`\n+   |\n+note: required by a bound in `slice::<impl [T]>::sort`\n+  --> $SRC_DIR/alloc/src/slice.rs:LL:COL\n+   |\n+LL |         T: Ord,\n+   |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n \n error: aborting due to previous error\n "}, {"sha": "29352141404199317fab24d480df91af27c55fd7", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -21,11 +21,6 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:36\n@@ -41,11 +36,6 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n@@ -66,11 +56,6 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n-note: required by a bound in `Baz`\n-  --> $DIR/issue-20413.rs:20:1\n-   |\n-LL | trait Baz {\n-   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n@@ -91,11 +76,6 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n-note: required by a bound in `Baz`\n-  --> $DIR/issue-20413.rs:20:1\n-   |\n-LL | trait Baz {\n-   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n@@ -116,11 +96,6 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n-note: required by a bound in `Bar`\n-  --> $DIR/issue-20413.rs:16:1\n-   |\n-LL | trait Bar {\n-   | ^^^^^^^^^ required by this bound in `Bar`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n@@ -141,11 +116,6 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n-note: required by a bound in `Bar`\n-  --> $DIR/issue-20413.rs:16:1\n-   |\n-LL | trait Bar {\n-   | ^^^^^^^^^ required by this bound in `Bar`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e869180d2e6866f9a4558003b9fcf2b824cdd6b6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -6,11 +6,11 @@ LL | #[derive(Hash)]\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n+note: required by `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dfabde9abc97809921a2cc60647bd29086df890d", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,11 +5,6 @@ LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-21974.rs:6:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ae8233d5c76e6aa2011bead773b94998c719182c", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,6 +7,11 @@ LL |     \"\".chars().fold(|_, _| (), ());\n    |                required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<(_, char)>` is not implemented for `()`\n+note: required by a bound in `fold`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(B, Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `fold`\n \n error: aborting due to previous error\n "}, {"sha": "fa59da852f9018019191a59dc7e3ac22efc0b6b0", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,11 +5,6 @@ LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : T\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot satisfy `T0: Trait0<'l0>`\n-note: required by a bound in `Trait0`\n-  --> $DIR/issue-24424.rs:2:1\n-   |\n-LL | trait Trait0<'l0>  {}\n-   | ^^^^^^^^^^^^^^^^^ required by this bound in `Trait0`\n \n error: aborting due to previous error\n "}, {"sha": "48061ae54ae206ebff1f353987d860789eee296f", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -9,8 +9,6 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n     })\n         .cloned()\n         //~^ ERROR type mismatch resolving\n-        //~| expected type `u8`\n-        //~| found reference `&_`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "982b6118ce659bb2fe80aea8a5d4f0cfd53aa681", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -2,13 +2,18 @@ error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n-   |          ^^^^^^ expected `u8`, found reference\n+   |          ^^^^^^ expected reference, found `u8`\n    |\n-   = note:   expected type `u8`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                   found type `u8`\n+note: required by a bound in `cloned`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized + Iterator<Item = &'a T>,\n+   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-31173.rs:14:10\n+  --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n    |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` due to unsatisfied trait bounds"}, {"sha": "55cb7211ebda6d22b6875127238b7da4f8ee86d0", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -2,10 +2,15 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected tuple, found reference\n+   |                                    ^^^^^^ expected reference, found tuple\n    |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                  found tuple `(&_, &_)`\n+note: required by a bound in `cloned`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized + Iterator<Item = &'a T>,\n+   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14"}, {"sha": "49d6709a8601737aec47b3b09c79e884a90470c3", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -14,6 +14,11 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb0c80f8f0d1ea23554ee1a2dca4c08db7a1d333", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,6 +7,12 @@ LL |         None::<()>.map(Self::f);\n    |                    --- ^^^^^^^ expected function that takes a single 0-tuple as argument\n    |                    |\n    |                    required by a bound introduced by this call\n+   |\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "237b2b9e798593484377335a816f21af0b527eab", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -8,6 +8,12 @@ LL |         self.foo.map(Foo::new)\n    |                  --- ^^^^^^^^ expected function that takes 1 argument\n    |                  |\n    |                  required by a bound introduced by this call\n+   |\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "b1b06a25179b902dcb576cd1732eaaf9df9e9b72", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -11,11 +11,11 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Tt`\n-note: required by a bound in `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:24\n+note: required by `Tt::const_val`\n+  --> $DIR/issue-54954.rs:5:5\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |                        ^ required by this bound in `Tt::const_val`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a96709cbacdb5b5afc406f97550db2c82849af0", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,6 +5,11 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n    |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n@@ -13,6 +18,11 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n    |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e4471b1fec04ca0b06b884d3530586f2c55e8f0", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -18,6 +18,11 @@ LL | impl Test<u32> for u64 {\n ...\n LL | impl Test<u64> for u64 {\n    | ^^^^^^^^^^^^^^^^^^^^^^\n+note: required by `Test::test`\n+  --> $DIR/issue-69455.rs:8:5\n+   |\n+LL |     fn test(self, rhs: Rhs) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider specifying the type argument in the method call\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum::<S>()));"}, {"sha": "b53923eec1d8868a5d4da3b0e364120811f9801f", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -18,6 +18,14 @@ LL | impl<T> Element<()> for T {\n ...\n LL | impl<T: Element<S>, S> Element<[S; 3]> for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `Foo::foo`\n+  --> $DIR/issue-69683.rs:15:9\n+   |\n+LL |     u8: Element<I>,\n+   |         ^^^^^^^^^^ required by this bound in `Foo::foo`\n+LL | {\n+LL |     fn foo(self, x: <u8 as Element<I>>::Array);\n+   |        --- required by a bound in this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "920a4548a9ae97a8e475d2cce5b3382ff48cd5c4", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -27,6 +27,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-72690.rs:12:6\n@@ -63,6 +68,11 @@ LL |     |x| String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:18:17\n@@ -77,6 +87,11 @@ LL |     let _ = \"x\".as_ref();\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:22:5\n@@ -107,6 +122,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:29:5\n@@ -137,6 +157,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:38:5\n@@ -167,6 +192,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n@@ -197,6 +227,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:54:5\n@@ -227,6 +262,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:63:5\n@@ -257,6 +297,11 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "1b97f8d818a453a0c400ed3211e9742b49b56bb1", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,11 +5,6 @@ LL |     &'a (): Foo,\n    |             ^^^ cannot infer type for reference `&'a ()`\n    |\n    = note: cannot satisfy `&'a (): Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-34979.rs:1:1\n-   |\n-LL | trait Foo {}\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "2eeab801e3d9c4914ecf8b9405e4f47bbdeabbfa", "filename": "src/test/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -11,11 +11,6 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `A`\n-  --> $DIR/region-overlap.rs:4:1\n-   |\n-LL | trait A {}\n-   | ^^^^^^^ required by this bound in `A`\n \n error[E0283]: type annotations needed\n   --> $DIR/region-overlap.rs:6:10\n@@ -30,11 +25,6 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `A`\n-  --> $DIR/region-overlap.rs:4:1\n-   |\n-LL | trait A {}\n-   | ^^^^^^^ required by this bound in `A`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "93d95fadc0bd2a7a27b76c17b46a2ea6efe8e4a5", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -20,6 +20,11 @@ LL | impl Foo for Vec<usize> {\n ...\n LL | impl Foo for Vec<isize> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by `Foo::foo`\n+  --> $DIR/method-ambig-one-trait-unknown-int-type.rs:6:5\n+   |\n+LL |     fn foo(&self) -> isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "fed47e0f1747179ba5fe92d5a06ddabfd0e4074c", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -125,6 +125,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n ...\n LL | fn foo() {}\n    | -------- takes 0 arguments\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -135,6 +141,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |                                                     --- ^^^ expected closure that takes a single 2-tuple as argument\n    |                                                     |\n    |                                                     required by a bound introduced by this call\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -146,6 +158,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n ...\n LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -154,6 +172,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |                                         --- ^^^^^^^^^^^^^^^^^^ expected function that takes 1 argument\n    |                                         |\n    |                                         required by a bound introduced by this call\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "f34ac35c75713764f7d76ffc5049dd49a9dea380", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,6 +5,12 @@ LL |     a.iter().map(|_: (u32, u32)| 45);\n    |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -13,6 +19,12 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -21,6 +33,12 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5"}, {"sha": "a8bcdf5efe91e30214a5f24f844e1d80dfd2f79a", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,6 +5,12 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n+   |\n+note: required by a bound in `filter`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         P: FnMut(&Self::Item) -> bool,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}, {"sha": "d7546a5e39801a87ad58eac68371444c7f672b2d", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -11,6 +11,11 @@ LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "318e9d006a1485c4e354b2ebcbdf70606aea0716", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,7 +4,11 @@ error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-method-type-parameters.rs:8:22\n+   |\n+LL |     fn some_method<A:'static>(self) { }\n+   |                      ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "512a7ab35fbfdead4e829465ae92baface621df9", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -29,7 +29,13 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^ ...so that the type `T` will meet its required lifetime bounds\n+   |              ^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+   |\n+LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n+   |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:14"}, {"sha": "154a6a35a44efdcb25233065f4ef9811b0e9596d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -31,17 +31,6 @@ note: multiple `impl`s satisfying `i32: Add` found\n LL | impl const std::ops::Add for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: and another `impl` found in the `core` crate: `impl Add for i32;`\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error[E0283]: type annotations needed\n   --> $DIR/const-and-non-const-impl.rs:14:6\n@@ -57,17 +46,6 @@ LL | impl std::ops::Add for Int {\n ...\n LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error[E0283]: type annotations needed\n   --> $DIR/const-and-non-const-impl.rs:22:12\n@@ -83,17 +61,6 @@ LL | impl std::ops::Add for Int {\n ...\n LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "04c21101e758b62e1058b35812e3060116abd34f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -42,11 +42,11 @@ error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |\n-note: required by `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:1\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n \n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5"}, {"sha": "04c21101e758b62e1058b35812e3060116abd34f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -42,11 +42,11 @@ error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |\n-note: required by `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:1\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n \n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5"}, {"sha": "08d91d7daf85b8ac13c5a110e5ba21736c1e7ee9", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:5\n+note: required by a bound in `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -20,11 +20,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -36,11 +36,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:5\n+note: required by a bound in `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {\n@@ -52,11 +52,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {"}, {"sha": "a8a4114e4dd9293487a77a66eada69f2d654901e", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -24,6 +24,11 @@ note: required because of the requirements on the impl of `ToA<T>` for `U`\n    |\n LL | impl<T, U> ToA<U> for T\n    |            ^^^^^^     ^\n+note: required by `ToA::to`\n+  --> $DIR/issue-39448.rs:31:5\n+   |\n+LL |     fn to(self) -> T;\n+   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9c3c3646139dc2ec955f70a2570e08d08a621b91", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -20,6 +20,11 @@ LL |     let _ = s.get(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -32,6 +37,11 @@ LL |     let _ = s.get_unchecked(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_unchecked`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+   |                                    ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:17"}, {"sha": "2559ee9eb49b25f3ff0ad8c8ed4a7c12f9aff049", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -44,6 +44,11 @@ LL |     s.get_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_mut`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+   |                       ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -56,6 +61,11 @@ LL |     s.get_unchecked_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+   |                                        ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:5"}, {"sha": "7a80e7270ba36f9682c5b4d7b6707537722b20c8", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `NoClone: Clone` is not satisfied\n LL |     let s = A { a: NoClone };\n    |             ^ the trait `Clone` is not implemented for `NoClone`\n    |\n-note: required by `S`\n-  --> $DIR/struct-path-alias-bounds.rs:3:1\n+note: required by a bound in `S`\n+  --> $DIR/struct-path-alias-bounds.rs:3:13\n    |\n LL | struct S<T: Clone> { a: T }\n-   | ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^ required by this bound in `S`\n \n error: aborting due to previous error\n "}, {"sha": "eabda55e08f35c3d551385df8b4e2f3516155840", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -82,11 +82,11 @@ note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by a bound in `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:30\n+note: required by `Foo::bar`\n+  --> $DIR/substs-ppaux.rs:7:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              ^^ required by this bound in `Foo::bar`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "cd0dfb9c6b4c747fb2e81f9d78c64f577e5049f8", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -82,11 +82,11 @@ note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by a bound in `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:30\n+note: required by `Foo::bar`\n+  --> $DIR/substs-ppaux.rs:7:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              ^^ required by this bound in `Foo::bar`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7ef4895249cec7218f08a5836b9dd9edc0d817c2", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -46,11 +46,11 @@ LL |     Pin::new(x)\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n@@ -59,11 +59,11 @@ LL |     Pin::new(Box::new(x))\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:28:5"}, {"sha": "bc1c69406d139c138add6ee92c32d22ec7292567", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -8,6 +8,11 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\n+note: required by a bound in `core::str::<impl str>::find`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n+   |                        ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::find`\n help: consider borrowing here\n    |\n LL |     println!(\"{:?}\", line.find(&pattern));"}, {"sha": "bee29dbb079dcda48eccd4039dc6ee2b334d3c49", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -8,6 +8,11 @@ LL |     let _: &[i8] = data.into();\n              <[T; LANES] as From<Simd<T, LANES>>>\n              <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`\n+note: required by `into`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn into(self) -> T;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "24c989ec3e86d51f2168e8f87988bdbda7353b4b", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -6,11 +6,14 @@ LL |     let o = Other::new(f);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-note: required by `Other::<'a, G>::new`\n-  --> $DIR/issue-84973.rs:27:5\n+note: required by a bound in `Other::<'a, G>::new`\n+  --> $DIR/issue-84973.rs:25:8\n    |\n+LL |     G: SomeTrait,\n+   |        ^^^^^^^^^ required by this bound in `Other::<'a, G>::new`\n+LL | {\n LL |     pub fn new(g: G) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            --- required by a bound in this\n help: consider borrowing here\n    |\n LL |     let o = Other::new(&f);"}, {"sha": "adb928aa8a3766e73cf79d6fba51de548f4afffb", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -11,11 +11,16 @@ note: the parameter type `T` must be valid for the anonymous lifetime defined he\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds...\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |\n LL |     foo.bar(move |_| {\n    |         ^^^\n+note: ...that is required by this bound\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:11:12\n+   |\n+LL |         F: 'a,\n+   |            ^^\n \n error: aborting due to previous error\n "}, {"sha": "d121932c842e35324a8a8f1060e4713f8dd8ab0c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL |     let fp = BufWriter::new(fp);\n    |              required by a bound introduced by this call\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-note: required by `BufWriter::<W>::new`\n+note: required by a bound in `BufWriter::<W>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n-LL |     pub fn new(inner: W) -> BufWriter<W> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<W: Write> BufWriter<W> {\n+   |         ^^^^^ required by this bound in `BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14"}, {"sha": "2fa69cd5a2c8d51ac988d16af597a23bb93aeb7a", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -6,11 +6,11 @@ LL |         let mut stream_reader = BufReader::new(&stream);\n    |                                 |\n    |                                 required by a bound introduced by this call\n    |\n-note: required by `BufReader::<R>::new`\n+note: required by a bound in `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n-LL |     pub fn new(inner: R) -> BufReader<R> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<R: Read> BufReader<R> {\n+   |         ^^^^ required by this bound in `BufReader::<R>::new`\n help: consider removing the leading `&`-reference\n    |\n LL -         let mut stream_reader = BufReader::new(&stream);"}, {"sha": "8befa4c5f738ba4c507111f57ea7e4d806ad21df", "filename": "src/test/ui/traits/bad-method-typaram-kind.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,6 +4,11 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n+note: required by a bound in `Bar::bar`\n+  --> $DIR/bad-method-typaram-kind.rs:6:14\n+   |\n+LL |     fn bar<T:Send>(&self);\n+   |              ^^^^ required by this bound in `Bar::bar`\n help: consider further restricting this bound\n    |\n LL | fn foo<T:'static + std::marker::Send>() {"}, {"sha": "6f9113fff516193e80bdca725a5e33454a25cf74", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -29,11 +29,11 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n-note: required by `Vec::<T>::new`\n+note: required by a bound in `Vec::<T>::new`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n-LL |     pub const fn new() -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T> Vec<T> {\n+   |      ^ required by this bound in `Vec::<T>::new`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37"}, {"sha": "c9068a270020d323dade48baed4b3725aa63be0e", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -16,11 +16,11 @@ error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n    |\n-note: required by `Foo`\n-  --> $DIR/on-structs-and-enums-locals.rs:5:1\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-locals.rs:5:14\n    |\n LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^ required by this bound in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f4cc64af94f371f5d2fb1b8d7a84827a3b89e19d", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -16,11 +16,11 @@ error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n    |\n-note: required by `Foo`\n-  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:1\n+note: required by a bound in `Foo`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n    |\n LL | pub struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^ required by this bound in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "73f680182fb10a3e3950897e261e0ac08d2e88cb", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,13 +3,24 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |\n+note: required by `CompareTo::same_as`\n+  --> $DIR/repeated-supertrait-ambig.rs:9:5\n+   |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:30:7\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n+note: required by `CompareTo::same_as`\n+  --> $DIR/repeated-supertrait-ambig.rs:9:5\n+   |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n@@ -52,6 +63,11 @@ LL |     assert_eq!(22_i64.same_as(22), true);\n    = help: the following implementations were found:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n+note: required by `CompareTo::same_as`\n+  --> $DIR/repeated-supertrait-ambig.rs:9:5\n+   |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0d772c020cf3691e0b5f676727333f5962d2cb62", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -10,6 +10,15 @@ LL |     opts.get(opt.as_ref());\n            - impl Borrow<str> for String;\n            - impl<T> Borrow<T> for T\n              where T: ?Sized;\n+note: required by a bound in `HashMap::<K, V, S>::get`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL |         K: Borrow<Q>,\n+   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |     opts.get::<Q>(opt.as_ref());\n+   |             +++++\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:18\n@@ -25,6 +34,11 @@ LL |     opts.get(opt.as_ref());\n            - impl AsRef<Path> for String;\n            - impl AsRef<[u8]> for String;\n            - impl AsRef<str> for String;\n+note: required by `as_ref`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn as_ref(&self) -> &T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n help: use the fully qualified path for the potential candidates\n    |\n LL |     opts.get(<String as AsRef<OsStr>>::as_ref(opt));\n@@ -71,6 +85,11 @@ LL | impl Foo<'static, u32> for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> Foo<'a, i16> for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by `Foo::foo`\n+  --> $DIR/issue-77982.rs:18:5\n+   |\n+LL |     fn foo(&self) -> Box<T> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:40:19\n@@ -87,6 +106,11 @@ LL | impl<'a> Bar<'static, u32> for &'a () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> Bar<'a, i16> for &'a () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by `Bar::bar`\n+  --> $DIR/issue-77982.rs:24:5\n+   |\n+LL |     fn bar(&self) -> Box<T> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "33b12ef09ec26faa87dd7bb15fec57b28fc5917e", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,15 +5,6 @@ LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n-note: required by a bound in `FnMut`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | / pub trait FnMut<Args>: FnOnce<Args> {\n-LL | |     /// Performs the call operation.\n-LL | |     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-LL | |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `FnMut`\n \n error: aborting due to previous error\n "}, {"sha": "c5d4ccc2fcd91105db992968856a6f4fbf3b3f47", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -7,11 +7,11 @@ LL |     Outer(TestType);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `dummy::TestType`\n-note: required by `Outer`\n-  --> $DIR/negated-auto-traits-error.rs:10:1\n+note: required by a bound in `Outer`\n+  --> $DIR/negated-auto-traits-error.rs:10:17\n    |\n LL | struct Outer<T: Send>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^ required by this bound in `Outer`\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5"}, {"sha": "3e0dcda07f1b88e9e5770f0a492490587db53f43", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -92,6 +92,11 @@ LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n+note: required by `bar::dup`\n+  --> $DIR/test-2.rs:4:13\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/test-2.rs:11:8\n@@ -106,6 +111,11 @@ LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n+note: required by `bar::blah`\n+  --> $DIR/test-2.rs:4:36\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                                    ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "2b3e3de9b1ab4bdb6f9d231ecf2eaef20a89f1b2", "filename": "src/test/ui/traits/vtable-res-trait-param.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,6 +5,12 @@ LL |     b.gimme_an_a(y)\n    |       ---------- ^ the trait `TraitA` is not implemented for `{integer}`\n    |       |\n    |       required by a bound introduced by this call\n+   |\n+note: required by a bound in `TraitB::gimme_an_a`\n+  --> $DIR/vtable-res-trait-param.rs:6:21\n+   |\n+LL |     fn gimme_an_a<A:TraitA>(&self, a: A) -> isize;\n+   |                     ^^^^^^ required by this bound in `TraitB::gimme_an_a`\n \n error: aborting due to previous error\n "}, {"sha": "6d1e490bcf3302a91159001ccd84d5251f05b9ee", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,11 +5,6 @@ LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-40294.rs:1:1\n-   |\n-LL | trait Foo: Sized {\n-   | ^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "a4f0c400d7310979668bc3f433d6599dc1ad8363", "filename": "src/test/ui/union/union-generic.mirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,23 +4,23 @@ error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a4f0c400d7310979668bc3f433d6599dc1ad8363", "filename": "src/test/ui/union/union-generic.thirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -4,23 +4,23 @@ error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d7b95f55769fdc600f7b37ff9ec22b43e9844215", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,6 +3,15 @@ error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n    |\n LL |     let x = x.cast::<[i32]>();\n    |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+   |\n+note: required by a bound in `Cast::cast`\n+  --> $DIR/issue-71659.rs:19:15\n+   |\n+LL |     fn cast<T: ?Sized>(&self) -> &T\n+   |        ---- required by a bound in this\n+LL |     where\n+LL |         Self: CastTo<T>,\n+   |               ^^^^^^^^^ required by this bound in `Cast::cast`\n \n error: aborting due to previous error\n "}, {"sha": "b03023b5fd14f707d69bdeb7c927305ae6a36cac", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `(): Foo` is not satisfied\n    |\n LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n-   |\n-note: required by a bound in `Foo`\n-  --> $DIR/wf-foreign-fn-decl-ret.rs:6:1\n-   |\n-LL | pub trait Foo {\n-   | ^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n   --> $DIR/wf-foreign-fn-decl-ret.rs:14:32"}, {"sha": "f431deee73f9adc9cd05a56161788d931e6d32ca", "filename": "src/test/ui/where-clauses/where-clause-method-substituion.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -3,6 +3,12 @@ error[E0277]: the trait bound `X: Foo<X>` is not satisfied\n    |\n LL |     1.method::<X>();\n    |       ^^^^^^ the trait `Foo<X>` is not implemented for `X`\n+   |\n+note: required by a bound in `Bar::method`\n+  --> $DIR/where-clause-method-substituion.rs:6:34\n+   |\n+LL |     fn method<B>(&self) where A: Foo<B>;\n+   |                                  ^^^^^^ required by this bound in `Bar::method`\n \n error: aborting due to previous error\n "}, {"sha": "3a4cbb62d5597a5e0f90d283fab6dbc738ea7dfc", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b9d910639d50a26cec46e326e1556665b22decf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=6b9d910639d50a26cec46e326e1556665b22decf", "patch": "@@ -5,6 +5,12 @@ LL |     x.equals(&x);\n    |       ------ ^^ the trait `Eq` is not implemented for `Bar`\n    |       |\n    |       required by a bound introduced by this call\n+   |\n+note: required by a bound in `Foo::<T>::equals`\n+  --> $DIR/where-clauses-method-unsatisfied.rs:11:52\n+   |\n+LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n+   |                                                    ^^ required by this bound in `Foo::<T>::equals`\n \n error: aborting due to previous error\n "}]}