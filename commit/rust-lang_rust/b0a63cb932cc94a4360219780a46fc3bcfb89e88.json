{"sha": "b0a63cb932cc94a4360219780a46fc3bcfb89e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYTYzY2I5MzJjYzk0YTQzNjAyMTk3ODBhNDZmYzNiY2ZiODllODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T12:32:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T12:32:14Z"}, "message": "Rollup merge of #68004 - nikomatsakis:negative-impls, r=varkor\n\npermit negative impls for non-auto traits\n\nThis is a prototype impl that extends `impl !Trait` beyond auto traits. It is not integrated with coherence or anything else, and hence only serves to prevent downstream impls (but not to allow downstream crates to rely on the absence of such impls for coherence purposes).\n\nFixes https://github.com/rust-lang/rust/issues/66544\n\nTODO:\n\n- [x] need a test that you can't rely on negative impls for coherence purposes\n- [x] test that negative impls cannot specialize positive ones\n- [x] test that positive impls cannot specialize negative ones\n- [x] extend negative impl to `Clone` in order to fully fix #66544\n- [x] and maybe make `CoerceUnsized` unsafe? -- that problem is now split out into https://github.com/rust-lang/rust/issues/68015\n- [x] introduce feature flag and prepare a write-up\n- [x] improve diagnostics?", "tree": {"sha": "95a2186a1f369be7e9f99e927fe58b218ca2c6a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a2186a1f369be7e9f99e927fe58b218ca2c6a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0a63cb932cc94a4360219780a46fc3bcfb89e88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefKDOCRBK7hj4Ov3rIwAAdHIIABmrU1JEx4LBgm6mupY1CgB6\nfdnv3HlM6q70Qmy3uiyYXTxETX63zirQRMIWkW3fYff75+zUFqBQsJ64XZeoy0Ke\nWTSBJzlghWKYqh66h0OSywwjf/Sn+yj+XdXaG7SdJMqqmY1Z9cPT3bHZkKUBKrzw\nTovmEeYl40cX6e90erJZ0fQh4W4pCTdm4iP7QLZ7Dk4+OjNDPEO8U/j67xHfwny7\nvc6p3RT3Z/VwqB1sTuTuAC6boCRo2uapGpkKj/kFe4eWi3vXWN25hSTPmtnrhO0F\nLS2NeuITOoOVBnJTwSuuxNI3JzEsIIvbC9qYFHgVU4Q2ZGNAhJd9B53K8xmFNNc=\n=qU8E\n-----END PGP SIGNATURE-----\n", "payload": "tree 95a2186a1f369be7e9f99e927fe58b218ca2c6a0\nparent 3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58\nparent 0d0702623fd0df96dfb6311b4a23bd0122d49b08\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585225934 +0100\ncommitter GitHub <noreply@github.com> 1585225934 +0100\n\nRollup merge of #68004 - nikomatsakis:negative-impls, r=varkor\n\npermit negative impls for non-auto traits\n\nThis is a prototype impl that extends `impl !Trait` beyond auto traits. It is not integrated with coherence or anything else, and hence only serves to prevent downstream impls (but not to allow downstream crates to rely on the absence of such impls for coherence purposes).\n\nFixes https://github.com/rust-lang/rust/issues/66544\n\nTODO:\n\n- [x] need a test that you can't rely on negative impls for coherence purposes\n- [x] test that negative impls cannot specialize positive ones\n- [x] test that positive impls cannot specialize negative ones\n- [x] extend negative impl to `Clone` in order to fully fix #66544\n- [x] and maybe make `CoerceUnsized` unsafe? -- that problem is now split out into https://github.com/rust-lang/rust/issues/68015\n- [x] introduce feature flag and prepare a write-up\n- [x] improve diagnostics?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a63cb932cc94a4360219780a46fc3bcfb89e88", "html_url": "https://github.com/rust-lang/rust/commit/b0a63cb932cc94a4360219780a46fc3bcfb89e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0a63cb932cc94a4360219780a46fc3bcfb89e88/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "html_url": "https://github.com/rust-lang/rust/commit/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58"}, {"sha": "0d0702623fd0df96dfb6311b4a23bd0122d49b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0702623fd0df96dfb6311b4a23bd0122d49b08", "html_url": "https://github.com/rust-lang/rust/commit/0d0702623fd0df96dfb6311b4a23bd0122d49b08"}], "stats": {"total": 1220, "additions": 869, "deletions": 351}, "files": [{"sha": "151520f0e4abc4a5328c8f6105a4c25686ddba81", "filename": "src/doc/unstable-book/src/language-features/negative-impls.md", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,57 @@\n+# `negative_impls`\n+\n+The tracking issue for this feature is [#68318].\n+\n+[#68318]: https://github.com/rust-lang/rust/issues/68318\n+\n+----\n+\n+With the feature gate `negative_impls`, you can write negative impls as well as positive ones:\n+\n+```rust\n+#![feature(negative_impls)]\n+trait DerefMut { }\n+impl<T: ?Sized> !DerefMut for &T { }\n+```\n+\n+Negative impls indicate a semver guarantee that the given trait will not be implemented for the given types. Negative impls play an additional purpose for auto traits, described below.\n+\n+Negative impls have the following characteristics:\n+\n+* They do not have any items.\n+* They must obey the orphan rules as if they were a positive impl.\n+* They cannot \"overlap\" with any positive impls.\n+\n+## Semver interaction\n+\n+It is a breaking change to remove a negative impl. Negative impls are a commitment not to implement the given trait for the named types.\n+\n+## Orphan and overlap rules\n+\n+Negative impls must obey the same orphan rules as a positive impl. This implies you cannot add a negative impl for types defined in upstream crates and so forth.\n+\n+Similarly, negative impls cannot overlap with positive impls, again using the same \"overlap\" check that we ordinarily use to determine if two impls overlap. (Note that positive impls typically cannot overlap with one another either, except as permitted by specialization.)\n+\n+## Interaction with auto traits\n+\n+Declaring a negative impl `impl !SomeAutoTrait for SomeType` for an\n+auto-trait serves two purposes:\n+\n+* as with any trait, it declares that `SomeType` will never implement `SomeAutoTrait`;\n+* it disables the automatic `SomeType: SomeAutoTrait` impl that would otherwise have been generated.\n+\n+Note that, at present, there is no way to indicate that a given type\n+does not implement an auto trait *but that it may do so in the\n+future*. For ordinary types, this is done by simply not declaring any\n+impl at all, but that is not an option for auto traits. A workaround\n+is that one could embed a marker type as one of the fields, where the\n+marker type is `!AutoTrait`.\n+\n+## Immediate uses\n+\n+Negative impls are used to declare that `&T: !DerefMut`  and `&mut T: !Clone`, as required to fix the soundness of `Pin` described in [#66544](https://github.com/rust-lang/rust/issues/66544).\n+\n+This serves two purposes:\n+\n+* For proving the correctness of unsafe code, we can use that impl as evidence that no `DerefMut` or `Clone` impl exists.\n+* It prevents downstream crates from creating such impls."}, {"sha": "6f0f0cfd33e4dad6f788336f392be53259a22e61", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -10,7 +10,8 @@ The `optin_builtin_traits` feature gate allows you to define auto traits.\n \n Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n that are automatically implemented for every type, unless the type, or a type it contains, \n-has explicitly opted out via a negative impl. \n+has explicitly opted out via a negative impl. (Negative impls are separately controlled\n+by the `negative_impls` feature.)\n \n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n@@ -22,6 +23,7 @@ impl !Trait for Type\n Example:\n \n ```rust\n+#![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n \n auto trait Valid {}\n@@ -43,3 +45,63 @@ fn main() {\n     // must_be_valid( MaybeValid(False) );\n }\n ```\n+\n+## Automatic trait implementations\n+\n+When a type is declared as an `auto trait`, we will automatically\n+create impls for every struct/enum/union, unless an explicit impl is\n+provided. These automatic impls contain a where clause for each field\n+of the form `T: AutoTrait`, where `T` is the type of the field and\n+`AutoTrait` is the auto trait in question. As an example, consider the\n+struct `List` and the auto trait `Send`:\n+\n+```rust\n+struct List<T> {\n+  data: T,\n+  next: Option<Box<List<T>>>,\n+}\n+```\n+\n+Presuming that there is no explicit impl of `Send` for `List`, the\n+compiler will supply an automatic impl of the form:\n+\n+```rust\n+struct List<T> {\n+  data: T,\n+  next: Option<Box<List<T>>>,\n+}\n+\n+unsafe impl<T> Send for List<T>\n+where\n+  T: Send, // from the field `data`\n+  Option<Box<List<T>>>: Send, // from the field `next`\n+{ }\n+```\n+\n+Explicit impls may be either positive or negative. They take the form:\n+\n+```rust,ignore\n+impl<...> AutoTrait for StructName<..> { }\n+impl<...> !AutoTrait for StructName<..> { }\n+```\n+\n+## Coinduction: Auto traits permit cyclic matching\n+\n+Unlike ordinary trait matching, auto traits are **coinductive**. This\n+means, in short, that cycles which occur in trait matching are\n+considered ok. As an example, consider the recursive struct `List`\n+introduced in the previous section. In attempting to determine whether\n+`List: Send`, we would wind up in a cycle: to apply the impl, we must\n+show that `Option<Box<List>>: Send`, which will in turn require\n+`Box<List>: Send` and then finally `List: Send` again. Under ordinary\n+trait matching, this cycle would be an error, but for an auto trait it\n+is considered a successful match.\n+\n+## Items\n+\n+Auto traits cannot have any trait items, such as methods or associated types. This ensures that we can generate default implementations.\n+\n+## Supertraits\n+\n+Auto traits cannot have supertraits. This is for soundness reasons, as the interaction of coinduction with implied bounds is difficult to reconcile.\n+"}, {"sha": "5857b79d5eeebae5123fc30c362d489a6293afca", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -99,6 +99,7 @@\n #![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(libc)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]"}, {"sha": "eb101fc72fd9e4f0078da7c99e2d12eb322bcf2b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -219,12 +219,17 @@ mod impls {\n         }\n     }\n \n-    // Shared references can be cloned, but mutable references *cannot*!\n+    /// Shared references can be cloned, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Clone for &T {\n         #[inline]\n         fn clone(&self) -> Self {\n             *self\n         }\n     }\n+\n+    /// Shared references can be cloned, but mutable references *cannot*!\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(not(bootstrap))]\n+    impl<T: ?Sized> !Clone for &mut T {}\n }"}, {"sha": "0bee16f98bd5e742e1bc703d40ad4148437aa996", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -98,6 +98,7 @@\n #![feature(is_sorted)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]"}, {"sha": "549f80de36aa5ea885edd9b5c51b7309d8fd6105", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -87,7 +87,7 @@ impl<T: ?Sized> !Send for *mut T {}\n     message = \"the size for values of type `{Self}` cannot be known at compilation time\",\n     label = \"doesn't have a size known at compile-time\",\n     note = \"to learn more, visit <https://doc.rust-lang.org/book/\\\n-          ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n+            ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[cfg_attr(not(bootstrap), rustc_specialization_trait)]\n@@ -790,7 +790,7 @@ mod copy_impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Copy for *mut T {}\n \n-    // Shared references can be copied, but mutable references *cannot*!\n+    /// Shared references can be copied, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Copy for &T {}\n }"}, {"sha": "e2deeb556610cf63a34948c8075505eb64645cc2", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -81,6 +81,10 @@ impl<T: ?Sized> Deref for &T {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> !DerefMut for &T {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Deref for &mut T {\n     type Target = T;"}, {"sha": "a975ce93bb1a3f966199a568e5631869f8827437", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -24,6 +24,7 @@\n #![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n #![cfg_attr(bootstrap, feature(specialization))]"}, {"sha": "a0d7b064d0ccf7b51ec019678f2fb4e25ce27153", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -286,8 +286,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         start,\n                         i.span,\n                         \"`#[start]` functions are experimental \\\n-                                       and their signature may change \\\n-                                       over time\"\n+                         and their signature may change \\\n+                         over time\"\n                     );\n                 }\n                 if attr::contains_name(&i.attrs[..], sym::main) {\n@@ -296,8 +296,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         main,\n                         i.span,\n                         \"declaration of a non-standard `#[main]` \\\n-                                        function may change over time, for now \\\n-                                        a top-level `fn main()` is required\"\n+                         function may change over time, for now \\\n+                         a top-level `fn main()` is required\"\n                     );\n                 }\n             }\n@@ -341,7 +341,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n-                        optin_builtin_traits,\n+                        negative_impls,\n                         span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n                          use marker types for now\""}, {"sha": "fdcf3d639574bb3c89356095b8e1227f922d0a7a", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -97,7 +97,6 @@ E0184: include_str!(\"./error_codes/E0184.md\"),\n E0185: include_str!(\"./error_codes/E0185.md\"),\n E0186: include_str!(\"./error_codes/E0186.md\"),\n E0191: include_str!(\"./error_codes/E0191.md\"),\n-E0192: include_str!(\"./error_codes/E0192.md\"),\n E0193: include_str!(\"./error_codes/E0193.md\"),\n E0195: include_str!(\"./error_codes/E0195.md\"),\n E0197: include_str!(\"./error_codes/E0197.md\"),\n@@ -426,6 +425,9 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n E0746: include_str!(\"./error_codes/E0746.md\"),\n E0747: include_str!(\"./error_codes/E0747.md\"),\n E0748: include_str!(\"./error_codes/E0748.md\"),\n+E0749: include_str!(\"./error_codes/E0749.md\"),\n+E0750: include_str!(\"./error_codes/E0750.md\"),\n+E0751: include_str!(\"./error_codes/E0751.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard\n@@ -460,6 +462,7 @@ E0748: include_str!(\"./error_codes/E0748.md\"),\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n+//  E0192, // negative impl only applicable to auto traits\n //  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0208,"}, {"sha": "9eb8ee4e3fdf78fdbbceda19e3876886827b3a59", "filename": "src/librustc_error_codes/error_codes/E0749.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,4 @@\n+Negative impls are not allowed to have any items. Negative impls\n+declare that a trait is **not** implemented (and never will be) and\n+hence there is no need to specify the values for trait methods or\n+other items."}, {"sha": "e0cf56f716f9ddda3752ae915c7b5a080bc42a76", "filename": "src/librustc_error_codes/error_codes/E0750.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,4 @@\n+Negative impls cannot be default impls. A default impl supplies\n+default values for the items within to be used by other impls, whereas\n+a negative impl declares that there are no other impls. These don't\n+make sense to combine."}, {"sha": "a440f82e4b6b3e89751b79734b5c2d59b4a2601b", "filename": "src/librustc_error_codes/error_codes/E0751.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,12 @@\n+There are both a positive and negative trait implementation for the same type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0748\n+trait MyTrait {}\n+impl MyTrait for i32 { }\n+impl !MyTrait for i32 { }\n+```\n+\n+Negative implementations are a promise that the trait will never be\n+implemented for the given types."}, {"sha": "6157c46f80cf9dfc4d59179e4622d15957bfe5ed", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -802,13 +802,13 @@ impl HandlerInner {\n                     ));\n                     self.failure(&format!(\n                         \"For more information about an error, try \\\n-                                           `rustc --explain {}`.\",\n+                         `rustc --explain {}`.\",\n                         &error_codes[0]\n                     ));\n                 } else {\n                     self.failure(&format!(\n                         \"For more information about this error, try \\\n-                                           `rustc --explain {}`.\",\n+                         `rustc --explain {}`.\",\n                         &error_codes[0]\n                     ));\n                 }"}, {"sha": "4dfa309540cadc9872f746dca2ceb4109a9a4475", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -554,6 +554,9 @@ declare_features! (\n     // Allows limiting the evaluation steps of const expressions\n     (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n \n+    /// Allow negative trait implementations.\n+    (active, negative_impls, \"1.44.0\", Some(68318), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "a0c4c90722d252db8856bf41f942388f9d8f99e9", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -9,6 +9,7 @@\n #![feature(const_if_match)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]"}, {"sha": "bb41629ef094d16e51ebe9758ac292b2df6fa155", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -473,6 +473,7 @@ symbols! {\n         needs_drop,\n         needs_panic_runtime,\n         negate_unsigned,\n+        negative_impls,\n         never,\n         never_type,\n         never_type_fallback,"}, {"sha": "732716ef86577e316d9949fdcf102dac70d2e671", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 165, "deletions": 80, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -324,86 +324,7 @@ pub(super) fn specialization_graph_provider(\n             };\n \n             if let Some(overlap) = overlap {\n-                let impl_span =\n-                    tcx.sess.source_map().guess_head_span(tcx.span_of_impl(impl_def_id).unwrap());\n-\n-                // Work to be done after we've built the DiagnosticBuilder. We have to define it\n-                // now because the struct_lint methods don't return back the DiagnosticBuilder\n-                // that's passed in.\n-                let decorate = |err: LintDiagnosticBuilder<'_>| {\n-                    let msg = format!(\n-                        \"conflicting implementations of trait `{}`{}:{}\",\n-                        overlap.trait_desc,\n-                        overlap\n-                            .self_desc\n-                            .clone()\n-                            .map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n-                        match used_to_be_allowed {\n-                            Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n-                            _ => \"\",\n-                        }\n-                    );\n-                    let mut err = err.build(&msg);\n-                    match tcx.span_of_impl(overlap.with_impl) {\n-                        Ok(span) => {\n-                            err.span_label(\n-                                tcx.sess.source_map().guess_head_span(span),\n-                                \"first implementation here\".to_string(),\n-                            );\n-\n-                            err.span_label(\n-                                impl_span,\n-                                format!(\n-                                    \"conflicting implementation{}\",\n-                                    overlap\n-                                        .self_desc\n-                                        .map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n-                                ),\n-                            );\n-                        }\n-                        Err(cname) => {\n-                            let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n-                                Some(s) => format!(\n-                                    \"conflicting implementation in crate `{}`:\\n- {}\",\n-                                    cname, s\n-                                ),\n-                                None => format!(\"conflicting implementation in crate `{}`\", cname),\n-                            };\n-                            err.note(&msg);\n-                        }\n-                    }\n-\n-                    for cause in &overlap.intercrate_ambiguity_causes {\n-                        cause.add_intercrate_ambiguity_hint(&mut err);\n-                    }\n-\n-                    if overlap.involves_placeholder {\n-                        coherence::add_placeholder_note(&mut err);\n-                    }\n-                    err.emit()\n-                };\n-\n-                match used_to_be_allowed {\n-                    None => {\n-                        sg.has_errored = true;\n-                        let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                        decorate(LintDiagnosticBuilder::new(err));\n-                    }\n-                    Some(kind) => {\n-                        let lint = match kind {\n-                            FutureCompatOverlapErrorKind::Issue33140 => {\n-                                ORDER_DEPENDENT_TRAIT_OBJECTS\n-                            }\n-                            FutureCompatOverlapErrorKind::LeakCheck => COHERENCE_LEAK_CHECK,\n-                        };\n-                        tcx.struct_span_lint_hir(\n-                            lint,\n-                            tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n-                            impl_span,\n-                            decorate,\n-                        )\n-                    }\n-                };\n+                report_overlap_conflict(tcx, overlap, impl_def_id, used_to_be_allowed, &mut sg);\n             }\n         } else {\n             let parent = tcx.impl_parent(impl_def_id).unwrap_or(trait_id);\n@@ -414,6 +335,170 @@ pub(super) fn specialization_graph_provider(\n     tcx.arena.alloc(sg)\n }\n \n+fn report_overlap_conflict(\n+    tcx: TyCtxt<'_>,\n+    overlap: OverlapError,\n+    impl_def_id: DefId,\n+    used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_polarity = tcx.impl_polarity(impl_def_id);\n+    let other_polarity = tcx.impl_polarity(overlap.with_impl);\n+    match (impl_polarity, other_polarity) {\n+        (ty::ImplPolarity::Negative, ty::ImplPolarity::Positive) => {\n+            report_negative_positive_conflict(\n+                tcx,\n+                &overlap,\n+                impl_def_id,\n+                impl_def_id,\n+                overlap.with_impl,\n+                sg,\n+            );\n+        }\n+\n+        (ty::ImplPolarity::Positive, ty::ImplPolarity::Negative) => {\n+            report_negative_positive_conflict(\n+                tcx,\n+                &overlap,\n+                impl_def_id,\n+                overlap.with_impl,\n+                impl_def_id,\n+                sg,\n+            );\n+        }\n+\n+        _ => {\n+            report_conflicting_impls(tcx, overlap, impl_def_id, used_to_be_allowed, sg);\n+        }\n+    }\n+}\n+\n+fn report_negative_positive_conflict(\n+    tcx: TyCtxt<'_>,\n+    overlap: &OverlapError,\n+    local_impl_def_id: DefId,\n+    negative_impl_def_id: DefId,\n+    positive_impl_def_id: DefId,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_span =\n+        tcx.sess.source_map().guess_head_span(tcx.span_of_impl(local_impl_def_id).unwrap());\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0748,\n+        \"found both positive and negative implementation of trait `{}`{}:\",\n+        overlap.trait_desc,\n+        overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))\n+    );\n+\n+    match tcx.span_of_impl(negative_impl_def_id) {\n+        Ok(span) => {\n+            err.span_label(\n+                tcx.sess.source_map().guess_head_span(span),\n+                \"negative implementation here\".to_string(),\n+            );\n+        }\n+        Err(cname) => {\n+            err.note(&format!(\"negative implementation in crate `{}`\", cname));\n+        }\n+    }\n+\n+    match tcx.span_of_impl(positive_impl_def_id) {\n+        Ok(span) => {\n+            err.span_label(\n+                tcx.sess.source_map().guess_head_span(span),\n+                \"positive implementation here\".to_string(),\n+            );\n+        }\n+        Err(cname) => {\n+            err.note(&format!(\"positive implementation in crate `{}`\", cname));\n+        }\n+    }\n+\n+    sg.has_errored = true;\n+    err.emit();\n+}\n+\n+fn report_conflicting_impls(\n+    tcx: TyCtxt<'_>,\n+    overlap: OverlapError,\n+    impl_def_id: DefId,\n+    used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_span = tcx.sess.source_map().guess_head_span(tcx.span_of_impl(impl_def_id).unwrap());\n+\n+    // Work to be done after we've built the DiagnosticBuilder. We have to define it\n+    // now because the struct_lint methods don't return back the DiagnosticBuilder\n+    // that's passed in.\n+    let decorate = |err: LintDiagnosticBuilder<'_>| {\n+        let msg = format!(\n+            \"conflicting implementations of trait `{}`{}:{}\",\n+            overlap.trait_desc,\n+            overlap.self_desc.clone().map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n+            match used_to_be_allowed {\n+                Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n+                _ => \"\",\n+            }\n+        );\n+        let mut err = err.build(&msg);\n+        match tcx.span_of_impl(overlap.with_impl) {\n+            Ok(span) => {\n+                err.span_label(\n+                    tcx.sess.source_map().guess_head_span(span),\n+                    \"first implementation here\".to_string(),\n+                );\n+\n+                err.span_label(\n+                    impl_span,\n+                    format!(\n+                        \"conflicting implementation{}\",\n+                        overlap.self_desc.map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n+                    ),\n+                );\n+            }\n+            Err(cname) => {\n+                let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n+                    Some(s) => format!(\"conflicting implementation in crate `{}`:\\n- {}\", cname, s),\n+                    None => format!(\"conflicting implementation in crate `{}`\", cname),\n+                };\n+                err.note(&msg);\n+            }\n+        }\n+\n+        for cause in &overlap.intercrate_ambiguity_causes {\n+            cause.add_intercrate_ambiguity_hint(&mut err);\n+        }\n+\n+        if overlap.involves_placeholder {\n+            coherence::add_placeholder_note(&mut err);\n+        }\n+        err.emit()\n+    };\n+\n+    match used_to_be_allowed {\n+        None => {\n+            sg.has_errored = true;\n+            let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n+            decorate(LintDiagnosticBuilder::new(err));\n+        }\n+        Some(kind) => {\n+            let lint = match kind {\n+                FutureCompatOverlapErrorKind::Issue33140 => ORDER_DEPENDENT_TRAIT_OBJECTS,\n+                FutureCompatOverlapErrorKind::LeakCheck => COHERENCE_LEAK_CHECK,\n+            };\n+            tcx.struct_span_lint_hir(\n+                lint,\n+                tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n+                impl_span,\n+                decorate,\n+            )\n+        }\n+    };\n+}\n+\n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a\n /// string.\n fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {"}, {"sha": "91ab94bc684e2670c38863258103c81650794f66", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1659,11 +1659,14 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: DefId, span:\n             _ => unreachable!(),\n         };\n \n-        tcx.sess.span_err(span, &format!(\n+        tcx.sess.span_err(\n+            span,\n+            &format!(\n             \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n              a parent scope\",\n             if is_async { \"async fn\" } else { \"impl Trait\" },\n-        ));\n+        ),\n+        );\n     }\n }\n \n@@ -1841,8 +1844,8 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n         Ok(ConstValue::ByRef { alloc, .. }) => {\n             if alloc.relocations().len() != 0 {\n                 let msg = \"statics with a custom `#[link_section]` must be a \\\n-                       simple list of bytes on the wasm target with no \\\n-                       extra levels of indirection such as references\";\n+                           simple list of bytes on the wasm target with no \\\n+                           extra levels of indirection such as references\";\n                 tcx.sess.span_err(span, msg);\n             }\n         }\n@@ -1971,6 +1974,24 @@ fn check_impl_items_against_trait<'tcx>(\n         return;\n     }\n \n+    // Negative impls are not expected to have any items\n+    match tcx.impl_polarity(impl_id) {\n+        ty::ImplPolarity::Reservation | ty::ImplPolarity::Positive => {}\n+        ty::ImplPolarity::Negative => {\n+            if let [first_item_ref, ..] = impl_item_refs {\n+                let first_item_span = tcx.hir().impl_item(first_item_ref.id).span;\n+                struct_span_err!(\n+                    tcx.sess,\n+                    first_item_span,\n+                    E0749,\n+                    \"negative impls cannot have any items\"\n+                )\n+                .emit();\n+            }\n+            return;\n+        }\n+    }\n+\n     // Locate trait definition and items\n     let trait_def = tcx.trait_def(impl_trait_ref.def_id);\n \n@@ -2010,7 +2031,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             impl_item.span,\n                             E0323,\n                             \"item `{}` is an associated const, \\\n-                              which doesn't match its trait `{}`\",\n+                             which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n                             impl_trait_ref.print_only_trait_path()\n                         );\n@@ -3554,7 +3575,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let adjusted_ty = autoderef.unambiguous_final_ty(self);\n         debug!(\n             \"try_index_step(expr={:?}, base_expr={:?}, adjusted_ty={:?}, \\\n-                               index_ty={:?})\",\n+             index_ty={:?})\",\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n@@ -4705,7 +4726,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 err.span_label(\n                                     fn_span,\n                                     \"implicitly returns `()` as its body has no tail or `return` \\\n-                                 expression\",\n+                                     expression\",\n                                 );\n                             }\n                         },\n@@ -5577,11 +5598,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match self.at(&self.misc(span), self.param_env).sup(impl_ty, self_ty) {\n                 Ok(ok) => self.register_infer_ok_obligations(ok),\n                 Err(_) => {\n-                    self.tcx.sess.delay_span_bug(span, &format!(\n+                    self.tcx.sess.delay_span_bug(\n+                        span,\n+                        &format!(\n                         \"instantiate_value_path: (UFCS) {:?} was a subtype of {:?} but now is not?\",\n                         self_ty,\n                         impl_ty,\n-                    ));\n+                    ),\n+                    );\n                 }\n             }\n         }\n@@ -5767,7 +5791,7 @@ fn fatally_break_rust(sess: &Session) {\n     handler.note_without_error(\"the compiler expectedly panicked. this is a feature.\");\n     handler.note_without_error(\n         \"we would appreciate a joke overview: \\\n-        https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\",\n+         https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\",\n     );\n     handler.note_without_error(&format!(\n         \"rustc {} running on {}\","}, {"sha": "c89c4b028b4ea9b4124f18bcb62c50769ef7a92a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -124,18 +124,16 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n                 }\n                 (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n-                    if let (Some(of_trait), false) = (of_trait, is_auto) {\n+                    if let hir::Defaultness::Default { .. } = defaultness {\n+                        let mut spans = vec![span];\n+                        spans.extend(defaultness_span);\n                         struct_span_err!(\n                             tcx.sess,\n-                            span.to(of_trait.path.span),\n-                            E0192,\n-                            \"invalid negative impl\"\n+                            spans,\n+                            E0750,\n+                            \"negative impls cannot be default impls\"\n                         )\n-                        .note(\n-                            \"negative impls are only allowed for auto traits, like `Send` and \\\n-                             `Sync`\",\n-                        )\n-                        .emit()\n+                        .emit();\n                     }\n                 }\n                 (ty::ImplPolarity::Reservation, _) => {\n@@ -902,13 +900,13 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                             .struct_span_err(\n                                                 span,\n                                                 \"non-defining opaque type use \\\n-                                                    in defining scope\",\n+                                                 in defining scope\",\n                                             )\n                                             .span_label(\n                                                 param_span,\n                                                 \"cannot use static lifetime; use a bound lifetime \\\n-                                                instead or remove the lifetime parameter from the \\\n-                                                opaque type\",\n+                                                 instead or remove the lifetime parameter from the \\\n+                                                 opaque type\",\n                                             )\n                                             .emit();\n                                     } else {\n@@ -923,13 +921,13 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                             .struct_span_err(\n                                                 span,\n                                                 \"non-defining opaque type use \\\n-                                                in defining scope\",\n+                                                 in defining scope\",\n                                             )\n                                             .span_note(\n                                                 tcx.def_span(param.def_id),\n                                                 &format!(\n                                                     \"used non-generic const {} for \\\n-                                                    generic parameter\",\n+                                                     generic parameter\",\n                                                     ty,\n                                                 ),\n                                             )\n@@ -944,7 +942,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                     .struct_span_err(\n                                         span,\n                                         \"non-defining opaque type use \\\n-                                            in defining scope\",\n+                                         in defining scope\",\n                                     )\n                                     .span_note(spans, \"lifetime used multiple times\")\n                                     .emit();\n@@ -1030,7 +1028,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n                     span,\n                     &format!(\n                         \"`{}` cannot be used as the type of `self` without \\\n-                            the `arbitrary_self_types` feature\",\n+                         the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n                 )"}, {"sha": "d41105270549e898b7057a04e548eb352e6ce3ac", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -278,6 +278,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "df1a7946afb119c3cf89fac4bcbd8322d907ce90", "filename": "src/test/pretty/trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-polarity.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // pp-exact\n "}, {"sha": "665aa38b11ebac0562081b386ac13ebea3846041", "filename": "src/test/rustdoc/empty-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub struct Foo;\n "}, {"sha": "a68db9c70ad2daa6eec4d6ccf1818f4b0941bd89", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,7 +1,7 @@\n // aux-build:rustdoc-impl-parts-crosscrate.rs\n // ignore-cross-compile\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate rustdoc_impl_parts_crosscrate;\n "}, {"sha": "68baca9a04e9aaed63e472caaaa9b62b60967f25", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,3 +1,4 @@\n+#![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n \n pub auto trait AnOibit {}"}, {"sha": "8c001db06c5bf40406ddcbcb619459993d9fe54e", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n // @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Send for A\""}, {"sha": "cb46d1778d9243257b7fcbc9fff13a3c051f3fdf", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![crate_name = \"foo\"]\n \n pub struct Foo;"}, {"sha": "d76aac6906c46d3cac0fc85f1456f9226cbe5a7c", "filename": "src/test/rustdoc/negative-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // @matches negative_impl/struct.Alpha.html '//pre' \"pub struct Alpha\"\n pub struct Alpha;"}, {"sha": "af83f14bbda5d6b4b34522a264a1b16c19820bda", "filename": "src/test/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the specialized async-await-specific error when futures don't implement an"}, {"sha": "2362831d8b8f6c25042587538efdf0852fd76551", "filename": "src/test/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the specialized async-await-specific error when futures don't implement an"}, {"sha": "b819970d59d50d07e10885179dc2c30bccc9b45b", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the unspecialized async-await-specific error when futures don't implement an"}, {"sha": "6456e7abd745dc67cbd805eedc2e74b6cef15c65", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::Future`\n-  --> $DIR/issue-64130-3-other.rs:23:5\n+  --> $DIR/issue-64130-3-other.rs:24:5\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n    |    ------    --- required by this bound in `is_qux`\n@@ -13,7 +13,7 @@ LL |     is_qux(bar());\n    = help: the following implementations were found:\n              <Foo as Qux>\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:17:5\n+  --> $DIR/issue-64130-3-other.rs:18:5\n    |\n LL |     let x = Foo;\n    |         - has type `Foo`"}, {"sha": "7753e2eceb543774d69feeca6981d26d22d8c9ef", "filename": "src/test/ui/codemap_tests/empty_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n fn main() {\n     struct Foo;\n "}, {"sha": "24b878927530c3727ff831f88a37a16272516b98", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,18 +1,16 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(marker_trait_attr)]\n \n #[marker]\n trait MyTrait {}\n \n struct TestType<T>(::std::marker::PhantomData<T>);\n \n-unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n \n-impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and negative implementation\n \n-unsafe impl<T:'static> Send for TestType<T> {}\n-//~^ ERROR conflicting implementations\n+unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n "}, {"sha": "5081536b702451d8a843fdb7a301fbea6a9b6e2b", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,21 +1,22 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ positive implementation here\n LL | \n LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:14:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ first implementation here\n ...\n-LL | unsafe impl<T:'static> Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+LL | unsafe impl<T: 'static> Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+Some errors have detailed explanations: E0119, E0748.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "4115ba34e17b2fca9f504336b254eeba2014dd6f", "filename": "src/test/ui/coherence/coherence-default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MySafeTrait {}\n "}, {"sha": "b08ccb087d91c0a9c137b73f333858dfa15c9e28", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,11 +1,11 @@\n error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:7:1\n+  --> $DIR/coherence-default-trait-impl.rs:8:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:12:1\n+  --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a9c8d20a79d75f59fe79d2a75de34f5bc642bbe9", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Test for issue #56934 - that it is impossible to redundantly\n // implement an auto-trait for a trait object type that contains it."}, {"sha": "23db5328a728b87d9bc101b9124e46780aa7f4da", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,17 +1,17 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:14:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:15:1\n    |\n LL | impl !Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:16:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:17:1\n    |\n LL | impl !Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:23:1\n    |\n LL | impl !Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^-----------\n@@ -22,13 +22,13 @@ LL | impl !Send for dyn Marker2 {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:26:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n    |\n LL | impl !Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:28:1\n    |\n LL | impl !Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type"}, {"sha": "c565f9c83e89ef3e575b499c178a634d06cfacee", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Test for issue #56934 - that it is impossible to redundantly\n // implement an auto-trait for a trait object type that contains it."}, {"sha": "141ab7771f325501a202316aa121f3451684d36d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,17 +1,17 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:14:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:15:1\n    |\n LL | impl Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:16:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:17:1\n    |\n LL | impl Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:23:1\n    |\n LL | unsafe impl Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^-----------\n@@ -22,13 +22,13 @@ LL | unsafe impl Send for dyn Marker2 {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:26:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n    |\n LL | unsafe impl Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:28:1\n    |\n LL | unsafe impl Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type"}, {"sha": "a86ca0e5eacdc00df8a8c49583020017fa94e7a9", "filename": "src/test/ui/coherence/coherence-impls-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n "}, {"sha": "e00cb9a7c5b5104e4d6dd71ad5f17b346ff3a348", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,9 +1,9 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n \n enum TestE {\n-  A\n+    A,\n }\n \n struct MyType;\n@@ -26,5 +26,4 @@ unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR conflicting implementations of trait\n //~| ERROR only traits defined in the current crate\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "231b96ad42efb7a40dc6c29931843cc484815587", "filename": "src/test/ui/coherence/coherence-impls-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n "}, {"sha": "b87e162aca0963f2b0eca3dafb5359591954f1b7", "filename": "src/test/ui/coherence/coherence-negative-impls-safe-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "4821aa6b5ad3d22df7cda92e30955d487f8a7013", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "3beac04c7e8291d43fa4e48f8710043f07381b01", "filename": "src/test/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n // aux-build:coherence_orphan_lib.rs\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate coherence_orphan_lib as lib;\n "}, {"sha": "c52977e49b457f36370c64cc67cbf108c84d1618", "filename": "src/test/ui/error-codes/E0192.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs?ref=3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "patch": "@@ -1,12 +0,0 @@\n-#![feature(optin_builtin_traits)]\n-\n-trait Trait {\n-    type Bar;\n-}\n-\n-struct Foo;\n-\n-impl !Trait for Foo { } //~ ERROR E0192\n-\n-fn main() {\n-}"}, {"sha": "da706dea167f6d43f5842b4b196d6d607c98cd82", "filename": "src/test/ui/error-codes/E0192.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr?ref=3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "patch": "@@ -1,11 +0,0 @@\n-error[E0192]: invalid negative impl\n-  --> $DIR/E0192.rs:9:6\n-   |\n-LL | impl !Trait for Foo { }\n-   |      ^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0192`."}, {"sha": "041bbe8fdcf6920359867157ca5826a42961d334", "filename": "src/test/ui/error-codes/E0198.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Foo;\n "}, {"sha": "2421bf0a55f6595016002034af2001396969bec5", "filename": "src/test/ui/error-codes/E0199.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Foo;\n "}, {"sha": "1553d0531dc09438a519eed82496d86cb3058bb7", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -13,8 +13,8 @@ error[E0658]: negative trait bounds are not yet fully implemented; use marker ty\n LL | impl !AutoDummyTrait for DummyStruct {}\n    |      ^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n-   = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n+   = note: see issue #68318 <https://github.com/rust-lang/rust/issues/68318> for more information\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "794369a8dc02b7ab6d02ebfb1da665ea0fc76de2", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:24\n+  --> $DIR/auto-trait-regions.rs:46:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:35\n+  --> $DIR/auto-trait-regions.rs:46:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -25,13 +25,13 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error: higher-ranked subtype error\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "1e77d8058a72b6ec9576871e8eaa1700ed4f0796", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,6 @@\n #![feature(generators)]\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Foo {}\n "}, {"sha": "5ec462e10465f8c3f2205bb0f75caa9e1dd10378", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -11,7 +11,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -23,7 +23,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -35,7 +35,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here"}, {"sha": "6f278d76bb18b7a1fc6849f872ef298c27252bb8", "filename": "src/test/ui/issues/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "7f6b9e3fba79fc1703d571295d205bb1aa4d86af", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n unsafe auto trait Trait {\n     type Output; //~ ERROR E0380"}, {"sha": "48ce09aaa34dab455295b3a818e6c39a5c8199f0", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:6:10\n+  --> $DIR/issue-23080-2.rs:7:10\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto trait cannot have items"}, {"sha": "035db82ba5de0df26ec58513fda41d04993525f8", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n unsafe auto trait Trait {\n     fn method(&self) { //~ ERROR E0380"}, {"sha": "73ecb1c362e1767941666d9f25c736271f4b915b", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:4:8\n+  --> $DIR/issue-23080.rs:5:8\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto trait cannot have items"}, {"sha": "035f904b15bb34a571d1afc0a394369531201c5c", "filename": "src/test/ui/issues/issue-29516.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait NotSame {}\n "}, {"sha": "5984a256a3086a7823c3049db56b03b938590872", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,11 +1,10 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![allow(order_dependent_trait_objects)]\n \n // Check that the issue #33140 hack does not allow unintended things.\n \n // OK\n-trait Trait0 {\n-}\n+trait Trait0 {}\n \n impl Trait0 for dyn Send {}\n impl Trait0 for dyn Send {}\n@@ -20,58 +19,49 @@ impl Trait1 for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 2: negative impl\n-trait Trait2 {\n-}\n+trait Trait2 {}\n \n impl Trait2 for dyn Send {}\n impl !Trait2 for dyn Send {}\n-//~^ ERROR E0119\n-\n+//~^ ERROR E0748\n \n // Problem 3: type parameter\n-trait Trait3<T: ?Sized> {\n-}\n+trait Trait3<T: ?Sized> {}\n \n impl Trait3<dyn Sync> for dyn Send {}\n impl Trait3<dyn Sync> for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 4a: not a trait object - generic\n-trait Trait4a {\n-}\n+trait Trait4a {}\n \n impl<T: ?Sized> Trait4a for T {}\n impl Trait4a for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 4b: not a trait object - misc\n-trait Trait4b {\n-}\n+trait Trait4b {}\n \n impl Trait4b for () {}\n impl Trait4b for () {}\n //~^ ERROR E0119\n \n // Problem 4c: not a principal-less trait object\n-trait Trait4c {\n-}\n+trait Trait4c {}\n \n impl Trait4c for dyn Trait1 + Send {}\n impl Trait4c for dyn Trait1 + Send {}\n //~^ ERROR E0119\n \n // Problem 4d: lifetimes\n-trait Trait4d {\n-}\n+trait Trait4d {}\n \n impl<'a> Trait4d for dyn Send + 'a {}\n impl<'a> Trait4d for dyn Send + 'a {}\n //~^ ERROR E0119\n \n-\n // Problem 5: where-clauses\n-trait Trait5 {\n-}\n+trait Trait5 {}\n \n impl Trait5 for dyn Send {}\n impl Trait5 for dyn Send where u32: Copy {}"}, {"sha": "b3bf34a2a90315f8a4dda2b44ca6614ecdd5f62a", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,61 +1,61 @@\n error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:19:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:18:1\n    |\n LL | impl Trait1 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait1 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:27:1\n+error[E0748]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n-   | ------------------------ first implementation here\n+   | ------------------------ positive implementation here\n LL | impl !Trait2 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:36:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:32:1\n    |\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:44:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:39:1\n    |\n LL | impl<T: ?Sized> Trait4a for T {}\n    | ----------------------------- first implementation here\n LL | impl Trait4a for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4b` for type `()`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:52:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:46:1\n    |\n LL | impl Trait4b for () {}\n    | ------------------- first implementation here\n LL | impl Trait4b for () {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:60:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:53:1\n    |\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:68:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:60:1\n    |\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ---------------------------------- first implementation here\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n \n error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:77:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:67:1\n    |\n LL | impl Trait5 for dyn Send {}\n    | ------------------------ first implementation here\n@@ -64,4 +64,5 @@ LL | impl Trait5 for dyn Send where u32: Copy {}\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+Some errors have detailed explanations: E0119, E0748.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "502859c041353cf37afb813090a19f68fe87c8a0", "filename": "src/test/ui/mut/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,7 +1,7 @@\n // Tests that an `&` pointer to something inherently mutable is itself\n // to be considered mutable.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "84c8db4053e4f76dc892ac6e01af6cfeef047e94", "filename": "src/test/ui/never_type/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(never_type)]\n \n fn main() {"}, {"sha": "bd560649b990e8b5e8dd3857fb5ba24925c0aef7", "filename": "src/test/ui/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "75a363f9f763907a46559d9f11329ebdec175921", "filename": "src/test/ui/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "44bf1913e7aac4a696f592972ae2c0cfd3fbd7d7", "filename": "src/test/ui/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "7d8a36a76f274ed74fc877c351e476fc7e0afcb7", "filename": "src/test/ui/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "0a2836d691f5f03154e7199ce16e5e99b5ecebe3", "filename": "src/test/ui/parser/trait-object-bad-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![allow(bare_trait_objects)]\n \n auto trait Auto {}"}, {"sha": "74e484eebee1fba6157ff8c06648c6a1df2ac8e9", "filename": "src/test/ui/parser/trait-object-bad-parens.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `((Auto))`\n-  --> $DIR/trait-object-bad-parens.rs:7:16\n+  --> $DIR/trait-object-bad-parens.rs:8:16\n    |\n LL |     let _: Box<((Auto)) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto + Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:9:16\n+  --> $DIR/trait-object-bad-parens.rs:10:16\n    |\n LL |     let _: Box<(Auto + Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:11:16\n+  --> $DIR/trait-object-bad-parens.rs:12:16\n    |\n LL |     let _: Box<(Auto +) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(dyn Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:13:16\n+  --> $DIR/trait-object-bad-parens.rs:14:16\n    |\n LL |     let _: Box<(dyn Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^ expected a path"}, {"sha": "8bbf1ab5d1f30d68e5690f40b8aea03176317b07", "filename": "src/test/ui/privacy/privacy-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub trait Tr {\n     fn f();"}, {"sha": "cd3d609ca3ea6bd6816f2eacd890724adbb40b20", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n #[allow(private_in_public)]\n mod m {"}, {"sha": "7850694aab2078088a7f7840a1716da6730df80c", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error: trait `m::PrivNonPrincipal` is private\n-  --> $DIR/private-in-public-non-principal-2.rs:11:5\n+  --> $DIR/private-in-public-non-principal-2.rs:12:5\n    |\n LL |     m::leak_dyn_nonprincipal();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait"}, {"sha": "aa946f5c0ac05aa5b3707cc0156c2000382a9976", "filename": "src/test/ui/privacy/private-in-public-non-principal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub trait PubPrincipal {}\n auto trait PrivNonPrincipal {}"}, {"sha": "f7f8d71bdb5f241392030f038b0da3a9cf40a141", "filename": "src/test/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n warning: private trait `PrivNonPrincipal` in public interface (error E0445)\n-  --> $DIR/private-in-public-non-principal.rs:6:1\n+  --> $DIR/private-in-public-non-principal.rs:7:1\n    |\n LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,13 +9,13 @@ LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal>\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: missing documentation for an associated function\n-  --> $DIR/private-in-public-non-principal.rs:13:9\n+  --> $DIR/private-in-public-non-principal.rs:14:9\n    |\n LL |         pub fn check_doc_lint() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/private-in-public-non-principal.rs:10:8\n+  --> $DIR/private-in-public-non-principal.rs:11:8\n    |\n LL | #[deny(missing_docs)]\n    |        ^^^^^^^^^^^^"}, {"sha": "8134333c58f7305bc366d7dd83ed1ae9d78a4ebc", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n struct S;\n@@ -8,8 +8,9 @@ default impl S {} //~ ERROR inherent impls cannot be `default`\n \n default unsafe impl Send for S {} //~ ERROR impls of auto traits cannot be default\n default impl !Send for Z {} //~ ERROR impls of auto traits cannot be default\n+                            //~^ ERROR negative impls cannot be default impls\n \n trait Tr {}\n-default impl !Tr for S {} //~ ERROR invalid negative impl\n+default impl !Tr for S {} //~ ERROR negative impls cannot be default impls\n \n fn main() {}"}, {"sha": "9bf59bd4f636a494c2d83aa0d857cada0dee19d6", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -24,14 +24,18 @@ LL | default impl !Send for Z {}\n    | |\n    | default because of this\n \n-error[E0192]: invalid negative impl\n-  --> $DIR/validation.rs:13:14\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/validation.rs:10:14\n    |\n-LL | default impl !Tr for S {}\n-   |              ^^^\n+LL | default impl !Send for Z {}\n+   | ^^^^^^^      ^\n+\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/validation.rs:14:14\n    |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n+LL | default impl !Tr for S {}\n+   | ^^^^^^^      ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0192`.\n+For more information about this error, try `rustc --explain E0750`."}, {"sha": "dff2b28bf003c5f600f4ea40f42a0ec47d88005c", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,11 +1,11 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n trait MyTrait {}\n \n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: Clone> Send for TestType<T> {}\n-impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0119\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0748\n \n fn main() {}"}, {"sha": "cbc7271b199a68237cc7057b32dc31c42555f430", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}\n-   | ------------------------------------------ first implementation here\n+   | ------------------------------------------ positive implementation here\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "4a733fb3c497ea03f5add6a41f4cf7186fd50796", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,16 +1,17 @@\n // Make sure specialization cannot change impl polarity\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n auto trait Foo {}\n \n impl<T> Foo for T {}\n-impl !Foo for u8 {} //~ ERROR E0119\n+impl !Foo for u8 {} //~ ERROR E0748\n \n auto trait Bar {}\n \n impl<T> !Bar for T {}\n-impl Bar for u8 {} //~ ERROR E0119\n+impl Bar for u8 {} //~ ERROR E0748\n \n fn main() {}"}, {"sha": "30655d87d55000d08f8207028c2438b3f84892ee", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,19 +1,19 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n-  --> $DIR/specialization-polarity.rs:9:1\n+error[E0748]: found both positive and negative implementation of trait `Foo` for type `u8`:\n+  --> $DIR/specialization-polarity.rs:10:1\n    |\n LL | impl<T> Foo for T {}\n-   | ----------------- first implementation here\n+   | ----------------- positive implementation here\n LL | impl !Foo for u8 {}\n-   | ^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+   | ^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `Bar` for type `u8`:\n-  --> $DIR/specialization-polarity.rs:14:1\n+error[E0748]: found both positive and negative implementation of trait `Bar` for type `u8`:\n+  --> $DIR/specialization-polarity.rs:15:1\n    |\n LL | impl<T> !Bar for T {}\n-   | ------------------ first implementation here\n+   | ------------------ negative implementation here\n LL | impl Bar for u8 {}\n-   | ^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+   | ^^^^^^^^^^^^^^^ positive implementation here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "3562deecbd522bcc6a68650877efaed7e514bfac", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -4,8 +4,8 @@ error[E0658]: negative trait bounds are not yet fully implemented; use marker ty\n LL | impl !Send for TestType {}\n    |      ^^^^^\n    |\n-   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n-   = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n+   = note: see issue #68318 <https://github.com/rust-lang/rust/issues/68318> for more information\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "ed2947493b02c528d86bd43734b5433169211987", "filename": "src/test/ui/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n \n@@ -12,7 +12,6 @@ trait TestTrait {}\n unsafe impl !Send for TestType {}\n //~^ ERROR negative impls cannot be unsafe\n impl !TestTrait for TestType {}\n-//~^ ERROR invalid negative impl\n \n struct TestType2<T>(T);\n \n@@ -22,6 +21,5 @@ impl<T> !TestType2<T> {}\n unsafe impl<T> !Send for TestType2<T> {}\n //~^ ERROR negative impls cannot be unsafe\n impl<T> !TestTrait for TestType2<T> {}\n-//~^ ERROR invalid negative impl\n \n fn main() {}"}, {"sha": "1fd40fb66570df1c093a2ee08593be2869871655", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -16,39 +16,22 @@ LL | unsafe impl !Send for TestType {}\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:10\n+  --> $DIR/syntax-trait-polarity.rs:18:10\n    |\n LL | impl<T> !TestType2<T> {}\n    |         -^^^^^^^^^^^^ inherent impl for this type\n    |         |\n    |         negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:22:16\n+  --> $DIR/syntax-trait-polarity.rs:21:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n    | ------         -^^^^\n    | |              |\n    | |              negative because of this\n    | unsafe because of this\n \n-error[E0192]: invalid negative impl\n-  --> $DIR/syntax-trait-polarity.rs:14:6\n-   |\n-LL | impl !TestTrait for TestType {}\n-   |      ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error[E0192]: invalid negative impl\n-  --> $DIR/syntax-trait-polarity.rs:24:9\n-   |\n-LL | impl<T> !TestTrait for TestType2<T> {}\n-   |         ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0192, E0198.\n-For more information about an error, try `rustc --explain E0192`.\n+For more information about this error, try `rustc --explain E0198`."}, {"sha": "15fdddc5f3f5c3b779de91a6e2df28ade5d9bee8", "filename": "src/test/ui/traits/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_doc_comments)]\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Auto {}\n unsafe auto trait AutoUnsafe {}"}, {"sha": "681f26438e69500be9f375070a3c48a91cacf8e5", "filename": "src/test/ui/traits/negative-impls/auxiliary/foreign_trait.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,6 @@\n+#![feature(negative_impls)]\n+\n+pub trait ForeignTrait {}\n+\n+impl ForeignTrait for u32 {}\n+impl !ForeignTrait for String {}"}, {"sha": "683fd6db6f29d58a5e527310c42585097ff9ff50", "filename": "src/test/ui/traits/negative-impls/feature-gate-negative_impls.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,3 @@\n+trait MyTrait {}\n+impl !MyTrait for u32 {} //~ ERROR negative trait bounds are not yet fully implemented\n+fn main() {}"}, {"sha": "b253fbd0da7f9b2752585ab793f41c19c3abaca3", "filename": "src/test/ui/traits/negative-impls/feature-gate-negative_impls.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ffeature-gate-negative_impls.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n+  --> $DIR/feature-gate-negative_impls.rs:2:6\n+   |\n+LL | impl !MyTrait for u32 {}\n+   |      ^^^^^^^^\n+   |\n+   = note: see issue #68318 <https://github.com/rust-lang/rust/issues/68318> for more information\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4bdad5dc591c57a87c2d4cd5433c6d3409f473e9", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -3,7 +3,7 @@\n // errors are not reported. This way, we make sure that, for each function, different\n // typeck phases are involved and all errors are reported.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n ", "previous_filename": "src/test/ui/traits/traits-negative-impls.rs"}, {"sha": "69a91b09e3ee00ce6cd28565f7a0601eabde0d93", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:23:11\n+  --> $DIR/negated-auto-traits-error.rs:23:11\n    |\n LL | struct Outer<T: Send>(T);\n    | ------------------------- required by `Outer`\n@@ -10,7 +10,7 @@ LL |     Outer(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:23:5\n+  --> $DIR/negated-auto-traits-error.rs:23:5\n    |\n LL | struct Outer<T: Send>(T);\n    | ------------------------- required by `Outer`\n@@ -21,7 +21,7 @@ LL |     Outer(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:32:13\n+  --> $DIR/negated-auto-traits-error.rs:32:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -32,7 +32,7 @@ LL |     is_send(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy1b::TestType`\n \n error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:40:13\n+  --> $DIR/negated-auto-traits-error.rs:40:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -44,7 +44,7 @@ LL |     is_send((8, TestType));\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n \n error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:48:13\n+  --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -60,7 +60,7 @@ LL |     is_send(Box::new(TestType));\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:56:13\n+  --> $DIR/negated-auto-traits-error.rs:56:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -74,7 +74,7 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n \n error[E0277]: `main::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:66:13\n+  --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |    -------    ---- required by this bound in `is_sync`", "previous_filename": "src/test/ui/traits/traits-negative-impls.stderr"}, {"sha": "010dbf24664037008911504a4e58bd171bc86e43", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-rpass.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_variables)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n ", "previous_filename": "src/test/ui/traits/traits-negative-impls-rpass.rs"}, {"sha": "2d50bc83ec304f2a1847298744ca511f5f462bf3", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,10 @@\n+#![feature(negative_impls)]\n+#![feature(specialization)]\n+\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+default impl !MyTrait for u32 {} //~ ERROR negative impls cannot be default impls\n+\n+fn main() {}"}, {"sha": "d2423d01a9afa2a112e00ce147879584a12c94c0", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,9 @@\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/negative-default-impls.rs:8:14\n+   |\n+LL | default impl !MyTrait for u32 {}\n+   | ^^^^^^^      ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0750`."}, {"sha": "474e0381799bda38e78848cd15b1400d05bec13a", "filename": "src/test/ui/traits/negative-impls/negative-impls-basic.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-impls-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-impls-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-impls-basic.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,17 @@\n+// A simple test that we are able to create negative impls, when the\n+// feature gate is given.\n+//\n+// run-pass\n+\n+#![feature(negative_impls)]\n+#![allow(dead_code)]\n+\n+struct TestType;\n+\n+trait TestTrait {\n+    fn dummy(&self) {}\n+}\n+\n+impl !TestTrait for TestType {}\n+\n+fn main() {}"}, {"sha": "877c3e8af4f1ae617215c78e0ecf88b1e2e0136f", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,13 @@\n+#![feature(specialization)]\n+#![feature(negative_impls)]\n+\n+// Test a negative impl that \"specializes\" another negative impl.\n+//\n+// run-pass\n+\n+trait MyTrait {}\n+\n+impl<T> !MyTrait for T {}\n+impl !MyTrait for u32 {}\n+\n+fn main() {}"}, {"sha": "043273e624189115383d23d15a87e76639111188", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,13 @@\n+#![feature(specialization)]\n+#![feature(negative_impls)]\n+\n+// Negative impl for u32 cannot \"specialize\" the base impl.\n+trait MyTrait {\n+    fn foo();\n+}\n+impl<T> MyTrait for T {\n+    default fn foo() {}\n+}\n+impl !MyTrait for u32 {} //~ ERROR E0748\n+\n+fn main() {}"}, {"sha": "21fd08251d474dd1c921047680a8f80b9b0ad7c9", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,12 @@\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+  --> $DIR/negative-specializes-positive-item.rs:11:1\n+   |\n+LL | impl<T> MyTrait for T {\n+   | --------------------- positive implementation here\n+...\n+LL | impl !MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "ac0fac10eef50a532155d378e84cf1cdf8420fb0", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,14 @@\n+#![feature(specialization)]\n+#![feature(negative_impls)]\n+\n+// Negative impl for u32 cannot \"specialize\" the base impl.\n+trait MyTrait {}\n+impl<T> MyTrait for T {}\n+impl !MyTrait for u32 {} //~ ERROR E0748\n+\n+// The second impl specializes the first, no error.\n+trait MyTrait2 {}\n+impl<T> MyTrait2 for T {}\n+impl MyTrait2 for u32 {}\n+\n+fn main() {}"}, {"sha": "0e7426c82602872053f59d1ae9ff33cd1e8665a0", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+  --> $DIR/negative-specializes-positive.rs:7:1\n+   |\n+LL | impl<T> MyTrait for T {}\n+   | --------------------- positive implementation here\n+LL | impl !MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "5fc6be9b300079fb9737d0d0518677a00b5fe36e", "filename": "src/test/ui/traits/negative-impls/no-items.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+#![feature(negative_impls)]\n+\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+impl !MyTrait for u32 {\n+    type Foo = i32; //~ ERROR negative impls cannot have any items\n+}\n+\n+fn main() {}"}, {"sha": "67b94bba121430850d76df077cc0dcd28c6c3d56", "filename": "src/test/ui/traits/negative-impls/no-items.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,9 @@\n+error[E0749]: negative impls cannot have any items\n+  --> $DIR/no-items.rs:8:5\n+   |\n+LL |     type Foo = i32;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0749`."}, {"sha": "d9c498fca6645ede2921d1824116cbe315b78a8d", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,26 @@\n+use std::cell::Cell;\n+use std::marker::PhantomPinned;\n+use std::pin::Pin;\n+\n+struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n+\n+impl<'a> Clone for &'a mut MyType<'a> {\n+    //~^ ERROR E0748\n+    fn clone(&self) -> &'a mut MyType<'a> {\n+        self.0.replace(None).unwrap()\n+    }\n+}\n+\n+fn main() {\n+    let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n+    let bad_addr = &unpinned as *const MyType<'_> as usize;\n+    let mut p = Box::pin(MyType(Cell::new(Some(&mut unpinned)), PhantomPinned));\n+\n+    // p_mut1 is okay: it does not point to the bad_addr\n+    let p_mut1: Pin<&mut MyType<'_>> = p.as_mut();\n+    assert_ne!(bad_addr, &*p_mut1 as *const _ as usize);\n+\n+    // but p_mut2 does point to bad_addr! this is unsound\n+    let p_mut2: Pin<&mut MyType<'_>> = p_mut1.clone();\n+    assert_eq!(bad_addr, &*p_mut2 as *const _ as usize);\n+}"}, {"sha": "f3305722cf2d32b768af934b5f4131af113a9188", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+error[E0748]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+  --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n+   |\n+LL | impl<'a> Clone for &'a mut MyType<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ positive implementation here\n+   |\n+   = note: negative implementation in crate `core`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "cc27c301ffa9d7ed6e0d0407268bb1c6b50b4f48", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,33 @@\n+// Demonstrate that \"rogue\" `DerefMut` impls for `&T` are not allowed.\n+//\n+// https://github.com/rust-lang/rust/issues/66544\n+\n+use std::cell::Cell;\n+use std::marker::PhantomPinned;\n+use std::ops::DerefMut;\n+use std::pin::Pin;\n+\n+struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n+\n+impl<'a> DerefMut for &'a MyType<'a> {\n+    //~^ ERROR E0748\n+    fn deref_mut(&mut self) -> &mut MyType<'a> {\n+        self.0.replace(None).unwrap()\n+    }\n+}\n+\n+fn main() {\n+    let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n+    let bad_addr = &unpinned as *const MyType<'_> as usize;\n+    let p = Box::pin(MyType(Cell::new(Some(&mut unpinned)), PhantomPinned));\n+\n+    // p_ref is okay: it does not point to the bad_addr\n+    let mut p_ref: Pin<&MyType<'_>> = p.as_ref();\n+    assert_ne!(bad_addr, &*p_ref as *const _ as usize);\n+\n+    // but p_mut does point to bad_addr! this is unsound\n+    let p_mut: Pin<&mut MyType<'_>> = p_ref.as_mut();\n+    assert_eq!(bad_addr, &*p_mut as *const _ as usize);\n+\n+    println!(\"oh no!\");\n+}"}, {"sha": "4e71c2468246b9d109033248bbddda0ec4a1ce64", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+error[E0748]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+  --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n+   |\n+LL | impl<'a> DerefMut for &'a MyType<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ positive implementation here\n+   |\n+   = note: negative implementation in crate `core`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "eac4c24d5d3d0f8a0fb84c4c9175e91a2e5069ee", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,9 @@\n+#![feature(specialization)]\n+#![feature(negative_impls)]\n+\n+trait MyTrait {}\n+\n+impl<T> !MyTrait for T {}\n+impl MyTrait for u32 {} //~ ERROR E0748\n+\n+fn main() {}"}, {"sha": "ab371945a7eab9c39889375800e41cebb32bbcd8", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+  --> $DIR/positive-specializes-negative.rs:7:1\n+   |\n+LL | impl<T> !MyTrait for T {}\n+   | ---------------------- negative implementation here\n+LL | impl MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^ positive implementation here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "db72aaf18034f3a6ec177f7f1cd52c8ff85255a7", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,21 @@\n+#![feature(negative_impls)]\n+\n+// aux-build: foreign_trait.rs\n+\n+// Test that we cannot implement `LocalTrait` for `String`,\n+// even though there is a `String: !ForeignTrait` impl.\n+//\n+// This may not be the behavior we want long term, but it's the\n+// current semantics that we implemented so as to land `!Foo` impls\n+// quickly. See internals thread:\n+//\n+// https://internals.rust-lang.org/t/foo/11587/\n+\n+extern crate foreign_trait;\n+use foreign_trait::ForeignTrait;\n+\n+trait LocalTrait { }\n+impl<T: ForeignTrait> LocalTrait for T { }\n+impl LocalTrait for String { } //~ ERROR conflicting implementations\n+\n+fn main() { }"}, {"sha": "7cce45d2c8f8f1929ace12f1f52aa867d9f0bd68", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `LocalTrait` for type `std::string::String`:\n+  --> $DIR/rely-on-negative-impl-in-coherence.rs:19:1\n+   |\n+LL | impl<T: ForeignTrait> LocalTrait for T { }\n+   | -------------------------------------- first implementation here\n+LL | impl LocalTrait for String { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::string::String`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "4106f56d64ac6c36672083611abe0b04e72c7ed9", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,11 +1,10 @@\n #![allow(dead_code)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Overlapping negative impls for `MyStruct` are not permitted:\n struct MyStruct;\n impl !Send for MyStruct {}\n impl !Send for MyStruct {}\n //~^ ERROR conflicting implementations of trait\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "00823d13b3696be2360c9a2d931c4f0277b48ced", "filename": "src/test/ui/traits/overlap-permitted-for-marker-traits.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+// Tests for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits without items. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`.\n+\n+#![feature(marker_trait_attr)]\n+#![feature(negative_impls)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker]\n+trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    // Debug && Display:\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+\n+    // Debug && !Display:\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}, {"sha": "c809f9e89f934688b1f38ae5791eaf5280437859", "filename": "src/test/ui/traits/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct TestType;\n "}, {"sha": "571f934fc5bc720d74139729b4609ea4e835b794", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -3,6 +3,7 @@\n // to be synthesized.\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic: Copy {} //~ ERROR E0568\n "}, {"sha": "f44986da0e2302e9eaf1d12bb0753d6d40eff529", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,13 +1,13 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:19\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:8:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits\n    |            |\n    |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:16:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |    ----    ----- required by this bound in `copy`"}, {"sha": "8824a6d2767f74cc76ade01e05d7e42276651799", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}"}, {"sha": "63b3300f6dbf4d1ed641bd9dbbbba9fcdfdd8e94", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:20\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:4:20\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n    |            -----   ^^^^^ help: remove the super traits"}, {"sha": "edbca9151248672a02a63bfb50170fb44ee57c6a", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -23,6 +23,7 @@\n // }\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic: Copy {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}"}, {"sha": "796638fc54dce7651c5f8583988d2223a4b223c4", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:19\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:28:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits"}, {"sha": "71ac2b466c10a191ee0dfff89bdc9970a25ae475", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "23401ca308676d85bc5df1b209ceb9eba619f7ff", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n-  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:16:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n    |    ----------    ------- required by this bound in `is_mytrait`"}, {"sha": "6483b9213dc5303f4dfb68caf1339a7a3b2aa39d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "a30b29a3893cc79052dd573d2ec7e4c36a8fb22d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:18\n+  --> $DIR/typeck-default-trait-impl-constituent-types.rs:21:18\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n    |    ----------    ------- required by this bound in `is_mytrait`"}, {"sha": "772ac322032ec49743dcd6af0ee9750383edc854", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -3,7 +3,7 @@\n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate tdticc_coherence_lib as lib;\n "}, {"sha": "3a2fc39d409d9b4b9b4d61459b0d9326daa414d0", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct MySendable {\n    t: *mut u8"}, {"sha": "2734b761e61b7c3f58221801646d37a81a86e811", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Managed;\n impl !Send for Managed {}"}, {"sha": "47cab60625dce59c6b2593b99cef0c2343f26763", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "e31bb81074469052e2bae83ac86b1a88f3db774c", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:21:19\n+  --> $DIR/typeck-default-trait-impl-negation.rs:22:19\n    |\n LL | fn is_my_trait<T: MyTrait>() {}\n    |    -----------    ------- required by this bound in `is_my_trait`\n@@ -11,7 +11,7 @@ LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n              <ThisImplsUnsafeTrait as MyTrait>\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:24:26\n+  --> $DIR/typeck-default-trait-impl-negation.rs:25:26\n    |\n LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n    |    ------------------    ------------- required by this bound in `is_my_unsafe_trait`"}, {"sha": "614a5ff55b1ed0e95d03d85849c955d87e01bc7d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -4,6 +4,7 @@\n // impls whose types unify.\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Defaulted { }\n impl<'a,T:Signed> Defaulted for &'a T { }"}, {"sha": "0d256094c60e02d740915295327c6fa63b548748", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-precedence.rs:18:5\n+  --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n    |\n LL | fn is_defaulted<T:Defaulted>() { }\n    |    ------------   --------- required by this bound in `is_defaulted`"}, {"sha": "fef98977cc435f60002af2b5293008efb7372eb5", "filename": "src/test/ui/typeck/typeck-negative-impls-builtin.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs?ref=3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "patch": "@@ -1,12 +0,0 @@\n-#![feature(optin_builtin_traits)]\n-\n-struct TestType;\n-\n-trait TestTrait {\n-    fn dummy(&self) { }\n-}\n-\n-impl !TestTrait for TestType {}\n-//~^ ERROR invalid negative impl\n-\n-fn main() {}"}, {"sha": "c90655086acdac1d03623a5a89c0889d04b90d59", "filename": "src/test/ui/typeck/typeck-negative-impls-builtin.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr?ref=3b1d7351186a073c72e4be3c7d7b7ab8f1f10c58", "patch": "@@ -1,11 +0,0 @@\n-error[E0192]: invalid negative impl\n-  --> $DIR/typeck-negative-impls-builtin.rs:9:6\n-   |\n-LL | impl !TestTrait for TestType {}\n-   |      ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0192`."}, {"sha": "dc5ddf515630289810c5cf8058c3d144a8856a57", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a63cb932cc94a4360219780a46fc3bcfb89e88/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs?ref=b0a63cb932cc94a4360219780a46fc3bcfb89e88", "patch": "@@ -1,6 +1,6 @@\n // Verify that UnsafeCell is *always* !Sync regardless if `T` is sync.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::cell::UnsafeCell;\n use std::marker::Sync;"}]}