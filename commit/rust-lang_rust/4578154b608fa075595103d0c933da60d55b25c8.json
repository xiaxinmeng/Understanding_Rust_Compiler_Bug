{"sha": "4578154b608fa075595103d0c933da60d55b25c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzgxNTRiNjA4ZmEwNzU1OTUxMDNkMGM5MzNkYTYwZDU1YjI1Yzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-10T10:04:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-10T10:04:44Z"}, "message": "Merge #4409\n\n4409: Hot fix panic for function_signature r=edwin0cheng a=edwin0cheng\n\nI am totally agree this comment: \r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac/crates/ra_ide/src/display/function_signature.rs#L3-L4\r\n\r\nBut let hot fix all panic for right now, it is so disturbing when browsing code...\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "bc1a053e62b2bf3681fbc734f1c24b43a6916ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1a053e62b2bf3681fbc734f1c24b43a6916ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4578154b608fa075595103d0c933da60d55b25c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJet9G8CRBK7hj4Ov3rIwAAdHIIACSkDYVz+2NGHC+nagtUIayU\nEj+Lt53aAdR+Hz/LFeYiAMdK8kz74Zg4Hy7/WL4uQFLLy2+wq8yB7D9/IsIIzQbE\nfhFZlxQYkSXY7xR7XOxZqFZW9SnIMWtF0LoNbsEhANlA+BP76Xk+yytnC9gi1V2t\nEUQBG/cbXdyXOEQuhohdcFw5+/3SKEQZ6a79vADeczBTV94SOR3I0pdGZbBl2ImE\nSQmqLqQupLK2+Lv83fdQZXN3eAR59xLyl377vCKrl0y8iQlkxbuuGKNQ0bo+QWdn\nZfnkcMqfxe18GvCbCN2XgqT/BCqerdsnxHn8hbN6LUWuGcfzCAMeP5yKG1Cra+E=\n=M02p\n-----END PGP SIGNATURE-----\n", "payload": "tree bc1a053e62b2bf3681fbc734f1c24b43a6916ac1\nparent f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac\nparent a3375c1a88848195a7fd83d29acdab4029ca1459\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589105084 +0000\ncommitter GitHub <noreply@github.com> 1589105084 +0000\n\nMerge #4409\n\n4409: Hot fix panic for function_signature r=edwin0cheng a=edwin0cheng\n\nI am totally agree this comment: \r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac/crates/ra_ide/src/display/function_signature.rs#L3-L4\r\n\r\nBut let hot fix all panic for right now, it is so disturbing when browsing code...\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8", "html_url": "https://github.com/rust-lang/rust/commit/4578154b608fa075595103d0c933da60d55b25c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac", "html_url": "https://github.com/rust-lang/rust/commit/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac"}, {"sha": "a3375c1a88848195a7fd83d29acdab4029ca1459", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3375c1a88848195a7fd83d29acdab4029ca1459", "html_url": "https://github.com/rust-lang/rust/commit/a3375c1a88848195a7fd83d29acdab4029ca1459"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "9572debd822c7983342845a3e7ba763fb92f611c", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4578154b608fa075595103d0c933da60d55b25c8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4578154b608fa075595103d0c933da60d55b25c8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=4578154b608fa075595103d0c933da60d55b25c8", "patch": "@@ -84,8 +84,8 @@ impl FunctionSignature {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n \n-            if let Some(param_type) = raw_param.split(':').nth(1) {\n-                parameter_types.push(param_type[1..].to_string());\n+            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                parameter_types.push(param_type.to_string());\n             } else {\n                 // useful when you have tuple struct\n                 parameter_types.push(raw_param.clone());\n@@ -129,8 +129,8 @@ impl FunctionSignature {\n         for field in variant.fields(db).into_iter() {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n-            if let Some(param_type) = raw_param.split(':').nth(1) {\n-                parameter_types.push(param_type[1..].to_string());\n+            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                parameter_types.push(param_type.to_string());\n             } else {\n                 // The unwrap_or_else is useful when you have tuple\n                 parameter_types.push(raw_param);\n@@ -197,16 +197,21 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     let raw_param = self_param.syntax().text().to_string();\n \n                     res_types.push(\n-                        raw_param.split(':').nth(1).unwrap_or_else(|| \" Self\")[1..].to_string(),\n+                        raw_param\n+                            .split(':')\n+                            .nth(1)\n+                            .and_then(|it| it.get(1..))\n+                            .unwrap_or_else(|| \"Self\")\n+                            .to_string(),\n                     );\n                     res.push(raw_param);\n                 }\n \n                 res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n                 res_types.extend(param_list.params().map(|param| {\n                     let param_text = param.syntax().text().to_string();\n-                    match param_text.split(':').nth(1) {\n-                        Some(it) => it[1..].to_string(),\n+                    match param_text.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                        Some(it) => it.to_string(),\n                         None => param_text,\n                     }\n                 }));"}]}