{"sha": "7cefee027ae8937058e4109911a4ded2e643399b", "node_id": "C_kwDOAAsO6NoAKDdjZWZlZTAyN2FlODkzNzA1OGU0MTA5OTExYTRkZWQyZTY0MzM5OWI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-12-20T15:56:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Add possibility to check parsed query", "tree": {"sha": "0cdbb03bf58df58ef177ee3c8ee6cd9124bcf08f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cdbb03bf58df58ef177ee3c8ee6cd9124bcf08f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cefee027ae8937058e4109911a4ded2e643399b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cefee027ae8937058e4109911a4ded2e643399b", "html_url": "https://github.com/rust-lang/rust/commit/7cefee027ae8937058e4109911a4ded2e643399b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cefee027ae8937058e4109911a4ded2e643399b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f51652ad3502bfbedfc3762f5e63e578883146b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f51652ad3502bfbedfc3762f5e63e578883146b", "html_url": "https://github.com/rust-lang/rust/commit/0f51652ad3502bfbedfc3762f5e63e578883146b"}], "stats": {"total": 165, "additions": 144, "deletions": 21}, "files": [{"sha": "207ddc944def69291991b7c79f6187b2bdff36e5", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 144, "deletions": 21, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/7cefee027ae8937058e4109911a4ded2e643399b/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/7cefee027ae8937058e4109911a4ded2e643399b/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=7cefee027ae8937058e4109911a4ded2e643399b", "patch": "@@ -58,7 +58,8 @@ function extractFunction(content, functionName) {\n                 } while (pos < content.length && content[pos] !== '/' && content[pos - 1] !== '*');\n \n             // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+            } else if ((content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") &&\n+                       (pos === 0 || content[pos - 1] !== '/')) {\n                 stop = content[pos];\n                 do {\n                     if (content[pos] === '\\\\') {\n@@ -269,8 +270,7 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n     // execQuery last parameter is built in buildIndex.\n     // buildIndex requires the hashmap from search-index.\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"handleAliases\", \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\",\n-                           \"removeEmptyStringsFromArray\"];\n+                           \"buildIndex\", \"execQuery\", \"parseQuery\", \"createQueryResults\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};\n@@ -286,12 +286,100 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n     return [loaded, index];\n }\n \n+function checkFieldNeededFields(fullPath, expected, error_text, queryName, position) {\n+    let fieldsToCheck;\n+    if (fullPath.length === 0) {\n+        fieldsToCheck = [\n+            \"foundElems\",\n+            \"id\",\n+            \"nameSplit\",\n+            \"original\",\n+            \"returned\",\n+            \"typeFilter\",\n+            \"val\",\n+            \"error\",\n+        ];\n+    } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"generics\")) {\n+        fieldsToCheck = [\n+            \"name\",\n+            \"fullPath\",\n+            \"pathWithoutLast\",\n+            \"pathLast\",\n+            \"generics\",\n+        ];\n+    } else {\n+        fieldsToCheck = [];\n+    }\n+    for (var i = 0; i < fieldsToCheck.length; ++i) {\n+        const field = fieldsToCheck[i];\n+        if (!expected.hasOwnProperty(field)) {\n+            let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n+            if (fullPath.length > 0) {\n+                text += ` in field \\`${fullPath}\\``;\n+                if (position != null) {\n+                    text += ` (position ${position})`;\n+                }\n+            }\n+            error_text.push(text);\n+        }\n+    }\n+}\n+\n+function valueCheck(fullPath, expected, result, error_text, queryName) {\n+    if (Array.isArray(expected)) {\n+        for (var i = 0; i < expected.length; ++i) {\n+            checkFieldNeededFields(fullPath, expected[i], error_text, queryName, i);\n+            if (i >= result.length) {\n+                error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n+                    `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(expected[i])}\\``);\n+            } else {\n+                valueCheck(fullPath + '[' + i + ']', expected[i], result[i], error_text, queryName);\n+            }\n+        }\n+        for (; i < result.length; ++i) {\n+            error_text.push(`${queryName}==> RESULT has extra value in array from field ` +\n+                `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(result[i])}\\` ` +\n+                'compared to EXPECTED');\n+        }\n+    } else if (expected !== null && typeof expected !== \"undefined\" &&\n+               expected.constructor == Object)\n+    {\n+        for (const key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!result.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            const obj_path = fullPath + (fullPath.length > 0 ? '.' : '') + key;\n+            valueCheck(obj_path, expected[key], result[key], error_text, queryName);\n+        }\n+    } else {\n+        expectedValue = JSON.stringify(expected);\n+        resultValue = JSON.stringify(result);\n+        if (expectedValue != resultValue) {\n+            error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n+                `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n+        }\n+    }\n+}\n+\n+function runParser(query, expected, loaded, loadedFile, queryName) {\n+    var error_text = [];\n+    checkFieldNeededFields(\"\", expected, error_text, queryName, null);\n+    if (error_text.length === 0) {\n+        valueCheck('', expected, loaded.parseQuery(query), error_text, queryName);\n+    }\n+    return error_text;\n+}\n+\n function runSearch(query, expected, index, loaded, loadedFile, queryName) {\n     const filter_crate = loadedFile.FILTER_CRATE;\n     const ignore_order = loadedFile.ignore_order;\n     const exact_check = loadedFile.exact_check;\n \n-    var results = loaded.execSearch(loaded.getQuery(query), index, filter_crate);\n+    var results = loaded.execQuery(loaded.parseQuery(query), index, filter_crate);\n     var error_text = [];\n \n     for (var key in expected) {\n@@ -353,40 +441,75 @@ function checkResult(error_text, loadedFile, displaySuccess) {\n     return 1;\n }\n \n-function runChecks(testFile, loaded, index) {\n-    var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;';\n-    if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n-        testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n-    } else {\n-        testFileContent += \"exports.FILTER_CRATE = null;\";\n-    }\n-    var loadedFile = loadContent(testFileContent);\n-\n-    const expected = loadedFile.EXPECTED;\n+function runCheck(loadedFile, key, callback) {\n+    const expected = loadedFile[key];\n     const query = loadedFile.QUERY;\n \n     if (Array.isArray(query)) {\n         if (!Array.isArray(expected)) {\n             console.log(\"FAILED\");\n-            console.log(\"==> If QUERY variable is an array, EXPECTED should be an array too\");\n+            console.log(`==> If QUERY variable is an array, ${key} should be an array too`);\n             return 1;\n         } else if (query.length !== expected.length) {\n             console.log(\"FAILED\");\n-            console.log(\"==> QUERY variable should have the same length as EXPECTED\");\n+            console.log(`==> QUERY variable should have the same length as ${key}`);\n             return 1;\n         }\n         for (var i = 0; i < query.length; ++i) {\n-            var error_text = runSearch(query[i], expected[i], index, loaded, loadedFile,\n-                \"[ query `\" + query[i] + \"`]\");\n+            var error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n             if (checkResult(error_text, loadedFile, false) !== 0) {\n                 return 1;\n             }\n         }\n         console.log(\"OK\");\n-        return 0;\n+    } else {\n+        var error_text = callback(query, expected, \"\");\n+        if (checkResult(error_text, loadedFile, true) !== 0) {\n+            return 1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+function runChecks(testFile, loaded, index) {\n+    var checkExpected = false;\n+    var checkParsed = false;\n+    var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+\n+    if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n+        testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n+    } else {\n+        testFileContent += \"exports.FILTER_CRATE = null;\";\n+    }\n+\n+    if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n+        testFileContent += 'exports.EXPECTED = EXPECTED;';\n+        checkExpected = true;\n+    }\n+    if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n+        testFileContent += 'exports.PARSED = PARSED;';\n+        checkParsed = true;\n+    }\n+    if (!checkParsed && !checkExpected) {\n+        console.log(\"FAILED\");\n+        console.log(\"==> At least `PARSED` or `EXPECTED` is needed!\");\n+        return 1;\n+    }\n+\n+    const loadedFile = loadContent(testFileContent);\n+    var res = 0;\n+\n+    if (checkExpected) {\n+        res += runCheck(loadedFile, \"EXPECTED\", (query, expected, text) => {\n+            return runSearch(query, expected, index, loaded, loadedFile, text);\n+        });\n+    }\n+    if (checkParsed) {\n+        res += runCheck(loadedFile, \"PARSED\", (query, expected, text) => {\n+            return runParser(query, expected, loaded, loadedFile, text);\n+        });\n     }\n-    var error_text = runSearch(query, expected, index, loaded, loadedFile, \"\");\n-    return checkResult(error_text, loadedFile, true);\n+    return res;\n }\n \n function load_files(doc_folder, resource_suffix, crate) {"}]}