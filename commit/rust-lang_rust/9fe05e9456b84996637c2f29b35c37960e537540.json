{"sha": "9fe05e9456b84996637c2f29b35c37960e537540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTA1ZTk0NTZiODQ5OTY2MzdjMmYyOWIzNWMzNzk2MGU1Mzc1NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T07:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T07:20:52Z"}, "message": "Auto merge of #68272 - Dylan-DPC:rollup-vrb90gu, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #67780 (Move some queries from rustc::ty to librustc_ty.)\n - #68096 (Clean up some diagnostics by making them more consistent)\n - #68223 (Use 3.6 instead of 3.5 in float fract() documentation)\n - #68265 (Fix some issue numbers of unstable features)\n - #68266 (Changed docs for f32 and f64.)\n\nFailed merges:\n\n - #68204 (Use named fields for `{ast,hir}::ItemKind::Impl`)\n\nr? @ghost", "tree": {"sha": "63b90b70dd13343e901b28e5f857ac404d8b32fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b90b70dd13343e901b28e5f857ac404d8b32fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe05e9456b84996637c2f29b35c37960e537540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe05e9456b84996637c2f29b35c37960e537540", "html_url": "https://github.com/rust-lang/rust/commit/9fe05e9456b84996637c2f29b35c37960e537540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe05e9456b84996637c2f29b35c37960e537540/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "html_url": "https://github.com/rust-lang/rust/commit/e02c475da5c7d942cac2e3cf9683ea4117d4fe46"}, {"sha": "90b9a627bf191ac0726ce96e02d44a42ff445bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b9a627bf191ac0726ce96e02d44a42ff445bf2", "html_url": "https://github.com/rust-lang/rust/commit/90b9a627bf191ac0726ce96e02d44a42ff445bf2"}], "stats": {"total": 1410, "additions": 742, "deletions": 668}, "files": [{"sha": "f33d7ff12febff8ddad98478bc31215fb2e5f310", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -3652,6 +3652,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_traits\",\n+ \"rustc_ty\",\n  \"rustc_typeck\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -3953,6 +3954,17 @@ dependencies = [\n  \"syntax\",\n ]\n \n+[[package]]\n+name = \"rustc_ty\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"rustc\",\n+ \"rustc_data_structures\",\n+ \"rustc_hir\",\n+ \"rustc_span\",\n+]\n+\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\""}, {"sha": "53e01091f754e4f15b22042335ac73001cd1df1b", "filename": "src/doc/unstable-book/src/language-features/infer-static-outlives-requirements.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n # `infer_static_outlives_requirements`\n \n-The tracking issue for this feature is: [#44493]\n+The tracking issue for this feature is: [#54185]\n \n-[#44493]: https://github.com/rust-lang/rust/issues/44493\n+[#54185]: https://github.com/rust-lang/rust/issues/54185\n \n ------------------------\n The `infer_static_outlives_requirements` feature indicates that certain"}, {"sha": "3ba4a3e6b1f02d169c262c23f9b4e2149c4b98ff", "filename": "src/doc/unstable-book/src/language-features/member-constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n # `member_constraints`\n \n-The tracking issue for this feature is: [#61977]\n+The tracking issue for this feature is: [#61997]\n \n-[#61977]: https://github.com/rust-lang/rust/issues/61977\n+[#61997]: https://github.com/rust-lang/rust/issues/61997\n \n ------------------------\n "}, {"sha": "146f50ee67b500ee0da555df5581b9233f3b4b79", "filename": "src/doc/unstable-book/src/language-features/repr128.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n # `repr128`\n \n-The tracking issue for this feature is: [#35118]\n+The tracking issue for this feature is: [#56071]\n \n-[#35118]: https://github.com/rust-lang/rust/issues/35118\n+[#56071]: https://github.com/rust-lang/rust/issues/56071\n \n ------------------------\n "}, {"sha": "15720ddcfc677f19a5f358fb0d9f37576866be3f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -44,7 +44,7 @@\n // Here we explicitly #[cfg]-out this whole crate when testing. If we don't do\n // this, both the generated test artifact and the linked libtest (which\n // transitively includes libcore) will both define the same set of lang items,\n-// and this will cause the E0152 \"duplicate lang item found\" error. See\n+// and this will cause the E0152 \"found duplicate lang item\" error. See\n // discussion in #50466 for details.\n //\n // This cfg won't affect doc tests."}, {"sha": "643359f098b4d3c5424a615f457c5a126db0f564", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -184,7 +184,7 @@ impl LanguageItemCollector<'tcx> {\n                         self.tcx.sess,\n                         span,\n                         E0152,\n-                        \"duplicate lang item found: `{}`.\",\n+                        \"found duplicate lang item `{}`\",\n                         name\n                     ),\n                     None => {\n@@ -206,12 +206,12 @@ impl LanguageItemCollector<'tcx> {\n                     },\n                 };\n                 if let Some(span) = self.tcx.hir().span_if_local(original_def_id) {\n-                    err.span_note(span, \"first defined here.\");\n+                    err.span_note(span, \"first defined here\");\n                 } else {\n                     match self.tcx.extern_crate(original_def_id) {\n                         Some(ExternCrate {dependency_of, ..}) => {\n                             err.note(&format!(\n-                            \"first defined in crate `{}` (which `{}` depends on).\",\n+                            \"first defined in crate `{}` (which `{}` depends on)\",\n                                       self.tcx.crate_name(original_def_id.krate),\n                                       self.tcx.crate_name(*dependency_of)));\n                         },"}, {"sha": "7f151af7abe502faf39c976fa86e289146864e73", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1156,7 +1156,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.span_help(impl_span, \"trait impl with same name found\");\n                 let trait_crate = self.tcx.crate_name(trait_with_same_path.krate);\n                 let crate_msg = format!(\n-                    \"Perhaps two different versions of crate `{}` are being used?\",\n+                    \"perhaps two different versions of crate `{}` are being used?\",\n                     trait_crate\n                 );\n                 err.note(&crate_msg);"}, {"sha": "e6acb6b74dc6340b449d074ef66d7875463c371e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 354, "changes": 356, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -18,7 +18,6 @@ use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::interpret::ErrorHandled;\n use crate::mir::GeneratorLayout;\n use crate::mir::ReadOnlyBodyAndCache;\n-use crate::session::CrateDisambiguator;\n use crate::session::DataTypeKind;\n use crate::traits::{self, Reveal};\n use crate::ty;\n@@ -31,7 +30,6 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -2423,70 +2421,6 @@ impl<'tcx> AdtDef {\n     pub fn sized_constraint(&self, tcx: TyCtxt<'tcx>) -> &'tcx [Ty<'tcx>] {\n         tcx.adt_sized_constraint(self.did).0\n     }\n-\n-    fn sized_constraint_for_ty(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n-        let result = match ty.kind {\n-            Bool | Char | Int(..) | Uint(..) | Float(..) | RawPtr(..) | Ref(..) | FnDef(..)\n-            | FnPtr(_) | Array(..) | Closure(..) | Generator(..) | Never => vec![],\n-\n-            Str | Dynamic(..) | Slice(_) | Foreign(..) | Error | GeneratorWitness(..) => {\n-                // these are never sized - return the target type\n-                vec![ty]\n-            }\n-\n-            Tuple(ref tys) => match tys.last() {\n-                None => vec![],\n-                Some(ty) => self.sized_constraint_for_ty(tcx, ty.expect_ty()),\n-            },\n-\n-            Adt(adt, substs) => {\n-                // recursive case\n-                let adt_tys = adt.sized_constraint(tcx);\n-                debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\", ty, adt_tys);\n-                adt_tys\n-                    .iter()\n-                    .map(|ty| ty.subst(tcx, substs))\n-                    .flat_map(|ty| self.sized_constraint_for_ty(tcx, ty))\n-                    .collect()\n-            }\n-\n-            Projection(..) | Opaque(..) => {\n-                // must calculate explicitly.\n-                // FIXME: consider special-casing always-Sized projections\n-                vec![ty]\n-            }\n-\n-            UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n-            Param(..) => {\n-                // perf hack: if there is a `T: Sized` bound, then\n-                // we know that `T` is Sized and do not need to check\n-                // it on the impl.\n-\n-                let sized_trait = match tcx.lang_items().sized_trait() {\n-                    Some(x) => x,\n-                    _ => return vec![ty],\n-                };\n-                let sized_predicate = Binder::dummy(TraitRef {\n-                    def_id: sized_trait,\n-                    substs: tcx.mk_substs_trait(ty, &[]),\n-                })\n-                .to_predicate();\n-                let predicates = tcx.predicates_of(self.did).predicates;\n-                if predicates.iter().any(|(p, _)| *p == sized_predicate) {\n-                    vec![]\n-                } else {\n-                    vec![ty]\n-                }\n-            }\n-\n-            Placeholder(..) | Bound(..) | Infer(..) => {\n-                bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\", ty)\n-            }\n-        };\n-        debug!(\"sized_constraint_for_ty({:?}) = {:?}\", ty, result);\n-        result\n-    }\n }\n \n impl<'tcx> FieldDef {\n@@ -2742,57 +2676,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         is_associated_item.then(|| self.associated_item(def_id))\n     }\n \n-    fn associated_item_from_trait_item_ref(\n-        self,\n-        parent_def_id: DefId,\n-        parent_vis: &hir::Visibility<'_>,\n-        trait_item_ref: &hir::TraitItemRef,\n-    ) -> AssocItem {\n-        let def_id = self.hir().local_def_id(trait_item_ref.id.hir_id);\n-        let (kind, has_self) = match trait_item_ref.kind {\n-            hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n-            hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n-            hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n-            hir::AssocItemKind::OpaqueTy => bug!(\"only impls can have opaque types\"),\n-        };\n-\n-        AssocItem {\n-            ident: trait_item_ref.ident,\n-            kind,\n-            // Visibility of trait items is inherited from their traits.\n-            vis: Visibility::from_hir(parent_vis, trait_item_ref.id.hir_id, self),\n-            defaultness: trait_item_ref.defaultness,\n-            def_id,\n-            container: TraitContainer(parent_def_id),\n-            method_has_self_argument: has_self,\n-        }\n-    }\n-\n-    fn associated_item_from_impl_item_ref(\n-        self,\n-        parent_def_id: DefId,\n-        impl_item_ref: &hir::ImplItemRef<'_>,\n-    ) -> AssocItem {\n-        let def_id = self.hir().local_def_id(impl_item_ref.id.hir_id);\n-        let (kind, has_self) = match impl_item_ref.kind {\n-            hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n-            hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n-            hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n-            hir::AssocItemKind::OpaqueTy => (ty::AssocKind::OpaqueTy, false),\n-        };\n-\n-        AssocItem {\n-            ident: impl_item_ref.ident,\n-            kind,\n-            // Visibility of trait impl items doesn't matter.\n-            vis: ty::Visibility::from_hir(&impl_item_ref.vis, impl_item_ref.id.hir_id, self),\n-            defaultness: impl_item_ref.defaultness,\n-            def_id,\n-            container: ImplContainer(parent_def_id),\n-            method_has_self_argument: has_self,\n-        }\n-    }\n-\n     pub fn field_index(self, hir_id: hir::HirId, tables: &TypeckTables<'_>) -> usize {\n         tables.field_indices().get(hir_id).cloned().expect(\"no index for a field\")\n     }\n@@ -3070,105 +2953,9 @@ impl Iterator for AssocItemsIterator<'_> {\n     }\n }\n \n-fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> AssocItem {\n-    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let parent_id = tcx.hir().get_parent_item(id);\n-    let parent_def_id = tcx.hir().local_def_id(parent_id);\n-    let parent_item = tcx.hir().expect_item(parent_id);\n-    match parent_item.kind {\n-        hir::ItemKind::Impl(.., ref impl_item_refs) => {\n-            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.hir_id == id) {\n-                let assoc_item =\n-                    tcx.associated_item_from_impl_item_ref(parent_def_id, impl_item_ref);\n-                debug_assert_eq!(assoc_item.def_id, def_id);\n-                return assoc_item;\n-            }\n-        }\n-\n-        hir::ItemKind::Trait(.., ref trait_item_refs) => {\n-            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.hir_id == id) {\n-                let assoc_item = tcx.associated_item_from_trait_item_ref(\n-                    parent_def_id,\n-                    &parent_item.vis,\n-                    trait_item_ref,\n-                );\n-                debug_assert_eq!(assoc_item.def_id, def_id);\n-                return assoc_item;\n-            }\n-        }\n-\n-        _ => {}\n-    }\n-\n-    span_bug!(\n-        parent_item.span,\n-        \"unexpected parent of trait or impl item or item not found: {:?}\",\n-        parent_item.kind\n-    )\n-}\n-\n #[derive(Clone, HashStable)]\n pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n \n-/// Calculates the `Sized` constraint.\n-///\n-/// In fact, there are only a few options for the types in the constraint:\n-///     - an obviously-unsized type\n-///     - a type parameter or projection whose Sizedness can't be known\n-///     - a tuple of type parameters or projections, if there are multiple\n-///       such.\n-///     - a Error, if a type contained itself. The representability\n-///       check should catch this case.\n-fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> AdtSizedConstraint<'_> {\n-    let def = tcx.adt_def(def_id);\n-\n-    let result = tcx.mk_type_list(\n-        def.variants\n-            .iter()\n-            .flat_map(|v| v.fields.last())\n-            .flat_map(|f| def.sized_constraint_for_ty(tcx, tcx.type_of(f.did))),\n-    );\n-\n-    debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n-\n-    AdtSizedConstraint(result)\n-}\n-\n-fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n-    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item(id);\n-    match item.kind {\n-        hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n-            trait_item_refs\n-                .iter()\n-                .map(|trait_item_ref| trait_item_ref.id)\n-                .map(|id| tcx.hir().local_def_id(id.hir_id)),\n-        ),\n-        hir::ItemKind::Impl(.., ref impl_item_refs) => tcx.arena.alloc_from_iter(\n-            impl_item_refs\n-                .iter()\n-                .map(|impl_item_ref| impl_item_ref.id)\n-                .map(|id| tcx.hir().local_def_id(id.hir_id)),\n-        ),\n-        hir::ItemKind::TraitAlias(..) => &[],\n-        _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),\n-    }\n-}\n-\n-fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n-    tcx.hir().span_if_local(def_id).unwrap()\n-}\n-\n-/// If the given `DefId` describes an item belonging to a trait,\n-/// returns the `DefId` of the trait that the trait item belongs to;\n-/// otherwise, returns `None`.\n-fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    tcx.opt_associated_item(def_id).and_then(|associated_item| match associated_item.container {\n-        TraitContainer(def_id) => Some(def_id),\n-        ImplContainer(_) => None,\n-    })\n-}\n-\n /// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition.\n pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n@@ -3181,151 +2968,12 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     None\n }\n \n-/// See `ParamEnv` struct definition for details.\n-fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ParamEnv<'_> {\n-    // The param_env of an impl Trait type is its defining function's param_env\n-    if let Some(parent) = is_impl_trait_defn(tcx, def_id) {\n-        return param_env(tcx, parent);\n-    }\n-    // Compute the bounds on Self and the type parameters.\n-\n-    let InstantiatedPredicates { predicates } = tcx.predicates_of(def_id).instantiate_identity(tcx);\n-\n-    // Finally, we have to normalize the bounds in the environment, in\n-    // case they contain any associated type projections. This process\n-    // can yield errors if the put in illegal associated types, like\n-    // `<i32 as Foo>::Bar` where `i32` does not implement `Foo`. We\n-    // report these errors right here; this doesn't actually feel\n-    // right to me, because constructing the environment feels like a\n-    // kind of a \"idempotent\" action, but I'm not sure where would be\n-    // a better place. In practice, we construct environments for\n-    // every fn once during type checking, and we'll abort if there\n-    // are any errors at that point, so after type checking you can be\n-    // sure that this will succeed without errors anyway.\n-\n-    let unnormalized_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        traits::Reveal::UserFacing,\n-        tcx.sess.opts.debugging_opts.chalk.then_some(def_id),\n-    );\n-\n-    let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-    });\n-    let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n-    traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n-}\n-\n-fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.sess.local_crate_disambiguator()\n-}\n-\n-fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.crate_name.clone()\n-}\n-\n-fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.hir().crate_hash\n-}\n-\n-fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx>, instance_def: InstanceDef<'tcx>) -> usize {\n-    match instance_def {\n-        InstanceDef::Item(..) | InstanceDef::DropGlue(..) => {\n-            let mir = tcx.instance_mir(instance_def);\n-            mir.basic_blocks().iter().map(|bb| bb.statements.len()).sum()\n-        }\n-        // Estimate the size of other compiler-generated shims to be 1.\n-        _ => 1,\n-    }\n-}\n-\n-/// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n-///\n-/// See [`ImplOverlapKind::Issue33140`] for more details.\n-fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n-    debug!(\"issue33140_self_ty({:?})\", def_id);\n-\n-    let trait_ref = tcx\n-        .impl_trait_ref(def_id)\n-        .unwrap_or_else(|| bug!(\"issue33140_self_ty called on inherent impl {:?}\", def_id));\n-\n-    debug!(\"issue33140_self_ty({:?}), trait-ref={:?}\", def_id, trait_ref);\n-\n-    let is_marker_like = tcx.impl_polarity(def_id) == ty::ImplPolarity::Positive\n-        && tcx.associated_item_def_ids(trait_ref.def_id).is_empty();\n-\n-    // Check whether these impls would be ok for a marker trait.\n-    if !is_marker_like {\n-        debug!(\"issue33140_self_ty - not marker-like!\");\n-        return None;\n-    }\n-\n-    // impl must be `impl Trait for dyn Marker1 + Marker2 + ...`\n-    if trait_ref.substs.len() != 1 {\n-        debug!(\"issue33140_self_ty - impl has substs!\");\n-        return None;\n-    }\n-\n-    let predicates = tcx.predicates_of(def_id);\n-    if predicates.parent.is_some() || !predicates.predicates.is_empty() {\n-        debug!(\"issue33140_self_ty - impl has predicates {:?}!\", predicates);\n-        return None;\n-    }\n-\n-    let self_ty = trait_ref.self_ty();\n-    let self_ty_matches = match self_ty.kind {\n-        ty::Dynamic(ref data, ty::ReStatic) => data.principal().is_none(),\n-        _ => false,\n-    };\n-\n-    if self_ty_matches {\n-        debug!(\"issue33140_self_ty - MATCHES!\");\n-        Some(self_ty)\n-    } else {\n-        debug!(\"issue33140_self_ty - non-matching self type\");\n-        None\n-    }\n-}\n-\n-/// Check if a function is async.\n-fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n-    let hir_id = tcx\n-        .hir()\n-        .as_local_hir_id(def_id)\n-        .unwrap_or_else(|| bug!(\"asyncness: expected local `DefId`, got `{:?}`\", def_id));\n-\n-    let node = tcx.hir().get(hir_id);\n-\n-    let fn_like = hir_map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n-        bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n-    });\n-\n-    fn_like.asyncness()\n-}\n-\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n-    *providers = ty::query::Providers {\n-        asyncness,\n-        associated_item,\n-        associated_item_def_ids,\n-        adt_sized_constraint,\n-        def_span,\n-        param_env,\n-        trait_of_item,\n-        crate_disambiguator,\n-        original_crate_name,\n-        crate_hash,\n-        trait_impls_of: trait_def::trait_impls_of_provider,\n-        instance_def_size_estimate,\n-        issue33140_self_ty,\n-        ..*providers\n-    };\n+    *providers =\n+        ty::query::Providers { trait_impls_of: trait_def::trait_impls_of_provider, ..*providers };\n }\n \n /// A map for the local crate mapping each type to a vector of its"}, {"sha": "1e4b1ae07776212a8261dc882d999c45b7f71baf", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -413,7 +413,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n             ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span, \"The `!` type is experimental\");\n+                gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n             }\n             _ => {}\n         }"}, {"sha": "07715cdbcb5e92e2dede68640c07d8209184cdfc", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -325,7 +325,7 @@ fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n                              `expected = \\\"error message\\\"`\",\n                         )\n                         .note(\n-                            \"Errors in this attribute were erroneously \\\n+                            \"errors in this attribute were erroneously \\\n                                 allowed and will become a hard error in a \\\n                                 future release.\",\n                         )"}, {"sha": "4c8c47a5671134b3cf270988e91fc22bc1a81215", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -333,7 +333,7 @@ declare_features! (\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n     /// Allows the `#[repr(i128)]` attribute for enums.\n-    (active, repr128, \"1.16.0\", Some(35118), None),\n+    (active, repr128, \"1.16.0\", Some(56071), None),\n \n     /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n@@ -481,7 +481,7 @@ declare_features! (\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n     /// Allows `impl Trait` with multiple unrelated lifetimes.\n-    (active, member_constraints, \"1.37.0\", Some(61977), None),\n+    (active, member_constraints, \"1.37.0\", Some(61997), None),\n \n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),"}, {"sha": "1fe5248dbf4ceac9b33712b6cbacc2af81081689", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -40,6 +40,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_plugin_impl = { path = \"../librustc_plugin_impl\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n+rustc_ty = { path = \"../librustc_ty\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n "}, {"sha": "c4444fbaa2fc761390e2b1b99be5d6cf84fa33ec", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -680,6 +680,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_passes::provide(providers);\n     rustc_resolve::provide(providers);\n     rustc_traits::provide(providers);\n+    rustc_ty::provide(providers);\n     rustc_metadata::provide(providers);\n     rustc_lint::provide(providers);\n     rustc_codegen_utils::provide(providers);"}, {"sha": "6314c2b99539aae399deeb54b6bcb05b9b009096", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -657,7 +657,7 @@ impl EarlyLintPass for AnonymousParameters {\n                                 )\n                                 .span_suggestion(\n                                     arg.pat.span,\n-                                    \"Try naming the parameter or explicitly \\\n+                                    \"try naming the parameter or explicitly \\\n                                     ignoring it\",\n                                     format!(\"_: {}\", ty_snip),\n                                     appl,\n@@ -1934,21 +1934,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n             use rustc::ty::TyKind::*;\n             match ty.kind {\n                 // Primitive types that don't like 0 as a value.\n-                Ref(..) => Some((format!(\"References must be non-null\"), None)),\n+                Ref(..) => Some((format!(\"references must be non-null\"), None)),\n                 Adt(..) if ty.is_box() => Some((format!(\"`Box` must be non-null\"), None)),\n-                FnPtr(..) => Some((format!(\"Function pointers must be non-null\"), None)),\n-                Never => Some((format!(\"The never type (`!`) has no valid value\"), None)),\n+                FnPtr(..) => Some((format!(\"function pointers must be non-null\"), None)),\n+                Never => Some((format!(\"the `!` type has no valid value\"), None)),\n                 RawPtr(tm) if matches!(tm.ty.kind, Dynamic(..)) =>\n                 // raw ptr to dyn Trait\n                 {\n-                    Some((format!(\"The vtable of a wide raw pointer must be non-null\"), None))\n+                    Some((format!(\"the vtable of a wide raw pointer must be non-null\"), None))\n                 }\n                 // Primitive types with other constraints.\n                 Bool if init == InitKind::Uninit => {\n-                    Some((format!(\"Booleans must be `true` or `false`\"), None))\n+                    Some((format!(\"booleans must be either `true` or `false`\"), None))\n                 }\n                 Char if init == InitKind::Uninit => {\n-                    Some((format!(\"Characters must be a valid unicode codepoint\"), None))\n+                    Some((format!(\"characters must be a valid Unicode codepoint\"), None))\n                 }\n                 // Recurse and checks for some compound types.\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n@@ -1959,21 +1959,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         // return `Bound::Excluded`.  (And we have tests checking that we\n                         // handle the attribute correctly.)\n                         (Bound::Included(lo), _) if lo > 0 => {\n-                            return Some((format!(\"{} must be non-null\", ty), None));\n+                            return Some((format!(\"`{}` must be non-null\", ty), None));\n                         }\n                         (Bound::Included(_), _) | (_, Bound::Included(_))\n                             if init == InitKind::Uninit =>\n                         {\n                             return Some((\n-                                format!(\"{} must be initialized inside its custom valid range\", ty),\n+                                format!(\n+                                    \"`{}` must be initialized inside its custom valid range\",\n+                                    ty,\n+                                ),\n                                 None,\n                             ));\n                         }\n                         _ => {}\n                     }\n                     // Now, recurse.\n                     match adt_def.variants.len() {\n-                        0 => Some((format!(\"0-variant enums have no valid value\"), None)),\n+                        0 => Some((format!(\"enums with no variants have no valid value\"), None)),\n                         1 => {\n                             // Struct, or enum with exactly one variant.\n                             // Proceed recursively, check all fields."}, {"sha": "73718d58346f10a6a85f7faf6db59a298bbead85", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -360,7 +360,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     // better.\n \n     if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"External requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"external requirements\");\n \n         regioncx.annotate(tcx, &mut err);\n \n@@ -379,7 +379,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n \n         err.buffer(errors_buffer);\n     } else {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"No external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"no external requirements\");\n         regioncx.annotate(tcx, &mut err);\n \n         err.buffer(errors_buffer);"}, {"sha": "3d40b91a7bdc8e664f1d2bfe00f1c6a57a3123c7", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -236,8 +236,8 @@ impl<'a> Parser<'a> {\n             self.struct_span_err(lit.span, msg)\n                 .help(\n                     \"instead of using a suffixed literal \\\n-                                    (1u8, 1.0f32, etc.), use an unsuffixed version \\\n-                                    (1, 1.0, etc.).\",\n+                                    (`1u8`, `1.0f32`, etc.), use an unsuffixed version \\\n+                                    (`1`, `1.0`, etc.)\",\n                 )\n                 .emit()\n         }"}, {"sha": "549acf67d38245038dad6c5d196a664f00e44d82", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -209,13 +209,13 @@ impl<'a> Parser<'a> {\n         if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n             err.span_suggestion(\n                 seq_span,\n-                \"try adding parentheses to match on a tuple..\",\n+                \"try adding parentheses to match on a tuple...\",\n                 format!(\"({})\", seq_snippet),\n                 Applicability::MachineApplicable,\n             )\n             .span_suggestion(\n                 seq_span,\n-                \"..or a vertical bar to match on multiple alternatives\",\n+                \"...or a vertical bar to match on multiple alternatives\",\n                 format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "8d220a3f695f28df454b1730c77d39958de80dda", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -73,7 +73,7 @@ fn collect_item(\n                 )),\n             };\n             if let Some(span) = tcx.hir().span_if_local(original_def_id) {\n-                err.span_note(span, \"first defined here.\");\n+                err.span_note(span, \"first defined here\");\n             } else {\n                 err.note(&format!(\n                     \"first defined in crate `{}`.\","}, {"sha": "e8ed64a18702d0259c4540a930d92cf7de9008f0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -963,7 +963,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             .session\n                             .struct_span_err(\n                                 attr.span,\n-                                \"`macro_use` is not supported on `extern crate self`\",\n+                                \"`#[macro_use]` is not supported on `extern crate self`\",\n                             )\n                             .emit();\n                     }\n@@ -1054,10 +1054,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {\n         for attr in attrs {\n             if attr.check_name(sym::macro_escape) {\n-                let msg = \"macro_escape is a deprecated synonym for macro_use\";\n+                let msg = \"`#[macro_escape]` is a deprecated synonym for `#[macro_use]`\";\n                 let mut err = self.r.session.struct_span_warn(attr.span, msg);\n                 if let ast::AttrStyle::Inner = attr.style {\n-                    err.help(\"consider an outer attribute, `#[macro_use]` mod ...\").emit();\n+                    err.help(\"try an outer attribute: `#[macro_use]`\").emit();\n                 } else {\n                     err.emit();\n                 }\n@@ -1066,7 +1066,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             if !attr.is_word() {\n-                self.r.session.span_err(attr.span, \"arguments to macro_use are not allowed here\");\n+                self.r.session.span_err(attr.span, \"arguments to `macro_use` are not allowed here\");\n             }\n             return true;\n         }"}, {"sha": "8d5afb194a17500ce953e892931a06538dc388a9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -2006,7 +2006,7 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                     }\n-                    let msg = \"there are too many initial `super`s.\".to_string();\n+                    let msg = \"there are too many leading `super` keywords\".to_string();\n                     return PathResult::Failed {\n                         span: ident.span,\n                         label: msg,"}, {"sha": "fb0d93fe5ebb6a8ee899bbd941e8b5a47c71a5b2", "filename": "src/librustc_ty/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_ty\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_ty\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc = { path = \"../librustc\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n+rustc_span = { path = \"../librustc_span\" }"}, {"sha": "2548d2cff976611b1b056f8f4806932ae8e078ba", "filename": "src/librustc_ty/lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -0,0 +1,25 @@\n+//! Various checks\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(bool_to_option)]\n+#![feature(in_band_lifetimes)]\n+#![feature(nll)]\n+#![feature(slice_patterns)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc;\n+#[macro_use]\n+extern crate log;\n+\n+use rustc::ty::query::Providers;\n+\n+mod ty;\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    ty::provide(providers);\n+}"}, {"sha": "fc8beb67e4adade93ad0985adf7944647ef476f0", "filename": "src/librustc_ty/ty.rs", "status": "added", "additions": 369, "deletions": 0, "changes": 369, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -0,0 +1,369 @@\n+use rustc::hir::map as hir_map;\n+use rustc::session::CrateDisambiguator;\n+use rustc::traits::{self};\n+use rustc::ty::subst::Subst;\n+use rustc::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_data_structures::svh::Svh;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::Span;\n+\n+fn sized_constraint_for_ty(tcx: TyCtxt<'tcx>, adtdef: &ty::AdtDef, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    use ty::TyKind::*;\n+\n+    let result = match ty.kind {\n+        Bool | Char | Int(..) | Uint(..) | Float(..) | RawPtr(..) | Ref(..) | FnDef(..)\n+        | FnPtr(_) | Array(..) | Closure(..) | Generator(..) | Never => vec![],\n+\n+        Str | Dynamic(..) | Slice(_) | Foreign(..) | Error | GeneratorWitness(..) => {\n+            // these are never sized - return the target type\n+            vec![ty]\n+        }\n+\n+        Tuple(ref tys) => match tys.last() {\n+            None => vec![],\n+            Some(ty) => sized_constraint_for_ty(tcx, adtdef, ty.expect_ty()),\n+        },\n+\n+        Adt(adt, substs) => {\n+            // recursive case\n+            let adt_tys = adt.sized_constraint(tcx);\n+            debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\", ty, adt_tys);\n+            adt_tys\n+                .iter()\n+                .map(|ty| ty.subst(tcx, substs))\n+                .flat_map(|ty| sized_constraint_for_ty(tcx, adtdef, ty))\n+                .collect()\n+        }\n+\n+        Projection(..) | Opaque(..) => {\n+            // must calculate explicitly.\n+            // FIXME: consider special-casing always-Sized projections\n+            vec![ty]\n+        }\n+\n+        UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n+        Param(..) => {\n+            // perf hack: if there is a `T: Sized` bound, then\n+            // we know that `T` is Sized and do not need to check\n+            // it on the impl.\n+\n+            let sized_trait = match tcx.lang_items().sized_trait() {\n+                Some(x) => x,\n+                _ => return vec![ty],\n+            };\n+            let sized_predicate = ty::Binder::dummy(ty::TraitRef {\n+                def_id: sized_trait,\n+                substs: tcx.mk_substs_trait(ty, &[]),\n+            })\n+            .to_predicate();\n+            let predicates = tcx.predicates_of(adtdef.did).predicates;\n+            if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n+        }\n+\n+        Placeholder(..) | Bound(..) | Infer(..) => {\n+            bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\", ty)\n+        }\n+    };\n+    debug!(\"sized_constraint_for_ty({:?}) = {:?}\", ty, result);\n+    result\n+}\n+\n+fn associated_item_from_trait_item_ref(\n+    tcx: TyCtxt<'_>,\n+    parent_def_id: DefId,\n+    parent_vis: &hir::Visibility<'_>,\n+    trait_item_ref: &hir::TraitItemRef,\n+) -> ty::AssocItem {\n+    let def_id = tcx.hir().local_def_id(trait_item_ref.id.hir_id);\n+    let (kind, has_self) = match trait_item_ref.kind {\n+        hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n+        hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n+        hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n+        hir::AssocItemKind::OpaqueTy => bug!(\"only impls can have opaque types\"),\n+    };\n+\n+    ty::AssocItem {\n+        ident: trait_item_ref.ident,\n+        kind,\n+        // Visibility of trait items is inherited from their traits.\n+        vis: ty::Visibility::from_hir(parent_vis, trait_item_ref.id.hir_id, tcx),\n+        defaultness: trait_item_ref.defaultness,\n+        def_id,\n+        container: ty::TraitContainer(parent_def_id),\n+        method_has_self_argument: has_self,\n+    }\n+}\n+\n+fn associated_item_from_impl_item_ref(\n+    tcx: TyCtxt<'_>,\n+    parent_def_id: DefId,\n+    impl_item_ref: &hir::ImplItemRef<'_>,\n+) -> ty::AssocItem {\n+    let def_id = tcx.hir().local_def_id(impl_item_ref.id.hir_id);\n+    let (kind, has_self) = match impl_item_ref.kind {\n+        hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n+        hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n+        hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n+        hir::AssocItemKind::OpaqueTy => (ty::AssocKind::OpaqueTy, false),\n+    };\n+\n+    ty::AssocItem {\n+        ident: impl_item_ref.ident,\n+        kind,\n+        // Visibility of trait impl items doesn't matter.\n+        vis: ty::Visibility::from_hir(&impl_item_ref.vis, impl_item_ref.id.hir_id, tcx),\n+        defaultness: impl_item_ref.defaultness,\n+        def_id,\n+        container: ty::ImplContainer(parent_def_id),\n+        method_has_self_argument: has_self,\n+    }\n+}\n+\n+fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n+    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let parent_id = tcx.hir().get_parent_item(id);\n+    let parent_def_id = tcx.hir().local_def_id(parent_id);\n+    let parent_item = tcx.hir().expect_item(parent_id);\n+    match parent_item.kind {\n+        hir::ItemKind::Impl(.., ref impl_item_refs) => {\n+            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.hir_id == id) {\n+                let assoc_item =\n+                    associated_item_from_impl_item_ref(tcx, parent_def_id, impl_item_ref);\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.hir_id == id) {\n+                let assoc_item = associated_item_from_trait_item_ref(\n+                    tcx,\n+                    parent_def_id,\n+                    &parent_item.vis,\n+                    trait_item_ref,\n+                );\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        _ => {}\n+    }\n+\n+    span_bug!(\n+        parent_item.span,\n+        \"unexpected parent of trait or impl item or item not found: {:?}\",\n+        parent_item.kind\n+    )\n+}\n+\n+/// Calculates the `Sized` constraint.\n+///\n+/// In fact, there are only a few options for the types in the constraint:\n+///     - an obviously-unsized type\n+///     - a type parameter or projection whose Sizedness can't be known\n+///     - a tuple of type parameters or projections, if there are multiple\n+///       such.\n+///     - a Error, if a type contained itself. The representability\n+///       check should catch this case.\n+fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstraint<'_> {\n+    let def = tcx.adt_def(def_id);\n+\n+    let result = tcx.mk_type_list(\n+        def.variants\n+            .iter()\n+            .flat_map(|v| v.fields.last())\n+            .flat_map(|f| sized_constraint_for_ty(tcx, def, tcx.type_of(f.did))),\n+    );\n+\n+    debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n+\n+    ty::AdtSizedConstraint(result)\n+}\n+\n+fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n+    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let item = tcx.hir().expect_item(id);\n+    match item.kind {\n+        hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n+            trait_item_refs\n+                .iter()\n+                .map(|trait_item_ref| trait_item_ref.id)\n+                .map(|id| tcx.hir().local_def_id(id.hir_id)),\n+        ),\n+        hir::ItemKind::Impl(.., ref impl_item_refs) => tcx.arena.alloc_from_iter(\n+            impl_item_refs\n+                .iter()\n+                .map(|impl_item_ref| impl_item_ref.id)\n+                .map(|id| tcx.hir().local_def_id(id.hir_id)),\n+        ),\n+        hir::ItemKind::TraitAlias(..) => &[],\n+        _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),\n+    }\n+}\n+\n+fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n+    tcx.hir().span_if_local(def_id).unwrap()\n+}\n+\n+/// If the given `DefId` describes an item belonging to a trait,\n+/// returns the `DefId` of the trait that the trait item belongs to;\n+/// otherwise, returns `None`.\n+fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n+    tcx.opt_associated_item(def_id).and_then(|associated_item| match associated_item.container {\n+        ty::TraitContainer(def_id) => Some(def_id),\n+        ty::ImplContainer(_) => None,\n+    })\n+}\n+\n+/// See `ParamEnv` struct definition for details.\n+fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n+    // The param_env of an impl Trait type is its defining function's param_env\n+    if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n+        return param_env(tcx, parent);\n+    }\n+    // Compute the bounds on Self and the type parameters.\n+\n+    let ty::InstantiatedPredicates { predicates } =\n+        tcx.predicates_of(def_id).instantiate_identity(tcx);\n+\n+    // Finally, we have to normalize the bounds in the environment, in\n+    // case they contain any associated type projections. This process\n+    // can yield errors if the put in illegal associated types, like\n+    // `<i32 as Foo>::Bar` where `i32` does not implement `Foo`. We\n+    // report these errors right here; this doesn't actually feel\n+    // right to me, because constructing the environment feels like a\n+    // kind of a \"idempotent\" action, but I'm not sure where would be\n+    // a better place. In practice, we construct environments for\n+    // every fn once during type checking, and we'll abort if there\n+    // are any errors at that point, so after type checking you can be\n+    // sure that this will succeed without errors anyway.\n+\n+    let unnormalized_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        traits::Reveal::UserFacing,\n+        tcx.sess.opts.debugging_opts.chalk.then_some(def_id),\n+    );\n+\n+    let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {\n+        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n+    });\n+    let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n+    traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n+}\n+\n+fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.sess.local_crate_disambiguator()\n+}\n+\n+fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.crate_name.clone()\n+}\n+\n+fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.hir().crate_hash\n+}\n+\n+fn instance_def_size_estimate<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance_def: ty::InstanceDef<'tcx>,\n+) -> usize {\n+    use ty::InstanceDef;\n+\n+    match instance_def {\n+        InstanceDef::Item(..) | InstanceDef::DropGlue(..) => {\n+            let mir = tcx.instance_mir(instance_def);\n+            mir.basic_blocks().iter().map(|bb| bb.statements.len()).sum()\n+        }\n+        // Estimate the size of other compiler-generated shims to be 1.\n+        _ => 1,\n+    }\n+}\n+\n+/// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n+///\n+/// See [`ImplOverlapKind::Issue33140`] for more details.\n+fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n+    debug!(\"issue33140_self_ty({:?})\", def_id);\n+\n+    let trait_ref = tcx\n+        .impl_trait_ref(def_id)\n+        .unwrap_or_else(|| bug!(\"issue33140_self_ty called on inherent impl {:?}\", def_id));\n+\n+    debug!(\"issue33140_self_ty({:?}), trait-ref={:?}\", def_id, trait_ref);\n+\n+    let is_marker_like = tcx.impl_polarity(def_id) == ty::ImplPolarity::Positive\n+        && tcx.associated_item_def_ids(trait_ref.def_id).is_empty();\n+\n+    // Check whether these impls would be ok for a marker trait.\n+    if !is_marker_like {\n+        debug!(\"issue33140_self_ty - not marker-like!\");\n+        return None;\n+    }\n+\n+    // impl must be `impl Trait for dyn Marker1 + Marker2 + ...`\n+    if trait_ref.substs.len() != 1 {\n+        debug!(\"issue33140_self_ty - impl has substs!\");\n+        return None;\n+    }\n+\n+    let predicates = tcx.predicates_of(def_id);\n+    if predicates.parent.is_some() || !predicates.predicates.is_empty() {\n+        debug!(\"issue33140_self_ty - impl has predicates {:?}!\", predicates);\n+        return None;\n+    }\n+\n+    let self_ty = trait_ref.self_ty();\n+    let self_ty_matches = match self_ty.kind {\n+        ty::Dynamic(ref data, ty::ReStatic) => data.principal().is_none(),\n+        _ => false,\n+    };\n+\n+    if self_ty_matches {\n+        debug!(\"issue33140_self_ty - MATCHES!\");\n+        Some(self_ty)\n+    } else {\n+        debug!(\"issue33140_self_ty - non-matching self type\");\n+        None\n+    }\n+}\n+\n+/// Check if a function is async.\n+fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n+    let hir_id = tcx\n+        .hir()\n+        .as_local_hir_id(def_id)\n+        .unwrap_or_else(|| bug!(\"asyncness: expected local `DefId`, got `{:?}`\", def_id));\n+\n+    let node = tcx.hir().get(hir_id);\n+\n+    let fn_like = hir_map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n+        bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n+    });\n+\n+    fn_like.asyncness()\n+}\n+\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+    *providers = ty::query::Providers {\n+        asyncness,\n+        associated_item,\n+        associated_item_def_ids,\n+        adt_sized_constraint,\n+        def_span,\n+        param_env,\n+        trait_of_item,\n+        crate_disambiguator,\n+        original_crate_name,\n+        crate_hash,\n+        instance_def_size_estimate,\n+        issue33140_self_ty,\n+        ..*providers\n+    };\n+}"}, {"sha": "cbbfe2d6278957a13d6ce25c1d76a4adeaa3835b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -381,7 +381,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     if unknown_cast_to { \"to\" } else { \"from\" }\n                 );\n                 err.note(\n-                    \"The type information given here is insufficient to check whether \\\n+                    \"the type information given here is insufficient to check whether \\\n                           the pointer cast is valid\",\n                 );\n                 if unknown_cast_to {"}, {"sha": "d6c0d9c77b4950a2963361724abc64a261c45ad3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     macro_rules! report_function {\n                         ($span:expr, $name:expr) => {\n                             err.note(&format!(\n-                                \"{} is a function, perhaps you wish to call it\",\n+                                \"`{}` is a function, perhaps you wish to call it\",\n                                 $name\n                             ));\n                         };"}, {"sha": "baf9ae1ac291151811f81bf4d9b992476cbb081b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1664,7 +1664,7 @@ fn check_opaque_for_cycles<'tcx>(\n         if let hir::OpaqueTyOrigin::AsyncFn = origin {\n             struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\",)\n                 .span_label(span, \"recursive `async fn`\")\n-                .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\")\n+                .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n                 .emit();\n         } else {\n             let mut err ="}, {"sha": "c57bce95073ee914d0bfb828067ca1ec2e937ae6", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -131,10 +131,10 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let x = 3.5_f32;\n-    /// let y = -3.5_f32;\n-    /// let abs_difference_x = (x.fract() - 0.5).abs();\n-    /// let abs_difference_y = (y.fract() - (-0.5)).abs();\n+    /// let x = 3.6_f32;\n+    /// let y = -3.6_f32;\n+    /// let abs_difference_x = (x.fract() - 0.6).abs();\n+    /// let abs_difference_y = (y.fract() - (-0.6)).abs();\n     ///\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n@@ -355,7 +355,7 @@ impl f32 {\n         return unsafe { intrinsics::powf32(self, n) };\n     }\n \n-    /// Takes the square root of a number.\n+    /// Returns the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n@@ -564,7 +564,7 @@ impl f32 {\n         unsafe { cmath::fdimf(self, other) }\n     }\n \n-    /// Takes the cubic root of a number.\n+    /// Returns the cubic root of a number.\n     ///\n     /// # Examples\n     ///"}, {"sha": "d89b38e1a003501c1002639537b890d1bbee9163", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -109,10 +109,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// let x = 3.5_f64;\n-    /// let y = -3.5_f64;\n-    /// let abs_difference_x = (x.fract() - 0.5).abs();\n-    /// let abs_difference_y = (y.fract() - (-0.5)).abs();\n+    /// let x = 3.6_f64;\n+    /// let y = -3.6_f64;\n+    /// let abs_difference_x = (x.fract() - 0.6).abs();\n+    /// let abs_difference_y = (y.fract() - (-0.6)).abs();\n     ///\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n@@ -323,7 +323,7 @@ impl f64 {\n         unsafe { intrinsics::powf64(self, n) }\n     }\n \n-    /// Takes the square root of a number.\n+    /// Returns the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n@@ -506,7 +506,7 @@ impl f64 {\n         unsafe { cmath::fdim(self, other) }\n     }\n \n-    /// Takes the cubic root of a number.\n+    /// Returns the cubic root of a number.\n     ///\n     /// # Examples\n     ///"}, {"sha": "fee7ace92eaa3a965d393761cf02a5c8379d1fef", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -208,7 +208,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n                     let _ = writeln!(\n                         err,\n                         \"note: run with `RUST_BACKTRACE=1` \\\n-                                           environment variable to display a backtrace.\"\n+                                           environment variable to display a backtrace\"\n                     );\n                 }\n             }"}, {"sha": "0c5359b9bd8c6ef05b749852be31ad8311710c04", "filename": "src/test/compile-fail/panic-handler-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -10,7 +10,7 @@ use core::panic::PanicInfo;\n \n #[panic_handler]\n fn panic(info: &PanicInfo) -> ! {\n-    //~^ error duplicate lang item found: `panic_impl`\n+    //~^ ERROR found duplicate lang item `panic_impl`\n     loop {}\n }\n "}, {"sha": "0cd9ab79e32f354da7361b2fb1afae9e9c1da4ec", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -2,7 +2,7 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }"}, {"sha": "dfaf005052e5536715377a74a725bd93dc72d890", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -2,7 +2,7 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\", \"stdout\": \"print from successful test\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:9:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }"}, {"sha": "ee79ae1a690ecb251b9c5d60519dc4333289bac9", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -27,7 +27,7 @@ stderr:\n stderr 1\n stderr 2\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:7:1\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n "}, {"sha": "8e4fa70d342f2e0ff91db8c82ca39c0898f42ebb", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -2,7 +2,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n LL |     fn foo(i32);\n-   |            ^^^ help: Try naming the parameter or explicitly ignoring it: `_: i32`\n+   |            ^^^ help: try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n note: lint level defined here\n   --> $DIR/anon-params-deprecated.rs:1:9\n@@ -16,7 +16,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:12:30\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                              ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |                              ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n@@ -25,7 +25,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:12:38\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                      ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |                                      ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>"}, {"sha": "f6e4c8be29260a5f769c3290ca68bbbf25926e79", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,15 +4,15 @@ error[E0733]: recursion in an `async fn` requires boxing\n LL | async fn rec_1() {\n    |                  ^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n    |\n LL | async fn rec_2() {\n    |                  ^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "892d91e3a4992706fdb93558374f7d5048829e4d", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,7 +4,7 @@ error[E0733]: recursion in an `async fn` requires boxing\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error: aborting due to previous error\n "}, {"sha": "51e80bb8b118b60d996c4de0e20ae71e1c101636", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -34,7 +34,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `#[warn(invalid_value)]` on by default\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:17:35\n@@ -45,7 +45,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   this code causes undefined behavior when executed\n    |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: aborting due to previous error\n "}, {"sha": "655c31763ef44de23047c172d2e49c815d50dfbd", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -11,7 +11,7 @@ LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *m\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "c292fcef7f660b7ff0fe667c3d2db35633b9daaf", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -7,7 +7,7 @@ LL |     x: &UnsafeCell::new(42),\n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n  right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites could observe that mutation.', src/librustc_mir/interpret/intern.rs:LL:CC\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "e2957c422f6d5e94c8ac1ec02115166b43ad1b0e", "filename": "src/test/ui/deprecation/deprecated-macro_escape-inner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n mod foo {\n-    #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+    #![macro_escape] //~ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n }\n \n fn main() {"}, {"sha": "4b0fc07463a994bc85e13046079a48b093bd6936", "filename": "src/test/ui/deprecation/deprecated-macro_escape-inner.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/deprecated-macro_escape-inner.rs:4:5\n    |\n LL |     #![macro_escape]\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, `#[macro_use]` mod ...\n+   = help: try an outer attribute: `#[macro_use]`\n "}, {"sha": "4a89b40625e68a036f4f8b66dec488c4b3b881a9", "filename": "src/test/ui/deprecation/deprecated-macro_escape.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n \n-#[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n-mod foo {\n-}\n+#[macro_escape] //~ WARNING `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n+mod foo {}\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "70094083d4b34eaf25df057ced171f535515eb49", "filename": "src/test/ui/deprecation/deprecated-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/deprecated-macro_escape.rs:3:1\n    |\n LL | #[macro_escape]"}, {"sha": "d05d6d120b08477e4d0eb61d6b959e895e80a4a9", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,11 +4,11 @@ error: unexpected `,` in pattern\n LL |     while let b1, b2, b3 = reading_frame.next().expect(\"there should be a start codon\") {\n    |                 ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |     while let (b1, b2, b3) = reading_frame.next().expect(\"there should be a start codon\") {\n    |               ^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     while let b1 | b2 | b3 = reading_frame.next().expect(\"there should be a start codon\") {\n    |               ^^^^^^^^^^^^\n@@ -19,11 +19,11 @@ error: unexpected `,` in pattern\n LL |     if let b1, b2, b3 = reading_frame.next().unwrap() {\n    |              ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |     if let (b1, b2, b3) = reading_frame.next().unwrap() {\n    |            ^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     if let b1 | b2 | b3 = reading_frame.next().unwrap() {\n    |            ^^^^^^^^^^^^\n@@ -34,11 +34,11 @@ error: unexpected `,` in pattern\n LL |         Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n    |                            ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |         (Nucleotide::Adenine, Nucleotide::Cytosine, _) => true\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |         Nucleotide::Adenine | Nucleotide::Cytosine | _ => true\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,11 +49,11 @@ error: unexpected `,` in pattern\n LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n    |          ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |     for (x, _barr_body) in women.iter().map(|woman| woman.allosomes.clone()) {\n    |         ^^^^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     for x | _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n    |         ^^^^^^^^^^^^^^\n@@ -64,11 +64,11 @@ error: unexpected `,` in pattern\n LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n    |          ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |     for (x, y @ Allosome::Y(_)) in men.iter().map(|man| man.allosomes.clone()) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     for x | y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,11 +79,11 @@ error: unexpected `,` in pattern\n LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n    |              ^\n    |\n-help: try adding parentheses to match on a tuple..\n+help: try adding parentheses to match on a tuple...\n    |\n LL |     let (women, men): (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n    |         ^^^^^^^^^^^^\n-help: ..or a vertical bar to match on multiple alternatives\n+help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     let women | men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n    |         ^^^^^^^^^^^"}, {"sha": "b8d98a8999b9dea2dad4441ba0faa0609c2e0cc2", "filename": "src/test/ui/duplicate_entry_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -8,7 +8,7 @@ use std::panic::PanicInfo;\n \n #[lang = \"panic_impl\"]\n fn panic_impl(info: &PanicInfo) -> ! {\n-//~^ ERROR: duplicate lang item found: `panic_impl`.\n+//~^ ERROR: found duplicate lang item `panic_impl`\n     loop {}\n }\n "}, {"sha": "46b137b2cf9c028b26928f06060a3f91107b4888", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/duplicate_entry_error.rs:10:1\n    |\n LL | / fn panic_impl(info: &PanicInfo) -> ! {\n@@ -7,7 +7,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std` (which `duplicate_entry_error` depends on).\n+   = note: first defined in crate `std` (which `duplicate_entry_error` depends on)\n \n error: aborting due to previous error\n "}, {"sha": "c41a0430150a4010e10ea6aba27e77dd64402d42", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,10 +1,10 @@\n-error[E0152]: duplicate lang item found: `arc`.\n+error[E0152]: found duplicate lang item `arc`\n   --> $DIR/E0152.rs:4:1\n    |\n LL | struct Foo;\n    | ^^^^^^^^^^^\n    |\n-   = note: first defined in crate `alloc` (which `std` depends on).\n+   = note: first defined in crate `alloc` (which `std` depends on)\n \n error: aborting due to previous error\n "}, {"sha": "1cb81c8d778ec8815c58e6e5b87a5dc79bdb849f", "filename": "src/test/ui/error-codes/E0658.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -6,7 +6,7 @@ LL | |     Bar(u64),\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35118\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/56071\n    = help: add `#![feature(repr128)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f702b10ccd126adf5cfa8324c2de940acf4b72ae", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -464,10 +464,10 @@ mod reexport_test_harness_main {\n \n // Cannot feed \"2700\" to `#[macro_escape]` without signaling an error.\n #[macro_escape]\n-//~^ WARN macro_escape is a deprecated synonym for macro_use\n+//~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n mod macro_escape {\n     mod inner { #![macro_escape] }\n-    //~^ WARN macro_escape is a deprecated synonym for macro_use\n+    //~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n \n     #[macro_escape] fn f() { }\n     //~^ WARN unused attribute"}, {"sha": "da7d8f9bee5c5fbb1724883935881f8e11e60663", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -172,19 +172,19 @@ warning: unknown lint: `x5100`\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, `#[macro_use]` mod ...\n+   = help: try an outer attribute: `#[macro_use]`\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:17"}, {"sha": "de00bc4cbac0738d5cd42d68a8bfeb49776a8cbf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -6,6 +6,6 @@\n // check-pass\n \n #![macro_escape]\n-//~^ WARN macro_escape is a deprecated synonym for macro_use\n+//~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n \n fn main() {}"}, {"sha": "402dc4e54092545710ffc5e72229b681699e4069", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-macro_escape.rs:8:1\n    |\n LL | #![macro_escape]\n    | ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, `#[macro_use]` mod ...\n+   = help: try an outer attribute: `#[macro_use]`\n "}, {"sha": "6a7ef793924a4f56670784e2f77b3e70d11c9570", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,13 +4,13 @@\n // get that warning; see issue-43106-gating-of-builtin-attrs.rs\n \n #![macro_use(my_macro)]\n-//~^ ERROR arguments to macro_use are not allowed here\n+//~^ ERROR arguments to `macro_use` are not allowed here\n \n #[macro_use(my_macro)]\n-//~^ ERROR arguments to macro_use are not allowed here\n+//~^ ERROR arguments to `macro_use` are not allowed here\n mod macro_escape {\n     mod inner { #![macro_use(my_macro)] }\n-    //~^ ERROR arguments to macro_use are not allowed here\n+    //~^ ERROR arguments to `macro_use` are not allowed here\n \n     #[macro_use = \"2700\"] struct S;\n     //~^ ERROR malformed `macro_use` attribute"}, {"sha": "52a682e4bfa874f8275b53e00d48ec51a365d123", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,16 +1,16 @@\n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:6:1\n    |\n LL | #![macro_use(my_macro)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:9:1\n    |\n LL | #[macro_use(my_macro)]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:12:17\n    |\n LL |     mod inner { #![macro_use(my_macro)] }"}, {"sha": "216615731e56f06322382b2a4bf84ef2bee05f36", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:7:17\n    |\n LL | type Ma = (u32, !, i32);\n@@ -7,7 +7,7 @@ LL | type Ma = (u32, !, i32);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:8:20\n    |\n LL | type Meeshka = Vec<!>;\n@@ -16,7 +16,7 @@ LL | type Meeshka = Vec<!>;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:9:24\n    |\n LL | type Mow = &'static fn(!) -> !;\n@@ -25,7 +25,7 @@ LL | type Mow = &'static fn(!) -> !;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:10:27\n    |\n LL | type Skwoz = &'static mut !;\n@@ -34,7 +34,7 @@ LL | type Skwoz = &'static mut !;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:13:16\n    |\n LL |     type Wub = !;"}, {"sha": "e108d74e9c6cc9fdfebf558dbef3994c79f0203c", "filename": "src/test/ui/feature-gates/feature-gate-repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -6,7 +6,7 @@ LL | |     A(u64)\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35118\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/56071\n    = help: add `#![feature(repr128)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1d958e5bfeb4030e1d0d18311e3d58dde7fe8c06", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -2,7 +2,7 @@ error: anonymous parameters are deprecated and will be removed in the next editi\n   --> $DIR/future-incompatible-lint-group.rs:4:10\n    |\n LL |     fn f(u8) {}\n-   |          ^^ help: Try naming the parameter or explicitly ignoring it: `_: u8`\n+   |          ^^ help: try naming the parameter or explicitly ignoring it: `_: u8`\n    |\n note: lint level defined here\n   --> $DIR/future-incompatible-lint-group.rs:1:9"}, {"sha": "1c0d3b4b964d6e23408e558d4bc94ef43d63fa74", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,6 +1,6 @@\n extern crate self; //~ ERROR `extern crate self;` requires renaming\n \n-#[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n+#[macro_use] //~ ERROR `#[macro_use]` is not supported on `extern crate self`\n extern crate self as foo;\n \n fn main() {}"}, {"sha": "8f369f1b03831341284e28cfdd202efdb441ff97", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,7 +4,7 @@ error: `extern crate self;` requires renaming\n LL | extern crate self;\n    | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n \n-error: `macro_use` is not supported on `extern crate self`\n+error: `#[macro_use]` is not supported on `extern crate self`\n   --> $DIR/extern-crate-self-fail.rs:3:1\n    |\n LL | #[macro_use]"}, {"sha": "42d89cd01a48e8ed3ef8edcc9262dbbbd9986c45", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,15 +4,15 @@ error[E0599]: no method named `x` found for fn item `fn() -> Ret {Obj::func}` in\n LL |     Obj::func.x();\n    |               ^ method not found in `fn() -> Ret {Obj::func}`\n    |\n-   = note: Obj::func is a function, perhaps you wish to call it\n+   = note: `Obj::func` is a function, perhaps you wish to call it\n \n error[E0599]: no method named `x` found for fn item `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:17:10\n    |\n LL |     func.x();\n    |          ^ method not found in `fn() -> Ret {func}`\n    |\n-   = note: func is a function, perhaps you wish to call it\n+   = note: `func` is a function, perhaps you wish to call it\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4ddba52df14a9f9f812dc3621361a6bf39733a7", "filename": "src/test/ui/issues/issue-45730.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -6,7 +6,7 @@ LL |     let x: *const _ = 0 as _;\n    |                            |\n    |                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:5:23\n@@ -16,7 +16,7 @@ LL |     let x: *const _ = 0 as *const _;\n    |                            |\n    |                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:8:13\n@@ -26,7 +26,7 @@ LL |     let x = 0 as *const i32 as *const _ as *mut _;\n    |                                            |\n    |                                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad596db13ccfd65e43152609ce19cd99d92f955a", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current\n LL |     a.f();\n    |       ^ method not found in `fn(&u8)`\n    |\n-   = note: a is a function, perhaps you wish to call it\n+   = note: `a` is a function, perhaps you wish to call it\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `f`, perhaps you need to implement it:\n            candidate #1: `Trait`"}, {"sha": "02c1b27b08a966fc15e870b128d86e5ad8e4a1d5", "filename": "src/test/ui/keyword/keyword-super-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let super = 22; //~ ERROR failed to resolve: there are too many initial `super`s\n+    let super = 22; //~ ERROR failed to resolve: there are too many leading `super` keywords\n }"}, {"sha": "1f64f3b73d6cde0b7a00d2ff8243fb6f8089dd0e", "filename": "src/test/ui/keyword/keyword-super-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/keyword-super-as-identifier.rs:2:9\n    |\n LL |     let super = 22;\n-   |         ^^^^^ there are too many initial `super`s.\n+   |         ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "c121a6c1050ea9a7be3d21258e82cda8873d94cc", "filename": "src/test/ui/keyword/keyword-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let super: isize; //~ ERROR failed to resolve: there are too many initial `super`s\n+    let super: isize; //~ ERROR failed to resolve: there are too many leading `super` keywords\n }"}, {"sha": "0e0d67cb97b1fdf292804381b8ec5c5f92eb7b38", "filename": "src/test/ui/keyword/keyword-super.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/keyword-super.rs:2:9\n    |\n LL |     let super: isize;\n-   |         ^^^^^ there are too many initial `super`s.\n+   |         ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "169e77c8fa05de9992cd730db5b1b90b544c3a18", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -12,7 +12,7 @@ note: lint level defined here\n    |\n LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static T` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:30:32\n@@ -23,7 +23,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `Wrap<&'static T>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:32:38\n@@ -34,7 +34,7 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -49,7 +49,7 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -64,7 +64,7 @@ LL |         let _val: ! = mem::zeroed();\n    |                       this code causes undefined behavior when executed\n    |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `!` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:41:23\n@@ -75,7 +75,7 @@ LL |         let _val: ! = mem::uninitialized();\n    |                       this code causes undefined behavior when executed\n    |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:43:30\n@@ -86,7 +86,7 @@ LL |         let _val: (i32, !) = mem::zeroed();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:44:30\n@@ -97,7 +97,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:46:26\n@@ -108,7 +108,7 @@ LL |         let _val: Void = mem::zeroed();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: the type `Void` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:47:26\n@@ -119,7 +119,7 @@ LL |         let _val: Void = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: the type `&'static i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:49:34\n@@ -130,7 +130,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static i32` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:50:34\n@@ -141,7 +141,7 @@ LL |         let _val: &'static i32 = mem::uninitialized();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `Ref` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:52:25\n@@ -152,7 +152,7 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n@@ -167,7 +167,7 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n@@ -182,7 +182,7 @@ LL |         let _val: fn() = mem::zeroed();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Function pointers must be non-null\n+   = note: function pointers must be non-null\n \n error: the type `fn()` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:56:26\n@@ -193,7 +193,7 @@ LL |         let _val: fn() = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Function pointers must be non-null\n+   = note: function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:58:32\n@@ -204,7 +204,7 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this struct field)\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -219,7 +219,7 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this struct field)\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -234,7 +234,7 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this enum field)\n+note: function pointers must be non-null (in this enum field)\n   --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -249,7 +249,7 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this enum field)\n+note: function pointers must be non-null (in this enum field)\n   --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -264,7 +264,7 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -279,7 +279,7 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -294,7 +294,7 @@ LL |         let _val: NonNull<i32> = mem::zeroed();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:68:34\n@@ -305,7 +305,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `*const dyn std::marker::Send` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:70:37\n@@ -316,7 +316,7 @@ LL |         let _val: *const dyn Send = mem::zeroed();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The vtable of a wide raw pointer must be non-null\n+   = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `*const dyn std::marker::Send` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:71:37\n@@ -327,7 +327,7 @@ LL |         let _val: *const dyn Send = mem::uninitialized();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The vtable of a wide raw pointer must be non-null\n+   = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:75:26\n@@ -338,7 +338,7 @@ LL |         let _val: bool = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Booleans must be `true` or `false`\n+   = note: booleans must be either `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:78:32\n@@ -349,7 +349,7 @@ LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Characters must be a valid unicode codepoint (in this struct field)\n+note: characters must be a valid Unicode codepoint (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -364,7 +364,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |                            this code causes undefined behavior when executed\n    |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: NonBig must be initialized inside its custom valid range\n+   = note: `NonBig` must be initialized inside its custom valid range\n \n error: the type `&'static i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:84:34\n@@ -375,7 +375,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static [i32]` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:85:36\n@@ -386,7 +386,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `std::num::NonZeroU32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:86:32\n@@ -397,7 +397,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::num::NonZeroU32 must be non-null\n+   = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:89:34\n@@ -408,7 +408,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:90:34\n@@ -419,7 +419,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:91:26\n@@ -430,7 +430,7 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Booleans must be `true` or `false`\n+   = note: booleans must be either `true` or `false`\n \n error: aborting due to 35 previous errors\n "}, {"sha": "6f6ad4508be017521ea21b37b77e0fe9ecccd75d", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,7 +4,7 @@ error: suffixed literals are not allowed in attributes\n LL | check!(0u8);\n    |        ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: unexpected token: `-0`\n   --> $DIR/malformed-interpolated.rs:5:25"}, {"sha": "121b492e2543783edc5dc8a11ec9141ee85f145a", "filename": "src/test/ui/module-macro_use-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-#[macro_use(foo, bar)] //~ ERROR arguments to macro_use are not allowed here\n+#[macro_use(foo, bar)] //~ ERROR arguments to `macro_use` are not allowed here\n mod foo {\n }\n "}, {"sha": "af799cb6ddf3ec6b1d3675b7b67a71df4555e067", "filename": "src/test/ui/module-macro_use-arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/module-macro_use-arguments.rs:1:1\n    |\n LL | #[macro_use(foo, bar)]"}, {"sha": "0f8bddf27fe088e9f15f184730d5a804a8dc1eeb", "filename": "src/test/ui/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmulti-panic.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -10,7 +10,7 @@ fn check_for_no_backtrace(test: std::process::Output) {\n \n     assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n     assert_eq!(it.next(), Some(\"note: run with `RUST_BACKTRACE=1` \\\n-                                environment variable to display a backtrace.\"));\n+                                environment variable to display a backtrace\"));\n     assert_eq!(it.next().map(|l| l.starts_with(\"thread 'main' panicked at\")), Some(true));\n     assert_eq!(it.next(), None);\n }"}, {"sha": "b4e18c229fdfd99d584df5ed0c5c805359edbe68", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument-callee.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -18,7 +18,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                       |  has type `&'1 i32`\n    |                                       has type `&'_#2r mut &'2 i32`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument-callee.rs:20:1\n    |\n LL | / fn test() {"}, {"sha": "533a17bdd128bef0eddbf98d887c5fc121bd98de", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -9,7 +9,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument.rs:20:1\n    |\n LL | / fn test() {"}, {"sha": "60d02066e26766e247a051746a7f0b67cad9ac00", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-nested.rs:21:32\n    |\n LL |             let mut closure1 = || p = &y;\n@@ -13,7 +13,7 @@ LL |             let mut closure1 = || p = &y;\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n    |\n LL |           let mut closure = || {\n@@ -32,7 +32,7 @@ LL | |         };\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-upvar-nested.rs:13:1\n    |\n LL | / fn test() {"}, {"sha": "f64ccf14ac4822239f2c0cf8d2b92cd64585197a", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-ref.rs:23:27\n    |\n LL |         let mut closure = || p = &y;\n@@ -13,7 +13,7 @@ LL |         let mut closure = || p = &y;\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-upvar-ref.rs:17:1\n    |\n LL | / fn test() {"}, {"sha": "e1e0cdc153a6c5de082c276be6f444090c302d60", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:43:9\n    |\n LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n@@ -27,7 +27,7 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n LL |             demand_y(x, y, p)\n    |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:38:1\n    |\n LL | / fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {"}, {"sha": "b6535024a4a7653e50fa53025572b418d7e2fb2e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-ref.rs:43:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-ref.rs:42:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "708e50de570dbc86f283446cda5c4eb4032976bd", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:21:15\n    |\n LL |       foo(cell, |cell_a, cell_x| {\n@@ -23,7 +23,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:18:1\n    |\n LL | / fn case1() {\n@@ -37,7 +37,7 @@ LL | | }\n    |\n    = note: defining type: case1\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n    |\n LL |       foo(cell, |cell_a, cell_x| {\n@@ -53,7 +53,7 @@ LL | |     })\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n    |\n LL | / fn case2() {"}, {"sha": "17d33e82ba7e36efc40e61132261b74af083383c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -19,7 +19,7 @@ LL | |     });\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:31:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5dce8d087d6cdd5ac94c970b634a318106c33ba9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -19,7 +19,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:34:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5c5d510805bdf2bf71440cd7a239cae8a95f485b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-val.rs:36:45\n    |\n LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-val.rs:35:1\n    |\n LL | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "c111e651832baf24ae7d7c443aaa0813115593e9", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:42:9\n    |\n LL | /         |_outlives1, _outlives2, x, y| {\n@@ -16,7 +16,7 @@ LL | |         },\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:39:1\n    |\n LL | / fn supply<'a>(cell_a: Cell<&'a u32>) {"}, {"sha": "52df46ed3453ff151a3d3c4a735e124f53027f0b", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:35:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -27,7 +27,7 @@ LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:34:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "0270cc40de6fc600c29e635b30784b53b7bd2194", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:39:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -27,7 +27,7 @@ LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:38:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5317bb6a1b13ecc3c50820dddc152fd96de02fd0", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n LL |       establish_relationships(value, |value| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-from-trait-match.rs:28:1\n    |\n LL | / fn supply<'a, T>(value: T)"}, {"sha": "79ed1501524bd5da4e25e2af6e751d892feab35b", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:11:16\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n@@ -18,7 +18,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                 |  has type `&'1 i32`\n    |                 has type `&'2 i32`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:10:1\n    |\n LL | / fn test() {"}, {"sha": "bff8c662d0defc0bcb19ee97a3de9237e0f6c430", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:25:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -11,7 +11,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:21:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -33,7 +33,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -46,7 +46,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:30:1\n    |\n LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -59,7 +59,7 @@ LL | | }\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -72,7 +72,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:38:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -94,7 +94,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -107,7 +107,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:47:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>"}, {"sha": "6d1fbcb8f5bfda386cde17790c8f0d04a7fb6779", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -13,7 +13,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:41:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -48,7 +48,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -62,7 +62,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:51:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -97,7 +97,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -110,7 +110,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -124,7 +124,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -138,7 +138,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:74:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "59d8aa484bdac8a36850f5da7e4ec76f6d68a09d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -12,7 +12,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:33:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -39,7 +39,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -52,7 +52,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:42:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -79,7 +79,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -92,7 +92,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:52:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -106,7 +106,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -119,7 +119,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:64:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -133,7 +133,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -146,7 +146,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:73:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "c3b924577ab47cc7d9ccb30218304c9e5c4a887a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:36:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:32:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -23,7 +23,7 @@ LL | | }\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -34,7 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:40:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -48,7 +48,7 @@ LL | | }\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -59,7 +59,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:49:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -73,7 +73,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -84,7 +84,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:68:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -98,7 +98,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -109,7 +109,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:77:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "1bd97c1caa4aed0b0c2a24314c208d4534b5e5d8", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -12,7 +12,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:34:1\n    |\n LL | / fn no_relationships_late<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -34,7 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:18 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -47,7 +47,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:43:1\n    |\n LL | / fn no_relationships_early<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -69,7 +69,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -82,7 +82,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:53:1\n    |\n LL | / fn projection_outlives<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -96,7 +96,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -109,7 +109,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n    |\n LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -123,7 +123,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -136,7 +136,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:74:1\n    |\n LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -150,7 +150,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -164,7 +164,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n    |\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -191,7 +191,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -204,7 +204,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n    |\n LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -218,7 +218,7 @@ LL | | }\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -231,7 +231,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:101:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "a213f423e3c8de6e25244eef2229f0b9f7ac59fa", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n@@ -11,7 +11,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1\n    |\n LL | / fn generic<T>(value: T) {\n@@ -22,7 +22,7 @@ LL | | }\n    |\n    = note: defining type: generic::<T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n@@ -36,7 +36,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1\n    |\n LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {"}, {"sha": "a488637bbc5c2131d18e0820dfb8a0b93f1f16e0", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n LL |     with_signature(x, |y| y)\n@@ -11,7 +11,7 @@ LL |     with_signature(x, |y| y)\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:15:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>"}, {"sha": "62dfe94e384932a602bc3418b411210fbfcf9ba1", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -19,7 +19,7 @@ LL | |     })\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:26:1\n    |\n LL | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n@@ -48,7 +48,7 @@ LL | |     })\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(DefId(0:12 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -68,7 +68,7 @@ LL | |     })\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:39:1\n    |\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n@@ -82,7 +82,7 @@ LL | | }\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -101,7 +101,7 @@ LL | |     })\n    = note: number of external vids: 4\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:60:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n@@ -128,7 +128,7 @@ LL | |     })\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -145,7 +145,7 @@ LL | |     })\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:72:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)"}, {"sha": "ad50b415869dd6f322e2b567dcf5dc5012541fc8", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -6,7 +6,7 @@ LL |     let mut y = 0 as *const _;\n    |                      |\n    |                      help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error: aborting due to previous error\n "}, {"sha": "bd99af999c7978de8bb7e07007620a1420fe9e9e", "filename": "src/test/ui/panic-handler/panic-handler-duplicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -12,6 +12,6 @@ fn panic(info: &PanicInfo) -> ! {\n }\n \n #[lang = \"panic_impl\"]\n-fn panic2(info: &PanicInfo) -> ! { //~ ERROR duplicate lang item found: `panic_impl`.\n+fn panic2(info: &PanicInfo) -> ! { //~ ERROR found duplicate lang item `panic_impl`\n     loop {}\n }"}, {"sha": "9999e3276469dbac9e272169f37278f403b56bd8", "filename": "src/test/ui/panic-handler/panic-handler-duplicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,12 +1,12 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-duplicate.rs:15:1\n    |\n LL | / fn panic2(info: &PanicInfo) -> ! {\n LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-note: first defined here.\n+note: first defined here\n   --> $DIR/panic-handler-duplicate.rs:10:1\n    |\n LL | / fn panic(info: &PanicInfo) -> ! {"}, {"sha": "0acc2722cb21f43073fc8d91f2a76053e07b01ef", "filename": "src/test/ui/panic-handler/panic-handler-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: duplicate lang item found: `panic_impl`.\n+// error-pattern: found duplicate lang item `panic_impl`\n \n \n use std::panic::PanicInfo;"}, {"sha": "ac56513fd47067c8ae0243a578c0dcf4ee71bae2", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,12 +1,12 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-std.rs:7:1\n    |\n LL | / fn panic(info: PanicInfo) -> ! {\n LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std` (which `panic_handler_std` depends on).\n+   = note: first defined in crate `std` (which `panic_handler_std` depends on)\n \n error: argument should be `&PanicInfo`\n   --> $DIR/panic-handler-std.rs:7:16"}, {"sha": "d0018cef5f03396979509710ba4b5415d23ad6a4", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,5 +1,5 @@\n thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir_build/hair/pattern/_match.rs:LL:CC\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "1494c1cf968007037616cc549a4c5dfc9e7bb246", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -18,7 +18,8 @@ mod state {\n pub struct RawFloatState;\n impl RawFloatState {\n     perftools_inline! {\n-        pub(super) fn new() {} //~ ERROR failed to resolve: there are too many initial `super`s\n+        pub(super) fn new() {}\n+        //~^ ERROR failed to resolve: there are too many leading `super` keywords\n     }\n }\n "}, {"sha": "f2293d28ea151e65683c92aded9970e70c296ed7", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/impl-items-vis-unresolved.rs:21:13\n    |\n LL |         pub(super) fn new() {}\n-   |             ^^^^^ there are too many initial `super`s.\n+   |             ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "84fe91d662a8ba2f96854ee4d27d481f7c373476", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,191 +4,191 @@ error: suffixed literals are not allowed in attributes\n LL | #[rustc_dummy = 1usize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:15:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:17:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:19:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:21:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:23:17\n    |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:25:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:3:17\n    |\n LL | #[rustc_dummy = 1usize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:15:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:17:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:19:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:21:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:23:17\n    |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:25:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: aborting due to 24 previous errors\n "}, {"sha": "e4d587bc9effa4088a371dcc3f617ebe20a102d4", "filename": "src/test/ui/super-at-top-level.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuper-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuper-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuper-at-top-level.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,4 +1,4 @@\n-use super::f; //~ ERROR there are too many initial `super`s\n+use super::f; //~ ERROR there are too many leading `super` keywords\n \n fn main() {\n }"}, {"sha": "23613df6752fb7e8e600a38735395759dd493a51", "filename": "src/test/ui/super-at-top-level.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/super-at-top-level.rs:1:5\n    |\n LL | use super::f;\n-   |     ^^^^^ there are too many initial `super`s.\n+   |     ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "d7d0d84432ce6f8231661d837e5348288fba3da0", "filename": "src/test/ui/test-attrs/test-should-panic-attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,29 +4,29 @@ warning: argument must be of the form: `expected = \"error message\"`\n LL | #[should_panic(expected)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:18:1\n    |\n LL | #[should_panic(expect)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:25:1\n    |\n LL | #[should_panic(expected(foo, bar))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:32:1\n    |\n LL | #[should_panic(expected = \"foo\", bar)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n "}, {"sha": "46adcfbc2eb4a387d7449247456c281855ffdabf", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -18,7 +18,7 @@ testing321\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n  right: `5`', $DIR/test-panic-abort.rs:31:5\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:"}, {"sha": "1012edb109336db1e8c2a910d683541659308804", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -31,7 +31,7 @@ fn main() {\n         a::try_foo(foo);\n         //~^ ERROR E0277\n         //~| trait impl with same name found\n-        //~| Perhaps two different versions of crate `crate_a2`\n+        //~| perhaps two different versions of crate `crate_a2`\n \n         // We don't want to see the \"version mismatch\" help message here\n         // because `implements_no_traits` has no impl for `Foo`"}, {"sha": "8a6e059604d2ba468ac09f02f02c9bd90ebb6674", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -14,7 +14,7 @@ help: trait impl with same name found\n    |\n LL | impl Bar for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n-   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+   = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `main::a::DoesNotImplementTrait: main::a::Bar` is not satisfied\n   --> $DIR/trait-bounds-same-crate-name.rs:38:20\n@@ -43,7 +43,7 @@ help: trait impl with same name found\n    |\n LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+   = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `main::a::ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n   --> $DIR/trait-bounds-same-crate-name.rs:51:20"}, {"sha": "0b6d94e71f0c7ba5a296ce7c4ad1623b607c4a2f", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fe05e9456b84996637c2f29b35c37960e537540/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr?ref=9fe05e9456b84996637c2f29b35c37960e537540", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-cl\n LL |     mut_.call((0, ));\n    |          ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]`\n    |\n-   = note: mut_ is a function, perhaps you wish to call it\n+   = note: `mut_` is a function, perhaps you wish to call it\n \n error: aborting due to previous error\n "}]}