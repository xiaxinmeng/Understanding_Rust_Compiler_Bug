{"sha": "feeb13c4b95a8291625a375df6d4d2122606e0aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZWIxM2M0Yjk1YTgyOTE2MjVhMzc1ZGY2ZDRkMjEyMjYwNmUwYWE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-24T12:14:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T12:14:04Z"}, "message": "Merge pull request #145 from oli-obk/zst_bug2\n\ndrop zst fields of null pointer optimized structs and enums", "tree": {"sha": "7a3acb79e7c8b4272f75743c000a7562072d135d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3acb79e7c8b4272f75743c000a7562072d135d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feeb13c4b95a8291625a375df6d4d2122606e0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feeb13c4b95a8291625a375df6d4d2122606e0aa", "html_url": "https://github.com/rust-lang/rust/commit/feeb13c4b95a8291625a375df6d4d2122606e0aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feeb13c4b95a8291625a375df6d4d2122606e0aa/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10cf7ec1ff18803b95870b63f6054071e40ff55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10cf7ec1ff18803b95870b63f6054071e40ff55c", "html_url": "https://github.com/rust-lang/rust/commit/10cf7ec1ff18803b95870b63f6054071e40ff55c"}, {"sha": "de42764b5231bf2a8d9ebaaa5572cc1e46dce7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/de42764b5231bf2a8d9ebaaa5572cc1e46dce7f8", "html_url": "https://github.com/rust-lang/rust/commit/de42764b5231bf2a8d9ebaaa5572cc1e46dce7f8"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "289bae89c3c64e79409b1eebc90b409b4a2d81c4", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/feeb13c4b95a8291625a375df6d4d2122606e0aa/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb13c4b95a8291625a375df6d4d2122606e0aa/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=feeb13c4b95a8291625a375df6d4d2122606e0aa", "patch": "@@ -132,31 +132,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             None => return Err(EvalError::InvalidDiscriminant),\n                         }\n                     },\n-                    Layout::StructWrappedNullablePointer { nndiscr, .. } => {\n+                    Layout::StructWrappedNullablePointer { .. } |\n+                    Layout::RawNullablePointer { .. } => {\n                         let discr = self.read_discriminant_value(adt_ptr, ty)?;\n-                        if discr == nndiscr as u128 {\n-                            assert_eq!(discr as usize as u128, discr);\n-                            &adt_def.variants[discr as usize].fields\n-                        } else {\n-                            // FIXME: the zst variant might contain zst types that impl Drop\n-                            return Ok(()); // nothing to do, this is zero sized (e.g. `None`)\n-                        }\n-                    },\n-                    Layout::RawNullablePointer { nndiscr, .. } => {\n-                        let discr = self.read_discriminant_value(adt_ptr, ty)?;\n-                        if discr == nndiscr as u128 {\n-                            assert_eq!(discr as usize as u128, discr);\n-                            assert_eq!(adt_def.variants[discr as usize].fields.len(), 1);\n-                            let field_ty = &adt_def.variants[discr as usize].fields[0];\n-                            let field_ty = monomorphize_field_ty(self.tcx, field_ty, substs);\n-                            // FIXME: once read_discriminant_value works with lvalue, don't force\n-                            // alloc in the RawNullablePointer case\n-                            self.drop(lval, field_ty, drop)?;\n-                            return Ok(());\n-                        } else {\n-                            // FIXME: the zst variant might contain zst types that impl Drop\n-                            return Ok(()); // nothing to do, this is zero sized (e.g. `None`)\n-                        }\n+                        assert_eq!(discr as usize as u128, discr);\n+                        &adt_def.variants[discr as usize].fields\n                     },\n                     Layout::CEnum { .. } => return Ok(()),\n                     _ => bug!(\"{:?} is not an adt layout\", layout),"}, {"sha": "a76f64ce29df70aa267bf3a062e0f9717103330b", "filename": "tests/run-pass/zst_variant_drop.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/feeb13c4b95a8291625a375df6d4d2122606e0aa/tests%2Frun-pass%2Fzst_variant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb13c4b95a8291625a375df6d4d2122606e0aa/tests%2Frun-pass%2Fzst_variant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst_variant_drop.rs?ref=feeb13c4b95a8291625a375df6d4d2122606e0aa", "patch": "@@ -0,0 +1,23 @@\n+struct Foo;\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        unsafe {\n+            FOO = true;\n+        }\n+    }\n+}\n+\n+static mut FOO: bool = false;\n+\n+enum Bar {\n+    A(Box<i32>),\n+    B(Foo),\n+}\n+\n+fn main() {\n+    assert!(unsafe { !FOO });\n+    drop(Bar::A(Box::new(42)));\n+    assert!(unsafe { !FOO });\n+    drop(Bar::B(Foo));\n+    assert!(unsafe { FOO });\n+}"}]}