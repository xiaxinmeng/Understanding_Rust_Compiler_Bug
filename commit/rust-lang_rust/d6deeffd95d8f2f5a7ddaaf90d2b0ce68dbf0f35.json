{"sha": "d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZGVlZmZkOTVkOGYyZjVhN2RkYWFmOTBkMmIwY2U2OGRiZjBmMzU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-05T18:01:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T22:46:10Z"}, "message": "Change the setup so that rust_activate_glue returns to rust_exit_task_glue\nand rust_exit_task_glue calls the rust main.\n\nThis is simpler since we only need to setup one frame. It also matches\nwhat ld.so does, so gdb is happy and stops a backtrace at rust_exit_task_glue\ninstead of continuing past whatever function happened to be before\nrust_exit_task_glue is the object file.\n\nThis is the rt part and should be merged after the rust0 part.", "tree": {"sha": "e6cafaaf77e54e5a7ee74cedeb3909ed4e562bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6cafaaf77e54e5a7ee74cedeb3909ed4e562bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35", "html_url": "https://github.com/rust-lang/rust/commit/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85260bcc5c4ec7cefec7f9cfaa1201d01a860a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85260bcc5c4ec7cefec7f9cfaa1201d01a860a3", "html_url": "https://github.com/rust-lang/rust/commit/d85260bcc5c4ec7cefec7f9cfaa1201d01a860a3"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "ab75798817c208f038626b4a12e32cf5f67b1829", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d6deeffd95d8f2f5a7ddaaf90d2b0ce68dbf0f35", "patch": "@@ -254,9 +254,9 @@ rust_task::start_rustboot(uintptr_t exit_task_glue,\n \n void\n rust_task::start_rustc(uintptr_t exit_task_glue,\n-                          uintptr_t spawnee_fn,\n-                          uintptr_t args,\n-                          size_t callsz)\n+                       uintptr_t spawnee_fn,\n+                       uintptr_t args,\n+                       size_t callsz)\n {\n     LOGPTR(dom, \"exit-task glue\", exit_task_glue);\n     LOGPTR(dom, \"from spawnee\", spawnee_fn);\n@@ -271,57 +271,38 @@ rust_task::start_rustc(uintptr_t exit_task_glue,\n     // see: \"Mac OS X ABI Function Call Guide\"\n \n \n-    // Begin synthesizing frames. There are two: a \"fully formed\"\n-    // exit-task frame at the top of the stack -- that pretends to be\n-    // mid-execution -- and a just-starting frame beneath it that\n-    // starts executing the first instruction of the spawnee. The\n-    // spawnee *thinks* it was called by the exit-task frame above\n-    // it. It wasn't; we put that fake frame in place here, but the\n-    // illusion is enough for the spawnee to return to the exit-task\n-    // frame when it's done, and exit.\n+    // Begin synthesizing the exit_task_glue frame. We will return to\n+    // exit_task_glue and it is responsible for calling the user code\n+    // and passing the value returned by the user to the system\n+    // exit routine.\n     uintptr_t *spp = (uintptr_t *)rust_sp;\n \n+    uintptr_t dummy_ret = (uintptr_t) spp--;\n \n-    // The exit_task_glue frame we synthesize above the frame we activate:\n-    make_aligned_room_for_bytes(spp, 2 * sizeof(uintptr_t));\n-    *spp-- = (uintptr_t) 0;          // closure-or-obj\n-    *spp-- = (uintptr_t) this;       // task\n-    I(dom, spp == align_down(spp));\n-    *spp-- = (uintptr_t) 0x0;        // output\n-    *spp-- = (uintptr_t) 0x0;        // retpc\n+    uintptr_t args_size = callsz - 3*sizeof(uintptr_t);\n+    uintptr_t frame_size = args_size + 4*sizeof(uintptr_t);\n \n-    I(dom, args);\n-    make_aligned_room_for_bytes(spp, callsz - 3 * sizeof(uintptr_t));\n+    make_aligned_room_for_bytes(spp, frame_size);\n \n     // Copy args from spawner to spawnee.\n     uintptr_t *src = (uintptr_t *)args;\n     src += 1;                  // spawn-call output slot\n     src += 1;                  // spawn-call task slot\n     src += 1;                  // spawn-call closure-or-obj slot\n \n-    // Undo previous sp-- so we're pointing at the last word pushed.\n-    ++spp;\n-\n-    // Memcpy all but the task, output and env pointers\n-    callsz -= (3 * sizeof(uintptr_t));\n-    spp = (uintptr_t*) (((uintptr_t)spp) - callsz);\n-    memcpy(spp, src, callsz);\n+    *spp-- = (uintptr_t) *src;       // vec\n+    *spp-- = (uintptr_t) 0x0;        // closure-or-obj\n+    *spp-- = (uintptr_t) this;       // task\n+    *spp-- = (uintptr_t) dummy_ret;  // output address\n \n-    // Move sp down to point to last implicit-arg cell (env).\n-    spp--;\n+    *spp-- = (uintptr_t) (uintptr_t) spawnee_fn;\n \n-    // The *implicit* incoming args to the spawnee frame we're\n-    // activating:\n-    *spp-- = (uintptr_t) 0x0;               // closure-or-obj\n+    I(dom, spp == align_down(spp));\n \n-    // in FASTCALL mode we don't, the outptr will be in ecx and the task\n-    // in edx, and the activate_glue will make sure to set that up.\n+    *spp-- = (uintptr_t) 0x0;        // retp\n \n-    I(dom, spp+1 == align_down(spp+1));\n-    *spp-- = (uintptr_t) exit_task_glue;  // retpc\n+    *spp-- = (uintptr_t) exit_task_glue;\n \n-    // The context the activate_glue needs to switch stack.\n-    *spp-- = (uintptr_t) spawnee_fn;      // instruction to start at\n     for (size_t j = 0; j < n_callee_saves; ++j) {\n         *spp-- = (uintptr_t)NULL;\n     }"}]}