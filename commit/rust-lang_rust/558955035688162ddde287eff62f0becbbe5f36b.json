{"sha": "558955035688162ddde287eff62f0becbbe5f36b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODk1NTAzNTY4ODE2MmRkZGUyODdlZmY2MmYwYmVjYmJlNWYzNmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-11T15:15:59Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-18T12:47:24Z"}, "message": "Expand `x.py test` to also run with `--compare-mode=nll` on src/test/ui suite.", "tree": {"sha": "f388269e41aa1544e657831269e8f7f99bb03510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f388269e41aa1544e657831269e8f7f99bb03510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558955035688162ddde287eff62f0becbbe5f36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558955035688162ddde287eff62f0becbbe5f36b", "html_url": "https://github.com/rust-lang/rust/commit/558955035688162ddde287eff62f0becbbe5f36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558955035688162ddde287eff62f0becbbe5f36b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bb956278e395a34b416d5a3ef03044777625ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bb956278e395a34b416d5a3ef03044777625ef", "html_url": "https://github.com/rust-lang/rust/commit/f4bb956278e395a34b416d5a3ef03044777625ef"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "ca18604e6d1f8b31686ccbb00b87217fcdec48e8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/558955035688162ddde287eff62f0becbbe5f36b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558955035688162ddde287eff62f0becbbe5f36b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=558955035688162ddde287eff62f0becbbe5f36b", "patch": "@@ -538,6 +538,7 @@ impl Step for RustdocUi {\n             target: self.target,\n             mode: \"ui\",\n             suite: \"rustdoc-ui\",\n+            compare_mode: None,\n         })\n     }\n }\n@@ -590,19 +591,44 @@ macro_rules! default_test {\n     }\n }\n \n+macro_rules! default_test_with_compare_mode {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr,\n+                   compare_mode: $compare_mode:expr }) => {\n+        test_with_compare_mode!($name { path: $path, mode: $mode, suite: $suite, default: true,\n+                                        host: false, compare_mode: $compare_mode });\n+    }\n+}\n+\n macro_rules! host_test {\n     ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr }) => {\n         test!($name { path: $path, mode: $mode, suite: $suite, default: true, host: true });\n     }\n }\n \n macro_rules! test {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr, default: $default:expr,\n+                   host: $host:expr }) => {\n+        test_definitions!($name { path: $path, mode: $mode, suite: $suite, default: $default,\n+                                  host: $host, compare_mode: None });\n+    }\n+}\n+\n+macro_rules! test_with_compare_mode {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr, default: $default:expr,\n+                   host: $host:expr, compare_mode: $compare_mode:expr }) => {\n+        test_definitions!($name { path: $path, mode: $mode, suite: $suite, default: $default,\n+                                  host: $host, compare_mode: Some($compare_mode) });\n+    }\n+}\n+\n+macro_rules! test_definitions {\n     ($name:ident {\n         path: $path:expr,\n         mode: $mode:expr,\n         suite: $suite:expr,\n         default: $default:expr,\n-        host: $host:expr\n+        host: $host:expr,\n+        compare_mode: $compare_mode:expr\n     }) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n         pub struct $name {\n@@ -634,16 +660,18 @@ macro_rules! test {\n                     target: self.target,\n                     mode: $mode,\n                     suite: $suite,\n+                    compare_mode: $compare_mode,\n                 })\n             }\n         }\n     }\n }\n \n-default_test!(Ui {\n+default_test_with_compare_mode!(Ui {\n     path: \"src/test/ui\",\n     mode: \"ui\",\n-    suite: \"ui\"\n+    suite: \"ui\",\n+    compare_mode: \"nll\"\n });\n \n default_test!(RunPass {\n@@ -804,6 +832,7 @@ struct Compiletest {\n     target: Interned<String>,\n     mode: &'static str,\n     suite: &'static str,\n+    compare_mode: Option<&'static str>,\n }\n \n impl Step for Compiletest {\n@@ -823,6 +852,7 @@ impl Step for Compiletest {\n         let target = self.target;\n         let mode = self.mode;\n         let suite = self.suite;\n+        let compare_mode = self.compare_mode;\n \n         // Skip codegen tests if they aren't enabled in configuration.\n         if !builder.config.codegen_tests && suite == \"codegen\" {\n@@ -1044,6 +1074,15 @@ impl Step for Compiletest {\n                  suite, mode, &compiler.host, target));\n         let _time = util::timeit(&builder);\n         try_run(builder, &mut cmd);\n+\n+        if let Some(compare_mode) = compare_mode {\n+            cmd.arg(\"--compare-mode\").arg(compare_mode);\n+            let _folder = builder.fold_output(|| format!(\"test_{}_{}\", suite, compare_mode));\n+            builder.info(&format!(\"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n+                                  suite, mode, compare_mode, &compiler.host, target));\n+            let _time = util::timeit(&builder);\n+            try_run(builder, &mut cmd);\n+        }\n     }\n }\n "}]}