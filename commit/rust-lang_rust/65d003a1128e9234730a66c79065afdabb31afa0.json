{"sha": "65d003a1128e9234730a66c79065afdabb31afa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDAwM2ExMTI4ZTkyMzQ3MzBhNjZjNzkwNjVhZmRhYmIzMWFmYTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-22T20:08:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-22T20:08:47Z"}, "message": "Clean up suggestion span; clarify help message", "tree": {"sha": "5a4cd021c0dca66b1857ce328431947c616dfac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4cd021c0dca66b1857ce328431947c616dfac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d003a1128e9234730a66c79065afdabb31afa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d003a1128e9234730a66c79065afdabb31afa0", "html_url": "https://github.com/rust-lang/rust/commit/65d003a1128e9234730a66c79065afdabb31afa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d003a1128e9234730a66c79065afdabb31afa0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752274eabdd9be991c9a4e11850890301b697032", "url": "https://api.github.com/repos/rust-lang/rust/commits/752274eabdd9be991c9a4e11850890301b697032", "html_url": "https://github.com/rust-lang/rust/commit/752274eabdd9be991c9a4e11850890301b697032"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "4749e36238cb50571b563abc55ed3ac028d1aec5", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65d003a1128e9234730a66c79065afdabb31afa0/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d003a1128e9234730a66c79065afdabb31afa0/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=65d003a1128e9234730a66c79065afdabb31afa0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{indent_of, snippet_opt, span_lint_and_help, span_lint_and_sugg};\n+use crate::utils::{indent_of, snippet_opt, span_lint_and_help, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n@@ -75,29 +75,34 @@ impl LateLintPass<'_> for ExhaustiveItems {\n             if cx.access_levels.is_exported(item.hir_id);\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n-                let lint = if let ItemKind::Enum(..) = item.kind {\n-                    EXHAUSTIVE_ENUMS\n+                let (lint, msg) = if let ItemKind::Enum(..) = item.kind {\n+                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n                 } else {\n-                    EXHAUSTIVE_STRUCTS\n+                    (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n                 };\n+                let suggestion_span = item.span.until(item.ident.span);\n \n-                if let Some(snippet) = snippet_opt(cx, item.span) {\n+                if let Some(snippet) = snippet_opt(cx, suggestion_span) {\n                     let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n-                    span_lint_and_sugg(\n+                    span_lint_and_then(\n                         cx,\n                         lint,\n                         item.span,\n-                        \"enums should not be exhaustive\",\n-                        \"try adding #[non_exhaustive]\",\n-                        format!(\"#[non_exhaustive]\\n{}{}\", indent, snippet),\n-                        Applicability::MaybeIncorrect,\n+                        msg,\n+                        |diag| {\n+                            let sugg = format!(\"#[non_exhaustive]\\n{}{}\", indent, snippet);\n+                            diag.span_suggestion(suggestion_span,\n+                                                 \"try adding #[non_exhaustive]\",\n+                                                 sugg,\n+                                                 Applicability::MaybeIncorrect);\n+                        }\n                     );\n                 } else {\n                     span_lint_and_help(\n                         cx,\n                         lint,\n                         item.span,\n-                        \"enums should not be exhaustive\",\n+                        msg,\n                         None,\n                         \"try adding #[non_exhaustive]\",\n                     );"}, {"sha": "a24e64b67058accb20d56dc45facc782c17dbab7", "filename": "tests/ui/exhaustive_items.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65d003a1128e9234730a66c79065afdabb31afa0/tests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65d003a1128e9234730a66c79065afdabb31afa0/tests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.stderr?ref=65d003a1128e9234730a66c79065afdabb31afa0", "patch": "@@ -1,4 +1,4 @@\n-error: enums should not be exhaustive\n+error: exported enums should not be exhaustive\n   --> $DIR/exhaustive_items.rs:11:5\n    |\n LL | /     pub enum Exhaustive {\n@@ -10,21 +10,17 @@ LL | |     }\n    | |_____^\n    |\n note: the lint level is defined here\n-  --> $DIR/exhaustive_items.rs:3:35\n+  --> $DIR/exhaustive_items.rs:3:9\n    |\n LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n help: try adding #[non_exhaustive]\n    |\n LL |     #[non_exhaustive]\n LL |     pub enum Exhaustive {\n-LL |         Foo,\n-LL |         Bar,\n-LL |         Baz,\n-LL |         Quux(String),\n- ...\n+   |\n \n-error: enums should not be exhaustive\n+error: exported structs should not be exhaustive\n   --> $DIR/exhaustive_items.rs:46:5\n    |\n LL | /     pub struct Exhaustive {\n@@ -33,13 +29,15 @@ LL | |         bar: String,\n LL | |     }\n    | |_____^\n    |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_items.rs:3:35\n+   |\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: try adding #[non_exhaustive]\n    |\n LL |     #[non_exhaustive]\n LL |     pub struct Exhaustive {\n-LL |         foo: u8,\n-LL |         bar: String,\n-LL |     }\n    |\n \n error: aborting due to 2 previous errors"}]}