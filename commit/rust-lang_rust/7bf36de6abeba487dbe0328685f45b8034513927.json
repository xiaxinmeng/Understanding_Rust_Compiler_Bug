{"sha": "7bf36de6abeba487dbe0328685f45b8034513927", "node_id": "C_kwDOAAsO6NoAKDdiZjM2ZGU2YWJlYmE0ODdkYmUwMzI4Njg1ZjQ1YjgwMzQ1MTM5Mjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-12T21:03:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-14T18:32:31Z"}, "message": "Make report_projection_error more term agnostic", "tree": {"sha": "801feefb2881eb782745a562e7ebe62e498ba3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801feefb2881eb782745a562e7ebe62e498ba3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf36de6abeba487dbe0328685f45b8034513927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf36de6abeba487dbe0328685f45b8034513927", "html_url": "https://github.com/rust-lang/rust/commit/7bf36de6abeba487dbe0328685f45b8034513927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf36de6abeba487dbe0328685f45b8034513927/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d", "html_url": "https://github.com/rust-lang/rust/commit/ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d"}], "stats": {"total": 111, "additions": 91, "deletions": 20}, "files": [{"sha": "fa94f16dc299ad6eed4fc8c62e18bef401a364da", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7bf36de6abeba487dbe0328685f45b8034513927/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf36de6abeba487dbe0328685f45b8034513927/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7bf36de6abeba487dbe0328685f45b8034513927", "patch": "@@ -1636,17 +1636,30 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),\n                 );\n-                let normalized_ty = ocx.normalize(\n-                    &obligation.cause,\n-                    obligation.param_env,\n-                    self.tcx.mk_projection(data.projection_ty.def_id, data.projection_ty.substs),\n-                );\n+                let unnormalized_term = match data.term.unpack() {\n+                    ty::TermKind::Ty(_) => self\n+                        .tcx\n+                        .mk_projection(data.projection_ty.def_id, data.projection_ty.substs)\n+                        .into(),\n+                    ty::TermKind::Const(ct) => self\n+                        .tcx\n+                        .mk_const(\n+                            ty::UnevaluatedConst {\n+                                def: ty::WithOptConstParam::unknown(data.projection_ty.def_id),\n+                                substs: data.projection_ty.substs,\n+                            },\n+                            ct.ty(),\n+                        )\n+                        .into(),\n+                };\n+                let normalized_term =\n+                    ocx.normalize(&obligation.cause, obligation.param_env, unnormalized_term);\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n \n-                debug!(?normalized_ty, data.ty = ?data.term);\n+                debug!(?normalized_term, data.ty = ?data.term);\n \n-                let is_normalized_ty_expected = !matches!(\n+                let is_normalized_term_expected = !matches!(\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n@@ -1655,7 +1668,6 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                let expected_ty = data.term.ty().unwrap_or_else(|| self.tcx.ty_error());\n \n                 // constrain inference variables a bit more to nested obligations from normalize so\n                 // we can have more helpful errors.\n@@ -1664,11 +1676,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let Err(new_err) = ocx.eq_exp(\n                     &obligation.cause,\n                     obligation.param_env,\n-                    is_normalized_ty_expected,\n-                    normalized_ty,\n-                    expected_ty,\n+                    is_normalized_term_expected,\n+                    normalized_term,\n+                    data.term,\n                 ) {\n-                    (Some((data, is_normalized_ty_expected, normalized_ty, expected_ty)), new_err)\n+                    (Some((data, is_normalized_term_expected, normalized_term, data.term)), new_err)\n                 } else {\n                     (None, error.err)\n                 }\n@@ -1677,12 +1689,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             };\n \n             let msg = values\n-                .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n-                    self.maybe_detailed_projection_msg(\n-                        predicate,\n-                        normalized_ty.into(),\n-                        expected_ty.into(),\n-                    )\n+                .and_then(|(predicate, _, normalized_term, expected_term)| {\n+                    self.maybe_detailed_projection_msg(predicate, normalized_term, expected_term)\n                 })\n                 .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");"}, {"sha": "0f1ec9ad0522fd60f5ac0dc26cbc74bd4cbc6b80", "filename": "src/test/ui/associated-type-bounds/const-projection-err.gce.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr?ref=7bf36de6abeba487dbe0328685f45b8034513927", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-projection-err.rs:4:26\n+   |\n+LL | #![cfg_attr(gce, feature(generic_const_exprs))]\n+   |                          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0271]: type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+  --> $DIR/const-projection-err.rs:14:11\n+   |\n+LL |     foo::<T>();\n+   |           ^ expected `0`, found `1`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/const-projection-err.rs:11:28\n+   |\n+LL | fn foo<T: TraitWAssocConst<A = 1>>() {}\n+   |                            ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "bead85630016b7514897e3faecfc31a20b7456cf", "filename": "src/test/ui/associated-type-bounds/const-projection-err.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs?ref=7bf36de6abeba487dbe0328685f45b8034513927", "patch": "@@ -0,0 +1,18 @@\n+// revisions: stock gce\n+\n+#![feature(associated_const_equality)]\n+#![cfg_attr(gce, feature(generic_const_exprs))]\n+//[gce]~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+trait TraitWAssocConst {\n+    const A: usize;\n+}\n+\n+fn foo<T: TraitWAssocConst<A = 1>>() {}\n+\n+fn bar<T: TraitWAssocConst<A = 0>>() {\n+    foo::<T>();\n+    //~^ ERROR type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+}\n+\n+fn main() {}"}, {"sha": "bf0824259a5a71ec6c29bbfad5914bb37e92fe8c", "filename": "src/test/ui/associated-type-bounds/const-projection-err.stock.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr?ref=7bf36de6abeba487dbe0328685f45b8034513927", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+  --> $DIR/const-projection-err.rs:14:11\n+   |\n+LL |     foo::<T>();\n+   |           ^ expected `1`, found `<T as TraitWAssocConst>::A`\n+   |\n+   = note: expected constant `1`\n+              found constant `<T as TraitWAssocConst>::A`\n+note: required by a bound in `foo`\n+  --> $DIR/const-projection-err.rs:11:28\n+   |\n+LL | fn foo<T: TraitWAssocConst<A = 1>>() {}\n+   |                            ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "30c380152a5e6b88cf871a26dd82e1cf55f3403c", "filename": "src/test/ui/issues/issue-105330.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf36de6abeba487dbe0328685f45b8034513927/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr?ref=7bf36de6abeba487dbe0328685f45b8034513927", "patch": "@@ -55,8 +55,10 @@ error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n   --> $DIR/issue-105330.rs:12:11\n    |\n LL |     foo::<Demo>()();\n-   |           ^^^^ types differ\n+   |           ^^^^ expected `32`, found `<Demo as TraitWAssocConst>::A`\n    |\n+   = note: expected constant `32`\n+              found constant `<Demo as TraitWAssocConst>::A`\n note: required by a bound in `foo`\n   --> $DIR/issue-105330.rs:11:28\n    |\n@@ -89,8 +91,10 @@ error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n   --> $DIR/issue-105330.rs:19:11\n    |\n LL |     foo::<Demo>();\n-   |           ^^^^ types differ\n+   |           ^^^^ expected `32`, found `<Demo as TraitWAssocConst>::A`\n    |\n+   = note: expected constant `32`\n+              found constant `<Demo as TraitWAssocConst>::A`\n note: required by a bound in `foo`\n   --> $DIR/issue-105330.rs:11:28\n    |"}]}