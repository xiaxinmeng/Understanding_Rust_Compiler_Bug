{"sha": "1c7294eb54df519d36b7e3904aac11507daf33b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzI5NGViNTRkZjUxOWQzNmI3ZTM5MDRhYWMxMTUwN2RhZjMzYjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-30T18:40:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:28Z"}, "message": "rustc: Move implementations_of_trait to a query\n\nWhile we're at it, make it two separate queries so one's for rustdoc and one's\nfor the compiler, hopefully being a bit more targeted.", "tree": {"sha": "a5ca0a3e61e011958f93c84eedfdccf82df5a8cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ca0a3e61e011958f93c84eedfdccf82df5a8cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7294eb54df519d36b7e3904aac11507daf33b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7294eb54df519d36b7e3904aac11507daf33b4", "html_url": "https://github.com/rust-lang/rust/commit/1c7294eb54df519d36b7e3904aac11507daf33b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7294eb54df519d36b7e3904aac11507daf33b4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dec2a8f81fd42267b9006b939b8c6f0b5e73dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dec2a8f81fd42267b9006b939b8c6f0b5e73dcf", "html_url": "https://github.com/rust-lang/rust/commit/4dec2a8f81fd42267b9006b939b8c6f0b5e73dcf"}], "stats": {"total": 106, "additions": 71, "deletions": 35}, "files": [{"sha": "a3e38e5b8ad77288905174c3dd3c2038284e1b2f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -542,6 +542,9 @@ define_dep_nodes!( <'tcx>\n     [] CrateDisambiguator(CrateNum),\n     [] CrateHash(CrateNum),\n     [] OriginalCrateName(CrateNum),\n+\n+    [] ImplementationsOfTrait { krate: CrateNum, trait_id: DefId },\n+    [] AllTraitImplementations(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "495b357b613d8409abc5b4bf1f7a51a5e6a8cf92", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -233,9 +233,6 @@ pub trait CrateStore {\n     fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n \n-    // trait info\n-    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;\n-\n     // trait/impl-item info\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n@@ -328,9 +325,6 @@ impl CrateStore for DummyCrateStore {\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n         { bug!(\"item_generics_cloned\") }\n \n-    // trait info\n-    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n-\n     // trait/impl-item info\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n         { bug!(\"associated_item_cloned\") }"}, {"sha": "41caaa30b5c8d7fd5756120dd984d5806766ba3c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -630,6 +630,18 @@ impl<'tcx> QueryDescription for queries::original_crate_name<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::implementations_of_trait<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: (CrateNum, DefId)) -> String {\n+        format!(\"looking up implementations of a trait in a crate\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::all_trait_implementations<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up all (?) trait implementations\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1213,6 +1225,11 @@ define_maps! { <'tcx>\n     [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Symbol,\n     [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n     [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,\n+\n+    [] fn implementations_of_trait: implementations_of_trait_node((CrateNum, DefId))\n+        -> Rc<Vec<DefId>>,\n+    [] fn all_trait_implementations: AllTraitImplementations(CrateNum)\n+        -> Rc<Vec<DefId>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1292,3 +1309,9 @@ fn lint_levels_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn specializes_node<'tcx>((a, b): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::Specializes { impl1: a, impl2: b }\n }\n+\n+fn implementations_of_trait_node<'tcx>((krate, trait_id): (CrateNum, DefId))\n+    -> DepConstructor<'tcx>\n+{\n+    DepConstructor::ImplementationsOfTrait { krate, trait_id }\n+}"}, {"sha": "4687fc654092449cd8c359d1b0a7eaa4d161a493", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -141,13 +141,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_id: DefId)\n                                                 -> Rc<TraitImpls> {\n-    let remote_impls = if trait_id.is_local() {\n-        // Traits defined in the current crate can't have impls in upstream\n-        // crates, so we don't bother querying the cstore.\n-        Vec::new()\n-    } else {\n-        tcx.sess.cstore.implementations_of_trait(Some(trait_id))\n-    };\n+    let mut remote_impls = Vec::new();\n+\n+    // Traits defined in the current crate can't have impls in upstream\n+    // crates, so we don't bother querying the cstore.\n+    if !trait_id.is_local() {\n+        for cnum in tcx.sess.cstore.crates() {\n+            let impls = tcx.implementations_of_trait((cnum, trait_id));\n+            remote_impls.extend(impls.iter().cloned());\n+        }\n+    }\n \n     let mut blanket_impls = Vec::new();\n     let mut non_blanket_impls = FxHashMap();"}, {"sha": "67fe62d69beea6ef4111136603bbf489a12849af", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -42,14 +42,16 @@ use rustc::hir::svh::Svh;\n use rustc::hir;\n \n macro_rules! provide {\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $cdata:ident, $($name:ident => $compute:block)*) => {\n+    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n+      $($name:ident => $compute:block)*) => {\n         pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n             $(fn $name<'a, $lt:$lt, T>($tcx: TyCtxt<'a, $lt, $lt>, def_id_arg: T)\n                                     -> <ty::queries::$name<$lt> as\n                                         QueryConfig>::Value\n-                where T: IntoDefId,\n+                where T: IntoArgs,\n             {\n-                let $def_id = def_id_arg.into_def_id();\n+                #[allow(unused_variables)]\n+                let ($def_id, $other) = def_id_arg.into_args();\n                 assert!(!$def_id.is_local());\n \n                 let def_path_hash = $tcx.def_path_hash($def_id);\n@@ -71,19 +73,25 @@ macro_rules! provide {\n     }\n }\n \n-trait IntoDefId {\n-    fn into_def_id(self) -> DefId;\n+// small trait to work around different signature queries all being defined via\n+// the macro above.\n+trait IntoArgs {\n+    fn into_args(self) -> (DefId, DefId);\n }\n \n-impl IntoDefId for DefId {\n-    fn into_def_id(self) -> DefId { self }\n+impl IntoArgs for DefId {\n+    fn into_args(self) -> (DefId, DefId) { (self, self) }\n }\n \n-impl IntoDefId for CrateNum {\n-    fn into_def_id(self) -> DefId { self.as_def_id() }\n+impl IntoArgs for CrateNum {\n+    fn into_args(self) -> (DefId, DefId) { (self.as_def_id(), self.as_def_id()) }\n }\n \n-provide! { <'tcx> tcx, def_id, cdata,\n+impl IntoArgs for (CrateNum, DefId) {\n+    fn into_args(self) -> (DefId, DefId) { (self.0.as_def_id(), self.1) }\n+}\n+\n+provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n     generics_of => { tcx.alloc_generics(cdata.get_generics(def_id.index)) }\n     predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n@@ -178,6 +186,19 @@ provide! { <'tcx> tcx, def_id, cdata,\n     crate_disambiguator => { cdata.disambiguator() }\n     crate_hash => { cdata.hash() }\n     original_crate_name => { cdata.name() }\n+\n+    implementations_of_trait => {\n+        let mut result = vec![];\n+        let filter = Some(other);\n+        cdata.get_implementations_for_trait(filter, &tcx.dep_graph, &mut result);\n+        Rc::new(result)\n+    }\n+\n+    all_trait_implementations => {\n+        let mut result = vec![];\n+        cdata.get_implementations_for_trait(None, &tcx.dep_graph, &mut result);\n+        Rc::new(result)\n+    }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -217,16 +238,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_generics(def.index)\n     }\n \n-    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>\n-    {\n-        let mut result = vec![];\n-\n-        self.iter_crate_data(|_, cdata| {\n-            cdata.get_implementations_for_trait(filter, &self.dep_graph, &mut result)\n-        });\n-        result\n-    }\n-\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n     {\n         self.read_dep_node(def);"}, {"sha": "bd49e46f6fb54a40480bac64eccceb8841f1d0e0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7294eb54df519d36b7e3904aac11507daf33b4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1c7294eb54df519d36b7e3904aac11507daf33b4", "patch": "@@ -236,8 +236,10 @@ pub fn build_impls(cx: &DocContext, did: DefId) -> Vec<clean::Item> {\n \n     cx.populated_all_crate_impls.set(true);\n \n-    for did in tcx.sess.cstore.implementations_of_trait(None) {\n-        build_impl(cx, did, &mut impls);\n+    for cnum in tcx.sess.cstore.crates() {\n+        for did in tcx.all_trait_implementations(cnum).iter() {\n+            build_impl(cx, *did, &mut impls);\n+        }\n     }\n \n     // Also try to inline primitive impls from other crates."}]}