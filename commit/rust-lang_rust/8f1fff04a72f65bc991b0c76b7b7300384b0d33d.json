{"sha": "8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "node_id": "C_kwDOAAsO6NoAKDhmMWZmZjA0YTcyZjY1YmM5OTFiMGM3NmI3YjczMDAzODRiMGQzM2Q", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-31T18:34:04Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-06-05T13:35:02Z"}, "message": "get_vtable returns opt instd of unwrpping", "tree": {"sha": "d8b93b26305fdd50b3dbd92d543cde14a8b2a9a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b93b26305fdd50b3dbd92d543cde14a8b2a9a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "html_url": "https://github.com/rust-lang/rust/commit/8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d35d972e6974d40d30362344ea619a5b560aae20", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35d972e6974d40d30362344ea619a5b560aae20", "html_url": "https://github.com/rust-lang/rust/commit/d35d972e6974d40d30362344ea619a5b560aae20"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "3a00c41d90ae6e8db1544e26b3b2c5496fe7b47c", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -304,22 +304,24 @@ pub fn get_vtable_index_of_object_method<'tcx, N>(\n     tcx: TyCtxt<'tcx>,\n     object: &super::ImplSourceObjectData<'tcx, N>,\n     method_def_id: DefId,\n-) -> usize {\n+) -> Option<usize> {\n     let existential_trait_ref = object\n         .upcast_trait_ref\n         .map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n     let existential_trait_ref = tcx.erase_regions(existential_trait_ref);\n+\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    let index = tcx\n+    if let Some(index) = tcx\n         .own_existential_vtable_entries(existential_trait_ref)\n         .iter()\n         .copied()\n         .position(|def_id| def_id == method_def_id)\n-        .unwrap_or_else(|| {\n-            bug!(\"get_vtable_index_of_object_method: {:?} was not found\", method_def_id);\n-        });\n-    object.vtable_base + index\n+    {\n+        Some(object.vtable_base + index)\n+    } else {\n+        None\n+    }\n }\n \n pub fn closure_trait_ref_and_return_type<'tcx>("}, {"sha": "c78a5855edb82bb294f38f32c426778496157e31", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -347,11 +347,15 @@ fn resolve_associated_item<'tcx>(\n             _ => None,\n         },\n         traits::ImplSource::Object(ref data) => {\n-            let index = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id);\n-            Some(Instance {\n-                def: ty::InstanceDef::Virtual(trait_item_id, index),\n-                substs: rcvr_substs,\n-            })\n+            if let Some(index) = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id)\n+            {\n+                Some(Instance {\n+                    def: ty::InstanceDef::Virtual(trait_item_id, index),\n+                    substs: rcvr_substs,\n+                })\n+            } else {\n+                None\n+            }\n         }\n         traits::ImplSource::Builtin(..) => {\n             if Some(trait_ref.def_id) == tcx.lang_items().clone_trait() {"}, {"sha": "393cf91efc2d2101446a8368538f17df18121553", "filename": "src/test/ui/traits/vtable/issue-97381.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -0,0 +1,30 @@\n+use std::ops::Deref;\n+trait MyTrait: Deref<Target = u32> {}\n+struct MyStruct(u32);\n+impl MyTrait for MyStruct {}\n+impl Deref for MyStruct {\n+    type Target = u32;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+fn get_concrete_value(i: u32) -> MyStruct {\n+    MyStruct(i)\n+}\n+fn get_boxed_value(i: u32) -> Box<dyn MyTrait> {\n+    Box::new(get_concrete_value(i))\n+}\n+fn main() {\n+    let v = [1, 2, 3]\n+        .iter()\n+        .map(|i| get_boxed_value(*i))\n+        .collect::<Vec<_>>();\n+\n+    let el = &v[0];\n+\n+    for _ in v {\n+        //~^ ERROR cannot move out of `v` because it is borrowed\n+        println!(\"{}\", ***el > 0);\n+    }\n+}"}, {"sha": "f88c8716ff7401945e1d19502842d18c954a4363", "filename": "src/test/ui/traits/vtable/issue-97381.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -0,0 +1,15 @@\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/issue-97381.rs:26:14\n+   |\n+LL |     let el = &v[0];\n+   |               - borrow of `v` occurs here\n+LL | \n+LL |     for _ in v {\n+   |              ^ move out of `v` occurs here\n+LL |\n+LL |         println!(\"{}\", ***el > 0);\n+   |                         ---- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "7fbbb50dc115fea5bde15c9e767556b0f301f50b", "filename": "src/test/ui/type/type-unsatisfiable.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -0,0 +1,59 @@\n+// revisions: lib usage\n+//[lib] compile-flags: --crate-type=lib\n+//[lib] build-pass\n+\n+use std::ops::Sub;\n+trait Vector2 {\n+    type ScalarType;\n+\n+    fn from_values(x: Self::ScalarType, y: Self::ScalarType) -> Self\n+    where\n+        Self: Sized;\n+\n+    fn x(&self) -> Self::ScalarType;\n+    fn y(&self) -> Self::ScalarType;\n+}\n+\n+impl<T> Sub for dyn Vector2<ScalarType = T>\n+where\n+    T: Sub<Output = T>,\n+    (dyn Vector2<ScalarType = T>): Sized,\n+{\n+    type Output = dyn Vector2<ScalarType = T>;\n+\n+    fn sub(self, rhs: Self) -> Self::Output {\n+        Self::from_values(self.x() - rhs.x(), self.y() - rhs.y())\n+    }\n+}\n+\n+struct Vec2 {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Vector2 for Vec2 {\n+    type ScalarType = i32;\n+\n+    fn from_values(x: Self::ScalarType, y: Self::ScalarType) -> Self\n+    where\n+        Self: Sized,\n+    {\n+        Self { x, y }\n+    }\n+\n+    fn x(&self) -> Self::ScalarType {\n+        self.x\n+    }\n+    fn y(&self) -> Self::ScalarType {\n+        self.y\n+    }\n+}\n+\n+#[cfg(usage)]\n+fn main() {\n+    let hey: Box<dyn Vector2<ScalarType = i32>> = Box::new(Vec2 { x: 1, y: 2 });\n+    let word: Box<dyn Vector2<ScalarType = i32>> = Box::new(Vec2 { x: 1, y: 2 });\n+\n+    let bar = *hey - *word;\n+    //[usage]~^ ERROR cannot subtract\n+}"}, {"sha": "56e2e30afaca59e928080a91ef3113a8dec4c0d9", "filename": "src/test/ui/type/type-unsatisfiable.usage.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f1fff04a72f65bc991b0c76b7b7300384b0d33d/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr?ref=8f1fff04a72f65bc991b0c76b7b7300384b0d33d", "patch": "@@ -0,0 +1,11 @@\n+error[E0369]: cannot subtract `(dyn Vector2<ScalarType = i32> + 'static)` from `dyn Vector2<ScalarType = i32>`\n+  --> $DIR/type-unsatisfiable.rs:57:20\n+   |\n+LL |     let bar = *hey - *word;\n+   |               ---- ^ ----- (dyn Vector2<ScalarType = i32> + 'static)\n+   |               |\n+   |               dyn Vector2<ScalarType = i32>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}]}