{"sha": "baf45d6d9001baeb7dfded52a6695266a8d631d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjQ1ZDZkOTAwMWJhZWI3ZGZkZWQ1MmE2Njk1MjY2YThkNjMxZDA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:11Z"}, "message": "Rollup merge of #56210 - RalfJung:c_str, r=oli-obk\n\nread_c_str should call the AllocationExtra hooks\n\nI just hope we do not have other methods that bypass `get_bytes`/`get_bytes_mut`... (looking over the file, I could not find any)\n\nr? @oli-obk", "tree": {"sha": "db635d2a947aa0b5ea1b00bff8fb57d1a882ff95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db635d2a947aa0b5ea1b00bff8fb57d1a882ff95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf45d6d9001baeb7dfded52a6695266a8d631d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sg3CRBK7hj4Ov3rIwAAdHIIAGmErMlQ3nFWIRvFAT+SATYV\n47pLV9ATmoFkOVr4CLgs+3J7QOmVjaLonIlN2Bzm78Qc29y0D3zul8F+S2ii+Tw0\nCfYO3wUvI5FfoCj2BWswvT1AiDe8Alv8qYcPw+BaXlp43kGSoaceYnYcivHja74e\n2Zl2CNODXgSzlKn57EN4+gA8/kQja39ylYmjatbGKxG/3BU/YrH9LcCtrUNW08f1\nD3Nlozw4ItJseMNmzgpOSPeIBSgQKP4btWYDje/2ANiL+Nhe4/fQZO+3jWnELART\ne4jBA9Hjweoxi7YVqbw1HWEwUDmkOuwKB0Qys4jyIgWSgj1guQitI6Oa5QDPNWs=\n=UPEt\n-----END PGP SIGNATURE-----\n", "payload": "tree db635d2a947aa0b5ea1b00bff8fb57d1a882ff95\nparent d21d510dde71523f4ce52805e50582cd2f0676fd\nparent 2472e832503995a024a6fbf533b504a0d0bf9e9c\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161911 +0100\ncommitter GitHub <noreply@github.com> 1543161911 +0100\n\nRollup merge of #56210 - RalfJung:c_str, r=oli-obk\n\nread_c_str should call the AllocationExtra hooks\n\nI just hope we do not have other methods that bypass `get_bytes`/`get_bytes_mut`... (looking over the file, I could not find any)\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf45d6d9001baeb7dfded52a6695266a8d631d0", "html_url": "https://github.com/rust-lang/rust/commit/baf45d6d9001baeb7dfded52a6695266a8d631d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf45d6d9001baeb7dfded52a6695266a8d631d0/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21d510dde71523f4ce52805e50582cd2f0676fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21d510dde71523f4ce52805e50582cd2f0676fd", "html_url": "https://github.com/rust-lang/rust/commit/d21d510dde71523f4ce52805e50582cd2f0676fd"}, {"sha": "2472e832503995a024a6fbf533b504a0d0bf9e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2472e832503995a024a6fbf533b504a0d0bf9e9c", "html_url": "https://github.com/rust-lang/rust/commit/2472e832503995a024a6fbf533b504a0d0bf9e9c"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "ab63e882c4a555b601c35b80d4b922b3afaf11da", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/baf45d6d9001baeb7dfded52a6695266a8d631d0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf45d6d9001baeb7dfded52a6695266a8d631d0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=baf45d6d9001baeb7dfded52a6695266a8d631d0", "patch": "@@ -172,10 +172,11 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         let offset = ptr.offset.bytes() as usize;\n         match self.bytes[offset..].iter().position(|&c| c == 0) {\n             Some(size) => {\n-                let p1 = Size::from_bytes((size + 1) as u64);\n-                self.check_relocations(cx, ptr, p1)?;\n-                self.check_defined(ptr, p1)?;\n-                Ok(&self.bytes[offset..offset + size])\n+                let size_with_null = Size::from_bytes((size + 1) as u64);\n+                // Go through `get_bytes` for checks and AllocationExtra hooks.\n+                // We read the null, so we include it in the request, but we want it removed\n+                // from the result!\n+                Ok(&self.get_bytes(cx, ptr, size_with_null)?[..size])\n             }\n             None => err!(UnterminatedCString(ptr.erase_tag())),\n         }\n@@ -315,11 +316,9 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n             },\n         };\n \n-        {\n-            let endian = cx.data_layout().endian;\n-            let dst = self.get_bytes_mut(cx, ptr, type_size)?;\n-            write_target_uint(endian, dst, bytes).unwrap();\n-        }\n+        let endian = cx.data_layout().endian;\n+        let dst = self.get_bytes_mut(cx, ptr, type_size)?;\n+        write_target_uint(endian, dst, bytes).unwrap();\n \n         // See if we have to also write a relocation\n         match val {"}]}