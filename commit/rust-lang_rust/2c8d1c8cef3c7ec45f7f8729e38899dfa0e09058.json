{"sha": "2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGQxYzhjZWYzYzdlYzQ1ZjdmODcyOWUzODg5OWRmYTBlMDkwNTg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-08T18:28:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-08T18:28:15Z"}, "message": "Rollup merge of #81735 - klensy:span-fix, r=varkor\n\nfaster few span methods\n\nTouched few methods, so it should be (hopefully) faster.\n\nFirst two changes: instead splitting string from start and taking only last piece, split it from the end.\nLast: swapped conditions, to first check boolean parameter.", "tree": {"sha": "6d83fa91c008311334e25726aa6653b6aec4454b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d83fa91c008311334e25726aa6653b6aec4454b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIYK/CRBK7hj4Ov3rIwAAdHIIAD/SDWX7k2HI3zslUrUPG+lC\nhmEIaE5V6bu8Z4Ob4Wo+ht6t7s3U3pT4weiMxk93ti2bSvNSqFrVf5uTwXIAtX4a\nF+tEKuJQ4FexT29orJiGy71C5+JA2P230DxAe2bik0Lk2pSvBN80Oh4DgeICQQy5\nMJC/xD06DXNR5DOOmgLbI9Q8ugiteYXKV+0+wjGIaB3sZ+orLbq2bGGBWrRc8ZHb\n+zZqjCr0Hoae5UbDkAEI/BvzelWFgHEjEYobMYIG5LZYMZ/UpR+cgkuTCnZdhAwZ\naAihPnjtHbiuQhmlIjG+dqdwMq3LE/lV7f/stsHKKOpu45JtGpD8L8yiMMb+P1M=\n=3/hZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d83fa91c008311334e25726aa6653b6aec4454b\nparent b102ea479ddfea0e72757427fc73ec487d69aac1\nparent 60cca839753b1e88567364dc3b632e136aa35bc6\nauthor Mara Bos <m-ou.se@m-ou.se> 1612808895 +0100\ncommitter GitHub <noreply@github.com> 1612808895 +0100\n\nRollup merge of #81735 - klensy:span-fix, r=varkor\n\nfaster few span methods\n\nTouched few methods, so it should be (hopefully) faster.\n\nFirst two changes: instead splitting string from start and taking only last piece, split it from the end.\nLast: swapped conditions, to first check boolean parameter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "html_url": "https://github.com/rust-lang/rust/commit/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b102ea479ddfea0e72757427fc73ec487d69aac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b102ea479ddfea0e72757427fc73ec487d69aac1", "html_url": "https://github.com/rust-lang/rust/commit/b102ea479ddfea0e72757427fc73ec487d69aac1"}, {"sha": "60cca839753b1e88567364dc3b632e136aa35bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cca839753b1e88567364dc3b632e136aa35bc6", "html_url": "https://github.com/rust-lang/rust/commit/60cca839753b1e88567364dc3b632e136aa35bc6"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "79c5c7f110c4f39bf3e5a91ce3cd7dc9611437a7", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "patch": "@@ -22,6 +22,7 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(option_expect_none)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "298c995b1660b1320ba7b055552855c8294241a8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "patch": "@@ -539,7 +539,7 @@ impl SourceMap {\n \n     pub fn is_line_before_span_empty(&self, sp: Span) -> bool {\n         match self.span_to_prev_source(sp) {\n-            Ok(s) => s.split('\\n').last().map_or(false, |l| l.trim_start().is_empty()),\n+            Ok(s) => s.rsplit_once('\\n').unwrap_or((\"\", &s)).1.trim_start().is_empty(),\n             Err(_) => false,\n         }\n     }\n@@ -632,10 +632,11 @@ impl SourceMap {\n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n         match self.span_to_prev_source(sp) {\n             Err(_) => None,\n-            Ok(source) => source\n-                .split('\\n')\n-                .last()\n-                .map(|last_line| last_line.len() - last_line.trim_start().len()),\n+            Ok(source) => {\n+                let last_line = source.rsplit_once('\\n').unwrap_or((\"\", &source)).1;\n+\n+                Some(last_line.len() - last_line.trim_start().len())\n+            }\n         }\n     }\n \n@@ -651,7 +652,7 @@ impl SourceMap {\n     pub fn span_extend_to_prev_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n             let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\");\n-            if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+            if !prev_source.is_empty() && (accept_newlines || !prev_source.contains('\\n')) {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n         }\n@@ -673,7 +674,7 @@ impl SourceMap {\n                 let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n                 if prev_source.is_empty() && sp.lo().0 != 0 {\n                     return sp.with_lo(BytePos(sp.lo().0 - 1));\n-                } else if !prev_source.contains('\\n') || accept_newlines {\n+                } else if accept_newlines || !prev_source.contains('\\n') {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n             }\n@@ -693,7 +694,7 @@ impl SourceMap {\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {\n             let next_source = next_source.split(c).next().unwrap_or(\"\");\n-            if !next_source.is_empty() && (!next_source.contains('\\n') || accept_newlines) {\n+            if !next_source.is_empty() && (accept_newlines || !next_source.contains('\\n')) {\n                 return sp.with_hi(BytePos(sp.hi().0 + next_source.len() as u32));\n             }\n         }"}]}