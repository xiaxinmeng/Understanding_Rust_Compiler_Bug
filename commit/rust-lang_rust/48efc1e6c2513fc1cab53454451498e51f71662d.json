{"sha": "48efc1e6c2513fc1cab53454451498e51f71662d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWZjMWU2YzI1MTNmYzFjYWI1MzQ1NDQ1MTQ5OGU1MWY3MTY2MmQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-27T23:36:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-27T23:36:11Z"}, "message": "Rollup merge of #67632 - kraai:remove-collapsed-reference-links, r=steveklabnik\n\nConvert collapsed to shortcut reference links", "tree": {"sha": "14d0f19742d4965215c1adfb31d2d01143753e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d0f19742d4965215c1adfb31d2d01143753e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48efc1e6c2513fc1cab53454451498e51f71662d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeBpVsCRBK7hj4Ov3rIwAAdHIIAGItOMP+EDNF+rFAG7btHIFy\n1ca2O54fpAJ5xGG6V4OxAJZ7Cq/maTLkT4CXpmRp4HdIv2gPrDUK4XRmizLKDYcN\ntFera/sfEokWrpDz6s4ZUX1IMVtPyuDm5LWWrB7hviDqbJ5gL8VnJf0jKieN6qL5\nQOogwUXBgxHIP/J01lenNl+vHHCb7N2lQTGqvgTSeBCI5HJiknxqZuhuMVZBNraK\nYgpWr69OFWb44IWbq9c3SON+fMgxtuXRvmjYsIu2FZdfwa7+uGhWQInzfRZmLYj4\nXZ+HoPf/nXlFzOfk1ELIuJnqwuenlXmHQ1BSa1IIaSIvgBK0AhB7nj0R44rZJqI=\n=DhMd\n-----END PGP SIGNATURE-----\n", "payload": "tree 14d0f19742d4965215c1adfb31d2d01143753e6c\nparent b371e0fa00c3609ae7604e17ca3613c2184a691f\nparent 2f4331383466ca4ed78628f35495e86d9ac47137\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1577489771 +0100\ncommitter GitHub <noreply@github.com> 1577489771 +0100\n\nRollup merge of #67632 - kraai:remove-collapsed-reference-links, r=steveklabnik\n\nConvert collapsed to shortcut reference links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48efc1e6c2513fc1cab53454451498e51f71662d", "html_url": "https://github.com/rust-lang/rust/commit/48efc1e6c2513fc1cab53454451498e51f71662d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48efc1e6c2513fc1cab53454451498e51f71662d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b371e0fa00c3609ae7604e17ca3613c2184a691f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b371e0fa00c3609ae7604e17ca3613c2184a691f", "html_url": "https://github.com/rust-lang/rust/commit/b371e0fa00c3609ae7604e17ca3613c2184a691f"}, {"sha": "2f4331383466ca4ed78628f35495e86d9ac47137", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4331383466ca4ed78628f35495e86d9ac47137", "html_url": "https://github.com/rust-lang/rust/commit/2f4331383466ca4ed78628f35495e86d9ac47137"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "e3597473f62fd17d9ace1d62f7ad9bfd345e2043", "filename": "RELEASES.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -4951,10 +4951,10 @@ Stabilized APIs\n ---------------\n \n * [`std::panic`]\n-* [`std::panic::catch_unwind`][] (renamed from `recover`)\n-* [`std::panic::resume_unwind`][] (renamed from `propagate`)\n-* [`std::panic::AssertUnwindSafe`][] (renamed from `AssertRecoverSafe`)\n-* [`std::panic::UnwindSafe`][] (renamed from `RecoverSafe`)\n+* [`std::panic::catch_unwind`] (renamed from `recover`)\n+* [`std::panic::resume_unwind`] (renamed from `propagate`)\n+* [`std::panic::AssertUnwindSafe`] (renamed from `AssertRecoverSafe`)\n+* [`std::panic::UnwindSafe`] (renamed from `RecoverSafe`)\n * [`str::is_char_boundary`]\n * [`<*const T>::as_ref`]\n * [`<*mut T>::as_ref`]\n@@ -5234,18 +5234,18 @@ Libraries\n ---------\n \n * Stabilized APIs:\n-  * [`str::encode_utf16`][] (renamed from `utf16_units`)\n-  * [`str::EncodeUtf16`][] (renamed from `Utf16Units`)\n+  * [`str::encode_utf16`] (renamed from `utf16_units`)\n+  * [`str::EncodeUtf16`] (renamed from `Utf16Units`)\n   * [`Ref::map`]\n   * [`RefMut::map`]\n   * [`ptr::drop_in_place`]\n   * [`time::Instant`]\n   * [`time::SystemTime`]\n   * [`Instant::now`]\n-  * [`Instant::duration_since`][] (renamed from `duration_from_earlier`)\n+  * [`Instant::duration_since`] (renamed from `duration_from_earlier`)\n   * [`Instant::elapsed`]\n   * [`SystemTime::now`]\n-  * [`SystemTime::duration_since`][] (renamed from `duration_from_earlier`)\n+  * [`SystemTime::duration_since`] (renamed from `duration_from_earlier`)\n   * [`SystemTime::elapsed`]\n   * Various `Add`/`Sub` impls for `Time` and `SystemTime`\n   * [`SystemTimeError`]\n@@ -5432,8 +5432,8 @@ Libraries\n \n * Stabilized APIs\n   * `Path`\n-    * [`Path::strip_prefix`][] (renamed from relative_from)\n-    * [`path::StripPrefixError`][] (new error type returned from strip_prefix)\n+    * [`Path::strip_prefix`] (renamed from relative_from)\n+    * [`path::StripPrefixError`] (new error type returned from strip_prefix)\n   * `Ipv4Addr`\n     * [`Ipv4Addr::is_loopback`]\n     * [`Ipv4Addr::is_private`]\n@@ -5646,7 +5646,7 @@ Libraries\n \n * Stabilized APIs:\n   [`Read::read_exact`],\n-  [`ErrorKind::UnexpectedEof`][] (renamed from `UnexpectedEOF`),\n+  [`ErrorKind::UnexpectedEof`] (renamed from `UnexpectedEOF`),\n   [`fs::DirBuilder`], [`fs::DirBuilder::new`],\n   [`fs::DirBuilder::recursive`], [`fs::DirBuilder::create`],\n   [`os::unix::fs::DirBuilderExt`],\n@@ -5659,11 +5659,11 @@ Libraries\n   [`collections::hash_set::HashSet::drain`],\n   [`collections::binary_heap::Drain`],\n   [`collections::binary_heap::BinaryHeap::drain`],\n-  [`Vec::extend_from_slice`][] (renamed from `push_all`),\n+  [`Vec::extend_from_slice`] (renamed from `push_all`),\n   [`Mutex::get_mut`], [`Mutex::into_inner`], [`RwLock::get_mut`],\n   [`RwLock::into_inner`],\n-  [`Iterator::min_by_key`][] (renamed from `min_by`),\n-  [`Iterator::max_by_key`][] (renamed from `max_by`).\n+  [`Iterator::min_by_key`] (renamed from `min_by`),\n+  [`Iterator::max_by_key`] (renamed from `max_by`).\n * The [core library][1.6co] is stable, as are most of its APIs.\n * [The `assert_eq!` macro supports arguments that don't implement\n   `Sized`][1.6ae], such as arrays. In this way it behaves more like"}, {"sha": "3b98bc1c272f01b396b2666fb732434ffbdfe0b0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -142,7 +142,7 @@ pub trait Unsize<T: ?Sized> {\n /// In either of the two scenarios above, we reject usage of such a constant in\n /// a pattern match.\n ///\n-/// See also the [structural match RFC][RFC1445], and [issue 63438][] which\n+/// See also the [structural match RFC][RFC1445], and [issue 63438] which\n /// motivated migrating from attribute-based design to this trait.\n ///\n /// [RFC1445]: https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md"}, {"sha": "04c7789fa4ff498bad2e56e6aca49116f4137a31", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -2,12 +2,12 @@\n ///\n /// Instances of `Fn` can be called repeatedly without mutating state.\n ///\n-/// *This trait (`Fn`) is not to be confused with [function pointers][]\n+/// *This trait (`Fn`) is not to be confused with [function pointers]\n /// (`fn`).*\n ///\n /// `Fn` is implemented automatically by closures which only take immutable\n /// references to captured variables or don't capture anything at all, as well\n-/// as (safe) [function pointers][] (with some caveats, see their documentation\n+/// as (safe) [function pointers] (with some caveats, see their documentation\n /// for more details). Additionally, for any type `F` that implements `Fn`, `&F`\n /// implements `Fn`, too.\n ///\n@@ -78,7 +78,7 @@ pub trait Fn<Args>: FnMut<Args> {\n ///\n /// `FnMut` is implemented automatically by closures which take mutable\n /// references to captured variables, as well as all types that implement\n-/// [`Fn`], e.g., (safe) [function pointers][] (since `FnMut` is a supertrait of\n+/// [`Fn`], e.g., (safe) [function pointers] (since `FnMut` is a supertrait of\n /// [`Fn`]). Additionally, for any type `F` that implements `FnMut`, `&mut F`\n /// implements `FnMut`, too.\n ///\n@@ -162,7 +162,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n ///\n /// `FnOnce` is implemented automatically by closure that might consume captured\n /// variables, as well as all types that implement [`FnMut`], e.g., (safe)\n-/// [function pointers][] (since `FnOnce` is a supertrait of [`FnMut`]).\n+/// [function pointers] (since `FnOnce` is a supertrait of [`FnMut`]).\n ///\n /// Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any instance of\n /// [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected."}, {"sha": "d9d4c7e321fb58f73d92ecbd2d73b080ec2204f4", "filename": "src/librustc_data_structures/graph/iterate/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibrustc_data_structures%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibrustc_data_structures%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fiterate%2Fmod.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -101,14 +101,14 @@ pub enum ControlFlow<T> {\n pub enum NodeStatus {\n     /// This node has been examined by the depth-first search but is not yet `Settled`.\n     ///\n-    /// Also referred to as \"gray\" or \"discovered\" nodes in [CLR][].\n+    /// Also referred to as \"gray\" or \"discovered\" nodes in [CLR].\n     ///\n     /// [CLR]: https://en.wikipedia.org/wiki/Introduction_to_Algorithms\n     Visited,\n \n     /// This node and all nodes reachable from it have been examined by the depth-first search.\n     ///\n-    /// Also referred to as \"black\" or \"finished\" nodes in [CLR][].\n+    /// Also referred to as \"black\" or \"finished\" nodes in [CLR].\n     ///\n     /// [CLR]: https://en.wikipedia.org/wiki/Introduction_to_Algorithms\n     Settled,\n@@ -122,13 +122,13 @@ struct Event<N> {\n /// A depth-first search that also tracks when all successors of a node have been examined.\n ///\n /// This is based on the DFS described in [Introduction to Algorithms (1st ed.)][CLR], hereby\n-/// referred to as **CLR**. However, we use the terminology in [`NodeStatus`][] above instead of\n+/// referred to as **CLR**. However, we use the terminology in [`NodeStatus`] above instead of\n /// \"discovered\"/\"finished\" or \"white\"/\"grey\"/\"black\". Each node begins the search with no status,\n /// becomes `Visited` when it is first examined by the DFS and is `Settled` when all nodes\n /// reachable from it have been examined. This allows us to differentiate between \"tree\", \"back\"\n /// and \"forward\" edges (see [`TriColorVisitor::node_examined`]).\n ///\n-/// Unlike the pseudocode in [CLR][], this implementation is iterative and does not use timestamps.\n+/// Unlike the pseudocode in [CLR], this implementation is iterative and does not use timestamps.\n /// We accomplish this by storing `Event`s on the stack that result in a (possible) state change\n /// for each node. A `Visited` event signifies that we should examine this node if it has not yet\n /// been `Visited` or `Settled`. When a node is examined for the first time, we mark it as\n@@ -246,7 +246,7 @@ where\n     /// By checking the value of `prior_status`, this visitor can determine whether the edge\n     /// leading to this node was a tree edge (`None`), forward edge (`Some(Settled)`) or back edge\n     /// (`Some(Visited)`). For a full explanation of each edge type, see the \"Depth-first Search\"\n-    /// chapter in [CLR][] or [wikipedia][].\n+    /// chapter in [CLR] or [wikipedia].\n     ///\n     /// If you want to know *both* nodes linked by each edge, you'll need to modify\n     /// `TriColorDepthFirstSearch` to store a `source` node for each `Visited` event."}, {"sha": "7eb6f5cc073df331b1dfd4ff0e9f067b9a25648e", "filename": "src/librustc_mir/dataflow/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -10,7 +10,7 @@\n //! interface, but make `Engine` and `ResultsCursor` the canonical way to perform and inspect a\n //! dataflow analysis. This requires porting the graphviz debugging logic to this module, deciding\n //! on a way to handle the `before` methods in `BitDenotation` and creating an adapter so that\n-//! gen-kill problems can still be evaluated efficiently. See the discussion in [#64566][] for more\n+//! gen-kill problems can still be evaluated efficiently. See the discussion in [#64566] for more\n //! information.\n //!\n //! [gk]: https://en.wikipedia.org/wiki/Data-flow_analysis#Bit_vector_problems"}, {"sha": "e70204d6839fc99113bb3cdde825c745dcfb71d1", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -286,7 +286,7 @@ mod sync;\n \n mod cache_aligned;\n \n-/// The receiving half of Rust's [`channel`][] (or [`sync_channel`]) type.\n+/// The receiving half of Rust's [`channel`] (or [`sync_channel`]) type.\n /// This half can only be owned by one thread.\n ///\n /// Messages sent to the channel can be retrieved using [`recv`].\n@@ -1108,7 +1108,7 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// sent to the corresponding [`Sender`] (or [`SyncSender`]), then this\n     /// receiver will wake up and return that message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n@@ -1194,7 +1194,7 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// sent to the corresponding [`Sender`] (or [`SyncSender`]), then this\n     /// receiver will wake up and return that message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n@@ -1295,7 +1295,7 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// sent to the corresponding [`Sender`] (or [`SyncSender`]), then this\n     /// receiver will wake up and return that message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while"}, {"sha": "fdd29af8581856c50b70499514247835822287f5", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc1e6c2513fc1cab53454451498e51f71662d/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=48efc1e6c2513fc1cab53454451498e51f71662d", "patch": "@@ -25,7 +25,7 @@ use crate::sys_common::rwlock as sys;\n /// The type parameter `T` represents the data that this lock protects. It is\n /// required that `T` satisfies [`Send`] to be shared across threads and\n /// [`Sync`] to allow concurrent access through readers. The RAII guards\n-/// returned from the locking methods implement [`Deref`][] (and [`DerefMut`]\n+/// returned from the locking methods implement [`Deref`] (and [`DerefMut`]\n /// for the `write` methods) to allow access to the content of the lock.\n ///\n /// # Poisoning"}]}