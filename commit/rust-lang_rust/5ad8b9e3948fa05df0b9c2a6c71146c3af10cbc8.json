{"sha": "5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDhiOWUzOTQ4ZmEwNWRmMGI5YzJhNmM3MTE0NmMzYWYxMGNiYzg=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-14T13:22:43Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-14T16:45:08Z"}, "message": "update async-await send/sync test", "tree": {"sha": "44f04016d4f2d588c04fc073ff638149b3d11067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f04016d4f2d588c04fc073ff638149b3d11067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "html_url": "https://github.com/rust-lang/rust/commit/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97560116785f2dbb488e66ab34aeee981ec2912", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97560116785f2dbb488e66ab34aeee981ec2912", "html_url": "https://github.com/rust-lang/rust/commit/b97560116785f2dbb488e66ab34aeee981ec2912"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "aaad0be9a048c8e08c328487ac373d14d03ff978", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "patch": "@@ -2456,7 +2456,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let target_span = tables\n             .generator_interior_types\n             .iter()\n-            .zip(tables.generator_interior_exprs.iter())\n             .find(|(ty::GeneratorInteriorTypeCause { ty, .. }, _)| {\n                 // Careful: the regions for types that appear in the\n                 // generator interior are not generally known, so we\n@@ -2578,37 +2577,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n \n             span.push_span_label(original_span, message);\n-            err.set_span(span.clone());\n+            err.set_span(span);\n \n             format!(\"is not {}\", trait_name)\n         } else {\n             format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n         };\n \n         // Look at the last interior type to get a span for the `.await`.\n-        let await_span = tables.generator_interior_types.iter().map(|i| i.span).last().unwrap();\n+        let await_span =\n+            tables.generator_interior_types.iter().map(|(i, _)| i.span).last().unwrap();\n         let mut span = MultiSpan::from_span(await_span);\n         span.push_span_label(\n             await_span,\n             format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n         );\n \n-        if let Some(expr_id) = expr {\n-            let expr = hir.expect_expr(expr_id);\n-            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n-            let parent = hir.get_parent_node(expr_id);\n-            if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n-                let method_span = hir.span(parent);\n-                if tables.is_method_call(e) && is_ref {\n-                    err.span_help(\n-                        method_span,\n-                        \"consider moving this method call into a `let` \\\n-                        binding to create a shorter lived borrow\"\n-                    );\n-                }\n-            }\n-        }\n-\n         span.push_span_label(target_span, format!(\"has type `{}`\", target_ty));\n \n         // If available, use the scope span to annotate the drop location.\n@@ -2627,6 +2611,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ),\n         );\n \n+        if let Some(expr_id) = expr {\n+            let expr = hir.expect_expr(expr_id);\n+            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+            let parent = hir.get_parent_node(expr_id);\n+            if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n+                let method_span = hir.span(parent);\n+                if tables.is_method_call(e) && is_ref {\n+                    err.span_help(\n+                        method_span,\n+                        \"consider moving this method call into a `let` \\\n+                        binding to create a shorter lived borrow\",\n+                    );\n+                }\n+            }\n+        }\n+\n         // Add a note for the item obligation that remains - normally a note pointing to the\n         // bound that introduced the obligation (e.g. `T: Send`).\n         debug!(\"note_obligation_cause_for_async_await: next_code={:?}\", next_code);"}, {"sha": "db034d1618cea6cb35659e1792760e3418c47e5a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "patch": "@@ -85,7 +85,7 @@ impl Adjustment<'tcx> {\n     pub fn is_region_borrow(&self) -> bool {\n         match self.kind {\n             Adjust::Borrow(AutoBorrow::Ref(..)) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n }"}, {"sha": "d64e049c47b549c9a46bc89aab883c7cdf041620", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "patch": "@@ -436,11 +436,9 @@ pub struct TypeckTables<'tcx> {\n     /// entire variable.\n     pub upvar_list: ty::UpvarListMap,\n \n-    /// Stores the type, span and optional scope span of all types\n+    /// Stores the type, expression, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n-    pub generator_interior_types: Vec<GeneratorInteriorTypeCause<'tcx>>,\n-\n-    pub generator_interior_exprs: Vec<Option<hir::HirId>>,\n+    pub generator_interior_types: Vec<(GeneratorInteriorTypeCause<'tcx>, Option<hir::HirId>)>,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -467,7 +465,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),\n-            generator_interior_exprs: Default::default(),\n         }\n     }\n \n@@ -731,7 +728,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             ref concrete_opaque_types,\n             ref upvar_list,\n             ref generator_interior_types,\n-            ref generator_interior_exprs,\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -770,7 +766,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             concrete_opaque_types.hash_stable(hcx, hasher);\n             upvar_list.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);\n-            generator_interior_exprs.hash_stable(hcx, hasher);\n         })\n     }\n }"}, {"sha": "7185de76fcbb6184324fe01f3325c72a391b0fb2", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "patch": "@@ -18,6 +18,7 @@ use rustc_span::Span;\n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     types: FxHashMap<ty::GeneratorInteriorTypeCause<'tcx>, usize>,\n+    exprs: Vec<Option<hir::HirId>>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n     kind: hir::GeneratorKind,\n@@ -99,6 +100,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         scope_span,\n                     })\n                     .or_insert(entries);\n+                self.exprs.push(expr.map(|e| e.hir_id));\n             }\n         } else {\n             debug!(\n@@ -136,6 +138,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         expr_count: 0,\n         kind,\n         prev_unresolved_span: None,\n+        exprs: vec![],\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n@@ -170,7 +173,8 @@ pub fn resolve_interior<'a, 'tcx>(\n     });\n \n     // Store the generator types and spans into the tables for this generator.\n-    let interior_types = types.iter().map(|t| t.0.clone()).collect::<Vec<_>>();\n+    let interior_types =\n+        types.iter().zip(visitor.exprs).map(|(t, e)| (t.0.clone(), e)).collect::<Vec<_>>();\n     visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n \n     // Extract type components"}, {"sha": "77d0885c38d58a75c4624102d11dd7d638573a35", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "patch": "@@ -16,6 +16,11 @@ LL |                 let _x = get().await;\n ...\n LL |     }\n    |     - `client` is later dropped here\n+help: consider moving this method call into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-64130-4-async-move.rs:19:15\n+   |\n+LL |         match client.status() {\n+   |               ^^^^^^^^^^^^^^^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}]}