{"sha": "49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "node_id": "C_kwDOAAsO6NoAKDQ5ZjEwOTJmMTRkN2IyZjA5NmZhMzJkM2UxZDQ1Yzg4NDRhMjJlZTI", "commit": {"author": {"name": "ponyii", "email": "ponyii@protonmail.com", "date": "2023-05-10T18:27:05Z"}, "committer": {"name": "ponyii", "email": "ponyii@protonmail.com", "date": "2023-05-10T18:27:05Z"}, "message": "`add_missing_impl_members` and `add_missing_default_members` break indentation no longer", "tree": {"sha": "b8ae1cb9a9d2bb751386593ec54073d7e1074fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ae1cb9a9d2bb751386593ec54073d7e1074fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "html_url": "https://github.com/rust-lang/rust/commit/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2/comments", "author": {"login": "ponyii", "id": 25033620, "node_id": "MDQ6VXNlcjI1MDMzNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/25033620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ponyii", "html_url": "https://github.com/ponyii", "followers_url": "https://api.github.com/users/ponyii/followers", "following_url": "https://api.github.com/users/ponyii/following{/other_user}", "gists_url": "https://api.github.com/users/ponyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ponyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ponyii/subscriptions", "organizations_url": "https://api.github.com/users/ponyii/orgs", "repos_url": "https://api.github.com/users/ponyii/repos", "events_url": "https://api.github.com/users/ponyii/events{/privacy}", "received_events_url": "https://api.github.com/users/ponyii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ponyii", "id": 25033620, "node_id": "MDQ6VXNlcjI1MDMzNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/25033620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ponyii", "html_url": "https://github.com/ponyii", "followers_url": "https://api.github.com/users/ponyii/followers", "following_url": "https://api.github.com/users/ponyii/following{/other_user}", "gists_url": "https://api.github.com/users/ponyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ponyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ponyii/subscriptions", "organizations_url": "https://api.github.com/users/ponyii/orgs", "repos_url": "https://api.github.com/users/ponyii/repos", "events_url": "https://api.github.com/users/ponyii/events{/privacy}", "received_events_url": "https://api.github.com/users/ponyii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "html_url": "https://github.com/rust-lang/rust/commit/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c"}], "stats": {"total": 142, "additions": 105, "deletions": 37}, "files": [{"sha": "89e03a98d6f866ddbb5b2a4f2ac2eb057cd8ce48", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 98, "deletions": 34, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "patch": "@@ -1346,8 +1346,8 @@ struct SomeStruct {\n }\n impl PartialEq for SomeStruct {\n     $0fn ne(&self, other: &Self) -> bool {\n-            !self.eq(other)\n-        }\n+        !self.eq(other)\n+    }\n }\n \"#,\n         );\n@@ -1520,48 +1520,47 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_add_missing_impl_members_indentation() {\n-        // few trait members, no braces\n+    fn test_add_missing_preserves_indentation() {\n+        // in different modules\n         check_assist(\n             add_missing_impl_members,\n             r#\"\n mod m {\n-    trait Foo { fn foo(&self); }\n-    struct S;\n-    impl Foo for S$0\n-}\"#,\n-            r#\"\n-mod m {\n-    trait Foo { fn foo(&self); }\n-    struct S;\n-    impl Foo for S {\n-        fn foo(&self) {\n-            ${0:todo!()}\n-        }\n-    }\n-}\"#,\n+    pub trait Foo {\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n         );\n-        // few trait members, empty impl def.\n-        check_assist(\n-            add_missing_impl_members,\n-            r#\"\n-mod m {\n-    trait Foo { fn foo(&self); }\n-    struct S;\n-    impl Foo for S { $0 }\n-}\"#,\n+\n+        fn foo(&self);\n+    }\n+}\n+struct S;\n+impl m::Foo for S { $0 }\"#,\n             r#\"\n mod m {\n-    trait Foo { fn foo(&self); }\n-    struct S;\n-    impl Foo for S {\n-        fn foo(&self) {\n-            ${0:todo!()}\n-        }\n+    pub trait Foo {\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self);\n+    }\n+}\n+struct S;\n+impl m::Foo for S {\n+    $0const CONST_MULTILINE: (\n+        i32,\n+        i32\n+    );\n+\n+    fn foo(&self) {\n+        todo!()\n     }\n }\"#,\n         );\n-        // todo - in mod and outside\n+        // in the same module\n         check_assist(\n             add_missing_impl_members,\n             r#\"\n@@ -1571,6 +1570,10 @@ mod m {\n \n         const CONST: usize = 42;\n         const CONST_2: i32;\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n \n         fn foo(&self);\n         fn bar(&self);\n@@ -1591,6 +1594,10 @@ mod m {\n \n         const CONST: usize = 42;\n         const CONST_2: i32;\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n \n         fn foo(&self);\n         fn bar(&self);\n@@ -1606,6 +1613,11 @@ mod m {\n \n         const CONST_2: i32;\n \n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n         fn foo(&self) {\n             todo!()\n         }\n@@ -1618,4 +1630,56 @@ mod m {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_add_default_preserves_indentation() {\n+        check_assist(\n+            add_missing_default_members,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: = (\n+            i32,\n+            i32,\n+        ) = (3, 14);\n+\n+        fn valid(some: u32) -> bool { false }\n+        fn foo(some: u32) -> bool;\n+    }\n+}\n+struct S;\n+impl m::Foo for S { $0 }\"#,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: = (\n+            i32,\n+            i32,\n+        ) = (3, 14);\n+\n+        fn valid(some: u32) -> bool { false }\n+        fn foo(some: u32) -> bool;\n+    }\n+}\n+struct S;\n+impl m::Foo for S {\n+    $0const CONST: usize = 42;\n+\n+    const CONST_MULTILINE: = (\n+        i32,\n+        i32,\n+    ) = (3, 14);\n+\n+    fn valid(some: u32) -> bool { false }\n+}\"#,\n+        )\n+    }\n }"}, {"sha": "8f7ea26306c427d0b4d802dbcf78a2b29dc6236f", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        edit_in_place::{AttrsOwnerEdit, Removable},\n+        edit_in_place::{AttrsOwnerEdit, Indent, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n     ted, AstNode, AstToken, Direction, SourceFile,\n@@ -139,9 +139,11 @@ pub fn add_trait_assoc_items_to_impl(\n \n     let transform = PathTransform::trait_impl(&target_scope, &source_scope, trait_, impl_.clone());\n \n+    let new_indent_level = IndentLevel::from_node(impl_.syntax()) + 1;\n     let items = items.into_iter().map(|assoc_item| {\n         transform.apply(assoc_item.syntax());\n         assoc_item.remove_attrs_and_docs();\n+        assoc_item.reindent_to(new_indent_level);\n         assoc_item\n     });\n \n@@ -153,8 +155,10 @@ pub fn add_trait_assoc_items_to_impl(\n         first_item.get_or_insert_with(|| item.clone());\n         match &item {\n             ast::AssocItem::Fn(fn_) if fn_.body().is_none() => {\n-                let body = make::block_expr(None, Some(make::ext::expr_todo()))\n-                    .indent(IndentLevel::from_node(impl_.syntax()) + 1);\n+                let body = AstNodeEdit::indent(\n+                    &make::block_expr(None, Some(make::ext::expr_todo())),\n+                    new_indent_level,\n+                );\n                 ted::replace(fn_.get_or_create_body().syntax(), body.clone_for_update().syntax())\n             }\n             ast::AssocItem::TypeAlias(type_alias) => {"}]}