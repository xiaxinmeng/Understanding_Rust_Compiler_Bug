{"sha": "d1f117df0fd71d443742a455532e5f053f24a741", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZjExN2RmMGZkNzFkNDQzNzQyYTQ1NTUzMmU1ZjA1M2YyNGE3NDE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-10T10:11:36Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T12:40:54Z"}, "message": "rustc_mir: allow promotion of promotable temps indexed at runtime.", "tree": {"sha": "dfe56fa208fde4bf95864fa9286e710ad31db66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfe56fa208fde4bf95864fa9286e710ad31db66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1f117df0fd71d443742a455532e5f053f24a741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f117df0fd71d443742a455532e5f053f24a741", "html_url": "https://github.com/rust-lang/rust/commit/d1f117df0fd71d443742a455532e5f053f24a741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1f117df0fd71d443742a455532e5f053f24a741/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "html_url": "https://github.com/rust-lang/rust/commit/22275f46b2b6a9efe50c5a4485ed766fce3ac10a"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "fd4ba1d75625a0787bd097f28f9d57fa31a818d5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1f117df0fd71d443742a455532e5f053f24a741/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f117df0fd71d443742a455532e5f053f24a741/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d1f117df0fd71d443742a455532e5f053f24a741", "patch": "@@ -229,12 +229,12 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     /// Check if a Local with the current qualifications is promotable.\n-    fn can_promote(&mut self) -> bool {\n+    fn can_promote(&self, qualif: Qualif) -> bool {\n         // References to statics are allowed, but only in other statics.\n         if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-            (self.qualif - Qualif::STATIC_REF).is_empty()\n+            (qualif - Qualif::STATIC_REF).is_empty()\n         } else {\n-            self.qualif.is_empty()\n+            qualif.is_empty()\n         }\n     }\n \n@@ -746,10 +746,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 if forbidden_mut {\n                     self.add(Qualif::NOT_CONST);\n-                } else if self.can_promote() {\n+                } else {\n                     // We might have a candidate for promotion.\n                     let candidate = Candidate::Ref(location);\n-                    // We can only promote interior borrows of non-drop temps.\n+                    // We can only promote interior borrows of promotable temps.\n                     let mut place = place;\n                     while let Place::Projection(ref proj) = *place {\n                         if proj.elem == ProjectionElem::Deref {\n@@ -760,7 +760,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if let Place::Local(local) = *place {\n                         if self.mir.local_kind(local) == LocalKind::Temp {\n                             if let Some(qualif) = self.temp_qualif[local] {\n-                                if !qualif.intersects(Qualif::NEEDS_DROP) {\n+                                // `forbidden_mut` is false, so we can safely ignore\n+                                // `MUTABLE_INTERIOR` from the local's qualifications.\n+                                // This allows borrowing fields which don't have\n+                                // `MUTABLE_INTERIOR`, from a type that does, e.g.:\n+                                // `let _: &'static _ = &(Cell::new(1), 2).1;`\n+                                if self.can_promote(qualif - Qualif::MUTABLE_INTERIOR) {\n                                     self.promotion_candidates.push(candidate);\n                                 }\n                             }\n@@ -920,7 +925,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     }\n                     let candidate = Candidate::Argument { bb, index: i };\n                     if is_shuffle && i == 2 {\n-                        if this.can_promote() {\n+                        if this.can_promote(this.qualif) {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,\n@@ -936,7 +941,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     if !constant_arguments.contains(&i) {\n                         return\n                     }\n-                    if this.can_promote() {\n+                    if this.can_promote(this.qualif) {\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,"}, {"sha": "c2a40399efe3d5718f5e3604a13a04ad56d724fb", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=d1f117df0fd71d443742a455532e5f053f24a741", "patch": "@@ -88,7 +88,8 @@ fn main() {\n //  }\n //  bb9: { // binding1 and guard\n //      StorageLive(_5);\n-//      _5 = &((_2 as Some).0: i32);\n+//      _11 = promoted[0];\n+//      _5 = &(((*_11) as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = const guard() -> [return: bb10, unwind: bb1];\n //  }"}, {"sha": "17e1de95dd30e493c20caec3759408460d741b27", "filename": "src/test/run-pass/issue-49955-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Frun-pass%2Fissue-49955-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Frun-pass%2Fissue-49955-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49955-2.rs?ref=d1f117df0fd71d443742a455532e5f053f24a741", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir\n+\n+use std::cell::Cell;\n+\n+#[inline(never)]\n+fn tuple_field() -> &'static u32 {\n+    // This test is MIR-borrowck-only because the old borrowck\n+    // doesn't agree that borrows of \"frozen\" (i.e. without any\n+    // interior mutability) fields of non-frozen temporaries,\n+    // should be promoted, while MIR promotion does promote them.\n+    &(Cell::new(5), 42).1\n+}\n+\n+fn main() {\n+    assert_eq!(tuple_field().to_string(), \"42\");\n+}"}, {"sha": "57a1264aaee8033f6f504e52c4ee98c1389794d2", "filename": "src/test/run-pass/issue-49955.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Frun-pass%2Fissue-49955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f117df0fd71d443742a455532e5f053f24a741/src%2Ftest%2Frun-pass%2Fissue-49955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49955.rs?ref=d1f117df0fd71d443742a455532e5f053f24a741", "patch": "@@ -26,5 +26,5 @@ fn tuple_field() -> &'static u32 {\n \n fn main() {\n     assert_eq!(tuple_field().to_string(), \"42\");\n-    // assert_eq!(array(0).to_string(), \"1\");\n+    assert_eq!(array(0).to_string(), \"1\");\n }"}]}