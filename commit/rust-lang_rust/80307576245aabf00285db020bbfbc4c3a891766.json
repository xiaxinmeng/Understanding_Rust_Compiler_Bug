{"sha": "80307576245aabf00285db020bbfbc4c3a891766", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMzA3NTc2MjQ1YWFiZjAwMjg1ZGIwMjBiYmZiYzRjM2E4OTE3NjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-28T02:21:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-28T02:21:51Z"}, "message": "Switch machine-type lexemes to use suffixes. Remove support for foo(bar) as a cast notation. Closes #129.", "tree": {"sha": "7e408956ca3e895844dd30a1afddf64d83157da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e408956ca3e895844dd30a1afddf64d83157da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80307576245aabf00285db020bbfbc4c3a891766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80307576245aabf00285db020bbfbc4c3a891766", "html_url": "https://github.com/rust-lang/rust/commit/80307576245aabf00285db020bbfbc4c3a891766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80307576245aabf00285db020bbfbc4c3a891766/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6662aeb779d3e44886c466378578ebe1979de15a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6662aeb779d3e44886c466378578ebe1979de15a", "html_url": "https://github.com/rust-lang/rust/commit/6662aeb779d3e44886c466378578ebe1979de15a"}], "stats": {"total": 363, "additions": 156, "deletions": 207}, "files": [{"sha": "c1e7ce419594fc13701bdca161247dc902101192", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -416,6 +416,8 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       generic-recursive-tag.rs \\\n                       generic-tag-alt.rs \\\n                       generic-tag.rs \\\n+                      i32-sub.rs \\\n+                      i8-incr.rs \\\n                       import.rs \\\n                       inner-module.rs \\\n                       iter-range.rs \\"}, {"sha": "9af7ee0b7a7136004c7271da28a4064aee4ac5de", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -50,6 +50,7 @@ let (sess:Session.sess) =\n     Session.sess_log_obj = false;\n     Session.sess_log_lib = false;\n     Session.sess_log_out = stdout;\n+    Session.sess_log_err = stderr;\n     Session.sess_trace_block = false;\n     Session.sess_trace_drop = false;\n     Session.sess_trace_tag = false;"}, {"sha": "d9e57b02ac27fc7a484a7b3f3bca2dcfd0d2e402", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -32,6 +32,7 @@ type sess =\n   mutable sess_log_obj: bool;\n   mutable sess_log_lib: bool;\n   mutable sess_log_out: out_channel;\n+  mutable sess_log_err: out_channel;\n   mutable sess_trace_block: bool;\n   mutable sess_trace_drop: bool;\n   mutable sess_trace_tag: bool;\n@@ -79,7 +80,7 @@ let log name flag chan =\n \n let fail sess =\n   sess.sess_failed <- true;\n-  Printf.fprintf sess.sess_log_out\n+  Printf.fprintf sess.sess_log_err\n ;;\n \n "}, {"sha": "651b1e653d7f615eda6d315f39e579820255f12e", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -333,10 +333,11 @@ and expr =\n and lit =\n   | LIT_nil\n   | LIT_bool of bool\n-  | LIT_mach of (ty_mach * int64 * string)\n-  | LIT_int of (int64 * string)\n-  | LIT_uint of (int64 * string)\n+  | LIT_mach_int of (ty_mach * int64)\n+  | LIT_int of int64\n+  | LIT_uint of int64\n   | LIT_char of int\n+      (* FIXME: No support for LIT_mach_float or LIT_float yet. *)\n \n \n and lval_component =\n@@ -835,13 +836,15 @@ and fmt_lit (ff:Format.formatter) (l:lit) : unit =\n   | LIT_nil -> fmt ff \"()\"\n   | LIT_bool true -> fmt ff \"true\"\n   | LIT_bool false -> fmt ff \"false\"\n-  | LIT_mach (m, _, s) ->\n+  | LIT_mach_int (m, i) ->\n       begin\n+        fmt ff \"%Ld\" i;\n         fmt_mach ff m;\n-        fmt ff \"(%s)\" s\n       end\n-  | LIT_int (_,s) -> fmt ff \"%s\" s\n-  | LIT_uint (_,s) -> fmt ff \"%s\" s\n+  | LIT_int i -> fmt ff \"%Ld\" i\n+  | LIT_uint i ->\n+      fmt ff \"%Ld\" i;\n+      fmt ff \"u\"\n   | LIT_char c -> fmt ff \"'%s'\" (Common.escaped_char c)\n \n and fmt_domain (ff:Format.formatter) (d:domain) : unit ="}, {"sha": "fc849b283e9f5e6aed5a5c78c9537cbf234c7a9b", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -527,7 +527,9 @@ and eval_pexp (env:env) (exp:Pexp.pexp) : pval =\n     | Pexp.PEXP_lit (Ast.LIT_bool b) ->\n         PVAL_bool b\n \n-    | Pexp.PEXP_lit (Ast.LIT_int (i, _)) ->\n+    | Pexp.PEXP_lit (Ast.LIT_int i)\n+    | Pexp.PEXP_lit (Ast.LIT_uint i)\n+    | Pexp.PEXP_lit (Ast.LIT_mach_int (_, i)) ->\n         PVAL_num i\n \n     | Pexp.PEXP_str s ->"}, {"sha": "bb1d881e617f8f7358c6988b15508f5c5cfa7fa8", "filename": "src/boot/fe/lexer.mll", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Flexer.mll", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Flexer.mll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Flexer.mll?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -22,7 +22,24 @@\n               Lexing.pos_bol = p.Lexing.pos_cnum }\n   ;;\n \n+  let mach_suf_table = Hashtbl.create 0\n+  ;;\n+  let _ =\n+    List.iter (fun (suf, ty) -> Common.htab_put mach_suf_table suf ty)\n+      [ (\"u8\", Common.TY_u8);\n+        (\"i8\", Common.TY_i8);\n+        (\"u16\", Common.TY_u16);\n+        (\"i16\", Common.TY_i16);\n+        (\"u32\", Common.TY_u32);\n+        (\"i32\", Common.TY_i32);\n+        (\"u64\", Common.TY_u64);\n+        (\"i64\", Common.TY_i64);\n+        (\"f32\", Common.TY_f32);\n+        (\"f64\", Common.TY_f64); ]\n+  ;;\n+\n   let keyword_table = Hashtbl.create 100\n+  ;;\n   let _ =\n     List.iter (fun (kwd, tok) -> Common.htab_put keyword_table kwd tok)\n               [ (\"mod\", MOD);\n@@ -129,6 +146,9 @@ let dec = decdig ['0'-'9' '_']*\n let exp = ['e''E']['-''+']? dec\n let flo = (dec '.' dec (exp?)) | (dec exp)\n \n+let mach_float_suf = \"f32\"|\"f64\"\n+let mach_int_suf = ['u''i']('8'|\"16\"|\"32\"|\"64\")\n+\n let ws = [ ' ' '\\t' '\\r' ]\n \n let id = ['a'-'z' 'A'-'Z' '_']['a'-'z' 'A'-'Z' '0'-'9' '_']*\n@@ -197,19 +217,29 @@ rule token = parse\n                                { try\n                                      Hashtbl.find keyword_table i\n                                  with\n-                                     Not_found -> IDENT (i)\n-                                            }\n+                                     Not_found -> IDENT (i)        }\n+\n+| (bin|hex|dec) as n           { LIT_INT (Int64.of_string n)       }\n+| ((bin|hex|dec) as n) 'u'     { LIT_UINT (Int64.of_string n)      }\n+| ((bin|hex|dec) as n)\n+  (mach_int_suf as s)          { try\n+                                   let tm =\n+                                     Hashtbl.find mach_suf_table s\n+                                   in\n+                                     LIT_MACH_INT\n+                                       (tm, Int64.of_string n)\n+                                 with\n+                                     Not_found ->\n+                                       fail lexbuf\n+                                         \"bad mach-int suffix\"     }\n \n-| bin as n                      { LIT_INT (Int64.of_string n, n)    }\n-| hex as n                      { LIT_INT (Int64.of_string n, n)    }\n-| dec as n                      { LIT_INT (Int64.of_string n, n)    }\n-| flo as n                      { LIT_FLO n                         }\n+| flo as n                     { LIT_FLOAT (float_of_string n)     }\n \n-| '\\''                          { char lexbuf                       }\n-| '\"'                           { let buf = Buffer.create 32 in\n-                                    str buf lexbuf                  }\n+| '\\''                         { char lexbuf                       }\n+| '\"'                          { let buf = Buffer.create 32 in\n+                                   str buf lexbuf                  }\n \n-| eof                           { EOF        }\n+| eof                          { EOF        }\n \n and str buf = parse\n     _ as ch"}, {"sha": "1532a47a61289e5e064e6a339746456162b269a0", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 3, "deletions": 101, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -466,7 +466,9 @@ and parse_rec_body (ps:pstate) : pexp' = (*((Ast.ident * pexp) array) =*)\n \n and parse_lit (ps:pstate) : Ast.lit =\n   match peek ps with\n-      LIT_INT (n,s) -> (bump ps; Ast.LIT_int (n,s))\n+      LIT_INT i -> (bump ps; Ast.LIT_int i)\n+    | LIT_UINT i -> (bump ps; Ast.LIT_uint i)\n+    | LIT_MACH_INT (tm, i) -> (bump ps; Ast.LIT_mach_int (tm, i))\n     | LIT_CHAR c -> (bump ps; Ast.LIT_char c)\n     | LIT_BOOL b -> (bump ps; Ast.LIT_bool b)\n     | _ -> raise (unexpected ps)\n@@ -602,106 +604,6 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n         let bpos = lexpos ps in\n           span ps apos bpos (PEXP_lval (PLVAL_ext_deref inner))\n \n-    | (INT | UINT | CHAR | BOOL) as tok ->\n-        begin\n-          bump ps;\n-          expect ps LPAREN;\n-          match peek ps with\n-              (LIT_INT _ | LIT_CHAR _ | LIT_BOOL _) as tok2 ->\n-                bump ps;\n-                expect ps RPAREN;\n-                let i = match tok2 with\n-                    LIT_INT i -> i\n-                  | LIT_CHAR c -> (Int64.of_int c,\n-                                   Common.escaped_char c)\n-                  | LIT_BOOL b -> if b then (1L, \"1\") else (0L, \"0\")\n-                  | _ -> bug () \"expected int/char literal\"\n-                in\n-                let bpos = lexpos ps in\n-                  span ps apos bpos\n-                    (PEXP_lit\n-                       (match tok with\n-                            INT -> Ast.LIT_int i\n-                          | UINT -> Ast.LIT_uint i\n-                          | CHAR ->\n-                              Ast.LIT_char\n-                                (Int64.to_int (fst i))\n-                          | BOOL -> Ast.LIT_bool (fst i <> 0L)\n-                          | _ -> bug () \"expected int/uint/char/bool token\"))\n-\n-          | _ ->\n-              let pexp = parse_pexp ps in\n-                expect ps RPAREN;\n-                let bpos = lexpos ps in\n-                let t =\n-                  match tok with\n-                      INT -> Ast.TY_int\n-                    | UINT -> Ast.TY_uint\n-                    | CHAR -> Ast.TY_char\n-                    | BOOL -> Ast.TY_bool\n-                    | _ -> bug () \"expected int/uint/char/bool token\"\n-                in\n-                let t = span ps apos bpos t in\n-                  span ps apos bpos\n-                    (PEXP_unop ((Ast.UNOP_cast t), pexp))\n-        end\n-\n-    | MACH m ->\n-        let literal (num, str) =\n-          let _ = bump ps in\n-          let _ = expect ps RPAREN in\n-          let bpos = lexpos ps in\n-          let check_range (lo:int64) (hi:int64) : unit =\n-            if (num < lo) or (num > hi)\n-            then raise (err (Printf.sprintf\n-                               \"integral literal %Ld out of range [%Ld,%Ld]\"\n-                               num lo hi) ps)\n-            else ()\n-          in\n-            begin\n-              match m with\n-                  TY_u8 -> check_range 0L 0xffL\n-                | TY_u16 -> check_range 0L 0xffffL\n-                | TY_u32 -> check_range 0L 0xffffffffL\n-                    (* | TY_u64 -> ... *)\n-                | TY_i8 -> check_range (-128L) 127L\n-                | TY_i16 -> check_range (-32768L) 32767L\n-                | TY_i32 -> check_range (-2147483648L) 2147483647L\n-                    (*\n-                      | TY_i64 -> ...\n-                      | TY_f32 -> ...\n-                      | TY_f64 -> ...\n-                    *)\n-                | _ -> ()\n-            end;\n-            span ps apos bpos\n-              (PEXP_lit\n-                 (Ast.LIT_mach\n-                    (m, num, str)))\n-\n-        in\n-          begin\n-            bump ps;\n-            expect ps LPAREN;\n-            match peek ps with\n-                LIT_INT (n,s) -> literal (n,s)\n-              | MINUS ->\n-                  begin\n-                    bump ps;\n-                    match peek ps with\n-                        LIT_INT (n,s) ->\n-                          literal (Int64.neg n, \"-\" ^ s)\n-                      | _ -> raise (unexpected ps)\n-                  end\n-              | _ ->\n-                  let pexp = parse_pexp ps in\n-                    expect ps RPAREN;\n-                    let bpos = lexpos ps in\n-                    let t = span ps apos bpos (Ast.TY_mach m) in\n-                      span ps apos bpos\n-                        (PEXP_unop ((Ast.UNOP_cast t), pexp))\n-          end\n-\n     | POUND ->\n         bump ps;\n         let name = parse_name ps in"}, {"sha": "64aef2a421c1a689bfc7ffb4b5b81916f499adcc", "filename": "src/boot/fe/token.ml", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Ftoken.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Ffe%2Ftoken.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ftoken.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -103,8 +103,11 @@ type token =\n   | JOIN\n \n   (* Literals *)\n-  | LIT_INT       of (int64 * string)\n-  | LIT_FLO       of string\n+  | LIT_INT       of int64\n+  | LIT_UINT      of int64\n+  | LIT_FLOAT     of float\n+  | LIT_MACH_INT  of Common.ty_mach * int64\n+  | LIT_MACH_FLOAT of Common.ty_mach * float\n   | LIT_STR       of string\n   | LIT_CHAR      of int\n   | LIT_BOOL      of bool\n@@ -253,8 +256,13 @@ let rec string_of_tok t =\n     | JOIN       -> \"join\"\n \n     (* Literals *)\n-    | LIT_INT (_,s)  -> s\n-    | LIT_FLO n  -> n\n+    | LIT_INT i  -> Int64.to_string i\n+    | LIT_UINT i -> (Int64.to_string i) ^ \"u\"\n+    | LIT_FLOAT s  -> string_of_float s\n+    | LIT_MACH_INT (tm, i)  ->\n+        (Int64.to_string i) ^ (Common.string_of_ty_mach tm)\n+    | LIT_MACH_FLOAT (tm, f)  ->\n+        (string_of_float f) ^ (Common.string_of_ty_mach tm)\n     | LIT_STR s  -> (\"\\\"\" ^ (String.escaped s) ^ \"\\\"\")\n     | LIT_CHAR c -> (\"'\" ^ (Common.escaped_char c) ^ \"'\")\n     | LIT_BOOL b -> if b then \"true\" else \"false\""}, {"sha": "ee1927257e8bee8d13937e7645c2d1a8960f9092", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -746,12 +746,12 @@ let trans_crate\n             Ast.LIT_nil -> llnil\n           | Ast.LIT_bool value ->\n             Llvm.const_int (Llvm.i1_type llctx) (if value then 1 else 0)\n-          | Ast.LIT_mach (mty, value, _) ->\n+          | Ast.LIT_mach_int (mty, value) ->\n             let llty = trans_mach_ty mty in\n             Llvm.const_of_int64 llty value (mach_is_signed mty)\n-          | Ast.LIT_int (value, _) ->\n+          | Ast.LIT_int value ->\n             Llvm.const_of_int64 (Llvm.i32_type llctx) value true\n-          | Ast.LIT_uint (value, _) ->\n+          | Ast.LIT_uint value ->\n             Llvm.const_of_int64 (Llvm.i32_type llctx) value false\n           | Ast.LIT_char ch ->\n             Llvm.const_int (Llvm.i32_type llctx) ch"}, {"sha": "16331e3611bea1d5bd8ba8f019594a145eb0585f", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1204,7 +1204,7 @@ let rec atom_type (cx:ctxt) (at:Ast.atom) : Ast.ty =\n     | Ast.ATOM_literal {node=(Ast.LIT_bool _); id=_} -> Ast.TY_bool\n     | Ast.ATOM_literal {node=(Ast.LIT_char _); id=_} -> Ast.TY_char\n     | Ast.ATOM_literal {node=(Ast.LIT_nil); id=_} -> Ast.TY_nil\n-    | Ast.ATOM_literal {node=(Ast.LIT_mach (m,_,_)); id=_} -> Ast.TY_mach m\n+    | Ast.ATOM_literal {node=(Ast.LIT_mach_int (m,_)); id=_} -> Ast.TY_mach m\n     | Ast.ATOM_lval lv -> lval_ty cx lv\n ;;\n "}, {"sha": "55ccadf77ce0b28e273988d4dadc9baa51bea7e1", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1268,9 +1268,9 @@ let trans_visitor\n       | Ast.LIT_bool false -> imm_false\n       | Ast.LIT_bool true -> imm_true\n       | Ast.LIT_char c -> imm_of_ty (Int64.of_int c) TY_u32\n-      | Ast.LIT_int (i, _) -> simm i\n-      | Ast.LIT_uint (i, _) -> imm i\n-      | Ast.LIT_mach (m, n, _) -> imm_of_ty n m\n+      | Ast.LIT_int i -> simm i\n+      | Ast.LIT_uint i -> imm i\n+      | Ast.LIT_mach_int (m, n) -> imm_of_ty n m\n \n   and trans_atom (atom:Ast.atom) : Il.operand =\n     iflog"}, {"sha": "57fdc4574f4e13e61d7354736b123017968e1cc3", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -223,7 +223,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n     match lit with\n         Ast.LIT_nil -> Ast.TY_nil\n       | Ast.LIT_bool _ -> Ast.TY_bool\n-      | Ast.LIT_mach (mty, _, _) -> Ast.TY_mach mty\n+      | Ast.LIT_mach_int (mty, _) -> Ast.TY_mach mty\n       | Ast.LIT_int _ -> Ast.TY_int\n       | Ast.LIT_uint _ -> Ast.TY_uint\n       | Ast.LIT_char _ -> Ast.TY_char"}, {"sha": "87809b3b86bc9db73dd68aa4c25dbfc157cb07f6", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -3,7 +3,7 @@ import std._io.buf_reader;\n iter buffers(buf_reader rdr) -> vec[u8] {\n   while (true) {\n     let vec[u8] v = rdr.read();\n-    if (std._vec.len[u8](v) == uint(0)) {\n+    if (std._vec.len[u8](v) == 0u) {\n       ret;\n     }\n     put v;"}, {"sha": "29144a821a4b1541d385c2a8efbe34d084dfebec", "filename": "src/lib/_int.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_int.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -23,19 +23,19 @@ iter range(mutable int lo, int hi) -> int {\n iter urange(mutable uint lo, uint hi) -> uint {\n   while (lo < hi) {\n     put lo;\n-    lo += uint(1);\n+    lo += 1u;\n   }\n }\n \n fn next_power_of_two(uint n) -> uint {\n   // FIXME change |* uint(4)| below to |* uint(8) / uint(2)| and watch the\n   // world explode.\n-  let uint halfbits = sys.rustrt.size_of[uint]() * uint(4);\n-  let uint tmp = n - uint(1);\n-  let uint shift = uint(1);\n+  let uint halfbits = sys.rustrt.size_of[uint]() * 4u;\n+  let uint tmp = n - 1u;\n+  let uint shift = 1u;\n   while (shift <= halfbits) {\n     tmp |= tmp >> shift;\n-    shift <<= uint(1);\n+    shift <<= 1u;\n   }\n-  ret tmp + uint(1);\n+  ret tmp + 1u;\n }"}, {"sha": "94021aa650af5c1e8d366ec9f0a1129a6ae0083b", "filename": "src/lib/_io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -3,15 +3,15 @@ type buf_reader = unsafe obj {\n };\n \n fn default_bufsz() -> uint {\n-  ret uint(4096);\n+  ret 4096u;\n }\n \n fn new_buf() -> vec[u8] {\n   let vec[u8] v = vec();\n   let uint i = default_bufsz();\n-  while (i > uint(0)) {\n-    i -= uint(1);\n-    v += vec(u8(0));\n+  while (i > 0u) {\n+    i -= 1u;\n+    v += vec(0u8);\n   }\n   // FIXME (issue #93): should be:\n   // ret _vec.alloc[u8](default_bufsz());\n@@ -25,7 +25,7 @@ fn new_buf_reader(str s) -> buf_reader {\n     fn read() -> vec[u8] {\n \n       // Ensure our buf is singly-referenced.\n-      if (_vec.rustrt.refcount[u8](buf) != uint(1)) {\n+      if (_vec.rustrt.refcount[u8](buf) != 1u) {\n         buf = new_buf();\n       }\n "}, {"sha": "7749e30e4679272e175afe04f4814e9dfddcbc4f", "filename": "src/lib/_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_u8.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -14,7 +14,7 @@ fn gt(u8 x, u8 y) -> bool { ret x > y; }\n iter range(mutable u8 lo, u8 hi) -> u8 {\n   while (lo < hi) {\n     put lo;\n-    lo += u8(1);\n+    lo += 1u8;\n   }\n }\n "}, {"sha": "0008295f35fabae9294f0d7ceae6e58d846f0f90", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -21,8 +21,8 @@ type init_op[T] = fn(uint i) -> T;\n fn init_fn[T](&init_op[T] op, uint n_elts) -> vec[T] {\n   let vec[T] v = alloc[T](n_elts);\n   let uint i = n_elts;\n-  while (i > uint(0)) {\n-    i -= uint(1);\n+  while (i > 0u) {\n+    i -= 1u;\n     v += vec(op(i));\n   }\n   ret v;\n@@ -38,8 +38,8 @@ fn init_elt[T](&T t, uint n_elts) -> vec[T] {\n    */\n   let vec[T] v = alloc[T](n_elts);\n   let uint i = n_elts;\n-  while (i > uint(0)) {\n-    i -= uint(1);\n+  while (i > 0u) {\n+    i -= 1u;\n     v += vec(t);\n   }\n   ret v;\n@@ -59,7 +59,7 @@ fn slice[T](vec[T] v, int start, int end) -> vec[T] {\n   check(start <= end);\n   // FIXME #108: This doesn't work yet.\n   //check(end <= int(len[T](v)));\n-  auto result = alloc[T](uint(end - start));\n+  auto result = alloc[T]((end - start) as uint);\n   let mutable int i = start;\n   while (i < end) {\n     result += vec(v.(i));"}, {"sha": "699b3f0da08f93161070b9a71f4aafa4cfbeb743", "filename": "src/lib/deque.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -23,7 +23,7 @@ fn create[T]() -> t[T] {\n \n   type cell[T] = mutable util.option[T];\n \n-  let uint initial_capacity = uint(32); // 2^5\n+  let uint initial_capacity = 32u; // 2^5\n \n   /**\n    * Grow is only called on full elts, so nelts is also len(elts), unlike\n@@ -34,13 +34,13 @@ fn create[T]() -> t[T] {\n \n     fn fill[T](uint i, uint nelts, uint lo, &vec[cell[T]] old) -> cell[T] {\n       if (i < nelts) {\n-        ret old.(int((lo + i) % nelts));\n+        ret old.(((lo + i) % nelts) as int);\n       } else {\n         ret util.none[T]();\n       }\n     }\n \n-    let uint nalloc = _int.next_power_of_two(nelts + uint(1));\n+    let uint nalloc = _int.next_power_of_two(nelts + 1u);\n     let _vec.init_op[cell[T]] copy_op = bind fill[T](_, nelts, lo, elts);\n     ret _vec.init_fn[cell[T]](copy_op, nalloc);\n   }\n@@ -52,7 +52,7 @@ fn create[T]() -> t[T] {\n    */\n \n   fn get[T](&vec[cell[T]] elts, uint i) -> T {\n-    alt (elts.(int(i))) {\n+    alt (elts.(i as int)) {\n       case (util.some[T](t)) { ret t; }\n       case (_) { fail; }\n     }\n@@ -68,33 +68,33 @@ fn create[T]() -> t[T] {\n     fn add_front(&T t) {\n       let uint oldlo = lo;\n \n-      if (lo == uint(0)) {\n-        lo = _vec.len[cell[T]](elts) - uint(1);\n+      if (lo == 0u) {\n+        lo = _vec.len[cell[T]](elts) - 1u;\n       } else {\n-        lo -= uint(1);\n+        lo -= 1u;\n       }\n \n       if (lo == hi) {\n         elts = grow[T](nelts, oldlo, elts);\n-        lo = _vec.len[cell[T]](elts) - uint(1);\n-        hi = nelts - uint(1);\n+        lo = _vec.len[cell[T]](elts) - 1u;\n+        hi = nelts - 1u;\n       }\n \n-      elts.(int(lo)) = util.some[T](t);\n-      nelts += uint(1);\n+      elts.(lo as int) = util.some[T](t);\n+      nelts += 1u;\n     }\n \n     fn add_back(&T t) {\n-      hi = (hi + uint(1)) % _vec.len[cell[T]](elts);\n+      hi = (hi + 1u) % _vec.len[cell[T]](elts);\n \n       if (lo == hi) {\n         elts = grow[T](nelts, lo, elts);\n-        lo = uint(0);\n+        lo = 0u;\n         hi = nelts;\n       }\n \n-      elts.(int(hi)) = util.some[T](t);\n-      nelts += uint(1);\n+      elts.(hi as int) = util.some[T](t);\n+      nelts += 1u;\n     }\n \n     /**\n@@ -103,19 +103,19 @@ fn create[T]() -> t[T] {\n      */\n     fn pop_front() -> T {\n       let T t = get[T](elts, lo);\n-      elts.(int(lo)) = util.none[T]();\n-      lo = (lo + uint(1)) % _vec.len[cell[T]](elts);\n+      elts.(lo as int) = util.none[T]();\n+      lo = (lo + 1u) % _vec.len[cell[T]](elts);\n       ret t;\n     }\n \n     fn pop_back() -> T {\n       let T t = get[T](elts, hi);\n-      elts.(int(hi)) = util.none[T]();\n+      elts.(hi as int) = util.none[T]();\n \n-      if (hi == uint(0)) {\n-        hi = _vec.len[cell[T]](elts) - uint(1);\n+      if (hi == 0u) {\n+        hi = _vec.len[cell[T]](elts) - 1u;\n       } else {\n-        hi -= uint(1);\n+        hi -= 1u;\n       }\n \n       ret t;\n@@ -133,5 +133,5 @@ fn create[T]() -> t[T] {\n   let vec[cell[T]] v = _vec.init_elt[cell[T]](util.none[T](),\n                                               initial_capacity);\n \n-  ret deque[T](uint(0), uint(0), uint(0), v);\n+  ret deque[T](0u, 0u, 0u, v);\n }"}, {"sha": "540dfd00c35556c10058b431560a65a84bdee748", "filename": "src/lib/map.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -23,7 +23,7 @@ type hashmap[K, V] = obj {\n \n fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n \n-  let uint initial_capacity = uint(32); // 2^5\n+  let uint initial_capacity = 32u; // 2^5\n   let util.rational load_factor = rec(num=3, den=4);\n \n   type bucket[V] = tag(nil(), deleted(), some(V));\n@@ -43,13 +43,13 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n   // fixed key.\n \n   fn hashl[K](hashfn[K] hasher, uint nbkts, &K key) -> uint {\n-    ret (hasher(key) >>> (sys.rustrt.size_of[uint]() * uint(8) / uint(2)))\n+    ret (hasher(key) >>> (sys.rustrt.size_of[uint]() * 8u / 2u))\n       % nbkts;\n   }\n \n   fn hashr[K](hashfn[K] hasher, uint nbkts, &K key) -> uint {\n-    ret ((((~ uint(0)) >>> (sys.rustrt.size_of[uint]() * uint(8) / uint(2)))\n-          & hasher(key)) * uint(2) + uint(1))\n+    ret ((((~ 0u) >>> (sys.rustrt.size_of[uint]() * 8u / 2u))\n+          & hasher(key)) * 2u + 1u)\n       % nbkts;\n   }\n \n@@ -63,10 +63,10 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n                        &K key)\n     -> util.option[V]\n   {\n-    let uint i = uint(0);\n+    let uint i = 0u;\n     while (i < nbkts) {\n       // Pending fix to issue #94, remove uint coercion.\n-      let int j = int(hash[K](hasher, nbkts, key, i));\n+      let int j = (hash[K](hasher, nbkts, key, i)) as int;\n       alt (bkts.(j)) {\n         case (some[V](val)) {\n           ret util.some[V](val);\n@@ -75,7 +75,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n           ret util.none[V]();\n         }\n         case (deleted[V]()) {\n-          i += uint(1);\n+          i += 1u;\n         }\n       }\n     }\n@@ -91,17 +91,17 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n   {\n     fn insert(&K key, &V val) {\n       // FIXME grow the table and rehash if we ought to.\n-      let uint i = uint(0);\n+      let uint i = 0u;\n       while (i < nbkts) {\n         // Issue #94, as in find_common()\n-        let int j = int(hash[K](hasher, nbkts, key, i));\n+        let int j = (hash[K](hasher, nbkts, key, i)) as int;\n         alt (bkts.(j)) {\n           case (some[V](_)) {\n-            i += uint(1);\n+            i += 1u;\n           }\n           case (_) {\n             bkts.(j) = some[V](val);\n-            nelts += uint(1);\n+            nelts += 1u;\n             ret;\n           }\n         }\n@@ -129,17 +129,17 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     }\n \n     fn remove(&K key) -> util.option[V] {\n-      let uint i = uint(0);\n+      let uint i = 0u;\n       while (i < nbkts) {\n         // Issue #94, as in find_common()\n-        let int j = int(hash[K](hasher, nbkts, key, i));\n+        let int j = (hash[K](hasher, nbkts, key, i)) as int;\n         alt (bkts.(j)) {\n           case (some[V](val)) {\n             bkts.(j) = deleted[V]();\n             ret util.some[V](val);\n           }\n           case (deleted[V]()) {\n-            nelts += uint(1);\n+            nelts += 1u;\n           }\n           case (nil[V]()) {\n             ret util.none[V]();\n@@ -155,5 +155,5 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n   let vec[mutable bucket[V]] bkts =\n     _vec.init_elt[mutable bucket[V]](nil[V](), initial_capacity);\n \n-  ret hashmap[K, V](hasher, eqer, bkts, uint(0), uint(0), load_factor);\n+  ret hashmap[K, V](hasher, eqer, bkts, 0u, 0u, load_factor);\n }"}, {"sha": "3f00acb1ff86b42874eb08a7ab12fc931c64e9aa", "filename": "src/test/run-pass/i32-sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi32-sub.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1,8 +1,8 @@\n // -*- rust -*-\n \n fn main() {\n-    let i32 x = i32(-400);\n-    x = i32(0) - x;\n-    check(x == i32(400));\n+    let i32 x = -400_i32;\n+    x = 0_i32 - x;\n+    check(x == 400_i32);\n }\n "}, {"sha": "fb387d316c52f026291422204622f883fae2750a", "filename": "src/test/run-pass/i8-incr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi8-incr.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1,9 +1,9 @@\n // -*- rust -*-\n \n fn main() {\n-  let i8 x = i8(-12);\n-  let i8 y = i8(-12);\n-  x = x + i8(1);\n-  x = x - i8(1);\n+  let i8 x = -12i8;\n+  let i8 y = -12i8;\n+  x = x + 1i8;\n+  x = x - 1i8;\n   check(x == y);\n }"}, {"sha": "1ff511aa6bb0c191350eba9b095bb8bd90d8897c", "filename": "src/test/run-pass/u32-decr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu32-decr.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1,8 +1,8 @@\n // -*- rust -*-\n \n fn main() {\n-    let u32 word = (200000 as u32);\n-    word = word - (1 as u32);\n-    check(word == (199999 as u32));\n+    let u32 word = (200000u32);\n+    word = word - (1u32);\n+    check(word == (199999u32));\n }\n "}, {"sha": "f89325fc45f3a3f16fd841b162bff09fc90a9065", "filename": "src/test/run-pass/u8-incr-decr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -4,9 +4,9 @@\n // in the rest of the generated code so they're easily grep-able.\n \n fn main() {\n-  let u8 x = 19 as u8;  // 0x13\n-  let u8 y = 35 as u8;  // 0x23\n-  x = x + (7 as u8);    // 0x7\n-  y = y - (9 as u8);    // 0x9\n+  let u8 x = 19u8;  // 0x13\n+  let u8 y = 35u8;  // 0x23\n+  x = x + (7u8);    // 0x7\n+  y = y - (9u8);    // 0x9\n   check(x == y);\n }"}, {"sha": "602d83c66c5c83aca16b6daa90bd54eb3d61a335", "filename": "src/test/run-pass/u8-incr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80307576245aabf00285db020bbfbc4c3a891766/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr.rs?ref=80307576245aabf00285db020bbfbc4c3a891766", "patch": "@@ -1,12 +1,12 @@\n // -*- rust -*-\n \n fn main() {\n-  let u8 x = 12 as u8;\n-  let u8 y = 12 as u8;\n-  x = x + (1 as u8);\n-  x = x - (1 as u8);\n+  let u8 x = 12u8;\n+  let u8 y = 12u8;\n+  x = x + (1u8);\n+  x = x - (1u8);\n   check(x == y);\n-  //x = 14 as u8;\n-  //x = x + 1 as u8;\n+  // x = 14u8;\n+  // x = x + 1u8;\n }\n "}]}