{"sha": "7a4a66da3d5020311c78bdfbafad647fc99e436a", "node_id": "C_kwDOAAsO6NoAKDdhNGE2NmRhM2Q1MDIwMzExYzc4YmRmYmFmYWQ2NDdmYzk5ZTQzNmE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-22T02:29:37Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-22T02:30:54Z"}, "message": "Add a test for `--exclude test::XXX`\n\nI didn't know that the `test::` syntax was valid before, and it doesn't\nseem to be documented anywhere. Add a test so it doesn't regress accidentally,\nand as executable documentation.", "tree": {"sha": "c3be6d6d3f2da23cf8c7269e6a7e62c5f12b851a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3be6d6d3f2da23cf8c7269e6a7e62c5f12b851a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4a66da3d5020311c78bdfbafad647fc99e436a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4a66da3d5020311c78bdfbafad647fc99e436a", "html_url": "https://github.com/rust-lang/rust/commit/7a4a66da3d5020311c78bdfbafad647fc99e436a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4a66da3d5020311c78bdfbafad647fc99e436a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b94fbea01fe73bfeadc81a43051bb12efbd40c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b94fbea01fe73bfeadc81a43051bb12efbd40c0", "html_url": "https://github.com/rust-lang/rust/commit/8b94fbea01fe73bfeadc81a43051bb12efbd40c0"}], "stats": {"total": 94, "additions": 65, "deletions": 29}, "files": [{"sha": "52978375996675605c0fec371035c86445c1a21f", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=7a4a66da3d5020311c78bdfbafad647fc99e436a", "patch": "@@ -26,6 +26,49 @@ fn first<A, B>(v: Vec<(A, B)>) -> Vec<A> {\n     v.into_iter().map(|(a, _)| a).collect::<Vec<_>>()\n }\n \n+fn run_build(paths: &[PathBuf], config: Config) -> Cache {\n+    let kind = config.cmd.kind();\n+    let build = Build::new(config);\n+    let builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(kind), paths);\n+    builder.cache\n+}\n+\n+#[test]\n+fn test_exclude() {\n+    let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n+    config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n+\n+    let build = Build::new(config);\n+    let builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n+\n+    // Ensure we have really excluded tidy\n+    assert!(!builder.cache.contains::<test::Tidy>());\n+\n+    // Ensure other tests are not affected.\n+    assert!(builder.cache.contains::<test::RustdocUi>());\n+}\n+\n+#[test]\n+fn test_exclude_kind() {\n+    let path = PathBuf::from(\"src/tools/cargotest\");\n+    let exclude = TaskPath::parse(\"test::src/tools/cargotest\");\n+    assert_eq!(exclude, TaskPath { kind: Some(Kind::Test), path: path.clone() });\n+\n+    let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n+    // Ensure our test is valid, and `test::Cargotest` would be run without the exclude.\n+    assert!(run_build(&[path.clone()], config.clone()).contains::<test::Cargotest>());\n+    // Ensure tests for cargotest are skipped.\n+    config.exclude = vec![exclude.clone()];\n+    assert!(!run_build(&[path.clone()], config).contains::<test::Cargotest>());\n+\n+    // Ensure builds for cargotest are not skipped.\n+    let mut config = configure(\"build\", &[\"A\"], &[\"A\"]);\n+    config.exclude = vec![exclude];\n+    assert!(run_build(&[path], config).contains::<tool::CargoTest>());\n+}\n+\n mod defaults {\n     use super::{configure, first};\n     use crate::builder::*;\n@@ -515,35 +558,6 @@ mod dist {\n         );\n     }\n \n-    #[test]\n-    fn test_exclude() {\n-        let mut config = configure(&[\"A\"], &[\"A\"]);\n-        config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n-        config.cmd = Subcommand::Test {\n-            paths: Vec::new(),\n-            test_args: Vec::new(),\n-            rustc_args: Vec::new(),\n-            fail_fast: true,\n-            doc_tests: DocTests::No,\n-            bless: false,\n-            force_rerun: false,\n-            compare_mode: None,\n-            rustfix_coverage: false,\n-            pass: None,\n-            run: None,\n-        };\n-\n-        let build = Build::new(config);\n-        let builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n-\n-        // Ensure we have really excluded tidy\n-        assert!(!builder.cache.contains::<test::Tidy>());\n-\n-        // Ensure other tests are not affected.\n-        assert!(builder.cache.contains::<test::RustdocUi>());\n-    }\n-\n     #[test]\n     fn doc_ci() {\n         let mut config = configure(&[\"A\"], &[\"A\"]);"}, {"sha": "1638d3ed3c2814fe19351268c733e540ea284002", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7a4a66da3d5020311c78bdfbafad647fc99e436a", "patch": "@@ -41,6 +41,7 @@ macro_rules! check_ci_llvm {\n /// each field, see the corresponding fields in\n /// `config.toml.example`.\n #[derive(Default)]\n+#[cfg_attr(test, derive(Clone))]\n pub struct Config {\n     pub changelog_seen: Option<usize>,\n     pub ccache: Option<String>,\n@@ -330,6 +331,7 @@ impl PartialEq<&str> for TargetSelection {\n \n /// Per-target configuration stored in the global configuration structure.\n #[derive(Default)]\n+#[cfg_attr(test, derive(Clone))]\n pub struct Target {\n     /// Some(path to llvm-config) if using an external LLVM.\n     pub llvm_config: Option<PathBuf>,"}, {"sha": "58571ea129c1940b68766ae64f5b78c9a78a19a7", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4a66da3d5020311c78bdfbafad647fc99e436a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7a4a66da3d5020311c78bdfbafad647fc99e436a", "patch": "@@ -14,6 +14,7 @@ use crate::setup::Profile;\n use crate::util::t;\n use crate::{Build, DocTests};\n \n+#[derive(Copy, Clone)]\n pub enum Color {\n     Always,\n     Never,\n@@ -79,6 +80,7 @@ pub struct Flags {\n     pub llvm_profile_generate: bool,\n }\n \n+#[cfg_attr(test, derive(Clone))]\n pub enum Subcommand {\n     Build {\n         paths: Vec<PathBuf>,\n@@ -668,6 +670,24 @@ Arguments:\n }\n \n impl Subcommand {\n+    pub fn kind(&self) -> Kind {\n+        match self {\n+            Subcommand::Bench { .. } => Kind::Bench,\n+            Subcommand::Build { .. } => Kind::Build,\n+            Subcommand::Check { .. } => Kind::Check,\n+            Subcommand::Clippy { .. } => Kind::Clippy,\n+            Subcommand::Doc { .. } => Kind::Doc,\n+            Subcommand::Fix { .. } => Kind::Fix,\n+            Subcommand::Format { .. } => Kind::Format,\n+            Subcommand::Test { .. } => Kind::Test,\n+            Subcommand::Clean { .. } => Kind::Clean,\n+            Subcommand::Dist { .. } => Kind::Dist,\n+            Subcommand::Install { .. } => Kind::Install,\n+            Subcommand::Run { .. } => Kind::Run,\n+            Subcommand::Setup { .. } => Kind::Setup,\n+        }\n+    }\n+\n     pub fn test_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {"}]}