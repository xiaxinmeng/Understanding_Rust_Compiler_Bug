{"sha": "5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzQ2OTA4NDI0NzQwMTljMGExYzZjZDRkMGE3Yjc1MTA4ZTlkMmQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-18T21:19:29Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:51Z"}, "message": "Remove the Panic block terminator", "tree": {"sha": "4a212fc65602b6a904ed06d8e2a281ea8eda64c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a212fc65602b6a904ed06d8e2a281ea8eda64c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "html_url": "https://github.com/rust-lang/rust/commit/5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf4d0e3adbe77bd0e332645848dbd2505176a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf4d0e3adbe77bd0e332645848dbd2505176a21", "html_url": "https://github.com/rust-lang/rust/commit/ecf4d0e3adbe77bd0e332645848dbd2505176a21"}], "stats": {"total": 139, "additions": 107, "deletions": 32}, "files": [{"sha": "8a43b8d0aaf169662d965b78d6b72f6a4115710e", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -204,12 +204,6 @@ pub enum Terminator<'tcx> {\n         target: BasicBlock,\n     },\n \n-    /// block should initiate unwinding; should be one successor\n-    /// that does cleanup and branches to DIVERGE_BLOCK\n-    Panic {\n-        target: BasicBlock,\n-    },\n-\n     /// jump to branch 0 if this lvalue evaluates to true\n     If {\n         cond: Operand<'tcx>,\n@@ -320,7 +314,6 @@ impl<'tcx> Terminator<'tcx> {\n         use self::Terminator::*;\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b),\n-            Panic { target: ref b } => slice::ref_slice(b),\n             If { targets: ref b, .. } => b.as_slice(),\n             Switch { targets: ref b, .. } => b,\n             SwitchInt { targets: ref b, .. } => b,\n@@ -340,7 +333,6 @@ impl<'tcx> Terminator<'tcx> {\n         use self::Terminator::*;\n         match *self {\n             Goto { target: ref mut b } => slice::mut_ref_slice(b),\n-            Panic { target: ref mut b } => slice::mut_ref_slice(b),\n             If { targets: ref mut b, .. } => b.as_mut_slice(),\n             Switch { targets: ref mut b, .. } => b,\n             SwitchInt { targets: ref mut b, .. } => b,\n@@ -401,7 +393,6 @@ impl<'tcx> Terminator<'tcx> {\n         use self::Terminator::*;\n         match *self {\n             Goto { .. } => write!(fmt, \"goto\"),\n-            Panic { .. } => write!(fmt, \"panic\"),\n             If { cond: ref lv, .. } => write!(fmt, \"if({:?})\", lv),\n             Switch { discr: ref lv, .. } => write!(fmt, \"switch({:?})\", lv),\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n@@ -424,7 +415,7 @@ impl<'tcx> Terminator<'tcx> {\n         use self::Terminator::*;\n         match *self {\n             Diverge | Return | Resume => vec![],\n-            Goto { .. } | Panic { .. } => vec![\"\".into_cow()],\n+            Goto { .. } => vec![\"\".into_cow()],\n             If { .. } => vec![\"true\".into_cow(), \"false\".into_cow()],\n             Call { .. } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n             DivergingCall { .. } => vec![\"unwind\".into_cow()],"}, {"sha": "4d29a71c6e74853b7866d0e37e179f003d2986d8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -107,8 +107,7 @@ pub trait Visitor<'tcx> {\n \n     fn super_terminator(&mut self, block: BasicBlock, terminator: &Terminator<'tcx>) {\n         match *terminator {\n-            Terminator::Goto { target } |\n-            Terminator::Panic { target } => {\n+            Terminator::Goto { target } => {\n                 self.visit_branch(block, target);\n             }\n \n@@ -405,8 +404,7 @@ pub trait MutVisitor<'tcx> {\n                         block: BasicBlock,\n                         terminator: &mut Terminator<'tcx>) {\n         match *terminator {\n-            Terminator::Goto { target } |\n-            Terminator::Panic { target } => {\n+            Terminator::Goto { target } => {\n                 self.visit_branch(block, target);\n             }\n "}, {"sha": "6baf3ad2fe1913389132ae257963cf5a04367074", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -63,15 +63,15 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.cfg.push_assign(block, expr_span, // lt = idx < len\n                                      &lt, Rvalue::BinaryOp(BinOp::Lt,\n                                                            idx.clone(),\n-                                                           Operand::Consume(len)));\n+                                                           Operand::Consume(len.clone())));\n \n                 let (success, failure) = (this.cfg.start_new_block(), this.cfg.start_new_block());\n                 this.cfg.terminate(block,\n                                    Terminator::If {\n                                        cond: Operand::Consume(lt),\n                                        targets: (success, failure),\n                                    });\n-                this.panic(failure);\n+                this.panic_bound_check(failure, idx.clone(), Operand::Consume(len), expr_span);\n                 success.and(slice.index(idx))\n             }\n             ExprKind::SelfRef => {"}, {"sha": "c2c87fcbd20dafd14ccc63d50856b4bcf0ae9f04", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -89,7 +89,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         // not entirely precise\n         if !otherwise.is_empty() {\n             let join_block = self.join_otherwise_blocks(otherwise);\n-            self.panic(join_block);\n+            self.panic(join_block, \"something about matches algorithm not being precise\", span);\n         }\n \n         // all the arm blocks will rejoin here"}, {"sha": "758c5781efc423c6bad062da3e562552ab567281", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -88,9 +88,12 @@ should go to.\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n use rustc::middle::region::CodeExtent;\n-use rustc::middle::ty::Ty;\n+use rustc::middle::lang_items;\n+use rustc::middle::subst::Substs;\n+use rustc::middle::ty::{Ty, Region};\n use rustc::mir::repr::*;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::parse::token::intern_and_get_ident;\n \n pub struct Scope<'tcx> {\n     extent: CodeExtent,\n@@ -261,13 +264,6 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         self.scopes.iter().rev().flat_map(|b| b.cached_block).next()\n     }\n \n-    /// Create diverge cleanup and branch to it from `block`.\n-    pub fn panic(&mut self, block: BasicBlock) {\n-        // FIXME: panic terminator should also have conditional cleanup?\n-        let cleanup = self.diverge_cleanup().unwrap_or(DIVERGE_BLOCK);\n-        self.cfg.terminate(block, Terminator::Panic { target: cleanup });\n-    }\n-\n     /// Indicates that `lvalue` should be dropped on exit from\n     /// `extent`.\n     pub fn schedule_drop(&mut self,\n@@ -299,4 +295,94 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     pub fn extent_of_outermost_scope(&self) -> CodeExtent {\n         self.scopes.first().map(|scope| scope.extent).unwrap()\n     }\n+\n+    pub fn panic_bound_check(&mut self,\n+                             block: BasicBlock,\n+                             index: Operand<'tcx>,\n+                             len: Operand<'tcx>,\n+                             span: Span) {\n+        let cleanup = self.diverge_cleanup();\n+        let func = self.lang_function(lang_items::PanicBoundsCheckFnLangItem);\n+        let str_ty = self.hir.tcx().mk_static_str();\n+        let tup_ty = self.hir.tcx().mk_tup(vec![str_ty, self.hir.tcx().types.u32]);\n+        // FIXME: ReStatic might be wrong here?\n+        let ref_region = self.hir.tcx().mk_region(Region::ReStatic);\n+        let ref_ty = self.hir.tcx().mk_imm_ref(ref_region, tup_ty.clone());\n+        let (file_arg, line_arg) = self.span_to_fileline_args(span);\n+        let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n+        self.cfg.push_assign(block, DUMMY_SP, &tuple, // tuple = (message_arg, file_arg, line_arg);\n+                             Rvalue::Aggregate(AggregateKind::Tuple, vec![file_arg, line_arg]));\n+        // FIXME: ReStatic might be wrong here?\n+        self.cfg.push_assign(block, DUMMY_SP, &tuple_ref, // tuple_ref = &tuple;\n+                             Rvalue::Ref(*ref_region, BorrowKind::Unique, tuple));\n+        self.cfg.terminate(block, Terminator::DivergingCall {\n+            func: func,\n+            args: vec![Operand::Consume(tuple_ref), index, len],\n+            cleanup: cleanup,\n+        });\n+    }\n+\n+    /// Create diverge cleanup and branch to it from `block`.\n+    pub fn panic(&mut self, block: BasicBlock, msg: &'static str, span: Span) {\n+        let cleanup = self.diverge_cleanup();\n+        let func = self.lang_function(lang_items::PanicFnLangItem);\n+\n+        let str_ty = self.hir.tcx().mk_static_str();\n+        let tup_ty = self.hir.tcx().mk_tup(vec![str_ty, str_ty, self.hir.tcx().types.u32]);\n+        // FIXME: ReStatic might be wrong here?\n+        let ref_region = self.hir.tcx().mk_region(Region::ReStatic);\n+        let ref_ty = self.hir.tcx().mk_imm_ref(ref_region, tup_ty.clone());\n+        let message_arg = Operand::Constant(Constant {\n+            span: DUMMY_SP,\n+            ty: str_ty,\n+            literal: self.hir.str_literal(intern_and_get_ident(msg))\n+        });\n+        let (file_arg, line_arg) = self.span_to_fileline_args(span);\n+        let tuple = self.temp(tup_ty);\n+        let tuple_ref = self.temp(ref_ty);\n+        self.cfg.push_assign(block, DUMMY_SP, &tuple, // tuple = (message_arg, file_arg, line_arg);\n+                             Rvalue::Aggregate(AggregateKind::Tuple,\n+                                               vec![message_arg, file_arg, line_arg])\n+        );\n+        // FIXME: ReStatic might be wrong here?\n+        self.cfg.push_assign(block, DUMMY_SP, &tuple_ref, // tuple_ref = &tuple;\n+                             Rvalue::Ref(*ref_region, BorrowKind::Unique, tuple));\n+\n+        self.cfg.terminate(block, Terminator::DivergingCall {\n+            func: func,\n+            args: vec![Operand::Consume(tuple_ref)],\n+            cleanup: cleanup,\n+        });\n+    }\n+\n+    fn lang_function(&mut self, lang_item: lang_items::LangItem) -> Operand<'tcx> {\n+        let funcdid = match self.hir.tcx().lang_items.require(lang_item) {\n+            Ok(d) => d,\n+            Err(m) => {\n+                self.hir.tcx().sess.fatal(&*m)\n+            }\n+        };\n+        Operand::Constant(Constant {\n+            span: DUMMY_SP,\n+            ty: self.hir.tcx().lookup_item_type(funcdid).ty,\n+            literal: Literal::Item {\n+                def_id: funcdid,\n+                kind: ItemKind::Function,\n+                substs: self.hir.tcx().mk_substs(Substs::empty())\n+            }\n+        })\n+    }\n+\n+    fn span_to_fileline_args(&mut self, span: Span) -> (Operand<'tcx>, Operand<'tcx>) {\n+        let span_lines = self.hir.tcx().sess.codemap().lookup_char_pos(span.lo);\n+        (Operand::Constant(Constant {\n+            span: DUMMY_SP,\n+            ty: self.hir.tcx().mk_static_str(),\n+            literal: self.hir.str_literal(intern_and_get_ident(&span_lines.file.name))\n+        }), Operand::Constant(Constant {\n+            span: DUMMY_SP,\n+            ty: self.hir.tcx().types.u32,\n+            literal: self.hir.usize_literal(span_lines.line)\n+        }))\n+    }\n }"}, {"sha": "f9dd40defdf70aa44eb1b95a419cb34fd0c8e337", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -22,6 +22,7 @@ use rustc::middle::const_eval::{self, ConstVal};\n use rustc::middle::infer::InferCtxt;\n use rustc::middle::ty::{self, Ty};\n use syntax::codemap::Span;\n+use syntax::parse::token;\n use rustc_front::hir;\n \n #[derive(Copy, Clone)]\n@@ -61,6 +62,10 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         self.tcx.types.bool\n     }\n \n+    pub fn str_literal(&mut self, value: token::InternedString) -> Literal<'tcx> {\n+        Literal::Value { value: ConstVal::Str(value) }\n+    }\n+\n     pub fn true_literal(&mut self) -> Literal<'tcx> {\n         Literal::Value { value: ConstVal::Bool(true) }\n     }"}, {"sha": "90bb73dbe28d38a2bfc70f983ed107ea2bc2e69e", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -81,8 +81,7 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n             Terminator::Goto { .. } |\n             Terminator::Diverge |\n             Terminator::Resume |\n-            Terminator::Return |\n-            Terminator::Panic { .. } => {\n+            Terminator::Return => {\n                 /* nothing to do */\n             }\n             Terminator::If { ref mut cond, .. } => {"}, {"sha": "4c2bec14e5e25094099002558473c4b0dc28e540", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34690842474019c0a1c6cd4d0a7b75108e9d2d/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "patch": "@@ -40,10 +40,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 build::Br(bcx, self.llblock(target), DebugLoc::None)\n             }\n \n-            mir::Terminator::Panic { .. } => {\n-                unimplemented!()\n-            }\n-\n             mir::Terminator::If { ref cond, targets: (true_bb, false_bb) } => {\n                 let cond = self.trans_operand(bcx, cond);\n                 let lltrue = self.llblock(true_bb);"}]}