{"sha": "e57ed0ddab4403a62d129f52af696420b94439d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1N2VkMGRkYWI0NDAzYTYyZDEyOWY1MmFmNjk2NDIwYjk0NDM5ZDg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-06T06:48:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T06:48:52Z"}, "message": "Rollup merge of #56362 - varkor:stabilise-exhaustive-integer-patterns, r=nikomatsakis\n\nStabilise exhaustive integer patterns\n\nThis is dependent on the FCP for https://github.com/rust-lang/rfcs/pull/2591 being completed, but that should happen tomorrow, so there's little harm in opening this PR early.\n\nCloses #50907.", "tree": {"sha": "77ef84418588272c7dd3b0e7cf98ddb7ce39a243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ef84418588272c7dd3b0e7cf98ddb7ce39a243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57ed0ddab4403a62d129f52af696420b94439d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCMZUCRBK7hj4Ov3rIwAAdHIIAAfPeIhsnn89EcLAjxe8N8wW\nzMxY25uGNtmGNh7x1U3uecD0K+cDKOQY2avrx2YP3xRVEm09RZyWgIIcv+kzyPPG\nXRWWeJVLITaqZmLJBuWUlqJIP7B0jxF8dakVRUGbCaZaVYthDPIly+Dd6614BB7a\nj4dBb6MsptImDBbQ/9CjB/ngkdx+9FCwmat06y1EFmCp1agCV0HbBBZdij8sqIci\npRMpDVuFFDcmVSkoNNMnN0xrWgomseneNrhp5C4cpS1uzYxi6KLzjayurxKJIpP5\n713bZ3tYXbqtXYmSsLh+pzzluqbXEIjNMiSb4HgGIHTMfqERl5ID1RPch94tMe4=\n=GzU+\n-----END PGP SIGNATURE-----\n", "payload": "tree 77ef84418588272c7dd3b0e7cf98ddb7ce39a243\nparent a88feabac40537bd03aaec5d409ed43c6572b006\nparent ed64b1927b4e929e905f778870a9f53d75216b34\nauthor Pietro Albini <pietro@pietroalbini.org> 1544078932 +0100\ncommitter GitHub <noreply@github.com> 1544078932 +0100\n\nRollup merge of #56362 - varkor:stabilise-exhaustive-integer-patterns, r=nikomatsakis\n\nStabilise exhaustive integer patterns\n\nThis is dependent on the FCP for https://github.com/rust-lang/rfcs/pull/2591 being completed, but that should happen tomorrow, so there's little harm in opening this PR early.\n\nCloses #50907.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57ed0ddab4403a62d129f52af696420b94439d8", "html_url": "https://github.com/rust-lang/rust/commit/e57ed0ddab4403a62d129f52af696420b94439d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57ed0ddab4403a62d129f52af696420b94439d8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88feabac40537bd03aaec5d409ed43c6572b006", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88feabac40537bd03aaec5d409ed43c6572b006", "html_url": "https://github.com/rust-lang/rust/commit/a88feabac40537bd03aaec5d409ed43c6572b006"}, {"sha": "ed64b1927b4e929e905f778870a9f53d75216b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed64b1927b4e929e905f778870a9f53d75216b34", "html_url": "https://github.com/rust-lang/rust/commit/ed64b1927b4e929e905f778870a9f53d75216b34"}], "stats": {"total": 307, "additions": 194, "deletions": 113}, "files": [{"sha": "4f5ed8889f3ff9214c7cf6a7d4290b2e38e12e2e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1787,6 +1787,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_pointer_sized(&self) -> bool {\n+        match self.sty {\n+            Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n             Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => false,"}, {"sha": "5db7b6ceb5db56f263f75af4b161fd2131130836", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -584,7 +584,6 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   -> Vec<Constructor<'tcx>>\n {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n-    let exhaustive_integer_patterns = cx.tcx.features().exhaustive_integer_patterns;\n     let ctors = match pcx.ty.sty {\n         ty::Bool => {\n             [true, false].iter().map(|&b| {\n@@ -614,7 +613,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .map(|v| Variant(v.did))\n                 .collect()\n         }\n-        ty::Char if exhaustive_integer_patterns => {\n+        ty::Char => {\n             vec![\n                 // The valid Unicode Scalar Value ranges.\n                 ConstantRange('\\u{0000}' as u128,\n@@ -629,14 +628,14 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 ),\n             ]\n         }\n-        ty::Int(ity) if exhaustive_integer_patterns => {\n+        ty::Int(ity) => {\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(&cx.tcx, SignedInt(ity)).size().bits() as u128;\n             let min = 1u128 << (bits - 1);\n             let max = (1u128 << (bits - 1)) - 1;\n             vec![ConstantRange(min, max, pcx.ty, RangeEnd::Included)]\n         }\n-        ty::Uint(uty) if exhaustive_integer_patterns => {\n+        ty::Uint(uty) => {\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(&cx.tcx, UnsignedInt(uty)).size().bits() as u128;\n             let max = !0u128 >> (128 - bits);\n@@ -775,8 +774,17 @@ impl<'tcx> IntRange<'tcx> {\n     fn from_ctor(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n                  ctor: &Constructor<'tcx>)\n                  -> Option<IntRange<'tcx>> {\n+        // Floating-point ranges are permitted and we don't want\n+        // to consider them when constructing integer ranges.\n+        fn is_integral<'tcx>(ty: Ty<'tcx>) -> bool {\n+            match ty.sty {\n+                ty::Char | ty::Int(_) | ty::Uint(_) => true,\n+                _ => false,\n+            }\n+        }\n+\n         match ctor {\n-            ConstantRange(lo, hi, ty, end) => {\n+            ConstantRange(lo, hi, ty, end) if is_integral(ty) => {\n                 // Perform a shift if the underlying types are signed,\n                 // which makes the interval arithmetic simpler.\n                 let bias = IntRange::signed_bias(tcx, ty);\n@@ -789,7 +797,7 @@ impl<'tcx> IntRange<'tcx> {\n                     Some(IntRange { range: lo..=(hi - offset), ty })\n                 }\n             }\n-            ConstantValue(val) => {\n+            ConstantValue(val) if is_integral(val.ty) => {\n                 let ty = val.ty;\n                 if let Some(val) = val.assert_bits(tcx, ty::ParamEnv::empty().and(ty)) {\n                     let bias = IntRange::signed_bias(tcx, ty);\n@@ -799,9 +807,7 @@ impl<'tcx> IntRange<'tcx> {\n                     None\n                 }\n             }\n-            Single | Variant(_) | Slice(_) => {\n-                None\n-            }\n+            _ => None,\n         }\n     }\n \n@@ -933,12 +939,10 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n                 // If a constructor appears in a `match` arm, we can\n                 // eliminate it straight away.\n                 refined_ctors = vec![]\n-            } else if tcx.features().exhaustive_integer_patterns {\n-                if let Some(interval) = IntRange::from_ctor(tcx, used_ctor) {\n-                    // Refine the required constructors for the type by subtracting\n-                    // the range defined by the current constructor pattern.\n-                    refined_ctors = interval.subtract_from(tcx, refined_ctors);\n-                }\n+            } else if let Some(interval) = IntRange::from_ctor(tcx, used_ctor) {\n+                // Refine the required constructors for the type by subtracting\n+                // the range defined by the current constructor pattern.\n+                refined_ctors = interval.subtract_from(tcx, refined_ctors);\n             }\n \n             // If the constructor patterns that have been considered so far\n@@ -1094,7 +1098,8 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n         // For privately empty and non-exhaustive enums, we work as if there were an \"extra\"\n         // `_` constructor for the type, so we can never match over all constructors.\n-        let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n+        let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive ||\n+            (pcx.ty.is_pointer_sized() && !cx.tcx.features().precise_pointer_size_matching);\n \n         if cheap_missing_ctors == MissingCtors::Empty && !is_non_exhaustive {\n             split_grouped_constructors(cx.tcx, all_ctors, matrix, pcx.ty).into_iter().map(|c| {\n@@ -1390,17 +1395,16 @@ fn slice_pat_covered_by_constructor<'tcx>(\n // Whether to evaluate a constructor using exhaustive integer matching. This is true if the\n // constructor is a range or constant with an integer type.\n fn should_treat_range_exhaustively(tcx: TyCtxt<'_, 'tcx, 'tcx>, ctor: &Constructor<'tcx>) -> bool {\n-    if tcx.features().exhaustive_integer_patterns {\n-        let ty = match ctor {\n-            ConstantValue(value) => value.ty,\n-            ConstantRange(_, _, ty, _) => ty,\n-            _ => return false,\n-        };\n-        if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.sty {\n-            return true;\n-        }\n+    let ty = match ctor {\n+        ConstantValue(value) => value.ty,\n+        ConstantRange(_, _, ty, _) => ty,\n+        _ => return false,\n+    };\n+    if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.sty {\n+        !ty.is_pointer_sized() || tcx.features().precise_pointer_size_matching\n+    } else {\n+        false\n     }\n-    false\n }\n \n /// For exhaustive integer matching, some constructors are grouped within other constructors"}, {"sha": "2c5d58ea8cb3aabce4235f7553209c068f09e3ff", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -439,8 +439,8 @@ declare_features! (\n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Integer match exhaustiveness checking\n-    (active, exhaustive_integer_patterns, \"1.30.0\", Some(50907), None),\n+    // Exhaustive pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n     // #[doc(keyword = \"...\")]\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n@@ -683,6 +683,8 @@ declare_features! (\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n+    // Integer match exhaustiveness checking (RFC 2591)\n+    (accepted, exhaustive_integer_patterns, \"1.32.0\", Some(50907), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n     // `Self` struct constructor (RFC 2302)"}, {"sha": "703453e6bdd93a865b1494edcfa119749ff42a57", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:35:15\n    |\n LL |     A = { let 0 = 0; 0 },\n-   |               ^ pattern `_` not covered\n+   |               ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "6caff93e642963aa160008aaf751c2b6cd710d0e", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:41:24\n    |\n LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n-   |                        ^ pattern `_` not covered\n+   |                        ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "9e45045d27e8d6424646b8137bdbbd70be51f477", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,26 +1,26 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:14:22\n    |\n LL | const X: i32 = { let 0 = 0; 0 };\n-   |                      ^ pattern `_` not covered\n+   |                      ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:18:23\n    |\n LL | static Y: i32 = { let 0 = 0; 0 };\n-   |                       ^ pattern `_` not covered\n+   |                       ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:23:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `_` not covered\n+   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:29:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `_` not covered\n+   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to 4 previous errors\n "}, {"sha": "278864d6de9ec292fe336a7f5a1c619c70f91578", "filename": "src/test/ui/consts/const-pattern-irrefutable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -19,8 +19,8 @@ use foo::d;\n const a: u8 = 2;\n \n fn main() {\n-    let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-    let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-    let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+    let a = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n+    let c = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n+    let d = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n     fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }"}, {"sha": "d9ad16cd0e8da91d96f1afe0220bec7841f9cbf6", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,19 +1,19 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:22:9\n    |\n-LL |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let a = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:23:9\n    |\n-LL |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let c = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:24:9\n    |\n-LL |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let d = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n error: aborting due to 3 previous errors"}, {"sha": "020382d9fe17deb6f18c679662be91e6877bfc2f", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(exhaustive_integer_patterns)]\n+#![feature(precise_pointer_size_matching)]\n #![feature(exclusive_range_pattern)]\n+\n #![deny(unreachable_patterns)]\n \n-use std::{char, usize, u8, u16, u32, u64, u128, isize, i8, i16, i32, i64, i128};\n+use std::{char, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128};\n \n fn main() {\n     let x: u8 = 0;\n@@ -68,10 +69,6 @@ fn main() {\n         '\\u{E000}' ..= '\\u{10_FFFF}' => {}\n     }\n \n-    match 0usize {\n-        0 ..= usize::MAX => {} // ok\n-    }\n-\n     match 0u16 {\n         0 ..= u16::MAX => {} // ok\n     }\n@@ -88,10 +85,6 @@ fn main() {\n         0 ..= u128::MAX => {} // ok\n     }\n \n-    match 0isize {\n-        isize::MIN ..= isize::MAX => {} // ok\n-    }\n-\n     match 0i8 {\n         -128 ..= 127 => {} // ok\n     }"}, {"sha": "011e93683fb6e4bb7ebf0f12920d86442b6c34f5", "filename": "src/test/ui/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,83 +1,83 @@\n error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:32:9\n+  --> $DIR/exhaustive_integer_patterns.rs:33:9\n    |\n LL |         200 => {} //~ ERROR unreachable pattern\n    |         ^^^\n    |\n note: lint level defined here\n-  --> $DIR/exhaustive_integer_patterns.rs:13:9\n+  --> $DIR/exhaustive_integer_patterns.rs:14:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:37:11\n+  --> $DIR/exhaustive_integer_patterns.rs:38:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ pattern `128u8..=255u8` not covered\n \n error[E0004]: non-exhaustive patterns: `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:42:11\n+  --> $DIR/exhaustive_integer_patterns.rs:43:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n \n error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:53:9\n+  --> $DIR/exhaustive_integer_patterns.rs:54:9\n    |\n LL |         -2..=20 => {} //~ ERROR unreachable pattern\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:50:11\n+  --> $DIR/exhaustive_integer_patterns.rs:51:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n \n error[E0004]: non-exhaustive patterns: `-128i8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:99:11\n+  --> $DIR/exhaustive_integer_patterns.rs:92:11\n    |\n LL |     match 0i8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `-128i8` not covered\n \n error[E0004]: non-exhaustive patterns: `0i16` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:107:11\n+  --> $DIR/exhaustive_integer_patterns.rs:100:11\n    |\n LL |     match 0i16 { //~ ERROR non-exhaustive patterns\n    |           ^^^^ pattern `0i16` not covered\n \n error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:125:11\n+  --> $DIR/exhaustive_integer_patterns.rs:118:11\n    |\n LL |     match 0u8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `128u8..=255u8` not covered\n \n error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:137:11\n+  --> $DIR/exhaustive_integer_patterns.rs:130:11\n    |\n LL |     match (0u8, Some(())) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n \n error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:142:11\n+  --> $DIR/exhaustive_integer_patterns.rs:135:11\n    |\n LL |     match (0u8, true) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211455u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:162:11\n+  --> $DIR/exhaustive_integer_patterns.rs:155:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `340282366920938463463374607431768211455u128` not covered\n \n error[E0004]: non-exhaustive patterns: `5u128..=340282366920938463463374607431768211455u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:166:11\n+  --> $DIR/exhaustive_integer_patterns.rs:159:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `5u128..=340282366920938463463374607431768211455u128` not covered\n \n error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:170:11\n+  --> $DIR/exhaustive_integer_patterns.rs:163:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `0u128..=3u128` not covered"}, {"sha": "3aa1522945548e1cf487580278cbb17a1c1b013e", "filename": "src/test/ui/feature-gate-exhaustive_integer_patterns.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a88feabac40537bd03aaec5d409ed43c6572b006/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88feabac40537bd03aaec5d409ed43c6572b006/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs?ref=a88feabac40537bd03aaec5d409ed43c6572b006", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let x: u8 = 0;\n-    match x { //~ ERROR non-exhaustive patterns: `_` not covered\n-        0 ..= 255 => {}\n-    }\n-}"}, {"sha": "63d98f6b5eb64bab2500d544f851a365f9a6be64", "filename": "src/test/ui/feature-gate-exhaustive_integer_patterns.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a88feabac40537bd03aaec5d409ed43c6572b006/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a88feabac40537bd03aaec5d409ed43c6572b006/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr?ref=a88feabac40537bd03aaec5d409ed43c6572b006", "patch": "@@ -1,9 +0,0 @@\n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-exhaustive_integer_patterns.rs:13:11\n-   |\n-LL |     match x { //~ ERROR non-exhaustive patterns: `_` not covered\n-   |           ^ pattern `_` not covered\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0004`."}, {"sha": "1208552d256376b26926cc98dc462502dd81619e", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,14 @@\n+#![feature(exclusive_range_pattern)]\n+\n+use std::usize::MAX;\n+\n+fn main() {\n+    match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n+        0..=MAX => {}\n+    }\n+\n+    match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n+        1..=20 => {}\n+        -5..3 => {}\n+    }\n+}"}, {"sha": "5806f6f039157cbeaf91ee0b5f82208af7aa8054", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,15 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:6:11\n+   |\n+LL |     match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n+   |           ^^^^^^ pattern `_` not covered\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n+   |\n+LL |     match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n+   |           ^^^^^^ pattern `_` not covered\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "9b19fc80e2bd67ce7db2f633a9c5a9c0b1bcf805", "filename": "src/test/ui/for/for-loop-refutable-pattern-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in `for` loop binding: `&_` not covered\n+error[E0005]: refutable pattern in `for` loop binding: `&-2147483648i32..=0i32` not covered\n   --> $DIR/for-loop-refutable-pattern-error-message.rs:12:9\n    |\n LL |     for &1 in [1].iter() {} //~ ERROR refutable pattern in `for` loop binding\n-   |         ^^ pattern `&_` not covered\n+   |         ^^ pattern `&-2147483648i32..=0i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "ad895b448dd2015ff720aea2e1051cbc5813f79a", "filename": "src/test/ui/match/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n   --> $DIR/match-non-exhaustive.rs:12:11\n    |\n LL |     match 0 { 1 => () } //~ ERROR non-exhaustive patterns\n-   |           ^ pattern `_` not covered\n+   |           ^ patterns `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:13:11"}, {"sha": "588fecbf10dd50ff7cdb36a205247358804d0c21", "filename": "src/test/ui/non-exhaustive/non-exhaustive-float-range-match.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,13 @@\n+#![allow(illegal_floating_point_literal_pattern)]\n+#![deny(unreachable_patterns)]\n+\n+fn main() {\n+    match 0.0 {\n+      0.0..=1.0 => {}\n+      _ => {} // ok\n+    }\n+\n+    match 0.0 { //~ ERROR non-exhaustive patterns\n+      0.0..=1.0 => {}\n+    }\n+}"}, {"sha": "2e285afb3804e614b2d3ca24c9a4b0ae0193d0bc", "filename": "src/test/ui/non-exhaustive/non-exhaustive-float-range-match.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,9 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-float-range-match.rs:10:11\n+   |\n+LL |     match 0.0 { //~ ERROR non-exhaustive patterns\n+   |           ^^^ pattern `_` not covered\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "99a0c5d66266030aa5189b859a6bbc545e4df5ed", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -22,7 +22,8 @@ fn main() {\n     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n+    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n+                      //  and `(_, _, 5i32..=2147483647i32)` not covered\n       (_, _, 4) => {}\n     }\n     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered"}, {"sha": "d3703a4445499358bb566d55ade6adb38d6566ce", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -16,32 +16,32 @@ error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n LL |     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n \n-error[E0004]: non-exhaustive patterns: `(_, _, _)` not covered\n+error[E0004]: non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n   --> $DIR/non-exhaustive-match.rs:25:11\n    |\n-LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n-   |           ^^^^^^^^^ pattern `(_, _, _)` not covered\n+LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n+   |           ^^^^^^^^^ patterns `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n \n error[E0004]: non-exhaustive patterns: `(a, a)` not covered\n-  --> $DIR/non-exhaustive-match.rs:28:11\n+  --> $DIR/non-exhaustive-match.rs:29:11\n    |\n LL |     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n    |           ^^^^^^^^^^^^ pattern `(a, a)` not covered\n \n error[E0004]: non-exhaustive patterns: `b` not covered\n-  --> $DIR/non-exhaustive-match.rs:32:11\n+  --> $DIR/non-exhaustive-match.rs:33:11\n    |\n LL |     match t::a { //~ ERROR non-exhaustive patterns: `b` not covered\n    |           ^^^^ pattern `b` not covered\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n-  --> $DIR/non-exhaustive-match.rs:43:11\n+  --> $DIR/non-exhaustive-match.rs:44:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n    |           ^^^^ pattern `[]` not covered\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _]` not covered\n-  --> $DIR/non-exhaustive-match.rs:56:11\n+  --> $DIR/non-exhaustive-match.rs:57:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n    |           ^^^^ pattern `[_, _, _, _]` not covered"}, {"sha": "759b63b188b35d379dcbfb392de88da61a12fae5", "filename": "src/test/ui/precise_pointer_size_matching.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,33 @@\n+// normalize-stderr-32bit: \"-2147483648isize\" -> \"$$ISIZE_MIN\"\n+// normalize-stderr-64bit: \"-9223372036854775808isize\" -> \"$$ISIZE_MIN\"\n+// normalize-stderr-32bit: \"2147483647isize\" -> \"$$ISIZE_MAX\"\n+// normalize-stderr-64bit: \"9223372036854775807isize\" -> \"$$ISIZE_MAX\"\n+// normalize-stderr-32bit: \"4294967295usize\" -> \"$$USIZE_MAX\"\n+// normalize-stderr-64bit: \"18446744073709551615usize\" -> \"$$USIZE_MAX\"\n+\n+#![feature(precise_pointer_size_matching)]\n+#![feature(exclusive_range_pattern)]\n+\n+#![deny(unreachable_patterns)]\n+\n+use std::{usize, isize};\n+\n+fn main() {\n+    match 0isize {\n+        isize::MIN ..= isize::MAX => {} // ok\n+    }\n+\n+    match 0usize {\n+        0 ..= usize::MAX => {} // ok\n+    }\n+\n+    match 0isize { //~ ERROR non-exhaustive patterns\n+        1 ..= 8 => {}\n+        -5 ..= 20 => {}\n+    }\n+\n+    match 0usize { //~ ERROR non-exhaustive patterns\n+        1 ..= 8 => {}\n+        5 ..= 20 => {}\n+    }\n+}"}, {"sha": "4acbec6c7ff1a4aaacd55e5bd04583534592a7df", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -0,0 +1,15 @@\n+error[E0004]: non-exhaustive patterns: `$ISIZE_MIN..=-6isize` and `21isize..=$ISIZE_MAX` not covered\n+  --> $DIR/precise_pointer_size_matching.rs:24:11\n+   |\n+LL |     match 0isize { //~ ERROR non-exhaustive patterns\n+   |           ^^^^^^ patterns `$ISIZE_MIN..=-6isize` and `21isize..=$ISIZE_MAX` not covered\n+\n+error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=$USIZE_MAX` not covered\n+  --> $DIR/precise_pointer_size_matching.rs:29:11\n+   |\n+LL |     match 0usize { //~ ERROR non-exhaustive patterns\n+   |           ^^^^^^ patterns `0usize` and `21usize..=$USIZE_MAX` not covered\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "a140e421a5706e811d8760724db4afae47bef5dd", "filename": "src/test/ui/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -14,5 +14,5 @@ fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n \n fn main() {\n     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-    //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n+    //~^ ERROR refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n }"}, {"sha": "42aa572789522c86b631f6556c620684e7b331de", "filename": "src/test/ui/refutable-pattern-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57ed0ddab4403a62d129f52af696420b94439d8/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr?ref=e57ed0ddab4403a62d129f52af696420b94439d8", "patch": "@@ -4,11 +4,11 @@ error[E0005]: refutable pattern in function argument: `(_, _)` not covered\n LL | fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n    |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n \n-error[E0005]: refutable pattern in local binding: `(_, _)` not covered\n+error[E0005]: refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n   --> $DIR/refutable-pattern-errors.rs:16:9\n    |\n LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n+   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(-2147483648i32..=0i32, _)` not covered\n \n error: aborting due to 2 previous errors\n "}]}