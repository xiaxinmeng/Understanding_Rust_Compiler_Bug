{"sha": "89f419370c543a8d3bc905c638c60c293401b0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZjQxOTM3MGM1NDNhOGQzYmM5MDVjNjM4YzYwYzI5MzQwMWIwZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T04:12:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T04:12:36Z"}, "message": "auto merge of #6115 : jbclements/rust/test-case-fixes, r=jbclements\n\nIn developing the grammar a few weeks ago, I fixed up a bunch of test cases that had rotted to the point that they didn't parse.", "tree": {"sha": "ad02c6b1d3943ea81d5923e2720e1d552c27e4a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad02c6b1d3943ea81d5923e2720e1d552c27e4a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89f419370c543a8d3bc905c638c60c293401b0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89f419370c543a8d3bc905c638c60c293401b0fa", "html_url": "https://github.com/rust-lang/rust/commit/89f419370c543a8d3bc905c638c60c293401b0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89f419370c543a8d3bc905c638c60c293401b0fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "html_url": "https://github.com/rust-lang/rust/commit/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558"}, {"sha": "ab1d8ead91ac23e07f4ba9a186e0ae7ddbcd2515", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1d8ead91ac23e07f4ba9a186e0ae7ddbcd2515", "html_url": "https://github.com/rust-lang/rust/commit/ab1d8ead91ac23e07f4ba9a186e0ae7ddbcd2515"}], "stats": {"total": 440, "additions": 141, "deletions": 299}, "files": [{"sha": "959164d85dd2f83e447eb04e4af611200969bfd7", "filename": "src/test/auxiliary/issue-2196-a.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2196-a.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[link(name = \"issue2196a\", vers = \"0.1\")];\n-#[crate_type = \"lib\"];\n-"}, {"sha": "1ef9334b7cdf332a08f0f4de20e36ae004a3e32a", "filename": "src/test/auxiliary/issue-2196-b.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2196-b.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[link(name = \"issue2196b\", vers = \"0.1\")];\n-#[crate_type = \"lib\"];\n-\n-use a(name = \"issue2196a\");\n-\n-type d = str;\n-impl d for d { }\n-"}, {"sha": "59c1e8108c08c9032ddf9de7a37d11285ea905b6", "filename": "src/test/auxiliary/issue-2196-c.rc", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-c.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-c.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2196-c.rc?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[link(name = \"issue2196c\", vers = \"0.1\")];\n-#[crate_type = \"lib\"];\n-\n-use b(name = \"issue2196b\");\n-#[path = \"issue-2196-d.rs\"]\n-mod d;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/auxiliary/issue-2196-d.rs", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Fauxiliary%2Fissue-2196-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2196-d.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558"}, {"sha": "1873aca5909ca1695d148f82a3d3c6ea888f4ae0", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,13 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[link (name = \"issue2378a\")];\n+#[crate_type = \"lib\"];\n+\n enum maybe<T> { just(T), nothing }\n \n-impl copy> for maybe<T> for methods<T {\n-    fn ~[](idx: uint) -> T {\n+impl <T:Copy> Index<uint,T> for maybe<T> {\n+    fn index(&self, idx: &uint) -> T {\n         match self {\n-          just(t) { t }\n-          nothing { fail!(); }\n+            &just(ref t) => copy *t,\n+            &nothing => { fail!(); }\n         }\n     }\n }"}, {"sha": "20f07a5cb546b2cac515e3ec4609bef2eecdb1c2", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,15 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use issue2378a;\n+#[link (name = \"issue2378b\")];\n+#[crate_type = \"lib\"];\n+\n+extern mod issue2378a;\n \n use issue2378a::maybe;\n-use issue2378a::methods;\n \n-type two_maybes<T> = {a: maybe<T>, b: maybe<T>};\n+struct two_maybes<T> {a: maybe<T>, b: maybe<T>}\n \n-impl copy> for two_maybes<T> for methods<T {\n-    fn ~[](idx: uint) -> (T, T) {\n-        (self.a[idx], self.b[idx])\n+impl <T:Copy> Index<uint,(T,T)> for two_maybes<T> {\n+    fn index(&self, idx: &uint) -> (T, T) {\n+        (self.a[*idx], self.b[*idx])\n     }\n }"}, {"sha": "a1b4ee7aa344589bc41cb2896d3453f4983a6a5c", "filename": "src/test/compile-fail/issue-5927.rs", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use b::d;\n \n-type t = uint;\n \n+// error-pattern:unresolved enum variant\n+\n+fn main() {\n+    let z = match 3 {\n+        x() => x\n+    };\n+    assert_eq!(z,3);\n+}", "previous_filename": "src/test/auxiliary/issue-2196-c.rs"}, {"sha": "1915f1b3a410068fda9ad351fbbad90ce5de2e91", "filename": "src/test/run-pass/issue-1466.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-1466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-1466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1466.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_CC_ZEAL=1\n-// xfail-test\n-\n-pub fn main() {\n-    error!(\"%?\", os::getenv(~\"RUST_CC_ZEAL\"));\n-    let _x = @{a: @10, b: ~true};\n-}"}, {"sha": "e3327283a8162f49f72664a7c5dced8073069328", "filename": "src/test/run-pass/issue-1989.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1989.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_CC_ZEAL=1\n-\n-enum maybe_pointy {\n-    none,\n-    p(@mut Pointy)\n-}\n-\n-struct Pointy {\n-    a : maybe_pointy,\n-    f : @fn()->(),\n-}\n-\n-fn empty_pointy() -> @mut Pointy {\n-    return @mut Pointy{\n-        a : none,\n-        f : || {},\n-    }\n-}\n-\n-pub fn main() {\n-    let v = ~[empty_pointy(), empty_pointy()];\n-    v[0].a = p(v[0]);\n-}"}, {"sha": "8a553784c5e2e71ed79cb40f12d08ade35876e8f", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,22 +8,46 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test FIXME #2263\n+// does the second one subsume the first?\n+// xfail-test\n // xfail-fast\n+\n+// notes on this test case:\n+// On Thu, Apr 18, 2013 at 6:30 PM, John Clements <clements@brinckerhoff.org> wrote:\n+// the \"issue-2185.rs\" test was xfailed with a ref to #2263. Issue #2263 is now fixed, so I tried it again, and after adding some &self parameters, I got this error:\n+// \n+// Running /usr/local/bin/rustc:\n+// issue-2185.rs:24:0: 26:1 error: conflicting implementations for a trait\n+// issue-2185.rs:24 impl iterable<uint> for @fn(&fn(uint)) {\n+// issue-2185.rs:25     fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n+// issue-2185.rs:26 }\n+// issue-2185.rs:20:0: 22:1 note: note conflicting implementation here\n+// issue-2185.rs:20 impl<A> iterable<A> for @fn(&fn(A)) {\n+// issue-2185.rs:21     fn iter(&self, blk: &fn(A)) { self(blk); }\n+// issue-2185.rs:22 }\n+// \n+// \u2026 so it looks like it's just not possible to implement both the generic iterable<uint> and iterable<A> for the type iterable<uint>. Is it okay if I just remove this test?\n+//\n+// but Niko responded:\n+// think it's fine to remove this test, just because it's old and cruft and not hard to reproduce. *However* it should eventually be possible to implement the same interface for the same type multiple times with different type parameters, it's just that our current trait implementation has accidental limitations.\n+\n+// so I'm leaving it in.\n+// actually, it looks like this is related to bug #3429. I'll rename this bug.\n+\n // This test had to do with an outdated version of the iterable trait.\n // However, the condition it was testing seemed complex enough to\n // warrant still having a test, so I inlined the old definitions.\n \n trait iterable<A> {\n-    fn iter(blk: &fn(A));\n+    fn iter(&self, blk: &fn(A));\n }\n \n impl<A> iterable<A> for @fn(&fn(A)) {\n-    fn iter(blk: &fn(A)) { self(blk); }\n+    fn iter(&self, blk: &fn(A)) { self(blk); }\n }\n \n impl iterable<uint> for @fn(&fn(uint)) {\n-    fn iter(blk: &fn(&&v: uint)) { self( |i| blk(i) ) }\n+    fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n }\n \n fn filter<A,IA:iterable<A>>(self: IA, prd: @fn(A) -> bool, blk: &fn(A)) {"}, {"sha": "3fce821561a904770e69902cb32aea70c51119a5", "filename": "src/test/run-pass/issue-2196.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-2196.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-2196.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2196.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-// aux-build:issue-2196-a.rs\n-// aux-build:issue-2196-b.rs\n-// aux-build:issue-2196-c.rc\n-\n-use c(name = \"issue2196c\");\n-use c::t;\n-\n-pub fn main() { }"}, {"sha": "619f4b4d7db8a8fd78abe7effe08e15cc40e62de", "filename": "src/test/run-pass/issue-2869.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2869.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-enum pat { pat_ident(Option<uint>) }\n-\n-fn f(pat: pat) -> bool { true }\n-\n-fn num_bindings(pat: pat) -> uint {\n-    match pat {\n-      pat_ident(_) if f(pat) { 0 }\n-      pat_ident(None) { 1 }\n-      pat_ident(Some(sub)) { sub }\n-    }\n-}\n-\n-pub fn main() {}"}, {"sha": "67877795cc0d8d7b633b0fd49941a6d13a120fbf", "filename": "src/test/run-pass/issue-3429.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "previous_filename": "src/test/run-pass/issue-1895.rs"}, {"sha": "aaff822398d6f1df4fa48cd743bbf256d6c7b507", "filename": "src/test/run-pass/issue-3480.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-3480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Fissue-3480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3480.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-type IMap<K:Copy,V:Copy> = ~[(K, V)];\n-\n-trait ImmutableMap<K:Copy,V:Copy>\n-{\n-    fn contains_key(key: K) -> bool;\n-}\n-\n-impl<K:Copy,V:Copy> IMap<K, V> : ImmutableMap<K, V>\n-{\n-    fn contains_key(key: K) -> bool {\n-        vec::find(self, |e| {e.first() == key}).is_some()\n-    }\n-}\n-\n-pub fn main() {}"}, {"sha": "57962911538def20f697ca6fb2990126d55ed3ed", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -32,7 +32,7 @@ impl Positioned<int> for Point {\n     }\n }\n \n-impl Point: Movable<int, int>;\n+impl Movable<int, int> for Point;\n \n pub fn main() {\n     let p = Point{ x: 1, y: 2};"}, {"sha": "98e60c56476d8a9e92faf20f08271b556ce150e9", "filename": "src/test/run-pass/issue2378c.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue2378c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fissue2378c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue2378c.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test -- #2378 unfixed \n // aux-build:issue2378a.rs\n // aux-build:issue2378b.rs\n+// xfail-fast - check-fast doesn't understand aux-build\n \n-use issue2378a;\n-use issue2378b;\n+extern mod issue2378a;\n+extern mod issue2378b;\n \n-use issue2378a::{just, methods};\n-use issue2378b::{methods};\n+use issue2378a::{just};\n+use issue2378b::{two_maybes};\n \n pub fn main() {\n-    let x = {a: just(3), b: just(5)};\n+    let x = two_maybes{a: just(3), b: just(5)};\n     assert!(x[0u] == (3, 5));\n }"}, {"sha": "a67f1574f64afa206202c9437cb7f94e03ef46a6", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -10,16 +10,18 @@\n \n // xfail-test\n // -*- rust -*-\n-extern mod std;\n+extern mod core;\n+use core::gc;\n+use core::gc::rustrt;\n \n-type cell = {c: @list};\n+struct cell {c: @list}\n \n enum list { link(@mut cell), nil, }\n \n pub fn main() {\n-    let first: @cell = @mut {c: @nil()};\n-    let second: @cell = @mut {c: @link(first)};\n+    let first: @cell = @mut cell{c: @nil()};\n+    let second: @cell = @mut cell{c: @link(first)};\n     first._0 = @link(second);\n-    sys.rustrt.gc();\n-    let third: @cell = @mut {c: @nil()};\n+    rustrt::gc();\n+    let third: @cell = @mut cell{c: @nil()};\n }"}, {"sha": "3d3e178f064aed29b0dfba52b1152198e4b55408", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -13,7 +13,7 @@\n \n fn starve_main(alive: chan<int>) {\n     debug!(\"signalling main\");\n-    alive <| 1;\n+    alive.recv(1);\n     debug!(\"starving main\");\n     let i: int = 0;\n     loop { i += 1; }\n@@ -22,10 +22,12 @@ fn starve_main(alive: chan<int>) {\n pub fn main() {\n     let alive: port<int> = port();\n     debug!(\"main started\");\n-    let s: task = spawn starve_main(chan(alive));\n+    let s: task = do task::spawn {\n+        starve_main(chan(alive));\n+    };\n     let i: int;\n     debug!(\"main waiting for alive signal\");\n-    alive |> i;\n+    alive.send(i);\n     debug!(\"main got alive signal\");\n     while i < 50 { debug!(\"main iterated\"); i += 1; }\n     debug!(\"main completed\");"}, {"sha": "a660b9c9ee2d5a0513c398cc7c7fb4a60787efc4", "filename": "src/test/run-pass/regions-fn-subtyping-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,20 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n // Issue #2263.\n \n // Here, `f` is a function that takes a pointer `x` and a function\n // `g`, where `g` requires its argument `y` to be in the same region\n // that `x` is in.\n-fn has_same_region(f: &fn(x: &a.int, g: &fn(y: &a.int))) {\n+fn has_same_region(f: &fn<'a>(x: &'a int, g: &fn(y: &'a int))) {\n     // `f` should be the type that `wants_same_region` wants, but\n     // right now the compiler complains that it isn't.\n     wants_same_region(f);\n }\n \n-fn wants_same_region(_f: &fn(x: &b.int, g: &fn(y: &b.int))) { \n+fn wants_same_region(_f: &fn<'b>(x: &'b int, g: &fn(y: &'b int))) { \n }\n \n pub fn main() {"}, {"sha": "0fdf4e019a775e569927225df3cb04c83fd1183d", "filename": "src/test/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,27 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n-tag a_tag<A> {\n-    a_tag(A);\n+enum a_tag<A> {\n+    a_tag(A)\n }\n \n-type t_rec = {\n+struct t_rec {\n     c8: u8,\n     t: a_tag<u64>\n-};\n+}\n \n fn mk_rec() -> t_rec {\n-    return { c8:0u8, t:a_tag(0u64) };\n+    return t_rec { c8:0u8, t:a_tag(0u64) };\n }\n \n-fn is_8_byte_aligned(&&u: a_tag<u64>) -> bool {\n+fn is_8_byte_aligned(u: &a_tag<u64>) -> bool {\n     let p = ptr::to_unsafe_ptr(u) as uint;\n     return (p & 7u) == 0u;\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_8_byte_aligned(x.t));\n+    assert!(is_8_byte_aligned(&x.t));\n }"}, {"sha": "96921f2a065c2351f9b0473a8c861e403beffa09", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,64 +8,62 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n-tag a_tag<A,B> {\n-    varA(A);\n-    varB(B);\n+enum a_tag<A,B> {\n+    varA(A),\n+    varB(B)\n }\n \n-type t_rec<A,B> = {\n+struct t_rec<A,B> {\n     chA: u8,\n     tA: a_tag<A,B>,\n     chB: u8,\n     tB: a_tag<A,B>\n-};\n+}\n \n-fn mk_rec<A:copy,B:copy>(a: A, b: B) -> t_rec<A,B> {\n-    return { chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n+fn mk_rec<A:Copy,B:Copy>(a: A, b: B) -> t_rec<A,B> {\n+    return t_rec{ chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n }\n \n-fn is_aligned<A>(amnt: uint, &&u: A) -> bool {\n+fn is_aligned<A>(amnt: uint, u: &A) -> bool {\n     let p = ptr::to_unsafe_ptr(u) as uint;\n     return (p & (amnt-1u)) == 0u;\n }\n \n-fn variant_data_is_aligned<A,B>(amnt: uint, &&u: a_tag<A,B>) -> bool {\n+fn variant_data_is_aligned<A,B>(amnt: uint, u: &a_tag<A,B>) -> bool {\n     match u {\n-      varA(a) { is_aligned(amnt, a) }\n-      varB(b) { is_aligned(amnt, b) }\n+      &varA(ref a) => is_aligned(amnt, a),\n+      &varB(ref b) => is_aligned(amnt, b)\n     }\n }\n \n pub fn main() {\n     let x = mk_rec(22u64, 23u64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n \n     let x = mk_rec(22u64, 23u32);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(4u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(4u, &x.tB));\n \n     let x = mk_rec(22u32, 23u64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(4u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(4u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n \n     let x = mk_rec(22u32, 23u32);\n-    assert!(is_aligned(4u, x.tA));\n-    assert!(variant_data_is_aligned(4u, x.tA));\n-    assert!(is_aligned(4u, x.tB));\n-    assert!(variant_data_is_aligned(4u, x.tB));\n+    assert!(is_aligned(4u, &x.tA));\n+    assert!(variant_data_is_aligned(4u, &x.tA));\n+    assert!(is_aligned(4u, &x.tB));\n+    assert!(variant_data_is_aligned(4u, &x.tB));\n \n     let x = mk_rec(22f64, 23f64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n }"}, {"sha": "43a793a34c89d6bc989bfa11b5d3faca205f0025", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,22 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-//\n-// See issue #1535\n-\n-tag a_tag {\n-    a_tag(u64);\n+enum a_tag {\n+    a_tag(u64)\n }\n \n-type t_rec = {\n+struct t_rec {\n     c8: u8,\n     t: a_tag\n-};\n+}\n \n pub fn main() {\n-    let x = {c8: 22u8, t: a_tag(44u64)};\n+    let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n     let y = fmt!(\"%?\", x);\n     debug!(\"y = %s\", y);\n-    assert!(y == \"(22, a_tag(44))\");\n+    assert_eq!(y, ~\"{c8: 22, t: a_tag(44)}\");\n }"}, {"sha": "56d384e5fdb769c9ec5568be9d6c6970b93b3ea3", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,27 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n \n-tag a_tag {\n-    a_tag(u64);\n+enum a_tag {\n+    a_tag(u64)\n }\n \n-type t_rec = {\n+struct t_rec {\n     c8: u8,\n     t: a_tag\n-};\n+}\n \n fn mk_rec() -> t_rec {\n-    return { c8:0u8, t:a_tag(0u64) };\n+    return t_rec { c8:0u8, t:a_tag(0u64) };\n }\n \n-fn is_8_byte_aligned(&&u: a_tag) -> bool {\n+fn is_8_byte_aligned(u: &a_tag) -> bool {\n     let p = ptr::to_unsafe_ptr(u) as u64;\n     return (p & 7u64) == 0u64;\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_8_byte_aligned(x.t));\n+    assert!(is_8_byte_aligned(&x.t));\n }"}, {"sha": "4228f72b7caa4c7cb9b17bc14481113ccd3b355d", "filename": "src/test/run-pass/tstate-loop-break.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-fn is_even(i: int) -> bool { (i%2) == 0 }\n-fn even(i: int) : is_even(i) -> int { i }\n-\n-fn test() {\n-    let v = 4;\n-    loop {\n-        check is_even(v);\n-        break;\n-    }\n-    even(v);\n-}\n-\n-pub fn main() {\n-    test();\n-}"}, {"sha": "134f1e4098f07e9d42fa302519faa1c255bf8b3a", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f419370c543a8d3bc905c638c60c293401b0fa/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=89f419370c543a8d3bc905c638c60c293401b0fa", "patch": "@@ -8,24 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-use sys::rustrt::size_of;\n-extern mod std;\n+extern mod core;\n+use core::sys::size_of;\n+\n+struct t {a: u8, b: i8}\n+struct u {a: u8, b: i8, c: u8}\n+struct v {a: u8, b: i8, c: v2, d: u32}\n+struct v2 {u: char, v: u8}\n+struct w {a: int, b: ()}\n+struct x {a: int, b: (), c: ()}\n+struct y {x: int}\n \n pub fn main() {\n     assert!((size_of::<u8>() == 1 as uint));\n     assert!((size_of::<u32>() == 4 as uint));\n     assert!((size_of::<char>() == 4 as uint));\n     assert!((size_of::<i8>() == 1 as uint));\n     assert!((size_of::<i32>() == 4 as uint));\n-    assert!((size_of::<{a: u8, b: i8}>() == 2 as uint));\n-    assert!((size_of::<{a: u8, b: i8, c: u8}>() == 3 as uint));\n+    assert!((size_of::<t>() == 2 as uint));\n+    assert!((size_of::<u>() == 3 as uint));\n     // Alignment causes padding before the char and the u32.\n \n-    assert!(size_of::<{a: u8, b: i8, c: {u: char, v: u8}, d: u32}>() ==\n+    assert!(size_of::<v>() ==\n                 16 as uint);\n     assert!((size_of::<int>() == size_of::<uint>()));\n-    assert!((size_of::<{a: int, b: ()}>() == size_of::<int>()));\n-    assert!((size_of::<{a: int, b: (), c: ()}>() == size_of::<int>()));\n-    assert!((size_of::<int>() == size_of::<{x: int}>()));\n+    assert!((size_of::<w>() == size_of::<int>()));\n+    assert!((size_of::<x>() == size_of::<int>()));\n+    assert!((size_of::<int>() == size_of::<y>()));\n }"}]}