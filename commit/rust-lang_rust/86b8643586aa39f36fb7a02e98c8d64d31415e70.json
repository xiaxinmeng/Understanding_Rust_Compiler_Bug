{"sha": "86b8643586aa39f36fb7a02e98c8d64d31415e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Yjg2NDM1ODZhYTM5ZjM2ZmI3YTAyZTk4YzhkNjRkMzE0MTVlNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T18:59:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T18:59:06Z"}, "message": "Auto merge of #4805 - Manishearth:rustup, r=phansch\n\nRustup to rustc 1.40.0-nightly (56237d75b 2019-11-11)\n\nchangelog: none", "tree": {"sha": "b140fa5ace9542ecac7794887cfbad3085b8bdfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b140fa5ace9542ecac7794887cfbad3085b8bdfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b8643586aa39f36fb7a02e98c8d64d31415e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b8643586aa39f36fb7a02e98c8d64d31415e70", "html_url": "https://github.com/rust-lang/rust/commit/86b8643586aa39f36fb7a02e98c8d64d31415e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b8643586aa39f36fb7a02e98c8d64d31415e70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d3b30cd7726335f8f3d39946449163a1dc6bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d3b30cd7726335f8f3d39946449163a1dc6bd7", "html_url": "https://github.com/rust-lang/rust/commit/79d3b30cd7726335f8f3d39946449163a1dc6bd7"}, {"sha": "e9a3e54910837b8cb4dce1bb476330dd3b1fd1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a3e54910837b8cb4dce1bb476330dd3b1fd1d6", "html_url": "https://github.com/rust-lang/rust/commit/e9a3e54910837b8cb4dce1bb476330dd3b1fd1d6"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "f958a40aac6a51c7c62a49850f99c136cd2d9e5e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -548,7 +548,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n         Tuple(ref substs) => substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n         Array(ty, _) | Slice(ty) => is_mutable_ty(cx, ty, span, tys),\n         RawPtr(ty::TypeAndMut { ty, mutbl }) | Ref(_, ty, mutbl) => {\n-            mutbl == hir::Mutability::MutMutable || is_mutable_ty(cx, ty, span, tys)\n+            mutbl == hir::Mutability::Mutable || is_mutable_ty(cx, ty, span, tys)\n         },\n         // calling something constitutes a side effect, so return true on all callables\n         // also never calls need not be used, so return true for them, too\n@@ -653,7 +653,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(hir::Mutability::MutMutable, ref target) => {\n+            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(hir::Mutability::Mutable, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "fcdef51c1d4d2408debf37ac534836468d5b80b7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -1506,8 +1506,8 @@ fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut\n         match &arg.kind {\n             ExprKind::AddrOf(mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n                 let meth_name = match mutability {\n-                    MutMutable => \"iter_mut\",\n-                    MutImmutable => \"iter\",\n+                    Mutability::Mutable => \"iter_mut\",\n+                    Mutability::Immutable => \"iter\",\n                 };\n                 format!(\n                     \"{}.{}()\",\n@@ -1539,14 +1539,14 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n             let (new_pat_span, kind, ty, mutbl) = match cx.tables.expr_ty(arg).kind {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n                     (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, MutImmutable),\n+                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Immutable),\n                     _ => return,\n                 },\n                 _ => return,\n             };\n             let mutbl = match mutbl {\n-                MutImmutable => \"\",\n-                MutMutable => \"_mut\",\n+                Mutability::Immutable => \"\",\n+                Mutability::Mutable => \"_mut\",\n             };\n             let arg = match arg.kind {\n                 ExprKind::AddrOf(_, ref expr) => &**expr,\n@@ -1874,7 +1874,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 self.visit_expr(rhs);\n             },\n             ExprKind::AddrOf(mutbl, ref expr) => {\n-                if mutbl == MutMutable {\n+                if mutbl == Mutability::Mutable {\n                     self.prefer_mutable = true;\n                 }\n                 self.visit_expr(expr);\n@@ -1885,7 +1885,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     let ty = self.cx.tables.expr_ty_adjusted(expr);\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = ty.kind {\n-                        if mutbl == MutMutable {\n+                        if mutbl == Mutability::Mutable {\n                             self.prefer_mutable = true;\n                         }\n                     }\n@@ -1897,7 +1897,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = ty.kind {\n-                        if mutbl == MutMutable {\n+                        if mutbl == Mutability::Mutable {\n                             self.prefer_mutable = true;\n                         }\n                     }\n@@ -2090,7 +2090,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n-                    ExprKind::AddrOf(mutability, _) if mutability == MutMutable => *state = VarState::DontWarn,\n+                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => *state = VarState::DontWarn,\n                     _ => (),\n                 }\n             }\n@@ -2172,7 +2172,9 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                             VarState::DontWarn\n                         }\n                     },\n-                    ExprKind::AddrOf(mutability, _) if mutability == MutMutable => self.state = VarState::DontWarn,\n+                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => {\n+                        self.state = VarState::DontWarn\n+                    },\n                     _ => (),\n                 }\n             }"}, {"sha": "05c7e6d62200a7c73c942e34ef373f4306512f70", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -570,7 +570,7 @@ fn is_panic_block(block: &Block) -> bool {\n fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         let mut suggs = Vec::new();\n-        let (title, msg) = if let ExprKind::AddrOf(Mutability::MutImmutable, ref inner) = ex.kind {\n+        let (title, msg) = if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = ex.kind {\n             let span = ex.span.source_callsite();\n             suggs.push((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n             ("}, {"sha": "115a47f30619ae12d4646d15dc290815126a5868", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{\n     match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n+use rustc::hir::{Expr, ExprKind, Mutability, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n                         // argument's type. All that's left is to get\n                         // replacee's path.\n                         let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(MutMutable, ref replaced) => {\n+                            ExprKind::AddrOf(Mutability::Mutable, ref replaced) => {\n                                 if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n                                     replaced_path\n                                 } else {"}, {"sha": "9fcffc770050e2d5f85e56ad6c48f2f780e87a9b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -2764,8 +2764,8 @@ fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(\n             _ => unreachable!(),\n         };\n         let method_name = match mutbl {\n-            hir::MutImmutable => \"iter\",\n-            hir::MutMutable => \"iter_mut\",\n+            hir::Mutability::Immutable => \"iter\",\n+            hir::Mutability::Mutable => \"iter_mut\",\n         };\n         (ty_name, method_name)\n     })\n@@ -2955,8 +2955,8 @@ impl SelfKind {\n             }\n \n             let trait_path = match mutability {\n-                hir::Mutability::MutImmutable => &paths::ASREF_TRAIT,\n-                hir::Mutability::MutMutable => &paths::ASMUT_TRAIT,\n+                hir::Mutability::Immutable => &paths::ASREF_TRAIT,\n+                hir::Mutability::Mutable => &paths::ASMUT_TRAIT,\n             };\n \n             let trait_def_id = match get_trait_def_id(cx, trait_path) {\n@@ -2969,9 +2969,9 @@ impl SelfKind {\n         match self {\n             Self::Value => matches_value(parent_ty, ty),\n             Self::Ref => {\n-                matches_ref(cx, hir::Mutability::MutImmutable, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty)\n+                matches_ref(cx, hir::Mutability::Immutable, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty)\n             },\n-            Self::RefMut => matches_ref(cx, hir::Mutability::MutMutable, parent_ty, ty),\n+            Self::RefMut => matches_ref(cx, hir::Mutability::Mutable, parent_ty, ty),\n             Self::No => ty != parent_ty,\n         }\n     }"}, {"sha": "24c167c42a167138910a397dc7f096e350cc6d87", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -627,8 +627,8 @@ fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr, ty: &Ty) {\n         if !in_constant(cx, e.hir_id);\n         then {\n             let (msg, sugg_fn) = match mut_ty.mutbl {\n-                Mutability::MutMutable => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n-                Mutability::MutImmutable => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n+                Mutability::Mutable => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n+                Mutability::Immutable => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n             };\n \n             let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {"}, {"sha": "60ab5d60b0b8906beecf280199f926f643d8ba27", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -57,15 +57,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             // Let's ignore the generated code.\n             intravisit::walk_expr(self, arg);\n             intravisit::walk_expr(self, body);\n-        } else if let hir::ExprKind::AddrOf(hir::MutMutable, ref e) = expr.kind {\n-            if let hir::ExprKind::AddrOf(hir::MutMutable, _) = e.kind {\n+        } else if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, ref e) = expr.kind {\n+            if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, _) = e.kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,\n                     expr.span,\n                     \"generally you want to avoid `&mut &mut _` if possible\",\n                 );\n-            } else if let ty::Ref(_, _, hir::MutMutable) = self.cx.tables.expr_ty(e).kind {\n+            } else if let ty::Ref(_, _, hir::Mutability::Mutable) = self.cx.tables.expr_ty(e).kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,\n@@ -81,14 +81,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             _,\n             hir::MutTy {\n                 ty: ref pty,\n-                mutbl: hir::MutMutable,\n+                mutbl: hir::Mutability::Mutable,\n             },\n         ) = ty.kind\n         {\n             if let hir::TyKind::Rptr(\n                 _,\n                 hir::MutTy {\n-                    mutbl: hir::MutMutable, ..\n+                    mutbl: hir::Mutability::Mutable,\n+                    ..\n                 },\n             ) = pty.kind\n             {"}, {"sha": "8caa486ffdc568e99a10d8aba28cdac4db5e5d64", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -55,11 +55,12 @@ fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], typ\n             let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n             for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                 match parameter.kind {\n-                    ty::Ref(_, _, MutImmutable)\n+                    ty::Ref(_, _, Mutability::Immutable)\n                     | ty::RawPtr(ty::TypeAndMut {\n-                        mutbl: MutImmutable, ..\n+                        mutbl: Mutability::Immutable,\n+                        ..\n                     }) => {\n-                        if let ExprKind::AddrOf(MutMutable, _) = argument.kind {\n+                        if let ExprKind::AddrOf(Mutability::Mutable, _) = argument.kind {\n                             span_lint(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,"}, {"sha": "6d955331add27d552296112c2cb422f7f07f627f", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -128,15 +128,15 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         match expr.kind {\n-            ExprKind::AddrOf(Mutability::MutMutable, _) => {\n+            ExprKind::AddrOf(Mutability::Mutable, _) => {\n                 self.found = true;\n                 return;\n             },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.tables.adjustments().get(expr.hir_id) {\n                     if adj\n                         .iter()\n-                        .any(|a| matches!(a.target.kind, ty::Ref(_, _, Mutability::MutMutable)))\n+                        .any(|a| matches!(a.target.kind, ty::Ref(_, _, Mutability::Mutable)))\n                     {\n                         self.found = true;\n                         return;"}, {"sha": "c2b1b896cf4dbcae7e273316de9a07f337126eae", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -4,7 +4,7 @@\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, MutImmutable, Pat, PatKind};\n+use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if e.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n-        if let ExprKind::AddrOf(MutImmutable, ref inner) = e.kind {\n+        if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = e.kind {\n             if let ty::Ref(..) = cx.tables.expr_ty(inner).kind {\n                 for adj3 in cx.tables.expr_adjustments(e).windows(3) {\n                     if let [Adjustment {\n@@ -82,10 +82,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if_chain! {\n             if let PatKind::Binding(BindingAnnotation::Ref, .., name, _) = pat.kind;\n             if let ty::Ref(_, tam, mutbl) = cx.tables.pat_ty(pat).kind;\n-            if mutbl == MutImmutable;\n+            if mutbl == Mutability::Immutable;\n             if let ty::Ref(_, _, mutbl) = tam.kind;\n             // only lint immutable refs, because borrowed `&mut T` cannot be moved out\n-            if mutbl == MutImmutable;\n+            if mutbl == Mutability::Immutable;\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "aab1940683c52570ea15dcd5bc38d39e216da86a", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -4,7 +4,7 @@\n \n use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, MutImmutable, Node, Pat, PatKind};\n+use rustc::hir::{BindingAnnotation, Mutability, Node, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n \n         if_chain! {\n             // Only lint immutable refs, because `&mut ref T` may be useful.\n-            if let PatKind::Ref(ref sub_pat, MutImmutable) = pat.kind;\n+            if let PatKind::Ref(ref sub_pat, Mutability::Immutable) = pat.kind;\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n             if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.kind;"}, {"sha": "7c9e8d2946bfb23949469c83067b119af4824d5a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -150,7 +150,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n     let fn_ty = sig.skip_binder();\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n-        if let ty::Ref(_, ty, MutImmutable) = ty.kind {\n+        if let ty::Ref(_, ty, Mutability::Immutable) = ty.kind {\n             if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n@@ -254,15 +254,15 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n     }\n \n     if let FunctionRetTy::Return(ref ty) = decl.output {\n-        if let Some((out, MutMutable, _)) = get_rptr_lm(ty) {\n+        if let Some((out, Mutability::Mutable, _)) = get_rptr_lm(ty) {\n             let mut immutables = vec![];\n             for (_, ref mutbl, ref argspan) in decl\n                 .inputs\n                 .iter()\n                 .filter_map(|ty| get_rptr_lm(ty))\n                 .filter(|&(lt, _, _)| lt.name == out.name)\n             {\n-                if *mutbl == MutMutable {\n+                if *mutbl == Mutability::Mutable {\n                     return;\n                 }\n                 immutables.push(*argspan);"}, {"sha": "f12fd6bb0d68178862171fc7b98abf060b09f54d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         ),\n                         |db| {\n                             let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                            let (deref, cast) = if mutbl == Mutability::MutMutable {\n+                            let (deref, cast) = if mutbl == Mutability::Mutable {\n                                 (\"&mut *\", \"*mut\")\n                             } else {\n                                 (\"&*\", \"*const\")\n@@ -409,7 +409,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             if let ty::Uint(ast::UintTy::U8) = slice_ty.kind;\n                             if from_mutbl == to_mutbl;\n                             then {\n-                                let postfix = if from_mutbl == Mutability::MutMutable {\n+                                let postfix = if from_mutbl == Mutability::Mutable {\n                                     \"_mut\"\n                                 } else {\n                                     \"\"\n@@ -449,7 +449,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             let sugg_paren = arg\n                                                 .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n                                                 .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                            let sugg = if to_mutbl == Mutability::MutMutable {\n+                                            let sugg = if to_mutbl == Mutability::Mutable {\n                                                 sugg_paren.mut_addr_deref()\n                                             } else {\n                                                 sugg_paren.addr_deref()"}, {"sha": "616568f36eebe1fc0f28a62a17025d60b99b6026", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n             }\n \n             if_chain! {\n-                if let ty::Ref(input_lt, ty, Mutability::MutImmutable) = ty.kind;\n+                if let ty::Ref(input_lt, ty, Mutability::Immutable) = ty.kind;\n                 if !output_lts.contains(&input_lt);\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());"}, {"sha": "6a105a87e6232e390b79548aa0a237282f2c88f9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -393,7 +393,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n                     } else {\n                         format!(\"{} \", lt.name.ident().as_str())\n                     };\n-                    let mutopt = if mut_ty.mutbl == Mutability::MutMutable {\n+                    let mutopt = if mut_ty.mutbl == Mutability::Mutable {\n                         \"mut \"\n                     } else {\n                         \"\"\n@@ -2377,9 +2377,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutMutable, .. }) = t.kind;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::Mutable, .. }) = t.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutImmutable, .. }) = t.kind;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::Immutable, .. }) = t.kind;\n             if let ty::Ref(..) = cx.tables.node_type(e.hir_id).kind;\n             then {\n                 span_lint("}, {"sha": "71cf6c03e5ca426c55cb85a87ea78d5518260a78", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n             },\n             ExprKind::AddrOf(mutability, ref inner) => {\n                 let inner_pat = self.next(\"inner\");\n-                println!(\"AddrOf({:?}, ref {}) = {};\", mutability, inner_pat, current);\n+                println!(\"AddrOf(Mutability::{:?}, ref {}) = {};\", mutability, inner_pat, current);\n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n             },"}, {"sha": "c17f301d8705f086768cf965310650eaccff5cb3", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -447,8 +447,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             ExprKind::Closure(cap, _, eid, _, _) => {\n                 match cap {\n-                    CaptureClause::CaptureByValue => 0,\n-                    CaptureClause::CaptureByRef => 1,\n+                    CaptureBy::Value => 0,\n+                    CaptureBy::Ref => 1,\n                 }\n                 .hash(&mut self.s);\n                 // closures inherit TypeckTables"}, {"sha": "5bf105582216bf8991644c69c1ae7e76fc0b2155", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -145,7 +145,7 @@ impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let hir::ItemKind::Static(ref ty, MutImmutable, _) = item.kind {\n+        if let hir::ItemKind::Static(ref ty, Mutability::Immutable, _) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 self.declared_lints.insert(item.ident.name, item.span);\n             }\n@@ -198,7 +198,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n         _,\n         MutTy {\n             ty: ref inner,\n-            mutbl: MutImmutable,\n+            mutbl: Mutability::Immutable,\n         },\n     ) = ty.kind\n     {"}, {"sha": "e61d3bb8ce154093b94f77f798c5c40c36f7dee6", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8643586aa39f36fb7a02e98c8d64d31415e70/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86b8643586aa39f36fb7a02e98c8d64d31415e70/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=86b8643586aa39f36fb7a02e98c8d64d31415e70", "patch": "@@ -22,7 +22,7 @@ if_chain! {\n     if let ExprKind::Path(ref path2) = func1.kind;\n     if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n     if args1.len() == 1;\n-    if let ExprKind::AddrOf(MutMutable, ref inner) = args1[0].kind;\n+    if let ExprKind::AddrOf(Mutability::Mutable, ref inner) = args1[0].kind;\n     if let ExprKind::Path(ref path3) = inner.kind;\n     if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;"}]}