{"sha": "ed2be6fa89428b6c0a43e41a8906d29bc78f62d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmJlNmZhODk0MjhiNmMwYTQzZTQxYTg5MDZkMjliYzc4ZjYyZDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-12T16:28:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:14Z"}, "message": "rustc: move the FORCE_IMPL_FILENAME_LINE handling into LocalPathPrinter.", "tree": {"sha": "5b5a62e14acb8e00afb33ab27eb6c48b7bcf1d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5a62e14acb8e00afb33ab27eb6c48b7bcf1d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0", "html_url": "https://github.com/rust-lang/rust/commit/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "238616813974babc53cb85aaa8e102df119d7f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/238616813974babc53cb85aaa8e102df119d7f0f", "html_url": "https://github.com/rust-lang/rust/commit/238616813974babc53cb85aaa8e102df119d7f0f"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "87859ac00c396f09992274205b8563a2aa47d2c2", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2be6fa89428b6c0a43e41a8906d29bc78f62d0/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=ed2be6fa89428b6c0a43e41a8906d29bc78f62d0", "patch": "@@ -91,7 +91,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n             }\n \n             DefPathData::Impl => {\n-                self.default_print_impl_path(def_id)\n+                self.print_impl_path(def_id)\n             }\n \n             // Unclear if there is any value in distinguishing these.\n@@ -132,18 +132,6 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         debug!(\"default_print_impl_path: impl_def_id={:?}\", impl_def_id);\n         let parent_def_id = self.tcx.parent_def_id(impl_def_id).unwrap();\n \n-        // Always use types for non-local impls, where types are always\n-        // available, and filename/line-number is mostly uninteresting.\n-        let use_types = !impl_def_id.is_local() || {\n-            // Otherwise, use filename/line-number if forced.\n-            let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n-            !force_no_types\n-        };\n-\n-        if !use_types {\n-            return self.default_print_impl_path_fallback(impl_def_id);\n-        }\n-\n         // Decide whether to print the parent path for the impl.\n         // Logically, since impls are global, it's never needed, but\n         // users may find it useful. Currently, we omit the parent if\n@@ -210,19 +198,6 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n             }\n         }\n     }\n-\n-    fn default_print_impl_path_fallback(&mut self, impl_def_id: DefId) -> P::Path {\n-        // If no type info is available, fall back to\n-        // pretty printing some span information. This should\n-        // only occur very early in the compiler pipeline.\n-        // FIXME(eddyb) this should just be using `tcx.def_span(impl_def_id)`\n-        let parent_def_id = self.tcx.parent_def_id(impl_def_id).unwrap();\n-        let path = self.print_item_path(parent_def_id);\n-        let hir_id = self.tcx.hir().as_local_hir_id(impl_def_id).unwrap();\n-        let item = self.tcx.hir().expect_item_by_hir_id(hir_id);\n-        let span_str = self.tcx.sess.source_map().span_to_string(item.span);\n-        self.path_append(path, &format!(\"<impl at {}>\", span_str))\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -291,6 +266,9 @@ pub trait ItemPathPrinter: Sized {\n     fn print_item_path(self: &mut PrintCx<'_, '_, '_, Self>, def_id: DefId) -> Self::Path {\n         self.default_print_item_path(def_id)\n     }\n+    fn print_impl_path(self: &mut PrintCx<'_, '_, '_, Self>, impl_def_id: DefId) -> Self::Path {\n+        self.default_print_impl_path(impl_def_id)\n+    }\n \n     fn path_crate(self: &mut PrintCx<'_, '_, '_, Self>, cnum: CrateNum) -> Self::Path;\n     fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path;\n@@ -470,6 +448,28 @@ impl ItemPathPrinter for LocalPathPrinter {\n         self.try_print_visible_item_path(def_id)\n             .unwrap_or_else(|| self.default_print_item_path(def_id))\n     }\n+    fn print_impl_path(self: &mut PrintCx<'_, '_, '_, Self>, impl_def_id: DefId) -> Self::Path {\n+        // Always use types for non-local impls, where types are always\n+        // available, and filename/line-number is mostly uninteresting.\n+        let use_types = !impl_def_id.is_local() || {\n+            // Otherwise, use filename/line-number if forced.\n+            let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n+            !force_no_types\n+        };\n+\n+        if !use_types {\n+            // If no type info is available, fall back to\n+            // pretty printing some span information. This should\n+            // only occur very early in the compiler pipeline.\n+            // FIXME(eddyb) this should just be using `tcx.def_span(impl_def_id)`\n+            let parent_def_id = self.tcx.parent_def_id(impl_def_id).unwrap();\n+            let path = self.print_item_path(parent_def_id);\n+            let span = self.tcx.def_span(impl_def_id);\n+            return self.path_append(path, &format!(\"<impl at {:?}>\", span));\n+        }\n+\n+        self.default_print_impl_path(impl_def_id)\n+    }\n \n     fn path_crate(self: &mut PrintCx<'_, '_, '_, Self>, cnum: CrateNum) -> Self::Path {\n         if cnum == LOCAL_CRATE {"}]}