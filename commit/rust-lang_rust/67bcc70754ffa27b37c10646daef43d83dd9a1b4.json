{"sha": "67bcc70754ffa27b37c10646daef43d83dd9a1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YmNjNzA3NTRmZmEyN2IzN2MxMDY0NmRhZWY0M2Q4M2RkOWExYjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:02:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:07:05Z"}, "message": "rustboot: Emit an error instead of asserting in trans when a T is passed by value", "tree": {"sha": "b2250c157fe5e7c9b359b06fa6468f9f34986c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2250c157fe5e7c9b359b06fa6468f9f34986c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67bcc70754ffa27b37c10646daef43d83dd9a1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67bcc70754ffa27b37c10646daef43d83dd9a1b4", "html_url": "https://github.com/rust-lang/rust/commit/67bcc70754ffa27b37c10646daef43d83dd9a1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67bcc70754ffa27b37c10646daef43d83dd9a1b4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b914e0e74cd2e32f063cc5f90c066d55eaf88619", "url": "https://api.github.com/repos/rust-lang/rust/commits/b914e0e74cd2e32f063cc5f90c066d55eaf88619", "html_url": "https://github.com/rust-lang/rust/commit/b914e0e74cd2e32f063cc5f90c066d55eaf88619"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "21aecaf1455b2693099efdb3b935c349d2cb02f7", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1308,6 +1308,23 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n         Common.err (Some item_id) \"this function must return a value\"\n     in\n \n+    let check_fn_ty_validity item_id (ty_sig, _) =\n+      let check_input_slot i slot =\n+        match slot with\n+            {\n+              Ast.slot_ty = Some (Ast.TY_param _);\n+              Ast.slot_mode = Ast.MODE_local\n+            } ->\n+              Common.err\n+                (Some item_id)\n+                \"parameter %d of this type-parametric function must be \\\n+                passed by reference, not by value\"\n+                (i + 1)\n+          | _ -> ()\n+      in\n+      Array.iteri check_input_slot ty_sig.Ast.sig_input_slots\n+    in\n+\n     let visit_mod_item_pre _ _ item =\n       let { Common.node = item; Common.id = item_id } = item in\n       match item.Ast.decl_item with\n@@ -1316,7 +1333,9 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n             let fn_ty = Hashtbl.find cx.Semant.ctxt_all_item_types item_id in\n             begin\n               match fn_ty with\n-                  Ast.TY_fn ty_fn -> push_fn_ctx_of_ty_fn ty_fn\n+                  Ast.TY_fn ty_fn ->\n+                    check_fn_ty_validity item_id ty_fn;\n+                    push_fn_ctx_of_ty_fn ty_fn\n                 | _ ->\n                   Common.bug ()\n                     \"Type.visit_mod_item_pre: fn item didn't have a fn type\""}, {"sha": "da8d3c0aff71deed0b37c49d9cf9c8bd7cbcafdd", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -12,7 +12,7 @@ tag list[T] {\n     nil;\n }\n \n-fn foldl[T,U](&list[T] ls, U u, fn(&T t, U u) -> U f) -> U {\n+fn foldl[T,U](&list[T] ls, &U u, fn(&T t, U u) -> U f) -> U {\n   alt(ls) {\n     case (cons[T](?hd, ?tl)) {\n       auto u_ = f(hd, u);"}, {"sha": "dcdc4b035ab3b9e6dacf1dcbbb083e2479f2bfa3", "filename": "src/test/run-pass/drop-parametric-closure-with-bound-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,5 +1,5 @@\n-fn f[T](@int i, T t) {}\n+fn f[T](@int i, &T t) {}\n \n fn main() {\n   auto x = bind f[char](@0xdeafbeef, _);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "61085eb5485f3e36804d0ab6512eee74370e5f17", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,8 +1,8 @@\n-fn id[T](T t) -> T {\n+fn id[T](&T t) -> T {\n   ret t;\n }\n \n fn main() {\n   auto f = bind id[int](_);\n   check (f(10) == 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "54c3f9564ecf006d825ba146effa08ae108b7a65", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,8 +1,8 @@\n-fn g[X](X x) -> X {\n+fn g[X](&X x) -> X {\n   ret x;\n }\n \n-fn f[T](T t) -> tup(T,T) {\n+fn f[T](&T t) -> tup(T,T) {\n   type pair = tup(T,T);\n   let pair x = tup(t,t);\n   ret g[pair](x);"}, {"sha": "6cf16802f5a83d18677c8b18171c2f1ea60fe78c", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,9 +1,9 @@\n-fn f[T](T t) {\n+fn f[T](&T t) {\n   log \"dropping\";\n }\n \n fn main() {\n   type r = rec(@int x, @int y);\n   auto x = rec(x=@10, y=@12);\n   f[r](x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0ec7020cdaddaf75f62da5108fc6be393c77b31d", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,8 +1,8 @@\n type tupbox[T] = tup(@T);\n type recbox[T] = rec(@T x);\n \n-fn tuplift[T](T t) -> tupbox[T] { ret tup(@t); }\n-fn reclift[T](T t) -> recbox[T] { ret rec(x=@t); }\n+fn tuplift[T](&T t) -> tupbox[T] { ret tup(@t); }\n+fn reclift[T](&T t) -> recbox[T] { ret rec(x=@t); }\n \n fn main() {\n   let int foo = 17;"}, {"sha": "238ef2d1aea2a663f9432a79e0a5fec9a9ef5831", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-fn id[T](T x) -> T {\n+fn id[T](&T x) -> T {\n    ret x;\n }\n "}, {"sha": "d22886b4a6e6b51a3a20f335e9a656c1baef8002", "filename": "src/test/run-pass/generic-iter-frame.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -4,7 +4,7 @@ iter i() -> () {\n   put ();\n }\n \n-fn foo[T](T t) {\n+fn foo[T](&T t) {\n   let int x = 10;\n   for each (() j in i()) {\n     log x;"}, {"sha": "efd55d79b73fe08c51c19a56c76babb748b66c9c", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -1,7 +1,7 @@\n-fn leaky[T](T t) {\n+fn leaky[T](&T t) {\n }\n \n fn main() {\n   auto x = @10;\n   leaky[@int](x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ab45b3975595127dfb2d96ee9314e8d6d5401e0d", "filename": "src/test/run-pass/lib-deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Flib-deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bcc70754ffa27b37c10646daef43d83dd9a1b4/src%2Ftest%2Frun-pass%2Flib-deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-deque.rs?ref=67bcc70754ffa27b37c10646daef43d83dd9a1b4", "patch": "@@ -92,7 +92,7 @@ fn test_boxes(@int a, @int b, @int c, @int d) {\n \n type eqfn[T] = fn(T a, T b) -> bool;\n \n-fn test_parameterized[T](eqfn[T] e, T a, T b, T c, T d) {\n+fn test_parameterized[T](eqfn[T] e, &T a, &T b, &T c, &T d) {\n   let deque.t[T] deq = deque.create[T]();\n   check (deq.size() == 0u);\n   deq.add_front(a);"}]}