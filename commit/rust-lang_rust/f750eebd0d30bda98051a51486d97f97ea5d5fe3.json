{"sha": "f750eebd0d30bda98051a51486d97f97ea5d5fe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NTBlZWJkMGQzMGJkYTk4MDUxYTUxNDg2ZDk3Zjk3ZWE1ZDVmZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-14T12:54:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-14T12:54:00Z"}, "message": "Merge #10232\n\n10232: internal: Add more tests for ide functionality in attributed items r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/9868\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "deb75c2b63445e6a35381c62fb2369ee65860c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb75c2b63445e6a35381c62fb2369ee65860c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f750eebd0d30bda98051a51486d97f97ea5d5fe3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQJtoCRBK7hj4Ov3rIwAAu5gIAJMxrr52f+TBtAbZc3r7Ivm/\nlI2ayLY/JXQheSB+5+TaNUntkdAgMmZJ3Uf1sgTCk5JMzJaxeoSHn3FqaEGJpTO7\nVUUGxMaj17xxA9qXDfhCQn7bbun+dsRCaZe8odU+Is/dPZJbEfp1BDBx1EocJYoK\nh+yjCp/VoqOT/b5z726trlTdDXPogPbSaFnjmfdPWWHRXiUvngC11X2jA1qiZu/+\nbSG73UE/z+Y+lbEGyNny/M8D4wr0yZiKepaswmFawlJpBfQVDXOcMxxWNROQDKvU\ngwpGVddapC7gbEL98J4V7zrjacT79fZGsHRadiEvVRDVvjWIM8Mc6MPo4dFGpqE=\n=rERq\n-----END PGP SIGNATURE-----\n", "payload": "tree deb75c2b63445e6a35381c62fb2369ee65860c35\nparent e896def412dded3837d72c7c2e48c726ab7e357e\nparent 0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631624040 +0000\ncommitter GitHub <noreply@github.com> 1631624040 +0000\n\nMerge #10232\n\n10232: internal: Add more tests for ide functionality in attributed items r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/9868\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f750eebd0d30bda98051a51486d97f97ea5d5fe3", "html_url": "https://github.com/rust-lang/rust/commit/f750eebd0d30bda98051a51486d97f97ea5d5fe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f750eebd0d30bda98051a51486d97f97ea5d5fe3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e896def412dded3837d72c7c2e48c726ab7e357e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e896def412dded3837d72c7c2e48c726ab7e357e", "html_url": "https://github.com/rust-lang/rust/commit/e896def412dded3837d72c7c2e48c726ab7e357e"}, {"sha": "0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "html_url": "https://github.com/rust-lang/rust/commit/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56"}], "stats": {"total": 301, "additions": 250, "deletions": 51}, "files": [{"sha": "1aa0d61fe6123fd1a0a4c55cca769f471beff2a4", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -16,7 +16,6 @@ use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n-    algo::find_node_at_offset,\n     ast::{self, GenericParamsOwner, LoopBodyOwner},\n     match_ast, AstNode, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextSize,\n };\n@@ -241,10 +240,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> Option<N> {\n-        if let Some(it) = find_node_at_offset(node, offset) {\n-            return Some(it);\n-        }\n-\n         self.imp.descend_node_at_offset(node, offset).flatten().find_map(N::cast)\n     }\n \n@@ -567,16 +562,25 @@ impl<'db> SemanticsImpl<'db> {\n \n     // Note this return type is deliberate as [`find_nodes_at_offset_with_descend`] wants to stop\n     // traversing the inner iterator when it finds a node.\n+    // The outer iterator is over the tokens descendants\n+    // The inner iterator is the ancestors of a descendant\n     fn descend_node_at_offset(\n         &self,\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> impl Iterator<Item = impl Iterator<Item = SyntaxNode> + '_> + '_ {\n-        // Handle macro token cases\n         node.token_at_offset(offset)\n             .map(move |token| self.descend_into_macros(token))\n-            .map(|it| it.into_iter().map(move |it| self.token_ancestors_with_macros(it)))\n-            .flatten()\n+            .map(|descendants| {\n+                descendants.into_iter().map(move |it| self.token_ancestors_with_macros(it))\n+            })\n+            // re-order the tokens from token_at_offset by returning the ancestors with the smaller first nodes first\n+            // See algo::ancestors_at_offset, which uses the same approach\n+            .kmerge_by(|left, right| {\n+                left.clone()\n+                    .map(|node| node.text_range().len())\n+                    .lt(right.clone().map(|node| node.text_range().len()))\n+            })\n     }\n \n     fn original_range(&self, node: &SyntaxNode) -> FileRange {\n@@ -594,11 +598,14 @@ impl<'db> SemanticsImpl<'db> {\n     fn token_ancestors_with_macros(\n         &self,\n         token: SyntaxToken,\n-    ) -> impl Iterator<Item = SyntaxNode> + '_ {\n+    ) -> impl Iterator<Item = SyntaxNode> + Clone + '_ {\n         token.parent().into_iter().flat_map(move |parent| self.ancestors_with_macros(parent))\n     }\n \n-    fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n+    fn ancestors_with_macros(\n+        &self,\n+        node: SyntaxNode,\n+    ) -> impl Iterator<Item = SyntaxNode> + Clone + '_ {\n         let node = self.find_file(node);\n         node.ancestors_with_macros(self.db.upcast()).map(|it| it.value)\n     }"}, {"sha": "723c7a1727b2f65ca9bd628dd06d2200a95514a5", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -131,8 +131,12 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n         let _p = profile::span(\"module_to_def\");\n-        let parent_declaration =\n-            src.syntax().cloned().ancestors_with_macros(self.db.upcast()).skip(1).find_map(|it| {\n+        let parent_declaration = src\n+            .syntax()\n+            .cloned()\n+            .ancestors_with_macros_skip_attr_item(self.db.upcast())\n+            .skip(1)\n+            .find_map(|it| {\n                 let m = ast::Module::cast(it.value.clone())?;\n                 Some(it.with_value(m))\n             });\n@@ -306,7 +310,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             if let Some(res) = self.container_to_def(container) {\n                 return Some(res);\n             }\n@@ -370,7 +375,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_generic_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n@@ -388,7 +394,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_pat_or_label_container(&mut self, src: InFile<&SyntaxNode>) -> Option<DefWithBodyId> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n                     ast::Const(it) => self.const_to_def(container.with_value(it))?.into(),"}, {"sha": "8bb56e0700dbc247b4adf6cf5a031541cbb57321", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -186,6 +186,17 @@ impl HirFileId {\n         }\n     }\n \n+    /// Return whether this file is an include macro\n+    pub fn is_attr_macro(&self, db: &dyn db::AstDatabase) -> bool {\n+        match self.0 {\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                matches!(loc.kind, MacroCallKind::Attr { .. })\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_macro(self) -> bool {\n         matches!(self.0, HirFileIdRepr::MacroFile(_))\n     }\n@@ -525,7 +536,7 @@ impl InFile<SyntaxNode> {\n     pub fn ancestors_with_macros(\n         self,\n         db: &dyn db::AstDatabase,\n-    ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n+    ) -> impl Iterator<Item = InFile<SyntaxNode>> + Clone + '_ {\n         iter::successors(Some(self), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n             None => {\n@@ -534,6 +545,26 @@ impl InFile<SyntaxNode> {\n             }\n         })\n     }\n+\n+    /// Skips the attributed item that caused the macro invocation we are climbing up\n+    pub fn ancestors_with_macros_skip_attr_item(\n+        self,\n+        db: &dyn db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n+        iter::successors(Some(self), move |node| match node.value.parent() {\n+            Some(parent) => Some(node.with_value(parent)),\n+            None => {\n+                let parent_node = node.file_id.call_node(db)?;\n+                if node.file_id.is_attr_macro(db) {\n+                    // macro call was an attributed item, skip it\n+                    // FIXME: does this fail if this is a direct expansion of another macro?\n+                    parent_node.map(|node| node.parent()).transpose()\n+                } else {\n+                    Some(parent_node)\n+                }\n+            }\n+        })\n+    }\n }\n \n impl<'a> InFile<&'a SyntaxNode> {"}, {"sha": "079f847030f54e6395e6ebb0caf0d802cf23dc32", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -31,6 +31,7 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n         SyntaxKind::IDENT => 1,\n         _ => 0,\n     })?;\n+\n     let descended = sema.descend_into_macros(tok.clone());\n     if let Some(attr) = descended.ancestors().find_map(ast::Attr::cast) {\n         if let Some((path, tt)) = attr.as_simple_call() {\n@@ -45,6 +46,9 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n             }\n         }\n     }\n+\n+    // FIXME: Intermix attribute and bang! expansions\n+    // currently we only recursively expand one of the two types\n     let mut expanded = None;\n     let mut name = None;\n     for node in tok.ancestors() {"}, {"sha": "7cce99c3b0b2d82ff59d03ef7dcb9537c089d01b", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -413,6 +413,22 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_hl_local_in_attr() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+#[proc_macros::identity]\n+fn foo() {\n+    let mut bar = 3;\n+         // ^^^ write\n+    bar$0;\n+ // ^^^ read\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_multi_macro_usage() {\n         check("}, {"sha": "7058f051b82bf2359d3adf87f9a9716abf6c2fbc", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -1730,6 +1730,28 @@ id! {\n         );\n     }\n \n+    #[test]\n+    fn test_hover_through_attr() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+#[proc_macros::identity]\n+fn foo$0() {}\n+\"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                fn foo()\n+                ```\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_through_expr_in_macro() {\n         check("}, {"sha": "c39d00b6e7da342713ca1906183e09995f253df4", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -1507,4 +1507,23 @@ fn f() {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn attr_expanded() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+\n+#[proc_macros::identity]\n+fn func$0() {\n+    func();\n+}\n+\"#,\n+            expect![[r#\"\n+                func Function FileId(0) 26..51 29..33\n+\n+                FileId(0) 42..46\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "a495e6c5432d93842ed2e6c0a0ed14d223422d2e", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -1880,4 +1880,26 @@ fn main() { f$0()  }\n             \"error: No identifier available to rename\",\n         )\n     }\n+\n+    #[test]\n+    fn attributed_item() {\n+        check(\n+            \"function\",\n+            r#\"\n+//- proc_macros: identity\n+\n+#[proc_macros::identity]\n+fn func$0() {\n+    func();\n+}\n+\"#,\n+            r#\"\n+\n+#[proc_macros::identity]\n+fn function() {\n+    function();\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "376384670a299534e3e7bcd51824d6959579fa24", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -1737,6 +1737,88 @@ fn t1() {}\n         );\n     }\n \n+    #[test]\n+    fn attributed_module() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+//- /lib.rs\n+$0\n+#[proc_macros::identity]\n+mod module {\n+    #[test]\n+    fn t0() {}\n+    #[test]\n+    fn t1() {}\n+}\n+\"#,\n+            &[TestMod, Test, Test],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 26..94,\n+                            focus_range: 30..36,\n+                            name: \"module\",\n+                            kind: Module,\n+                            description: \"mod module\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"module\",\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 43..65,\n+                            focus_range: 58..60,\n+                            name: \"t0\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"module::t0\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 70..92,\n+                            focus_range: 85..87,\n+                            name: \"t1\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"module::t1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn find_no_tests() {\n         check_tests("}, {"sha": "448b30aa849ff37358c888afd009e3755da000aa", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -51,14 +51,15 @@\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"builtin_attr attribute\">identity</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n "}, {"sha": "6b08e916a95fa7d86e44d8fb89b99a88fbe93d7d", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -10,6 +10,7 @@ use crate::{fixture, FileRange, HlTag, TextRange};\n fn test_highlighting() {\n     check_highlighting(\n         r#\"\n+//- proc_macros: identity\n //- /main.rs crate:main deps:foo\n use inner::{self as inner_mod};\n mod inner {}\n@@ -23,6 +24,7 @@ pub mod marker {\n     pub trait Copy {}\n }\n \n+#[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]\n     pub trait FnOnce<Args> {}"}, {"sha": "a84e6b3ba40d2123668dca8a6c8b538d063c1421", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f750eebd0d30bda98051a51486d97f97ea5d5fe3/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=f750eebd0d30bda98051a51486d97f97ea5d5fe3", "patch": "@@ -232,50 +232,36 @@ impl Definition {\n         let file_id = file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n-            let range = match var.parent(db) {\n-                DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n-                DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n-                DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n+            let def = match var.parent(db) {\n+                DefWithBody::Function(f) => f.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Const(c) => c.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n             };\n-            return match range {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match def {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::SelfType(impl_) = self {\n-            return match impl_.source(db).map(|src| src.value.syntax().text_range()) {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match impl_.source(db).map(|src| src.syntax().cloned()) {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n-            let range = match param.parent(db) {\n-                hir::GenericDef::Function(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Adt(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Trait(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::TypeAlias(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Impl(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Variant(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Const(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n+            let def = match param.parent(db) {\n+                hir::GenericDef::Function(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Adt(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Trait(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::TypeAlias(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Impl(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Variant(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Const(it) => it.source(db).map(|src| src.syntax().cloned()),\n             };\n-            return match range {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match def {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }"}]}