{"sha": "7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NTA0MDJjNWVhZjllZDBhNzNjYjM0Yzg0ODNkZjI0NWMzNmFjN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-29T14:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-29T14:07:32Z"}, "message": "Auto merge of #83609 - klensy:c-str, r=m-ou-se\n\nffi::c_str removed bound checks on as_bytes, to_bytes\n\nThis removes bound checks on CString::as_bytes() and CStr::to_bytes() and adds test.", "tree": {"sha": "e1690f6e3ca41a9e66ece5b1b9347e0be6e56f68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1690f6e3ca41a9e66ece5b1b9347e0be6e56f68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "html_url": "https://github.com/rust-lang/rust/commit/7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7750402c5eaf9ed0a73cb34c8483df245c36ac7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "html_url": "https://github.com/rust-lang/rust/commit/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5"}, {"sha": "a0ff4612f21e312362a3ffbec0a104b9937d700b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ff4612f21e312362a3ffbec0a104b9937d700b", "html_url": "https://github.com/rust-lang/rust/commit/a0ff4612f21e312362a3ffbec0a104b9937d700b"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "ed4950c57a6277fc69228acb33bae7ad3e84db1b", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750402c5eaf9ed0a73cb34c8483df245c36ac7b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750402c5eaf9ed0a73cb34c8483df245c36ac7b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "patch": "@@ -613,7 +613,8 @@ impl CString {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n-        &self.inner[..self.inner.len() - 1]\n+        // SAFETY: CString has a length at least 1\n+        unsafe { self.inner.get_unchecked(..self.inner.len() - 1) }\n     }\n \n     /// Equivalent to [`CString::as_bytes()`] except that the\n@@ -1322,7 +1323,8 @@ impl CStr {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n-        &bytes[..bytes.len() - 1]\n+        // SAFETY: to_bytes_with_nul returns slice with length at least 1\n+        unsafe { bytes.get_unchecked(..bytes.len() - 1) }\n     }\n \n     /// Converts this C string to a byte slice containing the trailing 0 byte."}, {"sha": "4f7ba9ad43756a8b2a041598874e8b607a8131dc", "filename": "library/std/src/ffi/c_str/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750402c5eaf9ed0a73cb34c8483df245c36ac7b/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750402c5eaf9ed0a73cb34c8483df245c36ac7b/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs?ref=7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "patch": "@@ -193,3 +193,19 @@ fn cstr_index_from_empty() {\n     let cstr = CStr::from_bytes_with_nul(original).unwrap();\n     let _ = &cstr[original.len()..];\n }\n+\n+#[test]\n+fn c_string_from_empty_string() {\n+    let original = \"\";\n+    let cstring = CString::new(original).unwrap();\n+    assert_eq!(original.as_bytes(), cstring.as_bytes());\n+    assert_eq!([b'\\0'], cstring.as_bytes_with_nul());\n+}\n+\n+#[test]\n+fn c_str_from_empty_string() {\n+    let original = b\"\\0\";\n+    let cstr = CStr::from_bytes_with_nul(original).unwrap();\n+    assert_eq!([] as [u8; 0], cstr.to_bytes());\n+    assert_eq!([b'\\0'], cstr.to_bytes_with_nul());\n+}"}]}