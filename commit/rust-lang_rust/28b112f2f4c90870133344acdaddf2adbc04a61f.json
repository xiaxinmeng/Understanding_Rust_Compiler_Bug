{"sha": "28b112f2f4c90870133344acdaddf2adbc04a61f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjExMmYyZjRjOTA4NzAxMzMzNDRhY2RhZGRmMmFkYmMwNGE2MWY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-12-09T22:33:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-09T22:33:08Z"}, "message": "Rollup merge of #67125 - hashedone:master, r=petrochenkov\n\nAdded ExactSizeIterator bound to return types\n\nFixes #66865", "tree": {"sha": "00a9e762e972cfbd9e891d1335fccfe48f1f900a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a9e762e972cfbd9e891d1335fccfe48f1f900a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b112f2f4c90870133344acdaddf2adbc04a61f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7sukCRBK7hj4Ov3rIwAAdHIIAH6Auhl+YqnjRxDfesSFCF58\nL620Jlq7ESSJiftDeTOWt33fOG0YZP5womhkMCCW2HBGUqwIXtAACHhCig5ngru/\n4jYXwE86dzhX399hVlv+yO4RU/BxGmokHQ16/Vv7JjmZMZDTGmspXxh9WOTP4CR5\ny90eEWNGGxTHOv1vxoHJjXLMiKmU9wYM+KBXShn5trcGaeN8w2e0KkuMHJaA5deZ\nclHgTnFl/qR4vQKeIhdsNqfTn9goytZCAiEt/RBVrzZE+oLHUfQQwZYPXt5Cy4Ll\nSzIRwDPqd0gJYoa40BXmdoij/AIHZh9AwsvZ5cVvric+UGStT28ng3t4x6eggbg=\n=8JEO\n-----END PGP SIGNATURE-----\n", "payload": "tree 00a9e762e972cfbd9e891d1335fccfe48f1f900a\nparent e77582008888fdc7a6dc60263eddbcb8d4f74ad0\nparent 989bf84af339a0358b069e856edeee8cb72ff170\nauthor Tyler Mandry <tmandry@gmail.com> 1575930788 -0800\ncommitter GitHub <noreply@github.com> 1575930788 -0800\n\nRollup merge of #67125 - hashedone:master, r=petrochenkov\n\nAdded ExactSizeIterator bound to return types\n\nFixes #66865\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b112f2f4c90870133344acdaddf2adbc04a61f", "html_url": "https://github.com/rust-lang/rust/commit/28b112f2f4c90870133344acdaddf2adbc04a61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b112f2f4c90870133344acdaddf2adbc04a61f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "html_url": "https://github.com/rust-lang/rust/commit/e77582008888fdc7a6dc60263eddbcb8d4f74ad0"}, {"sha": "989bf84af339a0358b069e856edeee8cb72ff170", "url": "https://api.github.com/repos/rust-lang/rust/commits/989bf84af339a0358b069e856edeee8cb72ff170", "html_url": "https://github.com/rust-lang/rust/commit/989bf84af339a0358b069e856edeee8cb72ff170"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "a89bc28f40dd2aacf7644d41887ec9c796148324", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28b112f2f4c90870133344acdaddf2adbc04a61f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b112f2f4c90870133344acdaddf2adbc04a61f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=28b112f2f4c90870133344acdaddf2adbc04a61f", "patch": "@@ -278,15 +278,15 @@ impl<'tcx> Body<'tcx> {\n \n     /// Returns an iterator over all function arguments.\n     #[inline]\n-    pub fn args_iter(&self) -> impl Iterator<Item = Local> {\n+    pub fn args_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {\n         let arg_count = self.arg_count;\n-        (1..=arg_count).map(Local::new)\n+        (1..arg_count + 1).map(Local::new)\n     }\n \n     /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all\n     /// locals that are neither arguments nor the return place).\n     #[inline]\n-    pub fn vars_and_temps_iter(&self) -> impl Iterator<Item = Local> {\n+    pub fn vars_and_temps_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {\n         let arg_count = self.arg_count;\n         let local_count = self.local_decls.len();\n         (arg_count + 1..local_count).map(Local::new)\n@@ -2380,11 +2380,15 @@ impl<'tcx> UserTypeProjections {\n         UserTypeProjections { contents: projs.collect() }\n     }\n \n-    pub fn projections_and_spans(&self) -> impl Iterator<Item = &(UserTypeProjection, Span)> {\n+    pub fn projections_and_spans(&self)\n+        -> impl Iterator<Item = &(UserTypeProjection, Span)> + ExactSizeIterator\n+    {\n         self.contents.iter()\n     }\n \n-    pub fn projections(&self) -> impl Iterator<Item = &UserTypeProjection> {\n+    pub fn projections(&self)\n+        -> impl Iterator<Item = &UserTypeProjection> + ExactSizeIterator\n+    {\n         self.contents.iter().map(|&(ref user_type, _span)| user_type)\n     }\n "}]}