{"sha": "1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzBiYmNmMGQ1MmM0ODBhZTNkYTI5YzBiMmM1YzY4NDgwYzJjMTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-29T20:07:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-03T14:03:28Z"}, "message": "rustdoc: Respect diagnostic debugging options", "tree": {"sha": "2bec468888946c636203a92c7324e9c8f2865184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bec468888946c636203a92c7324e9c8f2865184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "html_url": "https://github.com/rust-lang/rust/commit/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4feeceecd14d41cb74d10f15933aba3acdd6cc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/4feeceecd14d41cb74d10f15933aba3acdd6cc91", "html_url": "https://github.com/rust-lang/rust/commit/4feeceecd14d41cb74d10f15933aba3acdd6cc91"}], "stats": {"total": 82, "additions": 26, "deletions": 56}, "files": [{"sha": "b6b22e298ca6234725164416e38c81ea571ea3db", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "patch": "@@ -20,7 +20,7 @@ use rustc_span::source_map::{FileName, FilePathMapping};\n use rustc_span::symbol::{sym, Symbol};\n \n use rustc_errors::emitter::HumanReadableErrorType;\n-use rustc_errors::{ColorConfig, FatalError, Handler};\n+use rustc_errors::{ColorConfig, FatalError, Handler, HandlerFlags};\n \n use getopts;\n \n@@ -597,6 +597,17 @@ impl DebuggingOptions {\n     pub fn ui_testing(&self) -> bool {\n         self.ui_testing.unwrap_or(false)\n     }\n+\n+    pub fn diagnostic_handler_flags(&self, can_emit_warnings: bool) -> HandlerFlags {\n+        HandlerFlags {\n+            can_emit_warnings,\n+            treat_err_as_bug: self.treat_err_as_bug,\n+            dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n+            report_delayed_bugs: self.report_delayed_bugs,\n+            external_macro_backtrace: self.external_macro_backtrace,\n+            deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n+        }\n+    }\n }\n \n // The type of entry function, so users can have their own entry functions"}, {"sha": "15911db46fe0bf6654a26419eff29173503687c9", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "patch": "@@ -941,13 +941,7 @@ pub fn build_session_with_source_map(\n         .last()\n         .unwrap_or(false);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n-\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n-    let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n-    let dont_buffer_diagnostics = sopts.debugging_opts.dont_buffer_diagnostics;\n-    let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n-    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n-    let deduplicate_diagnostics = sopts.debugging_opts.deduplicate_diagnostics.unwrap_or(true);\n \n     let write_dest = match diagnostics_output {\n         DiagnosticOutput::Default => None,\n@@ -957,14 +951,7 @@ pub fn build_session_with_source_map(\n \n     let diagnostic_handler = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        rustc_errors::HandlerFlags {\n-            can_emit_warnings,\n-            treat_err_as_bug,\n-            report_delayed_bugs,\n-            dont_buffer_diagnostics,\n-            external_macro_backtrace,\n-            deduplicate_diagnostics,\n-        },\n+        sopts.debugging_opts.diagnostic_handler_flags(can_emit_warnings),\n     );\n \n     build_session_(sopts, local_crate_source_file, diagnostic_handler, source_map, lint_caps)"}, {"sha": "55df2a5e6e71e4afb97b37977e45b16db5f8e4af", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "patch": "@@ -269,12 +269,7 @@ impl Options {\n         let codegen_options = build_codegen_options(matches, error_format);\n         let debugging_options = build_debugging_options(matches, error_format);\n \n-        let diag = new_handler(\n-            error_format,\n-            None,\n-            debugging_options.treat_err_as_bug,\n-            debugging_options.ui_testing(),\n-        );\n+        let diag = new_handler(error_format, None, &debugging_options);\n \n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);"}, {"sha": "c48523961de05e966d1753ccd3526fb2ca0c68ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "patch": "@@ -35,7 +35,7 @@ use crate::html::render::RenderInfo;\n \n use crate::passes;\n \n-pub use rustc::session::config::{CodegenOptions, Input, Options};\n+pub use rustc::session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n pub use rustc::session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -170,12 +170,8 @@ impl<'tcx> DocContext<'tcx> {\n pub fn new_handler(\n     error_format: ErrorOutputType,\n     source_map: Option<Lrc<source_map::SourceMap>>,\n-    treat_err_as_bug: Option<usize>,\n-    ui_testing: bool,\n+    debugging_opts: &DebuggingOptions,\n ) -> errors::Handler {\n-    // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n-    // stick to the defaults\n-    let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -184,34 +180,25 @@ pub fn new_handler(\n                     color_config,\n                     source_map.map(|cm| cm as _),\n                     short,\n-                    sessopts.debugging_opts.teach,\n-                    sessopts.debugging_opts.terminal_width,\n+                    debugging_opts.teach,\n+                    debugging_opts.terminal_width,\n                     false,\n                 )\n-                .ui_testing(ui_testing),\n+                .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n         ErrorOutputType::Json { pretty, json_rendered } => {\n             let source_map = source_map.unwrap_or_else(|| {\n-                Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()))\n+                Lrc::new(source_map::SourceMap::new(source_map::FilePathMapping::empty()))\n             });\n             Box::new(\n                 JsonEmitter::stderr(None, source_map, pretty, json_rendered, false)\n-                    .ui_testing(ui_testing),\n+                    .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n     };\n \n-    errors::Handler::with_emitter_and_flags(\n-        emitter,\n-        errors::HandlerFlags {\n-            can_emit_warnings: true,\n-            treat_err_as_bug,\n-            report_delayed_bugs: false,\n-            external_macro_backtrace: false,\n-            ..Default::default()\n-        },\n-    )\n+    errors::Handler::with_emitter_and_flags(emitter, debugging_opts.diagnostic_handler_flags(true))\n }\n \n pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions) {"}, {"sha": "c8a32306194df1bc733395bfe0e0cdf7157dc05c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1370bbcf0d52c480ae3da29c0b2c5c68480c2c15/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1370bbcf0d52c480ae3da29c0b2c5c68480c2c15", "patch": "@@ -445,12 +445,7 @@ fn main_args(args: &[String]) -> i32 {\n }\n \n fn main_options(options: config::Options) -> i32 {\n-    let diag = core::new_handler(\n-        options.error_format,\n-        None,\n-        options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing(),\n-    );\n+    let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return markdown::test(options, &diag),\n@@ -463,12 +458,7 @@ fn main_options(options: config::Options) -> i32 {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't crates the Handler ahead of time because it's not Send\n-    let diag_opts = (\n-        options.error_format,\n-        options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing(),\n-        options.edition,\n-    );\n+    let diag_opts = (options.error_format, options.edition, options.debugging_options.clone());\n     let show_coverage = options.show_coverage;\n     rust_input(options, move |out| {\n         if show_coverage {\n@@ -479,8 +469,8 @@ fn main_options(options: config::Options) -> i32 {\n \n         let Output { krate, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n-        let (error_format, treat_err_as_bug, ui_testing, edition) = diag_opts;\n-        let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n+        let (error_format, edition, debugging_options) = diag_opts;\n+        let diag = core::new_handler(error_format, None, &debugging_options);\n         match html::render::run(krate, renderopts, renderinfo, &diag, edition) {\n             Ok(_) => rustc_driver::EXIT_SUCCESS,\n             Err(e) => {"}]}