{"sha": "3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "node_id": "C_kwDOAAsO6NoAKDNlYjViNjI4OThhOGU3ZjI0Njc5YWE3YTRhOWNlNGQ3NjlmNGJhMzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-14T20:06:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-14T20:06:25Z"}, "message": "always use anonymize_bound_vars", "tree": {"sha": "a30b3e3cefc757ffe7b466fc98c45cb13c3c109d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30b3e3cefc757ffe7b466fc98c45cb13c3c109d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "html_url": "https://github.com/rust-lang/rust/commit/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d", "html_url": "https://github.com/rust-lang/rust/commit/ba64ba8b0dfd57f7d6d7399d0df7ded37d2af18d"}], "stats": {"total": 42, "additions": 6, "deletions": 36}, "files": [{"sha": "0c4649cea14edda97552e175a99e877201d87690", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "patch": "@@ -489,7 +489,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                         format!(\n                             \"{}::\",\n                             // Erase named lt, we want `<A as B<'_>::C`, not `<A as B<'a>::C`.\n-                            self.tcx.anonymize_late_bound_regions(poly_trait_ref).skip_binder(),\n+                            self.tcx.anonymize_bound_vars(poly_trait_ref).skip_binder(),\n                         ),\n                         Applicability::MaybeIncorrect,\n                     );"}, {"sha": "47890fffc19ceac8059a3f1203c98c176f68b76d", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // `deduce_expectations_from_expected_type` introduces\n         // late-bound lifetimes defined elsewhere, which we now\n         // anonymize away, so as not to confuse the user.\n-        let bound_sig = self.tcx.anonymize_late_bound_regions(bound_sig);\n+        let bound_sig = self.tcx.anonymize_bound_vars(bound_sig);\n \n         let closure_sigs = self.closure_sigs(expr_def_id, body, bound_sig);\n "}, {"sha": "09fee0c3f7c30819138b4df81f49295aa0a6d031", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "patch": "@@ -583,36 +583,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0\n     }\n \n-    /// Rewrite any late-bound regions so that they are anonymous. Region numbers are\n-    /// assigned starting at 0 and increasing monotonically in the order traversed\n-    /// by the fold operation.\n-    ///\n-    /// The chief purpose of this function is to canonicalize regions so that two\n-    /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become\n-    /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and\n-    /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.\n-    pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut counter = 0;\n-        let inner = self\n-            .replace_late_bound_regions(sig, |_| {\n-                let br = ty::BoundRegion {\n-                    var: ty::BoundVar::from_u32(counter),\n-                    kind: ty::BrAnon(counter, None),\n-                };\n-                let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));\n-                counter += 1;\n-                r\n-            })\n-            .0;\n-        let bound_vars = self.mk_bound_variable_kinds(\n-            (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n-        );\n-        Binder::bind_with_vars(inner, bound_vars)\n-    }\n-\n     /// Anonymize all bound variables in `value`, this is mostly used to improve caching.\n     pub fn anonymize_bound_vars<T>(self, value: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where"}, {"sha": "d252255f94b697afdccb8a8df92e6f5e94ded350", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3eb5b62898a8e7f24679aa7a4a9ce4d769f4ba32", "patch": "@@ -1804,10 +1804,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && self.tcx.is_fn_trait(trait_pred.def_id())\n         {\n             let expected_self =\n-                self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));\n+                self.tcx.anonymize_bound_vars(pred.kind().rebind(trait_pred.self_ty()));\n             let expected_substs = self\n                 .tcx\n-                .anonymize_late_bound_regions(pred.kind().rebind(trait_pred.trait_ref.substs));\n+                .anonymize_bound_vars(pred.kind().rebind(trait_pred.trait_ref.substs));\n \n             // Find another predicate whose self-type is equal to the expected self type,\n             // but whose substs don't match.\n@@ -1820,12 +1820,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // Make sure that the self type matches\n                             // (i.e. constraining this closure)\n                             && expected_self\n-                                == self.tcx.anonymize_late_bound_regions(\n+                                == self.tcx.anonymize_bound_vars(\n                                     pred.kind().rebind(trait_pred.self_ty()),\n                                 )\n                             // But the substs don't match (i.e. incompatible args)\n                             && expected_substs\n-                                != self.tcx.anonymize_late_bound_regions(\n+                                != self.tcx.anonymize_bound_vars(\n                                     pred.kind().rebind(trait_pred.trait_ref.substs),\n                                 ) =>\n                     {"}]}