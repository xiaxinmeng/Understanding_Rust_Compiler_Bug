{"sha": "8a98531973f9af8010a3aebcdbf5591a59029f91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTg1MzE5NzNmOWFmODAxMGEzYWViY2RiZjU1OTFhNTkwMjlmOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-15T01:32:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-15T01:32:30Z"}, "message": "Auto merge of #45913 - sinkuu:mir-inlining-closure, r=arielb1\n\nHandle closures correctly in MIR inlining\n\nFixes #45894.", "tree": {"sha": "d2741ca87b0a98c75bba34e88c3d698ff8ca2b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2741ca87b0a98c75bba34e88c3d698ff8ca2b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a98531973f9af8010a3aebcdbf5591a59029f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a98531973f9af8010a3aebcdbf5591a59029f91", "html_url": "https://github.com/rust-lang/rust/commit/8a98531973f9af8010a3aebcdbf5591a59029f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a98531973f9af8010a3aebcdbf5591a59029f91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "html_url": "https://github.com/rust-lang/rust/commit/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388"}, {"sha": "a1f7bad4a71667a80a4fb9bcb31ca440de17f7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f7bad4a71667a80a4fb9bcb31ca440de17f7c8", "html_url": "https://github.com/rust-lang/rust/commit/a1f7bad4a71667a80a4fb9bcb31ca440de17f7c8"}], "stats": {"total": 142, "additions": 113, "deletions": 29}, "files": [{"sha": "a0219f2f95b8453c62c7b0f37c39ca8dafe6434b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8a98531973f9af8010a3aebcdbf5591a59029f91", "patch": "@@ -621,9 +621,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         result\n     }\n \n+    pub fn is_closure(self, def_id: DefId) -> bool {\n+        self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr\n+    }\n+\n     pub fn closure_base_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n-        while self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr {\n+        while self.is_closure(def_id) {\n             def_id = self.parent_def_id(def_id).unwrap_or_else(|| {\n                 bug!(\"closure {:?} has no parent\", def_id);\n             });"}, {"sha": "302e65a0e34d0e0de77f725390a45d4f121da660", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8a98531973f9af8010a3aebcdbf5591a59029f91", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::maps::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::DefPathData;\n use rustc::lint::builtin::{SAFE_EXTERN_STATICS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n@@ -362,11 +361,11 @@ fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: a\n \n pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n-    match tcx.def_key(def_id).disambiguated_data.data {\n-        // closures are handled by their parent fn.\n-        DefPathData::ClosureExpr => return,\n-        _ => {}\n-    };\n+\n+    // closures are handled by their parent fn.\n+    if tcx.is_closure(def_id) {\n+        return;\n+    }\n \n     let UnsafetyCheckResult {\n         violations,"}, {"sha": "628a8161615e3da28bdfda8a2c0d24f875916303", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 61, "deletions": 22, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8a98531973f9af8010a3aebcdbf5591a59029f91", "patch": "@@ -550,36 +550,75 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         Operand::Consume(cast_tmp)\n     }\n \n-    fn make_call_args(&self, args: Vec<Operand<'tcx>>,\n-                      callsite: &CallSite<'tcx>, caller_mir: &mut Mir<'tcx>) -> Vec<Operand<'tcx>> {\n+    fn make_call_args(\n+        &self,\n+        args: Vec<Operand<'tcx>>,\n+        callsite: &CallSite<'tcx>,\n+        caller_mir: &mut Mir<'tcx>,\n+    ) -> Vec<Operand<'tcx>> {\n         let tcx = self.tcx;\n+\n+        // A closure is passed its self-type and a tuple like `(arg1, arg2, ...)`,\n+        // hence mappings to tuple fields are needed.\n+        if tcx.is_closure(callsite.callee) {\n+            let mut args = args.into_iter();\n+            let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_mir);\n+            let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_mir);\n+            assert!(args.next().is_none());\n+\n+            let tuple_tys = if let ty::TyTuple(s, _) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n+                s\n+            } else {\n+                bug!(\"Closure arguments are not passed as a tuple\");\n+            };\n+\n+            let mut res = Vec::with_capacity(1 + tuple_tys.len());\n+            res.push(Operand::Consume(self_));\n+            res.extend(tuple_tys.iter().enumerate().map(|(i, ty)| {\n+                Operand::Consume(tuple.clone().field(Field::new(i), ty))\n+            }));\n+            res\n+        } else {\n+            args.into_iter()\n+                .map(|a| Operand::Consume(self.create_temp_if_necessary(a, callsite, caller_mir)))\n+                .collect()\n+        }\n+    }\n+\n+    /// If `arg` is already a temporary, returns it. Otherwise, introduces a fresh\n+    /// temporary `T` and an instruction `T = arg`, and returns `T`.\n+    fn create_temp_if_necessary(\n+        &self,\n+        arg: Operand<'tcx>,\n+        callsite: &CallSite<'tcx>,\n+        caller_mir: &mut Mir<'tcx>,\n+    ) -> Lvalue<'tcx> {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries.\n-        args.into_iter().map(|a| {\n-            if let Operand::Consume(Lvalue::Local(local)) = a {\n-                if caller_mir.local_kind(local) == LocalKind::Temp {\n-                    // Reuse the operand if it's a temporary already\n-                    return a;\n-                }\n+\n+        if let Operand::Consume(Lvalue::Local(local)) = arg {\n+            if caller_mir.local_kind(local) == LocalKind::Temp {\n+                // Reuse the operand if it's a temporary already\n+                return Lvalue::Local(local);\n             }\n+        }\n \n-            debug!(\"Creating temp for argument\");\n-            // Otherwise, create a temporary for the arg\n-            let arg = Rvalue::Use(a);\n+        debug!(\"Creating temp for argument {:?}\", arg);\n+        // Otherwise, create a temporary for the arg\n+        let arg = Rvalue::Use(arg);\n \n-            let ty = arg.ty(caller_mir, tcx);\n+        let ty = arg.ty(caller_mir, self.tcx);\n \n-            let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n-            let arg_tmp = caller_mir.local_decls.push(arg_tmp);\n-            let arg_tmp = Lvalue::Local(arg_tmp);\n+        let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n+        let arg_tmp = caller_mir.local_decls.push(arg_tmp);\n+        let arg_tmp = Lvalue::Local(arg_tmp);\n \n-            let stmt = Statement {\n-                source_info: callsite.location,\n-                kind: StatementKind::Assign(arg_tmp.clone(), arg)\n-            };\n-            caller_mir[callsite.bb].statements.push(stmt);\n-            Operand::Consume(arg_tmp)\n-        }).collect()\n+        let stmt = Statement {\n+            source_info: callsite.location,\n+            kind: StatementKind::Assign(arg_tmp.clone(), arg),\n+        };\n+        caller_mir[callsite.bb].statements.push(stmt);\n+        arg_tmp\n     }\n }\n "}, {"sha": "3f3428714d15cfc5f8f3b536a677f8118f95539b", "filename": "src/test/mir-opt/inline-closure.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98531973f9af8010a3aebcdbf5591a59029f91/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=8a98531973f9af8010a3aebcdbf5591a59029f91", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z span_free_formats\n+\n+// Tests that MIR inliner can handle closure arguments. (#45894)\n+\n+fn main() {\n+    println!(\"{}\", foo(0, 14));\n+}\n+\n+fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n+    let x = |_t, _q| _t;\n+    x(q, q)\n+}\n+\n+// END RUST SOURCE\n+// START rustc.foo.Inline.after.mir\n+// ...\n+// bb0: {\n+//     ...\n+//     _3 = [closure@NodeId(28)];\n+//     ...\n+//     _4 = &_3;\n+//     ...\n+//     _6 = _2;\n+//     ...\n+//     _7 = _2;\n+//     _5 = (_6, _7);\n+//     _0 = (_5.0: i32);\n+//     ...\n+//     return;\n+// }\n+// ...\n+// END rustc.foo.Inline.after.mir\n\\ No newline at end of file"}]}