{"sha": "3a178805397e07be4cd8506f34dbdb17abc8426d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTc4ODA1Mzk3ZTA3YmU0Y2Q4NTA2ZjM0ZGJkYjE3YWJjODQyNmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-20T12:38:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-22T14:04:47Z"}, "message": "start enforcing closure types", "tree": {"sha": "8e803ffc2ef9fc5c85c51509cc3b872f71387ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e803ffc2ef9fc5c85c51509cc3b872f71387ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a178805397e07be4cd8506f34dbdb17abc8426d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a178805397e07be4cd8506f34dbdb17abc8426d", "html_url": "https://github.com/rust-lang/rust/commit/3a178805397e07be4cd8506f34dbdb17abc8426d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a178805397e07be4cd8506f34dbdb17abc8426d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "html_url": "https://github.com/rust-lang/rust/commit/e0871ed318e2e6706f81c98cc348bcb99e78b4bf"}], "stats": {"total": 147, "additions": 145, "deletions": 2}, "files": [{"sha": "ab4ee3a4ad0e51b15e2e866f2ebb1facf478d147", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=3a178805397e07be4cd8506f34dbdb17abc8426d", "patch": "@@ -18,6 +18,7 @@\n //! contain revealed `impl Trait` values).\n \n use borrow_check::nll::universal_regions::UniversalRegions;\n+use rustc::infer::LateBoundRegionConversionTime;\n use rustc::mir::*;\n use rustc::ty::Ty;\n \n@@ -36,9 +37,47 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let (&normalized_output_ty, normalized_input_tys) =\n             normalized_inputs_and_output.split_last().unwrap();\n \n+        // If the user explicitly annotated the input types, extract\n+        // those.\n+        //\n+        // e.g. `|x: FxHashMap<_, &'static u32>| ...`\n+        let user_provided_sig;\n+        if !self.tcx().is_closure(self.mir_def_id) {\n+            user_provided_sig = None;\n+        } else {\n+            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id);\n+            user_provided_sig = match typeck_tables.user_provided_sigs.get(&self.mir_def_id) {\n+                None => None,\n+                Some(user_provided_poly_sig) => {\n+                    // Instantiate the canonicalized variables from\n+                    // user-provided signature (e.g. the `_` in the code\n+                    // above) with fresh variables.\n+                    let (poly_sig, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n+                        mir.span,\n+                        &user_provided_poly_sig,\n+                    );\n+\n+                    // Replace the bound items in the fn sig with fresh\n+                    // variables, so that they represent the view from\n+                    // \"inside\" the closure.\n+                    Some(\n+                        self.infcx\n+                            .replace_late_bound_regions_with_fresh_var(\n+                                mir.span,\n+                                LateBoundRegionConversionTime::FnCall,\n+                                &poly_sig,\n+                            )\n+                            .0,\n+                    )\n+                }\n+            }\n+        };\n+\n         // Equate expected input tys with those in the MIR.\n-        let argument_locals = (1..).map(Local::new);\n-        for (&normalized_input_ty, local) in normalized_input_tys.iter().zip(argument_locals) {\n+        for (&normalized_input_ty, argument_index) in normalized_input_tys.iter().zip(0..) {\n+            // In MIR, argument N is stored in local N+1.\n+            let local = Local::new(argument_index + 1);\n+\n             debug!(\n                 \"equate_inputs_and_outputs: normalized_input_ty = {:?}\",\n                 normalized_input_ty\n@@ -53,6 +92,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             );\n         }\n \n+        if let Some(user_provided_sig) = user_provided_sig {\n+            for (&user_provided_input_ty, argument_index) in\n+                user_provided_sig.inputs().iter().zip(0..)\n+            {\n+                // In MIR, closures begin an implicit `self`, so\n+                // argument N is stored in local N+2.\n+                let local = Local::new(argument_index + 2);\n+                let mir_input_ty = mir.local_decls[local].ty;\n+                let mir_input_span = mir.local_decls[local].source_info.span;\n+\n+                // If the user explicitly annotated the input types, enforce those.\n+                let user_provided_input_ty =\n+                    self.normalize(user_provided_input_ty, Locations::All(mir_input_span));\n+                self.equate_normalized_input_or_output(\n+                    user_provided_input_ty,\n+                    mir_input_ty,\n+                    mir_input_span,\n+                );\n+            }\n+        }\n+\n         assert!(\n             mir.yield_ty.is_some() && universal_regions.yield_ty.is_some()\n                 || mir.yield_ty.is_none() && universal_regions.yield_ty.is_none()\n@@ -83,6 +143,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 terr\n             );\n         };\n+\n+        // If the user explicitly annotated the output types, enforce those.\n+        if let Some(user_provided_sig) = user_provided_sig {\n+            let user_provided_output_ty = user_provided_sig.output();\n+            let user_provided_output_ty =\n+                self.normalize(user_provided_output_ty, Locations::All(output_span));\n+            self.equate_normalized_input_or_output(\n+                user_provided_output_ty,\n+                mir_output_ty,\n+                output_span,\n+            );\n+        }\n     }\n \n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {"}, {"sha": "0a22390fc714a4cde2d35fbc70f853dd92c33827", "filename": "src/test/ui/nll/user-annotations/closure-substs.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs?ref=3a178805397e07be4cd8506f34dbdb17abc8426d", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+// Test that we enforce user-provided type annotations on closures.\n+\n+fn foo<'a>() {\n+    |x: &'a i32| -> &'static i32 {\n+        return x; //~ ERROR\n+    };\n+}\n+\n+fn bar<'a>() {\n+    |x: &i32, b: fn(&'static i32)| {\n+        b(x); //~ ERROR\n+        //~^ ERROR borrowed data escapes outside of closure\n+        //~| ERROR unsatisfied lifetime constraints\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "97f6e594de5ee02122426c456c1605dd57c7fac1", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a178805397e07be4cd8506f34dbdb17abc8426d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=3a178805397e07be4cd8506f34dbdb17abc8426d", "patch": "@@ -0,0 +1,42 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/closure-substs.rs:17:16\n+   |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     |x: &'a i32| -> &'static i32 {\n+LL |         return x; //~ ERROR\n+   |                ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: borrowed data escapes outside of closure\n+  --> $DIR/closure-substs.rs:23:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |      - `x` is a reference that is only valid in the closure body\n+LL |         b(x); //~ ERROR\n+   |         ^^^^ `x` escapes the closure body here\n+\n+error: borrowed data escapes outside of closure\n+  --> $DIR/closure-substs.rs:23:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |      -        - `b` is declared here, outside of the closure body\n+   |      |\n+   |      `x` is a reference that is only valid in the closure body\n+LL |         b(x); //~ ERROR\n+   |         ^^^^ `x` escapes the closure body here\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/closure-substs.rs:23:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |     ------------------------------\n+   |     |   |\n+   |     |   let's call the lifetime of this reference `'1`\n+   |     lifetime `'2` represents this closure's body\n+LL |         b(x); //~ ERROR\n+   |         ^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `Fn`, so references to captured variables can't escape the closure\n+\n+error: aborting due to 4 previous errors\n+"}]}