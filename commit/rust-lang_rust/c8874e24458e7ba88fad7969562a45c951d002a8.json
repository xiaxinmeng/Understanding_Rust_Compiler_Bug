{"sha": "c8874e24458e7ba88fad7969562a45c951d002a8", "node_id": "C_kwDOAAsO6NoAKGM4ODc0ZTI0NDU4ZTdiYTg4ZmFkNzk2OTU2MmE0NWM5NTFkMDAyYTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-22T19:29:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-22T19:30:47Z"}, "message": "Don't infer fn return type to return itself", "tree": {"sha": "6452e75ac6616414ee24d4d9141f7682960dbf1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6452e75ac6616414ee24d4d9141f7682960dbf1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8874e24458e7ba88fad7969562a45c951d002a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8874e24458e7ba88fad7969562a45c951d002a8", "html_url": "https://github.com/rust-lang/rust/commit/c8874e24458e7ba88fad7969562a45c951d002a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8874e24458e7ba88fad7969562a45c951d002a8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4396ceca05585ad887976b985cfa8dd8e58cd512", "url": "https://api.github.com/repos/rust-lang/rust/commits/4396ceca05585ad887976b985cfa8dd8e58cd512", "html_url": "https://github.com/rust-lang/rust/commit/4396ceca05585ad887976b985cfa8dd8e58cd512"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "9fe0c07814ed8c06b7e53dcc1f1c3bf1f01840cb", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c8874e24458e7ba88fad7969562a45c951d002a8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8874e24458e7ba88fad7969562a45c951d002a8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=c8874e24458e7ba88fad7969562a45c951d002a8", "patch": "@@ -1146,24 +1146,22 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n \n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_ty(ty);\n+\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.output();\n+            // Don't leak types into signatures unless they're nameable!\n+            // For example, if a function returns itself, we don't want that\n+            // recursive function definition to leak out into the fn sig.\n+            let mut should_recover = false;\n+\n             if let Some(ret_ty) = ret_ty.make_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n                     ret_ty,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if matches!(ret_ty.kind(), ty::FnDef(..))\n-                && let Some(fn_sig) = ret_ty.fn_sig(tcx).make_suggestable(tcx, false)\n-            {\n-                diag.span_suggestion(\n-                    ty.span,\n-                    \"replace with the correct return type\",\n-                    fn_sig,\n-                    Applicability::MachineApplicable,\n-                );\n+                should_recover = true;\n             } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n@@ -1181,9 +1179,20 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                      https://doc.rust-lang.org/book/ch13-01-closures.html\",\n                 );\n             }\n-            diag.emit();\n \n-            ty::Binder::dummy(fn_sig)\n+            let guar = diag.emit();\n+\n+            if should_recover {\n+                ty::Binder::dummy(fn_sig)\n+            } else {\n+                ty::Binder::dummy(tcx.mk_fn_sig(\n+                    fn_sig.inputs().iter().copied(),\n+                    tcx.ty_error(guar),\n+                    fn_sig.c_variadic,\n+                    fn_sig.unsafety,\n+                    fn_sig.abi,\n+                ))\n+            }\n         }\n         None => icx.astconv().ty_of_fn(\n             hir_id,"}, {"sha": "9812d8c381117d96620eb2ed17eb9a5f3da3b382", "filename": "tests/ui/typeck/bad-recursive-type-sig-infer.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8874e24458e7ba88fad7969562a45c951d002a8/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8874e24458e7ba88fad7969562a45c951d002a8/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs?ref=c8874e24458e7ba88fad7969562a45c951d002a8", "patch": "@@ -0,0 +1,11 @@\n+fn a() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    &a\n+}\n+\n+fn b() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    &a\n+}\n+\n+fn main() {}"}, {"sha": "e145da5623ac0c0a98e6c9855e03d0d3ab15f78d", "filename": "tests/ui/typeck/bad-recursive-type-sig-infer.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8874e24458e7ba88fad7969562a45c951d002a8/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8874e24458e7ba88fad7969562a45c951d002a8/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr?ref=c8874e24458e7ba88fad7969562a45c951d002a8", "patch": "@@ -0,0 +1,15 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/bad-recursive-type-sig-infer.rs:1:11\n+   |\n+LL | fn a() -> _ {\n+   |           ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/bad-recursive-type-sig-infer.rs:6:11\n+   |\n+LL | fn b() -> _ {\n+   |           ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}]}