{"sha": "907daec5ab575aa6f460f058b40badbb240dbe7c", "node_id": "C_kwDOAAsO6NoAKDkwN2RhZWM1YWI1NzVhYTZmNDYwZjA1OGI0MGJhZGJiMjQwZGJlN2M", "commit": {"author": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-04-27T06:52:10Z"}, "committer": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-04-27T06:52:10Z"}, "message": "refactor(docs): remove macro resolution fallback", "tree": {"sha": "f5305b2c26864c4e9909098fd5827234fc3bb276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5305b2c26864c4e9909098fd5827234fc3bb276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907daec5ab575aa6f460f058b40badbb240dbe7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907daec5ab575aa6f460f058b40badbb240dbe7c", "html_url": "https://github.com/rust-lang/rust/commit/907daec5ab575aa6f460f058b40badbb240dbe7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907daec5ab575aa6f460f058b40badbb240dbe7c/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced", "html_url": "https://github.com/rust-lang/rust/commit/e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "7e173a171a83adb2d41900c6b86892d4ea024b9a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/907daec5ab575aa6f460f058b40badbb240dbe7c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907daec5ab575aa6f460f058b40badbb240dbe7c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=907daec5ab575aa6f460f058b40badbb240dbe7c", "patch": "@@ -1295,7 +1295,8 @@ impl LinkCollector<'_, '_> {\n                                 }\n                             }\n                         }\n-                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err])\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err]);\n+                        return vec![];\n                     }\n                 }\n             }\n@@ -1331,13 +1332,14 @@ impl LinkCollector<'_, '_> {\n                     .fold(0, |acc, res| if let Ok(res) = res { acc + res.len() } else { acc });\n \n                 if len == 0 {\n-                    return resolution_failure(\n+                    resolution_failure(\n                         self,\n                         diag,\n                         path_str,\n                         disambiguator,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n+                    return vec![];\n                 } else if len == 1 {\n                     candidates.into_iter().filter_map(|res| res.ok()).flatten().collect::<Vec<_>>()\n                 } else {\n@@ -1642,9 +1644,8 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n-) -> Vec<(Res, Option<DefId>)> {\n+) {\n     let tcx = collector.cx.tcx;\n-    let mut recovered_res = None;\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n@@ -1736,19 +1737,25 @@ fn resolution_failure(\n \n                         if !path_str.contains(\"::\") {\n                             if disambiguator.map_or(true, |d| d.ns() == MacroNS)\n-                                && let Some(&res) = collector.cx.tcx.resolutions(()).all_macro_rules\n-                                                             .get(&Symbol::intern(path_str))\n+                                && collector\n+                                    .cx\n+                                    .tcx\n+                                    .resolutions(())\n+                                    .all_macro_rules\n+                                    .get(&Symbol::intern(path_str))\n+                                    .is_some()\n                             {\n                                 diag.note(format!(\n                                     \"`macro_rules` named `{path_str}` exists in this crate, \\\n                                      but it is not in scope at this link's location\"\n                                 ));\n-                                recovered_res = res.try_into().ok().map(|res| (res, None));\n                             } else {\n                                 // If the link has `::` in it, assume it was meant to be an\n                                 // intra-doc link. Otherwise, the `[]` might be unrelated.\n-                                diag.help(\"to escape `[` and `]` characters, \\\n-                                           add '\\\\' before them like `\\\\[` or `\\\\]`\");\n+                                diag.help(\n+                                    \"to escape `[` and `]` characters, \\\n+                                           add '\\\\' before them like `\\\\[` or `\\\\]`\",\n+                                );\n                             }\n                         }\n \n@@ -1854,11 +1861,6 @@ fn resolution_failure(\n             }\n         },\n     );\n-\n-    match recovered_res {\n-        Some(r) => vec![r],\n-        None => Vec::new(),\n-    }\n }\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {"}]}