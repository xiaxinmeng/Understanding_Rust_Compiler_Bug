{"sha": "edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "node_id": "C_kwDOAAsO6NoAKGVkZDI3Y2Y0Y2EzOTFkY2JkZjQ4MjY5ZThkYWU0MWVhMDBkNzY5OWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-26T11:05:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-26T11:05:00Z"}, "message": "Rollup merge of #108482 - Ezrashaw:force-error-docs, r=GuillaumeGomez\n\nstatically guarantee that current error codes are documented\n\nCloses #61137 (that's right!)\n\nPretty simple refactor (often just a change from `Result<Option<&str>>` to `Result<&str>`)\n\nr? `@GuillaumeGomez` (could you specially look at 53044158eff0d64673a6100f701c57b484232aca? I believe you wrote that in the first place, just want to make sure you're happy with the change)", "tree": {"sha": "a635552c0008e457570b1f193ce93ae19889e1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a635552c0008e457570b1f193ce93ae19889e1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+zzcCRBK7hj4Ov3rIwAAoBEIAE60F4KmZffXt8/5CoOJ5GKk\nvJzDYkKXvEQpGK4cx6Ybz0gDr9nY2/lW4tLhkMHhgGF9djXb3fr+r1ojfE1BKOt/\naa2xHcentv0i8AXgXtB9rw9MhQzpaik6HSw0lObTfioL5zKnELhSXek2QFkB+jz1\n0GP7+IergpMbVSb6oHkWLI5WYllBR8SeX3VCFp+Q0TLdmPzgoQ12xp95Zsijee/N\nEZ6nJiUR1mSqdoRbSx7UMHf4gDIaubYXLmGvGBQvXls++AP1YE1C7iLXp+xeRQJt\noMaRVPhTOmIvKoERAREXxVxMPnRtvdtQ0Eb+DwFikwaIbs2sdr+L+ZDhdSNsRdY=\n=a66m\n-----END PGP SIGNATURE-----\n", "payload": "tree a635552c0008e457570b1f193ce93ae19889e1a2\nparent be23b326dcf00c43aaa48670a073650b3fc33612\nparent 53044158eff0d64673a6100f701c57b484232aca\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677409500 +0100\ncommitter GitHub <noreply@github.com> 1677409500 +0100\n\nRollup merge of #108482 - Ezrashaw:force-error-docs, r=GuillaumeGomez\n\nstatically guarantee that current error codes are documented\n\nCloses #61137 (that's right!)\n\nPretty simple refactor (often just a change from `Result<Option<&str>>` to `Result<&str>`)\n\nr? `@GuillaumeGomez` (could you specially look at 53044158eff0d64673a6100f701c57b484232aca? I believe you wrote that in the first place, just want to make sure you're happy with the change)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "html_url": "https://github.com/rust-lang/rust/commit/edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be23b326dcf00c43aaa48670a073650b3fc33612", "url": "https://api.github.com/repos/rust-lang/rust/commits/be23b326dcf00c43aaa48670a073650b3fc33612", "html_url": "https://github.com/rust-lang/rust/commit/be23b326dcf00c43aaa48670a073650b3fc33612"}, {"sha": "53044158eff0d64673a6100f701c57b484232aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/53044158eff0d64673a6100f701c57b484232aca", "html_url": "https://github.com/rust-lang/rust/commit/53044158eff0d64673a6100f701c57b484232aca"}], "stats": {"total": 125, "additions": 37, "deletions": 88}, "files": [{"sha": "9e5deedb66fff860078878c56e9641789fb45d1d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -1445,6 +1445,7 @@ name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n  \"mdbook\",\n+ \"rustc_error_codes\",\n ]\n \n [[package]]"}, {"sha": "464ddae476a5e0ed7460e1023d7c78b41c8881d9", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -485,7 +485,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised =\n         if upper_cased_code.starts_with('E') { upper_cased_code } else { format!(\"E{code:0>4}\") };\n     match registry.try_find_description(&normalised) {\n-        Ok(Some(description)) => {\n+        Ok(description) => {\n             let mut is_in_code_block = false;\n             let mut text = String::new();\n             // Slice off the leading newline and print.\n@@ -509,9 +509,6 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n                 print!(\"{text}\");\n             }\n         }\n-        Ok(None) => {\n-            early_error(output, &format!(\"no extended information for {code}\"));\n-        }\n         Err(InvalidErrorCode) => {\n             early_error(output, &format!(\"{code} is not a valid error code\"));\n         }"}, {"sha": "df857be85adabf8bc9dfe9da11b26848cdf633d7", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -513,7 +513,9 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n E0792: include_str!(\"./error_codes/E0792.md\"),\n E0793: include_str!(\"./error_codes/E0793.md\"),\n-;\n+}\n+\n+// Undocumented removed error codes. Note that many removed error codes are documented.\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard\n //  E0019, // merged into E0015\n@@ -570,7 +572,7 @@ E0793: include_str!(\"./error_codes/E0793.md\"),\n //  E0246, // invalid recursive type\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution\n-           // as E0412\n+//         // as E0412\n //  E0249,\n //  E0257,\n //  E0258,\n@@ -631,14 +633,14 @@ E0793: include_str!(\"./error_codes/E0793.md\"),\n //  E0558, // replaced with a generic attribute input check\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n //  E0564, // only named lifetimes are allowed in `impl Trait`,\n-           // but `{}` was found in the type `{}`\n+//         // but `{}` was found in the type `{}`\n //  E0598, // lifetime of {} is too short to guarantee its contents can be...\n //  E0611, // merged into E0616\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n //  E0629, // missing 'feature' (rustc_const_unstable)\n //  E0630, // rustc_const_unstable attribute must be paired with stable/unstable\n-           // attribute\n+//         // attribute\n //  E0645, // trait aliases not finished\n //  E0694, // an unknown tool name found in scoped attributes\n //  E0702, // replaced with a generic attribute input check\n@@ -647,4 +649,3 @@ E0793: include_str!(\"./error_codes/E0793.md\"),\n //  E0721, // `await` keyword\n //  E0723, // unstable feature in `const` context\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n-}"}, {"sha": "d6b120e4dfcf23b81c3f029707beefdfb412cd35", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -5,10 +5,9 @@\n //! the goal being to make their maintenance easier.\n \n macro_rules! register_diagnostics {\n-    ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n-        pub static DIAGNOSTICS: &[(&str, Option<&str>)] = &[\n-            $( (stringify!($ecode), Some($message)), )*\n-            $( (stringify!($code), None), )*\n+    ($($ecode:ident: $message:expr,)*) => (\n+        pub static DIAGNOSTICS: &[(&str, &str)] = &[\n+            $( (stringify!($ecode), $message), )*\n         ];\n     )\n }"}, {"sha": "f32d6b96b9b2429d13e47d61f29789c23daaf392", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -580,7 +580,7 @@ impl DiagnosticCode {\n             let je_result =\n                 je.registry.as_ref().map(|registry| registry.try_find_description(&s)).unwrap();\n \n-            DiagnosticCode { code: s, explanation: je_result.unwrap_or(None) }\n+            DiagnosticCode { code: s, explanation: je_result.ok() }\n         })\n     }\n }"}, {"sha": "cbf595089ccc68c7e874ef5c2250ca810ca28a73", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -1477,9 +1477,7 @@ impl HandlerInner {\n                 .emitted_diagnostic_codes\n                 .iter()\n                 .filter_map(|x| match &x {\n-                    DiagnosticId::Error(s)\n-                        if registry.try_find_description(s).map_or(false, |o| o.is_some()) =>\n-                    {\n+                    DiagnosticId::Error(s) if registry.try_find_description(s).is_ok() => {\n                         Some(s.clone())\n                     }\n                     _ => None,"}, {"sha": "f26d8e7ebdc34241da30bda5d32d0eefd5d48a7f", "filename": "compiler/rustc_errors/src/registry.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/compiler%2Frustc_errors%2Fsrc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fregistry.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -5,21 +5,17 @@ pub struct InvalidErrorCode;\n \n #[derive(Clone)]\n pub struct Registry {\n-    long_descriptions: FxHashMap<&'static str, Option<&'static str>>,\n+    long_descriptions: FxHashMap<&'static str, &'static str>,\n }\n \n impl Registry {\n-    pub fn new(long_descriptions: &[(&'static str, Option<&'static str>)]) -> Registry {\n+    pub fn new(long_descriptions: &[(&'static str, &'static str)]) -> Registry {\n         Registry { long_descriptions: long_descriptions.iter().copied().collect() }\n     }\n \n     /// Returns `InvalidErrorCode` if the code requested does not exist in the\n-    /// registry. Otherwise, returns an `Option` where `None` means the error\n-    /// code is valid but has no extended information.\n-    pub fn try_find_description(\n-        &self,\n-        code: &str,\n-    ) -> Result<Option<&'static str>, InvalidErrorCode> {\n+    /// registry.\n+    pub fn try_find_description(&self, code: &str) -> Result<&'static str, InvalidErrorCode> {\n         self.long_descriptions.get(code).copied().ok_or(InvalidErrorCode)\n     }\n }"}, {"sha": "76c2e330b2100236b1b8fddd1640ccbb8b7cca97", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -5,6 +5,7 @@ edition = \"2021\"\n \n [dependencies]\n mdbook = { version = \"0.4\", default-features = false, features = [\"search\"] }\n+rustc_error_codes = { version = \"0.0.0\", path = \"../../../compiler/rustc_error_codes\" }\n \n [[bin]]\n name = \"error_index_generator\""}, {"sha": "f984275b164cc0be8f643903b323662f98331a35", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 16, "deletions": 42, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -2,9 +2,6 @@\n \n extern crate rustc_driver;\n \n-// We use the function we generate from `register_diagnostics!`.\n-use crate::error_codes::error_codes;\n-\n use std::env;\n use std::error::Error;\n use std::fs::{self, File};\n@@ -17,22 +14,6 @@ use std::str::FromStr;\n use mdbook::book::{parse_summary, BookItem, Chapter};\n use mdbook::{Config, MDBook};\n \n-macro_rules! register_diagnostics {\n-    ($($error_code:ident: $message:expr,)+ ; $($undocumented:ident,)* ) => {\n-        pub fn error_codes() -> Vec<(&'static str, Option<&'static str>)> {\n-            let mut errors: Vec<(&str, Option<&str>)> = vec![\n-                $((stringify!($error_code), Some($message)),)+\n-                $((stringify!($undocumented), None),)*\n-            ];\n-            errors.sort();\n-            errors\n-        }\n-    }\n-}\n-\n-#[path = \"../../../compiler/rustc_error_codes/src/error_codes.rs\"]\n-mod error_codes;\n-\n enum OutputFormat {\n     HTML,\n     Markdown,\n@@ -55,11 +36,8 @@ fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n \n     write!(output_file, \"# Rust Compiler Error Index\\n\")?;\n \n-    for (err_code, description) in error_codes().iter() {\n-        match description {\n-            Some(ref desc) => write!(output_file, \"## {}\\n{}\\n\", err_code, desc)?,\n-            None => {}\n-        }\n+    for (err_code, description) in rustc_error_codes::DIAGNOSTICS.iter() {\n+        write!(output_file, \"## {}\\n{}\\n\", err_code, description)?\n     }\n \n     Ok(())\n@@ -105,27 +83,23 @@ This page lists all the error codes emitted by the Rust compiler.\n \"\n     );\n \n-    let err_codes = error_codes();\n+    let err_codes = rustc_error_codes::DIAGNOSTICS;\n     let mut chapters = Vec::with_capacity(err_codes.len());\n \n     for (err_code, explanation) in err_codes.iter() {\n-        if let Some(explanation) = explanation {\n-            introduction.push_str(&format!(\" * [{0}](./{0}.html)\\n\", err_code));\n-\n-            let content = add_rust_attribute_on_codeblock(explanation);\n-            chapters.push(BookItem::Chapter(Chapter {\n-                name: err_code.to_string(),\n-                content: format!(\"# Error code {}\\n\\n{}\\n\", err_code, content),\n-                number: None,\n-                sub_items: Vec::new(),\n-                // We generate it into the `error_codes` folder.\n-                path: Some(PathBuf::from(&format!(\"{}.html\", err_code))),\n-                source_path: None,\n-                parent_names: Vec::new(),\n-            }));\n-        } else {\n-            introduction.push_str(&format!(\" * {}\\n\", err_code));\n-        }\n+        introduction.push_str(&format!(\" * [{0}](./{0}.html)\\n\", err_code));\n+\n+        let content = add_rust_attribute_on_codeblock(explanation);\n+        chapters.push(BookItem::Chapter(Chapter {\n+            name: err_code.to_string(),\n+            content: format!(\"# Error code {}\\n\\n{}\\n\", err_code, content),\n+            number: None,\n+            sub_items: Vec::new(),\n+            // We generate it into the `error_codes` folder.\n+            path: Some(PathBuf::from(&format!(\"{}.html\", err_code))),\n+            source_path: None,\n+            parent_names: Vec::new(),\n+        }));\n     }\n \n     let mut config = Config::from_str(include_str!(\"book_config.toml\"))?;"}, {"sha": "c60caa0d49c6a2383154b326a59b893429fe15e2", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd27cf4ca391dcbdf48269e8dae41ea00d7699a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=edd27cf4ca391dcbdf48269e8dae41ea00d7699a", "patch": "@@ -45,7 +45,7 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n     let mut errors = Vec::new();\n \n     // Stage 1: create list\n-    let error_codes = extract_error_codes(root_path, &mut errors, verbose);\n+    let error_codes = extract_error_codes(root_path, &mut errors);\n     println!(\"Found {} error codes\", error_codes.len());\n     println!(\"Highest error code: `{}`\", error_codes.iter().max().unwrap());\n \n@@ -65,18 +65,17 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n }\n \n /// Stage 1: Parses a list of error codes from `error_codes.rs`.\n-fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>, verbose: bool) -> Vec<String> {\n+fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>) -> Vec<String> {\n     let path = root_path.join(Path::new(ERROR_CODES_PATH));\n     let file =\n         fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"failed to read `{path:?}`: {e}\"));\n \n     let mut error_codes = Vec::new();\n-    let mut reached_undocumented_codes = false;\n \n     for line in file.lines() {\n         let line = line.trim();\n \n-        if !reached_undocumented_codes && line.starts_with('E') {\n+        if line.starts_with('E') {\n             let split_line = line.split_once(':');\n \n             // Extract the error code from the line, emitting a fatal error if it is not in a correct format.\n@@ -111,23 +110,6 @@ fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>, verbose: bool\n             }\n \n             error_codes.push(err_code);\n-        } else if reached_undocumented_codes && line.starts_with('E') {\n-            let err_code = match line.split_once(',') {\n-                None => line,\n-                Some((err_code, _)) => err_code,\n-            }\n-            .to_string();\n-\n-            verbose_print!(verbose, \"warning: Error code `{}` is undocumented.\", err_code);\n-\n-            if error_codes.contains(&err_code) {\n-                errors.push(format!(\"Found duplicate error code: `{}`\", err_code));\n-            }\n-\n-            error_codes.push(err_code);\n-        } else if line == \";\" {\n-            // Once we reach the undocumented error codes, adapt to different syntax.\n-            reached_undocumented_codes = true;\n         }\n     }\n "}]}