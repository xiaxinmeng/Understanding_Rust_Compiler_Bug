{"sha": "eb24b33b666451dbf0193df1a997e0fa1da970fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMjRiMzNiNjY2NDUxZGJmMDE5M2RmMWE5OTdlMGZhMWRhOTcwZmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:08Z"}, "message": "Rollup merge of #56966 - varkor:raw-pointer-deref-parens, r=zackmdavis\n\nCorrect strings for raw pointer deref and array access suggestions\n\nFixes https://github.com/rust-lang/rust/issues/56714.\nFixes https://github.com/rust-lang/rust/issues/56963.\n\nr? @zackmdavis", "tree": {"sha": "c9d48d06baab08face2cb3f4154bb5fd913782e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d48d06baab08face2cb3f4154bb5fd913782e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb24b33b666451dbf0193df1a997e0fa1da970fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAeECRBK7hj4Ov3rIwAAdHIIABRmEygtyws9dSVj7j4ZSwh7\nYdgJOmeOYDuXI0ScSPo/rZfT/9GY0U/UGZuuNZdH5D0avJUGssqBkWzKD0UdrZT0\nfbGwQjfzwJYQkp0WyJZHAWSpVVGyrrBwp8cmEdPHiol85rbT1Qe7FyXgM9yGzEyq\nN0dvQYS+pd84JviT37vCiLyykblzeBTZ1bk6ByIhDlIodKJHzWnLP4iE0m6cbGRH\nqfxejQN0NVsj2iBolMTRRWKLpRo7wevlMN8jKePUPf1+4rb5+EYrS/Lw+JSq1k4t\n4pTWPBzkbuN8EN4THXaWjIEIxJn2+YYG2ZWvR3gHDWOFQKITmR35DXeuRdFa8ec=\n=ChVx\n-----END PGP SIGNATURE-----\n", "payload": "tree c9d48d06baab08face2cb3f4154bb5fd913782e5\nparent 61f50d9d2e446ebc4fb4a8f5b5ea886f9e661efd\nparent 030987481b339616954d36b4c421e86077f00e75\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602948 +0100\ncommitter GitHub <noreply@github.com> 1545602948 +0100\n\nRollup merge of #56966 - varkor:raw-pointer-deref-parens, r=zackmdavis\n\nCorrect strings for raw pointer deref and array access suggestions\n\nFixes https://github.com/rust-lang/rust/issues/56714.\nFixes https://github.com/rust-lang/rust/issues/56963.\n\nr? @zackmdavis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb24b33b666451dbf0193df1a997e0fa1da970fd", "html_url": "https://github.com/rust-lang/rust/commit/eb24b33b666451dbf0193df1a997e0fa1da970fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb24b33b666451dbf0193df1a997e0fa1da970fd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f50d9d2e446ebc4fb4a8f5b5ea886f9e661efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f50d9d2e446ebc4fb4a8f5b5ea886f9e661efd", "html_url": "https://github.com/rust-lang/rust/commit/61f50d9d2e446ebc4fb4a8f5b5ea886f9e661efd"}, {"sha": "030987481b339616954d36b4c421e86077f00e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/030987481b339616954d36b4c421e86077f00e75", "html_url": "https://github.com/rust-lang/rust/commit/030987481b339616954d36b4c421e86077f00e75"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "bdf8b3c6f48d3a1f7ad5799b5a29226cc0e48d10", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eb24b33b666451dbf0193df1a997e0fa1da970fd", "patch": "@@ -3440,7 +3440,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             len.assert_usize(self.tcx),\n                             field.as_str().parse::<u64>()\n                         ) {\n-                            let base = self.tcx.hir().node_to_pretty_string(base.id);\n+                            let base = self.tcx.sess.source_map()\n+                                .span_to_snippet(base.span)\n+                                .unwrap_or_else(|_| self.tcx.hir().node_to_pretty_string(base.id));\n                             let help = \"instead of using tuple indexing, use array indexing\";\n                             let suggestion = format!(\"{}[{}]\", base, field);\n                             let applicability = if len < user_index {\n@@ -3454,11 +3456,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     ty::RawPtr(..) => {\n-                        let base = self.tcx.hir().node_to_pretty_string(base.id);\n-                        let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n+                        let base = self.tcx.sess.source_map()\n+                            .span_to_snippet(base.span)\n+                            .unwrap_or_else(|_| self.tcx.hir().node_to_pretty_string(base.id));\n+                        let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);\n                         let suggestion = format!(\"(*{}).{}\", base, field);\n                         err.span_suggestion_with_applicability(\n-                            field.span,\n+                            expr.span,\n                             &msg,\n                             suggestion,\n                             Applicability::MaybeIncorrect,"}, {"sha": "eb5b568b347387d2d7903038d98d02fb2a751bb7", "filename": "src/test/ui/issues/issue-11004.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fissues%2Fissue-11004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fissues%2Fissue-11004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11004.stderr?ref=eb24b33b666451dbf0193df1a997e0fa1da970fd", "patch": "@@ -2,13 +2,17 @@ error[E0609]: no field `x` on type `*mut A`\n   --> $DIR/issue-11004.rs:17:21\n    |\n LL |     let x : i32 = n.x; //~ no field `x` on type `*mut A`\n-   |                     ^ help: `n` is a native pointer; try dereferencing it: `(*n).x`\n+   |                   --^\n+   |                   |\n+   |                   help: `n` is a raw pointer; try dereferencing it: `(*n).x`\n \n error[E0609]: no field `y` on type `*mut A`\n   --> $DIR/issue-11004.rs:18:21\n    |\n LL |     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n-   |                     ^ help: `n` is a native pointer; try dereferencing it: `(*n).y`\n+   |                   --^\n+   |                   |\n+   |                   help: `n` is a raw pointer; try dereferencing it: `(*n).y`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b4ccdd5a56d4939ce553c2bc25bd6f717558479", "filename": "src/test/ui/parenthesised-deref-suggestion.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.rs?ref=eb24b33b666451dbf0193df1a997e0fa1da970fd", "patch": "@@ -0,0 +1,11 @@\n+struct Session {\n+    opts: u8,\n+}\n+\n+fn main() {\n+    let sess: &Session = &Session { opts: 0 };\n+    (sess as *const Session).opts; //~ ERROR no field `opts` on type `*const Session`\n+\n+    let x = [0u32];\n+    (x as [u32; 1]).0; //~ ERROR no field `0` on type `[u32; 1]`\n+}"}, {"sha": "71a2bf67f06ae8c362efe0408e0656470a269c94", "filename": "src/test/ui/parenthesised-deref-suggestion.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparenthesised-deref-suggestion.stderr?ref=eb24b33b666451dbf0193df1a997e0fa1da970fd", "patch": "@@ -0,0 +1,21 @@\n+error[E0609]: no field `opts` on type `*const Session`\n+  --> $DIR/parenthesised-deref-suggestion.rs:7:30\n+   |\n+LL |     (sess as *const Session).opts; //~ ERROR no field `opts` on type `*const Session`\n+   |                              ^^^^\n+help: `(sess as *const Session)` is a raw pointer; try dereferencing it\n+   |\n+LL |     (*(sess as *const Session)).opts; //~ ERROR no field `opts` on type `*const Session`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0609]: no field `0` on type `[u32; 1]`\n+  --> $DIR/parenthesised-deref-suggestion.rs:10:21\n+   |\n+LL |     (x as [u32; 1]).0; //~ ERROR no field `0` on type `[u32; 1]`\n+   |     ----------------^\n+   |     |\n+   |     help: instead of using tuple indexing, use array indexing: `(x as [u32; 1])[0]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "7525f6705156723a318b45efa69ea2a77ea32338", "filename": "src/test/ui/unsafe/unsafe-fn-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb24b33b666451dbf0193df1a997e0fa1da970fd/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-autoderef.stderr?ref=eb24b33b666451dbf0193df1a997e0fa1da970fd", "patch": "@@ -2,7 +2,9 @@ error[E0609]: no field `f` on type `*const Rec`\n   --> $DIR/unsafe-fn-autoderef.rs:29:14\n    |\n LL |     return p.f; //~ ERROR no field `f` on type `*const Rec`\n-   |              ^ help: `p` is a native pointer; try dereferencing it: `(*p).f`\n+   |            --^\n+   |            |\n+   |            help: `p` is a raw pointer; try dereferencing it: `(*p).f`\n \n error: aborting due to previous error\n "}]}