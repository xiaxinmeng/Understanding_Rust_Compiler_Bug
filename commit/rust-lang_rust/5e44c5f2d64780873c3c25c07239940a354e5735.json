{"sha": "5e44c5f2d64780873c3c25c07239940a354e5735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNDRjNWYyZDY0NzgwODczYzNjMjVjMDcyMzk5NDBhMzU0ZTU3MzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T14:42:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T14:42:33Z"}, "message": "Rollup merge of #64420 - nnethercote:inline-mark_neighbours_as_waiting_from, r=Mark-Simulacrum\n\nInline `mark_neighbours_as_waiting_from`.\n\nThis function is very hot, doesn't get inlined because it's recursive,\nand the function calls are significant.\n\nThis commit splits it into inlined and uninlined variants, and uses the\ninlined variant for the hot call site. This wins several percent on a\nfew benchmarks.\n\nr? @nikomatsakis", "tree": {"sha": "75f716bd5a255fa284ad5a3b8d74d23e212d6fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f716bd5a255fa284ad5a3b8d74d23e212d6fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e44c5f2d64780873c3c25c07239940a354e5735", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfPxaCRBK7hj4Ov3rIwAAdHIIAISzA3od3JbeOqgMyu0ANKWx\ndH/f1WHoHch+azP1qHjJQAbzQ/kvLpj6kZArCCFsS/xwvrOTOhY/GmSmErJmm3al\n/azfrF105H/jYFf+gB0EEM//191vvhaRsjKHN+CMcY4YCAAk4iUlTnGowxi75ei1\nkhX6HGxYKxjSLE5JQ1lKiKDQIEnEc35uJKGxVDZiUEDsafpYbYWx5RWurKILEvXp\nq94UXMVrgstVDWTS7hkXavzbleDtiisOHTniGss/6kVJ6iGsOjqfq1aR6/Nd8Xch\nK1/gStSvD0DcVmXv3jkzDeQAeeEv54nls4jtRUvxo06N2xSMMVXhzQkBd4aefLM=\n=uuaG\n-----END PGP SIGNATURE-----\n", "payload": "tree 75f716bd5a255fa284ad5a3b8d74d23e212d6fcc\nparent f669872690ff403e36fe7ae28d53ea3eb9032b79\nparent a2261ad66400c3145f96ebff0d9b75e910fa89dd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568472153 +0200\ncommitter GitHub <noreply@github.com> 1568472153 +0200\n\nRollup merge of #64420 - nnethercote:inline-mark_neighbours_as_waiting_from, r=Mark-Simulacrum\n\nInline `mark_neighbours_as_waiting_from`.\n\nThis function is very hot, doesn't get inlined because it's recursive,\nand the function calls are significant.\n\nThis commit splits it into inlined and uninlined variants, and uses the\ninlined variant for the hot call site. This wins several percent on a\nfew benchmarks.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e44c5f2d64780873c3c25c07239940a354e5735", "html_url": "https://github.com/rust-lang/rust/commit/5e44c5f2d64780873c3c25c07239940a354e5735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e44c5f2d64780873c3c25c07239940a354e5735/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f669872690ff403e36fe7ae28d53ea3eb9032b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/f669872690ff403e36fe7ae28d53ea3eb9032b79", "html_url": "https://github.com/rust-lang/rust/commit/f669872690ff403e36fe7ae28d53ea3eb9032b79"}, {"sha": "a2261ad66400c3145f96ebff0d9b75e910fa89dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2261ad66400c3145f96ebff0d9b75e910fa89dd", "html_url": "https://github.com/rust-lang/rust/commit/a2261ad66400c3145f96ebff0d9b75e910fa89dd"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "6c52e626ababd86917cf4566556368b03d7cb184", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e44c5f2d64780873c3c25c07239940a354e5735/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e44c5f2d64780873c3c25c07239940a354e5735/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=5e44c5f2d64780873c3c25c07239940a354e5735", "patch": "@@ -559,13 +559,20 @@ impl<O: ForestObligation> ObligationForest<O> {\n         trace\n     }\n \n-    #[inline]\n-    fn mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n+    // This always-inlined function is for the hot call site.\n+    #[inline(always)]\n+    fn inlined_mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n         for dependent in node.parent.iter().chain(node.dependents.iter()) {\n             self.mark_as_waiting_from(&self.nodes[dependent.get()]);\n         }\n     }\n \n+    // This never-inlined function is for the cold call site.\n+    #[inline(never)]\n+    fn uninlined_mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n+        self.inlined_mark_neighbors_as_waiting_from(node)\n+    }\n+\n     /// Marks all nodes that depend on a pending node as `NodeState::Waiting`.\n     fn mark_as_waiting(&self) {\n         for node in &self.nodes {\n@@ -576,7 +583,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         for node in &self.nodes {\n             if node.state.get() == NodeState::Pending {\n-                self.mark_neighbors_as_waiting_from(node);\n+                // This call site is hot.\n+                self.inlined_mark_neighbors_as_waiting_from(node);\n             }\n         }\n     }\n@@ -588,7 +596,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             NodeState::Pending | NodeState::Done => {},\n         }\n \n-        self.mark_neighbors_as_waiting_from(node);\n+        // This call site is cold.\n+        self.uninlined_mark_neighbors_as_waiting_from(node);\n     }\n \n     /// Compresses the vector, removing all popped nodes. This adjusts"}]}