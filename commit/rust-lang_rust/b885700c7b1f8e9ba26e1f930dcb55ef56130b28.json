{"sha": "b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "node_id": "C_kwDOAAsO6NoAKGI4ODU3MDBjN2IxZjhlOWJhMjZlMWY5MzBkY2I1NWVmNTYxMzBiMjg", "commit": {"author": {"name": "Alyssa Verkade", "email": "alyssaverkade@gmail.com", "date": "2022-01-22T23:35:09Z"}, "committer": {"name": "Alyssa Verkade", "email": "alyssaverkade@gmail.com", "date": "2022-01-23T00:21:16Z"}, "message": "[borrowck] Fix help on mutating &self in async fns\n\nPreviously, when rustc was provided an async function that tried to\nmutate through a shared reference to an implicit self (as shown in the\nui test), rustc would suggest modifying the parameter signature\nto `&mut` + the fully qualified name of the ty (in the case of the repro\n`S`). If a user modified their code to match the suggestion, the\ncompiler would not accept it.\n\nThis commit modifies the suggestion so that when rustc is provided the\nui test that is also attached in this commit, it suggests (correctly)\n`&mut self`. We try to be careful about distinguishing between implicit\nand explicit self annotations, since the latter seem to be handled\ncorrectly already.\n\nFixes rust-lang/rust#93093", "tree": {"sha": "a0fa150b9abe48451760706884d99b53a1329f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0fa150b9abe48451760706884d99b53a1329f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "html_url": "https://github.com/rust-lang/rust/commit/b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/comments", "author": {"login": "alyssaverkade", "id": 41844095, "node_id": "MDQ6VXNlcjQxODQ0MDk1", "avatar_url": "https://avatars.githubusercontent.com/u/41844095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alyssaverkade", "html_url": "https://github.com/alyssaverkade", "followers_url": "https://api.github.com/users/alyssaverkade/followers", "following_url": "https://api.github.com/users/alyssaverkade/following{/other_user}", "gists_url": "https://api.github.com/users/alyssaverkade/gists{/gist_id}", "starred_url": "https://api.github.com/users/alyssaverkade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alyssaverkade/subscriptions", "organizations_url": "https://api.github.com/users/alyssaverkade/orgs", "repos_url": "https://api.github.com/users/alyssaverkade/repos", "events_url": "https://api.github.com/users/alyssaverkade/events{/privacy}", "received_events_url": "https://api.github.com/users/alyssaverkade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alyssaverkade", "id": 41844095, "node_id": "MDQ6VXNlcjQxODQ0MDk1", "avatar_url": "https://avatars.githubusercontent.com/u/41844095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alyssaverkade", "html_url": "https://github.com/alyssaverkade", "followers_url": "https://api.github.com/users/alyssaverkade/followers", "following_url": "https://api.github.com/users/alyssaverkade/following{/other_user}", "gists_url": "https://api.github.com/users/alyssaverkade/gists{/gist_id}", "starred_url": "https://api.github.com/users/alyssaverkade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alyssaverkade/subscriptions", "organizations_url": "https://api.github.com/users/alyssaverkade/orgs", "repos_url": "https://api.github.com/users/alyssaverkade/repos", "events_url": "https://api.github.com/users/alyssaverkade/events{/privacy}", "received_events_url": "https://api.github.com/users/alyssaverkade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "a0b269bc44ad7d09b9774da9eee0b652e41c8e39", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "patch": "@@ -488,12 +488,32 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     // don't create labels for compiler-generated spans\n                                     Some(_) => None,\n                                     None => {\n-                                        let (span, suggestion) = suggest_ampmut(\n-                                            self.infcx.tcx,\n-                                            local_decl,\n-                                            opt_assignment_rhs_span,\n-                                            *opt_ty_info,\n-                                        );\n+                                        let (span, suggestion) = if name != kw::SelfLower {\n+                                            suggest_ampmut(\n+                                                self.infcx.tcx,\n+                                                local_decl,\n+                                                opt_assignment_rhs_span,\n+                                                *opt_ty_info,\n+                                            )\n+                                        } else {\n+                                            match local_decl.local_info.as_deref() {\n+                                                Some(LocalInfo::User(ClearCrossCrate::Set(\n+                                                    mir::BindingForm::Var(mir::VarBindingForm {\n+                                                        opt_ty_info: None,\n+                                                        ..\n+                                                    }),\n+                                                ))) => {\n+                                                    suggest_ampmut_self(self.infcx.tcx, local_decl)\n+                                                }\n+                                                // explicit self (eg `self: &'a Self`)\n+                                                _ => suggest_ampmut(\n+                                                    self.infcx.tcx,\n+                                                    local_decl,\n+                                                    opt_assignment_rhs_span,\n+                                                    *opt_ty_info,\n+                                                ),\n+                                            }\n+                                        };\n                                         Some((true, span, suggestion))\n                                     }\n                                 }"}, {"sha": "f4db5ecafac40a6be0600830a20bff70cc3de149", "filename": "src/test/ui/borrowck/issue-93093.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs?ref=b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+struct S {\n+    foo: usize,\n+}\n+impl S {\n+    async fn bar(&self) { //~ HELP consider changing this to be a mutable reference\n+        //~| SUGGESTION &mut self\n+        self.foo += 1; //~ ERROR cannot assign to `self.foo`, which is behind a `&` reference [E0594]\n+    }\n+}\n+\n+fn main() {\n+    S { foo: 1 }.bar();\n+}"}, {"sha": "031128af47655e34fa8cef6f8552eb2f887afabe", "filename": "src/test/ui/borrowck/issue-93093.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b885700c7b1f8e9ba26e1f930dcb55ef56130b28/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr?ref=b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "patch": "@@ -0,0 +1,12 @@\n+error[E0594]: cannot assign to `self.foo`, which is behind a `&` reference\n+  --> $DIR/issue-93093.rs:8:9\n+   |\n+LL |     async fn bar(&self) {\n+   |                  ----- help: consider changing this to be a mutable reference: `&mut self`\n+LL |\n+LL |         self.foo += 1;\n+   |         ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}]}