{"sha": "683c4c788f36d67fbc873629b431105c7758dd68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2M0Yzc4OGYzNmQ2N2ZiYzg3MzYyOWI0MzExMDVjNzc1OGRkNjg=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-22T13:22:14Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-22T13:29:46Z"}, "message": "Add error message if `Scalar::from_(u)int` fails", "tree": {"sha": "080fcba8c303a3ad683782b7252aa327bf188722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/080fcba8c303a3ad683782b7252aa327bf188722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683c4c788f36d67fbc873629b431105c7758dd68", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXf9vyxgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClCIRwD6AiP+tB/cJzFef1aM3LSNe3vc\nga87GIhBuead11UJvF4A/R3gfZYKL76cK4fsXsD0c/ZavVuQjlt8AxU0GcVHBEcM\n=yOYg\n-----END PGP SIGNATURE-----", "payload": "tree 080fcba8c303a3ad683782b7252aa327bf188722\nparent 309f437e1d20ce93597eec0514a9cb80150d8861\nauthor Christian Poveda <git@christianpoveda.xyz> 1577020934 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577021386 -0500\n\nAdd error message if `Scalar::from_(u)int` fails\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683c4c788f36d67fbc873629b431105c7758dd68", "html_url": "https://github.com/rust-lang/rust/commit/683c4c788f36d67fbc873629b431105c7758dd68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683c4c788f36d67fbc873629b431105c7758dd68/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309f437e1d20ce93597eec0514a9cb80150d8861", "url": "https://api.github.com/repos/rust-lang/rust/commits/309f437e1d20ce93597eec0514a9cb80150d8861", "html_url": "https://github.com/rust-lang/rust/commit/309f437e1d20ce93597eec0514a9cb80150d8861"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "f48d22291c6a4308ecc12aa41934e21d2186fe59", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/683c4c788f36d67fbc873629b431105c7758dd68/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683c4c788f36d67fbc873629b431105c7758dd68/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=683c4c788f36d67fbc873629b431105c7758dd68", "patch": "@@ -248,7 +248,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n-        Self::try_from_uint(i, size).unwrap()\n+        let i = i.into();\n+        Self::try_from_uint(i, size).unwrap_or_else(|| {\n+            bug!(\"Unsigned value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]\n@@ -285,7 +288,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     #[inline]\n     pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n-        Self::try_from_int(i, size).unwrap()\n+        let i = i.into();\n+        Self::try_from_int(i, size).unwrap_or_else(|| {\n+            bug!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]"}, {"sha": "294b361ee272176089ee1bf6a622b53220487bfe", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/683c4c788f36d67fbc873629b431105c7758dd68/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683c4c788f36d67fbc873629b431105c7758dd68/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=683c4c788f36d67fbc873629b431105c7758dd68", "patch": "@@ -224,7 +224,7 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     }\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n-        Self::try_from_uint(i, layout).unwrap()\n+        Self::from_scalar(Scalar::from_uint(i, layout.size), layout)\n     }\n \n     #[inline]\n@@ -234,7 +234,7 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n \n     #[inline]\n     pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n-        Self::try_from_int(i, layout).unwrap()\n+        Self::from_scalar(Scalar::from_int(i, layout.size), layout)\n     }\n \n     #[inline]"}]}