{"sha": "45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZWVhOWE4MjJhOWU2ODRiOGE4YTE2YzNmNTZkMDIxMmE0ZmNmY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-09T12:03:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-09T12:03:14Z"}, "message": "Auto merge of #5771 - montrivo:bugfix/single-match-else, r=matthiaskrgr\n\nsingle_match_else - single expr/stmt else block corner case\n\nOne approach to fix #3489.\nSee discussion in the issue.\n\nchangelog: single_match_else - single expr/stmt else block corner case fix", "tree": {"sha": "947d1a67a535205628892bf6a555e951444af616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947d1a67a535205628892bf6a555e951444af616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "html_url": "https://github.com/rust-lang/rust/commit/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12a316b01f22289d3e7701f129f92b313a98a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12a316b01f22289d3e7701f129f92b313a98a9d", "html_url": "https://github.com/rust-lang/rust/commit/e12a316b01f22289d3e7701f129f92b313a98a9d"}, {"sha": "dac19e3afccc63ff976bcf0a5ee385bdd0e075d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac19e3afccc63ff976bcf0a5ee385bdd0e075d5", "html_url": "https://github.com/rust-lang/rust/commit/dac19e3afccc63ff976bcf0a5ee385bdd0e075d5"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "a6cc1097441cd84c5df5d8c8b32bee70ecc9eb33", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "patch": "@@ -530,16 +530,22 @@ fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n             // the lint noisy in unnecessary situations\n             return;\n         }\n-        let els = remove_blocks(&arms[1].body);\n-        let els = if is_unit_expr(els) {\n+        let els = arms[1].body;\n+        let els = if is_unit_expr(remove_blocks(els)) {\n             None\n-        } else if let ExprKind::Block(_, _) = els.kind {\n-            // matches with blocks that contain statements are prettier as `if let + else`\n-            Some(els)\n+        } else if let ExprKind::Block(Block { stmts, expr: block_expr, .. }, _) = els.kind {\n+            if stmts.len() == 1 && block_expr.is_none() || stmts.is_empty() && block_expr.is_some() {\n+                // single statement/expr \"else\" block, don't lint\n+                return;\n+            } else {\n+                // block with 2+ statements or 1 expr and 1+ statement\n+                Some(els)\n+            }\n         } else {\n-            // allow match arms with just expressions\n-            return;\n+            // not a block, don't lint\n+            return; \n         };\n+\n         let ty = cx.tables().expr_ty(ex);\n         if ty.kind != ty::Bool || is_allowed(cx, MATCH_BOOL, ex.hir_id) {\n             check_single_match_single_pattern(cx, ex, arms, expr, els);"}, {"sha": "b624a41a29b2da10375b212d321afbabac572c6a", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "patch": "@@ -1,4 +1,6 @@\n #![warn(clippy::single_match_else)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::no_effect)]\n \n enum ExprNode {\n     ExprAddrOf,\n@@ -30,6 +32,55 @@ macro_rules! unwrap_addr {\n     };\n }\n \n+#[rustfmt::skip]\n fn main() {\n     unwrap_addr!(ExprNode::Unicorns);\n+\n+    //\n+    // don't lint single exprs/statements\n+    //\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => return,\n+    }\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            return\n+        },\n+    }\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            return;\n+        },\n+    }\n+\n+    //\n+    // lint multiple exprs/statements \"else\" blocks\n+    //\n+\n+    // lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            println!(\"else block\");\n+            return\n+        },\n+    }\n+\n+    // lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            println!(\"else block\");\n+            return;\n+        },\n+    }\n }"}, {"sha": "3a07c2ec5426278848e9b2e5e3910ea03a01ba31", "filename": "tests/ui/single_match_else.stderr", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=45eea9a822a9e684b8a8a16c3f56d0212a4fcfcb", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match_else.rs:12:5\n+  --> $DIR/single_match_else.rs:14:5\n    |\n LL | /     match ExprNode::Butterflies {\n LL | |         ExprNode::ExprAddrOf => Some(&NODE),\n@@ -19,5 +19,45 @@ LL |         None\n LL |     }\n    |\n \n-error: aborting due to previous error\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:70:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         Some(a) => println!(\"${:?}\", a),\n+LL | |         None => {\n+LL | |             println!(\"else block\");\n+LL | |             return\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL |     if let Some(a) = Some(1) { println!(\"${:?}\", a) } else {\n+LL |         println!(\"else block\");\n+LL |         return\n+LL |     }\n+   |\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:79:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         Some(a) => println!(\"${:?}\", a),\n+LL | |         None => {\n+LL | |             println!(\"else block\");\n+LL | |             return;\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL |     if let Some(a) = Some(1) { println!(\"${:?}\", a) } else {\n+LL |         println!(\"else block\");\n+LL |         return;\n+LL |     }\n+   |\n+\n+error: aborting due to 3 previous errors\n "}]}