{"sha": "4fa56e3ab10ce3214cae2fdef1973eef406180ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTU2ZTNhYjEwY2UzMjE0Y2FlMmZkZWYxOTczZWVmNDA2MTgwY2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-17T17:36:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T17:36:13Z"}, "message": "Merge #8068\n\n8068: Correctly handle `#[cfg]` on function parameters r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5649\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "daca310d9e603096737b5da12cdd573fdaf1d530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daca310d9e603096737b5da12cdd573fdaf1d530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa56e3ab10ce3214cae2fdef1973eef406180ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUj4NCRBK7hj4Ov3rIwAAdHIIAI1Z+QxDHfgwkFOJZBG4xocS\n8fwoeVAA5Tutiv/DEOHaMBCA/J48Gk3C19Qimigvc8P6W21KQcs3q4p+KD5u/FCr\nXM5EaYK7AFLPPuC7a3LTG9T6OEDosvZZHqbapBWxfalp7uloPZ66pmKAJnJXx2fh\nY6Ea140KY2Lc3o1UIygBb+djiW9Wv61LWJss8p+W5zOmg4XoDfHyGyO+iJGxaZUh\njwtvo9lM8zYFdVAnbL2QxKG2D0lGsztgBs72PPLimc7tq0CEHRXjZNTElw++mSs5\nTXxAbJUuKs583Kvyq9ob18vVOPnIayrFs6ladEA/hGk5PCM+4PrUWKgqCk8D3XM=\n=HR+y\n-----END PGP SIGNATURE-----\n", "payload": "tree daca310d9e603096737b5da12cdd573fdaf1d530\nparent 0a6471384529bd8861c628756695c52be4c6837f\nparent 9436436d20db4d7b13809844ef3e12563dc6be65\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616002573 +0000\ncommitter GitHub <noreply@github.com> 1616002573 +0000\n\nMerge #8068\n\n8068: Correctly handle `#[cfg]` on function parameters r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5649\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa56e3ab10ce3214cae2fdef1973eef406180ce", "html_url": "https://github.com/rust-lang/rust/commit/4fa56e3ab10ce3214cae2fdef1973eef406180ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa56e3ab10ce3214cae2fdef1973eef406180ce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6471384529bd8861c628756695c52be4c6837f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6471384529bd8861c628756695c52be4c6837f", "html_url": "https://github.com/rust-lang/rust/commit/0a6471384529bd8861c628756695c52be4c6837f"}, {"sha": "9436436d20db4d7b13809844ef3e12563dc6be65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9436436d20db4d7b13809844ef3e12563dc6be65", "html_url": "https://github.com/rust-lang/rust/commit/9436436d20db4d7b13809844ef3e12563dc6be65"}], "stats": {"total": 251, "additions": 172, "deletions": 79}, "files": [{"sha": "e976e419ebc7c42af1cafa82ce5867b3621eb3b6", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     attr::Attrs,\n     body::Expander,\n     db::DefDatabase,\n-    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem},\n+    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem, Param},\n     type_ref::{TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -36,19 +36,38 @@ impl FunctionData {\n     pub(crate) fn fn_data_query(db: &dyn DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n         let loc = func.lookup(db);\n         let krate = loc.container.module(db).krate;\n+        let crate_graph = db.crate_graph();\n+        let cfg_options = &crate_graph[krate].cfg_options;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let func = &item_tree[loc.id.value];\n \n+        let enabled_params = func\n+            .params\n+            .clone()\n+            .filter(|&param| item_tree.attrs(db, krate, param.into()).is_cfg_enabled(cfg_options));\n+\n+        // If last cfg-enabled param is a `...` param, it's a varargs function.\n+        let is_varargs = enabled_params\n+            .clone()\n+            .next_back()\n+            .map_or(false, |param| matches!(item_tree[param], Param::Varargs));\n+\n         Arc::new(FunctionData {\n             name: func.name.clone(),\n-            params: func.params.iter().map(|id| item_tree[*id].clone()).collect(),\n+            params: enabled_params\n+                .clone()\n+                .filter_map(|id| match &item_tree[id] {\n+                    Param::Normal(ty) => Some(item_tree[*ty].clone()),\n+                    Param::Varargs => None,\n+                })\n+                .collect(),\n             ret_type: item_tree[func.ret_type].clone(),\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n             has_self_param: func.has_self_param,\n             has_body: func.has_body,\n             qualifier: func.qualifier.clone(),\n             is_in_extern_block: func.is_in_extern_block,\n-            is_varargs: func.is_varargs,\n+            is_varargs,\n             visibility: item_tree[func.visibility].clone(),\n         })\n     }"}, {"sha": "90df3d9291d90fbb3001cdbd5796b7af9da94d5a", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -134,6 +134,7 @@ impl ItemTree {\n                 imports,\n                 extern_crates,\n                 functions,\n+                params,\n                 structs,\n                 fields,\n                 unions,\n@@ -157,6 +158,7 @@ impl ItemTree {\n             imports.shrink_to_fit();\n             extern_crates.shrink_to_fit();\n             functions.shrink_to_fit();\n+            params.shrink_to_fit();\n             structs.shrink_to_fit();\n             fields.shrink_to_fit();\n             unions.shrink_to_fit();\n@@ -303,6 +305,7 @@ struct ItemTreeData {\n     imports: Arena<Import>,\n     extern_crates: Arena<ExternCrate>,\n     functions: Arena<Function>,\n+    params: Arena<Param>,\n     structs: Arena<Struct>,\n     fields: Arena<Field>,\n     unions: Arena<Union>,\n@@ -334,6 +337,7 @@ pub enum AttrOwner {\n \n     Variant(Idx<Variant>),\n     Field(Idx<Field>),\n+    Param(Idx<Param>),\n }\n \n macro_rules! from_attrs {\n@@ -348,7 +352,7 @@ macro_rules! from_attrs {\n     };\n }\n \n-from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>));\n+from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>), Param(Idx<Param>));\n \n /// Trait implemented by all item nodes in the item tree.\n pub trait ItemTreeNode: Clone {\n@@ -484,7 +488,7 @@ macro_rules! impl_index {\n     };\n }\n \n-impl_index!(fields: Field, variants: Variant);\n+impl_index!(fields: Field, variants: Variant, params: Param);\n \n impl Index<RawVisibilityId> for ItemTree {\n     type Output = RawVisibility;\n@@ -560,12 +564,17 @@ pub struct Function {\n     /// Whether the function is located in an `extern` block (*not* whether it is an\n     /// `extern \"abi\" fn`).\n     pub is_in_extern_block: bool,\n-    pub params: Box<[Idx<TypeRef>]>,\n-    pub is_varargs: bool,\n+    pub params: IdRange<Param>,\n     pub ret_type: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Fn>,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum Param {\n+    Normal(Idx<TypeRef>),\n+    Varargs,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FunctionQualifier {\n     pub is_default: bool,\n@@ -796,6 +805,7 @@ pub struct Variant {\n     pub fields: Fields,\n }\n \n+/// A range of densely allocated ItemTree IDs.\n pub struct IdRange<T> {\n     range: Range<u32>,\n     _p: PhantomData<T>,\n@@ -814,6 +824,12 @@ impl<T> Iterator for IdRange<T> {\n     }\n }\n \n+impl<T> DoubleEndedIterator for IdRange<T> {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.range.next_back().map(|raw| Idx::from_raw(raw.into()))\n+    }\n+}\n+\n impl<T> fmt::Debug for IdRange<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(&format!(\"IdRange::<{}>\", type_name::<T>())).field(&self.range).finish()"}, {"sha": "3f558edd81622e33d2feb6e8ada2b99dc5254740", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -333,8 +333,8 @@ impl Ctx {\n         let visibility = self.lower_visibility(func);\n         let name = func.name()?.as_name();\n \n-        let mut params = Vec::new();\n         let mut has_self_param = false;\n+        let start_param = self.next_param_idx();\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = match self_param.ty() {\n@@ -356,22 +356,25 @@ impl Ctx {\n                         }\n                     }\n                 };\n-                params.push(self_type);\n+                let ty = self.data().type_refs.intern(self_type);\n+                let idx = self.data().params.alloc(Param::Normal(ty));\n+                self.add_attrs(idx.into(), RawAttrs::new(&self_param, &self.hygiene));\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n-                params.push(type_ref);\n-            }\n-        }\n-        let params = params.into_iter().map(|param| self.data().type_refs.intern(param)).collect();\n-\n-        let mut is_varargs = false;\n-        if let Some(params) = func.param_list() {\n-            if let Some(last) = params.params().last() {\n-                is_varargs = last.dotdotdot_token().is_some();\n+                let idx = match param.dotdotdot_token() {\n+                    Some(_) => self.data().params.alloc(Param::Varargs),\n+                    None => {\n+                        let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n+                        let ty = self.data().type_refs.intern(type_ref);\n+                        self.data().params.alloc(Param::Normal(ty))\n+                    }\n+                };\n+                self.add_attrs(idx.into(), RawAttrs::new(&param, &self.hygiene));\n             }\n         }\n+        let end_param = self.next_param_idx();\n+        let params = IdRange::new(start_param..end_param);\n \n         let ret_type = match func.ret_type().and_then(|rt| rt.ty()) {\n             Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n@@ -419,7 +422,6 @@ impl Ctx {\n             qualifier,\n             is_in_extern_block: false,\n             params,\n-            is_varargs,\n             ret_type,\n             ast_id,\n         };\n@@ -682,9 +684,11 @@ impl Ctx {\n             GenericsOwner::Function(func) => {\n                 generics.fill(&self.body_ctx, sm, node);\n                 // lower `impl Trait` in arguments\n-                for param in &*func.params {\n-                    let param = self.data().type_refs.lookup(*param);\n-                    generics.fill_implicit_impl_trait_args(param);\n+                for id in func.params.clone() {\n+                    if let Param::Normal(ty) = self.data().params[id] {\n+                        let ty = self.data().type_refs.lookup(ty);\n+                        generics.fill_implicit_impl_trait_args(ty);\n+                    }\n                 }\n             }\n             GenericsOwner::Struct\n@@ -769,6 +773,11 @@ impl Ctx {\n             self.tree.data.as_ref().map_or(0, |data| data.variants.len() as u32),\n         ))\n     }\n+    fn next_param_idx(&self) -> Idx<Param> {\n+        Idx::from_raw(RawIdx::from(\n+            self.tree.data.as_ref().map_or(0, |data| data.params.len() as u32),\n+        ))\n+    }\n }\n \n fn desugar_future_path(orig: TypeRef) -> Path {"}, {"sha": "3909ad35450a2faa2433d5f94cc49a6e96623af6", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -713,4 +713,38 @@ fn main() {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn cfgd_out_fn_params() {\n+        check_diagnostics(\n+            r#\"\n+fn foo(#[cfg(NEVER)] x: ()) {}\n+\n+struct S;\n+\n+impl S {\n+    fn method(#[cfg(NEVER)] self) {}\n+    fn method2(#[cfg(NEVER)] self, arg: u8) {}\n+    fn method3(self, #[cfg(NEVER)] arg: u8) {}\n+}\n+\n+extern \"C\" {\n+    fn fixed(fixed: u8, #[cfg(NEVER)] ...);\n+    fn varargs(#[cfg(not(NEVER))] ...);\n+}\n+\n+fn main() {\n+    foo();\n+    S::method();\n+    S::method2(0);\n+    S::method3(S);\n+    S.method3();\n+    unsafe {\n+        fixed(0);\n+        varargs(1, 2, 3);\n+    }\n+}\n+            \"#,\n+        )\n+    }\n }"}, {"sha": "9e2f02d43560445fb46b5906374e4d97d04ba8b2", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -41,22 +41,32 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n         FnDef | FnTrait | FnPointer => (T!['('], T![')']),\n     };\n \n-    let m = p.start();\n+    let list_marker = p.start();\n     p.bump(bra);\n \n+    let mut param_marker = None;\n     if let FnDef = flavor {\n         // test self_param_outer_attr\n         // fn f(#[must_use] self) {}\n         let m = p.start();\n         attributes::outer_attrs(p);\n-        opt_self_param(p, m);\n+        match opt_self_param(p, m) {\n+            Ok(()) => {}\n+            Err(m) => param_marker = Some(m),\n+        }\n     }\n \n     while !p.at(EOF) && !p.at(ket) {\n         // test param_outer_arg\n         // fn f(#[attr1] pat: Type) {}\n-        let m = p.start();\n-        attributes::outer_attrs(p);\n+        let m = match param_marker.take() {\n+            Some(m) => m,\n+            None => {\n+                let m = p.start();\n+                attributes::outer_attrs(p);\n+                m\n+            }\n+        };\n \n         if !p.at_ts(PARAM_FIRST) {\n             p.error(\"expected value parameter\");\n@@ -72,8 +82,12 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n         }\n     }\n \n+    if let Some(m) = param_marker {\n+        m.abandon(p);\n+    }\n+\n     p.expect(ket);\n-    m.complete(p, PARAM_LIST);\n+    list_marker.complete(p, PARAM_LIST);\n }\n \n const PARAM_FIRST: TokenSet = patterns::PATTERN_FIRST.union(types::TYPE_FIRST);\n@@ -153,7 +167,7 @@ fn variadic_param(p: &mut Parser) -> bool {\n //     fn d(&'a mut self, x: i32) {}\n //     fn e(mut self) {}\n // }\n-fn opt_self_param(p: &mut Parser, m: Marker) {\n+fn opt_self_param(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     if p.at(T![self]) || p.at(T![mut]) && p.nth(1) == T![self] {\n         p.eat(T![mut]);\n         self_as_name(p);\n@@ -176,7 +190,7 @@ fn opt_self_param(p: &mut Parser, m: Marker) {\n                 | (T![&], LIFETIME_IDENT, T![self], _)\n                 | (T![&], LIFETIME_IDENT, T![mut], T![self])\n         ) {\n-            return m.abandon(p);\n+            return Err(m);\n         }\n         p.bump(T![&]);\n         if p.at(LIFETIME_IDENT) {\n@@ -189,6 +203,7 @@ fn opt_self_param(p: &mut Parser, m: Marker) {\n     if !p.at(T![')']) {\n         p.expect(T![,]);\n     }\n+    Ok(())\n }\n \n fn self_as_name(p: &mut Parser) {"}, {"sha": "a84088bf30dd0b6d96660a5f0bdc766c0e4cd82c", "filename": "crates/syntax/test_data/parser/inline/ok/0139_param_outer_arg.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -6,16 +6,16 @@ SOURCE_FILE@0..28\n       IDENT@3..4 \"f\"\n     PARAM_LIST@4..24\n       L_PAREN@4..5 \"(\"\n-      ATTR@5..13\n-        POUND@5..6 \"#\"\n-        L_BRACK@6..7 \"[\"\n-        PATH@7..12\n-          PATH_SEGMENT@7..12\n-            NAME_REF@7..12\n-              IDENT@7..12 \"attr1\"\n-        R_BRACK@12..13 \"]\"\n-      WHITESPACE@13..14 \" \"\n-      PARAM@14..23\n+      PARAM@5..23\n+        ATTR@5..13\n+          POUND@5..6 \"#\"\n+          L_BRACK@6..7 \"[\"\n+          PATH@7..12\n+            PATH_SEGMENT@7..12\n+              NAME_REF@7..12\n+                IDENT@7..12 \"attr1\"\n+          R_BRACK@12..13 \"]\"\n+        WHITESPACE@13..14 \" \"\n         IDENT_PAT@14..17\n           NAME@14..17\n             IDENT@14..17 \"pat\""}, {"sha": "88470c41c047e20e246e86db7352768350220032", "filename": "crates/syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4fa56e3ab10ce3214cae2fdef1973eef406180ce/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=4fa56e3ab10ce3214cae2fdef1973eef406180ce", "patch": "@@ -6,25 +6,25 @@ SOURCE_FILE@0..519\n       IDENT@3..5 \"g1\"\n     PARAM_LIST@5..34\n       L_PAREN@5..6 \"(\"\n-      ATTR@6..14\n-        POUND@6..7 \"#\"\n-        L_BRACK@7..8 \"[\"\n-        PATH@8..13\n-          PATH_SEGMENT@8..13\n-            NAME_REF@8..13\n-              IDENT@8..13 \"attr1\"\n-        R_BRACK@13..14 \"]\"\n-      WHITESPACE@14..15 \" \"\n-      ATTR@15..23\n-        POUND@15..16 \"#\"\n-        L_BRACK@16..17 \"[\"\n-        PATH@17..22\n-          PATH_SEGMENT@17..22\n-            NAME_REF@17..22\n-              IDENT@17..22 \"attr2\"\n-        R_BRACK@22..23 \"]\"\n-      WHITESPACE@23..24 \" \"\n-      PARAM@24..33\n+      PARAM@6..33\n+        ATTR@6..14\n+          POUND@6..7 \"#\"\n+          L_BRACK@7..8 \"[\"\n+          PATH@8..13\n+            PATH_SEGMENT@8..13\n+              NAME_REF@8..13\n+                IDENT@8..13 \"attr1\"\n+          R_BRACK@13..14 \"]\"\n+        WHITESPACE@14..15 \" \"\n+        ATTR@15..23\n+          POUND@15..16 \"#\"\n+          L_BRACK@16..17 \"[\"\n+          PATH@17..22\n+            PATH_SEGMENT@17..22\n+              NAME_REF@17..22\n+                IDENT@17..22 \"attr2\"\n+          R_BRACK@22..23 \"]\"\n+        WHITESPACE@23..24 \" \"\n         IDENT_PAT@24..27\n           NAME@24..27\n             IDENT@24..27 \"pat\"\n@@ -48,16 +48,16 @@ SOURCE_FILE@0..519\n       IDENT@41..43 \"g2\"\n     PARAM_LIST@43..59\n       L_PAREN@43..44 \"(\"\n-      ATTR@44..52\n-        POUND@44..45 \"#\"\n-        L_BRACK@45..46 \"[\"\n-        PATH@46..51\n-          PATH_SEGMENT@46..51\n-            NAME_REF@46..51\n-              IDENT@46..51 \"attr1\"\n-        R_BRACK@51..52 \"]\"\n-      WHITESPACE@52..53 \" \"\n-      PARAM@53..58\n+      PARAM@44..58\n+        ATTR@44..52\n+          POUND@44..45 \"#\"\n+          L_BRACK@45..46 \"[\"\n+          PATH@46..51\n+            PATH_SEGMENT@46..51\n+              NAME_REF@46..51\n+                IDENT@46..51 \"attr1\"\n+          R_BRACK@51..52 \"]\"\n+        WHITESPACE@52..53 \" \"\n         IDENT_PAT@53..54\n           NAME@53..54\n             IDENT@53..54 \"x\"\n@@ -203,16 +203,16 @@ SOURCE_FILE@0..519\n           IDENT@193..196 \"bar\"\n         PARAM_LIST@196..233\n           L_PAREN@196..197 \"(\"\n-          ATTR@197..204\n-            POUND@197..198 \"#\"\n-            L_BRACK@198..199 \"[\"\n-            PATH@199..203\n-              PATH_SEGMENT@199..203\n-                NAME_REF@199..203\n-                  IDENT@199..203 \"attr\"\n-            R_BRACK@203..204 \"]\"\n-          WHITESPACE@204..205 \" \"\n-          PARAM@205..211\n+          PARAM@197..211\n+            ATTR@197..204\n+              POUND@197..198 \"#\"\n+              L_BRACK@198..199 \"[\"\n+              PATH@199..203\n+                PATH_SEGMENT@199..203\n+                  NAME_REF@199..203\n+                    IDENT@199..203 \"attr\"\n+              R_BRACK@203..204 \"]\"\n+            WHITESPACE@204..205 \" \"\n             WILDCARD_PAT@205..206\n               UNDERSCORE@205..206 \"_\"\n             COLON@206..207 \":\""}]}