{"sha": "dcfb8d72e99425686376298fd793715f35b5d512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZmI4ZDcyZTk5NDI1Njg2Mzc2Mjk4ZmQ3OTM3MTVmMzViNWQ1MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-24T16:25:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-24T16:25:02Z"}, "message": "Auto merge of #32465 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 6 pull requests\n\n- Successful merges: #32276, #32416, #32452, #32459, #32462, #32464\n- Failed merges:", "tree": {"sha": "a202c287d30ee142f1931f5dd02bee256324d7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a202c287d30ee142f1931f5dd02bee256324d7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcfb8d72e99425686376298fd793715f35b5d512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfb8d72e99425686376298fd793715f35b5d512", "html_url": "https://github.com/rust-lang/rust/commit/dcfb8d72e99425686376298fd793715f35b5d512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcfb8d72e99425686376298fd793715f35b5d512/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d", "html_url": "https://github.com/rust-lang/rust/commit/dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d"}, {"sha": "b2dfb7c0a267d6f2adb9cbde1e157fc136fcaaab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dfb7c0a267d6f2adb9cbde1e157fc136fcaaab", "html_url": "https://github.com/rust-lang/rust/commit/b2dfb7c0a267d6f2adb9cbde1e157fc136fcaaab"}], "stats": {"total": 133, "additions": 120, "deletions": 13}, "files": [{"sha": "5513523e56b95373ca8d7332c8eeab7750f61937", "filename": "src/doc/book/drop.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Fdoc%2Fbook%2Fdrop.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Fdoc%2Fbook%2Fdrop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdrop.md?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -55,7 +55,7 @@ BOOM times 100!!!\n BOOM times 1!!!\n ```\n \n-The TNT goes off before the firecracker does, because it was declared\n+The `tnt` goes off before the `firecracker` does, because it was declared\n afterwards. Last in, first out.\n \n So what is `Drop` good for? Generally, `Drop` is used to clean up any resources"}, {"sha": "a793502e58d371e440d4743c1f54dced7f3d6331", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -18,6 +18,29 @@\n //! them cheap and safe to copy. For other types copies must be made\n //! explicitly, by convention implementing the `Clone` trait and calling\n //! the `clone` method.\n+//!\n+//! Basic usage example:\n+//!\n+//! ```\n+//! let s = String::new(); // String type implements Clone\n+//! let copy = s.clone(); // so we can clone it\n+//! ```\n+//!\n+//! To easily implement the Clone trait, you can also use\n+//! `#[derive(Clone)]`. Example:\n+//!\n+//! ```\n+//! #[derive(Clone)] // we add the Clone trait to Morpheus struct\n+//! struct Morpheus {\n+//!    blue_pill: f32,\n+//!    red_pill: i64,\n+//! }\n+//!\n+//! fn main() {\n+//!    let f = Morpheus { blue_pill: 0.0, red_pill: 0 };\n+//!    let copy = f.clone(); // and now we can clone it!\n+//! }\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "beed2075d049427d2daa39365d0e1730ee901f58", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -93,16 +93,12 @@\n //! let msg = Some(\"howdy\");\n //!\n //! // Take a reference to the contained string\n-//! match msg {\n-//!     Some(ref m) => println!(\"{}\", *m),\n-//!     None => (),\n+//! if let Some(ref m) = msg {\n+//!     println!(\"{}\", *m);\n //! }\n //!\n //! // Remove the contained string, destroying the Option\n-//! let unwrapped_msg = match msg {\n-//!     Some(m) => m,\n-//!     None => \"default message\",\n-//! };\n+//! let unwrapped_msg = msg.unwrap_or(\"default message\");\n //! ```\n //!\n //! Initialize a result to `None` before a loop:"}, {"sha": "c4b573db5f2dd41b44f4179cba30e5680ed88cfe", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -141,8 +141,8 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n ///\n /// Each handle is a shared reference to a global buffer of input data to this\n /// process. A handle can be `lock`'d to gain full access to [`BufRead`] methods\n-/// (e.g. `.lines()`). Writes to this handle are otherwise locked with respect\n-/// to other writes.\n+/// (e.g. `.lines()`). Reads to this handle are otherwise locked with respect\n+/// to other reads.\n ///\n /// This handle implements the `Read` trait, but beware that concurrent reads\n /// of `Stdin` must be executed with care."}, {"sha": "0c32feebecbca2be00439c029c41e9dc981509a0", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -9,6 +9,16 @@\n // except according to those terms.\n \n //! Temporal quantification.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use std::time::Duration;\n+//!\n+//! let five_seconds = Duration::new(5, 0);\n+//! // both declarations are equivalent\n+//! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n+//! ```\n \n #![stable(feature = \"time\", since = \"1.3.0\")]\n \n@@ -40,6 +50,22 @@ mod duration;\n /// no method to get \"the number of seconds\" from an instant. Instead, it only\n /// allows measuring the duration between two instants (or comparing two\n /// instants).\n+///\n+/// Example:\n+///\n+/// ```no_run\n+/// use std::time::{Duration, Instant};\n+/// use std::thread::sleep;\n+///\n+/// fn main() {\n+///    let now = Instant::now();\n+///\n+///    // we sleep for 2 seconds\n+///    sleep(Duration::new(2, 0));\n+///    // it prints '2'\n+///    println!(\"{}\", now.elapsed().as_secs());\n+/// }\n+/// ```\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n@@ -63,6 +89,30 @@ pub struct Instant(time::Instant);\n /// information about a `SystemTime`. By calculating the duration from this\n /// fixed point in time, a `SystemTime` can be converted to a human-readable time,\n /// or perhaps some other string representation.\n+///\n+/// Example:\n+///\n+/// ```no_run\n+/// use std::time::{Duration, SystemTime};\n+/// use std::thread::sleep;\n+///\n+/// fn main() {\n+///    let now = SystemTime::now();\n+///\n+///    // we sleep for 2 seconds\n+///    sleep(Duration::new(2, 0));\n+///    match now.elapsed() {\n+///        Ok(elapsed) => {\n+///            // it prints '2'\n+///            println!(\"{}\", elapsed.as_secs());\n+///        }\n+///        Err(e) => {\n+///            // an error occured!\n+///            println!(\"Error: {:?}\", e);\n+///        }\n+///    }\n+/// }\n+/// ```\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);"}, {"sha": "212a54447a8610d8ca95436b690487fd6acc923c", "filename": "src/libsyntax/errors/json.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -20,7 +20,7 @@\n // FIXME spec the JSON output properly.\n \n \n-use codemap::{MultiSpan, CodeMap};\n+use codemap::{Span, MultiSpan, CodeMap};\n use diagnostics::registry::Registry;\n use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion};\n use errors::emitter::Emitter;\n@@ -99,6 +99,16 @@ struct DiagnosticSpan {\n     /// 1-based, character offset.\n     column_start: usize,\n     column_end: usize,\n+    /// Source text from the start of line_start to the end of line_end.\n+    text: Vec<DiagnosticSpanLine>,\n+}\n+\n+#[derive(RustcEncodable)]\n+struct DiagnosticSpanLine {\n+    text: String,\n+    /// 1-based, character offset in self.text.\n+    highlight_start: usize,\n+    highlight_end: usize,\n }\n \n #[derive(RustcEncodable)]\n@@ -180,6 +190,7 @@ impl DiagnosticSpan {\n                 line_end: end.line,\n                 column_start: start.col.0 + 1,\n                 column_end: end.col.0 + 1,\n+                text: DiagnosticSpanLine::from_span(span, je),\n             }\n         }).collect()\n     }\n@@ -202,6 +213,7 @@ impl DiagnosticSpan {\n                         line_end: end.line,\n                         column_start: 0,\n                         column_end: end.col.0 + 1,\n+                        text: DiagnosticSpanLine::from_span(span, je),\n                     }\n                 }).collect()\n             }\n@@ -217,13 +229,39 @@ impl DiagnosticSpan {\n                         line_end: end.line,\n                         column_start: 0,\n                         column_end: 0,\n+                        text: DiagnosticSpanLine::from_span(span, je),\n                     }\n                 }).collect()\n             }\n         }\n     }\n }\n \n+impl DiagnosticSpanLine {\n+    fn from_span(span: &Span, je: &JsonEmitter) -> Vec<DiagnosticSpanLine> {\n+        let lines = match je.cm.span_to_lines(*span) {\n+            Ok(lines) => lines,\n+            Err(_) => {\n+                debug!(\"unprintable span\");\n+                return Vec::new();\n+            }\n+        };\n+\n+        let mut result = Vec::new();\n+        let fm = &*lines.file;\n+\n+        for line in &lines.lines {\n+            result.push(DiagnosticSpanLine {\n+                text: fm.get_line(line.line_index).unwrap().to_owned(),\n+                highlight_start: line.start_col.0 + 1,\n+                highlight_end: line.end_col.0 + 1,\n+            });\n+        }\n+\n+        result\n+    }\n+}\n+\n impl DiagnosticCode {\n     fn map_opt_string(s: Option<String>, je: &JsonEmitter) -> Option<DiagnosticCode> {\n         s.map(|s| {"}, {"sha": "cd3a2af30ab8fa62be91200080adea59307ae39d", "filename": "src/test/run-make/json-errors/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcfb8d72e99425686376298fd793715f35b5d512/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dcfb8d72e99425686376298fd793715f35b5d512/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=dcfb8d72e99425686376298fd793715f35b5d512", "patch": "@@ -6,5 +6,5 @@ all:\n \tcp foo.rs $(TMPDIR)\n \tcd $(TMPDIR)\n \t-$(RUSTC) -Z unstable-options --error-format=json foo.rs 2>$(LOG)\n-\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19}\\],\"children\":\\[\\]}' $(LOG)\n-\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"spans\":\\[{.*}\\],\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0}\\],\"children\":\\[\\]},{\"message\":\"  <u8 as core::ops::Add>\",\"code\":null,\"level\":\"help\",' $(LOG)\n+\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19,\"text\":\\[{\"text\":\"    let x = 42 + y;\",\"highlight_start\":18,\"highlight_end\":19}\\]}\\],\"children\":\\[\\]}' $(LOG)\n+\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"spans\":\\[{.*}\\],\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0,\"text\":\\[{.*}\\]}\\],\"children\":\\[\\]},{\"message\":\"  <u8 as core::ops::Add>\",\"code\":null,\"level\":\"help\",' $(LOG)"}]}