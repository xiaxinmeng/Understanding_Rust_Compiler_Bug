{"sha": "df290f127e923e0aacfe8223dd77f0fa222f0bc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjkwZjEyN2U5MjNlMGFhY2ZlODIyM2RkNzdmMGZhMjIyZjBiYzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-06T02:33:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-23T21:40:26Z"}, "message": "Require feature attributes, and add them where necessary", "tree": {"sha": "65f8e1091b566595f7b5cae402c2121f22529db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f8e1091b566595f7b5cae402c2121f22529db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df290f127e923e0aacfe8223dd77f0fa222f0bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df290f127e923e0aacfe8223dd77f0fa222f0bc8", "html_url": "https://github.com/rust-lang/rust/commit/df290f127e923e0aacfe8223dd77f0fa222f0bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df290f127e923e0aacfe8223dd77f0fa222f0bc8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "html_url": "https://github.com/rust-lang/rust/commit/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c"}], "stats": {"total": 955, "additions": 702, "deletions": 253}, "files": [{"sha": "1aa5564d0a15f96a00085548a3b7a2d2df1dd494", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -20,6 +20,7 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(path_ext)]\n+#![feature(str_char)]\n \n #![deny(warnings)]\n "}, {"sha": "cf9f6a39a55130ca39971959a52b6fc620509379", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -36,7 +36,7 @@\n #![feature(unsafe_no_drop_flag)]\n #![feature(step_by)]\n #![feature(str_char)]\n-#![cfg_attr(test, feature(rand, rustc_private, test))]\n+#![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n \n #![feature(no_std)]"}, {"sha": "365ef637a4c40a992b9a1731d50e6e2167f77a1d", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -20,6 +20,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unsafe_destructor)]\n+#![cfg_attr(test, feature(str_char))]\n \n #[macro_use] extern crate log;\n "}, {"sha": "33f9b63bc4907d006439c5a77f5d61a6ee8ea788", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -24,6 +24,8 @@\n #![feature(io)]\n #![feature(collections)]\n #![feature(debug_builders)]\n+#![feature(unique)]\n+#![feature(step_by)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}, {"sha": "63d1fe968fe1b6a0a3aa4c53a0b78f287e1d1d1e", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -28,6 +28,7 @@\n #![feature(libc)]\n #![feature(staged_api)]\n #![feature(unique)]\n+#![cfg_attr(test, feature(rustc_private, rand, collections))]\n \n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "8de773e9fec040ced0820c0a46f9404ad627085b", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -34,7 +34,7 @@\n #![deprecated(reason = \"use the crates.io `rand` library instead\",\n               since = \"1.0.0-alpha\")]\n \n-#![cfg_attr(test, feature(test, rand))]\n+#![cfg_attr(test, feature(test, rand, rustc_private))]\n \n #![allow(deprecated)]\n "}, {"sha": "9688447dc046a50f3f3996333d98c82354d20442", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -212,7 +212,7 @@ impl LintStore {\n     fn maybe_stage_features(&mut self, sess: &Session) {\n         let lvl = match sess.opts.unstable_features {\n             UnstableFeatures::Default => return,\n-            UnstableFeatures::Disallow => Warn,\n+            UnstableFeatures::Disallow => Forbid,\n             UnstableFeatures::Cheat => Allow\n         };\n         match self.by_name.get(\"unstable_features\") {"}, {"sha": "96657b1d261b39596a6617c633698185d4104935", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -26,7 +26,7 @@ use syntax::ast::{Item, Generics, StructField};\n use syntax::ast_util::is_local;\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, Visitor};\n-use syntax::feature_gate::emit_feature_warn;\n+use syntax::feature_gate::emit_feature_err;\n use util::nodemap::{NodeMap, DefIdMap, FnvHashSet, FnvHashMap};\n use util::ppaux::Repr;\n \n@@ -237,7 +237,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n \n-                    emit_feature_warn(&self.tcx.sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n                                       &feature, span, &msg);\n                 }\n             }"}, {"sha": "acc17edaf2c9d4265895b90ebe13f5f20e6d8959", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -49,6 +49,7 @@\n #![feature(std_misc)]\n #![feature(path_relative_from)]\n #![feature(step_by)]\n+#![cfg_attr(test, feature(test, rand))]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "054bfec7a206307e617f59f6889cff73d6d64cab", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -18,6 +18,7 @@\n #![feature(no_std)]\n #![no_std]\n #![unstable(feature = \"rustc_private\")]\n+#![cfg_attr(test, feature(hash))]\n \n //! A typesafe bitmask flag generator.\n "}, {"sha": "ee257dd0ac9919ac69feb14118d55152830ceaad", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -37,7 +37,7 @@ Core encoding and decoding interfaces.\n #![feature(std_misc)]\n #![feature(unicode)]\n #![feature(str_char)]\n-#![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(test, old_io))]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "1aa2189d315d238247fb20bce73925faf0159b64", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -128,7 +128,7 @@\n #![feature(unique)]\n #![feature(allow_internal_unstable)]\n #![feature(str_char)]\n-#![cfg_attr(test, feature(test, rustc_private))]\n+#![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std.\n #![feature(no_std)]"}, {"sha": "34f1b68fa9b31d64fe7e71972da5c8978846614b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -45,6 +45,7 @@\n #![feature(libc)]\n #![feature(set_stdio)]\n #![feature(os)]\n+#![cfg_attr(test, feature(old_io))]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "e0f013cbc805132eb2646e2e876215b6e1b22f09", "filename": "src/libunicode/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibunicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Flibunicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fchar.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -653,6 +653,7 @@ impl char {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -663,6 +664,7 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -685,6 +687,7 @@ impl char {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -695,6 +698,7 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);"}, {"sha": "197fb9a6d018c488ae9e81522666859c4e32d58a", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"anonexternmod\"]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "c0d81cd8e1bad335e807e7346044895240f3e662", "filename": "src/test/auxiliary/check_static_recursion_foreign_helper.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // Helper definition for test/run-pass/check-static-recursion-foreign.rs.\n \n+#![feature(libc)]\n+\n #[crate_id = \"check_static_recursion_foreign_helper\"]\n #[crate_type = \"lib\"]\n "}, {"sha": "fc2e328f68657e65c58f724a1fef960d62dd688b", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name=\"externcallback\"]\n #![crate_type = \"lib\"]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "92239ce55981c808dfd0991c4a7eaa2906377223", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"foreign_lib\"]\n+#![feature(libc)]\n \n pub mod rustrt {\n     extern crate libc;"}, {"sha": "b6199f59ebe0638c9e82c3bc27ae0c129ac2104b", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name=\"socketlib\"]\n #![crate_type = \"lib\"]\n+#![feature(libc)]\n \n pub mod socket {\n     extern crate libc;"}, {"sha": "4a8839abc7cb2083017e8030f302d466c04266ac", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n pub mod testtypes {\n     use std::any::TypeId;\n "}, {"sha": "58dee1216ee6047d03262e8cf8714c5bb779907f", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-stage1\n // force-host\n \n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n #![crate_type = \"dylib\"]\n \n extern crate syntax;"}, {"sha": "3d5e52d709df3ec4c1966eafc87252acd368efc0", "filename": "src/test/auxiliary/issue_3907.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3907.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n pub trait Foo : MarkerTrait {"}, {"sha": "5c878b1e667d9f61128c7f92cd90e6a1bca13e79", "filename": "src/test/auxiliary/issue_5844_aux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n extern \"C\" {"}, {"sha": "fd3e9b9ac9dcea8ca1de970fcddb5c8b842b0654", "filename": "src/test/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, old_path)]\n+\n use std::dynamic_lib::DynamicLibrary;\n \n #[no_mangle]"}, {"sha": "3b45b0ae701061c125cca7917ab8f104c94b19da", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n \n extern crate syntax;"}, {"sha": "ca5a7b75e06cfe61ac929401d378523c517fc458", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "20799ce5b467f9debdb077e3479a3baef395c58a", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "974db7c92463839a1a7b9bb973a30e7eddf5d225", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n #[macro_use] extern crate log;\n \n pub fn foo<T>() {"}, {"sha": "03cd70d949428886501b663dbe60de5b64df9039", "filename": "src/test/auxiliary/macro_crate_MacroRulesTT.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "5b7e52e9164e96744d8c34162eacf10d1b783cf7", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar, quote)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "5a615502a95e3200a11aae532eb4c3b4a1e74ffb", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "6f5f50475483d4ca05a5e672047551ed382e6928", "filename": "src/test/auxiliary/plugin_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate rustc;\n "}, {"sha": "75f404c96cd0e7f380cdfb6e2f7cef70ca06fae1", "filename": "src/test/auxiliary/plugin_with_plugin_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n #![deny(plugin_as_library)] // should have no effect in a plugin crate\n \n extern crate macro_crate_test;"}, {"sha": "dc08033602c99dfa9a6f9f3aed31ce6ddf1c7412", "filename": "src/test/auxiliary/private_trait_xc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n trait Foo : ::std::marker::MarkerTrait {}"}, {"sha": "1adc794551ece4131e62b89214f194a1313aa1b9", "filename": "src/test/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "86ce3df9ba6efcd0740b132c8b69c6063102d418", "filename": "src/test/auxiliary/rlib_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"rlib\"]\n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate rustc;\n "}, {"sha": "a105cb7ae6cfb6ce9db14d867c12b2e2703b4b6b", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type=\"dylib\"]\n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "6d4ea499b2bde8f623b41acaf24ddc46d911aee6", "filename": "src/test/auxiliary/svh-a-base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "61e4aaf32586e3d96e1ba00fcd3bee56a58f003a", "filename": "src/test/auxiliary/svh-a-change-lit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "cfdb0902b5d365f6d42f091258a0d27ffaa704e5", "filename": "src/test/auxiliary/svh-a-change-significant-cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "e79738c04103522746e4cd728267ff38f6fb7218", "filename": "src/test/auxiliary/svh-a-change-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "b22d553c02b5afb951a4eea095747c980e3d0253", "filename": "src/test/auxiliary/svh-a-change-type-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "78dbdc28b9f31f572a9dde4ada8260d8fc2e71d6", "filename": "src/test/auxiliary/svh-a-change-type-ret.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "30592827039746562b385df875af145ecb2f2a13", "filename": "src/test/auxiliary/svh-a-change-type-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "4c457b099a4b17e6590b21905d056a47683d6e85", "filename": "src/test/auxiliary/svh-a-comment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "cab25ac9e4f4fbe78827cb65b74700c12f11282b", "filename": "src/test/auxiliary/svh-a-doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "01926dc8abc43938aef08b77287f8b9c88b7bfb4", "filename": "src/test/auxiliary/svh-a-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "6d4ea499b2bde8f623b41acaf24ddc46d911aee6", "filename": "src/test/auxiliary/svh-a-no-change.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "f3a31df94b3e4e42af2d1b05f607b82e442e32aa", "filename": "src/test/auxiliary/svh-a-redundant-cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "bec6b207c071e4c5bb7072e2adae9c2532026ddd", "filename": "src/test/auxiliary/svh-a-whitespace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "54da1a1e451c848b4f0ed0b04b04d79ca359b7be", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type = \"dylib\"]\n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate \"syntax_extension_with_dll_deps_1\" as other;\n extern crate syntax;"}, {"sha": "4a4de2455e36ea4bce9e376fa364f2a4280f1c87", "filename": "src/test/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n pub trait Foo : ::std::marker::MarkerTrait {\n }\n "}, {"sha": "5a7a3e7bcc6942ac1b5a7495bd8a569990674cd1", "filename": "src/test/auxiliary/typeck-default-trait-impl-cross-crate-coherence-lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(optin_builtin_traits, core)]\n #![crate_type = \"rlib\"]\n \n use std::marker::MarkerTrait;"}, {"sha": "82d07a9df4e12662e428d1feb51cffb1ea716e81", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::any::TypeId;\n \n pub struct A;"}, {"sha": "82d07a9df4e12662e428d1feb51cffb1ea716e81", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::any::TypeId;\n \n pub struct A;"}, {"sha": "ceffae79677f4100f55d7d94ef219c9383f58a1e", "filename": "src/test/auxiliary/weak-lang-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -13,7 +13,7 @@\n // This aux-file will require the eh_personality function to be codegen'd, but\n // it hasn't been defined just yet. Make sure we don't explode.\n \n-#![feature(no_std)]\n+#![feature(no_std, core)]\n #![no_std]\n #![crate_type = \"rlib\"]\n "}, {"sha": "0cff90d61ed995c95959ae57c74fcdb9a39d2509", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, std_misc, rand)]\n \n use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;"}, {"sha": "aeedaa288fef810f3bec9db55f07e7e93a8a9022", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, rand, std_misc, collections)]\n \n extern crate collections;\n extern crate rand;"}, {"sha": "0344d6a46eeb58ffd54af4db766b59ec7c13785f", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-lexer-test FIXME #15679\n // Microbenchmarks for various functions in std and extra\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, rand, old_io, old_path, std_misc, collections)]\n \n use std::old_io::*;\n use std::old_path::{Path, GenericPath};"}, {"sha": "fb95f92da77094239763d5ee9c59a890fb0b2fc2", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -18,6 +18,8 @@\n // different scalability characteristics compared to the select\n // version.\n \n+#![feature(std_misc)]\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::env;\n use std::thread;"}, {"sha": "6d702242d765f2714ee84f327e05d779e0950de6", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,6 +14,8 @@\n //\n // I *think* it's the same, more or less.\n \n+#![feature(std_misc)]\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::env;\n use std::thread;"}, {"sha": "6fb2c954e020503450a4845fc49fe5bafce01f6a", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -18,6 +18,8 @@\n // no-pretty-expanded FIXME #15189\n // ignore-lexer-test FIXME #15679\n \n+#![feature(std_misc)]\n+\n use std::env;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;"}, {"sha": "6cd758361870ee4e8ec84713f82b1884f4c2ab16", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n // ignore-lexer-test FIXME #15679\n \n+#![feature(rand, core)]\n+\n use std::f32::consts::PI;\n use std::num::Float;\n use std::rand::{Rng, StdRng};"}, {"sha": "64c3872213780beefc05796991c918f900bc4bd9", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(rustc_private, core)]\n+\n extern crate arena;\n \n use std::iter::range_step;"}, {"sha": "e23862f4286aa33ab4790830fd7898a8e6dd483a", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core)]\n+\n use std::{cmp, iter, mem};\n use std::thread;\n "}, {"sha": "709b23ef9dd039c07e4cf109ad83ea4582bc25b1", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core, old_io, io, core)]\n+\n use std::cmp::min;\n use std::old_io::*;\n use std::iter::repeat;"}, {"sha": "78d31faeb51690c4cd8e2bc8ce6daf38ad5963e7", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(old_io, old_path, io, core)]\n+\n use std::cmp::min;\n use std::old_io::*;\n use std::old_io;"}, {"sha": "ebdc60cdd2b0f3628894e8c7ea8cac35e07433d8", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -13,7 +13,7 @@\n \n // multi tasking k-nucleotide\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc, old_io, collections, os)]\n \n use std::ascii::{AsciiExt, OwnedAsciiExt};\n use std::cmp::Ordering::{self, Less, Greater, Equal};"}, {"sha": "ba4f2c9b1c563abbfc9a00fc9d122bb22342521a", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc, collections)]\n \n use std::ascii::OwnedAsciiExt;\n use std::env;"}, {"sha": "d248293103bdec7940ae623dd621216fe685b3ea", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(simd)]\n+#![feature(simd, old_io, core, io)]\n \n // ignore-pretty very bad with line comments\n "}, {"sha": "150522fd02d4cb75ab41d8a0fb3c445bdb351b61", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -40,6 +40,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+#![feature(core)]\n+\n use std::iter::repeat;\n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "3748b65dacbb8bd581cd0352c6072e3c21b59931", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core)]\n+\n use std::num::Float;\n \n const PI: f64 = 3.141592653589793;"}, {"sha": "4d9bc951fa3061a460a4270e7e85484c481652a9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -18,6 +18,8 @@\n \n */\n \n+#![feature(std_misc, rustc_private)]\n+\n extern crate getopts;\n \n use std::sync::mpsc::{channel, Sender};"}, {"sha": "875ec670d42b1da7d165c03db25aa3e454e04645", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, libc, old_io, collections, io, core)]\n \n extern crate libc;\n "}, {"sha": "3889b404d8557c111b639c121791618847be1d75", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -41,7 +41,7 @@\n // no-pretty-expanded FIXME #15189\n \n #![allow(non_snake_case)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core, os)]\n \n use std::iter::{repeat, AdditiveIterator};\n use std::thread;"}, {"sha": "dd56b18c144f2f29df781ada49cd3641008b2730", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // Microbenchmark for the smallintmap library\n \n+#![feature(collections, std_misc)]\n+\n use std::collections::VecMap;\n use std::env;\n use std::time::Duration;"}, {"sha": "3913de3a3f99f49a5202859b11eef6e9016d76bb", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, core)]\n #![allow(non_snake_case)]\n \n use std::io::prelude::*;"}, {"sha": "d8f4603ab1af956990efb3a463aa41220cba823a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor, box_syntax)]\n+#![feature(unsafe_destructor, box_syntax, std_misc, collections)]\n \n use std::env;\n use std::thread;"}, {"sha": "2b48d47e940912c883795317f463ec779a752119", "filename": "src/test/compile-fail/internal-unstable-noallow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -16,13 +16,10 @@\n // aux-build:internal_unstable.rs\n // error-pattern:use of unstable library feature 'function'\n // error-pattern:use of unstable library feature 'struct_field'\n-// error-pattern:compilation successful\n-#![feature(rustc_attrs)]\n \n #[macro_use]\n extern crate internal_unstable;\n \n-#[rustc_error]\n fn main() {\n     call_unstable_noallow!();\n "}, {"sha": "74526fb3d83143de09750cce78068b9eab3a4184", "filename": "src/test/compile-fail/internal-unstable-thread-local.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,14 +10,12 @@\n \n // aux-build:internal_unstable.rs\n \n-#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n extern crate internal_unstable;\n \n \n thread_local!(static FOO: () = ());\n-thread_local!(static BAR: () = internal_unstable::unstable()); //~ WARN use of unstable\n+thread_local!(static BAR: () = internal_unstable::unstable()); //~ ERROR use of unstable\n \n-#[rustc_error]\n-fn main() {} //~ ERROR\n+fn main() {}"}, {"sha": "accc898b8a8081ce1b82a5e97b2bf6f70c0bbe46", "filename": "src/test/compile-fail/internal-unstable.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:internal_unstable.rs\n \n-#![feature(rustc_attrs, allow_internal_unstable)]\n+#![feature(allow_internal_unstable)]\n \n #[macro_use]\n extern crate internal_unstable;\n@@ -19,7 +19,7 @@ macro_rules! foo {\n     ($e: expr, $f: expr) => {{\n         $e;\n         $f;\n-        internal_unstable::unstable(); //~ WARN use of unstable\n+        internal_unstable::unstable(); //~ ERROR use of unstable\n     }}\n }\n \n@@ -32,20 +32,19 @@ macro_rules! bar {\n     }}\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR\n+fn main() {\n     // ok, the instability is contained.\n     call_unstable_allow!();\n     construct_unstable_allow!(0);\n \n     // bad.\n-    pass_through_allow!(internal_unstable::unstable()); //~ WARN use of unstable\n+    pass_through_allow!(internal_unstable::unstable()); //~ ERROR use of unstable\n \n-    pass_through_noallow!(internal_unstable::unstable()); //~ WARN use of unstable\n+    pass_through_noallow!(internal_unstable::unstable()); //~ ERROR use of unstable\n \n \n \n-    println!(\"{:?}\", internal_unstable::unstable()); //~ WARN use of unstable\n+    println!(\"{:?}\", internal_unstable::unstable()); //~ ERROR use of unstable\n \n-    bar!(internal_unstable::unstable()); //~ WARN use of unstable\n+    bar!(internal_unstable::unstable()); //~ ERROR use of unstable\n }"}, {"sha": "d95ed7f10bd17dfc63cb15e897c1f4bf85dc0339", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -13,10 +13,10 @@\n \n #![feature(foo)] //~ ERROR unused or unknown feature\n \n-extern crate lint_output_format; //~ WARNING: use of unstable library feature\n+extern crate lint_output_format; //~ ERROR use of unstable library feature\n use lint_output_format::{foo, bar};\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n-    let _y = bar(); //~ WARNING: use of unstable library feature\n+    let _y = bar(); //~ ERROR use of unstable library feature\n }"}, {"sha": "716d7674b2ddbe8b3b852aeca46696e6e9254196", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -22,147 +22,147 @@ mod cross_crate {\n     pub fn foo() {\n         let x = Stable {\n             inherit: 1,\n-            override1: 2, //~ WARN use of unstable\n+            override1: 2, //~ ERROR use of unstable\n             override2: 3,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         };\n \n         let _ = x.inherit;\n-        let _ = x.override1; //~ WARN use of unstable\n+        let _ = x.override1; //~ ERROR use of unstable\n         let _ = x.override2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let Stable {\n             inherit: _,\n-            override1: _, //~ WARN use of unstable\n+            override1: _, //~ ERROR use of unstable\n             override2: _\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n \n         let x = Stable2(1, 2, 3);\n \n         let _ = x.0;\n-        let _ = x.1; //~ WARN use of unstable\n+        let _ = x.1; //~ ERROR use of unstable\n         let _ = x.2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let Stable2(_,\n-                   _, //~ WARN use of unstable\n+                   _, //~ ERROR use of unstable\n                    _)\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             = x;\n         // all fine\n         let Stable2(..) = x;\n \n \n-        let x = Unstable { //~ WARN use of unstable\n-            inherit: 1, //~ WARN use of unstable\n+        let x = Unstable { //~ ERROR use of unstable\n+            inherit: 1, //~ ERROR use of unstable\n             override1: 2,\n             override2: 3,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         };\n \n-        let _ = x.inherit; //~ WARN use of unstable\n+        let _ = x.inherit; //~ ERROR use of unstable\n         let _ = x.override1;\n         let _ = x.override2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n-        let Unstable { //~ WARN use of unstable\n-            inherit: _, //~ WARN use of unstable\n+        let Unstable { //~ ERROR use of unstable\n+            inherit: _, //~ ERROR use of unstable\n             override1: _,\n             override2: _\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         } = x;\n \n-        let Unstable  //~ WARN use of unstable\n+        let Unstable  //~ ERROR use of unstable\n             // the patterns are all fine:\n             { .. } = x;\n \n \n-        let x = Unstable2(1, 2, 3); //~ WARN use of unstable\n+        let x = Unstable2(1, 2, 3); //~ ERROR use of unstable\n \n-        let _ = x.0; //~ WARN use of unstable\n+        let _ = x.0; //~ ERROR use of unstable\n         let _ = x.1;\n         let _ = x.2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n-        let Unstable2  //~ WARN use of unstable\n-            (_, //~ WARN use of unstable\n+        let Unstable2  //~ ERROR use of unstable\n+            (_, //~ ERROR use of unstable\n              _,\n              _)\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             = x;\n-        let Unstable2 //~ WARN use of unstable\n+        let Unstable2 //~ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n \n \n         let x = Deprecated {\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             inherit: 1,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             override1: 2,\n-            override2: 3, //~ WARN use of unstable\n+            override2: 3, //~ ERROR use of unstable\n         };\n \n         let _ = x.inherit;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n         let _ = x.override1;\n-        let _ = x.override2; //~ WARN use of unstable\n+        let _ = x.override2; //~ ERROR use of unstable\n \n         let Deprecated {\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             inherit: _,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             override1: _,\n-            override2: _ //~ WARN use of unstable\n+            override2: _ //~ ERROR use of unstable\n         } = x;\n \n         let Deprecated\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             // the patterns are all fine:\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let _ = x.0;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n         let _ = x.1;\n-        let _ = x.2; //~ WARN use of unstable\n+        let _ = x.2; //~ ERROR use of unstable\n \n         let Deprecated2\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n             (_,\n              //~^ ERROR use of deprecated item\n-             //~^^ WARN use of unstable\n+             //~^^ ERROR use of unstable\n              _,\n-             _) //~ WARN use of unstable\n+             _) //~ ERROR use of unstable\n             = x;\n         let Deprecated2\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "391b49e10686ec41e68c71e30bcad03ec60573af", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -24,7 +24,7 @@ extern crate lint_stability;\n \n mod cross_crate {\n     extern crate stability_cfg1;\n-    extern crate stability_cfg2; //~ WARNING: use of unstable library feature\n+    extern crate stability_cfg2; //~ ERROR use of unstable library feature\n \n     use lint_stability::*;\n \n@@ -51,64 +51,64 @@ mod cross_crate {\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n \n         deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Foo::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n \n         deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Foo::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n \n-        unstable(); //~ WARNING use of unstable library feature\n-        foo.method_unstable(); //~ WARNING use of unstable library feature\n-        Foo::method_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::method_unstable(&foo); //~ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        unstable(); //~ ERROR use of unstable library feature\n+        foo.method_unstable(); //~ ERROR use of unstable library feature\n+        Foo::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n \n         unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.method_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Foo::method_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::method_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n \n         stable();\n         foo.method_stable();\n@@ -130,26 +130,26 @@ mod cross_crate {\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableStruct { i: 0 }; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableStruct { i: 0 }; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable library feature\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableUnitStruct; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableUnitStruct; //~ ERROR use of unstable library feature\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n         let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = Enum::UnstableVariant; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = Enum::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableTupleStruct (1); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable library feature\n         let _ = StableTupleStruct (1);\n \n         // At the moment, the lint checker only checks stability in\n@@ -159,7 +159,7 @@ mod cross_crate {\n         // on macros themselves are not yet linted.\n         macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n         macro_test_arg!(deprecated_unstable_text()); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n     }\n \n@@ -173,33 +173,33 @@ mod cross_crate {\n         <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n         Trait::trait_stable(&foo);\n         <Foo>::trait_stable(&foo);\n@@ -210,46 +210,46 @@ mod cross_crate {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n     }\n \n     struct S;\n \n-    impl UnstableTrait for S { } //~ WARNING use of unstable library feature\n+    impl UnstableTrait for S { } //~ ERROR use of unstable library feature\n \n-    trait LocalTrait : UnstableTrait { } //~ WARNING use of unstable library feature\n+    trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable library feature\n \n     impl Trait for S {\n         fn trait_stable(&self) {}\n-        fn trait_unstable(&self) {} //~ WARNING use of unstable library feature\n+        fn trait_unstable(&self) {} //~ ERROR use of unstable library feature\n     }\n }\n \n mod inheritance {\n-    extern crate inherited_stability; //~ WARNING: use of unstable library feature\n-    use self::inherited_stability::*; //~ WARNING: use of unstable library feature\n+    extern crate inherited_stability; //~ ERROR use of unstable library feature\n+    use self::inherited_stability::*; //~ ERROR use of unstable library feature\n \n     fn test_inheritance() {\n-        unstable(); //~ WARNING use of unstable library feature\n+        unstable(); //~ ERROR use of unstable library feature\n         stable();\n \n-        stable_mod::unstable(); //~ WARNING use of unstable library feature\n+        stable_mod::unstable(); //~ ERROR use of unstable library feature\n         stable_mod::stable();\n \n         unstable_mod::deprecated(); //~ ERROR use of deprecated item\n-        unstable_mod::unstable(); //~ WARNING use of unstable library feature\n+        unstable_mod::unstable(); //~ ERROR use of unstable library feature\n \n-        let _ = Unstable::UnstableVariant; //~ WARNING use of unstable library feature\n+        let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Unstable::StableVariant;\n \n         let x: usize = 0;\n-        x.unstable(); //~ WARNING use of unstable library feature\n+        x.unstable(); //~ ERROR use of unstable library feature\n         x.stable();\n     }\n }"}, {"sha": "f150e84b9fdfecb5ded086e2d7ecc2b432b57f3d", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -16,6 +16,7 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![omit_gdb_pretty_printer_section]\n+#![feature(std_misc, core)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign\n // debug locations to const-expressions."}, {"sha": "c161600f2c3c9d24f99c2822eea03481273d04b5", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -17,6 +17,8 @@\n \n // compile-flags:-g\n \n+#![feature(old_io)]\n+\n // === GDB TESTS ===================================================================================\n \n // gdb-command:run"}, {"sha": "99e31ab23021442ca93788b9e08c282abce0f912", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -20,6 +20,8 @@\n \n // compile-flags:-g\n \n+#![feature(old_io)]\n+\n // === GDB TESTS ===================================================================================\n \n // gdb-command:rbreak immediate_args"}, {"sha": "38b149ef243e9fbfe6b2ef0146abccffcdfbd926", "filename": "src/test/debuginfo/issue13213.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue13213.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,9 @@\n // min-lldb-version: 310\n \n // aux-build:issue13213aux.rs\n+\n+#![feature(old_io)]\n+\n extern crate issue13213aux;\n \n // compile-flags:-g"}, {"sha": "16ae83ee8dc2b0e630b91f1f93d643bfb2d9b025", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -42,6 +42,7 @@\n \n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n+#![feature(core)]\n \n use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "bddab59e3e4c52eeeb03c12cead341923b7a8090", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,7 @@\n // error-pattern:explicit failure\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n+#![feature(std_misc, libc)]\n \n extern crate libc;\n use std::task;"}, {"sha": "0e72ab22dc8f9822af338157534d1b744d1d2d06", "filename": "src/test/run-fail/rt-set-exit-status-panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(os, rustc_private)]\n+\n #[macro_use] extern crate log;\n use std::os;\n "}, {"sha": "2498b7c2be4e7fa00450643109175dfcf5a3521c", "filename": "src/test/run-fail/rt-set-exit-status-panic2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(os, rustc_private)]\n+\n #[macro_use] extern crate log;\n use std::os;\n use std::thread;"}, {"sha": "9425a1b1902b51aa3683b3637d9a37d6ad0340e4", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(rustc_private, os)]\n+\n #[macro_use] extern crate log;\n use std::os;\n "}, {"sha": "a36cc474c2bf052054aa6614b805302073987703", "filename": "src/test/run-make/allow-warnings-cmdline-stability/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(test_feature)]\n+\n extern crate bar;\n \n pub fn main() { bar::baz() }"}, {"sha": "02af5244b8aabe93cf4e7f208e8d51957b2f506a", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, old_path)]\n+\n use std::env;\n use std::fs::File;\n use std::process::Command;"}, {"sha": "2e1fad5a044f6a5998f16efafab1cf119d0eef32", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, old_path, os)]\n+\n use std::dynamic_lib::DynamicLibrary;\n use std::os;\n use std::old_path::Path;"}, {"sha": "aec76fdf1b2c0b164164c1facc5638013091165e", "filename": "src/test/run-make/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(asm)]\n+#![feature(asm, core)]\n #![crate_type=\"lib\"]\n \n use std::intrinsics;"}, {"sha": "b089b9269a26401ae269aff8d44012413cafa4e7", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private, path)]\n+\n extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_lint;"}, {"sha": "b1576ccd48e9f04af52a43c2923438141a198a90", "filename": "src/test/run-make/link-path-order/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc, os)]\n+\n extern crate libc;\n \n #[link(name=\"foo\")]"}, {"sha": "c9395f557fd4f7ec9007bbf8cf6fa6ba66043a56", "filename": "src/test/run-make/lto-syntax-extension/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n extern crate lib;\n #[macro_use] extern crate log;\n "}, {"sha": "29f52f97a88878f0b8c8ab821ff683ac32b3578b", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n+#![feature(lang_items, no_std, libc)]\n #![no_std]\n #![crate_type = \"dylib\"]\n "}, {"sha": "ae424c6569dbe3f976c61522148dbd0c92738957", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n+#![feature(lang_items, no_std, libc)]\n #![no_std]\n #![crate_type = \"dylib\"]\n "}, {"sha": "c2531bf458628755548ddbc7b63cd8a755c7b60a", "filename": "src/test/run-make/rustdoc-default-impl/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n pub mod bar {\n     use std::marker;\n "}, {"sha": "74251c3c63e91d25af64d30506c69824cd3d3936", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n #![ crate_name = \"test\" ]\n #![allow(unstable)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, old_io, rustc_private, core)]\n \n extern crate graphviz;\n // A simple rust project"}, {"sha": "aa2ce785771211f3875fa326644030f1b0c0842e", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand)]\n+\n use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;"}, {"sha": "ebf3226334cc6573635b0a8c1a96ff94bcb63c3f", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand, core)]\n+\n use std::fs::File;\n use std::io::prelude::*;\n use std::iter::repeat;"}, {"sha": "bdd557b6cc27b4e604fb172875287d672104cbee", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::intrinsics::{volatile_load, volatile_store};\n \n pub fn main() {"}, {"sha": "7a3c32a45f912c6388b8d1279338c8d4885d4cf5", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n \n // ignore-android\n \n-#![feature(rustc_private)]\n+#![feature(rustc_private, path)]\n #![feature(core)]\n \n extern crate getopts;"}, {"sha": "40947b2e25652fd3e494fe91309a0110bfdfb1c6", "filename": "src/test/run-pass-fulldeps/issue-16992.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-pretty\n // ignore-android\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "d4dc5627044dbd1be9dcff522e07581e4da45225", "filename": "src/test/run-pass-fulldeps/issue-18763-quote-token-tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "0e2e1f2dd86d6f1fe7b37f4327c7e14beefbb776", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "928368fabdf3684dde673bca6478dce74e612d05", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n #![deny(unused_variable)]\n \n extern crate syntax;"}, {"sha": "23096828c4b95be06ab2da1b25bff3b4aaa89624", "filename": "src/test/run-pass-fulldeps/syntax-extension-with-dll-deps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n // aux-build:syntax_extension_with_dll_deps_2.rs\n // ignore-stage1\n \n-#![feature(plugin)]\n+#![feature(plugin, rustc_private)]\n #![plugin(syntax_extension_with_dll_deps_2)]\n \n fn main() {"}, {"sha": "301c4b917816a8e1c8dec09a0a4a914a7eb5d623", "filename": "src/test/run-pass-valgrind/cleanup-stdin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, io)]\n+\n fn main() {\n     let _ = std::old_io::stdin();\n     let _ = std::io::stdin();"}, {"sha": "cbef2850adda853ca71bc1be74f79919b2583fa4", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\")]"}, {"sha": "a5be906b159a59610567e090ba3e774db2028b28", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo : MarkerTrait {"}, {"sha": "e1da26b5e294223ab10974ae233fc6e396948737", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n impl X for f64 { type Y = int; }"}, {"sha": "2f36014f7655bad6eacb4f7978147170a54b9d68", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can resolve nested projection types. Issue #20666.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n use std::slice;\n "}, {"sha": "236601b9c16926f06f67f7ecf843ef352b1eca1b", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,7 @@\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n \n+#![feature(core)]\n #![allow(dead_code)]\n \n use std::marker::MarkerTrait;"}, {"sha": "7fa2030cfe1901601c03aea6d6584ed50d3366c3", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n+#![feature(core)]\n+\n use std::marker::{MarkerTrait, PhantomData};\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n use std::sync::atomic::Ordering::SeqCst;"}, {"sha": "f472a672be2bfd4d6bfc1a4d66d2f12e64eebcb5", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:expected item\n \n-#![feature(custom_attribute)]\n+#![feature(custom_attribute, test)]\n \n #[foo = \"bar\"]\n extern crate test;"}, {"sha": "5d91d0a41cfa0af7f13ac4fe1060e032605ee2ba", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:expected item\n \n-#![feature(custom_attribute)]\n+#![feature(custom_attribute, test)]\n \n mod m {\n     #[foo = \"bar\"]"}, {"sha": "226a7c12df9ab4a1d6689fec169a2b7eeb1ab231", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n // ignore-windows FIXME #13259\n \n #![feature(unboxed_closures)]\n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, old_io, collections)]\n \n use std::env;\n use std::old_io::process::Command;"}, {"sha": "6c88f350172a3876239d8ea76652f5c339ce8d7a", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, collections)]\n \n extern crate collections;\n use std::collections::BitVec;"}, {"sha": "b81764e1de555cdc5cedc26aeb6aef1a8c34fc80", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n mod rustrt {\n     extern crate libc;\n "}, {"sha": "eceaa54b740a3b1b25afade0bd1159b756b73e1b", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+#![feature(libc, std_misc)]\n+\n extern crate libc;\n \n use std::ffi::CString;"}, {"sha": "2a5ccb88aff5f652263efa8bbf16d6592df93db1", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // exec-env:RUST_LOG=info\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, old_io, rustc_private, std_misc)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "ebaa1b55959746f872e8223eeab9086c1f906ee0", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:check_static_recursion_foreign_helper.rs\n \n-#![feature(custom_attribute)]\n+#![feature(custom_attribute, libc)]\n \n extern crate check_static_recursion_foreign_helper;\n extern crate libc;"}, {"sha": "7a8b4770f9563911836a6437dae5faa4627b28d0", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // Reported as issue #126, child leaks the string.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n \n fn child2(_s: String) { }"}, {"sha": "66204ec94941d49240127495efe4777259181a50", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -22,7 +22,7 @@\n // arm is confined to the match arm itself.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, os)]\n \n use std::os;\n "}, {"sha": "2c65dc7e2aca29d0467f77161d7af048c9759b10", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc)]\n \n use std::thread::Thread;\n "}, {"sha": "fefab45714f77f1e8c515b7b019e1a8d7517c6c9", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, old_io)]\n \n use std::mem;\n use std::old_io::stdio::println;"}, {"sha": "cf318c50cff6ab0566a8cc3e748d91549687edbd", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "1d1475d60d964ee9f54f33eef78ef15bf29a6963", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n+#![feature(rustc_private)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "1da88a6b2c4601a7bca9f464d750a47b719819f4", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n struct TestStruct {"}, {"sha": "a4413fa85d24143de41bf4184e527b3ffe8c9603", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -16,6 +16,7 @@\n // instead of in std.\n \n #![reexport_test_harness_main = \"test_main\"]\n+#![feature(old_io, libc, std_misc)]\n \n extern crate libc;\n "}, {"sha": "4f48549d499b2b6ff05a562e729d2df85f6fdcb6", "filename": "src/test/run-pass/derive-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n+#![feature(no_std, core, rand, collections, rustc_private)]\n #![no_std]\n \n extern crate core;"}, {"sha": "aa03e23b95ff8b8a12dc0be13974cbbf0215aff7", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "d4463207aa26abc81137363ae33c185345a93f7e", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n \n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "842de6e4984214140583855afc016bdd2c9b5d69", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, rand, rustc_private)]\n \n extern crate serialize;\n extern crate rand;"}, {"sha": "03361fbfd9553d385167c04a31a669e43f492e2e", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(hash)]\n+\n use std::hash::{Hash, SipHasher};\n \n #[derive(Hash)]"}, {"sha": "4399d741cad1e104096c0b32851df7cde3005ca9", "filename": "src/test/run-pass/deriving-primitive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::num::FromPrimitive;\n use std::isize;\n "}, {"sha": "71cae400602d2c23b9cf4b5f6ddd0ecb76cb1001", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand)]\n+\n use std::rand;\n \n #[derive(Rand)]"}, {"sha": "645548761e4a1601e0c39f3349088b5e6a1cdda6", "filename": "src/test/run-pass/drop-with-type-ascription-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(str_words)]\n+\n fn main() {\n     let foo = \"hello\".to_string();\n     let foo: Vec<&str> = foo.words().collect();"}, {"sha": "c2edfc261050eaf2c9795431be34764284d4a5f0", "filename": "src/test/run-pass/drop-with-type-ascription-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n fn main() {\n     let args = vec!(\"foobie\", \"asdf::asdf\");\n     let arr: Vec<&str> = args[1].split_str(\"::\").collect();"}, {"sha": "17aa1f04e5f49b47d5daaf0a885ff7f5cea5f26e", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -17,7 +17,7 @@\n // is force-fed a lifetime equal to that of the borrowed arena.\n \n #![allow(unstable)]\n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, rustc_private)]\n \n extern crate arena;\n "}, {"sha": "64083a063b2a6e4729fa9780e6bfa31283fcf31a", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n+#![feature(core)]\n+\n use std::ops::Index;\n use std::fmt::Debug;\n "}, {"sha": "635c34ef85a9225f9c10b6ef924caf7f1c5d1a20", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n \n extern crate core;\n "}, {"sha": "c41486f660cf6aac3339aac2a19963ec4383257c", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(path)]\n+\n use std::env::*;\n use std::path::PathBuf;\n "}, {"sha": "3f451ee8d515953bb8877d1d7d9d6a25c190d559", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::num::strconv::ExponentFormat::{ExpBin, ExpDec};\n use std::num::strconv::SignificantDigits::DigMax;\n use std::num::strconv::SignFormat::{SignAll, SignNeg};"}, {"sha": "2138b12fb12aba7ee7a486fbc7d6a64ff0331a91", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n mod rustrt {"}, {"sha": "7bbed563a99fe9dde207298ed904a2546da2008d", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, libc)]\n+\n extern crate libc;\n use std::thread::Thread;\n "}, {"sha": "4f1abbeb5c7ed79be9096fc7eaeb9a67a9737aed", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n mod rustrt {"}, {"sha": "069ecd92a56d099bc8572fdcd1f46a80fbb90680", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // make sure the stack pointers are maintained properly in both\n // directions\n \n+#![feature(libc, std_misc)]\n+\n extern crate libc;\n use std::thread::Thread;\n "}, {"sha": "7157d0658be349944cdd20a5f6df698b065d70ef", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n //aux-build:extern-crosscrate-source.rs\n \n+#![feature(libc)]\n+\n extern crate externcallback;\n extern crate libc;\n "}, {"sha": "aab409e77cf47b19d3e37f917635a856a1ba4132", "filename": "src/test/run-pass/extern-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n trait A : MarkerTrait {"}, {"sha": "37404ee7e696c17a22641831e844a0c05d31b9e4", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(unused_imports)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n use serialize::json::Object;"}, {"sha": "b52f025fcbb51ead18828b4db82439f3ca8fa664", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::num::Float;\n \n pub fn main() {"}, {"sha": "31ed49197781c4fea201199d07f9a0ade4fa4ab1", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std)]\n+#![feature(lang_items, start, no_std, core, collections)]\n #![no_std]\n \n extern crate \"std\" as other;"}, {"sha": "1a60f22d1450a1a36a02bd89a269a1fd280a01d1", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "79d2d4000805c3c49ae7175cfb491cc999db0482", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "3c5abba902dc15dea3b37d8a9a56f414bcab9ec2", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "fe42b2a0558a10b8a40aa959fa9f697a320e35e6", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // calling pin_task and that's having weird side-effects.\n \n+#![feature(libc)]\n+\n mod rustrt1 {\n     extern crate libc;\n "}, {"sha": "a274a1914498f5760b1c996478733225b91c5d89", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+#![feature(std_misc, libc)]\n+\n extern crate libc;\n use std::ffi::CString;\n "}, {"sha": "abf9f504b7d823f9aa47ddd1bbf99219705143d7", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+#![feature(libc)]\n+\n extern crate libc;\n \n mod foo {"}, {"sha": "9305945b918b8da68ff80401e464ad25968b2b92", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // ABI is cdecl by default\n \n+#![feature(libc)]\n+\n mod rustrt {\n     extern crate libc;\n "}, {"sha": "749a5875b75624b463c89c45f57ec80062a5c03d", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+#![feature(libc)]\n+\n extern crate libc;\n \n mod bar {"}, {"sha": "4df6ed843affa51a625337a4209ade7f7d54e1d9", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std)]\n+#![feature(lang_items, start, no_std, core, collections)]\n #![no_std]\n \n extern crate \"std\" as other;"}, {"sha": "cdf147aae1093af529580cfe25cc4b0d5ba074e1", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n // correctly and moves rather than copy when appropriate.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, core)]\n \n use std::marker::NoCopy as NP;\n "}, {"sha": "db5175f19cb4b78cdc3fa6ddf2f4040b10c13de1", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::num::Int;\n \n extern \"C\" fn foo<T: WrappingOps>(a: T, b: T) -> T { a.wrapping_add(b) }"}, {"sha": "1ccd8a0640efe1ecca066bec6cc69fb43f456073", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n extern crate getopts;\n \n use getopts::{optopt, getopts};"}, {"sha": "93ff18207341136f9b02c97154eb772a2fa82a34", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, std_misc)]\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues."}, {"sha": "76927858ea11a378744757e541564860e9ad3770", "filename": "src/test/run-pass/init-large-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-large-type.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n // Doing it incorrectly causes massive slowdown in LLVM during\n // optimisation.\n \n-#![feature(intrinsics)]\n+#![feature(intrinsics, std_misc)]\n \n use std::thread::Thread;\n "}, {"sha": "a9aa5955d3d12be43404514760bf90e459af3965", "filename": "src/test/run-pass/into-iterator-type-inference-shift.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -13,6 +13,8 @@\n // propagation yet, and so we just saw a type variable, yielding an\n // error.\n \n+#![feature(core)]\n+\n use std::u8;\n \n trait IntoIterator {"}, {"sha": "638b2e434a5ffef04c93a66efb359610b8ea077f", "filename": "src/test/run-pass/intrinsic-assume.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::intrinsics::assume;\n \n unsafe fn f(x: i32) -> i32 {"}, {"sha": "ea9648a3e699add96b257630345e9fd88bdf19a9", "filename": "src/test/run-pass/intrinsic-unreachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::intrinsics;\n \n // See also src/test/run-make/intrinsic-unreachable."}, {"sha": "4ca6b0258032dbbeaf4693074df3703c6b906d79", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n+#![feature(intrinsics, core)]\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({"}, {"sha": "2c0811b69e020916669b925221e8540eae816d16", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // Make sure that if a process doesn't have its stdio/stderr descriptors set up\n // that we don't die in a large ball of fire\n \n+#![feature(old_io)]\n+\n use std::env;\n use std::old_io::process;\n "}, {"sha": "da3efb4fea8cac85ca6c1d5557ba8810547586a5", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -15,6 +15,8 @@\n // when this bug was opened. The cases where the compiler\n // panics before the fix have a comment.\n \n+#![feature(std_misc)]\n+\n use std::thunk::Thunk;\n \n struct S {x:()}"}, {"sha": "87d5bf8ed0a327a0ae7b9e15a4a39a9a6e6d573f", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::BitVec;"}, {"sha": "15c652591077e27f691b0f052647a653d31815c6", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, rustc_private, old_io)]\n \n extern crate rbml;\n extern crate serialize;"}, {"sha": "f3c6da7cfe430b6214f5503b9b02528fdc762d71", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![forbid(warnings)]\n+#![feature(std_misc)]\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]"}, {"sha": "d5f8200007f7aeedda12d6e2a6605d4737692a41", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n #![crate_id=\"rust_get_test_int\"]\n \n mod rustrt {"}, {"sha": "51268969d4221e2df51331310870c5b39f1304bb", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, std_misc)]\n+\n use std::time::Duration;\n use std::thread;\n "}, {"sha": "4ff17f297d7e6de69178ac2343b2d3a449482f00", "filename": "src/test/run-pass/issue-12699.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, std_misc)]\n+\n use std::old_io::timer;\n use std::time::Duration;\n "}, {"sha": "7f26d4d3713342790ff913381b83ea9d7860899c", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n \n extern crate collections;\n "}, {"sha": "3886971a4696ee4127f579473f72c2324f6169a6", "filename": "src/test/run-pass/issue-13105.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13105.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo : MarkerTrait {"}, {"sha": "5c5282da06b8b1041331539607346b1f64035be8", "filename": "src/test/run-pass/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n #[cfg(windows)]"}, {"sha": "876b329998e08539c188436f364d25f547b2768b", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+#![feature(io, process_capture)]\n \n use std::env;\n use std::io::prelude::*;"}, {"sha": "aed0022d9fa44369f5c311cab96659c0df080b45", "filename": "src/test/run-pass/issue-13352.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13352.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, libc)]\n+\n extern crate libc;\n \n use std::thunk::Thunk;"}, {"sha": "7692a31315be9b2802dd5098894454a8d1a3f307", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // This test may not always fail, but it can be flaky if the race it used to\n // expose is still present.\n \n+#![feature(std_misc)]\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::thread::Thread;\n "}, {"sha": "61ef98357524fdb017512a06376d131cdc3fb8de", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // aux-build:issue13507.rs\n+\n+#![feature(core)]\n+\n extern crate issue13507;\n use issue13507::testtypes;\n "}, {"sha": "cd5da3844e10f2007491c5e8e892c4b7e4dcc876", "filename": "src/test/run-pass/issue-13655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13655.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n use std::ops::Fn;\n \n struct Foo<T>(T);"}, {"sha": "3f4ade08d9280f8f8dbf605bf6ff8df34f4c2448", "filename": "src/test/run-pass/issue-13763.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13763.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::u8;\n \n const NUM: uint = u8::BITS as uint;"}, {"sha": "e773f03f21217f3609e9194392365ec721b74b9c", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "ba769c2594a8580dafd0fc02632d4de6def4e3ef", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(io, process_capture)]\n+\n use std::env;\n use std::io::prelude::*;\n use std::io;"}, {"sha": "f8dd0cf1a822808fa40acd00d627a48be3df10b3", "filename": "src/test/run-pass/issue-14901.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14901.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io::Reader;\n \n enum Wrapper<'a> {"}, {"sha": "fa4d10df7ea927e3bd9829803700bba60e6bd357", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, io)]\n+\n use std::env;\n use std::process::Command;\n use std::io::{self, Write};"}, {"sha": "911d850b289af9877b0885b256a62109a191e683", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n trait Foo { fn dummy(&self) { }}\n "}, {"sha": "6fd22f2efb704704678178dc5afd2f734dcfae34", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n use std::ops::Fn;\n "}, {"sha": "020513121e6de80101d83c29ecdb8178bc344623", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];"}, {"sha": "99c8d746b94f1f148eb566e9aafaa0b53df19a03", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n \n-#![feature(old_orphan_check)]\n+#![feature(old_orphan_check, core)]\n \n use std::ops::Index;\n "}, {"sha": "d8ddec286e92a3d2f7688666d558611b077b16ec", "filename": "src/test/run-pass/issue-15924.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15924.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "b34c760192d13f93f249ea856d53bdab776a4dde", "filename": "src/test/run-pass/issue-16530.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16530.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(hash)]\n+\n use std::hash::{SipHasher, hash};\n \n #[derive(Hash)]"}, {"sha": "16c1b14fd8775e08bde48467ec17af19e7efd800", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n // Test that unboxing shim for calling rust-call ABI methods through a\n // trait box works and does not cause an ICE."}, {"sha": "4c6c200c7164e9890f70e19341de145be9661443", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "410d6795c2126dfe93bf92e739234476ef84e773", "filename": "src/test/run-pass/issue-17322.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, io)]\n \n use std::io::{self, Write};\n "}, {"sha": "945e1f220c5f7366131e407cc9f5d6c0ab82598e", "filename": "src/test/run-pass/issue-17351.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17351.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n fn main() {\n     let _: &Str = &\"x\";\n }"}, {"sha": "388408cbd4da197c5379d38e2036203f7bdec5e1", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker;\n use std::cell::UnsafeCell;\n "}, {"sha": "8eee4c9f216b93841624c467c5918f7fdc199289", "filename": "src/test/run-pass/issue-17718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:issue-17718.rs\n \n+#![feature(core)]\n+\n extern crate \"issue-17718\" as other;\n \n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};"}, {"sha": "adc33e3eed02281afbf225aceb858c80cafdd04b", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, std_misc)]\n \n use std::thunk::Thunk;\n "}, {"sha": "270537591b75bf0754aa1fbf8e8a08e0fbd0c7ff", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, std_misc)]\n \n use std::thunk::Thunk;\n "}, {"sha": "6caa96530f64b5ee0e6fecdd4a2dcb44a7a3fb81", "filename": "src/test/run-pass/issue-18619.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18619.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io::FileType;\n \n pub fn main() {"}, {"sha": "bdc16533ea62c23d88a57d6cc3d5f501b3d503fd", "filename": "src/test/run-pass/issue-18661.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // Test that param substitutions from the correct environment are\n // used when translating unboxed closure calls.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n pub fn inside<F: Fn()>(c: F) {\n     c.call(());"}, {"sha": "05f3373dbd4d8a7629095972f43aa9ebb2d05cfc", "filename": "src/test/run-pass/issue-19098.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19098.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n pub trait Handler {\n     fn handle(&self, &mut String);"}, {"sha": "9317f5ea6b1329a8f82a7b18e3dd9ee14a3c7058", "filename": "src/test/run-pass/issue-19811-escape-unicode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n fn main() {\n     let mut escaped = String::from_str(\"\");\n     for c in '\\u{10401}'.escape_unicode() {"}, {"sha": "1fe443484665bc059d7dccc1ad9c88dc99b029a3", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+#![feature(std_misc, os)]\n \n #[cfg(unix)]\n fn main() {"}, {"sha": "0e3d4e0e40d67d5adc98c9912f63a25c36d7ee27", "filename": "src/test/run-pass/issue-20454.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20454.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread;\n \n fn main() {"}, {"sha": "476267d9329cbdb71a87794997eceee519c43eea", "filename": "src/test/run-pass/issue-20644.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20644.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // A reduced version of the rustbook ice. The problem this encountered\n // had to do with trans ignoring binders.\n \n+#![feature(os)]\n+\n use std::iter;\n use std::os;\n use std::fs::File;"}, {"sha": "2600c5f0afd3d72c1c5e2b61f4031fcd0b8a7f3c", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // Regression test for #20797.\n \n+#![feature(old_io, old_path)]\n+\n use std::default::Default;\n use std::io;\n use std::fs;"}, {"sha": "3da650469e8868f66ad667dde31b553687efb2cb", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n \n struct NT(str);\n struct DST { a: u32, b: str }"}, {"sha": "00f501d85a578ccd4d1304b0d5360e3db0fe7d14", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Builder;\n use std::thunk::Thunk;\n "}, {"sha": "202ea05b7f8b32cad2c900e809d6034abbe8791e", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n use std::mem;"}, {"sha": "f0b0b18e6bb5c21b4f192031c8731d751ef9d69a", "filename": "src/test/run-pass/issue-22577.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22577.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fs, net, fs_walk)]\n+\n use std::{fs, net};\n \n fn assert_both<T: Send + Sync>() {}"}, {"sha": "f017193bc762b3b866a264f49964e1e145f50994", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n use std::collections::VecDeque;\n "}, {"sha": "8d0e06549335c3595ce2d6aac589c6e8ec23f3a7", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, std_misc)]\n \n pub type Task = int;\n "}, {"sha": "c49dda9f1e5af084ad97ed03bc0e020bb887f64c", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "4fa491ab44606613b478f8f3af1fa667e3bef939", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+#![feature(rustc_private)]\n+\n extern crate collections;\n extern crate serialize;\n "}, {"sha": "b05baa24b7aa11c6cd1429b9f37564127a1f5cff", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n \n-/// Map representation\n+// Map representation\n+\n+#![feature(old_io)]\n \n use std::old_io;\n use std::fmt;"}, {"sha": "a679ff5f718b2578456354db513aa16dd7428873", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // aux-build:issue-3012-1.rs\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, libc)]\n \n extern crate socketlib;\n extern crate libc;"}, {"sha": "1ce6d6d38d8ff90cde339999e45c79e84a21de7c", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, collections)]\n \n extern crate collections;\n "}, {"sha": "ecce97a301345cbebfe3b84f4b7056ab6052ac7c", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // rustc --test ignores2.rs && ./ignores2\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, old_path, std_misc)]\n \n use std::old_path::{Path};\n use std::old_path;"}, {"sha": "c2ea24ac6ba9996db809fe90bd45333d86f6718e", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "5dfe02cc9ec4b428d568bde176f38cdced7bd560", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -22,6 +22,8 @@\n // that are already linked in. Using WriterUtil allows us to use the write_line\n // method.\n \n+#![feature(core)]\n+\n use std::fmt;\n use std::iter::repeat;\n use std::slice;"}, {"sha": "2bd56e8168787d279a6f9450cbfcdbb933677860", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n+#![feature(std_misc)]\n \n use std::thread::Thread;\n use std::sync::mpsc::Sender;"}, {"sha": "5be64522477b385c4764516b531ab7c01daa388e", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n+#![feature(libc)]\n+\n extern crate libc;\n use libc::{c_uint, uint32_t, c_void};\n "}, {"sha": "bbfeb94cd9de1c5c52eac3046473135225c4a991", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // Issue Name: pub method preceded by attribute can't be parsed\n // Abstract: Visibility parsing failed when compiler parsing\n \n+#![feature(core)]\n+\n use std::f64;\n \n #[derive(Copy)]"}, {"sha": "a761345e1d989790fb75c3243245011221b91f96", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "865f729a4d3532ad5a2e673c88c7602fb98a05b6", "filename": "src/test/run-pass/issue-4036.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // Issue #4036: Test for an issue that arose around fixing up type inference\n // byproducts in vtable records.\n \n+#![feature(rustc_private)]\n+\n extern crate serialize;\n \n use serialize::{json, Decodable};"}, {"sha": "f92bed87ba6698096736719392ba417bab904b43", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(io)]\n+\n use std::io;\n \n pub fn main() {"}, {"sha": "8dd385b59c96431c1ddd5143ea2aae0183b036f7", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io::println;\n use std::sync::mpsc::channel;\n use std::thread;"}, {"sha": "568b8bc89a037879e23afc2df14bcadbe65aff56", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, libc)]\n \n extern crate libc;\n "}, {"sha": "c6017d7d6508f3579b9b23ca3424124d06033cd7", "filename": "src/test/run-pass/issue-5791.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5791.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n extern {"}, {"sha": "dae4bc35c274789de14f6e2242c4625c4344d217", "filename": "src/test/run-pass/issue-5988.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5988.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io;\n trait B {\n     fn f(&self);"}, {"sha": "e1e71be72eb0f930396140ac0d79a07ed5574caa", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, collections)]\n \n extern crate collections;\n "}, {"sha": "f40c37b77a32fa09f71b93afa06b32e2b06b1dd4", "filename": "src/test/run-pass/issue-6898.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6898.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::intrinsics;\n \n /// Returns the size of a type"}, {"sha": "27c5796ece904b853d613822df5d2b20fdc7cc7b", "filename": "src/test/run-pass/issue-7660.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7660.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Regression test for issue 7660\n // rvalue lifetime too short when equivalent `match` works\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "80863c3d6f641d07456d06b7fcf038b0c411a3ac", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, io)]\n+\n use std::old_io;\n \n fn foo(a: &mut old_io::Writer) {"}, {"sha": "929adbdab491ce3ed874d20229f0da8777ef74ac", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::num::Int;\n use std::thread;\n "}, {"sha": "b2aa93d280c926c568741a894cd0b055888120cf", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::{channel, Receiver};\n "}, {"sha": "98fc79882c09dd09f01c47ca4dd8a352d34ad834", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, std_misc)]\n+\n use std::sync::mpsc::{TryRecvError, channel};\n use std::old_io::timer::Timer;\n use std::thread::Thread;"}, {"sha": "1c58765ef650e5f0eee1df72652dbb055aea6596", "filename": "src/test/run-pass/issue22346.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fissue22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue22346.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n     return Box::new((0..3).map(|i| { return i; }));"}, {"sha": "0013cb292e1c7d87c4914b711910be61dfc55d52", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n use std::string::String;\n \n fn test_stack_assign() {"}, {"sha": "a262d0323c5dea842dfe1ed59a12e58e14d3d425", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-#![feature(custom_attribute)]\n+#![feature(custom_attribute, libc)]\n #![allow(unused_attribute)]\n #![attr1 = \"val\"]\n #![attr2 = \"val\"]"}, {"sha": "f2895d7d7d1de5e254cd1c58f1fce17f393ededc", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "ca405f54415c971bf04e30578d20719c36fd4d0d", "filename": "src/test/run-pass/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n \n fn user(_i: int) {}"}, {"sha": "1dddec32e38b7e74aa8fca3fc81f78f3675be7ee", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n struct A { a: Box<isize> }\n "}, {"sha": "3c238d3fe78c6d92e86e71772f0626be67dfb794", "filename": "src/test/run-pass/linkage-visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // ignore-android: FIXME(#10379)\n // ignore-windows: std::dynamic_lib does not work on Windows well\n \n+#![feature(std_misc, old_path)]\n+\n extern crate \"linkage-visibility\" as foo;\n \n pub fn main() {"}, {"sha": "d3b6c38da888a4f151ddb0393456655666c12c65", "filename": "src/test/run-pass/logging-enabled-debug.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // compile-flags:-C debug-assertions=no\n // exec-env:RUST_LOG=logging-enabled-debug=debug\n \n+#![feature(rustc_private)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "1dd9f72ab803b6bd68559165ecf629f886f0a4e6", "filename": "src/test/run-pass/logging-enabled.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_LOG=logging-enabled=info\n \n+#![feature(rustc_private)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "b27080b65b78150629307bd83f0b3788518bb215", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // exec-env:RUST_LOG=debug\n // compile-flags:-C debug-assertions=y\n \n+#![feature(old_io, rustc_private)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "80a3b8c9eddeeccdaf4f3b0291aa04bd83d8dcc6", "filename": "src/test/run-pass/macro-with-braces-in-expr-position.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n \n macro_rules! expr { ($e: expr) => { $e } }"}, {"sha": "826561bfddd116024a625c0505e2c812a129eb4f", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,6 +12,8 @@\n // type is `&mut [u8]`, passes in a pointer to the lvalue and not a\n // temporary. Issue #19147.\n \n+#![feature(core, old_io)]\n+\n use std::mem;\n use std::slice;\n use std::old_io::IoResult;"}, {"sha": "d595092119059ebbc428d3c00851b9ced6a32256", "filename": "src/test/run-pass/method-two-traits-distinguished-via-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Test that we select between traits A and B. To do that, we must\n // consider the `Sized` bound.\n \n+#![feature(core)]\n+\n trait A {\n     fn foo(self);\n }"}, {"sha": "11f53f0a9806d0ed50a5cdf455c65bc08f47e39a", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n trait Serializer : MarkerTrait {"}, {"sha": "f0eba366e711763d7f4dc6ec40fc6826b37991b9", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n \n pub fn main() {"}, {"sha": "1595b677c8d431fe38632b253865125095e3c75c", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -12,7 +12,7 @@\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, alloc)]\n \n // Tests that the new `box` syntax works with unique pointers.\n "}, {"sha": "9e4654a13f03b3dac8e895b3bc7d880fad6228b8", "filename": "src/test/run-pass/new-unicode-escapes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n pub fn main() {\n     let s = \"\\u{2603}\";\n     assert_eq!(s, \"\u2603\");"}, {"sha": "916ec01257f16407c6a9ea64e112b6bc16fa4504", "filename": "src/test/run-pass/newtype-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+#![feature(libc)]\n+\n extern crate libc;\n use libc::c_int;\n "}, {"sha": "3e3391b034210c2eecd84dd2c5831799768d685c", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -15,6 +15,8 @@\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n \n+#![feature(core)]\n+\n use std::ops::Add;\n use std::num::ToPrimitive;\n "}, {"sha": "e8b0db44161b3a5d1cb2abd7b4164d3a78f7c9d9", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::cmp;\n use std::ops;\n "}, {"sha": "8f5a5e8ece75dbb0cd22735b2d74fa8db681256d", "filename": "src/test/run-pass/option-ext.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foption-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foption-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-ext.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n pub fn main() {\n     let thing = \"{{ f }}\";\n     let f = thing.find_str(\"{{\");"}, {"sha": "9ac67b4c7838db6bc1498e72a3c61f524c27f726", "filename": "src/test/run-pass/osx-frameworks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n #[cfg(target_os = \"macos\")]"}, {"sha": "3c322f72b75b699f95cc6a3dd668da9ac337c255", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -14,7 +14,7 @@\n //ignore-dragonfly\n //ignore-bitrig\n \n-#![feature(asm)]\n+#![feature(asm, old_io, std_misc)]\n \n use std::old_io::process::Command;\n use std::env;"}, {"sha": "47f83eab4c1f4a569661dd1cbaba4b1a01287876", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME (#20004)\n \n-#![feature(asm)]\n+#![feature(asm, old_io)]\n \n use std::old_io::process::Command;\n use std::env;"}, {"sha": "7b956dc772f54a28f2e4675c6d1cfad9ec056ea7", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, collections, core)]\n \n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "029a8eaad24bc966654e7bc77216438062c4467c", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that nested vtables work with overloaded calls.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n use std::marker::PhantomData;\n use std::ops::Fn;"}, {"sha": "fc6540b6e3ef48a4c129950148464c5280df82ce", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures, core)]\n \n use std::ops::{Fn, FnMut, FnOnce};\n "}, {"sha": "e75f217a2c60618771b27fbaccc1fb1121beba46", "filename": "src/test/run-pass/overloaded-calls-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n use std::ops::{FnMut};\n "}, {"sha": "20e55de2f058a5dddcf679197c276e03f4b91254", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;"}, {"sha": "7b059cb6a33279b3c9138808d42a36e1badcfb69", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n+#![feature(core)]\n+\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "214817b0a15b5064522b06c86258ab58c3babdaa", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // Test overloaded indexing combined with autoderef.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, core)]\n \n use std::ops::{Index, IndexMut};\n "}, {"sha": "66f8c5c4238fa66fc37c24631bd5edaafde3d245", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n+#![feature(core)]\n+\n use std::ops::Index;\n \n struct Foo {"}, {"sha": "413cef86c5df8af1d45a3cf51233fb4f628aae80", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {"}, {"sha": "7ac624e6814dbb6c95eeb97ff32c58ef5961ff5c", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n extern crate arena;\n use arena::Arena;\n "}, {"sha": "68597fe48e5525d771578f10e5892769858fd5c4", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io::Command;\n use std::env;\n "}, {"sha": "32448d100fb9b0b4dfff27a9ae50685c0656edd8", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -17,6 +17,7 @@\n // intact.\n \n // ignore-aarch64\n+#![feature(path, fs, os, io, old_path)]\n \n use std::io::prelude::*;\n use std::io;"}, {"sha": "0b714578c66bf31aa09ac6f161ff3f2c15825edb", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -13,6 +13,8 @@\n // Ideally this would be revised to use no_std, but for now it serves\n // well enough to reproduce (and illustrate) the bug from #16687.\n \n+#![feature(alloc)]\n+\n extern crate alloc;\n \n use alloc::heap;"}, {"sha": "ac7c76ac544db2ad42a8973ea9846157af11c4f4", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,"}, {"sha": "f2e0837c6ea0e8429d1949d9eabc414cf03cdc9d", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -15,6 +15,8 @@\n // - Multiple lifetime parameters\n // - Arenas\n \n+#![feature(rustc_private, libc, collections)]\n+\n extern crate arena;\n extern crate collections;\n extern crate libc;"}, {"sha": "b2584e2472bf52c43742e71af02636b3687d159d", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n use std::mem;\n "}, {"sha": "ae39c266808946bb7dda387a7f9ce478023a89c3", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core)]\n \n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,"}, {"sha": "33a53e444255e4bbe1217ba3dcba84756a908e81", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,6 +11,8 @@\n // This test can't be a unit test in std,\n // because it needs TempDir, which is in extra\n \n+#![feature(tempdir, path_ext)]\n+\n use std::ffi::CString;\n use std::fs::{self, TempDir, File, PathExt};\n "}, {"sha": "75f66d5bf26776097cbbab863bdc3ada1bba3ce4", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start)]\n+#![feature(start, os, std_misc, old_io)]\n \n use std::ffi;\n use std::old_io::process::{Command, ProcessOutput};"}, {"sha": "44d8db075e8a7a1666e397b603b10f0a2994e8df", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -11,7 +11,7 @@\n // exec-env:RUST_LOG=rust-log-filter/foo\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc, rustc_private)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "d2842a9948548936be8ec6c974168982db9a14f0", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io)]\n+\n use std::old_io::process::Command;\n use std::env;\n "}, {"sha": "a1e28b2b261f1121d0541dc35e867c0fb39bd1b9", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "54214feee05d1984451bb886fbe6ab610100a672", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "9741d468bd264941c520adf1aefecdbeb4460291", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n \n use self::collections::BTreeMap;"}, {"sha": "90bb36f25f75eb3e3c431b92786e011fbc28e82b", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df290f127e923e0aacfe8223dd77f0fa222f0bc8/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=df290f127e923e0aacfe8223dd77f0fa222f0bc8", "patch": "@@ -10,6 +10,9 @@\n \n // ignore-windows\n \n+#![feature(old_io)]\n+#![feature(os)]\n+\n use std::env;\n use std::old_io::process::{Command, ExitSignal, ExitStatus};\n "}]}