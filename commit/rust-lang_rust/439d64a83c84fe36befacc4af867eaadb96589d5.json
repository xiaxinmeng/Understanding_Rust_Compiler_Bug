{"sha": "439d64a83c84fe36befacc4af867eaadb96589d5", "node_id": "C_kwDOAAsO6NoAKDQzOWQ2NGE4M2M4NGZlMzZiZWZhY2M0YWY4NjdlYWFkYjk2NTg5ZDU", "commit": {"author": {"name": "Vladimir Michael Eatwell", "email": "dimir@fb.com", "date": "2022-03-23T16:05:01Z"}, "committer": {"name": "Vladimir Michael Eatwell", "email": "dimir@fb.com", "date": "2022-07-20T07:57:36Z"}, "message": "Library changes for Apple WatchOS", "tree": {"sha": "18b420b8abf27c5511e8d1bee7fbfc1a715f3799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b420b8abf27c5511e8d1bee7fbfc1a715f3799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439d64a83c84fe36befacc4af867eaadb96589d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439d64a83c84fe36befacc4af867eaadb96589d5", "html_url": "https://github.com/rust-lang/rust/commit/439d64a83c84fe36befacc4af867eaadb96589d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439d64a83c84fe36befacc4af867eaadb96589d5/comments", "author": {"login": "vladimir-ea", "id": 85992906, "node_id": "MDQ6VXNlcjg1OTkyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/85992906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladimir-ea", "html_url": "https://github.com/vladimir-ea", "followers_url": "https://api.github.com/users/vladimir-ea/followers", "following_url": "https://api.github.com/users/vladimir-ea/following{/other_user}", "gists_url": "https://api.github.com/users/vladimir-ea/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladimir-ea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladimir-ea/subscriptions", "organizations_url": "https://api.github.com/users/vladimir-ea/orgs", "repos_url": "https://api.github.com/users/vladimir-ea/repos", "events_url": "https://api.github.com/users/vladimir-ea/events{/privacy}", "received_events_url": "https://api.github.com/users/vladimir-ea/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vladimir-ea", "id": 85992906, "node_id": "MDQ6VXNlcjg1OTkyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/85992906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladimir-ea", "html_url": "https://github.com/vladimir-ea", "followers_url": "https://api.github.com/users/vladimir-ea/followers", "following_url": "https://api.github.com/users/vladimir-ea/following{/other_user}", "gists_url": "https://api.github.com/users/vladimir-ea/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladimir-ea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladimir-ea/subscriptions", "organizations_url": "https://api.github.com/users/vladimir-ea/orgs", "repos_url": "https://api.github.com/users/vladimir-ea/repos", "events_url": "https://api.github.com/users/vladimir-ea/events{/privacy}", "received_events_url": "https://api.github.com/users/vladimir-ea/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "html_url": "https://github.com/rust-lang/rust/commit/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d"}], "stats": {"total": 104, "additions": 75, "deletions": 29}, "files": [{"sha": "057e47bfdd18aaa35b6f16841600595a89e36071", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -131,7 +131,7 @@ const UNWIND_DATA_REG: (i32, i32) = (10, 11); // x10, x11\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c\n \n cfg_if::cfg_if! {\n-    if #[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(target_os = \"netbsd\")))] {\n+    if #[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(target_os = \"watchos\"), not(target_os = \"netbsd\")))] {\n         // ARM EHABI personality routine.\n         // https://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf\n         //"}, {"sha": "8b1a06ee750fb0e84316d1452e682cdafb5c90f6", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -15,6 +15,7 @@ fn main() {\n         || target.contains(\"illumos\")\n         || target.contains(\"apple-darwin\")\n         || target.contains(\"apple-ios\")\n+        || target.contains(\"apple-watchos\")\n         || target.contains(\"uwp\")\n         || target.contains(\"windows\")\n         || target.contains(\"fuchsia\")"}, {"sha": "6fbaa42c76846b4576d323a9fff8c5552cbf47f7", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -141,7 +141,6 @@ pub mod openbsd;\n pub mod redox;\n #[cfg(target_os = \"solaris\")]\n pub mod solaris;\n-\n #[cfg(target_os = \"solid_asp3\")]\n pub mod solid;\n #[cfg(target_os = \"vxworks\")]"}, {"sha": "411cc0925c4b0869d0a303c95a7876cad872d8ac", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -90,6 +90,7 @@ pub mod thread;\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"ios\",\n+    target_os = \"watchos\",\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\""}, {"sha": "cc3a8858793450a1bd0bc8ec58a359d220e7c80c", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -12,6 +12,7 @@ use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, Owned\n     target_os = \"freebsd\",\n     target_os = \"ios\",\n     target_os = \"macos\",\n+    target_os = \"watchos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\"\n ))]\n@@ -30,6 +31,7 @@ use crate::time::Duration;\n     target_os = \"freebsd\",\n     target_os = \"ios\",\n     target_os = \"macos\",\n+    target_os = \"watchos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\"\n ))]\n@@ -238,6 +240,7 @@ impl UnixStream {\n         target_os = \"freebsd\",\n         target_os = \"ios\",\n         target_os = \"macos\",\n+        target_os = \"watchos\",\n         target_os = \"netbsd\",\n         target_os = \"openbsd\"\n     ))]"}, {"sha": "ae4faf27b4d39b5b2a8336e80c5fc28ef9fef853", "filename": "library/std/src/os/unix/ucred.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -36,7 +36,7 @@ pub use self::impl_linux::peer_cred;\n ))]\n pub use self::impl_bsd::peer_cred;\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\",))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n pub use self::impl_mac::peer_cred;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -97,7 +97,7 @@ pub mod impl_bsd {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\",))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n pub mod impl_mac {\n     use super::UCred;\n     use crate::os::unix::io::AsRawFd;"}, {"sha": "e63a2fc248eb0b0785c069fc4665fa3492afb9fe", "filename": "library/std/src/os/unix/ucred/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -9,6 +9,7 @@ use libc::{getegid, geteuid, getpid};\n     target_os = \"freebsd\",\n     target_os = \"ios\",\n     target_os = \"macos\",\n+    target_os = \"watchos\",\n     target_os = \"openbsd\"\n ))]\n fn test_socket_pair() {\n@@ -25,7 +26,7 @@ fn test_socket_pair() {\n }\n \n #[test]\n-#[cfg(any(target_os = \"linux\", target_os = \"ios\", target_os = \"macos\",))]\n+#[cfg(any(target_os = \"linux\", target_os = \"ios\", target_os = \"macos\", target_os = \"watchos\"))]\n fn test_socket_pair_pids(arg: Type) -> RetType {\n     // Create two connected sockets and get their peer credentials.\n     let (sock_a, sock_b) = UnixStream::pair().unwrap();"}, {"sha": "a342f0f5e8597848fc6a2998bce3d62ba391842d", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -151,7 +151,7 @@ mod imp {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n mod imp {\n     use super::Args;\n     use crate::ffi::CStr;\n@@ -192,7 +192,7 @@ mod imp {\n     // for i in (0..[args count])\n     //      res.push([args objectAtIndex:i])\n     // res\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn args() -> Args {\n         use crate::ffi::OsString;\n         use crate::mem;"}, {"sha": "c9ba661c829fabe03506124a6f8ef522a40f9965", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -31,6 +31,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"watchos\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"watchos\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".dylib\";\n+    pub const DLL_EXTENSION: &str = \"dylib\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}\n+\n #[cfg(target_os = \"freebsd\")]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "30812dabb4e0dca3ed925240ca8fdd3c090d2314", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -47,6 +47,7 @@ const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n+    target_os = \"watchos\",\n ))]\n const fn max_iov() -> usize {\n     libc::IOV_MAX as usize\n@@ -67,7 +68,8 @@ const fn max_iov() -> usize {\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n-    target_os = \"horizon\"\n+    target_os = \"horizon\",\n+    target_os = \"watchos\",\n )))]\n const fn max_iov() -> usize {\n     16 // The minimum value required by POSIX."}, {"sha": "7c8824694408c65d3fcc78970833d2b984876a55", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -17,6 +17,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n     all(target_os = \"linux\", target_env = \"gnu\"),\n     target_os = \"macos\",\n     target_os = \"ios\",\n+    target_os = \"watchos\",\n ))]\n use crate::sys::weak::syscall;\n #[cfg(target_os = \"macos\")]\n@@ -27,6 +28,7 @@ use libc::{c_int, mode_t};\n #[cfg(any(\n     target_os = \"macos\",\n     target_os = \"ios\",\n+    target_os = \"watchos\",\n     all(target_os = \"linux\", target_env = \"gnu\")\n ))]\n use libc::c_char;\n@@ -443,7 +445,8 @@ impl FileAttr {\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"macos\",\n-        target_os = \"ios\"\n+        target_os = \"ios\",\n+        target_os = \"watchos\",\n     ))]\n     pub fn created(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::new(self.stat.st_birthtime as i64, self.stat.st_birthtime_nsec as i64))\n@@ -453,7 +456,8 @@ impl FileAttr {\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"macos\",\n-        target_os = \"ios\"\n+        target_os = \"ios\",\n+        target_os = \"watchos\",\n     )))]\n     pub fn created(&self) -> io::Result<SystemTime> {\n         cfg_has_statx! {\n@@ -707,6 +711,7 @@ impl DirEntry {\n     #[cfg(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"linux\",\n         target_os = \"emscripten\",\n         target_os = \"android\",\n@@ -737,6 +742,7 @@ impl DirEntry {\n     #[cfg(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"netbsd\",\n         target_os = \"openbsd\",\n         target_os = \"freebsd\",\n@@ -754,6 +760,7 @@ impl DirEntry {\n     #[cfg(not(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"netbsd\",\n         target_os = \"openbsd\",\n         target_os = \"freebsd\",\n@@ -911,11 +918,11 @@ impl File {\n         cvt_r(|| unsafe { os_fsync(self.as_raw_fd()) })?;\n         return Ok(());\n \n-        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+        #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n         unsafe fn os_fsync(fd: c_int) -> c_int {\n             libc::fcntl(fd, libc::F_FULLFSYNC)\n         }\n-        #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+        #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\")))]\n         unsafe fn os_fsync(fd: c_int) -> c_int {\n             libc::fsync(fd)\n         }\n@@ -925,7 +932,7 @@ impl File {\n         cvt_r(|| unsafe { os_datasync(self.as_raw_fd()) })?;\n         return Ok(());\n \n-        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+        #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fcntl(fd, libc::F_FULLFSYNC)\n         }\n@@ -946,7 +953,8 @@ impl File {\n             target_os = \"linux\",\n             target_os = \"macos\",\n             target_os = \"netbsd\",\n-            target_os = \"openbsd\"\n+            target_os = \"openbsd\",\n+            target_os = \"watchos\",\n         )))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fsync(fd)\n@@ -1396,7 +1404,8 @@ fn open_to_and_set_permissions(\n     target_os = \"linux\",\n     target_os = \"android\",\n     target_os = \"macos\",\n-    target_os = \"ios\"\n+    target_os = \"ios\",\n+    target_os = \"watchos\",\n )))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     let (mut reader, reader_metadata) = open_from(from)?;\n@@ -1423,7 +1432,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     use crate::sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "abf27e7db78c7c0e30467e56289ede3c5f87e873", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -37,6 +37,7 @@ impl Condvar {\n     #[cfg(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"l4re\",\n         target_os = \"android\",\n         target_os = \"redox\"\n@@ -58,6 +59,7 @@ impl Condvar {\n     #[cfg(not(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"l4re\",\n         target_os = \"android\",\n         target_os = \"redox\",\n@@ -102,6 +104,7 @@ impl Condvar {\n     #[cfg(not(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"android\",\n         target_os = \"espidf\",\n         target_os = \"horizon\"\n@@ -135,6 +138,7 @@ impl Condvar {\n     #[cfg(any(\n         target_os = \"macos\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"android\",\n         target_os = \"espidf\",\n         target_os = \"horizon\""}, {"sha": "3d0d91460f706229f4aa8ea786e926e22f874af8", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -86,6 +86,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n             // The poll on Darwin doesn't set POLLNVAL for closed fds.\n             target_os = \"macos\",\n             target_os = \"ios\",\n+            target_os = \"watchos\",\n             target_os = \"redox\",\n             target_os = \"l4re\",\n             target_os = \"horizon\",\n@@ -329,7 +330,7 @@ cfg_if::cfg_if! {\n         // See #41582 and https://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n         #[link(name = \"resolv\")]\n         extern \"C\" {}\n-    } else if #[cfg(target_os = \"ios\")] {\n+    } else if #[cfg(any(target_os = \"ios\", target_os = \"watchos\"))] {\n         #[link(name = \"System\")]\n         #[link(name = \"objc\")]\n         #[link(name = \"Security\", kind = \"framework\")]"}, {"sha": "46545a0839fe8b416a7cd17a8f57058d34f0f360", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -61,7 +61,7 @@ extern \"C\" {\n     )]\n     #[cfg_attr(any(target_os = \"solaris\", target_os = \"illumos\"), link_name = \"___errno\")]\n     #[cfg_attr(\n-        any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\"),\n+        any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"watchos\"),\n         link_name = \"__error\"\n     )]\n     #[cfg_attr(target_os = \"haiku\", link_name = \"_errnop\")]\n@@ -361,7 +361,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n         let mut sz: u32 = 0;\n@@ -598,6 +598,7 @@ pub fn home_dir() -> Option<PathBuf> {\n     #[cfg(any(\n         target_os = \"android\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n@@ -610,6 +611,7 @@ pub fn home_dir() -> Option<PathBuf> {\n     #[cfg(not(any(\n         target_os = \"android\",\n         target_os = \"ios\",\n+        target_os = \"watchos\",\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\","}, {"sha": "bf49204881d1643ef95ce45ca4f990698a88344f", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -14,6 +14,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     unix,\n     not(target_os = \"macos\"),\n     not(target_os = \"ios\"),\n+    not(target_os = \"watchos\"),\n     not(target_os = \"openbsd\"),\n     not(target_os = \"freebsd\"),\n     not(target_os = \"netbsd\"),\n@@ -195,7 +196,7 @@ mod imp {\n // once per thread in `hashmap_random_keys`. Therefore `SecRandomCopyBytes` is\n // only used on iOS where direct access to `/dev/urandom` is blocked by the\n // sandbox.\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"ios\", target_os = \"watchos\"))]\n mod imp {\n     use crate::io;\n     use crate::ptr;"}, {"sha": "6533625876f8911de7643baf9a2ac78b70b2b950", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -139,7 +139,7 @@ impl Thread {\n         }\n     }\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n             libc::pthread_setname_np(name.as_ptr());"}, {"sha": "f244f64dab336955ae9b25fcd7bd5e06980796f1", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -51,7 +51,12 @@ unsafe fn wait_timeout(\n ) {\n     // Use the system clock on systems that do not support pthread_condattr_setclock.\n     // This unfortunately results in problems when the system time changes.\n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\"))]\n+    #[cfg(any(\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"watchos\",\n+        target_os = \"espidf\"\n+    ))]\n     let (now, dur) = {\n         use super::time::SystemTime;\n         use crate::cmp::min;\n@@ -72,7 +77,12 @@ unsafe fn wait_timeout(\n         (now, dur)\n     };\n     // Use the monotonic clock on other systems.\n-    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\")))]\n+    #[cfg(not(any(\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"watchos\",\n+        target_os = \"espidf\"\n+    )))]\n     let (now, dur) = {\n         use super::time::Timespec;\n \n@@ -110,6 +120,7 @@ impl Parker {\n             if #[cfg(any(\n                 target_os = \"macos\",\n                 target_os = \"ios\",\n+                target_os = \"watchos\",\n                 target_os = \"l4re\",\n                 target_os = \"android\",\n                 target_os = \"redox\""}, {"sha": "dff973f59d1a7dbbaedef118a4ff71aeadae1730", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -141,7 +141,7 @@ impl From<libc::timespec> for Timespec {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n mod inner {\n     use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::cvt;\n@@ -257,7 +257,7 @@ mod inner {\n     }\n }\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\")))]\n mod inner {\n     use crate::fmt;\n     use crate::mem::MaybeUninit;"}, {"sha": "c13bda328232041d655a40f0182f2ae49b43d4bd", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -18,7 +18,7 @@ use libc::{c_int, c_void};\n cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n-        target_os = \"ios\", target_os = \"macos\",\n+        target_os = \"ios\", target_os = \"macos\", target_os = \"watchos\",\n         target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"illumos\",\n         target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))] {\n         use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;"}, {"sha": "a5b6193b086fbf44aef522205179d07a7abefdcc", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439d64a83c84fe36befacc4af867eaadb96589d5/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=439d64a83c84fe36befacc4af867eaadb96589d5", "patch": "@@ -30,10 +30,10 @@ pub const unwinder_private_data_size: usize = 5;\n #[cfg(target_arch = \"x86_64\")]\n pub const unwinder_private_data_size: usize = 6;\n \n-#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\")))]\n+#[cfg(all(target_arch = \"arm\", not(any(target_os = \"ios\", target_os = \"watchos\"))))]\n pub const unwinder_private_data_size: usize = 20;\n \n-#[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n+#[cfg(all(target_arch = \"arm\", any(target_os = \"ios\", target_os = \"watchos\")))]\n pub const unwinder_private_data_size: usize = 5;\n \n #[cfg(all(target_arch = \"aarch64\", target_pointer_width = \"64\"))]\n@@ -105,7 +105,7 @@ extern \"C\" {\n }\n \n cfg_if::cfg_if! {\n-if #[cfg(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\")))] {\n+if #[cfg(any(target_os = \"ios\", target_os = \"watchos\", target_os = \"netbsd\", not(target_arch = \"arm\")))] {\n     // Not ARM EHABI\n     #[repr(C)]\n     #[derive(Copy, Clone, PartialEq)]"}]}