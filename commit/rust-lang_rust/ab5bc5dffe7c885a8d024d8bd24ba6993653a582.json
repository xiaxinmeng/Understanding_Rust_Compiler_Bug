{"sha": "ab5bc5dffe7c885a8d024d8bd24ba6993653a582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWJjNWRmZmU3Yzg4NWE4ZDAyNGQ4YmQyNGJhNjk5MzY1M2E1ODI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-05T23:53:43Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-05T23:53:43Z"}, "message": "trie: remove the Copy requirement", "tree": {"sha": "fc98506805f6b13a0c86cb689d0ae1e90139e894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc98506805f6b13a0c86cb689d0ae1e90139e894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5bc5dffe7c885a8d024d8bd24ba6993653a582", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bc5dffe7c885a8d024d8bd24ba6993653a582", "html_url": "https://github.com/rust-lang/rust/commit/ab5bc5dffe7c885a8d024d8bd24ba6993653a582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bc5dffe7c885a8d024d8bd24ba6993653a582/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "html_url": "https://github.com/rust-lang/rust/commit/dec599f652dbafe9a4f5ec6ba63023d1eae89a08"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "0ad87dcf03e2ecc78811322fd91467ad1bc4ffa2", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bc5dffe7c885a8d024d8bd24ba6993653a582/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bc5dffe7c885a8d024d8bd24ba6993653a582/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=ab5bc5dffe7c885a8d024d8bd24ba6993653a582", "patch": "@@ -13,6 +13,7 @@\n use prelude::*;\n \n // FIXME: #3469: need to manually update TrieNode when SHIFT changes\n+// FIXME: #5244: need to manually update the TrieNode constructor\n const SHIFT: uint = 4;\n const SIZE: uint = 1 << SHIFT;\n const MASK: uint = SIZE - 1;\n@@ -56,7 +57,7 @@ impl<T> Container for TrieMap<T> {\n     pure fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n-impl<T: Copy> Mutable for TrieMap<T> {\n+impl<T> Mutable for TrieMap<T> {\n     /// Clear the map, removing all values.\n     #[inline(always)]\n     fn clear(&mut self) {\n@@ -65,7 +66,7 @@ impl<T: Copy> Mutable for TrieMap<T> {\n     }\n }\n \n-impl<T: Copy> Map<uint, T> for TrieMap<T> {\n+impl<T> Map<uint, T> for TrieMap<T> {\n     /// Return true if the map contains a value for the specified key\n     #[inline(always)]\n     pure fn contains_key(&self, key: &uint) -> bool {\n@@ -127,7 +128,7 @@ impl<T: Copy> Map<uint, T> for TrieMap<T> {\n     }\n }\n \n-impl<T: Copy> TrieMap<T> {\n+impl<T> TrieMap<T> {\n     #[inline(always)]\n     static pure fn new() -> TrieMap<T> {\n         TrieMap{root: TrieNode::new(), length: 0}\n@@ -209,10 +210,15 @@ struct TrieNode<T> {\n     children: [Child<T> * 16] // FIXME: #3469: can't use the SIZE constant yet\n }\n \n-impl<T: Copy> TrieNode<T> {\n+impl<T> TrieNode<T> {\n     #[inline(always)]\n     static pure fn new() -> TrieNode<T> {\n-        TrieNode{count: 0, children: [Nothing, ..SIZE]}\n+        // FIXME: #5244: [Nothing, ..SIZE] should be possible without Copy\n+        TrieNode{count: 0,\n+                 children: [Nothing, Nothing, Nothing, Nothing,\n+                            Nothing, Nothing, Nothing, Nothing,\n+                            Nothing, Nothing, Nothing, Nothing,\n+                            Nothing, Nothing, Nothing, Nothing]}\n     }\n }\n \n@@ -260,12 +266,16 @@ pure fn chunk(n: uint, idx: uint) -> uint {\n     (n >> (SHIFT * real_idx)) & MASK\n }\n \n-fn insert<T: Copy>(count: &mut uint, child: &mut Child<T>, key: uint,\n+fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n                    value: T, idx: uint) -> bool {\n-    match *child {\n+    let mut tmp = Nothing;\n+    tmp <-> *child;\n+    let mut added = false;\n+\n+    *child = match tmp {\n       External(stored_key, stored_value) => {\n           if stored_key == key {\n-              false // already in the trie\n+              External(stored_key, value)\n           } else {\n               // conflict - split the node\n               let mut new = ~TrieNode::new();\n@@ -274,20 +284,24 @@ fn insert<T: Copy>(count: &mut uint, child: &mut Child<T>, key: uint,\n                      stored_key, stored_value, idx + 1);\n               insert(&mut new.count, &mut new.children[chunk(key, idx)], key,\n                      value, idx + 1);\n-              *child = Internal(new);\n-              true\n+              added = true;\n+              Internal(new)\n           }\n       }\n-      Internal(ref mut x) => {\n-        insert(&mut x.count, &mut x.children[chunk(key, idx)], key, value,\n-               idx + 1)\n+      Internal(x) => {\n+        let mut x = x;\n+        added = insert(&mut x.count, &mut x.children[chunk(key, idx)], key,\n+                       value, idx + 1);\n+        Internal(x)\n+\n       }\n       Nothing => {\n         *count += 1;\n-        *child = External(key, value);\n-        true\n+        added = true;\n+        External(key, value)\n       }\n-    }\n+    };\n+    added\n }\n \n fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,"}]}