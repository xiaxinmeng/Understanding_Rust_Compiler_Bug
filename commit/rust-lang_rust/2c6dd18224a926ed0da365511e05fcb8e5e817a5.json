{"sha": "2c6dd18224a926ed0da365511e05fcb8e5e817a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNmRkMTgyMjRhOTI2ZWQwZGEzNjU1MTFlMDVmY2I4ZTVlODE3YTU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2010-12-29T16:21:16Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2010-12-29T16:21:16Z"}, "message": "Add a -shared option to rustc and don't try to look for main if it is given.", "tree": {"sha": "b897fadd33635683d36112766e968316897c12f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b897fadd33635683d36112766e968316897c12f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6dd18224a926ed0da365511e05fcb8e5e817a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6dd18224a926ed0da365511e05fcb8e5e817a5", "html_url": "https://github.com/rust-lang/rust/commit/2c6dd18224a926ed0da365511e05fcb8e5e817a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6dd18224a926ed0da365511e05fcb8e5e817a5/comments", "author": null, "committer": null, "parents": [{"sha": "f900792fa344d9518bf34fe416f25a89be555ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f900792fa344d9518bf34fe416f25a89be555ba1", "html_url": "https://github.com/rust-lang/rust/commit/f900792fa344d9518bf34fe416f25a89be555ba1"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "6d4cd104e779706f1627e68057573c13ab4b3099", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c6dd18224a926ed0da365511e05fcb8e5e817a5/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6dd18224a926ed0da365511e05fcb8e5e817a5/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=2c6dd18224a926ed0da365511e05fcb8e5e817a5", "patch": "@@ -13,12 +13,13 @@ import std.option.none;\n import std._str;\n import std._vec;\n \n-impure fn compile_input(session.session sess, str input, str output) {\n+impure fn compile_input(session.session sess, str input, str output,\n+                        bool shared) {\n     auto p = parser.new_parser(sess, 0, input);\n     auto crate = parser.parse_crate(p);\n     crate = resolve.resolve_crate(sess, crate);\n     crate = typeck.check_crate(sess, crate);\n-    trans.trans_crate(sess, crate, output);\n+    trans.trans_crate(sess, crate, output, shared);\n }\n \n fn warn_wrong_compiler() {\n@@ -34,6 +35,7 @@ fn usage(session.session sess, str argv0) {\n     log \"\";\n     log \"    -o <filename>      write output to <filename>\";\n     log \"    -nowarn            suppress wrong-compiler warning\";\n+    log \"    -shared            compile a shared-library crate\";\n     log \"    -h                 display this message\";\n     log \"\";\n     log \"\";\n@@ -59,6 +61,7 @@ impure fn main(vec[str] args) {\n     let option.t[str] input_file = none[str];\n     let option.t[str] output_file = none[str];\n     let bool do_warn = true;\n+    let bool shared = false;\n \n     auto i = 1u;\n     auto len = _vec.len[str](args);\n@@ -69,6 +72,8 @@ impure fn main(vec[str] args) {\n         if (_str.byte_len(arg) > 0u && arg.(0) == '-' as u8) {\n             if (_str.eq(arg, \"-nowarn\")) {\n                 do_warn = false;\n+            } else if (_str.eq(arg, \"-shared\")) {\n+                shared = true;\n             } else {\n                 // FIXME: rust could use an elif construct.\n                 if (_str.eq(arg, \"-o\")) {\n@@ -120,10 +125,10 @@ impure fn main(vec[str] args) {\n                     parts = _vec.pop[str](parts);\n                     parts += \".bc\";\n                     auto ofile = _str.concat(parts);\n-                    compile_input(sess, ifile, ofile);\n+                    compile_input(sess, ifile, ofile, shared);\n                 }\n                 case (some[str](?ofile)) {\n-                    compile_input(sess, ifile, ofile);\n+                    compile_input(sess, ifile, ofile, shared);\n                 }\n             }\n         }"}, {"sha": "2834463feafc710aa2f4bcaf2b2e3c05360ca046", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c6dd18224a926ed0da365511e05fcb8e5e817a5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6dd18224a926ed0da365511e05fcb8e5e817a5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2c6dd18224a926ed0da365511e05fcb8e5e817a5", "patch": "@@ -3055,7 +3055,8 @@ fn make_glues(ModuleRef llmod) -> @glue_fns {\n              no_op_type_glue = make_no_op_type_glue(llmod));\n }\n \n-fn trans_crate(session.session sess, @ast.crate crate, str output) {\n+fn trans_crate(session.session sess, @ast.crate crate, str output,\n+               bool shared) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -3095,7 +3096,9 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n \n     trans_mod(cx, crate.node.module);\n     trans_exit_task_glue(cx);\n-    trans_main_fn(cx, crate_constant(cx));\n+    if (!shared) {\n+        trans_main_fn(cx, crate_constant(cx));\n+    }\n \n     check_module(llmod);\n "}]}