{"sha": "807dab943bc35b8f579cc082f385bdd5a6a98c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwN2RhYjk0M2JjMzViOGY1NzljYzA4MmYzODViZGQ1YTZhOThjNjM=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-22T19:36:54Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-22T20:06:58Z"}, "message": "Updated test case for cast lints.\n\nAlso improved readability and reworded the messages.", "tree": {"sha": "84397b6fc01ab8cfe3e92544356494840fbf673e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84397b6fc01ab8cfe3e92544356494840fbf673e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/807dab943bc35b8f579cc082f385bdd5a6a98c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/807dab943bc35b8f579cc082f385bdd5a6a98c63", "html_url": "https://github.com/rust-lang/rust/commit/807dab943bc35b8f579cc082f385bdd5a6a98c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/807dab943bc35b8f579cc082f385bdd5a6a98c63/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1255d5f5d9c9d23d039ee3798af4e164563226f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1255d5f5d9c9d23d039ee3798af4e164563226f", "html_url": "https://github.com/rust-lang/rust/commit/f1255d5f5d9c9d23d039ee3798af4e164563226f"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "9be0d5011984e2167f2fac72b20cc758b4d9b39b", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/807dab943bc35b8f579cc082f385bdd5a6a98c63/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807dab943bc35b8f579cc082f385bdd5a6a98c63/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=807dab943bc35b8f579cc082f385bdd5a6a98c63", "patch": "@@ -1,43 +1,57 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss)]\n-#[allow(dead_code)]\n+#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n fn main() {\n-    let i : i32 = 42;\n-    let u : u32 = 42;\n-    let f : f32 = 42.0;\n-\n     // Test cast_precision_loss\n-    i as f32; //~ERROR converting from i32 to f32, which causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-    (i as i64) as f32; //~ERROR converting from i64 to f32, which causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    (i as i64) as f64; //~ERROR converting from i64 to f64, which causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    u as f32; //~ERROR converting from u32 to f32, which causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-    (u as u64) as f32; //~ERROR converting from u64 to f32, which causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    (u as u64) as f64; //~ERROR converting from u64 to f64, which causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    i as f64; // Should not trigger the lint\n-    u as f64; // Should not trigger the lint\n+    1i32 as f32; //~ERROR casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    1i64 as f32; //~ERROR casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    1i64 as f64; //~ERROR casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    1u32 as f32; //~ERROR casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    1u64 as f32; //~ERROR casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    1u64 as f64; //~ERROR casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    1i32 as f64; // Should not trigger the lint\n+    1u32 as f64; // Should not trigger the lint\n \n     // Test cast_possible_truncation\n-    f as i32; //~ERROR casting f32 to i32 may cause truncation of the value\n-    f as u32; //~ERROR casting f32 to u32 may cause truncation of the value\n-              //~^ERROR casting from f32 to u32 loses the sign of the value\n-    i as u8;  //~ERROR casting i32 to u8 may cause truncation of the value\n-              //~^ERROR casting from i32 to u8 loses the sign of the value\n-    (f as f64) as f32; //~ERROR casting f64 to f32 may cause truncation of the value\n-    i as i8;  //~ERROR casting i32 to i8 may cause truncation of the value\n-    u as i32; //~ERROR casting u32 to i32 may cause truncation of the value\n+    1f32 as i32;   //~ERROR casting f32 to i32 may truncate the value\n+    1f32 as u32;   //~ERROR casting f32 to u32 may truncate the value\n+                  //~^ERROR casting f32 to u32 may lose the sign of the value\n+    1f64 as f32;   //~ERROR casting f64 to f32 may truncate the value\n+    1i32 as i8;    //~ERROR casting i32 to i8 may truncate the value\n+    1i32 as u8;    //~ERROR casting i32 to u8 may truncate the value\n+                  //~^ERROR casting i32 to u8 may lose the sign of the value\n+    1f64 as isize; //~ERROR casting f64 to isize may truncate the value\n+    1f64 as usize; //~ERROR casting f64 to usize may truncate the value\n+                  //~^ERROR casting f64 to usize may lose the sign of the value\n+\n+    // Test cast_possible_wrap\n+    1u8 as i8;       //~ERROR casting u8 to i8 may wrap around the value\n+    1u16 as i16;     //~ERROR casting u16 to i16 may wrap around the value\n+    1u32 as i32;     //~ERROR casting u32 to i32 may wrap around the value\n+    1u64 as i64;     //~ERROR casting u64 to i64 may wrap around the value\n+    1usize as isize; //~ERROR casting usize to isize may wrap around the value\n \n     // Test cast_sign_loss\n-    i as u32; //~ERROR casting from i32 to u32 loses the sign of the value\n+    1i32 as u32;     //~ERROR casting i32 to u32 may lose the sign of the value\n+    1isize as usize; //~ERROR casting isize to usize may lose the sign of the value\n \n-    // Extra checks for usize/isize\n-    /*\n-    let is : isize = -42;\n-    let us : usize = 42;\n-    is as usize; //ERROR casting from isize to usize loses the sign of the value\n-    is as i8; //ERROR casting isize to i8 may cause truncation of the value\n-    is as f64; //ERROR converting from isize to f64, which causes a loss of precision on 64-bit architectures (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    us as f64; //ERROR converting from usize to f64, which causes a loss of precision on 64-bit architectures (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    */\n+    // Extra checks for *size\n+    // Casting from *size\n+    1isize as i8;  //~ERROR casting isize to i8 may truncate the value\n+    1isize as f64; //~ERROR casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    1usize as f64; //~ERROR casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    1isize as f32; //~ERROR casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    1usize as f32; //~ERROR casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    1isize as i32; //~ERROR casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+    1isize as u32; //~ERROR casting isize to u32 may lose the sign of the value\n+                  //~^ERROR casting isize to u32 may truncate the value on targets with 64-bit wide pointers        \n+    1usize as u32; //~ERROR casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+    // Casting to *size\n+    1i64 as isize; //~ERROR casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+    1i64 as usize; //~ERROR casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+                  //~^ERROR casting i64 to usize may lose the sign of the value\n+    1u64 as isize; //~ERROR casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+                  //~^ERROR casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+    1u64 as usize; //~ERROR casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n }\n\\ No newline at end of file"}]}