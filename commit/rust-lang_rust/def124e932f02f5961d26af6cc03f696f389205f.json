{"sha": "def124e932f02f5961d26af6cc03f696f389205f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjEyNGU5MzJmMDJmNTk2MWQyNmFmNmNjMDNmNjk2ZjM4OTIwNWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-03T22:05:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Fix file ID when qualifying paths; add another failing test", "tree": {"sha": "14e2bb6397dd7ec25ede212090619eb16c4e9a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e2bb6397dd7ec25ede212090619eb16c4e9a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def124e932f02f5961d26af6cc03f696f389205f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def124e932f02f5961d26af6cc03f696f389205f", "html_url": "https://github.com/rust-lang/rust/commit/def124e932f02f5961d26af6cc03f696f389205f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def124e932f02f5961d26af6cc03f696f389205f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4545f289a991ec3888896aac0e0bcbfac9061e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4545f289a991ec3888896aac0e0bcbfac9061e80", "html_url": "https://github.com/rust-lang/rust/commit/4545f289a991ec3888896aac0e0bcbfac9061e80"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "22f1157ccdc7e92e3741c8be3d3c85226c1b905e", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/def124e932f02f5961d26af6cc03f696f389205f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def124e932f02f5961d26af6cc03f696f389205f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=def124e932f02f5961d26af6cc03f696f389205f", "patch": "@@ -134,8 +134,9 @@ fn add_missing_impl_members_inner(\n         return None;\n     }\n \n-    let file_id = ctx.frange.file_id;\n     let db = ctx.db;\n+    let file_id = ctx.frange.file_id;\n+    let trait_file_id = trait_.source(db).file_id;\n \n     ctx.add_assist(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n@@ -157,10 +158,10 @@ fn add_missing_impl_members_inner(\n         let items = missing_items\n             .into_iter()\n             .map(|it| {\n-                substitute_type_params(db, hir::InFile::new(file_id.into(), it), &substs_by_param)\n+                substitute_type_params(db, hir::InFile::new(trait_file_id, it), &substs_by_param)\n             })\n             .map(|it| match module {\n-                Some(module) => qualify_paths(db, hir::InFile::new(file_id.into(), it), module),\n+                Some(module) => qualify_paths(db, hir::InFile::new(trait_file_id, it), module),\n                 None => it,\n             })\n             .map(|it| match it {\n@@ -259,6 +260,7 @@ fn qualify_paths<N: AstNode>(db: &impl HirDatabase, node: hir::InFile<N>, from:\n             match resolution {\n                 PathResolution::Def(def) => {\n                     let found_path = from.find_path(db, def)?;\n+                    // TODO fix type arg replacements being qualified\n                     let args = p\n                         .segment()\n                         .and_then(|s| s.type_arg_list())\n@@ -523,6 +525,32 @@ impl foo::Foo<u32> for S {\n         );\n     }\n \n+    #[test]\n+    fn test_substitute_param_no_qualify() {\n+        // when substituting params, the substituted param should not be qualified!\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    trait Foo<T> { fn foo(&self, bar: T); }\n+    pub struct Param;\n+}\n+struct Param;\n+struct S;\n+impl foo::Foo<Param> for S { <|> }\",\n+            \"\n+mod foo {\n+    trait Foo<T> { fn foo(&self, bar: T); }\n+    pub struct Param;\n+}\n+struct Param;\n+struct S;\n+impl foo::Foo<Param> for S {\n+    <|>fn foo(&self, bar: Param) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn test_qualify_path_associated_item() {\n         check_assist("}]}