{"sha": "87edccf0f048d566596495650188eea15cdf62d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWRjY2YwZjA0OGQ1NjY1OTY0OTU2NTAxODhlZWExNWNkZjYyZDY=", "commit": {"author": {"name": "Adam Reichold", "email": "adam.reichold@t-online.de", "date": "2020-08-01T13:38:08Z"}, "committer": {"name": "Adam Reichold", "email": "adam.reichold@t-online.de", "date": "2020-08-05T14:57:02Z"}, "message": "Reduce synchronization overhead of I/O vector count memoization", "tree": {"sha": "f4aac7b8c0324d7f03d7fdf7e300351bed4e2b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4aac7b8c0324d7f03d7fdf7e300351bed4e2b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87edccf0f048d566596495650188eea15cdf62d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87edccf0f048d566596495650188eea15cdf62d6", "html_url": "https://github.com/rust-lang/rust/commit/87edccf0f048d566596495650188eea15cdf62d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87edccf0f048d566596495650188eea15cdf62d6/comments", "author": {"login": "adamreichold", "id": 12997846, "node_id": "MDQ6VXNlcjEyOTk3ODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12997846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamreichold", "html_url": "https://github.com/adamreichold", "followers_url": "https://api.github.com/users/adamreichold/followers", "following_url": "https://api.github.com/users/adamreichold/following{/other_user}", "gists_url": "https://api.github.com/users/adamreichold/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamreichold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamreichold/subscriptions", "organizations_url": "https://api.github.com/users/adamreichold/orgs", "repos_url": "https://api.github.com/users/adamreichold/repos", "events_url": "https://api.github.com/users/adamreichold/events{/privacy}", "received_events_url": "https://api.github.com/users/adamreichold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamreichold", "id": 12997846, "node_id": "MDQ6VXNlcjEyOTk3ODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12997846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamreichold", "html_url": "https://github.com/adamreichold", "followers_url": "https://api.github.com/users/adamreichold/followers", "following_url": "https://api.github.com/users/adamreichold/following{/other_user}", "gists_url": "https://api.github.com/users/adamreichold/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamreichold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamreichold/subscriptions", "organizations_url": "https://api.github.com/users/adamreichold/orgs", "repos_url": "https://api.github.com/users/adamreichold/repos", "events_url": "https://api.github.com/users/adamreichold/events{/privacy}", "received_events_url": "https://api.github.com/users/adamreichold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6672f7be032e1fc392cb0e2a785563b82b095117", "url": "https://api.github.com/repos/rust-lang/rust/commits/6672f7be032e1fc392cb0e2a785563b82b095117", "html_url": "https://github.com/rust-lang/rust/commit/6672f7be032e1fc392cb0e2a785563b82b095117"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "91116a53235446405705992ca10fe79a0c9c7555", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87edccf0f048d566596495650188eea15cdf62d6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87edccf0f048d566596495650188eea15cdf62d6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=87edccf0f048d566596495650188eea15cdf62d6", "patch": "@@ -2,8 +2,8 @@\n \n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};\n-use crate::lazy::SyncOnceCell;\n use crate::mem;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n \n@@ -28,10 +28,11 @@ const READ_LIMIT: usize = c_int::MAX as usize - 1;\n const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n-fn max_iov() -> c_int {\n-    static LIM: SyncOnceCell<c_int> = SyncOnceCell::new();\n+fn max_iov() -> usize {\n+    static LIM: AtomicUsize = AtomicUsize::new(0);\n \n-    *LIM.get_or_init(|| {\n+    let mut lim = LIM.load(Ordering::Relaxed);\n+    if lim == 0 {\n         let ret = unsafe {\n             libc::sysconf(\n                 #[cfg(target_os = \"linux\")]\n@@ -43,13 +44,16 @@ fn max_iov() -> c_int {\n \n         // 1024 is the default value on modern Linux systems\n         // and hopefully more useful than `c_int::MAX`.\n-        if ret > 0 { ret as c_int } else { 1024 }\n-    })\n+        lim = if ret > 0 { ret as usize } else { 1024 };\n+        LIM.store(lim, Ordering::Relaxed);\n+    }\n+\n+    lim\n }\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n-fn max_iov() -> c_int {\n-    c_int::MAX\n+fn max_iov() -> usize {\n+    c_int::MAX as usize\n }\n \n impl FileDesc {\n@@ -80,7 +84,7 @@ impl FileDesc {\n             libc::readv(\n                 self.fd,\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov() as usize) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as c_int,\n             )\n         })?;\n         Ok(ret as usize)\n@@ -137,7 +141,7 @@ impl FileDesc {\n             libc::writev(\n                 self.fd,\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov() as usize) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as c_int,\n             )\n         })?;\n         Ok(ret as usize)"}]}