{"sha": "45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmUzYTFhMmFiMjY3MWJiOWY3MjY5NDFlZGE2YzI4OTllYjZkZmY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-04T16:24:49Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-05T11:12:30Z"}, "message": "emit an assume that cast-from enums are in range\n\nFixes #36955.", "tree": {"sha": "cbb590e2eafeee36db87e30cae4d71f27c8112cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb590e2eafeee36db87e30cae4d71f27c8112cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "html_url": "https://github.com/rust-lang/rust/commit/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "923336627157eac4408b0851bf01ed20940f5582", "url": "https://api.github.com/repos/rust-lang/rust/commits/923336627157eac4408b0851bf01ed20940f5582", "html_url": "https://github.com/rust-lang/rust/commit/923336627157eac4408b0851bf01ed20940f5582"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "e0e808f2dcca1848896a3c74c618be69e7215894", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "patch": "@@ -522,6 +522,11 @@ pub fn need_invoke(bcx: Block) -> bool {\n     }\n }\n \n+pub fn call_assume<'a, 'tcx>(b: &Builder<'a, 'tcx>, val: ValueRef) {\n+    let assume_intrinsic = b.ccx.get_intrinsic(\"llvm.assume\");\n+    b.call(assume_intrinsic, &[val], None);\n+}\n+\n /// Helper for loading values from memory. Does the necessary conversion if the in-memory type\n /// differs from the type used for SSA values. Also handles various special cases where the type\n /// gives us better information about what we are loading."}, {"sha": "97aa475be68a7c3ef0860701080b3340f004b96d", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "patch": "@@ -11,12 +11,14 @@\n use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n+use rustc::ty::layout::Layout;\n use rustc::mir::repr as mir;\n \n use asm;\n use base;\n use callee::Callee;\n use common::{self, val_ty, C_bool, C_null, C_uint, BlockAndBuilder, Result};\n+use common::{C_integral};\n use debuginfo::DebugLoc;\n use adt;\n use machine;\n@@ -282,7 +284,26 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 }\n                                 OperandValue::Pair(..) => bug!(\"Unexpected Pair operand\")\n                             };\n-                            (discr, adt::is_discr_signed(&l))\n+                            let (signed, min, max) = match l {\n+                                &Layout::CEnum { signed, min, max, .. } => {\n+                                    (signed, min, max)\n+                                }\n+                                _ => bug!(\"CEnum {:?} is not an enum\", operand)\n+                            };\n+\n+                            if max > min {\n+                                // We want `table[e as usize]` to not\n+                                // have bound checks, and this is the most\n+                                // convenient place to put the `assume`.\n+\n+                                base::call_assume(&bcx, bcx.icmp(\n+                                    llvm::IntULE,\n+                                    discr,\n+                                    C_integral(common::val_ty(discr), max, false)\n+                                ))\n+                            }\n+\n+                            (discr, signed)\n                         } else {\n                             (operand.immediate(), operand.ty.is_signed())\n                         };"}, {"sha": "4cfb5a752dfdc0cadde5b8cf6ee2f2e5929b5300", "filename": "src/test/codegen/enum-bounds-check.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fe3a1a2ab2671bb9f726941eda6c2899eb6dff/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs?ref=45fe3a1a2ab2671bb9f726941eda6c2899eb6dff", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+pub enum Foo {\n+    A, B\n+}\n+\n+// CHECK-LABEL: @lookup\n+#[no_mangle]\n+pub fn lookup(buf: &[u8; 2], f: Foo) -> u8 {\n+    // CHECK-NOT: panic_bounds_check\n+    buf[f as usize]\n+}"}]}