{"sha": "fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjI3MmU1ZWY5MmI1ZjBiNGYxMGMxYjQyYzdkYmNiNWNlYzBmNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-02T13:16:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-02T13:16:12Z"}, "message": "Auto merge of #58216 - pitdicker:sqos_flags, r=alexcrichton\n\n Set secure flags when opening a named pipe on Windows\n\nFixes https://github.com/rust-lang/rust/issues/42036, see also the previous attempt in https://github.com/rust-lang/rust/pull/44556.\n\nWhether this is correct depends on if it is somehow possible to create a symlink to a named pipe, outside the named pipe filesystem (NPFS). But as far as I can tell that should be impossible.\n\nAlso fixes that `security_qos_flags(SECURITY_ANONYMOUS)` does not set the `SECURITY_SQOS_PRESENT` flag, and the incorrect documentation about the default value of `security_qos_flags`.", "tree": {"sha": "3a77cc67f7730c513d7f43f9ad58ce029639bba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a77cc67f7730c513d7f43f9ad58ce029639bba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "html_url": "https://github.com/rust-lang/rust/commit/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cfed5da12bf65212eb9a4ae9141c2f39f995381", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfed5da12bf65212eb9a4ae9141c2f39f995381", "html_url": "https://github.com/rust-lang/rust/commit/9cfed5da12bf65212eb9a4ae9141c2f39f995381"}, {"sha": "089524c31ac8098965f9ed69d89a5de127b4bbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/089524c31ac8098965f9ed69d89a5de127b4bbbb", "html_url": "https://github.com/rust-lang/rust/commit/089524c31ac8098965f9ed69d89a5de127b4bbbb"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "268a14ff0aabb58fa9af5f2e3c97bfc408a9bad5", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "patch": "@@ -220,13 +220,27 @@ pub trait OpenOptionsExt {\n     /// the specified value (or combines it with `custom_flags` and `attributes`\n     /// to set the `dwFlagsAndAttributes` for [`CreateFile`]).\n     ///\n-    /// By default, `security_qos_flags` is set to `SECURITY_ANONYMOUS`. For\n-    /// information about possible values, see [Impersonation Levels] on the\n-    /// Windows Dev Center site.\n-    ///\n+    /// By default `security_qos_flags` is not set. It should be specified when\n+    /// opening a named pipe, to control to which degree a server process can\n+    /// act on behalf of a client process (security impersonation level).\n+    ///\n+    /// When `security_qos_flags` is not set a malicious program can gain the\n+    /// elevated privileges of a privileged Rust process when it allows opening\n+    /// user-specified paths, by tricking it into opening a named pipe. So\n+    /// arguably `security_qos_flags` should also be set when opening arbitrary\n+    /// paths. However the bits can then conflict with other flags, specifically\n+    /// `FILE_FLAG_OPEN_NO_RECALL`.\n+    ///\n+    /// For information about possible values, see [Impersonation Levels] on the\n+    /// Windows Dev Center site. The `SECURITY_SQOS_PRESENT` flag is set\n+    /// automatically when using this method.\n+\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #[cfg(for_demonstration_only)]\n+    /// extern crate winapi;\n+    /// # mod winapi { pub const SECURITY_IDENTIFICATION: u32 = 0; }\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::prelude::*;\n     ///\n@@ -235,9 +249,9 @@ pub trait OpenOptionsExt {\n     ///     .create(true)\n     ///\n     ///     // Sets the flag value to `SecurityIdentification`.\n-    ///     .security_qos_flags(1)\n+    ///     .security_qos_flags(winapi::SECURITY_IDENTIFICATION)\n     ///\n-    ///     .open(\"foo.txt\");\n+    ///     .open(r\"\\\\.\\pipe\\MyPipe\");\n     /// ```\n     ///\n     /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx"}, {"sha": "daf8aae24dde5b61b50bd5172fca300e5cbdb31b", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=fab272e5ef92b5f0b4f10c1b42c7dbcb5cec0f78", "patch": "@@ -191,7 +191,11 @@ impl OpenOptions {\n     pub fn access_mode(&mut self, access_mode: u32) { self.access_mode = Some(access_mode); }\n     pub fn share_mode(&mut self, share_mode: u32) { self.share_mode = share_mode; }\n     pub fn attributes(&mut self, attrs: u32) { self.attributes = attrs; }\n-    pub fn security_qos_flags(&mut self, flags: u32) { self.security_qos_flags = flags; }\n+    pub fn security_qos_flags(&mut self, flags: u32) {\n+        // We have to set `SECURITY_SQOS_PRESENT` here, because one of the valid flags we can\n+        // receive is `SECURITY_ANONYMOUS = 0x0`, which we can't check for later on.\n+        self.security_qos_flags = flags | c::SECURITY_SQOS_PRESENT;\n+    }\n     pub fn security_attributes(&mut self, attrs: c::LPSECURITY_ATTRIBUTES) {\n         self.security_attributes = attrs as usize;\n     }\n@@ -239,7 +243,6 @@ impl OpenOptions {\n         self.custom_flags |\n         self.attributes |\n         self.security_qos_flags |\n-        if self.security_qos_flags != 0 { c::SECURITY_SQOS_PRESENT } else { 0 } |\n         if self.create_new { c::FILE_FLAG_OPEN_REPARSE_POINT } else { 0 }\n     }\n }"}]}