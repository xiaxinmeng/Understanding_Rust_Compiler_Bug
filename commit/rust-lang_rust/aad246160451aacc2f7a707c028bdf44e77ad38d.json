{"sha": "aad246160451aacc2f7a707c028bdf44e77ad38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZDI0NjE2MDQ1MWFhY2MyZjdhNzA3YzAyOGJkZjQ0ZTc3YWQzOGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-31T23:20:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:18:08Z"}, "message": "core: Convert Char::escape_default, escape_unicode to iterators\n\n[breaking-change]", "tree": {"sha": "0caee1d89bc0703990a241775aae0bff49d84b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0caee1d89bc0703990a241775aae0bff49d84b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad246160451aacc2f7a707c028bdf44e77ad38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad246160451aacc2f7a707c028bdf44e77ad38d", "html_url": "https://github.com/rust-lang/rust/commit/aad246160451aacc2f7a707c028bdf44e77ad38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad246160451aacc2f7a707c028bdf44e77ad38d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1820b1fce5aa803ccc757e79dd659f599d1516", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1820b1fce5aa803ccc757e79dd659f599d1516", "html_url": "https://github.com/rust-lang/rust/commit/ca1820b1fce5aa803ccc757e79dd659f599d1516"}], "stats": {"total": 153, "additions": 110, "deletions": 43}, "files": [{"sha": "0fe40081a46235f6d527f7b87c7df43e828930b3", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -630,7 +630,9 @@ pub trait StrAllocating: Str {\n         let me = self.as_slice();\n         let mut out = String::with_capacity(me.len());\n         for c in me.chars() {\n-            c.escape_default(|c| out.push(c));\n+            for c in c.escape_default() {\n+                out.push(c);\n+            }\n         }\n         out\n     }\n@@ -640,7 +642,9 @@ pub trait StrAllocating: Str {\n         let me = self.as_slice();\n         let mut out = String::with_capacity(me.len());\n         for c in me.chars() {\n-            c.escape_unicode(|c| out.push(c));\n+            for c in c.escape_unicode() {\n+                out.push(c);\n+            }\n         }\n         out\n     }"}, {"sha": "1210465098a1106700bc6d19283990926a9f9602", "filename": "src/libcore/char.rs", "status": "modified", "additions": 95, "deletions": 34, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -17,7 +17,7 @@\n \n use mem::transmute;\n use option::{None, Option, Some};\n-use iter::range_step;\n+use iter::{range_step, Iterator, RangeStep};\n use slice::SlicePrelude;\n \n // UTF-8 ranges and tags for encoding characters\n@@ -165,7 +165,9 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n ///\n #[deprecated = \"use the Char::escape_unicode method\"]\n pub fn escape_unicode(c: char, f: |char|) {\n-    c.escape_unicode(f)\n+    for char in c.escape_unicode() {\n+        f(char);\n+    }\n }\n \n ///\n@@ -182,7 +184,9 @@ pub fn escape_unicode(c: char, f: |char|) {\n ///\n #[deprecated = \"use the Char::escape_default method\"]\n pub fn escape_default(c: char, f: |char|) {\n-    c.escape_default(f)\n+    for c in c.escape_default() {\n+        f(c);\n+    }\n }\n \n /// Returns the amount of bytes this `char` would need if encoded in UTF-8\n@@ -266,7 +270,7 @@ pub trait Char {\n     /// * Characters in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`.\n     /// * Characters above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`.\n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn escape_unicode(self, f: |char|);\n+    fn escape_unicode(self) -> UnicodeEscapedChars;\n \n     /// Returns a 'default' ASCII and C++11-like literal escape of a\n     /// character.\n@@ -281,7 +285,7 @@ pub trait Char {\n     /// * Any other chars in the range [0x20,0x7e] are not escaped.\n     /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn escape_default(self, f: |char|);\n+    fn escape_default(self) -> DefaultEscapedChars;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-8.\n@@ -351,38 +355,23 @@ impl Char for char {\n     fn from_u32(i: u32) -> Option<char> { from_u32(i) }\n \n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn escape_unicode(self, f: |char|) {\n-        // avoid calling str::to_str_radix because we don't really need to allocate\n-        // here.\n-        f('\\\\');\n-        let pad = match () {\n-            _ if self <= '\\xff'    => { f('x'); 2 }\n-            _ if self <= '\\uffff'  => { f('u'); 4 }\n-            _                   => { f('U'); 8 }\n-        };\n-        for offset in range_step::<i32>(4 * (pad - 1), -1, -4) {\n-            let offset = offset as uint;\n-            unsafe {\n-                match ((self as i32) >> offset) & 0xf {\n-                    i @ 0 ... 9 => { f(transmute('0' as i32 + i)); }\n-                    i => { f(transmute('a' as i32 + (i - 10))); }\n-                }\n-            }\n-        }\n+    fn escape_unicode(self) -> UnicodeEscapedChars {\n+        UnicodeEscapedChars { c: self, state: UnicodeEscapedCharsState::Backslash }\n     }\n \n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn escape_default(self, f: |char|) {\n-        match self {\n-            '\\t' => { f('\\\\'); f('t'); }\n-            '\\r' => { f('\\\\'); f('r'); }\n-            '\\n' => { f('\\\\'); f('n'); }\n-            '\\\\' => { f('\\\\'); f('\\\\'); }\n-            '\\'' => { f('\\\\'); f('\\''); }\n-            '\"'  => { f('\\\\'); f('\"'); }\n-            '\\x20' ... '\\x7e' => { f(self); }\n-            _ => self.escape_unicode(f),\n-        }\n+    fn escape_default(self) -> DefaultEscapedChars {\n+        let init_state = match self {\n+            '\\t' => DefaultEscapedCharsState::Backslash('t'),\n+            '\\r' => DefaultEscapedCharsState::Backslash('r'),\n+            '\\n' => DefaultEscapedCharsState::Backslash('n'),\n+            '\\\\' => DefaultEscapedCharsState::Backslash('\\\\'),\n+            '\\'' => DefaultEscapedCharsState::Backslash('\\''),\n+            '\"'  => DefaultEscapedCharsState::Backslash('\"'),\n+            '\\x20' ... '\\x7e' => DefaultEscapedCharsState::Char(self),\n+            _ => DefaultEscapedCharsState::Unicode(self.escape_unicode())\n+        };\n+        DefaultEscapedChars { state: init_state }\n     }\n \n     #[inline]\n@@ -456,3 +445,75 @@ impl Char for char {\n         }\n     }\n }\n+\n+/// An iterator over the characters that represent a `char`, as escaped by\n+/// Rust's unicode escaping rules.\n+pub struct UnicodeEscapedChars {\n+    c: char,\n+    state: UnicodeEscapedCharsState\n+}\n+\n+enum UnicodeEscapedCharsState {\n+    Backslash,\n+    Type,\n+    Value(RangeStep<i32>),\n+}\n+\n+impl Iterator<char> for UnicodeEscapedChars {\n+    fn next(&mut self) -> Option<char> {\n+        match self.state {\n+            UnicodeEscapedCharsState::Backslash => {\n+                self.state = UnicodeEscapedCharsState::Type;\n+                Some('\\\\')\n+            }\n+            UnicodeEscapedCharsState::Type => {\n+                let (typechar, pad) = if self.c <= '\\x7f' { ('x', 2) }\n+                                      else if self.c <= '\\uffff' { ('u', 4) }\n+                                      else { ('U', 8) };\n+                self.state = UnicodeEscapedCharsState::Value(range_step(4 * (pad - 1), -1, -4i32));\n+                Some(typechar)\n+            }\n+            UnicodeEscapedCharsState::Value(ref mut range_step) => match range_step.next() {\n+                Some(offset) => {\n+                    let offset = offset as uint;\n+                    let v = match ((self.c as i32) >> offset) & 0xf {\n+                        i @ 0 ... 9 => '0' as i32 + i,\n+                        i => 'a' as i32 + (i - 10)\n+                    };\n+                    Some(unsafe { transmute(v) })\n+                }\n+                None => None\n+            }\n+        }\n+    }\n+}\n+\n+/// An iterator over the characters that represent a `char`, escaped\n+/// for maximum portability.\n+pub struct DefaultEscapedChars {\n+    state: DefaultEscapedCharsState\n+}\n+\n+enum DefaultEscapedCharsState {\n+    Backslash(char),\n+    Char(char),\n+    Done,\n+    Unicode(UnicodeEscapedChars),\n+}\n+\n+impl Iterator<char> for DefaultEscapedChars {\n+    fn next(&mut self) -> Option<char> {\n+        match self.state {\n+            DefaultEscapedCharsState::Backslash(c) => {\n+                self.state = DefaultEscapedCharsState::Char(c);\n+                Some('\\\\')\n+            }\n+            DefaultEscapedCharsState::Char(c) => {\n+                self.state = DefaultEscapedCharsState::Done;\n+                Some(c)\n+            }\n+            DefaultEscapedCharsState::Done => None,\n+            DefaultEscapedCharsState::Unicode(ref mut iter) => iter.next()\n+        }\n+    }\n+}"}, {"sha": "3ad546edf8de2d7b0225504cd6a73e501b5d67aa", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -431,7 +431,7 @@ impl<'a> LabelText<'a> {\n             // not escaping \\\\, since Graphviz escString needs to\n             // interpret backslashes; see EscStr above.\n             '\\\\' => f(c),\n-            _ => c.escape_default(f)\n+            _ => for c in c.escape_default() { f(c) }\n         }\n     }\n     fn escape_str(s: &str) -> String {"}, {"sha": "6a8074b99585cacfa97d4a684e30122fa186f82b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -262,7 +262,7 @@ pub fn sanitize(s: &str) -> String {\n \n             _ => {\n                 let mut tstr = String::new();\n-                char::escape_unicode(c, |c| tstr.push(c));\n+                for c in c.escape_unicode() { tstr.push(c) }\n                 result.push('$');\n                 result.push_str(tstr.as_slice().slice_from(1));\n             }"}, {"sha": "52aab752c57612087510094eff830c8550516e09", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -2033,9 +2033,9 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n         ast::LitBinary(ref data) => format!(\"{}\", data),\n         ast::LitByte(b) => {\n             let mut res = String::from_str(\"b'\");\n-            (b as char).escape_default(|c| {\n+            for c in (b as char).escape_default() {\n                 res.push(c);\n-            });\n+            }\n             res.push('\\'');\n             res\n         },"}, {"sha": "4c759cfc4fd0abbd6ea5820b7e05ffa06176c180", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -193,7 +193,7 @@ impl<'a> StringReader<'a> {\n     fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> ! {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        char::escape_default(c, |c| m.push(c));\n+        for c in c.escape_default() { m.push(c) }\n         self.fatal_span_(from_pos, to_pos, m.as_slice());\n     }\n \n@@ -202,7 +202,7 @@ impl<'a> StringReader<'a> {\n     fn err_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        char::escape_default(c, |c| m.push(c));\n+        for c in c.escape_default() { m.push(c) }\n         self.err_span_(from_pos, to_pos, m.as_slice());\n     }\n "}, {"sha": "4ce0d74bd37f4e965e83cf282c8856a8ddcf2671", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad246160451aacc2f7a707c028bdf44e77ad38d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aad246160451aacc2f7a707c028bdf44e77ad38d", "patch": "@@ -2756,7 +2756,9 @@ impl<'a> State<'a> {\n             }\n             ast::LitChar(ch) => {\n                 let mut res = String::from_str(\"'\");\n-                ch.escape_default(|c| res.push(c));\n+                for c in ch.escape_default() {\n+                    res.push(c);\n+                }\n                 res.push('\\'');\n                 word(&mut self.s, res.as_slice())\n             }"}]}