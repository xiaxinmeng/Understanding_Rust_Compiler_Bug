{"sha": "f2c95021855f6a2a54238d0c90cc3a6420d66d69", "node_id": "C_kwDOAAsO6NoAKGYyYzk1MDIxODU1ZjZhMmE1NDIzOGQwYzkwY2MzYTY0MjBkNjZkNjk", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-10-27T19:58:34Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-12-03T20:59:34Z"}, "message": "support nonzero* niche optimizations", "tree": {"sha": "1daef8fc01e1732c7a80f4af046b0a1ce5949e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1daef8fc01e1732c7a80f4af046b0a1ce5949e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c95021855f6a2a54238d0c90cc3a6420d66d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c95021855f6a2a54238d0c90cc3a6420d66d69", "html_url": "https://github.com/rust-lang/rust/commit/f2c95021855f6a2a54238d0c90cc3a6420d66d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c95021855f6a2a54238d0c90cc3a6420d66d69/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b5b609f11054fbb4dffb2e934074081d4c0bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b5b609f11054fbb4dffb2e934074081d4c0bde", "html_url": "https://github.com/rust-lang/rust/commit/86b5b609f11054fbb4dffb2e934074081d4c0bde"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "9244353f3aee7b59697c3b635404a259fa6923e8", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=f2c95021855f6a2a54238d0c90cc3a6420d66d69", "patch": "@@ -4,6 +4,7 @@ use std::{\n     cmp::{self, Ordering},\n     iter,\n     num::NonZeroUsize,\n+    ops::Bound,\n };\n \n use chalk_ir::TyKind;\n@@ -18,6 +19,8 @@ use hir_def::{\n };\n use la_arena::{ArenaMap, RawIdx};\n \n+struct X(Option<NonZeroUsize>);\n+\n use crate::{\n     db::HirDatabase,\n     lang_items::is_unsafe_cell,\n@@ -137,7 +140,38 @@ pub fn layout_of_adt_query(\n                 Abi::Aggregate { sized: _ } => {}\n             }\n             st.largest_niche = None;\n+            return Ok(st);\n+        }\n+\n+        let (start, end) = layout_scalar_valid_range(db, def);\n+        match st.abi {\n+            Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {\n+                if let Bound::Included(start) = start {\n+                    let valid_range = scalar.valid_range_mut();\n+                    valid_range.start = start;\n+                }\n+                if let Bound::Included(end) = end {\n+                    let valid_range = scalar.valid_range_mut();\n+                    valid_range.end = end;\n+                }\n+                // Update `largest_niche` if we have introduced a larger niche.\n+                let niche = Niche::from_scalar(dl, Size::ZERO, *scalar);\n+                if let Some(niche) = niche {\n+                    match st.largest_niche {\n+                        Some(largest_niche) => {\n+                            // Replace the existing niche even if they're equal,\n+                            // because this one is at a lower offset.\n+                            if largest_niche.available(dl) <= niche.available(dl) {\n+                                st.largest_niche = Some(niche);\n+                            }\n+                        }\n+                        None => st.largest_niche = Some(niche),\n+                    }\n+                }\n+            }\n+            _ => user_error!(\"nonscalar layout for layout_scalar_valid_range\"),\n         }\n+\n         return Ok(st);\n     }\n \n@@ -591,6 +625,22 @@ pub fn layout_of_adt_query(\n     Ok(best_layout.layout)\n }\n \n+fn layout_scalar_valid_range(db: &dyn HirDatabase, def: AdtId) -> (Bound<u128>, Bound<u128>) {\n+    let attrs = db.attrs(def.into());\n+    let get = |name| {\n+        let attr = attrs.by_key(name).tt_values();\n+        for tree in attr {\n+            if let Some(x) = tree.token_trees.first() {\n+                if let Ok(x) = x.to_string().parse() {\n+                    return Bound::Included(x);\n+                }\n+            }\n+        }\n+        Bound::Unbounded\n+    };\n+    (get(\"rustc_layout_scalar_valid_range_start\"), get(\"rustc_layout_scalar_valid_range_end\"))\n+}\n+\n pub fn layout_of_adt_recover(\n     _: &dyn HirDatabase,\n     _: &[String],"}, {"sha": "1cd6d4eae24a6adab6cf481e8a1faa981157786f", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=f2c95021855f6a2a54238d0c90cc3a6420d66d69", "patch": "@@ -146,6 +146,19 @@ fn tuple() {\n     }\n }\n \n+#[test]\n+fn non_zero() {\n+    check_size_and_align(\n+        r#\"\n+    //- minicore: non_zero, option\n+    use core::num::NonZeroU8;\n+    struct Goal(Option<NonZeroU8>);\n+    \"#,\n+        1,\n+        1,\n+    );\n+}\n+\n #[test]\n fn niche_optimization() {\n     check_size_and_align("}, {"sha": "af9efd2600e640b937f925425cfe1e111f22cd65", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c95021855f6a2a54238d0c90cc3a6420d66d69/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=f2c95021855f6a2a54238d0c90cc3a6420d66d69", "patch": "@@ -29,6 +29,7 @@\n //!     index: sized\n //!     iterator: option\n //!     iterators: iterator, fn\n+//!     non_zero:\n //!     option:\n //!     ord: eq, option\n //!     pin:\n@@ -680,6 +681,15 @@ mod macros {\n }\n // endregion:derive\n \n+// region:non_zero\n+pub mod num {\n+    #[repr(transparent)]\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    #[rustc_nonnull_optimization_guaranteed]\n+    pub struct NonZeroU8(u8);\n+}\n+// endregion:non_zero\n+\n // region:bool_impl\n #[lang = \"bool\"]\n impl bool {"}]}