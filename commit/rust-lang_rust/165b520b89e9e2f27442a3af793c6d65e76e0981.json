{"sha": "165b520b89e9e2f27442a3af793c6d65e76e0981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NWI1MjBiODllOWUyZjI3NDQyYTNhZjc5M2M2ZDY1ZTc2ZTA5ODE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-08T01:44:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-08T01:44:30Z"}, "message": "Rollup merge of #86812 - FabianWolff:recover-dyn-mut, r=petrochenkov\n\nRecover from `&dyn mut ...` parse errors\n\nConsider this example:\n```rust\nfn main() {\n    let r: &dyn mut Trait;\n}\n```\nThis currently leads to:\n```\nerror: expected one of `!`, `(`, `;`, `=`, `?`, `for`, lifetime, or path, found keyword `mut`\n --> src/main.rs:2:17\n  |\n2 |     let r: &dyn mut Trait;\n  |                 ^^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n```\nHowever, especially for beginners, I think it is easy to get `&dyn mut` and `&mut dyn` confused. With my changes, I get a help message, and the parser even recovers:\n```\nerror: `mut` must precede `dyn`\n --> test.rs:2:12\n  |\n2 |     let r: &dyn mut Trait;\n  |            ^^^^^^^^ help: place `mut` before `dyn`: `&mut dyn`\n\nerror[E0405]: cannot find trait `Trait` in this scope\n --> test.rs:2:21\n  |\n2 |     let r: &dyn mut Trait;\n  |                     ^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n```", "tree": {"sha": "97a89bf075041462d6449adda57b31dfdaf2b55b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97a89bf075041462d6449adda57b31dfdaf2b55b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165b520b89e9e2f27442a3af793c6d65e76e0981", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5lh+CRBK7hj4Ov3rIwAAVEwIAFFBj5QDbno/ScA0rLJZrVim\nVaolPmWv6JwCLvnelmO9oNKBAwi6mqcetkULk9ybD9PjyhwO4Xvlh4welGA/5La4\nnSp9lSZSaXYSlarjGthaEqPPCw9ZyuFVE94X4TqKTm96JpYOmmblLLyhzvkfVrJ0\n6EueDKGjxxWAk3wb5YnXV+e4Hr56s5eGf6r7LPe4fB94+6bn+VI0dQUWiIMdg+G4\njI86L7+oRBzCo4LupR3XB1/pLF3m8fB26JnLt4Ld+V3zB98JRY3NQkKy+uTDDNx2\n2oqxFTyUMZYaIqMKMxQaqfyZA5BAN9cp3UbD0dwXXhNMdf1Ky02Bji3SsaB9JUo=\n=u4i9\n-----END PGP SIGNATURE-----\n", "payload": "tree 97a89bf075041462d6449adda57b31dfdaf2b55b\nparent c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea\nparent c692896ba27adc1c14941593349c76bd27e189f5\nauthor Yuki Okushi <jtitor@2k36.org> 1625708670 +0900\ncommitter GitHub <noreply@github.com> 1625708670 +0900\n\nRollup merge of #86812 - FabianWolff:recover-dyn-mut, r=petrochenkov\n\nRecover from `&dyn mut ...` parse errors\n\nConsider this example:\n```rust\nfn main() {\n    let r: &dyn mut Trait;\n}\n```\nThis currently leads to:\n```\nerror: expected one of `!`, `(`, `;`, `=`, `?`, `for`, lifetime, or path, found keyword `mut`\n --> src/main.rs:2:17\n  |\n2 |     let r: &dyn mut Trait;\n  |                 ^^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n```\nHowever, especially for beginners, I think it is easy to get `&dyn mut` and `&mut dyn` confused. With my changes, I get a help message, and the parser even recovers:\n```\nerror: `mut` must precede `dyn`\n --> test.rs:2:12\n  |\n2 |     let r: &dyn mut Trait;\n  |            ^^^^^^^^ help: place `mut` before `dyn`: `&mut dyn`\n\nerror[E0405]: cannot find trait `Trait` in this scope\n --> test.rs:2:21\n  |\n2 |     let r: &dyn mut Trait;\n  |                     ^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165b520b89e9e2f27442a3af793c6d65e76e0981", "html_url": "https://github.com/rust-lang/rust/commit/165b520b89e9e2f27442a3af793c6d65e76e0981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165b520b89e9e2f27442a3af793c6d65e76e0981/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "html_url": "https://github.com/rust-lang/rust/commit/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea"}, {"sha": "c692896ba27adc1c14941593349c76bd27e189f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c692896ba27adc1c14941593349c76bd27e189f5", "html_url": "https://github.com/rust-lang/rust/commit/c692896ba27adc1c14941593349c76bd27e189f5"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "1fbf01b1b97d55ad5b3e300a2f1498d2fd7c3791", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/165b520b89e9e2f27442a3af793c6d65e76e0981/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165b520b89e9e2f27442a3af793c6d65e76e0981/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=165b520b89e9e2f27442a3af793c6d65e76e0981", "patch": "@@ -393,7 +393,7 @@ impl<'a> Parser<'a> {\n         let and_span = self.prev_token.span;\n         let mut opt_lifetime =\n             if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n-        let mutbl = self.parse_mutability();\n+        let mut mutbl = self.parse_mutability();\n         if self.token.is_lifetime() && mutbl == Mutability::Mut && opt_lifetime.is_none() {\n             // A lifetime is invalid here: it would be part of a bare trait bound, which requires\n             // it to be followed by a plus, but we disallow plus in the pointee type.\n@@ -417,6 +417,26 @@ impl<'a> Parser<'a> {\n \n                 opt_lifetime = Some(self.expect_lifetime());\n             }\n+        } else if self.token.is_keyword(kw::Dyn)\n+            && mutbl == Mutability::Not\n+            && self.look_ahead(1, |t| t.is_keyword(kw::Mut))\n+        {\n+            // We have `&dyn mut ...`, which is invalid and should be `&mut dyn ...`.\n+            let span = and_span.to(self.look_ahead(1, |t| t.span));\n+            let mut err = self.struct_span_err(span, \"`mut` must precede `dyn`\");\n+            err.span_suggestion(\n+                span,\n+                \"place `mut` before `dyn`\",\n+                \"&mut dyn\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+            err.emit();\n+\n+            // Recovery\n+            mutbl = Mutability::Mut;\n+            let (dyn_tok, dyn_tok_sp) = (self.token.clone(), self.token_spacing);\n+            self.bump();\n+            self.bump_with((dyn_tok, dyn_tok_sp));\n         }\n         let ty = self.parse_ty_no_plus()?;\n         Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))"}, {"sha": "3016275cc0fd2933bb4000bd4094843af1b6c856", "filename": "src/test/ui/parser/recover-ref-dyn-mut.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/165b520b89e9e2f27442a3af793c6d65e76e0981/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165b520b89e9e2f27442a3af793c6d65e76e0981/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs?ref=165b520b89e9e2f27442a3af793c6d65e76e0981", "patch": "@@ -0,0 +1,9 @@\n+// Test that the parser detects `&dyn mut`, offers a help message, and\n+// recovers.\n+\n+fn main() {\n+    let r: &dyn mut Trait;\n+    //~^ ERROR: `mut` must precede `dyn`\n+    //~| HELP: place `mut` before `dyn`\n+    //~| ERROR: cannot find trait `Trait` in this scope [E0405]\n+}"}, {"sha": "c048c8ea1b0dd581841bc37d1bd40082eab2e8f5", "filename": "src/test/ui/parser/recover-ref-dyn-mut.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/165b520b89e9e2f27442a3af793c6d65e76e0981/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165b520b89e9e2f27442a3af793c6d65e76e0981/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr?ref=165b520b89e9e2f27442a3af793c6d65e76e0981", "patch": "@@ -0,0 +1,15 @@\n+error: `mut` must precede `dyn`\n+  --> $DIR/recover-ref-dyn-mut.rs:5:12\n+   |\n+LL |     let r: &dyn mut Trait;\n+   |            ^^^^^^^^ help: place `mut` before `dyn`: `&mut dyn`\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/recover-ref-dyn-mut.rs:5:21\n+   |\n+LL |     let r: &dyn mut Trait;\n+   |                     ^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}]}