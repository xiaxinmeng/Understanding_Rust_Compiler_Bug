{"sha": "910ec6d97ff03549c22352d7763be02b60d73470", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGVjNmQ5N2ZmMDM1NDljMjIzNTJkNzc2M2JlMDJiNjBkNzM0NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-21T15:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-21T15:56:32Z"}, "message": "Auto merge of #56118 - steveklabnik:update-books, r=alexcrichton\n\nUpdate books for Rust 2018\n\nThis PR:\n\n1. updates all of the books\n    * I don't know if @Gankro has further plans for the nomicon or not\n2. updates the build process because TRPL is only distributing one edition now\n3. fixes up the stdlib links\n\nI think that this passes but it's 3:20 am and so I'm sending it in and will fix up anything i missed in the morning.\n\n/cc @alexcrichton for the big beta backport", "tree": {"sha": "998378180d691dfcf2b2f69a317e3515351b4566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998378180d691dfcf2b2f69a317e3515351b4566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910ec6d97ff03549c22352d7763be02b60d73470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910ec6d97ff03549c22352d7763be02b60d73470", "html_url": "https://github.com/rust-lang/rust/commit/910ec6d97ff03549c22352d7763be02b60d73470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910ec6d97ff03549c22352d7763be02b60d73470/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7bb94044bbdc1689cd29fcc585dd7d49a2672e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7bb94044bbdc1689cd29fcc585dd7d49a2672e", "html_url": "https://github.com/rust-lang/rust/commit/ee7bb94044bbdc1689cd29fcc585dd7d49a2672e"}, {"sha": "d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "html_url": "https://github.com/rust-lang/rust/commit/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d"}], "stats": {"total": 111, "additions": 49, "deletions": 62}, "files": [{"sha": "f9b19ffb10d69bfe2454e7184fddb5588bf68b8b", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -260,22 +260,31 @@ impl Step for TheBook {\n         let compiler = self.compiler;\n         let target = self.target;\n         let name = self.name;\n-        // build book first edition\n+\n+        // build book\n         builder.ensure(Rustbook {\n             target,\n-            name: INTERNER.intern_string(format!(\"{}/first-edition\", name)),\n+            name: INTERNER.intern_string(name.to_string()),\n         });\n \n-        // build book second edition\n+        // building older edition redirects\n+\n+        let source_name = format!(\"{}/first-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n-            name: INTERNER.intern_string(format!(\"{}/second-edition\", name)),\n+            name: INTERNER.intern_string(source_name),\n         });\n \n-        // build book 2018 edition\n+        let source_name = format!(\"{}/second-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n-            name: INTERNER.intern_string(format!(\"{}/2018-edition\", name)),\n+            name: INTERNER.intern_string(source_name),\n+        });\n+\n+        let source_name = format!(\"{}/2018-edition\", name);\n+        builder.ensure(Rustbook {\n+            target,\n+            name: INTERNER.intern_string(source_name),\n         });\n \n         // build the version info page and CSS\n@@ -284,11 +293,6 @@ impl Step for TheBook {\n             target,\n         });\n \n-        // build the index page\n-        let index = format!(\"{}/index.md\", name);\n-        builder.info(&format!(\"Documenting book index ({})\", target));\n-        invoke_rustdoc(builder, compiler, target, &index);\n-\n         // build the redirect pages\n         builder.info(&format!(\"Documenting book redirect pages ({})\", target));\n         for file in t!(fs::read_dir(builder.src.join(\"src/doc/book/redirects\"))) {"}, {"sha": "616fe4172b688393aeee5f34935cc25733c9c062", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -1 +1 @@\n-Subproject commit e871c4598925594421d63e929fee292e6e071f97\n+Subproject commit 616fe4172b688393aeee5f34935cc25733c9c062"}, {"sha": "f8a4e96feb2e5a6ed1ef170ad40e3509a7755cb4", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -1 +1 @@\n-Subproject commit 7f7a597b47ed6c35c2a0f0ee6a69050fe2d5e013\n+Subproject commit f8a4e96feb2e5a6ed1ef170ad40e3509a7755cb4"}, {"sha": "60077efda319c95a89fe39609803c5433567adbf", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -1 +1 @@\n-Subproject commit b9fb838054b8441223c22eeae5b6d8e498071cd0\n+Subproject commit 60077efda319c95a89fe39609803c5433567adbf"}, {"sha": "2ce92beabb912d417a7314d6da83ac9b50dc2afb", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -1 +1 @@\n-Subproject commit bc342a475c09b6df8004d518382e6d5b6bcb49f7\n+Subproject commit 2ce92beabb912d417a7314d6da83ac9b50dc2afb"}, {"sha": "870158200dee90aa9c2787bed74d71e60cff9365", "filename": "src/doc/unstable-book/src/language-features/macro-literal-matcher.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -4,14 +4,14 @@ The tracking issue for this feature is: [#35625]\n \n The RFC is: [rfc#1576].\n \n-With this feature gate enabled, the [list of fragment specifiers][frags] gains one more entry:\n+With this feature gate enabled, the [list of designators] gains one more entry:\n \n * `literal`: a literal. Examples: 2, \"string\", 'c'\n \n A `literal` may be followed by anything, similarly to the `ident` specifier.\n \n [rfc#1576]: http://rust-lang.github.io/rfcs/1576-macros-literal-matcher.html\n [#35625]: https://github.com/rust-lang/rust/issues/35625\n-[frags]: ../book/first-edition/macros.html#syntactic-requirements\n+[list of designators]: ../reference/macros-by-example.html\n \n ------------------------"}, {"sha": "74bdd4dc3b5993e4e06d5c2765af977c6fa71538", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -137,8 +137,6 @@ of extensions.  See `Registry::register_syntax_extension` and the\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](../book/first-edition/macros.html#debugging-macro-code) are applicable.\n-\n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:\n "}, {"sha": "705345ce963bb28f48aea4565cf6ecc855f4908f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -43,8 +43,8 @@\n //!\n //! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\n //! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\n-//! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are [associated\n-//! functions][assoc], called using function-like syntax:\n+//! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\n+//! functions, called using function-like syntax:\n //!\n //! ```\n //! use std::rc::Rc;\n@@ -234,7 +234,6 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4f4031e3c4e32a120f86f02fb950a0c36c2f107b", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -120,8 +120,8 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n-/// clashes with `T`'s methods, the methods of `Arc<T>` itself are [associated\n-/// functions][assoc], called using function-like syntax:\n+/// clashes with `T`'s methods, the methods of `Arc<T>` itself are associated\n+/// functions, called using function-like syntax:\n ///\n /// ```\n /// use std::sync::Arc;\n@@ -146,7 +146,6 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n /// [`RefCell<T>`]: ../../std/cell/struct.RefCell.html\n /// [`std::sync`]: ../../std/sync/index.html\n /// [`Arc::clone(&from)`]: #method.clone"}, {"sha": "160728f923dbcbac4fa5a65b67121c504c4119d7", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -19,7 +19,7 @@ use super::MAX;\n /// Converts a `u32` to a `char`.\n ///\n /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n-/// [`as`]:\n+/// `as`:\n ///\n /// ```\n /// let c = '\ud83d\udcaf';\n@@ -34,7 +34,6 @@ use super::MAX;\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked`].\n@@ -71,7 +70,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to a `char`, ignoring validity.\n ///\n /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n-/// [`as`]:\n+/// `as`:\n ///\n /// ```\n /// let c = '\ud83d\udcaf';\n@@ -86,7 +85,6 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// # Safety\n ///"}, {"sha": "fd4189ef50df54a9466ca3aa159f5692cd05506f", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -532,7 +532,7 @@ pub trait Iterator {\n     /// If you're doing some sort of looping for a side effect, it's considered\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n-    /// [`for`]: ../../book/first-edition/loops.html#for\n+    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n     ///\n     /// # Examples\n     ///\n@@ -580,7 +580,7 @@ pub trait Iterator {\n     /// cases `for_each` may also be faster than a loop, because it will use\n     /// internal iteration on adaptors like `Chain`.\n     ///\n-    /// [`for`]: ../../book/first-edition/loops.html#for\n+    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n     ///\n     /// # Examples\n     ///\n@@ -1669,7 +1669,7 @@ pub trait Iterator {\n     /// use a `for` loop with a list of things to build up a result. Those\n     /// can be turned into `fold()`s:\n     ///\n-    /// [`for`]: ../../book/first-edition/loops.html#for\n+    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n     ///\n     /// ```\n     /// let numbers = [1, 2, 3, 4, 5];"}, {"sha": "6b2d878b3e7b854b7ffc2585141e6af8bf4ccbe3", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -132,7 +132,6 @@ pub use intrinsics::transmute;\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n-/// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n /// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n@@ -479,7 +478,7 @@ pub const fn needs_drop<T>() -> bool {\n ///\n /// This has the same effect as allocating space with\n /// [`mem::uninitialized`][uninit] and then zeroing it out. It is useful for\n-/// [FFI] sometimes, but should generally be avoided.\n+/// FFI sometimes, but should generally be avoided.\n ///\n /// There is no guarantee that an all-zero byte-pattern represents a valid value of\n /// some type `T`. If `T` has a destructor and the value is destroyed (due to\n@@ -490,7 +489,6 @@ pub const fn needs_drop<T>() -> bool {\n /// many of the same caveats.\n ///\n /// [uninit]: fn.uninitialized.html\n-/// [FFI]: ../../book/first-edition/ffi.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n@@ -514,11 +512,9 @@ pub unsafe fn zeroed<T>() -> T {\n /// **This is incredibly dangerous and should not be done lightly. Deeply\n /// consider initializing your memory with a default value instead.**\n ///\n-/// This is useful for [FFI] functions and initializing arrays sometimes,\n+/// This is useful for FFI functions and initializing arrays sometimes,\n /// but should generally be avoided.\n ///\n-/// [FFI]: ../../book/first-edition/ffi.html\n-///\n /// # Undefined behavior\n ///\n /// It is [undefined behavior][ub] to read uninitialized memory, even just an\n@@ -689,10 +685,9 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// While this does call the argument's implementation of [`Drop`][drop],\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n-/// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/first-edition/ownership.html#copy-types),\n-/// e.g. integers. Such values are copied and _then_ moved into the function,\n-/// so the value persists after this function call.\n+/// This effectively does nothing for types which implement `Copy`, e.g.\n+/// integers. Such values are copied and _then_ moved into the function, so the\n+/// value persists after this function call.\n ///\n /// This function is not magic; it is literally defined as\n ///"}, {"sha": "e9cf11424cae1bd6a24f3ea9875c73e9de70e211", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -58,7 +58,7 @@\n //! [`NonNull::dangling`] in such cases.\n //!\n //! [aliasing]: ../../nomicon/aliasing.html\n-//! [book]: ../../book/second-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n+//! [book]: ../../book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n //! [ub]: ../../reference/behavior-considered-undefined.html\n //! [null]: ./fn.null.html\n //! [zst]: ../../nomicon/exotic-sizes.html#zero-sized-types-zsts"}, {"sha": "495b9afe86023ef6c06b3b615680ad5afc174c91", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -21,11 +21,7 @@\n /// The representation of a trait object like `&SomeTrait`.\n ///\n /// This struct has the same layout as types like `&SomeTrait` and\n-/// `Box<AnotherTrait>`. The [Trait Objects chapter of the\n-/// Book][moreinfo] contains more details about the precise nature of\n-/// these internals.\n-///\n-/// [moreinfo]: ../../book/first-edition/trait-objects.html#representation\n+/// `Box<AnotherTrait>`.\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "575903d576a23552b09d592fbb0301e6ffac1917", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -185,7 +185,7 @@\n //! [slice]: primitive.slice.html\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n-//! [`for`]: ../book/first-edition/loops.html#for\n+//! [`for`]: ../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n //! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n@@ -200,14 +200,14 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/first-edition/crates-and-modules.html#importing-modules-with-use\n-//! [crate root]: ../book/first-edition/crates-and-modules.html#basic-terminology-crates-and-modules\n+//! [`use`]: ../book/ch07-02-modules-and-use-to-control-scope-and-privacy.html#the-use-keyword-to-bring-paths-into-a-scope\n+//! [crate root]: ../book/ch07-01-packages-and-crates-for-making-libraries-and-executables.html\n //! [crates.io]: https://crates.io\n-//! [deref-coercions]: ../book/second-edition/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n+//! [deref-coercions]: ../book/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n //! [files]: fs/struct.File.html\n //! [multithreading]: thread/index.html\n //! [other]: #what-is-in-the-standard-library-documentation\n-//! [primitive types]: ../book/first-edition/primitive-types.html\n+//! [primitive types]: ../book/ch03-02-data-types.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "0995ab3c373ca19fc84b82db8b2950de194e78b2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -32,7 +32,7 @@\n ///\n /// [`Result`] enum is often a better solution for recovering from errors than\n /// using the `panic!` macro.  This macro should be used to avoid proceeding using\n-/// incorrect values, such as from external sources.  Detailed information about\n+/// incorrect values, such as from external sources. Detailed information about\n /// error handling is found in the [book].\n ///\n /// The multi-argument form of this macro panics with a string and has the\n@@ -45,7 +45,7 @@\n /// [`Result`]: ../std/result/enum.Result.html\n /// [`format!`]: ../std/macro.format.html\n /// [`compile_error!`]: ../std/macro.compile_error.html\n-/// [book]: ../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html\n+/// [book]: ../book/ch09-00-error-handling.html\n ///\n /// # Current implementation\n ///\n@@ -839,8 +839,8 @@ mod builtin {\n     /// boolean expression evaluation of configuration flags. This frequently\n     /// leads to less duplicated code.\n     ///\n-    /// The syntax given to this macro is the same syntax as [the `cfg`\n-    /// attribute](../book/first-edition/conditional-compilation.html).\n+    /// The syntax given to this macro is the same syntax as the `cfg`\n+    /// attribute.\n     ///\n     /// # Examples\n     ///\n@@ -915,7 +915,7 @@ mod builtin {\n     /// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n     /// violated could lead to unsafety.\n     ///\n-    /// Other use-cases of `assert!` include [testing] and enforcing run-time\n+    /// Other use-cases of `assert!` include testing and enforcing run-time\n     /// invariants in safe code (whose violation cannot result in unsafety).\n     ///\n     /// # Custom Messages\n@@ -926,7 +926,6 @@ mod builtin {\n     ///\n     /// [`panic!`]: macro.panic.html\n     /// [`debug_assert!`]: macro.debug_assert.html\n-    /// [testing]: ../book/second-edition/ch11-01-writing-tests.html#checking-results-with-the-assert-macro\n     /// [`std::fmt`]: ../std/fmt/index.html\n     ///\n     /// # Examples"}, {"sha": "48acc1096a6811494b721d3931e0cfd857fda393", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec6d97ff03549c22352d7763be02b60d73470/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=910ec6d97ff03549c22352d7763be02b60d73470", "patch": "@@ -22,7 +22,7 @@\n /// `bool` implements various traits, such as [`BitAnd`], [`BitOr`], [`Not`], etc.,\n /// which allow us to perform boolean operations using `&`, `|` and `!`.\n ///\n-/// [`if`] always demands a `bool` value. [`assert!`], being an important macro in testing,\n+/// `if` always demands a `bool` value. [`assert!`], being an important macro in testing,\n /// checks whether an expression returns `true`.\n ///\n /// ```\n@@ -31,7 +31,6 @@\n /// ```\n ///\n /// [`assert!`]: macro.assert.html\n-/// [`if`]: ../book/first-edition/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html\n /// [`Not`]: ops/trait.Not.html\n@@ -695,7 +694,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/first-edition/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/ch03-02-data-types.html#the-tuple-type).\n ///\n /// # Trait implementations\n ///"}]}