{"sha": "a265bc22f161c7399c5a35835305d2dacf24753a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNjViYzIyZjE2MWM3Mzk5YzVhMzU4MzUzMDVkMmRhY2YyNDc1M2E=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T21:25:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-17T21:37:13Z"}, "message": "HashStable_Generic for libsyntax_pos.", "tree": {"sha": "798f0e79b411f066fb9143db48e25f26893a4286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798f0e79b411f066fb9143db48e25f26893a4286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a265bc22f161c7399c5a35835305d2dacf24753a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a265bc22f161c7399c5a35835305d2dacf24753a", "html_url": "https://github.com/rust-lang/rust/commit/a265bc22f161c7399c5a35835305d2dacf24753a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a265bc22f161c7399c5a35835305d2dacf24753a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a67986eb6970f5ec1d4df8e409f04397568935b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a67986eb6970f5ec1d4df8e409f04397568935b", "html_url": "https://github.com/rust-lang/rust/commit/2a67986eb6970f5ec1d4df8e409f04397568935b"}], "stats": {"total": 66, "additions": 12, "deletions": 54}, "files": [{"sha": "42d6576ba6de4f539739dcd315549a94d7b530f3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a265bc22f161c7399c5a35835305d2dacf24753a", "patch": "@@ -40,11 +40,6 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Unadjusted\n });\n \n-impl_stable_hash_for!(enum ::syntax::edition::Edition {\n-    Edition2015,\n-    Edition2018,\n-});\n-\n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n@@ -222,12 +217,6 @@ impl_stable_hash_for!(enum ::syntax::ast::MetaItemKind {\n     NameValue(lit)\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::Transparency {\n-    Transparent,\n-    SemiTransparent,\n-    Opaque,\n-});\n-\n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnData {\n     kind,\n     parent -> _,\n@@ -239,43 +228,6 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnData {\n     edition\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnKind {\n-    Root,\n-    Macro(kind, descr),\n-    AstPass(kind),\n-    Desugaring(kind)\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::AstPass {\n-    StdImports,\n-    TestHarness,\n-    ProcMacroHarness,\n-    PluginMacroDefs,\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::DesugaringKind {\n-    CondTemporary,\n-    Async,\n-    Await,\n-    QuestionMark,\n-    OpaqueTy,\n-    ForLoop,\n-    TryBlock\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::FileName {\n-    Real(pb),\n-    Macros(s),\n-    QuoteExpansion(s),\n-    Anon(s),\n-    MacroExpansion(s),\n-    ProcMacroSourceCode(s),\n-    CliCrateAttr(s),\n-    CfgSpec(s),\n-    Custom(s),\n-    DocTest(pb, line),\n-});\n-\n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let SourceFile {"}, {"sha": "727aad546f5f12d4661a730b440916534afd9367", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=a265bc22f161c7399c5a35835305d2dacf24753a", "patch": "@@ -2,8 +2,11 @@ use crate::symbol::{Symbol, sym};\n use std::fmt;\n use std::str::FromStr;\n \n+use rustc_macros::HashStable_Generic;\n+\n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug,\n+         RustcEncodable, RustcDecodable, Eq, HashStable_Generic)]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest\n "}, {"sha": "eb420454f03d324cd8385720bc529a9a988d5752", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=a265bc22f161c7399c5a35835305d2dacf24753a", "patch": "@@ -59,7 +59,8 @@ pub struct ExpnId(u32);\n \n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n@@ -684,7 +685,7 @@ impl ExpnData {\n }\n \n /// Expansion kind.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,\n@@ -744,7 +745,7 @@ impl MacroKind {\n }\n \n /// The kind of AST transform.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum AstPass {\n     StdImports,\n     TestHarness,\n@@ -764,7 +765,7 @@ impl AstPass {\n }\n \n /// The kind of compiler desugaring.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum DesugaringKind {\n     /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.\n     /// However, we do not want to blame `c` for unreachability but rather say that `i`"}, {"sha": "720ace90324b9580879f6242da8c9ecb1ca68f5c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a265bc22f161c7399c5a35835305d2dacf24753a/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=a265bc22f161c7399c5a35835305d2dacf24753a", "patch": "@@ -15,6 +15,7 @@\n #![feature(step_trait)]\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_macros::HashStable_Generic;\n \n pub mod source_map;\n \n@@ -66,7 +67,8 @@ impl Globals {\n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n-#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash,\n+         RustcDecodable, RustcEncodable, HashStable_Generic)]\n pub enum FileName {\n     Real(PathBuf),\n     /// A macro. This includes the full name of the macro, so that there are no clashes."}]}