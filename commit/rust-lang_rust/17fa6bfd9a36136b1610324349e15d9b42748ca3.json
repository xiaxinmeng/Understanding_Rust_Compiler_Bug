{"sha": "17fa6bfd9a36136b1610324349e15d9b42748ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZmE2YmZkOWEzNjEzNmIxNjEwMzI0MzQ5ZTE1ZDliNDI3NDhjYTM=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-07-28T06:51:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-29T03:30:28Z"}, "message": "Change _unit_sz to unit_sz and make public in circular_buffer.", "tree": {"sha": "c5728e74f0aa1db3326800f840542ff7c99fd20d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5728e74f0aa1db3326800f840542ff7c99fd20d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17fa6bfd9a36136b1610324349e15d9b42748ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17fa6bfd9a36136b1610324349e15d9b42748ca3", "html_url": "https://github.com/rust-lang/rust/commit/17fa6bfd9a36136b1610324349e15d9b42748ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17fa6bfd9a36136b1610324349e15d9b42748ca3/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60b0486c11f3c88e0a9aa13986ea338a54468bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/60b0486c11f3c88e0a9aa13986ea338a54468bca", "html_url": "https://github.com/rust-lang/rust/commit/60b0486c11f3c88e0a9aa13986ea338a54468bca"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "fd38985049378e9f6e6cb3d2c595ab86a5d6b351", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17fa6bfd9a36136b1610324349e15d9b42748ca3/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/17fa6bfd9a36136b1610324349e15d9b42748ca3/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=17fa6bfd9a36136b1610324349e15d9b42748ca3", "patch": "@@ -14,8 +14,8 @@ is_power_of_two(size_t value) {\n \n circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n     dom(dom),\n+    unit_sz(unit_sz),\n     _buffer_sz(INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * unit_sz),\n-    _unit_sz(unit_sz),\n     _next(0),\n     _unread(0),\n     _buffer((uint8_t *)dom->calloc(_buffer_sz)) {\n@@ -47,8 +47,8 @@ circular_buffer::transfer(void *dst) {\n     I(dom, dst);\n     I(dom, is_power_of_two(_buffer_sz));\n     uint8_t *ptr = (uint8_t *) dst;\n-    for (size_t i = 0; i < _unread; i += _unit_sz) {\n-        memcpy(&ptr[i], &_buffer[(_next + i) & (_buffer_sz - 1)], _unit_sz);\n+    for (size_t i = 0; i < _unread; i += unit_sz) {\n+        memcpy(&ptr[i], &_buffer[(_next + i) & (_buffer_sz - 1)], unit_sz);\n     }\n }\n \n@@ -74,16 +74,16 @@ circular_buffer::enqueue(void *src) {\n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer enqueue \"\n              \"unread: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _buffer_sz, _unit_sz);\n+             _unread, _buffer_sz, unit_sz);\n \n     I(dom, is_power_of_two(_buffer_sz));\n     I(dom, _unread < _buffer_sz);\n-    I(dom, _unread + _unit_sz <= _buffer_sz);\n+    I(dom, _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n     size_t i = (_next + _unread) & (_buffer_sz - 1);\n-    memcpy(&_buffer[i], src, _unit_sz);\n-    _unread += _unit_sz;\n+    memcpy(&_buffer[i], src, unit_sz);\n+    _unread += unit_sz;\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer pushed data at index: %d\", i);\n@@ -95,24 +95,25 @@ circular_buffer::enqueue(void *src) {\n  */\n void\n circular_buffer::dequeue(void *dst) {\n-    I(dom, dst);\n-    I(dom, _unit_sz > 0);\n-    I(dom, _unread >= _unit_sz);\n+    I(dom, unit_sz > 0);\n+    I(dom, _unread >= unit_sz);\n     I(dom, _unread <= _buffer_sz);\n     I(dom, _buffer);\n \n-    memcpy(dst, &_buffer[_next], _unit_sz);\n+    if (dst != NULL) {\n+        memcpy(dst, &_buffer[_next], unit_sz);\n+    }\n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"shifted data from index %d\", _next);\n-    _unread -= _unit_sz;\n-    _next += _unit_sz;\n+    _unread -= unit_sz;\n+    _next += unit_sz;\n     I(dom, _next <= _buffer_sz);\n     if (_next == _buffer_sz) {\n         _next = 0;\n     }\n \n     // Shrink if possible.\n-    if (_buffer_sz >= INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * _unit_sz &&\n+    if (_buffer_sz >= INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * unit_sz &&\n         _unread <= _buffer_sz / 4) {\n         dom->log(rust_log::MEM | rust_log::COMM,\n                  \"circular_buffer is shrinking to %d bytes\", _buffer_sz / 2);"}, {"sha": "dc4160d8f33df0d5794dec24a9156571ca88c1fc", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17fa6bfd9a36136b1610324349e15d9b42748ca3/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/17fa6bfd9a36136b1610324349e15d9b42748ca3/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=17fa6bfd9a36136b1610324349e15d9b42748ca3", "patch": "@@ -12,6 +12,8 @@ circular_buffer : public dom_owned<circular_buffer> {\n \n public:\n     rust_dom *dom;\n+    // Size of the data unit in bytes.\n+    const size_t unit_sz;\n     circular_buffer(rust_dom *dom, size_t unit_sz);\n     ~circular_buffer();\n     void transfer(void *dst);\n@@ -25,9 +27,6 @@ circular_buffer : public dom_owned<circular_buffer> {\n     // (x & (_buffer_sz - 1)).\n     size_t _buffer_sz;\n \n-    // Size of the data unit in bytes.\n-    size_t _unit_sz;\n-\n     // Byte offset within the buffer where to read the next unit of data.\n     size_t _next;\n "}]}