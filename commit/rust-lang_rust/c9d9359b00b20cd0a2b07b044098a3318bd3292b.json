{"sha": "c9d9359b00b20cd0a2b07b044098a3318bd3292b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDkzNTliMDBiMjBjZDBhMmIwN2IwNDQwOThhMzMxOGJkMzI5MmI=", "commit": {"author": {"name": "Dhruv Jauhar", "email": "dhruvjhr@gmail.com", "date": "2020-11-04T07:54:00Z"}, "committer": {"name": "Dhruv Jauhar", "email": "dhruvjhr@gmail.com", "date": "2020-11-04T07:54:00Z"}, "message": "Address Pr comments regarding docstrings", "tree": {"sha": "f92a5d73e09d37bba761c20ceb1754beb3fa1186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92a5d73e09d37bba761c20ceb1754beb3fa1186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d9359b00b20cd0a2b07b044098a3318bd3292b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9359b00b20cd0a2b07b044098a3318bd3292b", "html_url": "https://github.com/rust-lang/rust/commit/c9d9359b00b20cd0a2b07b044098a3318bd3292b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9359b00b20cd0a2b07b044098a3318bd3292b/comments", "author": {"login": "null-sleep", "id": 13277988, "node_id": "MDQ6VXNlcjEzMjc3OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/13277988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/null-sleep", "html_url": "https://github.com/null-sleep", "followers_url": "https://api.github.com/users/null-sleep/followers", "following_url": "https://api.github.com/users/null-sleep/following{/other_user}", "gists_url": "https://api.github.com/users/null-sleep/gists{/gist_id}", "starred_url": "https://api.github.com/users/null-sleep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/null-sleep/subscriptions", "organizations_url": "https://api.github.com/users/null-sleep/orgs", "repos_url": "https://api.github.com/users/null-sleep/repos", "events_url": "https://api.github.com/users/null-sleep/events{/privacy}", "received_events_url": "https://api.github.com/users/null-sleep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "null-sleep", "id": 13277988, "node_id": "MDQ6VXNlcjEzMjc3OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/13277988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/null-sleep", "html_url": "https://github.com/null-sleep", "followers_url": "https://api.github.com/users/null-sleep/followers", "following_url": "https://api.github.com/users/null-sleep/following{/other_user}", "gists_url": "https://api.github.com/users/null-sleep/gists{/gist_id}", "starred_url": "https://api.github.com/users/null-sleep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/null-sleep/subscriptions", "organizations_url": "https://api.github.com/users/null-sleep/orgs", "repos_url": "https://api.github.com/users/null-sleep/repos", "events_url": "https://api.github.com/users/null-sleep/events{/privacy}", "received_events_url": "https://api.github.com/users/null-sleep/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "html_url": "https://github.com/rust-lang/rust/commit/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "57bd89b9d3da9393c0546d9511561a7e9e939f99", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9359b00b20cd0a2b07b044098a3318bd3292b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9359b00b20cd0a2b07b044098a3318bd3292b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c9d9359b00b20cd0a2b07b044098a3318bd3292b", "patch": "@@ -27,11 +27,12 @@ use rustc_span::Span;\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n     // The value found at `place` is either copied or moved, depending\n-    // on mode. Where `diag_expr_id` is the id used for diagnostics for `place`.\n+    // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n     //\n-    // The reson for a separate expr_id for diagonostics is to support cases\n-    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n-    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n+    // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n+    // id will be the id of the expression `expr` but the place itself will have\n+    // the id of the binding in the pattern `pat`.\n     fn consume(\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n@@ -40,11 +41,7 @@ pub trait Delegate<'tcx> {\n     );\n \n     // The value found at `place` is being borrowed with kind `bk`.\n-    // `diag_expr_id` is the id used for diagnostics for `place`.\n-    //\n-    // The reson for a separate expr_id for diagonostics is to support cases\n-    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n-    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn borrow(\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n@@ -53,11 +50,7 @@ pub trait Delegate<'tcx> {\n     );\n \n     // The path at `assignee_place` is being assigned to.\n-    // `diag_expr_id` is the id used for diagnostics for `place`.\n-    //\n-    // The reson for a separate expr_id for diagonostics is to support cases\n-    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n-    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n }\n "}]}