{"sha": "9047b201bf7b106203080c8a3993b5b8d921a133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDdiMjAxYmY3YjEwNjIwMzA4MGM4YTM5OTNiNWI4ZDkyMWExMzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-27T08:34:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-02T07:32:04Z"}, "message": "Move span into `StructField`\n\n+ some cleanup in rustdoc", "tree": {"sha": "f2418224e7c951dc98075991c2e10ebe44b743ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2418224e7c951dc98075991c2e10ebe44b743ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9047b201bf7b106203080c8a3993b5b8d921a133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9047b201bf7b106203080c8a3993b5b8d921a133", "html_url": "https://github.com/rust-lang/rust/commit/9047b201bf7b106203080c8a3993b5b8d921a133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9047b201bf7b106203080c8a3993b5b8d921a133/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b026a6e48ceadb2032b4982077fcdfab802cde5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b026a6e48ceadb2032b4982077fcdfab802cde5", "html_url": "https://github.com/rust-lang/rust/commit/8b026a6e48ceadb2032b4982077fcdfab802cde5"}], "stats": {"total": 177, "additions": 79, "deletions": 98}, "files": [{"sha": "11aea3727299db780397e471a73459aaf8782031", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -150,8 +150,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     for field in v.node.data.fields() {\n                         self.create_def_with_parent(\n                             Some(variant_def_index),\n-                            field.node.id,\n-                            DefPathData::Field(field.node.name));\n+                            field.id,\n+                            DefPathData::Field(field.name));\n                     }\n                 }\n             }\n@@ -166,7 +166,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 }\n \n                 for field in struct_def.fields() {\n-                    self.create_def(field.node.id, DefPathData::Field(field.node.name));\n+                    self.create_def(field.id, DefPathData::Field(field.name));\n                 }\n             }\n             ItemTrait(_, _, ref bounds, _) => {"}, {"sha": "fb5413114b7893ddcc78241c98f856a0b0644a09", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n-        self.with_lint_attrs(&s.node.attrs, |cx| {\n+        self.with_lint_attrs(&s.attrs, |cx| {\n             run_lints!(cx, check_struct_field, late_passes, s);\n             hir_visit::walk_struct_field(cx, s);\n         })"}, {"sha": "eefefed5f2daa3ec5baac231de7658ebe4b733a4", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -221,9 +221,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n-            has_extern_repr || inherited_pub_visibility || f.node.vis == hir::Public\n+            has_extern_repr || inherited_pub_visibility || f.vis == hir::Public\n         });\n-        self.live_symbols.extend(live_fields.map(|f| f.node.id));\n+        self.live_symbols.extend(live_fields.map(|f| f.id));\n \n         intravisit::walk_struct_def(self, def);\n     }\n@@ -428,16 +428,16 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         should_warn && !self.symbol_is_live(item.id, ctor_id)\n     }\n \n-    fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool {\n-        let field_type = self.tcx.node_id_to_type(node.id);\n+    fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n+        let field_type = self.tcx.node_id_to_type(field.id);\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n             _ => false\n         };\n-        !node.is_positional()\n-            && !self.symbol_is_live(node.id, None)\n+        !field.is_positional()\n+            && !self.symbol_is_live(field.id, None)\n             && !is_marker_field\n-            && !has_allow_dead_code_or_lang_attr(&node.attrs)\n+            && !has_allow_dead_code_or_lang_attr(&field.attrs)\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n@@ -543,9 +543,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, field: &hir::StructField) {\n-        if self.should_warn_about_field(&field.node) {\n-            self.warn_dead_code(field.node.id, field.span,\n-                                field.node.name, \"struct field\");\n+        if self.should_warn_about_field(&field) {\n+            self.warn_dead_code(field.id, field.span,\n+                                field.name, \"struct field\");\n         }\n \n         intravisit::walk_struct_field(self, field);"}, {"sha": "c35c86ce974a5ae9051a58e08d6f938a5b849df1", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n-        self.annotate(s.node.id, &s.node.attrs, s.span, AnnotationKind::Required, |v| {\n+        self.annotate(s.id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n     }"}, {"sha": "75a1363fcf9efab003c7780fd2dc5af93ed69b6a", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -700,16 +700,13 @@ pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> Poly\n }\n \n pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField {\n-    let StructField {node: StructField_ {id, name, vis, ty, attrs}, span} = f;\n-    Spanned {\n-        node: StructField_ {\n-            id: fld.new_id(id),\n-            name: name,\n-            vis: vis,\n-            ty: fld.fold_ty(ty),\n-            attrs: fold_attrs(attrs, fld),\n-        },\n-        span: fld.new_span(span),\n+    StructField {\n+        span: fld.new_span(f.span),\n+        id: fld.new_id(f.id),\n+        name: f.name,\n+        vis: f.vis,\n+        ty: fld.fold_ty(f.ty),\n+        attrs: fold_attrs(f.attrs, fld),\n     }\n }\n "}, {"sha": "cc562b0f7b20ad515f1d2a46d0bd0d304d1a98d7", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -1241,17 +1241,16 @@ impl Visibility {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct StructField_ {\n+pub struct StructField {\n+    pub span: Span,\n     pub name: Name,\n     pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,\n }\n \n-pub type StructField = Spanned<StructField_>;\n-\n-impl StructField_ {\n+impl StructField {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n         let first = self.name.as_str().as_bytes()[0];"}, {"sha": "e6f448654acc56c35717c1f97090452d7b60e467", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -669,9 +669,9 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n-    visitor.visit_name(struct_field.span, struct_field.node.name);\n-    visitor.visit_ty(&struct_field.node.ty);\n-    walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n+    visitor.visit_name(struct_field.span, struct_field.name);\n+    visitor.visit_ty(&struct_field.ty);\n+    walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {"}, {"sha": "1bfcb298586334866b06cc72bff1a763dd46fd2e", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -612,16 +612,14 @@ pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::Po\n pub fn lower_struct_field(lctx: &LoweringContext,\n                           (index, f): (usize, &StructField))\n                           -> hir::StructField {\n-    Spanned {\n-        node: hir::StructField_ {\n-            id: f.node.id,\n-            name: f.node.ident().map(|ident| ident.name)\n-                                .unwrap_or(token::intern(&index.to_string())),\n-            vis: lower_visibility(lctx, f.node.kind.visibility()),\n-            ty: lower_ty(lctx, &f.node.ty),\n-            attrs: lower_attrs(lctx, &f.node.attrs),\n-        },\n+    hir::StructField {\n         span: f.span,\n+        id: f.node.id,\n+        name: f.node.ident().map(|ident| ident.name)\n+                            .unwrap_or(token::intern(&index.to_string())),\n+        vis: lower_visibility(lctx, f.node.kind.visibility()),\n+        ty: lower_ty(lctx, &f.node.ty),\n+        attrs: lower_attrs(lctx, &f.node.attrs),\n     }\n }\n "}, {"sha": "49fbcea3dbf14eefeaae0493716cf03b648eb135", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -915,9 +915,9 @@ impl<'a> State<'a> {\n             if struct_def.is_tuple() {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent, struct_def.fields(), |s, field| {\n-                    try!(s.print_visibility(field.node.vis));\n+                    try!(s.print_visibility(field.vis));\n                     try!(s.maybe_print_comment(field.span.lo));\n-                    s.print_type(&field.node.ty)\n+                    s.print_type(&field.ty)\n                 }));\n                 try!(self.pclose());\n             }\n@@ -936,11 +936,11 @@ impl<'a> State<'a> {\n             for field in struct_def.fields() {\n                 try!(self.hardbreak_if_not_bol());\n                 try!(self.maybe_print_comment(field.span.lo));\n-                try!(self.print_outer_attributes(&field.node.attrs));\n-                try!(self.print_visibility(field.node.vis));\n-                try!(self.print_name(field.node.name));\n+                try!(self.print_outer_attributes(&field.attrs));\n+                try!(self.print_visibility(field.vis));\n+                try!(self.print_name(field.name));\n                 try!(self.word_nbsp(\":\"));\n-                try!(self.print_type(&field.node.ty));\n+                try!(self.print_type(&field.ty));\n                 try!(word(&mut self.s, \",\"));\n             }\n "}, {"sha": "2c86c713b1b7ac9001195264c8dfcc92d49b1f66", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n     }\n \n     fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.node.id);\n+        self.operation.visit_id(struct_field.id);\n         intravisit::walk_struct_field(self, struct_field)\n     }\n "}, {"sha": "925aec9894eaa337904db4a92ed937a2017cc62d", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -283,7 +283,7 @@ impl LateLintPass for NonSnakeCase {\n     fn check_struct_def(&mut self, cx: &LateContext, s: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, _: ast::NodeId) {\n         for sf in s.fields() {\n-            self.check_snake_case(cx, \"structure field\", &sf.node.name.as_str(), Some(sf.span));\n+            self.check_snake_case(cx, \"structure field\", &sf.name.as_str(), Some(sf.span));\n         }\n     }\n }"}, {"sha": "2c96b84471de690348602d7bd8c43a575012dd78", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -126,7 +126,7 @@ impl LateLintPass for BoxPointers {\n             hir::ItemStruct(ref struct_def, _) => {\n                 for struct_field in struct_def.fields() {\n                     self.check_heap_type(cx, struct_field.span,\n-                                         cx.tcx.node_id_to_type(struct_field.node.id));\n+                                         cx.tcx.node_id_to_type(struct_field.id));\n                 }\n             }\n             _ => ()\n@@ -428,12 +428,12 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n-        if !sf.node.is_positional() {\n-            if sf.node.vis == hir::Public || self.in_variant {\n+        if !sf.is_positional() {\n+            if sf.vis == hir::Public || self.in_variant {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");\n                 self.check_missing_docs_attrs(cx, Some(cur_struct_def),\n-                                              &sf.node.attrs, sf.span,\n+                                              &sf.attrs, sf.span,\n                                               \"a struct field\")\n             }\n         }"}, {"sha": "8aee6a9a83a08b34b3d5799e5601f8c49169e6be", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -1751,9 +1751,9 @@ fn encode_struct_field_attrs(ecx: &EncodeContext,\n     impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for StructFieldVisitor<'a, 'b, 'c, 'tcx> {\n         fn visit_struct_field(&mut self, field: &hir::StructField) {\n             self.rbml_w.start_tag(tag_struct_field);\n-            let def_id = self.ecx.tcx.map.local_def_id(field.node.id);\n+            let def_id = self.ecx.tcx.map.local_def_id(field.id);\n             encode_def_id(self.rbml_w, def_id);\n-            encode_attributes(self.rbml_w, &field.node.attrs);\n+            encode_attributes(self.rbml_w, &field.attrs);\n             self.rbml_w.end_tag();\n         }\n     }"}, {"sha": "2e7ace1b6a7e865472a5d0f49e96e1ff96c01a01", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ParentVisitor<'a, 'tcx> {\n         // While we have the id of the struct definition, go ahead and parent\n         // all the fields.\n         for field in s.fields() {\n-            self.parents.insert(field.node.id, self.curparent);\n+            self.parents.insert(field.id, self.curparent);\n         }\n         intravisit::walk_struct_def(self, s)\n     }\n@@ -262,7 +262,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 for variant in &def.variants {\n                     let variant_level = self.update(variant.node.data.id(), item_level);\n                     for field in variant.node.data.fields() {\n-                        self.update(field.node.id, variant_level);\n+                        self.update(field.id, variant_level);\n                     }\n                 }\n             }\n@@ -288,8 +288,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.update(def.id(), item_level);\n                 }\n                 for field in def.fields() {\n-                    if field.node.vis == hir::Public {\n-                        self.update(field.node.id, item_level);\n+                    if field.vis == hir::Public {\n+                        self.update(field.id, item_level);\n                     }\n                 }\n             }\n@@ -347,7 +347,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 if item_level.is_some() {\n                     self.reach().visit_generics(generics);\n                     for field in struct_def.fields() {\n-                        if self.get(field.node.id).is_some() {\n+                        if self.get(field.id).is_some() {\n                             self.reach().visit_struct_field(field);\n                         }\n                     }\n@@ -1514,7 +1514,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n-        if s.node.vis == hir::Public || self.in_variant {\n+        if s.vis == hir::Public || self.in_variant {\n             intravisit::walk_struct_field(self, s);\n         }\n     }\n@@ -1725,7 +1725,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n                 if item.vis == hir::Public {\n                     check.visit_generics(generics);\n                     for field in struct_def.fields() {\n-                        if field.node.vis == hir::Public {\n+                        if field.vis == hir::Public {\n                             check.visit_struct_field(field);\n                         }\n                     }"}, {"sha": "758611a1ec2f0d963515be2e9cb323fcbf721a32", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -382,7 +382,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // Record the def ID and fields of this struct.\n                 let field_names = struct_def.fields()\n                                             .iter()\n-                                            .map(|f| f.node.name)\n+                                            .map(|f| f.name)\n                                             .collect();\n                 let item_def_id = self.ast_map.local_def_id(item.id);\n                 self.structs.insert(item_def_id, field_names);"}, {"sha": "b2a23176c9585e4832960934425a2afd88805838", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -567,7 +567,7 @@ fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let fields =\n         struct_def.fields().iter()\n         .map(|field| {\n-            let field_ty = fcx.tcx().node_id_to_type(field.node.id);\n+            let field_ty = fcx.tcx().node_id_to_type(field.id);\n             let field_ty = fcx.instantiate_type_scheme(field.span,\n                                                        &fcx.inh\n                                                            .infcx"}, {"sha": "0e64f2cfc41c5277b49c0a5eacc3096998a31713", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -574,20 +574,20 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn convert_field<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            struct_generics: &ty::Generics<'tcx>,\n                            struct_predicates: &ty::GenericPredicates<'tcx>,\n-                           v: &hir::StructField,\n+                           field: &hir::StructField,\n                            ty_f: ty::FieldDefMaster<'tcx>)\n {\n-    let tt = ccx.icx(struct_predicates).to_ty(&ExplicitRscope, &v.node.ty);\n+    let tt = ccx.icx(struct_predicates).to_ty(&ExplicitRscope, &field.ty);\n     ty_f.fulfill_ty(tt);\n-    write_ty_to_tcx(ccx.tcx, v.node.id, tt);\n+    write_ty_to_tcx(ccx.tcx, field.id, tt);\n \n     /* add the field to the tcache */\n-    ccx.tcx.register_item_type(ccx.tcx.map.local_def_id(v.node.id),\n+    ccx.tcx.register_item_type(ccx.tcx.map.local_def_id(field.id),\n                                ty::TypeScheme {\n                                    generics: struct_generics.clone(),\n                                    ty: tt\n                                });\n-    ccx.tcx.predicates.borrow_mut().insert(ccx.tcx.map.local_def_id(v.node.id),\n+    ccx.tcx.predicates.borrow_mut().insert(ccx.tcx.map.local_def_id(field.id),\n                                            struct_predicates.clone());\n }\n \n@@ -977,19 +977,19 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                 def: &hir::VariantData) -> ty::VariantDefData<'tcx, 'tcx> {\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields().iter().map(|f| {\n-        let fid = tcx.map.local_def_id(f.node.id);\n-        let dup_span = seen_fields.get(&f.node.name).cloned();\n+        let fid = tcx.map.local_def_id(f.id);\n+        let dup_span = seen_fields.get(&f.name).cloned();\n         if let Some(prev_span) = dup_span {\n             let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n                                            \"field `{}` is already declared\",\n-                                           f.node.name);\n+                                           f.name);\n             span_note!(&mut err, prev_span, \"previously declared here\");\n             err.emit();\n         } else {\n-            seen_fields.insert(f.node.name, f.span);\n+            seen_fields.insert(f.name, f.span);\n         }\n \n-        ty::FieldDefData::new(fid, f.node.name, f.node.vis)\n+        ty::FieldDefData::new(fid, f.name, f.vis)\n     }).collect();\n     ty::VariantDefData {\n         did: did,"}, {"sha": "af8fee561dd3ac2e4ed0c86ef196c71126cafc8c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047b201bf7b106203080c8a3993b5b8d921a133/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9047b201bf7b106203080c8a3993b5b8d921a133", "patch": "@@ -1735,39 +1735,26 @@ pub enum StructField {\n \n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let name = if self.node.is_positional() { None } else { Some(self.node.name) };\n         Item {\n-            name: name.clean(cx),\n-            attrs: self.node.attrs.clean(cx),\n+            name: Some(self.name).clean(cx),\n+            attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            visibility: Some(self.node.vis),\n-            stability: get_stability(cx, cx.map.local_def_id(self.node.id)),\n-            deprecation: get_deprecation(cx, cx.map.local_def_id(self.node.id)),\n-            def_id: cx.map.local_def_id(self.node.id),\n-            inner: StructFieldItem(TypedStructField(self.node.ty.clean(cx))),\n+            visibility: Some(self.vis),\n+            stability: get_stability(cx, cx.map.local_def_id(self.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n+            def_id: cx.map.local_def_id(self.id),\n+            inner: StructFieldItem(TypedStructField(self.ty.clean(cx))),\n         }\n     }\n }\n \n impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         // FIXME: possible O(n^2)-ness! Not my fault.\n-        let attr_map =\n-            cx.tcx().sess.cstore.crate_struct_field_attrs(self.did.krate);\n-\n-        let is_positional = {\n-            let first = self.name.as_str().as_bytes()[0];\n-            first >= b'0' && first <= b'9'\n-        };\n-        let (name, attrs) = if is_positional {\n-            (None, None)\n-        } else {\n-            (Some(self.name), Some(attr_map.get(&self.did).unwrap()))\n-        };\n-\n+        let attr_map = cx.tcx().sess.cstore.crate_struct_field_attrs(self.did.krate);\n         Item {\n-            name: name.clean(cx),\n-            attrs: attrs.unwrap_or(&Vec::new()).clean(cx),\n+            name: Some(self.name).clean(cx),\n+            attrs: attr_map.get(&self.did).unwrap_or(&Vec::new()).clean(cx),\n             source: Span::empty(),\n             visibility: Some(self.vis),\n             stability: get_stability(cx, self.did),\n@@ -1945,7 +1932,7 @@ fn struct_def_to_variant_kind(struct_def: &hir::VariantData, cx: &DocContext) ->\n     } else if struct_def.is_unit() {\n         CLikeVariant\n     } else {\n-        TupleVariant(struct_def.fields().iter().map(|x| x.node.ty.clean(cx)).collect())\n+        TupleVariant(struct_def.fields().iter().map(|x| x.ty.clean(cx)).collect())\n     }\n }\n "}]}