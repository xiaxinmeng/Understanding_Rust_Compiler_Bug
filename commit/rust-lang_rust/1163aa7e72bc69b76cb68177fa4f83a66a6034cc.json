{"sha": "1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "node_id": "C_kwDOAAsO6NoAKDExNjNhYTdlNzJiYzY5Yjc2Y2I2ODE3N2ZhNGY4M2E2NmE2MDM0Y2M", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T13:28:06Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:57:45Z"}, "message": "Remove opaque type obligation and just register opaque types as they are encountered.\n\nThis also registers obligations for the hidden type immediately.", "tree": {"sha": "c3ffe7ad686652f0fb9643350bd3c2d1fc1d803e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ffe7ad686652f0fb9643350bd3c2d1fc1d803e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "html_url": "https://github.com/rust-lang/rust/commit/1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e1860495403ee0154608e51fe4b4d81203e15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e1860495403ee0154608e51fe4b4d81203e15f", "html_url": "https://github.com/rust-lang/rust/commit/86e1860495403ee0154608e51fe4b4d81203e15f"}], "stats": {"total": 601, "additions": 290, "deletions": 311}, "files": [{"sha": "9d7dcc5379c5d41f07a44a1e0298a4af291271fb", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -2646,7 +2646,7 @@ impl NormalizeLocation for Location {\n pub(super) struct InstantiateOpaqueType<'tcx> {\n     pub base_universe: Option<ty::UniverseIndex>,\n     pub region_constraints: Option<RegionConstraintData<'tcx>>,\n-    pub obligation: PredicateObligation<'tcx>,\n+    pub obligations: Vec<PredicateObligation<'tcx>>,\n }\n \n impl<'tcx> TypeOp<'tcx> for InstantiateOpaqueType<'tcx> {\n@@ -2660,7 +2660,7 @@ impl<'tcx> TypeOp<'tcx> for InstantiateOpaqueType<'tcx> {\n \n     fn fully_perform(mut self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         let (mut output, region_constraints) = scrape_region_constraints(infcx, || {\n-            Ok(InferOk { value: (), obligations: vec![self.obligation.clone()] })\n+            Ok(InferOk { value: (), obligations: self.obligations.clone() })\n         })?;\n         self.region_constraints = Some(region_constraints);\n         output.error_info = Some(self);"}, {"sha": "8a757636087dfb92e5535c3565c35f719c5a3a58", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -2,6 +2,7 @@ use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRe\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::ConstraintCategory;\n+use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_span::Span;\n@@ -136,7 +137,12 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         true\n     }\n \n-    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n+    fn register_opaque_type(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        a_is_expected: bool,\n+    ) -> Result<(), TypeError<'tcx>> {\n         let param_env = self.param_env();\n         let span = self.span();\n         let def_id = self.type_checker.body.source.def_id().expect_local();\n@@ -147,18 +153,17 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n                 self.locations,\n                 self.category,\n                 InstantiateOpaqueType {\n-                    obligation: self.type_checker.infcx.opaque_ty_obligation(\n-                        a,\n-                        b,\n-                        a_is_expected,\n-                        param_env,\n-                        cause,\n-                    ),\n+                    obligations: self\n+                        .type_checker\n+                        .infcx\n+                        .handle_opaque_type(a, b, a_is_expected, &cause, param_env)?\n+                        .obligations,\n                     // These fields are filled in during exectuion of the operation\n                     base_universe: None,\n                     region_constraints: None,\n                 },\n             )\n             .unwrap();\n+        Ok(())\n     }\n }"}, {"sha": "750643acdda3b03009a25b2f7803b83b6fe5c85b", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -22,6 +22,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n use rustc_middle::arena::ArenaAllocatable;\n+use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n@@ -499,7 +500,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         for &(a, b) in &query_response.value.opaque_types {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n-            obligations.extend(self.handle_opaque_type(a, b, cause, param_env)?.obligations);\n+            obligations.extend(self.handle_opaque_type(a, b, true, cause, param_env)?.obligations);\n         }\n \n         Ok(InferOk { value: result_subst, obligations })\n@@ -718,13 +719,17 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         true\n     }\n \n-    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n-        self.obligations.push(self.infcx.opaque_ty_obligation(\n-            a,\n-            b,\n-            a_is_expected,\n-            self.param_env,\n-            self.cause.clone(),\n-        ));\n+    fn register_opaque_type(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        a_is_expected: bool,\n+    ) -> Result<(), TypeError<'tcx>> {\n+        self.obligations.extend(\n+            self.infcx\n+                .handle_opaque_type(a, b, a_is_expected, &self.cause, self.param_env)?\n+                .obligations,\n+        );\n+        Ok(())\n     }\n }"}, {"sha": "65c0eba4b3d5c791aa254269c389c3c26460e5f4", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -98,13 +98,17 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n             (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n                 if self.fields.define_opaque_types && did.is_local() =>\n             {\n-                self.fields.obligations.push(infcx.opaque_ty_obligation(\n-                    a,\n-                    b,\n-                    self.a_is_expected(),\n-                    self.param_env(),\n-                    self.fields.trace.cause.clone(),\n-                ));\n+                self.fields.obligations.extend(\n+                    infcx\n+                        .handle_opaque_type(\n+                            a,\n+                            b,\n+                            self.a_is_expected(),\n+                            &self.fields.trace.cause,\n+                            self.param_env(),\n+                        )?\n+                        .obligations,\n+                );\n             }\n \n             _ => {"}, {"sha": "b77245c2592f9abe8cdca374b0ccb1f693345b06", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -111,13 +111,11 @@ where\n         (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n             if this.define_opaque_types() && did.is_local() =>\n         {\n-            this.add_obligations(vec![infcx.opaque_ty_obligation(\n-                a,\n-                b,\n-                this.a_is_expected(),\n-                this.param_env(),\n-                this.cause().clone(),\n-            )]);\n+            this.add_obligations(\n+                infcx\n+                    .handle_opaque_type(a, b, this.a_is_expected(), this.cause(), this.param_env())?\n+                    .obligations,\n+            );\n             Ok(a)\n         }\n "}, {"sha": "cc0114d7538e0e5df8e04c635a5558d1bfb91c7c", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -91,7 +91,12 @@ pub trait TypeRelatingDelegate<'tcx> {\n     );\n \n     fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n-    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool);\n+    fn register_opaque_type(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        a_is_expected: bool,\n+    ) -> Result<(), TypeError<'tcx>>;\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n@@ -590,7 +595,7 @@ where\n                     (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n                     _ => unreachable!(),\n                 };\n-                self.delegate.register_opaque_type(a, b, true);\n+                self.delegate.register_opaque_type(a, b, true)?;\n                 trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n                 Ok(a)\n             }"}, {"sha": "b2f62637cf238c0f695a1c64bd69622850576220", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 39, "deletions": 73, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::{InferCtxt, InferOk};\n-use crate::traits::{self, PredicateObligation};\n+use crate::traits;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -42,25 +42,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n+        a_is_expected: bool,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         if a.references_error() || b.references_error() {\n             return Ok(InferOk { value: (), obligations: vec![] });\n         }\n-        if self.defining_use_anchor.is_some() {\n-            let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n-                ty::Opaque(def_id, substs) => {\n-                    if let ty::Opaque(did2, _) = *b.kind() {\n-                        // We could accept this, but there are various ways to handle this situation, and we don't\n-                        // want to make a decision on it right now. Likely this case is so super rare anyway, that\n-                        // no one encounters it in practice.\n-                        // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n-                        // where it is of no concern, so we only check for TAITs.\n-                        if let Some(OpaqueTyOrigin::TyAlias) =\n-                            self.opaque_type_origin(did2, cause.span)\n-                        {\n-                            self.tcx\n+        let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n+        let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n+            ty::Opaque(def_id, substs) => {\n+                if let ty::Opaque(did2, _) = *b.kind() {\n+                    // We could accept this, but there are various ways to handle this situation, and we don't\n+                    // want to make a decision on it right now. Likely this case is so super rare anyway, that\n+                    // no one encounters it in practice.\n+                    // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n+                    // where it is of no concern, so we only check for TAITs.\n+                    if let Some(OpaqueTyOrigin::TyAlias) = self.opaque_type_origin(did2, cause.span)\n+                    {\n+                        self.tcx\n                                 .sess\n                                 .struct_span_err(\n                                     cause.span,\n@@ -76,13 +76,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                     \"opaque type being used as hidden type\",\n                                 )\n                                 .emit();\n-                        }\n                     }\n-                    Some(self.register_hidden_type(\n-                        OpaqueTypeKey { def_id, substs },\n-                        cause.clone(),\n-                        param_env,\n-                        b,\n+                }\n+                Some(self.register_hidden_type(\n+                    OpaqueTypeKey { def_id, substs },\n+                    cause.clone(),\n+                    param_env,\n+                    b,\n+                    if self.defining_use_anchor.is_some() {\n                         // Check that this is `impl Trait` type is\n                         // declared by `parent_def_id` -- i.e., one whose\n                         // value we are inferring.  At present, this is\n@@ -117,47 +118,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         //     let x = || foo(); // returns the Opaque assoc with `foo`\n                         // }\n                         // ```\n-                        self.opaque_type_origin(def_id, cause.span)?,\n-                    ))\n-                }\n-                _ => None,\n-            };\n-            if let Some(res) = process(a, b) {\n-                res\n-            } else if let Some(res) = process(b, a) {\n-                res\n-            } else {\n-                // Rerun equality check, but this time error out due to\n-                // different types.\n-                match self.at(cause, param_env).define_opaque_types(false).eq(a, b) {\n-                    Ok(_) => span_bug!(\n-                        cause.span,\n-                        \"opaque types are never equal to anything but themselves: {:#?}\",\n-                        (a.kind(), b.kind())\n-                    ),\n-                    Err(e) => Err(e),\n-                }\n+                        self.opaque_type_origin(def_id, cause.span)?\n+                    } else {\n+                        self.opaque_ty_origin_unchecked(def_id, cause.span)\n+                    },\n+                ))\n             }\n+            _ => None,\n+        };\n+        if let Some(res) = process(a, b) {\n+            res\n+        } else if let Some(res) = process(b, a) {\n+            res\n         } else {\n-            let (opaque_type, hidden_ty) = match (a.kind(), b.kind()) {\n-                (ty::Opaque(..), _) => (a, b),\n-                (_, ty::Opaque(..)) => (b, a),\n-                types => span_bug!(\n+            // Rerun equality check, but this time error out due to\n+            // different types.\n+            match self.at(cause, param_env).define_opaque_types(false).eq(a, b) {\n+                Ok(_) => span_bug!(\n                     cause.span,\n-                    \"opaque type obligations only work for opaque types: {:#?}\",\n-                    types\n+                    \"opaque types are never equal to anything but themselves: {:#?}\",\n+                    (a.kind(), b.kind())\n                 ),\n-            };\n-            let key = opaque_type.expect_opaque_type();\n-            let origin = self.opaque_ty_origin_unchecked(key.def_id, cause.span);\n-            let prev = self.inner.borrow_mut().opaque_types().register(\n-                key,\n-                OpaqueHiddenType { ty: hidden_ty, span: cause.span },\n-                origin,\n-            );\n-            match prev {\n-                Some(prev) => self.at(cause, param_env).eq(prev, hidden_ty),\n-                None => Ok(InferOk { value: (), obligations: vec![] }),\n+                Err(e) => Err(e),\n             }\n         }\n     }\n@@ -363,22 +345,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    pub fn opaque_ty_obligation(\n-        &self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n-        param_env: ty::ParamEnv<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-    ) -> PredicateObligation<'tcx> {\n-        let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n-        PredicateObligation::new(\n-            cause,\n-            param_env,\n-            self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::OpaqueType(a, b))),\n-        )\n-    }\n-\n     #[instrument(skip(self), level = \"trace\")]\n     pub fn opaque_type_origin(&self, opaque_def_id: DefId, span: Span) -> Option<OpaqueTyOrigin> {\n         let def_id = opaque_def_id.as_local()?;"}, {"sha": "03d6c45a653459220fe75c4fbffe369549a44678", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -28,7 +28,6 @@ pub fn explicit_outlives_bounds<'tcx>(\n             | ty::PredicateKind::TypeOutlives(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r_a, r_b)) => {\n                 Some(OutlivesBound::RegionSubRegion(r_b, r_a))"}, {"sha": "3600b54a27104c67b3be68b77fb3f8035271c020", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -146,13 +146,11 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                     (_, &ty::Opaque(..)) => (generalize(a, false)?, b),\n                     _ => unreachable!(),\n                 };\n-                self.fields.obligations.push(infcx.opaque_ty_obligation(\n-                    a,\n-                    b,\n-                    true,\n-                    self.param_env(),\n-                    self.fields.trace.cause.clone(),\n-                ));\n+                self.fields.obligations.extend(\n+                    infcx\n+                        .handle_opaque_type(a, b, true, &self.fields.trace.cause, self.param_env())?\n+                        .obligations,\n+                );\n                 Ok(a)\n             }\n "}, {"sha": "674c75fdee56113bb3b1b29067d7b7ecb235d549", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -167,9 +167,6 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Currently, we do not elaborate WF predicates,\n                 // although we easily could.\n             }\n-            ty::PredicateKind::OpaqueType(..) => {\n-                todo!(\"{:#?}\", obligation)\n-            }\n             ty::PredicateKind::ObjectSafe(..) => {\n                 // Currently, we do not elaborate object-safe\n                 // predicates."}, {"sha": "50a3df21a3bc9010ea1f04d00fc88facf8f940ca", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1675,7 +1675,6 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Coerce(..) |\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) |\n-                    OpaqueType(..) |\n                     TypeWellFormedFromEnv(..) => continue,\n                 };\n                 if predicate.is_global() {"}, {"sha": "7a3d615862cbae4d20a7f6be3c76bfa0fc399d88", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -265,10 +265,6 @@ impl FlagComputation {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 self.add_ty(ty);\n             }\n-            ty::PredicateKind::OpaqueType(opaque, ty) => {\n-                self.add_ty(opaque);\n-                self.add_ty(ty);\n-            }\n         }\n     }\n "}, {"sha": "44c190e459c3d82ead6cb179eee07397dea37941", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -632,11 +632,6 @@ pub enum PredicateKind<'tcx> {\n     ///\n     /// Only used for Chalk.\n     TypeWellFormedFromEnv(Ty<'tcx>),\n-\n-    /// Represents a hidden type assignment for an opaque type.\n-    /// Such obligations get processed by checking whether the item currently being\n-    /// type-checked may acually define it.\n-    OpaqueType(Ty<'tcx>, Ty<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1004,7 +999,6 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::TypeOutlives(..)\n             | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n-            | PredicateKind::OpaqueType(..)\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n         }\n     }\n@@ -1023,7 +1017,6 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n-            | PredicateKind::OpaqueType(..)\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n         }\n     }"}, {"sha": "fecc5d805fcace0670e0805c5767b54ffc07b291", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -2654,9 +2654,6 @@ define_print_and_forward_display! {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n-            ty::PredicateKind::OpaqueType(a, b) => {\n-                p!(\"opaque type assigment with `\", print(a), \"` == `\", print(b) ,\"`\")\n-            }\n         }\n     }\n "}, {"sha": "5c7910db362d290c2257e04daf031bdebffb8436", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -198,9 +198,6 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n             }\n-            ty::PredicateKind::OpaqueType(a, b) => {\n-                write!(f, \"OpaqueType({:?}, {:?})\", a.kind(), b.kind())\n-            }\n         }\n     }\n }\n@@ -474,9 +471,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 tcx.lift(ty).map(ty::PredicateKind::TypeWellFormedFromEnv)\n             }\n-            ty::PredicateKind::OpaqueType(opaque, ty) => {\n-                Some(ty::PredicateKind::OpaqueType(tcx.lift(opaque)?, tcx.lift(ty)?))\n-            }\n         }\n     }\n }"}, {"sha": "06287f00faddb00c717c816f8808bb750aa1bf49", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -352,7 +352,6 @@ crate fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::RegionOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n-                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ref t, ref r)) => {\n                     // Search for a bound of the form `erased_self_ty"}, {"sha": "ee9983ee8b8d8d3034bbcbd1040dac53e6b07405", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -865,7 +865,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::Coerce(..)\n-                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n             };\n         }"}, {"sha": "468c7a3c55b3626f39e5fc32a431ed45b7c93617", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -797,10 +797,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span,\n                         \"TypeWellFormedFromEnv predicate should only exist in the environment\"\n                     ),\n-\n-                    ty::PredicateKind::OpaqueType(..) => {\n-                        todo!(\"{:#?}\", obligation);\n-                    }\n                 }\n             }\n "}, {"sha": "1b8628344671db5a577f57a66e68bcc836ae2034", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -413,9 +413,6 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::OpaqueType(..) => {\n-                    todo!(\"{:#?}\", obligation);\n-                }\n             },\n             Some(pred) => match pred {\n                 ty::PredicateKind::Trait(data) => {\n@@ -665,20 +662,6 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::OpaqueType(a, b) => {\n-                    match self.selcx.infcx().handle_opaque_type(\n-                        a,\n-                        b,\n-                        &obligation.cause,\n-                        obligation.param_env,\n-                    ) {\n-                        Ok(value) => ProcessResult::Changed(mk_pending(value.obligations)),\n-                        Err(err) => ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(\n-                            ExpectedFound::new(true, a, b),\n-                            err,\n-                        )),\n-                    }\n-                }\n             },\n         }\n     }"}, {"sha": "6cceec8621304cf3e5db3a449be8dfde588f15f6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -313,7 +313,6 @@ fn predicate_references_self<'tcx>(\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n-        | ty::PredicateKind::OpaqueType(..)\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n     }\n }\n@@ -345,7 +344,6 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::TypeOutlives(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => false,\n         }\n     })"}, {"sha": "42f17721f9b545c7f8dfd321f28238f06062a9ba", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -673,19 +673,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n-                ty::PredicateKind::OpaqueType(a, b) => {\n-                    match self.infcx().handle_opaque_type(\n-                        a,\n-                        b,\n-                        &obligation.cause,\n-                        obligation.param_env,\n-                    ) {\n-                        Ok(res) => {\n-                            self.evaluate_predicates_recursively(previous_stack, res.obligations)\n-                        }\n-                        Err(_) => Ok(EvaluatedToErr),\n-                    }\n-                }\n             }\n         });\n "}, {"sha": "b4ed5b95b10473046e42665872548e633561f4d6", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -148,10 +148,6 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(c1.into());\n             wf.compute(c2.into());\n         }\n-        ty::PredicateKind::OpaqueType(opaque, ty) => {\n-            wf.compute(opaque.into());\n-            wf.compute(ty.into());\n-        }\n         ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n             bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n         }"}, {"sha": "e3c865ce9e632938508bc58418a52d4826b40c71", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -110,7 +110,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n-                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n             };\n@@ -203,7 +202,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::ConstEquate(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n             }\n@@ -623,7 +621,6 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                 bug!(\"unexpected predicate {}\", &self)\n             }\n@@ -753,7 +750,6 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                 bug!(\"unexpected predicate {}\", &self)\n             }"}, {"sha": "90c698db8fb542eb212b88623332213d1ab8e7f6", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -105,7 +105,6 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n-                    | ty::PredicateKind::OpaqueType(..)\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => vec![],\n                     ty::PredicateKind::WellFormed(arg) => {\n                         wf_args.push(arg);"}, {"sha": "a4aa965ec95333edee98c9a80e18aad5d8eff579", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -69,7 +69,6 @@ fn not_outlives_predicate<'tcx>(p: ty::Predicate<'tcx>) -> bool {\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n-        | ty::PredicateKind::OpaqueType(..)\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => true,\n     }\n }"}, {"sha": "709622edb76bb986ce981e992247235236f3f9fa", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -661,13 +661,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                     });\n                     let cause = ObligationCause::misc(span, body_id);\n-                    self.register_predicates(vec![self.infcx.opaque_ty_obligation(\n-                        ty,\n-                        ty_var,\n-                        true,\n-                        self.param_env,\n-                        cause,\n-                    )]);\n+                    self.register_predicates(\n+                        self.infcx\n+                            .handle_opaque_type(ty, ty_var, true, &cause, self.param_env)\n+                            .unwrap()\n+                            .obligations,\n+                    );\n                     ty_var\n                 }\n                 _ => ty,"}, {"sha": "6e3013cde7b6c9abc046f104844610c54e20dbe7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -732,7 +732,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // inference variable.\n                     ty::PredicateKind::ClosureKind(..) => None,\n                     ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n-                    ty::PredicateKind::OpaqueType(..) => None,\n                 }\n             })\n             .filter(move |(tr, _)| self.self_type_matches_expected_vid(*tr, ty_var_root))"}, {"sha": "abdce9f5866386fa647970fede74c4cd5cbadbc5", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -858,7 +858,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::TypeOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n-                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });"}, {"sha": "6cef3e9d9409eb1750595df7047d20b8240a6ed7", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -425,7 +425,6 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n-        | ty::PredicateKind::OpaqueType(..)\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n     }\n }"}, {"sha": "bbf31de527eb3fb7205507ee6707981b3ec8859f", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -59,7 +59,6 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::Coerce(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n-                    | ty::PredicateKind::OpaqueType(..)\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => (),\n                 }\n             }"}, {"sha": "1e3260ce9ae2be0d7a394d754d33f0a4ff14040c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -306,7 +306,6 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::OpaqueType(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n         }\n     }"}, {"sha": "796f82e779c2b901b8b2eacbac795cb47de33da4", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -22,6 +22,7 @@ async fn suggest_await_in_async_fn_return() {\n     dummy()\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider `await`ing on the `Future`\n+    //~| HELP consider using a semicolon here\n     //~| SUGGESTION .await\n }\n "}, {"sha": "76073c4c879967d48a99ac596fc71ef10eb60665", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -33,9 +33,13 @@ help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n    |            ++++++\n+help: consider using a semicolon here\n+   |\n+LL |     dummy();\n+   |            +\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/suggest-missing-await.rs:34:9\n+  --> $DIR/suggest-missing-await.rs:35:9\n    |\n LL |       let _x = if true {\n    |  ______________-\n@@ -49,20 +53,15 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future<Output = ()>`\n-                found unit type `()`\n+   = note:   expected type `impl Future<Output = ()>`\n+           found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n LL |         dummy().await\n    |                ++++++\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/suggest-missing-await.rs:44:14\n+  --> $DIR/suggest-missing-await.rs:45:14\n    |\n LL |       let _x = match 0usize {\n    |  ______________-\n@@ -90,7 +89,7 @@ LL ~         1 => dummy().await,\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:52:9\n+  --> $DIR/suggest-missing-await.rs:53:9\n    |\n LL |     let _x = match dummy() {\n    |                    ------- this expression has type `impl Future<Output = ()>`\n@@ -110,7 +109,7 @@ LL |     let _x = match dummy().await {\n    |                           ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:66:9\n+  --> $DIR/suggest-missing-await.rs:67:9\n    |\n LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n@@ -119,7 +118,7 @@ LL |         Ok(_) => {}\n    |         ^^^^^ expected opaque type, found enum `Result`\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:56:28\n+  --> $DIR/suggest-missing-await.rs:57:28\n    |\n LL | async fn dummy_result() -> Result<(), ()> {\n    |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n@@ -131,7 +130,7 @@ LL |     match dummy_result().await {\n    |                         ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:68:9\n+  --> $DIR/suggest-missing-await.rs:69:9\n    |\n LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n@@ -140,7 +139,7 @@ LL |         Err(_) => {}\n    |         ^^^^^^ expected opaque type, found enum `Result`\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:56:28\n+  --> $DIR/suggest-missing-await.rs:57:28\n    |\n LL | async fn dummy_result() -> Result<(), ()> {\n    |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type"}, {"sha": "d4a0f9613055ee5abf87eccec3fffe4df7a0dff1", "filename": "src/test/ui/cast/casts-differing-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     // this is an `*mut fmt::Debug` in practice\n     let mut b_raw = Box::into_raw(b);\n     // ... and they should not be mixable\n-    b_raw = f_raw as *mut _; //~ ERROR mismatched types\n+    b_raw = f_raw as *mut _; //~ ERROR is invalid\n }"}, {"sha": "f9abfb5225f91c3f5b1fd693f14c6cb245887fed", "filename": "src/test/ui/cast/casts-differing-anon.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,19 +1,11 @@\n-error[E0308]: mismatched types\n+error[E0606]: casting `*mut impl Debug + ?Sized` as `*mut impl Debug + ?Sized` is invalid\n   --> $DIR/casts-differing-anon.rs:21:13\n    |\n-LL | fn foo() -> Box<impl fmt::Debug+?Sized> {\n-   |                 ---------------------- the found opaque type\n-...\n-LL | fn bar() -> Box<impl fmt::Debug+?Sized> {\n-   |                 ---------------------- the expected opaque type\n-...\n LL |     b_raw = f_raw as *mut _;\n-   |             ^^^^^ expected opaque type, found a different opaque type\n+   |             ^^^^^^^^^^^^^^^\n    |\n-   = note: expected opaque type `impl Debug + ?Sized` (opaque type at <$DIR/casts-differing-anon.rs:7:17>)\n-              found opaque type `impl Debug + ?Sized` (opaque type at <$DIR/casts-differing-anon.rs:3:17>)\n-   = note: distinct uses of `impl Trait` result in different opaque types\n+   = note: vtable kinds may not match\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0606`."}, {"sha": "b8488d83998e87ebcf45716ca7d3f27e945e8eaa", "filename": "src/test/ui/conservative_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -2,6 +2,7 @@\n \n fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n }\n \n fn main() {}"}, {"sha": "2348f2f52978f159c15e1eb22db188853aa65153", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -6,6 +6,18 @@ LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error: aborting due to previous error\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/conservative_impl_trait.rs:3:60\n+   |\n+LL |   fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n+   |  ____________________________________________________________^\n+LL | |\n+LL | |\n+LL | | }\n+   | |_^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "5e4f4995447e14f8912cf6d8bb86395f77126e3b", "filename": "src/test/ui/impl-trait/autoderef.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fautoderef.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+use std::path::Path;\n+use std::ffi::OsStr;\n+use std::ops::Deref;\n+\n+fn frob(path: &str) -> impl Deref<Target = Path> + '_ {\n+    OsStr::new(path).as_ref()\n+}\n+\n+fn open_parent<'path>(_path: &'path Path) {\n+    todo!()\n+}\n+\n+fn main() {\n+    let old_path = frob(\"hello\");\n+\n+    open_parent(&old_path);\n+}"}, {"sha": "c27b5ca9f6689856be63574890ccd9e99352f72c", "filename": "src/test/ui/impl-trait/cross-return-site-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -42,4 +42,4 @@ fn muh3() -> Result<(), impl std::fmt::Debug> {\n     Err(From::from(\"foo\")) //~ ERROR the trait bound `impl Debug: From<&str>` is not satisfied\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "46053c6e7c1196f4cb10eb13c4814751856b6f33", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -15,7 +15,9 @@ LL | fn hide<T: Foo>(x: T) -> impl Foo {\n    |                          -------- the found opaque type\n ...\n LL |     let _: u32 = hide(0_u32);\n-   |                  ^^^^^^^^^^^ expected `u32`, found opaque type\n+   |            ---   ^^^^^^^^^^^ expected `u32`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note:     expected type `u32`\n            found opaque type `impl Foo`"}, {"sha": "1a86fa00ed1a0a3832e4d0e6f3f59eb7ffdc87d7", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -28,7 +28,7 @@ fn ham() -> Foo {\n fn oof() -> impl std::fmt::Debug {\n     let mut bar = ham();\n     let func = bar.next().unwrap();\n-    return func(&\"oof\"); //~^^^ ERROR opaque type's hidden type cannot be another opaque type\n+    return func(&\"oof\"); //~ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n fn main() {"}, {"sha": "7cbd58bdabf2f7b9521cb5f6a85f4d6b8d1b8904", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -13,15 +13,10 @@ LL |         Some(Box::new(quux))\n               found enum `Option<Box<for<'r> fn(&'r (dyn ToString + 'r)) -> FooRet {quux}>>`\n \n error: opaque type's hidden type cannot be another opaque type from the same scope\n-  --> $DIR/issue-70877.rs:28:34\n+  --> $DIR/issue-70877.rs:31:12\n    |\n-LL |   fn oof() -> impl std::fmt::Debug {\n-   |  __________________________________^\n-LL | |     let mut bar = ham();\n-LL | |     let func = bar.next().unwrap();\n-LL | |     return func(&\"oof\");\n-LL | | }\n-   | |_^ one of the two opaque types used here has to be outside its defining scope\n+LL |     return func(&\"oof\");\n+   |            ^^^^^^^^^^^^ one of the two opaque types used here has to be outside its defining scope\n    |\n note: opaque type whose hidden type is being assigned\n   --> $DIR/issue-70877.rs:28:13"}, {"sha": "b33802e2bc8dafd4517785d279ab5683c446ba29", "filename": "src/test/ui/impl-trait/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -26,4 +26,4 @@ fn run<F>(f: F)\n \n fn main() {\n     run(|_| {});\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7bd5cff31bbdf578623e6833e354930a12a1ee87", "filename": "src/test/ui/impl-trait/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -27,4 +27,4 @@ pub fn direct() -> Result<(), impl Debug> {\n     Err(Target)\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "6aa832cde71ee7c3ec6788b15d7b684045247e1a", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -21,6 +21,7 @@ mod b {\n \n     impl PartialEq<(Foo, i32)> for Bar {\n         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+            //~^ ERROR impl has stricter requirements than trait\n             true\n         }\n     }"}, {"sha": "19d5cdb9d0ac6f0f0363e1a20318c9e7a1a4b106", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -14,5 +14,12 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n    |\n    = note: `Foo` must be used in combination with a concrete type within the same module\n \n-error: aborting due to 2 previous errors\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:23:9\n+   |\n+LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `b::Bar: PartialEq<(b::Bar, i32)>`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "05b09668016c47b8a836eeec7d06c84854f85c32", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,6 +1,6 @@\n #![feature(type_alias_impl_trait)]\n \n-type A = impl Foo;\n+type A = impl Foo; //~ ERROR unconstrained opaque type\n type B = impl Foo;\n \n trait Foo {}"}, {"sha": "4d8f96de1626c500ad8648295ec2acf0944311be", "filename": "src/test/ui/impl-trait/two_tait_defining_each_other2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftwo_tait_defining_each_other2.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,3 +1,11 @@\n+error: unconstrained opaque type\n+  --> $DIR/two_tait_defining_each_other2.rs:3:10\n+   |\n+LL | type A = impl Foo;\n+   |          ^^^^^^^^\n+   |\n+   = note: `A` must be used in combination with a concrete type within the same module\n+\n error: opaque type's hidden type cannot be another opaque type from the same scope\n   --> $DIR/two_tait_defining_each_other2.rs:9:5\n    |\n@@ -15,5 +23,5 @@ note: opaque type being used as hidden type\n LL | type A = impl Foo;\n    |          ^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "fde59f39b1cd9017e8ed309f4eb6d79bf3c6bea5", "filename": "src/test/ui/issues-71798.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fissues-71798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fissues-71798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,5 +1,6 @@\n fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n     //~^ ERROR `u32` is not a future\n+    //~| ERROR `u32` is not a future\n     *x\n }\n "}, {"sha": "63669c0513d6491c3c943bbf549ba7d05f19bd5d", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `u` in this scope\n-  --> $DIR/issues-71798.rs:7:24\n+  --> $DIR/issues-71798.rs:8:24\n    |\n LL |     let _ = test_ref & u;\n    |                        ^ not found in this scope\n@@ -13,7 +13,21 @@ LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    = help: the trait `Future` is not implemented for `u32`\n    = note: u32 must be a future or must implement `IntoFuture` to be awaited\n \n-error: aborting due to 2 previous errors\n+error[E0277]: `u32` is not a future\n+  --> $DIR/issues-71798.rs:1:69\n+   |\n+LL |   fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+   |  _____________________________________________________________________^\n+LL | |\n+LL | |\n+LL | |     *x\n+LL | | }\n+   | |_^ `u32` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `u32`\n+   = note: u32 must be a future or must implement `IntoFuture` to be awaited\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "c2954868f78e4b00504f07eacfa25a071e18df43", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -27,6 +27,7 @@ fn main() {\n     struct Y;\n     impl X for Y {\n         async fn ft1() {} //~ ERROR functions in traits cannot be declared `async`\n+        //~^ ERROR impl has stricter requirements than trait\n         unsafe fn ft2() {} // OK.\n         const fn ft3() {} //~ ERROR functions in traits cannot be declared const\n         extern \"C\" fn ft4() {}\n@@ -35,6 +36,7 @@ fn main() {\n         //~| ERROR functions in traits cannot be declared const\n         //~| ERROR functions cannot be both `const` and `async`\n         //~| ERROR cycle detected\n+        //~| ERROR impl has stricter requirements than trait\n     }\n \n     impl Y {"}, {"sha": "bd3b9181123bb7b0485a9b342c9045aa0ad5f98d", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -62,19 +62,19 @@ LL |         async fn ft1() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:31:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,7 +85,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +94,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n+  --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +103,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -116,7 +116,7 @@ LL |         fn fe1();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:19\n+  --> $DIR/fn-header-semantic-fail.rs:54:19\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -130,7 +130,7 @@ LL |         fn fe2();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:55:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -144,7 +144,7 @@ LL |         fn fe3();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:23\n+  --> $DIR/fn-header-semantic-fail.rs:56:23\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -158,7 +158,7 @@ LL |         fn fe4();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:42\n+  --> $DIR/fn-header-semantic-fail.rs:57:42\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -172,7 +172,7 @@ LL |         fn fe5();\n    |         ~~\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:55:9\n+  --> $DIR/fn-header-semantic-fail.rs:57:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -216,30 +216,48 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 38:6>::ft5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:33:48\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n+   |\n+LL |         async fn ft1();\n+   |         --------------- definition of `ft1` from trait\n+...\n+LL |         async fn ft1() {}\n+   |         ^^^^^^^^^^^^^^ impl has extra requirement `(): Future`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         --------------------------------------- definition of `ft5` from trait\n+...\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `(): Future`\n+\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5::{opaque#0}`\n+  --> $DIR/fn-header-semantic-fail.rs:34:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 38:6>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 38:6>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 38:6>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5`...\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 38:6>::ft5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 40:6>::ft5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |\n@@ -252,30 +270,30 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 48:6>::fi5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:45:48\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5::{opaque#0}`\n+  --> $DIR/fn-header-semantic-fail.rs:47:48\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 48:6>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 48:6>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 48:6>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:47:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 48:6>::fi5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 50:6>::fi5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |\n@@ -288,7 +306,7 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 23 previous errors\n \n-Some errors have detailed explanations: E0379, E0391, E0706.\n-For more information about an error, try `rustc --explain E0379`.\n+Some errors have detailed explanations: E0276, E0379, E0391, E0706.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "6facc467f7a6fc56903cbacbea3e4975b6817a5b", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -14,6 +14,7 @@ trait B {\n impl B for A {\n     async fn associated(); //~ ERROR without body\n     //~^ ERROR cannot be declared `async`\n+    //~| ERROR impl has stricter requirements than trait\n }\n \n fn main() {}"}, {"sha": "c144060a8597de7ffe617dd4f2bc4f463f125993", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -44,6 +44,16 @@ LL |     async fn associated();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error: aborting due to 5 previous errors\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+   |\n+LL |     async fn associated();\n+   |     ---------------------- definition of `associated` from trait\n+...\n+LL |     async fn associated();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `(): Future`\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0706`.\n+Some errors have detailed explanations: E0276, E0706.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "6aa93a24d2f04badad96d70142113ee6b07a00f6", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -16,9 +16,6 @@ fn extra_semicolon() {\n async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE while checking the return type of the `async fn`\n //~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE while checking the return type of the `async fn`\n@@ -34,7 +31,7 @@ async fn async_extra_semicolon_same() {\n         }\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~| NOTE expected type `()`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -47,7 +44,7 @@ async fn async_extra_semicolon_different() {\n         }\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~| NOTE expected type `()`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -58,7 +55,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~| NOTE expected type `impl Future<Output = ()>`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "b55c51b92809a35f5d9e020a6d0db9ee332d5afa", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:35:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:32:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -20,8 +20,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn async_dummy() {}\n    |                        ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+   = note:     expected type `()`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -33,7 +33,7 @@ LL +             async_dummy()\n    | \n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:48:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:45:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -50,12 +50,12 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+   = note:     expected type `()`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -69,7 +69,7 @@ LL ~         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:59:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:56:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -84,17 +84,12 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:22:25>)\n+   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n+           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "e065e0aaa8e0622480eef0c1d5d679d706a8ce28", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -1,9 +1,6 @@\n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n-LL |   fn thing_one() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ the expected opaque type\n-...\n LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n    |                     ------------------------------------ the found opaque type\n ...\n@@ -16,8 +13,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-              found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n+   = note:     expected type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+           found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "fbfa0ccf1e8d9d293d85c18fcc74750d91871765", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -12,11 +12,13 @@ error[E0308]: mismatched types\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type\n ...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `Boo` because of return type\n LL |     \"\"\n    |     ^^ expected opaque type, found `&str`\n    |\n    = note: expected opaque type `Boo`\n-                found reference `&str`\n+                found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ae03a5b3e37bf7430dcf22bdbb6cf08bb72ba8f7", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -5,7 +5,9 @@ LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the found opaque type\n ...\n LL |     let _: &str = bomp();\n-   |                   ^^^^^^ expected `&str`, found opaque type\n+   |            ----   ^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&str`\n             found opaque type `Boo`\n@@ -16,11 +18,13 @@ error[E0308]: mismatched types\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type\n ...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `Boo` because of return type\n LL |     \"\"\n    |     ^^ expected opaque type, found `&str`\n    |\n    = note: expected opaque type `Boo`\n-                found reference `&str`\n+                found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "891531951c1a03c0f6f5a3947544a04297151fcf", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1163aa7e72bc69b76cb68177fa4f83a66a6034cc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "patch": "@@ -33,7 +33,6 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Trait(..)\n-                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),"}]}