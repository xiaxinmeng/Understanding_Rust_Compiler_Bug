{"sha": "454ecd167cbe516062f9dd9441122eb62d86b42e", "node_id": "C_kwDOAAsO6NoAKDQ1NGVjZDE2N2NiZTUxNjA2MmY5ZGQ5NDQxMTIyZWI2MmQ4NmI0MmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T19:44:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T19:44:33Z"}, "message": "Make multiple import edits work for completions", "tree": {"sha": "9c10559a387ffaff59e3f9ba8dfb3308381fd7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c10559a387ffaff59e3f9ba8dfb3308381fd7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454ecd167cbe516062f9dd9441122eb62d86b42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454ecd167cbe516062f9dd9441122eb62d86b42e", "html_url": "https://github.com/rust-lang/rust/commit/454ecd167cbe516062f9dd9441122eb62d86b42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454ecd167cbe516062f9dd9441122eb62d86b42e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046c85ef0c56d9c484291b22241a51fa7d2f3a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/046c85ef0c56d9c484291b22241a51fa7d2f3a51", "html_url": "https://github.com/rust-lang/rust/commit/046c85ef0c56d9c484291b22241a51fa7d2f3a51"}], "stats": {"total": 228, "additions": 141, "deletions": 87}, "files": [{"sha": "9ad34f71605a57551910fe6f15c733fec9ce5919", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -633,6 +633,7 @@ dependencies = [\n  \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n+ \"smallvec\",\n  \"sourcegen\",\n  \"stdx\",\n  \"syntax\","}, {"sha": "c825e4e9cb1e5df525fdc881ab2a16c7a343f597", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -533,19 +533,10 @@ impl Analysis {\n         &self,\n         config: &CompletionConfig,\n         position: FilePosition,\n-        full_import_path: &str,\n-        imported_name: String,\n+        imports: impl IntoIterator<Item = (String, String)> + std::panic::UnwindSafe,\n     ) -> Cancellable<Vec<TextEdit>> {\n         Ok(self\n-            .with_db(|db| {\n-                ide_completion::resolve_completion_edits(\n-                    db,\n-                    config,\n-                    position,\n-                    full_import_path,\n-                    imported_name,\n-                )\n-            })?\n+            .with_db(|db| ide_completion::resolve_completion_edits(db, config, position, imports))?\n             .unwrap_or_default())\n     }\n "}, {"sha": "0d4413978d4fdfa51deac0b77161695d35e8eca6", "filename": "crates/ide_completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2FCargo.toml?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -14,6 +14,7 @@ itertools = \"0.10.0\"\n rustc-hash = \"1.1.0\"\n either = \"1.6.1\"\n once_cell = \"1.7\"\n+smallvec = \"1.4\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "44f2aec51b604dcee4c12269250f9b3a76f46a28", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -231,17 +231,18 @@ fn add_custom_postfix_completions(\n     let import_scope =\n         ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n     ctx.config.postfix_snippets.iter().for_each(|snippet| {\n-        // FIXME: Support multiple imports\n-        let import = match snippet.imports(ctx, &import_scope) {\n-            Ok(mut imports) => imports.pop(),\n+        let imports = match snippet.imports(ctx, &import_scope) {\n+            Ok(imports) => imports,\n             Err(_) => return,\n         };\n         let mut builder = postfix_snippet(\n             &snippet.label,\n             snippet.description.as_deref().unwrap_or_default(),\n             &format!(\"{}\", snippet.snippet(&receiver_text)),\n         );\n-        builder.add_import(import);\n+        for import in imports.into_iter() {\n+            builder.add_import(import);\n+        }\n         builder.add_to(acc);\n     });\n     None\n@@ -480,7 +481,7 @@ fn main() {\n                     &[\"ControlFlow::Break($receiver)\".into()],\n                     &[],\n                     &[\"core::ops::ControlFlow\".into()],\n-                    None,\n+                    crate::PostfixSnippetScope::Expr,\n                 )\n                 .unwrap()],\n                 ..TEST_CONFIG"}, {"sha": "1dace20102c311f58f66c66800103fbfc9e7dc07", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -104,13 +104,15 @@ fn add_custom_completions(\n     let import_scope =\n         ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n     ctx.config.snippets.iter().filter(|snip| snip.scope == scope).for_each(|snip| {\n-        // FIXME: Support multiple imports\n-        let import = match snip.imports(ctx, &import_scope) {\n-            Ok(mut imports) => imports.pop(),\n+        let imports = match snip.imports(ctx, &import_scope) {\n+            Ok(imports) => imports,\n             Err(_) => return,\n         };\n         let mut builder = snippet(ctx, cap, &snip.label, &snip.snippet);\n-        builder.add_import(import).detail(snip.description.as_deref().unwrap_or_default());\n+        for import in imports.into_iter() {\n+            builder.add_import(import);\n+        }\n+        builder.detail(snip.description.as_deref().unwrap_or_default());\n         builder.add_to(acc);\n     });\n     None\n@@ -132,7 +134,7 @@ mod tests {\n                     &[\"ControlFlow::Break(())\".into()],\n                     &[],\n                     &[\"core::ops::ControlFlow\".into()],\n-                    None,\n+                    crate::SnippetScope::Expr,\n                 )\n                 .unwrap()],\n                 ..TEST_CONFIG"}, {"sha": "4c75bd69000e11f1bb79804d1b00c1bf3c970da0", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -11,6 +11,7 @@ use ide_db::{\n     },\n     SymbolKind,\n };\n+use smallvec::SmallVec;\n use stdx::{format_to, impl_from, never};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n@@ -76,7 +77,7 @@ pub struct CompletionItem {\n     ref_match: Option<Mutability>,\n \n     /// The import data to add to completion's edits.\n-    import_to_add: Option<ImportEdit>,\n+    import_to_add: SmallVec<[ImportEdit; 1]>,\n }\n \n // We use custom debug for CompletionItem to make snapshot tests more readable.\n@@ -305,7 +306,7 @@ impl CompletionItem {\n             trigger_call_info: None,\n             relevance: CompletionRelevance::default(),\n             ref_match: None,\n-            import_to_add: None,\n+            imports_to_add: Default::default(),\n         }\n     }\n \n@@ -364,8 +365,8 @@ impl CompletionItem {\n         self.ref_match.map(|mutability| (mutability, relevance))\n     }\n \n-    pub fn import_to_add(&self) -> Option<&ImportEdit> {\n-        self.import_to_add.as_ref()\n+    pub fn imports_to_add(&self) -> &[ImportEdit] {\n+        &self.import_to_add\n     }\n }\n \n@@ -398,7 +399,7 @@ impl ImportEdit {\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n-    import_to_add: Option<ImportEdit>,\n+    imports_to_add: SmallVec<[ImportEdit; 1]>,\n     trait_name: Option<String>,\n     label: String,\n     insert_text: Option<String>,\n@@ -422,14 +423,13 @@ impl Builder {\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;\n \n-        if let Some(original_path) = self\n-            .import_to_add\n-            .as_ref()\n-            .and_then(|import_edit| import_edit.import.original_path.as_ref())\n-        {\n-            lookup = lookup.or_else(|| Some(label.clone()));\n-            insert_text = insert_text.or_else(|| Some(label.clone()));\n-            format_to!(label, \" (use {})\", original_path)\n+        if let [import_edit] = &*self.imports_to_add {\n+            // snippets can have multiple imports, but normal completions only have up to one\n+            if let Some(original_path) = import_edit.import.original_path.as_ref() {\n+                lookup = lookup.or_else(|| Some(label.clone()));\n+                insert_text = insert_text.or_else(|| Some(label.clone()));\n+                format_to!(label, \" (use {})\", original_path)\n+            }\n         } else if let Some(trait_name) = self.trait_name {\n             insert_text = insert_text.or_else(|| Some(label.clone()));\n             format_to!(label, \" (as {})\", trait_name)\n@@ -456,7 +456,7 @@ impl Builder {\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             relevance: self.relevance,\n             ref_match: self.ref_match,\n-            import_to_add: self.import_to_add,\n+            import_to_add: self.imports_to_add,\n         }\n     }\n     pub(crate) fn lookup_by(&mut self, lookup: impl Into<String>) -> &mut Builder {\n@@ -527,8 +527,8 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(&mut self, import_to_add: Option<ImportEdit>) -> &mut Builder {\n-        self.import_to_add = import_to_add;\n+    pub(crate) fn add_import(&mut self, import_to_add: ImportEdit) -> &mut Builder {\n+        self.imports_to_add.push(import_to_add);\n         self\n     }\n     pub(crate) fn ref_match(&mut self, mutability: Mutability) -> &mut Builder {"}, {"sha": "bbfdadafc72a52980424a792b00b37a4d45e86df", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -175,8 +175,7 @@ pub fn resolve_completion_edits(\n     db: &RootDatabase,\n     config: &CompletionConfig,\n     position: FilePosition,\n-    full_import_path: &str,\n-    imported_name: String,\n+    imports: impl IntoIterator<Item = (String, String)>,\n ) -> Option<Vec<TextEdit>> {\n     let ctx = CompletionContext::new(db, position, config)?;\n     let position_for_import = position_for_import(&ctx, None)?;\n@@ -185,21 +184,34 @@ pub fn resolve_completion_edits(\n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();\n \n-    let (import_path, item_to_import) = items_locator::items_with_name(\n-        &ctx.sema,\n-        current_crate,\n-        NameToImport::Exact(imported_name),\n-        items_locator::AssocItemSearch::Include,\n-        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n-    )\n-    .filter_map(|candidate| {\n-        current_module\n-            .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n-            .zip(Some(candidate))\n-    })\n-    .find(|(mod_path, _)| mod_path.to_string() == full_import_path)?;\n-    let import =\n-        LocatedImport::new(import_path.clone(), item_to_import, item_to_import, Some(import_path));\n+    Some(\n+        imports\n+            .into_iter()\n+            .filter_map(|(full_import_path, imported_name)| {\n+                let (import_path, item_to_import) = items_locator::items_with_name(\n+                    &ctx.sema,\n+                    current_crate,\n+                    NameToImport::Exact(imported_name),\n+                    items_locator::AssocItemSearch::Include,\n+                    Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n+                )\n+                .filter_map(|candidate| {\n+                    current_module\n+                        .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n+                        .zip(Some(candidate))\n+                })\n+                .find(|(mod_path, _)| mod_path.to_string() == full_import_path)?;\n+                let import = LocatedImport::new(\n+                    import_path.clone(),\n+                    item_to_import,\n+                    item_to_import,\n+                    Some(import_path),\n+                );\n \n-    ImportEdit { import, scope }.to_text_edit(config.insert_use).map(|edit| vec![edit])\n+                ImportEdit { import, scope: scope.clone() }\n+                    .to_text_edit(config.insert_use)\n+                    .map(|edit| edit)\n+            })\n+            .collect(),\n+    )\n }"}, {"sha": "58443f566ef5ee3ac3ce299654da604fdd052f9e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -212,7 +212,10 @@ fn render_resolution_(\n                 ctx.source_range(),\n                 local_name.to_string(),\n             );\n-            item.kind(CompletionItemKind::UnresolvedReference).add_import(import_to_add);\n+            item.kind(CompletionItemKind::UnresolvedReference);\n+            if let Some(import_to_add) = import_to_add {\n+                item.add_import(import_to_add);\n+            }\n             return Some(item.build());\n         }\n     };\n@@ -258,9 +261,12 @@ fn render_resolution_(\n         }\n     }\n     item.kind(kind)\n-        .add_import(import_to_add)\n         .set_documentation(scope_def_docs(ctx.db(), resolution))\n         .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n+\n+    if let Some(import_to_add) = import_to_add {\n+        item.add_import(import_to_add);\n+    }\n     Some(item.build())\n }\n "}, {"sha": "2ba86eaa0afb52c90f52e2d3d9f3058e4bc799bc", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -68,9 +68,12 @@ impl<'a> EnumRender<'a> {\n         item.kind(SymbolKind::Variant)\n             .set_documentation(self.variant.docs(self.ctx.db()))\n             .set_deprecated(self.ctx.is_deprecated(self.variant))\n-            .add_import(import_to_add)\n             .detail(self.detail());\n \n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+\n         if self.variant_kind == hir::StructKind::Tuple {\n             cov_mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(self.variant.fields(self.ctx.db()).len());"}, {"sha": "4e4663b857a655a72f02823e4d740bb264f7685e", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -98,7 +98,10 @@ impl<'a> FunctionRender<'a> {\n             }\n         }\n \n-        item.add_import(import_to_add).lookup_by(self.name);\n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+        item.lookup_by(self.name);\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {"}, {"sha": "196b667baacd203705861655b8148962999cbaf4", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -51,9 +51,12 @@ impl<'a> MacroRender<'a> {\n         item.kind(SymbolKind::Macro)\n             .set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-            .add_import(import_to_add)\n             .set_detail(self.detail());\n \n+        if let Some(import_to_add) = import_to_add {\n+            item.add_import(import_to_add);\n+        }\n+\n         let needs_bang = !(self.ctx.completion.in_use_tree()\n             || matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac)));\n         let has_parens = self.ctx.completion.path_call_kind().is_some();"}, {"sha": "8100487a72b04a385c73112b3d9bd54a61f0a739", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -41,7 +41,7 @@ impl Snippet {\n         snippet: &[String],\n         description: &[String],\n         requires: &[String],\n-        scope: Option<SnippetScope>,\n+        scope: SnippetScope,\n     ) -> Option<Self> {\n         // validate that these are indeed simple paths\n         if requires.iter().any(|path| match ast::Path::parse(path) {\n@@ -57,7 +57,7 @@ impl Snippet {\n         let description = description.iter().join(\"\\n\");\n         let description = if description.is_empty() { None } else { Some(description) };\n         Some(Snippet {\n-            scope: scope.unwrap_or(SnippetScope::Expr),\n+            scope,\n             label,\n             snippet,\n             description,\n@@ -89,7 +89,7 @@ impl PostfixSnippet {\n         snippet: &[String],\n         description: &[String],\n         requires: &[String],\n-        scope: Option<PostfixSnippetScope>,\n+        scope: PostfixSnippetScope,\n     ) -> Option<Self> {\n         // validate that these are indeed simple paths\n         if requires.iter().any(|path| match ast::Path::parse(path) {\n@@ -105,7 +105,7 @@ impl PostfixSnippet {\n         let description = description.iter().join(\"\\n\");\n         let description = if description.is_empty() { None } else { Some(description) };\n         Some(PostfixSnippet {\n-            scope: scope.unwrap_or(PostfixSnippetScope::Expr),\n+            scope,\n             label,\n             snippet,\n             description,"}, {"sha": "6f4121dd80a0f26e1a61d2b65f18041295bd07c5", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -183,13 +183,15 @@ pub(crate) fn check_edit_with_config(\n     let mut actual = db.file_text(position.file_id).to_string();\n \n     let mut combined_edit = completion.text_edit().to_owned();\n-    if let Some(import_text_edit) =\n-        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use))\n-    {\n-        combined_edit.union(import_text_edit).expect(\n-            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n-        )\n-    }\n+    completion\n+        .imports_to_add()\n+        .iter()\n+        .filter_map(|edit| edit.to_text_edit(config.insert_use))\n+        .for_each(|text_edit| {\n+            combined_edit.union(text_edit).expect(\n+                \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n+            )\n+        });\n \n     combined_edit.apply(&mut actual);\n     assert_eq_text!(&ra_fixture_after, &actual)"}, {"sha": "150fc8e7026e4fb4c7fd0744d8f25e8141aba50e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -462,10 +462,10 @@ impl Config {\n                     &desc.snippet,\n                     &desc.description,\n                     &desc.requires,\n-                    desc.scope.map(|scope| match scope {\n+                    match desc.scope {\n                         PostfixSnippetScopeDef::Expr => PostfixSnippetScope::Expr,\n                         PostfixSnippetScopeDef::Type => PostfixSnippetScope::Type,\n-                    }),\n+                    },\n                 )\n             })\n             .collect();\n@@ -479,10 +479,10 @@ impl Config {\n                     &desc.snippet,\n                     &desc.description,\n                     &desc.requires,\n-                    desc.scope.map(|scope| match scope {\n+                    match desc.scope {\n                         SnippetScopeDef::Expr => SnippetScope::Expr,\n                         SnippetScopeDef::Item => SnippetScope::Item,\n-                    }),\n+                    },\n                 )\n             })\n             .collect();\n@@ -954,17 +954,31 @@ impl Config {\n }\n \n #[derive(Deserialize, Debug, Clone, Copy)]\n+#[serde(rename_all = \"snake_case\")]\n enum PostfixSnippetScopeDef {\n     Expr,\n     Type,\n }\n \n+impl Default for PostfixSnippetScopeDef {\n+    fn default() -> Self {\n+        PostfixSnippetScopeDef::Expr\n+    }\n+}\n+\n #[derive(Deserialize, Debug, Clone, Copy)]\n+#[serde(rename_all = \"snake_case\")]\n enum SnippetScopeDef {\n     Expr,\n     Item,\n }\n \n+impl Default for SnippetScopeDef {\n+    fn default() -> Self {\n+        SnippetScopeDef::Expr\n+    }\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n struct PostfixSnippetDef {\n     #[serde(deserialize_with = \"single_or_array\")]\n@@ -973,7 +987,8 @@ struct PostfixSnippetDef {\n     snippet: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n     requires: Vec<String>,\n-    scope: Option<PostfixSnippetScopeDef>,\n+    #[serde(default)]\n+    scope: PostfixSnippetScopeDef,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n@@ -984,7 +999,8 @@ struct SnippetDef {\n     snippet: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n     requires: Vec<String>,\n-    scope: Option<SnippetScopeDef>,\n+    #[serde(default)]\n+    scope: SnippetScopeDef,\n }\n \n fn single_or_array<'de, D>(deserializer: D) -> Result<Vec<String>, D::Error>"}, {"sha": "6ad5cb53342e6168992a5ad529cf56758a2f42d6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -787,8 +787,10 @@ pub(crate) fn handle_completion_resolve(\n         .resolve_completion_edits(\n             &snap.config.completion(),\n             FilePosition { file_id, offset },\n-            &resolve_data.full_import_path,\n-            resolve_data.imported_name,\n+            resolve_data\n+                .imports\n+                .into_iter()\n+                .map(|import| (import.full_import_path, import.imported_name)),\n         )?\n         .into_iter()\n         .flat_map(|edit| edit.into_iter().map(|indel| to_proto::text_edit(&line_index, indel)))"}, {"sha": "19137b942ebfaee7ff02ebbac5d77cde10f7be4e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -520,6 +520,11 @@ pub enum WorkspaceSymbolSearchKind {\n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionResolveData {\n     pub position: lsp_types::TextDocumentPositionParams,\n+    pub imports: Vec<CompletionImport>,\n+}\n+\n+#[derive(Debug, Serialize, Deserialize)]\n+pub struct CompletionImport {\n     pub full_import_path: String,\n     pub imported_name: String,\n }"}, {"sha": "fc3e25064f3a7a6205dfab206e37b909521de852", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ecd167cbe516062f9dd9441122eb62d86b42e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=454ecd167cbe516062f9dd9441122eb62d86b42e", "patch": "@@ -270,14 +270,20 @@ fn completion_item(\n         lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::Snippet);\n     }\n     if config.completion().enable_imports_on_the_fly {\n-        if let Some(import_edit) = item.import_to_add() {\n-            let import_path = &import_edit.import.import_path;\n-            if let Some(import_name) = import_path.segments().last() {\n-                let data = lsp_ext::CompletionResolveData {\n-                    position: tdpp.clone(),\n-                    full_import_path: import_path.to_string(),\n-                    imported_name: import_name.to_string(),\n-                };\n+        if let imports @ [_, ..] = item.imports_to_add() {\n+            let imports: Vec<_> = imports\n+                .iter()\n+                .filter_map(|import_edit| {\n+                    let import_path = &import_edit.import.import_path;\n+                    let import_name = import_path.segments().last()?;\n+                    Some(lsp_ext::CompletionImport {\n+                        full_import_path: import_path.to_string(),\n+                        imported_name: import_name.to_string(),\n+                    })\n+                })\n+                .collect();\n+            if !imports.is_empty() {\n+                let data = lsp_ext::CompletionResolveData { position: tdpp.clone(), imports };\n                 lsp_item.data = Some(to_value(data).unwrap());\n             }\n         }"}]}