{"sha": "921f63fb1f5a56023e6631cd4ab785c476bcd197", "node_id": "C_kwDOAAsO6NoAKDkyMWY2M2ZiMWY1YTU2MDIzZTY2MzFjZDRhYjc4NWM0NzZiY2QxOTc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-27T19:01:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-30T20:06:48Z"}, "message": "rustdoc: Early-resolve doc links in all requested namespaces", "tree": {"sha": "daea3303245654dceb7b2d251c4408414246a8e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daea3303245654dceb7b2d251c4408414246a8e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921f63fb1f5a56023e6631cd4ab785c476bcd197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921f63fb1f5a56023e6631cd4ab785c476bcd197", "html_url": "https://github.com/rust-lang/rust/commit/921f63fb1f5a56023e6631cd4ab785c476bcd197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921f63fb1f5a56023e6631cd4ab785c476bcd197/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579d26876ddc5426be32cca1a026b6fd7fc5be24", "url": "https://api.github.com/repos/rust-lang/rust/commits/579d26876ddc5426be32cca1a026b6fd7fc5be24", "html_url": "https://github.com/rust-lang/rust/commit/579d26876ddc5426be32cca1a026b6fd7fc5be24"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "d9761d4e3d752e3663ae11d85010575217fcb8ad", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/921f63fb1f5a56023e6631cd4ab785c476bcd197/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921f63fb1f5a56023e6631cd4ab785c476bcd197/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=921f63fb1f5a56023e6631cd4ab785c476bcd197", "patch": "@@ -1,7 +1,7 @@\n use crate::clean::Attributes;\n use crate::core::ResolverCaches;\n use crate::passes::collect_intra_doc_links::preprocessed_markdown_links;\n-use crate::passes::collect_intra_doc_links::PreprocessedMarkdownLink;\n+use crate::passes::collect_intra_doc_links::{Disambiguator, PreprocessedMarkdownLink};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, ItemKind};\n@@ -209,26 +209,50 @@ impl EarlyDocLinkResolver<'_, '_> {\n         self.resolve_doc_links(doc_attrs(attrs.iter()), module_id);\n     }\n \n+    fn resolve_and_cache(&mut self, path_str: &str, ns: Namespace, module_id: DefId) -> bool {\n+        self.doc_link_resolutions\n+            .entry((Symbol::intern(path_str), ns, module_id))\n+            .or_insert_with_key(|(path, ns, module_id)| {\n+                self.resolver.resolve_rustdoc_path(path.as_str(), *ns, *module_id)\n+            })\n+            .is_some()\n+    }\n+\n     fn resolve_doc_links(&mut self, attrs: Attributes, module_id: DefId) {\n         let mut need_traits_in_scope = false;\n         for (doc_module, doc) in attrs.prepare_to_doc_link_resolution() {\n             assert_eq!(doc_module, None);\n-            let links = self\n-                .markdown_links\n-                .entry(doc)\n-                .or_insert_with_key(|doc| preprocessed_markdown_links(doc));\n+            let mut tmp_links = mem::take(&mut self.markdown_links);\n+            let links =\n+                tmp_links.entry(doc).or_insert_with_key(|doc| preprocessed_markdown_links(doc));\n             for PreprocessedMarkdownLink(pp_link, _) in links {\n                 if let Ok(pinfo) = pp_link {\n-                    // FIXME: Resolve the path in all namespaces and resolve its prefixes too.\n-                    let ns = TypeNS;\n-                    self.doc_link_resolutions\n-                        .entry((Symbol::intern(&pinfo.path_str), ns, module_id))\n-                        .or_insert_with_key(|(path, ns, module_id)| {\n-                            self.resolver.resolve_rustdoc_path(path.as_str(), *ns, *module_id)\n-                        });\n-                    need_traits_in_scope = true;\n+                    // The logic here is a conservative approximation for path resolution in\n+                    // `resolve_with_disambiguator`.\n+                    if let Some(ns) = pinfo.disambiguator.map(Disambiguator::ns) {\n+                        if self.resolve_and_cache(&pinfo.path_str, ns, module_id) {\n+                            continue;\n+                        }\n+                    }\n+\n+                    // Resolve all namespaces due to no disambiguator or for diagnostics.\n+                    let mut any_resolved = false;\n+                    let mut need_assoc = false;\n+                    for ns in [TypeNS, ValueNS, MacroNS] {\n+                        if self.resolve_and_cache(&pinfo.path_str, ns, module_id) {\n+                            any_resolved = true;\n+                        } else if ns != MacroNS {\n+                            need_assoc = true;\n+                        }\n+                    }\n+\n+                    // FIXME: Resolve all prefixes for type-relative resolution or for diagnostics.\n+                    if (need_assoc || !any_resolved) && pinfo.path_str.contains(\"::\") {\n+                        need_traits_in_scope = true;\n+                    }\n                 }\n             }\n+            self.markdown_links = tmp_links;\n         }\n \n         if need_traits_in_scope {"}]}