{"sha": "da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDIzYzBjNmYzY2RjNzJkNzJlZjA0N2MyZGFkYjFhNTljNjQ2ZGY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-12T01:06:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-12T01:18:43Z"}, "message": "Add more context for type parameters", "tree": {"sha": "7a261302263e46ff5c481466846c7affcab2cfc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a261302263e46ff5c481466846c7affcab2cfc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "html_url": "https://github.com/rust-lang/rust/commit/da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45550ef2ff47020ab8af5feb08669c8c4ab879e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/45550ef2ff47020ab8af5feb08669c8c4ab879e9", "html_url": "https://github.com/rust-lang/rust/commit/45550ef2ff47020ab8af5feb08669c8c4ab879e9"}], "stats": {"total": 179, "additions": 128, "deletions": 51}, "files": [{"sha": "8878683f3a7a43857d1f354386b3822b6d78f4bd", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -9,6 +9,7 @@ use syntax::source_map::DesugaringKind;\n use syntax::symbol::kw;\n use syntax_pos::Span;\n use errors::{Applicability, DiagnosticBuilder};\n+use std::borrow::Cow;\n \n use rustc_error_codes::*;\n \n@@ -113,6 +114,7 @@ fn closure_return_type_suggestion(\n     err: &mut DiagnosticBuilder<'_>,\n     output: &FunctionRetTy,\n     body: &Body,\n+    descr: &str,\n     name: &str,\n     ret: &str,\n ) {\n@@ -136,7 +138,7 @@ fn closure_return_type_suggestion(\n         suggestion,\n         Applicability::HasPlaceholders,\n     );\n-    err.span_label(span, InferCtxt::missing_type_msg(&name));\n+    err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n }\n \n /// Given a closure signature, return a `String` containing a list of all its argument types.\n@@ -175,13 +177,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n-    ) -> (String, Option<Span>) {\n+    ) -> (String, Option<Span>, Cow<'static, str>) {\n         if let ty::Infer(ty::TyVar(ty_vid)) = ty.kind {\n             let ty_vars = self.type_variables.borrow();\n             let var_origin = ty_vars.var_origin(ty_vid);\n             if let TypeVariableOriginKind::TypeParameterDefinition(name) = var_origin.kind {\n                 if name != kw::SelfUpper {\n-                    return (name.to_string(), Some(var_origin.span));\n+                    return (\n+                        name.to_string(),\n+                        Some(var_origin.span),\n+                        \"type parameter\".into(),\n+                    );\n                 }\n             }\n         }\n@@ -192,7 +198,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             printer.region_highlight_mode = highlight;\n         }\n         let _ = ty.print(printer);\n-        (s, None)\n+        (s, None, ty.prefix_string())\n     }\n \n     pub fn need_type_info_err(\n@@ -203,7 +209,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let (name, name_sp) = self.extract_type_name(&ty, None);\n+        let (name, name_sp, descr) = self.extract_type_name(&ty, None);\n \n         let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, &self.tcx.hir());\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n@@ -308,6 +314,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             &mut err,\n                             &decl.output,\n                             &body,\n+                            &descr,\n                             &name,\n                             &ret,\n                         );\n@@ -427,7 +434,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 span_label.label.is_some() && span_label.span == span\n             }) && local_visitor.found_arg_pattern.is_none()\n         { // Avoid multiple labels pointing at `span`.\n-            err.span_label(span, InferCtxt::missing_type_msg(&name));\n+            err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n         }\n \n         err\n@@ -468,10 +475,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 } else {\n                     let sig = self.tcx.fn_sig(did);\n-                    err.span_label(e.span, &format!(\n-                        \"this method call resolves to `{:?}`\",\n-                        sig.output().skip_binder(),\n-                    ));\n+                    let bound_output = sig.output();\n+                    let output = bound_output.skip_binder();\n+                    err.span_label(e.span, &format!(\"this method call resolves to `{:?}`\", output));\n+                    let kind = &output.kind;\n+                    if let ty::Projection(proj) | ty::UnnormalizedProjection(proj) = kind {\n+                        if let Some(span) = self.tcx.hir().span_if_local(proj.item_def_id) {\n+                            err.span_label(span, &format!(\"`{:?}` defined here\", output));\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -484,19 +496,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let name = self.extract_type_name(&ty, None).0;\n+        let (name, _, descr) = self.extract_type_name(&ty, None);\n         let mut err = struct_span_err!(\n             self.tcx.sess, span, E0698, \"type inside {} must be known in this context\", kind,\n         );\n-        err.span_label(span, InferCtxt::missing_type_msg(&name));\n+        err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n         err\n     }\n \n-    fn missing_type_msg(type_name: &str) -> String {\n+    fn missing_type_msg(type_name: &str, descr: &str) -> Cow<'static, str>{\n         if type_name == \"_\" {\n-            \"cannot infer type\".to_owned()\n+            \"cannot infer type\".into()\n         } else {\n-            format!(\"cannot infer type for `{}`\", type_name)\n+            format!(\"cannot infer type for {} `{}`\", descr, type_name).into()\n         }\n     }\n }"}, {"sha": "069da955b674e02c3327af377fd25d3c2832f9c3", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL | trait Foo: Iterator<Item = i32> {}\n    | ------------------------------- required by `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `Self`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n \n@@ -14,7 +14,7 @@ error[E0284]: type annotations needed\n LL | trait I32Iterator = Iterator<Item = i32>;\n    | ----------------------------------------- required by `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `Self`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n "}, {"sha": "79c043b701ddb249c69a3bea60a09c1a2eca3527", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -8,7 +8,7 @@ async fn bar<T>() -> () {}\n async fn foo() {\n     bar().await;\n     //~^ ERROR type inside `async fn` body must be known in this context\n-    //~| NOTE cannot infer type for `T`\n+    //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE in this expansion of desugaring of `await`\n }"}, {"sha": "b9b4f5133b9a7e5cd20904e5b3975187419d2dc5", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;\n-   |     ^^^ cannot infer type for `T`\n+   |     ^^^ cannot infer type for type parameter `T`\n    |\n note: the type is part of the `async fn` body because of this `await`\n   --> $DIR/unresolved_type_param.rs:9:5"}, {"sha": "8379cbd4908e95fa51f7bf81f674ad999695813f", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -10,7 +10,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:9:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for `fn() -> usize {foo::<_: usize>}`\n+   |     ^^^ cannot infer type for fn item `fn() -> usize {foo::<_: usize>}`\n \n error: aborting due to previous error\n "}, {"sha": "9ccad7bcdd7e6173253efe60ec48d0fd2f0271ff", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -30,7 +30,7 @@ error[E0282]: type annotations needed\n   --> $DIR/fn-const-param-infer.rs:22:23\n    |\n LL |     let _ = Checked::<generic>;\n-   |                       ^^^^^^^ cannot infer type for `T`\n+   |                       ^^^^^^^ cannot infer type for type parameter `T`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40"}, {"sha": "b3c673ec027ef76124cbddaf4b7ca01fa84a4e31", "filename": "src/test/ui/consts/issue-64662.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,13 +2,13 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:2:9\n    |\n LL |     A = foo(),\n-   |         ^^^ cannot infer type for `T`\n+   |         ^^^ cannot infer type for type parameter `T`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:3:9\n    |\n LL |     B = foo(),\n-   |         ^^^ cannot infer type for `T`\n+   |         ^^^ cannot infer type for type parameter `T`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0adf982d71c908c3c1ef8b7a25a61edc253ab5cb", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -36,7 +36,7 @@ error[E0282]: type annotations needed\n   --> $DIR/E0401.rs:11:5\n    |\n LL |     bfnr(x);\n-   |     ^^^^ cannot infer type for `U`\n+   |     ^^^^ cannot infer type for type parameter `U`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5f2dd729c739f5cd1693ead7b9b02b4c3cb3ac70", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0284]: type annotations needed\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n-   |              ^^^^^^^^^^^^ cannot infer type for `H`\n+   |              ^^^^^^^^^^^^ cannot infer type for type parameter `H`\n    |\n    = note: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n "}, {"sha": "0d565af79b5defeea133f3ff6a0eac4fd226f4b9", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-16966.rs:2:5\n    |\n LL |     panic!(std::default::Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `M`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "5468268e7de947227a50f8835aef9d3afbb3b34b", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `B<T>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n-   |         ---   ^ cannot infer type for `T`\n+   |         ---   ^ cannot infer type for type parameter `T`\n    |         |\n    |         consider giving `foo` the explicit type `B<T>`, where the type parameter `T` is specified\n "}, {"sha": "b1536bd8ddb0a5d52af1b1fc220aa513a7914066", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -11,7 +11,7 @@ LL | | {\n LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n-   | |_^ cannot infer type for `&'a T`\n+   | |_^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "8f0850328b44671bd45a323d49a8ccfa6148a756", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -5,7 +5,7 @@ LL | trait Trait0<'l0>  {}\n    | ----------------- required by `Trait0`\n LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `T0`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot resolve `T0: Trait0<'l0>`\n "}, {"sha": "de020d4b56ba1b428bc8a77c07a58bcf41b51b1e", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -5,7 +5,7 @@ LL |     let (tx, rx) = channel();\n    |         -------- consider giving this pattern the explicit type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`, where the type parameter `T` is specified\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n-   |                 ^^^ cannot infer type for `T`\n+   |                 ^^^ cannot infer type for type parameter `T`\n \n error: aborting due to previous error\n "}, {"sha": "1efedb45cace7944d07f5fcc6918401406b3896b", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -5,7 +5,7 @@ LL | trait Foo { fn xxx(&self); }\n    |             -------------- required by `Foo::xxx`\n ...\n LL |     let _ = <S5<_>>::xxx;\n-   |             ^^^^^^^^^^^^ cannot infer type for `S5<_>`\n+   |             ^^^^^^^^^^^^ cannot infer type for struct `S5<_>`\n    |\n    = note: cannot resolve `S5<_>: Foo`\n "}, {"sha": "a20118d69117050783f86ce541ab42a737683e70", "filename": "src/test/ui/issues/issue-5062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-5062.rs:1:29\n    |\n LL | fn main() { format!(\"{:?}\", None); }\n-   |                             ^^^^ cannot infer type for `T`\n+   |                             ^^^^ cannot infer type for type parameter `T`\n \n error: aborting due to previous error\n "}, {"sha": "d538a69045f325696dfb26152ac176072c2107cf", "filename": "src/test/ui/issues/issue-6458-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458-2.rs:3:21\n    |\n LL |     format!(\"{:?}\", None);\n-   |                     ^^^^ cannot infer type for `T`\n+   |                     ^^^^ cannot infer type for type parameter `T`\n \n error: aborting due to previous error\n "}, {"sha": "6b3f469ee3789efe852de9397c705483555a5035", "filename": "src/test/ui/issues/issue-6458-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458-3.rs:4:5\n    |\n LL |     mem::transmute(0);\n-   |     ^^^^^^^^^^^^^^ cannot infer type for `U`\n+   |     ^^^^^^^^^^^^^^ cannot infer type for type parameter `U`\n \n error: aborting due to previous error\n "}, {"sha": "de315659b6df928e84a5c8b52ee5fa961226e027", "filename": "src/test/ui/issues/issue-6458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458.rs:9:4\n    |\n LL |    foo(TypeWithState(marker::PhantomData));\n-   |    ^^^ cannot infer type for `State`\n+   |    ^^^ cannot infer type for type parameter `State`\n \n error: aborting due to previous error\n "}, {"sha": "20e2ba144d92636e359de3919603bda17285d07f", "filename": "src/test/ui/issues/issue-65611.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x = buffer.last().unwrap().0.clone();\n    |             -------^^^^--\n    |             |      |\n-   |             |      cannot infer type for `T`\n+   |             |      cannot infer type for type parameter `T`\n    |             this method call resolves to `std::option::Option<&T>`\n    |\n    = note: type must be known at this point"}, {"sha": "f3f3c4768095c0c621e63da16b986a92c9e1373f", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n-   |         -----   ^^^^^^^^ cannot infer type for `T`\n+   |         -----   ^^^^^^^^ cannot infer type for type parameter `T`\n    |         |\n    |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n "}, {"sha": "be97f2373c31337283ea0773818d5f507bf3166f", "filename": "src/test/ui/missing/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/missing-type-parameter.rs:4:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for `X`\n+   |     ^^^ cannot infer type for type parameter `X`\n \n error: aborting due to previous error\n "}, {"sha": "9824d879dbdd28125751a56a6cbb2c502d20c97f", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed for `std::option::Option<_>`\n LL |     let x: Option<_> = None;\n    |         - consider giving `x` the explicit type `std::option::Option<_>`, where the type parameter `T` is specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n-   |       ^^^^^^ cannot infer type for `T`\n+   |       ^^^^^^ cannot infer type for type parameter `T`\n    |\n    = note: type must be known at this point\n "}, {"sha": "8366285edcda8d31c14c99072e922b497713f459", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n    |                                       ^^^\n    |                                       |\n-   |                                       cannot infer type for `S`\n+   |                                       cannot infer type for type parameter `S`\n    |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n    |\n    = note: type must be known at this point"}, {"sha": "7bcda234c4b0d109a9413fac27cb8776ebbdb778", "filename": "src/test/ui/traits/traits-multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/traits-multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n-   |     ^^^^ cannot infer type for `U`\n+   |     ^^^^ cannot infer type for type parameter `U`\n \n error: aborting due to previous error\n "}, {"sha": "141cc25ffe22d37cb5a959240f6cab7ddf995543", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |         .or_else(|err| {\n    |          ^^^^^^^\n    |          |\n-   |          cannot infer type for `F`\n+   |          cannot infer type for type parameter `F`\n    |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n \n error: aborting due to previous error"}, {"sha": "1d386bd1f42c9cc9de938b34fc668adb45bbcf37", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n    |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n    |         |\n-   |         cannot infer type for `K`\n+   |         cannot infer type for type parameter `K`\n \n error: aborting due to previous error\n "}, {"sha": "0167e943612d06cb9be04ccb0431f1e026353e68", "filename": "src/test/ui/type-inference/unbounded-associated-type.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.rs?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,16 @@\n+trait T {\n+    type A;\n+    fn foo(&self) -> Self::A {\n+        panic!()\n+    }\n+}\n+\n+struct S<X>(std::marker::PhantomData<X>);\n+\n+impl<X> T for S<X> {\n+   type A = X;\n+}\n+\n+fn main() {\n+    S(std::marker::PhantomData).foo(); //~ ERROR type annotations needed\n+}"}, {"sha": "726dd4b4758176b0e51e4ba191b33cbbf467124e", "filename": "src/test/ui/type-inference/unbounded-associated-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/unbounded-associated-type.rs:15:5\n+   |\n+LL |     type A;\n+   |     ------- `<Self as T>::A` defined here\n+...\n+LL |     S(std::marker::PhantomData).foo();\n+   |     ^--------------------------------\n+   |     |\n+   |     this method call resolves to `<Self as T>::A`\n+   |     cannot infer type for type parameter `X`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "81d054b3a1e078ceadedcff341c4d21a93bebd44", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn-with-assoc-type.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.rs?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,9 @@\n+#[allow(invalid_type_param_default)]\n+\n+fn foo<T, U = u64>() -> (T, U) {\n+    panic!()\n+}\n+\n+fn main() {\n+    foo(); //~ ERROR type annotations needed\n+}"}, {"sha": "52039d0e934e6332f72c9785da7878c59b34b0a6", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn-with-assoc-type.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/unbounded-type-param-in-fn-with-assoc-type.rs:8:5\n+   |\n+LL |     foo();\n+   |     ^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "1f336ed59a6ddb6ee7a87ae4fe804ebc4f4978d4", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.rs?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,7 @@\n+fn foo<T>() -> T {\n+    panic!()\n+}\n+\n+fn main() {\n+    foo(); //~ ERROR type annotations needed\n+}"}, {"sha": "8d317df6ce95a860f0c82c3b42c143b9cbc1ddd5", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/unbounded-type-param-in-fn.rs:6:5\n+   |\n+LL |     foo();\n+   |     ^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "94425440d333c2f90fe70c2e783f12fb85bc1631", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n LL |     foo(42);\n    |     ^^^\n    |     |\n-   |     cannot infer type for `T`\n+   |     cannot infer type for type parameter `T`\n    |     help: consider specifying the type argument in the function call: `foo::<T>`\n    |\n    = note: cannot resolve `_: std::convert::Into<std::string::String>`"}, {"sha": "53cc769bae3cf9336ab3485ad111e38ee4b7116b", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n-   |         -   ^^^^^^ cannot infer type for `T`\n+   |         -   ^^^^^^ cannot infer type for type parameter `T`\n    |         |\n    |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n    |"}, {"sha": "df7228ce9f2a84ffe3e04f00b5ef872b8db71ce5", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `(std::vec::Vec<T>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );\n-   |         -----    ^^^^^^ cannot infer type for `T`\n+   |         -----    ^^^^^^ cannot infer type for type parameter `T`\n    |         |\n    |         consider giving this pattern the explicit type `(std::vec::Vec<T>,)`, where the type parameter `T` is specified\n    |"}, {"sha": "fae7b79269bec77caa595ea1b63506e1a0c73530", "filename": "src/test/ui/type/type-check/issue-22897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-22897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-22897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-22897.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-22897.rs:4:5\n    |\n LL |     [];\n-   |     ^^ cannot infer type for `[_; 0]`\n+   |     ^^ cannot infer type for array `[_; 0]`\n \n error: aborting due to previous error\n "}, {"sha": "4fc028550914943daa6154ec4b1ad5446daf8315", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -11,7 +11,7 @@ LL | | {\n LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n-   | |_^ cannot infer type for `&'a T`\n+   | |_^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "6c4fde94a61997c31f2cbfc3f5041e0d58b594c7", "filename": "src/test/ui/unconstrained-none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Funconstrained-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Funconstrained-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funconstrained-none.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unconstrained-none.rs:4:5\n    |\n LL |     None;\n-   |     ^^^^ cannot infer type for `T`\n+   |     ^^^^ cannot infer type for type parameter `T`\n \n error: aborting due to previous error\n "}, {"sha": "d6985a61daf0b133733bdad895291f0f9c17042d", "filename": "src/test/ui/unconstrained-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Funconstrained-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Funconstrained-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funconstrained-ref.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unconstrained-ref.rs:6:5\n    |\n LL |     S { o: &None };\n-   |     ^ cannot infer type for `T`\n+   |     ^ cannot infer type for type parameter `T`\n \n error: aborting due to previous error\n "}, {"sha": "62fc42fbae4636d6ebad9e81fd77e69d9944a825", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da023c0c6f3cdc72d72ef047c2dadb1a59c646df/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=da023c0c6f3cdc72d72ef047c2dadb1a59c646df", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n-   |         ----   ^^^^^^^^ cannot infer type for `T`\n+   |         ----   ^^^^^^^^ cannot infer type for type parameter `T`\n    |         |\n    |         consider giving `_foo` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n "}]}