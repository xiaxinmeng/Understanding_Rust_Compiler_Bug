{"sha": "3c20d8a9e626eda5ecc283542735e708f3a84959", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjBkOGE5ZTYyNmVkYTVlY2MyODM1NDI3MzVlNzA4ZjNhODQ5NTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-30T20:52:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-30T20:52:07Z"}, "message": "Merge pull request #2874 from cavedweller/master\n\nFormat Async block and async fn", "tree": {"sha": "afc23d221ab5f3ea5488449da4ebca0f67258970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afc23d221ab5f3ea5488449da4ebca0f67258970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c20d8a9e626eda5ecc283542735e708f3a84959", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbX3p3CRBK7hj4Ov3rIwAAdHIIAFQd9QmS/wcIFQ5ooUu6BDIQ\nfzMHRricH1/xskvYHga7vaCzSEMr1Pu4miZBqER4o6lmdxeiBSZKEniVcenVnDaU\nwsibohWhrlxL1FXJap+82UcX51ImjmLAKRM4xY08UU9r/BeDtRLXUzAB5MTyV1cE\nWssgagudlra0fSWb4t0shlNEVWc+ZZz0l2C/EIk0RnAPottbB5KBVOFbdcQ5eyxa\nuIZ/N3dLVNzH/RzPXWwvfyaHosYr8kNB7TiM5XTS+3B1RnryS1N/BaxfG3LGGqjs\nYKs+tT9d63Drdn52Pg/DZsL771J47pY9Im/B+8w0DLg2lgzD8aOpZsqjuB7iqAM=\n=VU3K\n-----END PGP SIGNATURE-----\n", "payload": "tree afc23d221ab5f3ea5488449da4ebca0f67258970\nparent dc209cc97fac89c5ab6fdd5214098b2799c4c661\nparent 46b241004dbc4d6f77e81868304af4e79df9fe6f\nauthor Nick Cameron <nrc@ncameron.org> 1532983927 +1200\ncommitter GitHub <noreply@github.com> 1532983927 +1200\n\nMerge pull request #2874 from cavedweller/master\n\nFormat Async block and async fn"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c20d8a9e626eda5ecc283542735e708f3a84959", "html_url": "https://github.com/rust-lang/rust/commit/3c20d8a9e626eda5ecc283542735e708f3a84959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c20d8a9e626eda5ecc283542735e708f3a84959/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc209cc97fac89c5ab6fdd5214098b2799c4c661", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc209cc97fac89c5ab6fdd5214098b2799c4c661", "html_url": "https://github.com/rust-lang/rust/commit/dc209cc97fac89c5ab6fdd5214098b2799c4c661"}, {"sha": "46b241004dbc4d6f77e81868304af4e79df9fe6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b241004dbc4d6f77e81868304af4e79df9fe6f", "html_url": "https://github.com/rust-lang/rust/commit/46b241004dbc4d6f77e81868304af4e79df9fe6f"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "72cf618dca546fc7c0213013d2340ec4dd989161", "filename": "src/expr.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -345,8 +345,38 @@ pub fn format_expr(\n         }\n         // FIXME(#2743)\n         ast::ExprKind::ObsoleteInPlace(..) => unimplemented!(),\n-        // FIXME(topecongiro) Format async block.\n-        ast::ExprKind::Async(..) => None,\n+        ast::ExprKind::Async(capture_by, _node_id, ref block) => {\n+            let mover = if capture_by == ast::CaptureBy::Value {\n+                \"move \"\n+            } else {\n+                \"\"\n+            };\n+            if let rw @ Some(_) = rewrite_single_line_block(\n+                context,\n+                format!(\"{}{}\", \"async \", mover).as_str(),\n+                block,\n+                Some(&expr.attrs),\n+                None,\n+                shape,\n+            ) {\n+                rw\n+            } else {\n+                // 6 = `async `\n+                let budget = shape.width.saturating_sub(6);\n+                Some(format!(\n+                    \"{}{}{}\",\n+                    \"async \",\n+                    mover,\n+                    rewrite_block(\n+                        block,\n+                        Some(&expr.attrs),\n+                        None,\n+                        context,\n+                        Shape::legacy(budget, shape.indent)\n+                    )?\n+                ))\n+            }\n+        }\n     };\n \n     expr_rw"}, {"sha": "b352294d3f3c807b785ae6df2106be13c0ea843e", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -164,6 +164,7 @@ pub struct FnSig<'a> {\n     decl: &'a ast::FnDecl,\n     generics: &'a ast::Generics,\n     abi: abi::Abi,\n+    is_async: ast::IsAsync,\n     constness: ast::Constness,\n     defaultness: ast::Defaultness,\n     unsafety: ast::Unsafety,\n@@ -180,6 +181,7 @@ impl<'a> FnSig<'a> {\n             decl,\n             generics,\n             abi: abi::Abi::Rust,\n+            is_async: ast::IsAsync::NotAsync,\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n             unsafety: ast::Unsafety::Normal,\n@@ -193,6 +195,7 @@ impl<'a> FnSig<'a> {\n     ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.header.unsafety,\n+            is_async: method_sig.header.asyncness,\n             constness: method_sig.header.constness.node,\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.header.abi,\n@@ -214,6 +217,7 @@ impl<'a> FnSig<'a> {\n                 generics,\n                 abi: fn_header.abi,\n                 constness: fn_header.constness.node,\n+                is_async: fn_header.asyncness,\n                 defaultness,\n                 unsafety: fn_header.unsafety,\n                 visibility: visibility.clone(),\n@@ -237,6 +241,7 @@ impl<'a> FnSig<'a> {\n         result.push_str(format_defaultness(self.defaultness));\n         result.push_str(format_constness(self.constness));\n         result.push_str(format_unsafety(self.unsafety));\n+        result.push_str(format_async(self.is_async));\n         result.push_str(&format_abi(\n             self.abi,\n             context.config.force_explicit_abi(),"}, {"sha": "5f92255e79cad80fcd253f1ba70c4501f7fd9998", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -81,6 +81,14 @@ pub fn format_visibility(context: &RewriteContext, vis: &Visibility) -> Cow<'sta\n     }\n }\n \n+#[inline]\n+pub fn format_async(is_async: ast::IsAsync) -> &'static str {\n+    match is_async {\n+        ast::IsAsync::Async { .. } => \"async \",\n+        ast::IsAsync::NotAsync => \"\",\n+    }\n+}\n+\n #[inline]\n pub fn format_constness(constness: ast::Constness) -> &'static str {\n     match constness {"}, {"sha": "903fe039b1ba160f8ed33ed2a4eae810a6d63f27", "filename": "src/visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -253,7 +253,6 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     // Note that this only gets called for function definitions. Required methods\n     // on traits do not get handled here.\n-    // FIXME(topecongiro) Format async fn (#2812).\n     fn visit_fn(\n         &mut self,\n         fk: visit::FnKind,"}, {"sha": "5e05e58c6c12d0ee77690daf0c06a049804eaeab", "filename": "tests/source/async_block.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Fsource%2Fasync_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Fsource%2Fasync_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fasync_block.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-edition: Edition2018\n+\n+fn main() {\n+    let x = async {\n+        Ok(())\n+    };\n+}\n+\n+fn baz() {\n+    // test\n+    let x = async {\n+        // async blocks are great\n+        Ok(())\n+    };\n+\n+    let y = async {\n+        Ok(())\n+    }; // comment\n+}"}, {"sha": "cae9d5badafaab7d1617002d13bf6544a1013de0", "filename": "tests/source/async_fn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Fsource%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Fsource%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fasync_fn.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-edition: Edition2018\n+\n+async fn bar() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+pub async fn baz() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+unsafe async fn foo() {\n+    async move {\n+        Ok(())\n+    }\n+}\n+\n+unsafe async fn rust() {\n+    async move { // comment\n+        Ok(())\n+    }\n+}"}, {"sha": "611c719e95f7512623cd097396d66920f2eee232", "filename": "tests/target/async_block.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Ftarget%2Fasync_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Ftarget%2Fasync_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fasync_block.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-edition: Edition2018\n+\n+fn main() {\n+    let x = async { Ok(()) };\n+}\n+\n+fn baz() {\n+    // test\n+    let x = async {\n+        // async blocks are great\n+        Ok(())\n+    };\n+\n+    let y = async { Ok(()) }; // comment\n+}"}, {"sha": "e23f04d28c02013cd3b26e383cff09fcd78706f0", "filename": "tests/target/async_fn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Ftarget%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c20d8a9e626eda5ecc283542735e708f3a84959/tests%2Ftarget%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fasync_fn.rs?ref=3c20d8a9e626eda5ecc283542735e708f3a84959", "patch": "@@ -0,0 +1,20 @@\n+// rustfmt-edition: Edition2018\n+\n+async fn bar() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+pub async fn baz() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+unsafe async fn foo() {\n+    async move { Ok(()) }\n+}\n+\n+unsafe async fn rust() {\n+    async move {\n+        // comment\n+        Ok(())\n+    }\n+}"}]}