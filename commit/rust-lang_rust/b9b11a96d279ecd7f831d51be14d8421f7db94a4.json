{"sha": "b9b11a96d279ecd7f831d51be14d8421f7db94a4", "node_id": "C_kwDOAAsO6NoAKGI5YjExYTk2ZDI3OWVjZDdmODMxZDUxYmUxNGQ4NDIxZjdkYjk0YTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T19:40:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T19:40:33Z"}, "message": "Auto merge of #7805 - aDotInTheVoid:transmute-num-bits, r=camsteffen\n\nAdd lint transmute_num_to_bytes\n\nCloses #7803\n\nchangelog: [`transmute_num_to_bytes`] new lint", "tree": {"sha": "b5b2a3de7da11e27081f600773a3a354ade39140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b2a3de7da11e27081f600773a3a354ade39140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b11a96d279ecd7f831d51be14d8421f7db94a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b11a96d279ecd7f831d51be14d8421f7db94a4", "html_url": "https://github.com/rust-lang/rust/commit/b9b11a96d279ecd7f831d51be14d8421f7db94a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b11a96d279ecd7f831d51be14d8421f7db94a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57dc0343bdd05ed13aa2704ca6a873843143f5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57dc0343bdd05ed13aa2704ca6a873843143f5a9", "html_url": "https://github.com/rust-lang/rust/commit/57dc0343bdd05ed13aa2704ca6a873843143f5a9"}, {"sha": "58969807ab7a79caecf33ad8a03df8a9793a23ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/58969807ab7a79caecf33ad8a03df8a9793a23ad", "html_url": "https://github.com/rust-lang/rust/commit/58969807ab7a79caecf33ad8a03df8a9793a23ad"}], "stats": {"total": 197, "additions": 194, "deletions": 3}, "files": [{"sha": "b1e837d363a26427aad728c80d1f1b38e6536c79", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -3025,6 +3025,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref\n [`transmutes_expressible_as_ptr_casts`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmutes_expressible_as_ptr_casts"}, {"sha": "7c8733f902257dd752f01defdf02cdbed05d717d", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -267,6 +267,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n     LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),"}, {"sha": "c51341bdf0c233bbcd11a18a7759994acc83d8bc", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -82,6 +82,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n     LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n     LintId::of(types::BORROWED_BOX),\n     LintId::of(types::TYPE_COMPLEXITY),"}, {"sha": "7d81fafe4c93daa5e2134409fbc2a3c2c25919c6", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -450,6 +450,7 @@ store.register_lints(&[\n     transmute::TRANSMUTE_INT_TO_BOOL,\n     transmute::TRANSMUTE_INT_TO_CHAR,\n     transmute::TRANSMUTE_INT_TO_FLOAT,\n+    transmute::TRANSMUTE_NUM_TO_BYTES,\n     transmute::TRANSMUTE_PTR_TO_PTR,\n     transmute::TRANSMUTE_PTR_TO_REF,\n     transmute::UNSOUND_COLLECTION_TRANSMUTE,"}, {"sha": "374999473a49aba4e58990309298100a59cf7b33", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n mod transmute_ptr_to_ref;\n mod transmute_ref_to_ref;\n@@ -261,6 +262,28 @@ declare_clippy_lint! {\n     \"transmutes from a float to an integer\"\n }\n \n+declare_clippy_lint! {\n+    /// # What it does\n+    /// Checks for transmutes from a number to an array of `u8`\n+    ///\n+    /// ### Why this is bad?\n+    /// Transmutes are dangerous and error-prone, whereas `to_ne_bytes`\n+    /// is intuitive and safe.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// unsafe {\n+    ///     let x: [u8; 8] = std::mem::transmute(1i64);\n+    /// }\n+    ///\n+    /// // should be\n+    /// let x: [u8; 8] = 0i64.to_ne_bytes();\n+    /// ```\n+    pub TRANSMUTE_NUM_TO_BYTES,\n+    complexity,\n+    \"transmutes from a number to an array of `u8`\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for transmutes from a pointer to a pointer, or\n@@ -330,6 +353,7 @@ declare_lint_pass!(Transmute => [\n     TRANSMUTE_INT_TO_BOOL,\n     TRANSMUTE_INT_TO_FLOAT,\n     TRANSMUTE_FLOAT_TO_INT,\n+    TRANSMUTE_NUM_TO_BYTES,\n     UNSOUND_COLLECTION_TRANSMUTE,\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n ]);\n@@ -365,6 +389,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 linted |= transmute_int_to_bool::check(cx, e, from_ty, to_ty, args);\n                 linted |= transmute_int_to_float::check(cx, e, from_ty, to_ty, args, const_context);\n                 linted |= transmute_float_to_int::check(cx, e, from_ty, to_ty, args, const_context);\n+                linted |= transmute_num_to_bytes::check(cx, e, from_ty, to_ty, args, const_context);\n                 linted |= unsound_collection_transmute::check(cx, e, from_ty, to_ty);\n \n                 if !linted {"}, {"sha": "dd5ded1c91a17f18337aadf7b6b651750ffc488d", "filename": "clippy_lints/src/transmute/transmute_num_to_bytes.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -0,0 +1,49 @@\n+use super::TRANSMUTE_NUM_TO_BYTES;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty, UintTy};\n+\n+/// Checks for `transmute_int_to_float` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    args: &'tcx [Expr<'_>],\n+    const_context: bool,\n+) -> bool {\n+    match (&from_ty.kind(), &to_ty.kind()) {\n+        (ty::Int(_) | ty::Uint(_) | ty::Float(_), ty::Array(arr_ty, _)) => {\n+            if !matches!(arr_ty.kind(), ty::Uint(UintTy::U8)) {\n+                return false;\n+            }\n+            if matches!(from_ty.kind(), ty::Float(_)) && const_context {\n+                // TODO: Remove when const_float_bits_conv is stabilized\n+                // rust#72447\n+                return false;\n+            }\n+\n+            span_lint_and_then(\n+                cx,\n+                TRANSMUTE_NUM_TO_BYTES,\n+                e.span,\n+                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                |diag| {\n+                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    diag.span_suggestion(\n+                        e.span,\n+                        \"consider using `to_ne_bytes()`\",\n+                        format!(\"{}.to_ne_bytes()\", arg.to_string()),\n+                        Applicability::Unspecified,\n+                    );\n+                },\n+            );\n+            true\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "6a7037d8f3826e962594836a03ee0ed9ffce9a7f", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -103,6 +103,33 @@ mod int_to_float {\n     }\n }\n \n+mod num_to_bytes {\n+    fn test() {\n+        unsafe {\n+            let _: [u8; 1] = std::mem::transmute(0u8);\n+            let _: [u8; 4] = std::mem::transmute(0u32);\n+            let _: [u8; 16] = std::mem::transmute(0u128);\n+            let _: [u8; 1] = std::mem::transmute(0i8);\n+            let _: [u8; 4] = std::mem::transmute(0i32);\n+            let _: [u8; 16] = std::mem::transmute(0i128);\n+            let _: [u8; 4] = std::mem::transmute(0.0f32);\n+            let _: [u8; 8] = std::mem::transmute(0.0f64);\n+        }\n+    }\n+    const fn test_const() {\n+        unsafe {\n+            let _: [u8; 1] = std::mem::transmute(0u8);\n+            let _: [u8; 4] = std::mem::transmute(0u32);\n+            let _: [u8; 16] = std::mem::transmute(0u128);\n+            let _: [u8; 1] = std::mem::transmute(0i8);\n+            let _: [u8; 4] = std::mem::transmute(0i32);\n+            let _: [u8; 16] = std::mem::transmute(0i128);\n+            let _: [u8; 4] = std::mem::transmute(0.0f32);\n+            let _: [u8; 8] = std::mem::transmute(0.0f64);\n+        }\n+    }\n+}\n+\n fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &str = unsafe { std::mem::transmute(b) };\n     let _: &mut str = unsafe { std::mem::transmute(mb) };"}, {"sha": "86537153e322897de816064f7b80041c88418c0d", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 89, "deletions": 3, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b9b11a96d279ecd7f831d51be14d8421f7db94a4/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9b11a96d279ecd7f831d51be14d8421f7db94a4/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=b9b11a96d279ecd7f831d51be14d8421f7db94a4", "patch": "@@ -140,19 +140,105 @@ error: transmute from a `i64` to a `f64`\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n+error: transmute from a `u8` to a `[u8; 1]`\n+  --> $DIR/transmute.rs:109:30\n+   |\n+LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n+   |\n+   = note: `-D clippy::transmute-num-to-bytes` implied by `-D warnings`\n+\n+error: transmute from a `u32` to a `[u8; 4]`\n+  --> $DIR/transmute.rs:110:30\n+   |\n+LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n+\n+error: transmute from a `u128` to a `[u8; 16]`\n+  --> $DIR/transmute.rs:111:31\n+   |\n+LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n+\n+error: transmute from a `i8` to a `[u8; 1]`\n+  --> $DIR/transmute.rs:112:30\n+   |\n+LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n+\n+error: transmute from a `i32` to a `[u8; 4]`\n+  --> $DIR/transmute.rs:113:30\n+   |\n+LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n+\n+error: transmute from a `i128` to a `[u8; 16]`\n+  --> $DIR/transmute.rs:114:31\n+   |\n+LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n+\n+error: transmute from a `f32` to a `[u8; 4]`\n+  --> $DIR/transmute.rs:115:30\n+   |\n+LL |             let _: [u8; 4] = std::mem::transmute(0.0f32);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f32.to_ne_bytes()`\n+\n+error: transmute from a `f64` to a `[u8; 8]`\n+  --> $DIR/transmute.rs:116:30\n+   |\n+LL |             let _: [u8; 8] = std::mem::transmute(0.0f64);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f64.to_ne_bytes()`\n+\n+error: transmute from a `u8` to a `[u8; 1]`\n+  --> $DIR/transmute.rs:121:30\n+   |\n+LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n+\n+error: transmute from a `u32` to a `[u8; 4]`\n+  --> $DIR/transmute.rs:122:30\n+   |\n+LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n+\n+error: transmute from a `u128` to a `[u8; 16]`\n+  --> $DIR/transmute.rs:123:31\n+   |\n+LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n+\n+error: transmute from a `i8` to a `[u8; 1]`\n+  --> $DIR/transmute.rs:124:30\n+   |\n+LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n+\n+error: transmute from a `i32` to a `[u8; 4]`\n+  --> $DIR/transmute.rs:125:30\n+   |\n+LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n+\n+error: transmute from a `i128` to a `[u8; 16]`\n+  --> $DIR/transmute.rs:126:31\n+   |\n+LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n+\n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:107:28\n+  --> $DIR/transmute.rs:134:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:108:32\n+  --> $DIR/transmute.rs:135:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 38 previous errors\n "}]}