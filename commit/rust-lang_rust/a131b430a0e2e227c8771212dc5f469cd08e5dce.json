{"sha": "a131b430a0e2e227c8771212dc5f469cd08e5dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzFiNDMwYTBlMmUyMjdjODc3MTIxMmRjNWY0NjljZDA4ZTVkY2U=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-11T09:57:39Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:39:39Z"}, "message": "core::str rename [r]index -> [r]index_bytes", "tree": {"sha": "78212a18a6b3404c2283cb96d796168418479456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78212a18a6b3404c2283cb96d796168418479456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a131b430a0e2e227c8771212dc5f469cd08e5dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a131b430a0e2e227c8771212dc5f469cd08e5dce", "html_url": "https://github.com/rust-lang/rust/commit/a131b430a0e2e227c8771212dc5f469cd08e5dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a131b430a0e2e227c8771212dc5f469cd08e5dce/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4339307359eaca1ae1fd5de96eec746e96a90564", "url": "https://api.github.com/repos/rust-lang/rust/commits/4339307359eaca1ae1fd5de96eec746e96a90564", "html_url": "https://github.com/rust-lang/rust/commit/4339307359eaca1ae1fd5de96eec746e96a90564"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "aa042ea1ae4682a68e5c4137b4c4052b15628dd5", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -651,7 +651,7 @@ fn cmd_install(c: cargo) unsafe {\n \n     if str::starts_with(target, \"uuid:\") {\n         let uuid = rest(target, 5u);\n-        let idx = str::index(uuid, '/' as u8);\n+        let idx = str::index_byte(uuid, '/' as u8);\n         if idx != -1 {\n             let source = str::unsafe::slice_bytes(uuid, 0u, idx as uint);\n             uuid = str::unsafe::slice_bytes(uuid, idx as uint + 1u,\n@@ -662,7 +662,7 @@ fn cmd_install(c: cargo) unsafe {\n         }\n     } else {\n         let name = target;\n-        let idx = str::index(name, '/' as u8);\n+        let idx = str::index_byte(name, '/' as u8);\n         if idx != -1 {\n             let source = str::unsafe::slice_bytes(name, 0u, idx as uint);\n             name = str::unsafe::slice_bytes(name, idx as uint + 1u,"}, {"sha": "4f32ad4a31fc72affd8f5b0398c0fa8c5424a7b3", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -109,7 +109,7 @@ mod write {\n     // Decides what to call an intermediate file, given the name of the output\n     // and the extension to use.\n     fn mk_intermediate_name(output_path: str, extension: str) -> str unsafe {\n-        let dot_pos = str::index(output_path, '.' as u8);\n+        let dot_pos = str::index_byte(output_path, '.' as u8);\n         let stem;\n         if dot_pos < 0 {\n             stem = output_path;"}, {"sha": "27f968b1156f7eef1c053b920d5ad008c8b6f9f2", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -125,7 +125,7 @@ fn get_line(fm: filemap, line: int) -> str unsafe {\n         // the remainder of the file, which is undesirable.\n         end = str::byte_len(*fm.src);\n         let rest = str::unsafe::slice_bytes(*fm.src, begin, end);\n-        let newline = str::index(rest, '\\n' as u8);\n+        let newline = str::index_byte(rest, '\\n' as u8);\n         if newline != -1 { end = begin + (newline as uint); }\n     }\n     ret str::unsafe::slice_bytes(*fm.src, begin, end);"}, {"sha": "e3f452f68704014d21e2b5ab1ea4565eeef8aaf6", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -284,7 +284,7 @@ fn check_variants_T<T: copy>(\n }\n \n fn last_part(filename: str) -> str unsafe {\n-  let ix = str::rindex(filename, 47u8 /* '/' */);\n+  let ix = str::rindex_byte(filename, 47u8 /* '/' */);\n   assert ix >= 0;\n   str::unsafe::slice_bytes(filename, ix as uint + 1u, str::byte_len(filename) - 3u)\n }"}, {"sha": "bc96475990f99bdb742675fabded972930f4bed0", "filename": "src/libcore/str.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -70,8 +70,10 @@ export\n    lines_iter,\n \n    // Searching\n-   index,\n-   rindex,\n+   //index,\n+   //rindex,\n+   index_byte,\n+   rindex_byte,\n    find,\n    contains,\n    starts_with,\n@@ -876,7 +878,7 @@ no match is found.\n \n FIXME: UTF-8\n */\n-fn index(s: str, c: u8) -> int {\n+fn index_byte(s: str, c: u8) -> int {\n     let i: int = 0;\n     for k: u8 in s { if k == c { ret i; } i += 1; }\n     ret -1;\n@@ -890,7 +892,7 @@ if no match is found.\n \n FIXME: UTF-8\n */\n-fn rindex(s: str, c: u8) -> int {\n+fn rindex_byte(s: str, c: u8) -> int {\n     let n: int = byte_len(s) as int;\n     while n >= 0 { if s[n] == c { ret n; } n -= 1; }\n     ret n;\n@@ -1443,12 +1445,12 @@ mod tests {\n \n     #[test]\n     fn test_index_and_rindex() {\n-        assert (index(\"hello\", 'e' as u8) == 1);\n-        assert (index(\"hello\", 'o' as u8) == 4);\n-        assert (index(\"hello\", 'z' as u8) == -1);\n-        assert (rindex(\"hello\", 'l' as u8) == 3);\n-        assert (rindex(\"hello\", 'h' as u8) == 0);\n-        assert (rindex(\"hello\", 'z' as u8) == -1);\n+        assert (index_byte(\"hello\", 'e' as u8) == 1);\n+        assert (index_byte(\"hello\", 'o' as u8) == 4);\n+        assert (index_byte(\"hello\", 'z' as u8) == -1);\n+        assert (rindex_byte(\"hello\", 'l' as u8) == 3);\n+        assert (rindex_byte(\"hello\", 'h' as u8) == 0);\n+        assert (rindex_byte(\"hello\", 'z' as u8) == -1);\n     }\n \n     #[test]"}, {"sha": "874d92cc4b9d463fa3b3ffe857f3b05938015a77", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -44,9 +44,9 @@ The dirname of \"/usr/share\" will be \"/usr\", but the dirname of\n If the path is not prefixed with a directory, then \".\" is returned.\n */\n fn dirname(p: path) -> path unsafe {\n-    let i: int = str::rindex(p, os_fs::path_sep as u8);\n+    let i: int = str::rindex_byte(p, os_fs::path_sep as u8);\n     if i == -1 {\n-        i = str::rindex(p, os_fs::alt_path_sep as u8);\n+        i = str::rindex_byte(p, os_fs::alt_path_sep as u8);\n         if i == -1 { ret \".\"; }\n     }\n     ret str::unsafe::slice_bytes(p, 0u, i as uint);\n@@ -64,9 +64,9 @@ the provided path. If an empty path is provided or the path ends\n with a path separator then an empty path is returned.\n */\n fn basename(p: path) -> path unsafe {\n-    let i: int = str::rindex(p, os_fs::path_sep as u8);\n+    let i: int = str::rindex_byte(p, os_fs::path_sep as u8);\n     if i == -1 {\n-        i = str::rindex(p, os_fs::alt_path_sep as u8);\n+        i = str::rindex_byte(p, os_fs::alt_path_sep as u8);\n         if i == -1 { ret p; }\n     }\n     let len = str::byte_len(p);"}, {"sha": "33674fe67f38df0ad078885676e731c692d6af22", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a131b430a0e2e227c8771212dc5f469cd08e5dce/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=a131b430a0e2e227c8771212dc5f469cd08e5dce", "patch": "@@ -230,7 +230,7 @@ fn getopts(args: [str], opts: [opt]) -> result unsafe {\n             let i_arg = option::none::<str>;\n             if cur[1] == '-' as u8 {\n                 let tail = str::unsafe::slice_bytes(cur, 2u, curlen);\n-                let eq = str::index(tail, '=' as u8);\n+                let eq = str::index_byte(tail, '=' as u8);\n                 if eq == -1 {\n                     names = [long(tail)];\n                 } else {"}]}