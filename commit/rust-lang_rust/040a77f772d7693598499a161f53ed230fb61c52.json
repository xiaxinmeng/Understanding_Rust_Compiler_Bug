{"sha": "040a77f772d7693598499a161f53ed230fb61c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MGE3N2Y3NzJkNzY5MzU5ODQ5OWExNjFmNTNlZDIzMGZiNjFjNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-23T20:08:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-23T20:08:49Z"}, "message": "Auto merge of #29952 - petrochenkov:depr, r=brson\n\nPart of https://github.com/rust-lang/rust/issues/29935\n\nThe deprecation lint is still called \"deprecated\", so people can continue using `#[allow(deprecated)]` and similar things.", "tree": {"sha": "71f1f369c9175a3655dff16f98465da8f2bce375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f1f369c9175a3655dff16f98465da8f2bce375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040a77f772d7693598499a161f53ed230fb61c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040a77f772d7693598499a161f53ed230fb61c52", "html_url": "https://github.com/rust-lang/rust/commit/040a77f772d7693598499a161f53ed230fb61c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040a77f772d7693598499a161f53ed230fb61c52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9a97529d9fd112f338501e68e33bac1c41d1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9a97529d9fd112f338501e68e33bac1c41d1a4", "html_url": "https://github.com/rust-lang/rust/commit/8e9a97529d9fd112f338501e68e33bac1c41d1a4"}, {"sha": "a613059e3fcfb751f7664f67a4a6c99faf436483", "url": "https://api.github.com/repos/rust-lang/rust/commits/a613059e3fcfb751f7664f67a4a6c99faf436483", "html_url": "https://github.com/rust-lang/rust/commit/a613059e3fcfb751f7664f67a4a6c99faf436483"}], "stats": {"total": 239, "additions": 126, "deletions": 113}, "files": [{"sha": "2ce21b47dfb1359af18fac3a7da0ddde774c0779", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -2327,7 +2327,7 @@ The currently implemented features of the reference compiler are:\n \n * `staged_api` - Allows usage of stability markers and `#![staged_api]` in a\n                  crate. Stability markers are also attributes: `#[stable]`,\n-                 `#[unstable]`, and `#[deprecated]` are the three levels.\n+                 `#[unstable]`, and `#[rustc_deprecated]` are the three levels.\n \n * `start` - Allows use of the `#[start]` attribute, which changes the entry point\n             into a Rust program. This capability, especially the signature for the"}, {"sha": "d6cc25177e4ae63797a58ca7c8564a95076a7ce0", "filename": "src/etc/featureck.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -206,7 +206,7 @@\n         lang_stable_since = language_feature_stats[name][4]\n         lib_stable_since = lib_feature_stats[name][4]\n \n-        if lang_status != lib_status and lib_status != \"deprecated\":\n+        if lang_status != lib_status and lib_status != \"rustc_deprecated\":\n             print(\"error: feature '%s' has lang status %s \" +\n                   \"but lib status %s\" % (name, lang_status, lib_status))\n             errors = True"}, {"sha": "dba9b71c61cd48d76d43d4b597b05c2c2993458f", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -385,7 +385,7 @@ impl<T: ?Sized> Deref for Arc<T> {\n impl<T: Clone> Arc<T> {\n     #[unstable(feature = \"arc_make_unique\", reason = \"renamed to Arc::make_mut\",\n                issue = \"27718\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"renamed to Arc::make_mut\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to Arc::make_mut\")]\n     pub fn make_unique(this: &mut Self) -> &mut T {\n         Arc::make_mut(this)\n     }"}, {"sha": "3e87b7ebea8a2e39dd497fdb3f6f9c7f270e7121", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -74,6 +74,8 @@\n #![no_std]\n #![cfg_attr(not(stage0), needs_allocator)]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]"}, {"sha": "0ea5ecfda79e09a9f60538d2da7a62cc72bcf7d4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -362,7 +362,7 @@ impl<T: Clone> Rc<T> {\n     #[inline]\n     #[unstable(feature = \"rc_make_unique\", reason = \"renamed to Rc::make_mut\",\n                issue = \"27718\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"renamed to Rc::make_mut\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to Rc::make_mut\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         Rc::make_mut(self)\n     }"}, {"sha": "92d9ee51d2a3b0fe6c33fea03667736f9425cb2b", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -241,7 +241,7 @@ impl<T: Ord> BinaryHeap<T> {\n     #[unstable(feature = \"binary_heap_extras\",\n                reason = \"needs to be audited\",\n                issue = \"28147\")]\n-    #[deprecated(since = \"1.5.0\", reason = \"use BinaryHeap::from instead\")]\n+    #[rustc_deprecated(since = \"1.5.0\", reason = \"use BinaryHeap::from instead\")]\n     pub fn from_vec(vec: Vec<T>) -> BinaryHeap<T> {\n         BinaryHeap::from(vec)\n     }"}, {"sha": "c64a62ecdaf2d72e6d386355d86949ace65546a0", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -161,7 +161,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_b\",\n                reason = \"probably want this to be on the type, eventually\",\n                issue = \"27795\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API\")]\n     pub fn with_b(b: usize) -> BTreeMap<K, V> {\n         assert!(b > 1, \"B must be greater than 1\");\n         BTreeMap {"}, {"sha": "af43a5e108f2531033790cfa5d8a960f5ddfd6a9", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -105,7 +105,7 @@ impl<T: Ord> BTreeSet<T> {\n     #[unstable(feature = \"btree_b\",\n                reason = \"probably want this to be on the type, eventually\",\n                issue = \"27795\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API\")]\n     #[allow(deprecated)]\n     pub fn with_b(b: usize) -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::with_b(b) }"}, {"sha": "b9b560df0b6588c84d9c89659866418928b284f1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -37,6 +37,8 @@\n // SNAP 1af31d4\n #![allow(unused_attributes)]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(alloc)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "9e594fc6b992647b88abb0f4a6b7e8373dce39de", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -862,7 +862,7 @@ pub trait SliceConcatExt<T: ?Sized> {\n     /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n+    #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n     fn connect(&self, sep: &T) -> Self::Output;\n }\n "}, {"sha": "b2a9387680672632b033fca18ee4b5f97c4849ab", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -665,7 +665,7 @@ impl str {\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n     #[inline]\n     #[allow(deprecated)]\n     pub fn lines_any(&self) -> LinesAny {"}, {"sha": "adcfe4cbc2894b86338c55016f515cf6ebe7518b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -842,7 +842,7 @@ impl String {\n     #[unstable(feature = \"box_str2\",\n                reason = \"recently added, matches RFC\",\n                issue = \"27785\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"renamed to `into_boxed_str`\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to `into_boxed_str`\")]\n     pub fn into_boxed_slice(self) -> Box<str> {\n         self.into_boxed_str()\n     }"}, {"sha": "bab4d1a9abc9764215c9c5e9d9545ec71bfabae0", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -1058,7 +1058,7 @@ impl<T> VecDeque<T> {\n     #[unstable(feature = \"deque_extras\",\n                reason = \"the naming of this function may be altered\",\n                issue = \"27788\")]\n-    #[deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_back\")]\n+    #[rustc_deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_back\")]\n     pub fn swap_back_remove(&mut self, index: usize) -> Option<T> {\n         self.swap_remove_back(index)\n     }\n@@ -1101,7 +1101,7 @@ impl<T> VecDeque<T> {\n     #[unstable(feature = \"deque_extras\",\n                reason = \"the naming of this function may be altered\",\n                issue = \"27788\")]\n-    #[deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_front\")]\n+    #[rustc_deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_front\")]\n     pub fn swap_front_remove(&mut self, index: usize) -> Option<T> {\n         self.swap_remove_front(index)\n     }"}, {"sha": "98359b70ca165f68f521982f84b0907544fd3c66", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -4303,7 +4303,7 @@ impl<A> Iterator for StepBy<A, RangeFrom<A>> where\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n-#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n #[allow(deprecated)]\n pub struct RangeInclusive<A> {\n     range: ops::Range<A>,\n@@ -4315,7 +4315,7 @@ pub struct RangeInclusive<A> {\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n-#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n #[allow(deprecated)]\n pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n     where A: Step + One + Clone\n@@ -4329,7 +4329,7 @@ pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n-#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n #[allow(deprecated)]\n impl<A> Iterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n@@ -4365,7 +4365,7 @@ impl<A> Iterator for RangeInclusive<A> where\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n-#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n #[allow(deprecated)]\n impl<A> DoubleEndedIterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n@@ -4743,7 +4743,7 @@ pub fn once<T>(value: T) -> Once<T> {\n ///\n /// If two sequences are equal up until the point where one ends,\n /// the shorter sequence compares less.\n-#[deprecated(since = \"1.4.0\", reason = \"use the equivalent methods on `Iterator` instead\")]\n+#[rustc_deprecated(since = \"1.4.0\", reason = \"use the equivalent methods on `Iterator` instead\")]\n #[unstable(feature = \"iter_order_deprecated\", reason = \"needs review and revision\",\n            issue = \"27737\")]\n pub mod order {"}, {"sha": "3ebf9d6be63f2fd93270fa9f293c61807b56bfb7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -68,6 +68,8 @@\n #![no_core]\n #![deny(missing_docs)]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_defaults)]\n #![feature(concat_idents)]\n@@ -80,7 +82,6 @@\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n #![feature(reflect)]\n-#![feature(rustc_attrs)]\n #![feature(unwind_attributes)]\n #![cfg_attr(stage0, feature(simd))]\n #![cfg_attr(not(stage0), feature(repr_simd, platform_intrinsics))]"}, {"sha": "ee6e708ea327defa7ad3c8e68db99469b1435ed1", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -159,7 +159,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n+#[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n pub fn min_align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }\n@@ -176,7 +176,7 @@ pub fn min_align_of<T>() -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n+#[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }"}, {"sha": "209cebeaf1bc322d8d6769b7825b0052c7014521", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -290,7 +290,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"as_slice\",\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     #[allow(deprecated)]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n@@ -695,7 +695,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     #[allow(deprecated)]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {"}, {"sha": "37c40f96b0f7136e4b8bf913c9e8762b1ede5ee5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -410,7 +410,7 @@ impl<T, E> Result<T, E> {\n     #[inline]\n     #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     #[allow(deprecated)]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n@@ -445,7 +445,7 @@ impl<T, E> Result<T, E> {\n     #[unstable(feature = \"as_slice\",\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     #[allow(deprecated)]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {"}, {"sha": "697f96ddefbf8a05fb0bda55fcdd1174bd501d8a", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -24,7 +24,7 @@\n #![unstable(feature = \"core_simd\",\n             reason = \"needs an RFC to flesh out the design\",\n             issue = \"27731\")]\n-#![deprecated(since = \"1.3.0\",\n+#![rustc_deprecated(since = \"1.3.0\",\n               reason = \"use the external `simd` crate instead\")]\n \n #![allow(non_camel_case_types)]"}, {"sha": "f92692a9d713923c9539970e98cb3c79b8011e15", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -1441,7 +1441,7 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n /// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n-#[deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n pub fn ref_slice<A>(s: &A) -> &[A] {\n     unsafe {\n         from_raw_parts(s, 1)\n@@ -1450,7 +1450,7 @@ pub fn ref_slice<A>(s: &A) -> &[A] {\n \n /// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n-#[deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n pub fn mut_ref_slice<A>(s: &mut A) -> &mut [A] {\n     unsafe {\n         from_raw_parts_mut(s, 1)"}, {"sha": "127c4287f32ded33d8f4471e20969c774456ad51", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -962,7 +962,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n \n /// Created with the method `.lines_any()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n+#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n #[derive(Clone)]\n #[allow(deprecated)]\n pub struct LinesAny<'a>(Lines<'a>);"}, {"sha": "b5ba219f49525e3ca8e2b3739c093277d77b4628", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n             // Emit errors for non-staged-api crates.\n             for attr in attrs {\n                 let tag = attr.name();\n-                if tag == \"unstable\" || tag == \"stable\" || tag == \"deprecated\" {\n+                if tag == \"unstable\" || tag == \"stable\" || tag == \"rustc_deprecated\" {\n                     attr::mark_used(attr);\n                     self.tcx.sess.span_err(attr.span(), \"stability attributes may not be used \\\n                                                          outside of the standard library\");"}, {"sha": "c4459ef5273254ead82e02ec238a732086df8b76", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -577,10 +577,10 @@ impl LateLintPass for MissingDebugImplementations {\n declare_lint! {\n     DEPRECATED,\n     Warn,\n-    \"detects use of #[deprecated] items\"\n+    \"detects use of #[rustc_deprecated] items\"\n }\n \n-/// Checks for use of items with `#[deprecated]` attributes\n+/// Checks for use of items with `#[rustc_deprecated]` attributes\n #[derive(Copy, Clone)]\n pub struct Stability;\n "}, {"sha": "af92e96fcdfdc9202636aaaea77ba1c8b214072b", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -34,6 +34,8 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(core_char_ext)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]"}, {"sha": "4d9f5d5fdd4595a5a1738d09f8b6ddf50ce31535", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -129,7 +129,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n \n /// An iterator that decodes UTF-16 encoded codepoints from a vector\n /// of `u16`s.\n-#[deprecated(since = \"1.4.0\", reason = \"renamed to `char::DecodeUtf16`\")]\n+#[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to `char::DecodeUtf16`\")]\n #[unstable(feature = \"decode_utf16\", reason = \"not exposed in std\", issue = \"27830\")]\n #[allow(deprecated)]\n #[derive(Clone)]\n@@ -138,7 +138,8 @@ pub struct Utf16Items<'a> {\n }\n \n /// The possibilities for values decoded from a `u16` stream.\n-#[deprecated(since = \"1.4.0\", reason = \"`char::DecodeUtf16` uses `Result<char, u16>` instead\")]\n+#[rustc_deprecated(since = \"1.4.0\",\n+                   reason = \"`char::DecodeUtf16` uses `Result<char, u16>` instead\")]\n #[unstable(feature = \"decode_utf16\", reason = \"not exposed in std\", issue = \"27830\")]\n #[allow(deprecated)]\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n@@ -162,7 +163,7 @@ impl Utf16Item {\n     }\n }\n \n-#[deprecated(since = \"1.4.0\", reason = \"use `char::DecodeUtf16` instead\")]\n+#[rustc_deprecated(since = \"1.4.0\", reason = \"use `char::DecodeUtf16` instead\")]\n #[unstable(feature = \"decode_utf16\", reason = \"not exposed in std\", issue = \"27830\")]\n #[allow(deprecated)]\n impl<'a> Iterator for Utf16Items<'a> {\n@@ -210,7 +211,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n ///                     LoneSurrogate(0xD834)]);\n /// }\n /// ```\n-#[deprecated(since = \"1.4.0\", reason = \"renamed to `char::decode_utf16`\")]\n+#[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to `char::decode_utf16`\")]\n #[unstable(feature = \"decode_utf16\", reason = \"not exposed in std\", issue = \"27830\")]\n #[allow(deprecated)]\n pub fn utf16_items<'a>(v: &'a [u16]) -> Utf16Items<'a> {"}, {"sha": "62ec23ccb20002624809c82d1153f6dd5bf8e504", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -16,7 +16,7 @@\n             reason = \"API has not been scrutinized and is highly likely to \\\n                       either disappear or change\",\n             issue = \"27810\")]\n-#![deprecated(since = \"1.5.0\", reason = \"replaced with crates.io crates\")]\n+#![rustc_deprecated(since = \"1.5.0\", reason = \"replaced with crates.io crates\")]\n #![allow(missing_docs)]\n #![allow(deprecated)]\n "}, {"sha": "40fb450bea195425c04c2acb576a9d484fbc3a6c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -213,7 +213,7 @@ impl CString {\n     /// using the pointer.\n     #[unstable(feature = \"cstr_memory2\", reason = \"recently added\",\n                issue = \"27769\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n     pub unsafe fn from_ptr(ptr: *const c_char) -> CString {\n         CString::from_raw(ptr as *mut _)\n     }\n@@ -240,7 +240,7 @@ impl CString {\n     /// Failure to call `from_raw` will lead to a memory leak.\n     #[unstable(feature = \"cstr_memory2\", reason = \"recently added\",\n                issue = \"27769\")]\n-    #[deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n+    #[rustc_deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n     pub fn into_ptr(self) -> *const c_char {\n         self.into_raw() as *const _\n     }"}, {"sha": "93ee8b47a501705b65a8210e1d950785240979df", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -922,7 +922,7 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// # Ok(())\n /// # }\n /// ```\n-#[deprecated(since = \"1.1.0\",\n+#[rustc_deprecated(since = \"1.1.0\",\n              reason = \"replaced with std::os::unix::fs::symlink and \\\n                        std::os::windows::fs::{symlink_file, symlink_dir}\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1176,7 +1176,7 @@ impl Iterator for WalkDir {\n                      change and some methods may be removed.  For stable code, \\\n                      see the std::fs::metadata function.\",\n            issue = \"27725\")]\n-#[deprecated(since = \"1.5.0\", reason = \"replaced with inherent methods\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with inherent methods\")]\n pub trait PathExt {\n     /// Gets information on the file, directory, etc at this path.\n     ///"}, {"sha": "9700e95ed0fe3edd0f9a414efbf930183542b958", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -216,6 +216,8 @@\n #![cfg_attr(stage0, allow(unused_attributes))]\n #![cfg_attr(stage0, allow(improper_ctypes))]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]"}, {"sha": "ab15867d365052e829ba9d28e95f7a77c04f29f8", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -129,7 +129,7 @@ impl f32 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n                issue = \"27736\")]\n-    #[deprecated(since = \"1.4.0\",\n+    #[rustc_deprecated(since = \"1.4.0\",\n                  reason = \"unclear how useful or correct this is\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)"}, {"sha": "cad42ee64f11f9a2b89bcda1138fa68be76509f3", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -86,7 +86,7 @@ impl f64 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n                issue = \"27736\")]\n-    #[deprecated(since = \"1.4.0\",\n+    #[rustc_deprecated(since = \"1.4.0\",\n                  reason = \"unclear how useful or correct this is\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n@@ -355,7 +355,7 @@ impl f64 {\n     pub fn is_sign_positive(self) -> bool { num::Float::is_positive(self) }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n     #[inline]\n     pub fn is_positive(self) -> bool { num::Float::is_positive(self) }\n \n@@ -380,7 +380,7 @@ impl f64 {\n     pub fn is_sign_negative(self) -> bool { num::Float::is_negative(self) }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n     #[inline]\n     pub fn is_negative(self) -> bool { num::Float::is_negative(self) }\n "}, {"sha": "d817a261f7c9493c53a2d20f361942a65d689b68", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -166,7 +166,7 @@ impl Condvar {\n     /// Like `wait`, the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n+    #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n     #[allow(deprecated)]\n     pub fn wait_timeout_ms<'a, T>(&self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n@@ -290,7 +290,8 @@ impl StaticCondvar {\n     #[unstable(feature = \"static_condvar\",\n                reason = \"may be merged with Condvar in the future\",\n                issue = \"27717\")]\n-    #[deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::StaticCondvar::wait_timeout`\")]\n+    #[rustc_deprecated(since = \"1.6.0\",\n+                       reason = \"replaced by `std::sync::StaticCondvar::wait_timeout`\")]\n     pub fn wait_timeout_ms<'a, T>(&'static self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n         match self.wait_timeout(guard, Duration::from_millis(ms as u64)) {"}, {"sha": "eaa32cdb3424d8cc9e7da8256f9cf8f7d460cca9", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -392,7 +392,7 @@ pub fn catch_panic<F, R>(f: F) -> Result<R>\n /// this function will not return early due to a signal being received or a\n /// spurious wakeup.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::sleep`\")]\n+#[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::sleep`\")]\n pub fn sleep_ms(ms: u32) {\n     sleep(Duration::from_millis(ms as u64))\n }\n@@ -459,7 +459,7 @@ pub fn park() {\n ///\n /// See the module doc for more detail.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n+#[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n pub fn park_timeout_ms(ms: u32) {\n     park_timeout(Duration::from_millis(ms as u64))\n }"}, {"sha": "153a81e6c54756099562bf026ab7035d049e1c42", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -381,7 +381,7 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n     }\n }\n \n-/// Represents the #[stable], #[unstable] and #[deprecated] attributes.\n+/// Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.\n #[derive(RustcEncodable, RustcDecodable, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Stability {\n     pub level: StabilityLevel,\n@@ -420,7 +420,7 @@ fn find_stability_generic<'a, I>(diagnostic: &SpanHandler,\n     'outer: for attr in attrs_iter {\n         let tag = attr.name();\n         let tag = &*tag;\n-        if tag != \"deprecated\" && tag != \"unstable\" && tag != \"stable\" {\n+        if tag != \"rustc_deprecated\" && tag != \"unstable\" && tag != \"stable\" {\n             continue // not a stability level\n         }\n \n@@ -443,9 +443,9 @@ fn find_stability_generic<'a, I>(diagnostic: &SpanHandler,\n             };\n \n             match tag {\n-                \"deprecated\" => {\n+                \"rustc_deprecated\" => {\n                     if depr.is_some() {\n-                        diagnostic.span_err(item_sp, \"multiple deprecated attributes\");\n+                        diagnostic.span_err(item_sp, \"multiple rustc_deprecated attributes\");\n                         break\n                     }\n \n@@ -586,7 +586,7 @@ fn find_stability_generic<'a, I>(diagnostic: &SpanHandler,\n             }\n             stab.depr = Some(depr);\n         } else {\n-            diagnostic.span_err(item_sp, \"deprecated attribute must be paired with \\\n+            diagnostic.span_err(item_sp, \"rustc_deprecated attribute must be paired with \\\n                                           either stable or unstable attribute\");\n         }\n     }"}, {"sha": "c8db3853cc2098f1000c1639af2ab140425587ec", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -600,7 +600,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     #[unstable(feature = \"rustc_private\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\",\n+    #[rustc_deprecated(since = \"1.0.0\",\n                  reason = \"Replaced with `expander().fold_expr()`\")]\n     pub fn expand_expr(&mut self, e: P<ast::Expr>) -> P<ast::Expr> {\n         self.expander().fold_expr(e)"}, {"sha": "1663bdca51f062231f6af3e73392e16bbc609cba", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -370,7 +370,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n-    (\"deprecated\", Whitelisted, Ungated),\n+    (\"rustc_deprecated\", Whitelisted, Ungated),\n     (\"must_use\", Whitelisted, Ungated),\n     (\"stable\", Whitelisted, Ungated),\n     (\"unstable\", Whitelisted, Ungated),"}, {"sha": "59cc380b0ec2967876404a61fad88b23def304ab", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -26,6 +26,8 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n+#![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(associated_consts)]\n #![feature(drain)]\n #![feature(filling_drop)]"}, {"sha": "dac3b0541651c560c148d72614b657ef77368de4", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -129,7 +129,7 @@ impl<T> SmallVector<T> {\n \n     /// Deprecated: use `into_iter`.\n     #[unstable(feature = \"rustc_private\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"use into_iter\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"use into_iter\")]\n     pub fn move_iter(self) -> IntoIter<T> {\n         self.into_iter()\n     }"}, {"sha": "82c63a6c2083ba2a93a26841251c66116c9769fa", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -30,7 +30,7 @@ pub mod stable_mod {\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n pub mod unstable_mod {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n \n     pub fn unstable() {}"}, {"sha": "4116c2304972efc01192e2f1d7b7660cb0212c7a", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -15,7 +15,7 @@\n #![unstable(feature = \"test_feature\", issue = \"0\")]\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn foo() -> usize {\n     20\n }"}, {"sha": "555e88c34892780e0ad5b47bc8dae03c0e4d82a7", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -14,17 +14,17 @@\n #![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated() {}\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_text() {}\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable() {}\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -42,17 +42,17 @@ pub struct MethodTester;\n \n impl MethodTester {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated(&self) {}\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -69,17 +69,17 @@ impl MethodTester {\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n pub trait Trait {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated(&self) {}\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -100,12 +100,12 @@ impl Trait for MethodTester {}\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedStruct {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n }\n@@ -119,10 +119,10 @@ pub struct StableStruct {\n }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnitStruct;\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct UnstableUnitStruct;\n@@ -132,10 +132,10 @@ pub struct StableUnitStruct;\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n pub enum Enum {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedVariant,\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedUnstableVariant,\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     UnstableVariant,\n@@ -145,10 +145,10 @@ pub enum Enum {\n }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "c4a53d8477afb52830c0015c0c553f5adb3ab7f6", "filename": "src/test/auxiliary/lint_stability_fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -18,7 +18,7 @@ pub struct Stable {\n     pub inherit: u8, // it's a lie (stable doesn't inherit)\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override1: u8,\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n@@ -27,14 +27,14 @@ pub struct Stable {\n pub struct Stable2(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n                    #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8,\n                    #[unstable(feature = \"test_feature\", issue = \"0\")]\n-                   #[deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n+                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct Unstable {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n@@ -43,10 +43,10 @@ pub struct Unstable {\n pub struct Unstable2(pub u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n                      #[unstable(feature = \"test_feature\", issue = \"0\")]\n-                     #[deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n+                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -56,7 +56,7 @@ pub struct Deprecated {\n }\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated2(pub u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n                        #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8);"}, {"sha": "a4756cd964d6d6c3bff3a31d162254f20f31dd48", "filename": "src/test/compile-fail/issue-17337.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -18,7 +18,7 @@ struct Foo;\n \n impl Foo {\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn foo(self) {}\n }\n "}, {"sha": "3a86bcc0246016f08e282ca6d475a849082e9ec3", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -191,7 +191,7 @@ mod this_crate {\n         inherit: u8,\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override1: u8,\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n@@ -200,14 +200,14 @@ mod this_crate {\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                    #[unstable(feature = \"test_feature\", issue = \"0\")]\n-                   #[deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n@@ -216,10 +216,10 @@ mod this_crate {\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                      #[unstable(feature = \"test_feature\", issue = \"0\")]\n-                     #[deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -229,7 +229,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                        #[unstable(feature = \"test_feature\", issue = \"0\")] u8);"}, {"sha": "30d84786edeb6e90234e5c0ae9cb0c853bcb38d0", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -262,10 +262,10 @@ mod inheritance {\n \n mod this_crate {\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -283,10 +283,10 @@ mod this_crate {\n \n     impl MethodTester {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -302,10 +302,10 @@ mod this_crate {\n \n     pub trait Trait {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -322,7 +322,7 @@ mod this_crate {\n     impl Trait for MethodTester {}\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -336,7 +336,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub struct UnstableUnitStruct;\n@@ -345,7 +345,7 @@ mod this_crate {\n \n     pub enum Enum {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         UnstableVariant,\n@@ -355,7 +355,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub struct UnstableTupleStruct(isize);\n@@ -476,23 +476,23 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body(); //~ ERROR use of deprecated item: text\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n-        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body(); //~ ERROR use of deprecated item: text\n         }\n     }\n \n     #[unstable(feature = \"test_feature\", issue = \"0\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }\n     }"}, {"sha": "35256f21f925363c3da18542c2dd18c3e0243387", "filename": "src/test/compile-fail/stability-attribute-non-staged.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fstability-attribute-non-staged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fstability-attribute-non-staged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-non-staged.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -10,5 +10,5 @@\n \n #[unstable] //~ ERROR: stability attributes may not be used\n #[stable] //~ ERROR: stability attributes may not be used\n-#[deprecated] //~ ERROR: stability attributes may not be used\n+#[rustc_deprecated] //~ ERROR: stability attributes may not be used\n fn main() { }"}, {"sha": "038d6a8ec072560e091137e1f7076b2aa5605c9e", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a77f772d7693598499a161f53ed230fb61c52/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=040a77f772d7693598499a161f53ed230fb61c52", "patch": "@@ -46,11 +46,11 @@ mod bogus_attribute_types_2 {\n     fn f4() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[deprecated] //~ ERROR incorrect stability attribute type\n+    #[rustc_deprecated] //~ ERROR incorrect stability attribute type\n     fn f5() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[deprecated = \"a\"] //~ ERROR incorrect stability attribute type\n+    #[rustc_deprecated = \"a\"] //~ ERROR incorrect stability attribute type\n     fn f6() { }\n }\n \n@@ -70,7 +70,7 @@ mod missing_version {\n     fn f1() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[deprecated(reason = \"a\")] //~ ERROR missing 'since'\n+    #[rustc_deprecated(reason = \"a\")] //~ ERROR missing 'since'\n     fn f2() { }\n }\n \n@@ -87,12 +87,12 @@ fn multiple2() { } //~ ERROR multiple stability levels\n fn multiple3() { } //~ ERROR multiple stability levels\n \n #[stable(feature = \"a\", since = \"b\")]\n-#[deprecated(since = \"b\", reason = \"text\")]\n-#[deprecated(since = \"b\", reason = \"text\")]\n-fn multiple4() { } //~ ERROR multiple deprecated attributes\n+#[rustc_deprecated(since = \"b\", reason = \"text\")]\n+#[rustc_deprecated(since = \"b\", reason = \"text\")]\n+fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes\n //~^ ERROR Invalid stability or deprecation version found\n \n-#[deprecated(since = \"a\", reason = \"text\")]\n-fn deprecated_without_unstable_or_stable() { } //~ ERROR deprecated attribute must be paired\n+#[rustc_deprecated(since = \"a\", reason = \"text\")]\n+fn deprecated_without_unstable_or_stable() { } //~ ERROR rustc_deprecated attribute must be paired\n \n fn main() { }"}]}