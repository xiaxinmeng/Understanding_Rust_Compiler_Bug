{"sha": "a83ab820a4633bac718ee0fd11f06d1b3142be6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4M2FiODIwYTQ2MzNiYWM3MThlZTBmZDExZjA2ZDFiMzE0MmJlNmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T15:34:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T15:34:18Z"}, "message": "Spec better runnables", "tree": {"sha": "e5cf794af01ab0b580476a8890627378c1f29fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cf794af01ab0b580476a8890627378c1f29fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83ab820a4633bac718ee0fd11f06d1b3142be6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83ab820a4633bac718ee0fd11f06d1b3142be6b", "html_url": "https://github.com/rust-lang/rust/commit/a83ab820a4633bac718ee0fd11f06d1b3142be6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83ab820a4633bac718ee0fd11f06d1b3142be6b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "html_url": "https://github.com/rust-lang/rust/commit/03039821195c9d9c4bbc1e4cbddb6378c43a6c52"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "673795e781e679dc675284b1f552ce4663fdd0e3", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a83ab820a4633bac718ee0fd11f06d1b3142be6b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ab820a4633bac718ee0fd11f06d1b3142be6b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=a83ab820a4633bac718ee0fd11f06d1b3142be6b", "patch": "@@ -87,6 +87,9 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n             \"ssr\": true,\n             \"onEnter\": true,\n             \"parentModule\": true,\n+            \"runnables\": {\n+                \"kinds\": [ \"cargo\" ],\n+            },\n         })),\n     }\n }"}, {"sha": "5fa1eba1c7220e8bf39838e675497cee3434bdc5", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83ab820a4633bac718ee0fd11f06d1b3142be6b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ab820a4633bac718ee0fd11f06d1b3142be6b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=a83ab820a4633bac718ee0fd11f06d1b3142be6b", "patch": "@@ -110,7 +110,7 @@ pub enum Runnables {}\n impl Request for Runnables {\n     type Params = RunnablesParams;\n     type Result = Vec<Runnable>;\n-    const METHOD: &'static str = \"rust-analyzer/runnables\";\n+    const METHOD: &'static str = \"experimental/runnables\";\n }\n \n #[derive(Serialize, Deserialize, Debug)]"}, {"sha": "647cf6107565c3e6d19829a28908a88e8d85a3b1", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 44, "deletions": 36, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a83ab820a4633bac718ee0fd11f06d1b3142be6b/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/a83ab820a4633bac718ee0fd11f06d1b3142be6b/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=a83ab820a4633bac718ee0fd11f06d1b3142be6b", "patch": "@@ -311,6 +311,50 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n   This is how `SelectionRange` request works.\n * Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n \n+## Runnables\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/944\n+\n+**Server Capability:** `{ \"runnables\": { \"kinds\": string[] } }`\n+\n+This request is send from client to server to get the list of things that can be run (tests, binaries, `cargo check -p`).\n+\n+**Method:** `experimental/runnables`\n+\n+**Request:**\n+\n+```typescript\n+interface RunnablesParams {\n+    textDocument: TextDocumentIdentifier;\n+    /// If null, compute runnables for the whole file.\n+    position?: Position;\n+}\n+```\n+\n+**Response:** `Runnable[]`\n+\n+```typescript\n+interface Runnable {\n+    label: string;\n+    /// If this Runnable is associated with a specific function/module, etc, the location of this item\n+    location?: LocationLink;\n+    /// Running things is necessary technology specific, `kind` needs to be advertised via server capabilities,\n+    // the type of `args` is specific to `kind`. The actual running is handled by the client.\n+    kind: string;\n+    args: any;\n+}\n+```\n+\n+rust-analyzer supports only one `kind`, `\"cargo\"`. The `args` for `\"cargo\"` look like this:\n+\n+```typescript\n+{\n+    workspaceRoot?: string;\n+    cargoArgs: string[];\n+    executableArgs: string[];\n+}\n+```\n+\n ## Analyzer Status\n \n **Method:** `rust-analyzer/analyzerStatus`\n@@ -399,39 +443,3 @@ interface InlayHint {\n     label: string,\n }\n ```\n-\n-## Runnables\n-\n-**Method:** `rust-analyzer/runnables`\n-\n-This request is send from client to server to get the list of things that can be run (tests, binaries, `cargo check -p`).\n-Note that we plan to move this request to `experimental/runnables`, as it is not really Rust-specific, but the current API is not necessary the right one.\n-Upstream issue: https://github.com/microsoft/language-server-protocol/issues/944\n-\n-**Request:**\n-\n-```typescript\n-interface RunnablesParams {\n-    textDocument: TextDocumentIdentifier;\n-    /// If null, compute runnables for the whole file.\n-    position?: Position;\n-}\n-```\n-\n-**Response:** `Runnable[]`\n-\n-```typescript\n-interface Runnable {\n-    /// The range this runnable is applicable for.\n-    range: lc.Range;\n-    /// The label to show in the UI.\n-    label: string;\n-    /// The following fields describe a process to spawn.\n-    kind: \"cargo\" | \"rustc\" | \"rustup\";\n-    args: string[];\n-    /// Args for cargo after `--`.\n-    extraArgs: string[];\n-    env: { [key: string]: string };\n-    cwd: string | null;\n-}\n-```"}, {"sha": "c51acfccb90a664271b147ffe31d447ddd6df467", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83ab820a4633bac718ee0fd11f06d1b3142be6b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a83ab820a4633bac718ee0fd11f06d1b3142be6b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=a83ab820a4633bac718ee0fd11f06d1b3142be6b", "patch": "@@ -56,7 +56,7 @@ export interface Runnable {\n         executableArgs: string[];\n     };\n }\n-export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"rust-analyzer/runnables\");\n+export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"experimental/runnables\");\n \n export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n "}]}