{"sha": "fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "node_id": "C_kwDOAAsO6NoAKGZkYzA2ZDliMmIzZTg1ODg3OGI2ZmQ4ZjZiZDgxNWQ5NDdlOTk1MGE", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-20T19:32:53Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-09T09:38:19Z"}, "message": "Improve error messages", "tree": {"sha": "34b45be9e936dc1b2577bd3f8aaa1552f1da8211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b45be9e936dc1b2577bd3f8aaa1552f1da8211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "html_url": "https://github.com/rust-lang/rust/commit/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759200b6991b5dac5fdb12bc6c366b16850add00", "url": "https://api.github.com/repos/rust-lang/rust/commits/759200b6991b5dac5fdb12bc6c366b16850add00", "html_url": "https://github.com/rust-lang/rust/commit/759200b6991b5dac5fdb12bc6c366b16850add00"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "b9b575a452b128f211cd407afc216b30d2e866d2", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{\n     match_def_path, path_to_local_id, paths, peel_hir_expr_while, ty::is_uninit_value_valid_for_ty, SpanlessEq,\n@@ -71,13 +71,14 @@ fn handle_uninit_vec_pair(\n         // Check T of Vec<T>\n         if !is_uninit_value_valid_for_ty(cx, substs.type_at(0));\n         then {\n-            span_lint_and_note(\n+            span_lint_and_then(\n                 cx,\n                 UNINIT_VEC,\n-                call_span,\n+                vec![call_span, maybe_with_capacity_or_reserve.span],\n                 \"calling `set_len()` immediately after reserving a buffer creates uninitialized values\",\n-                Some(maybe_with_capacity_or_reserve.span),\n-                \"the buffer is reserved here\"\n+                |diag| {\n+                    diag.help(\"initialize the buffer or wrap the content in `MaybeUninit`\");\n+                },\n             );\n         }\n     }\n@@ -155,9 +156,10 @@ fn extract_set_len_self(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(&\n     // peel unsafe blocks in `unsafe { vec.set_len() }`\n     let expr = peel_hir_expr_while(expr, |e| {\n         if let ExprKind::Block(block, _) = e.kind {\n+            // Extract the first statement/expression\n             match (block.stmts.get(0).map(|stmt| &stmt.kind), block.expr) {\n                 (None, Some(expr)) => Some(expr),\n-                (Some(StmtKind::Expr(expr) | StmtKind::Semi(expr)), None) => Some(expr),\n+                (Some(StmtKind::Expr(expr) | StmtKind::Semi(expr)), _) => Some(expr),\n                 _ => None,\n             }\n         } else {"}, {"sha": "e60b73a1e3089aeada0a6699d15fe569a2184a53", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "patch": "@@ -2,6 +2,11 @@\n \n use std::mem::MaybeUninit;\n \n+#[derive(Default)]\n+struct MyVec {\n+    vec: Vec<u8>,\n+}\n+\n fn main() {\n     // with_capacity() -> set_len() should be detected\n     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n@@ -24,6 +29,25 @@ fn main() {\n         vec.set_len(200);\n     }\n \n+    let mut vec: Vec<u8> = Vec::with_capacity(1000);\n+    unsafe {\n+        // test the case where there are other statements in the following unsafe block\n+        vec.set_len(200);\n+        assert!(vec.len() == 200);\n+    }\n+\n+    // handle vec stored in the field of a struct\n+    let mut my_vec = MyVec::default();\n+    my_vec.vec.reserve(1000);\n+    unsafe {\n+        my_vec.vec.set_len(200);\n+    }\n+\n+    my_vec.vec = Vec::with_capacity(1000);\n+    unsafe {\n+        my_vec.vec.set_len(200);\n+    }\n+\n     // MaybeUninit-wrapped types should not be detected\n     unsafe {\n         let mut vec: Vec<MaybeUninit<u8>> = Vec::with_capacity(1000);\n@@ -35,4 +59,12 @@ fn main() {\n         let mut vec: Vec<(MaybeUninit<u8>, [MaybeUninit<bool>; 2])> = Vec::with_capacity(1000);\n         vec.set_len(200);\n     }\n+\n+    // known false negative\n+    let mut vec1: Vec<u8> = Vec::with_capacity(1000);\n+    let mut vec2: Vec<u8> = Vec::with_capacity(1000);\n+    unsafe {\n+        vec1.reserve(200);\n+        vec2.reserve(200);\n+    }\n }"}, {"sha": "31f8ae40350cea3fd9606d2ce807834a90ddba97", "filename": "tests/ui/uninit_vec.stderr", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/tests%2Fui%2Funinit_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdc06d9b2b3e858878b6fd8f6bd815d947e9950a/tests%2Fui%2Funinit_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.stderr?ref=fdc06d9b2b3e858878b6fd8f6bd815d947e9950a", "patch": "@@ -1,51 +1,78 @@\n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:9:9\n+  --> $DIR/uninit_vec.rs:12:5\n    |\n+LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::uninit-vec` implied by `-D warnings`\n-note: the buffer is reserved here\n-  --> $DIR/uninit_vec.rs:7:5\n-   |\n-LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:15:9\n+  --> $DIR/uninit_vec.rs:18:5\n    |\n+LL |     vec.reserve(1000);\n+   |     ^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n    |\n-note: the buffer is reserved here\n-  --> $DIR/uninit_vec.rs:13:5\n-   |\n-LL |     vec.reserve(1000);\n-   |     ^^^^^^^^^^^^^^^^^^\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:21:9\n+  --> $DIR/uninit_vec.rs:32:5\n    |\n+LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n    |\n-note: the buffer is reserved here\n-  --> $DIR/uninit_vec.rs:20:9\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:41:5\n+   |\n+LL |     my_vec.vec.reserve(1000);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n+LL |         my_vec.vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL |         let mut vec: Vec<u8> = Vec::with_capacity(1000);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:46:5\n+   |\n+LL |     my_vec.vec = Vec::with_capacity(1000);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n+LL |         my_vec.vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:24:9\n+  --> $DIR/uninit_vec.rs:25:9\n    |\n+LL |         let mut vec: Vec<u8> = Vec::with_capacity(1000);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n    |\n-note: the buffer is reserved here\n-  --> $DIR/uninit_vec.rs:23:9\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:28:9\n    |\n LL |         vec.reserve(1000);\n    |         ^^^^^^^^^^^^^^^^^^\n+LL |         vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}