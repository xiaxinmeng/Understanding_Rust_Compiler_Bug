{"sha": "fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "node_id": "C_kwDOAAsO6NoAKGZkYjFlZWZjNzNjODRhYTIyN2QzYThiNWQ3MGQ3OTg1ODFhOTQ3ZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-20T06:10:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-20T06:10:30Z"}, "message": "Rollup merge of #109269 - klensy:rdoc-s, r=notriddle\n\nrustdoc: cleanup some intermediate allocs\n\nFirst commit self contained, second one use `display_fn` for `extra_info_tags`", "tree": {"sha": "0be75df5f253bdf14c558ae850ab0b11dc46d2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0be75df5f253bdf14c558ae850ab0b11dc46d2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkF/jWCRBK7hj4Ov3rIwAAXZQIAI6r5xAcv0TFIntOP1QXv40J\nepr4LLOLtsnfx9IjIuVEdfPf8XH39ezxto7/8Pk5cBe7foh1N3Hdbe9rb0wOksmV\nOJP4KP2BEUwGFiHudRbDfTKMZNo1kyimU+Q9ESVRKNqIS/Guzq/flv7TMu2fzknD\nMl7YAm358v4f8U8+gaMQmaNxVOUt3xxTC2cfUaVgevnBRkCvuAu1tfVKzwk+PNN3\n2Ge67Bhr6t7tMQYxxwYg7yzYNyWYoHWK/ZWyyqR85oy2wsy5+ijPwWiKpeNxBD5w\nYB/XVsYol4RLtDCAUXFgDPMhphw1acX1ant0fXYav+AXLEG3QCe2WKtnHmW4lRM=\n=znlc\n-----END PGP SIGNATURE-----\n", "payload": "tree 0be75df5f253bdf14c558ae850ab0b11dc46d2d9\nparent c07679989a6bf83cd4fa7bdd0b8ea3bee754f3c0\nparent 433d243c6e350c5c0c649f8daf3c15c63a7a1b9e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679292630 +0100\ncommitter GitHub <noreply@github.com> 1679292630 +0100\n\nRollup merge of #109269 - klensy:rdoc-s, r=notriddle\n\nrustdoc: cleanup some intermediate allocs\n\nFirst commit self contained, second one use `display_fn` for `extra_info_tags`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "html_url": "https://github.com/rust-lang/rust/commit/fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c07679989a6bf83cd4fa7bdd0b8ea3bee754f3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c07679989a6bf83cd4fa7bdd0b8ea3bee754f3c0", "html_url": "https://github.com/rust-lang/rust/commit/c07679989a6bf83cd4fa7bdd0b8ea3bee754f3c0"}, {"sha": "433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "html_url": "https://github.com/rust-lang/rust/commit/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "f2b9c0bcf3ee7785f53e166f668360dd2c845c85", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "patch": "@@ -1480,7 +1480,7 @@ pub(crate) fn visibility_print_with_space<'a, 'tcx: 'a>(\n                 debug!(\"path={:?}\", path);\n                 // modified from `resolved_path()` to work with `DefPathData`\n                 let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n-                let anchor = anchor(vis_did, last_name, cx).to_string();\n+                let anchor = anchor(vis_did, last_name, cx);\n \n                 let mut s = \"pub(in \".to_owned();\n                 for seg in &path.data[..path.data.len() - 1] {"}, {"sha": "ac5054ce1b6b520bc01f2c031265d5d542d11df5", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "patch": "@@ -352,7 +352,7 @@ impl<'tcx> Context<'tcx> {\n                 },\n             );\n \n-            path = href.into_inner().to_string_lossy().to_string();\n+            path = href.into_inner().to_string_lossy().into_owned();\n \n             if let Some(c) = path.as_bytes().last() && *c != b'/' {\n                 path.push('/');"}, {"sha": "7eb9c0b7cf52af0f8ff782d6f26e15ab05ddabd0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "patch": "@@ -1,5 +1,6 @@\n use clean::AttributesExt;\n \n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -28,8 +29,8 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    visibility_print_with_space, Buffer, Ending, PrintWithSpace,\n+    display_fn, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n+    print_where_clause, visibility_print_with_space, Buffer, Ending, PrintWithSpace,\n };\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n@@ -367,7 +368,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                         ..myitem.clone()\n                     };\n \n-                    let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n+                    let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()).to_string());\n                     stab_tags\n                 } else {\n                     None\n@@ -461,42 +462,62 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n \n /// Render the stability, deprecation and portability tags that are displayed in the item's summary\n /// at the module level.\n-fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) -> String {\n-    let mut tags = String::new();\n-\n-    fn tag_html(class: &str, title: &str, contents: &str) -> String {\n-        format!(r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#, class, Escape(title), contents)\n-    }\n-\n-    // The trailing space after each tag is to space it properly against the rest of the docs.\n-    if let Some(depr) = &item.deprecation(tcx) {\n-        let message = if stability::deprecation_in_effect(depr) {\n-            \"Deprecated\"\n-        } else {\n-            \"Deprecation planned\"\n-        };\n-        tags += &tag_html(\"deprecated\", \"\", message);\n-    }\n+fn extra_info_tags<'a, 'tcx: 'a>(\n+    item: &'a clean::Item,\n+    parent: &'a clean::Item,\n+    tcx: TyCtxt<'tcx>,\n+) -> impl fmt::Display + 'a + Captures<'tcx> {\n+    display_fn(move |f| {\n+        fn tag_html<'a>(\n+            class: &'a str,\n+            title: &'a str,\n+            contents: &'a str,\n+        ) -> impl fmt::Display + 'a {\n+            display_fn(move |f| {\n+                write!(\n+                    f,\n+                    r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#,\n+                    class,\n+                    Escape(title),\n+                    contents\n+                )\n+            })\n+        }\n \n-    // The \"rustc_private\" crates are permanently unstable so it makes no sense\n-    // to render \"unstable\" everywhere.\n-    if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n-        == Some(true)\n-    {\n-        tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n-    }\n+        // The trailing space after each tag is to space it properly against the rest of the docs.\n+        if let Some(depr) = &item.deprecation(tcx) {\n+            let message = if stability::deprecation_in_effect(depr) {\n+                \"Deprecated\"\n+            } else {\n+                \"Deprecation planned\"\n+            };\n+            write!(f, \"{}\", tag_html(\"deprecated\", \"\", message))?;\n+        }\n \n-    let cfg = match (&item.cfg, parent.cfg.as_ref()) {\n-        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n-        (cfg, _) => cfg.as_deref().cloned(),\n-    };\n+        // The \"rustc_private\" crates are permanently unstable so it makes no sense\n+        // to render \"unstable\" everywhere.\n+        if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n+            == Some(true)\n+        {\n+            write!(f, \"{}\", tag_html(\"unstable\", \"\", \"Experimental\"))?;\n+        }\n \n-    debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n-    if let Some(ref cfg) = cfg {\n-        tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n-    }\n+        let cfg = match (&item.cfg, parent.cfg.as_ref()) {\n+            (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n+            (cfg, _) => cfg.as_deref().cloned(),\n+        };\n \n-    tags\n+        debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n+        if let Some(ref cfg) = cfg {\n+            write!(\n+                f,\n+                \"{}\",\n+                tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html())\n+            )\n+        } else {\n+            Ok(())\n+        }\n+    })\n }\n \n fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &clean::Function) {"}, {"sha": "be9d1c408eca6173aec745c0cabef427524c6804", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "patch": "@@ -85,7 +85,7 @@ impl LocalSourcesCollector<'_, '_> {\n             },\n         );\n \n-        let mut href = href.into_inner().to_string_lossy().to_string();\n+        let mut href = href.into_inner().to_string_lossy().into_owned();\n         if let Some(c) = href.as_bytes().last() && *c != b'/' {\n             href.push('/');\n         }"}, {"sha": "6ed7b98999977664d54327fb3d91a99834a37d10", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb1eefc73c84aa227d3a8b5d70d798581a947d8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fdb1eefc73c84aa227d3a8b5d70d798581a947d8", "patch": "@@ -286,7 +286,6 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             split.next().map(|f|  Symbol::intern(f)).ok_or_else(no_res)?;\n         let path = split\n             .next()\n-            .map(|f| f.to_owned())\n             // If there's no third component, we saw `[a::b]` before and it failed to resolve.\n             // So there's no partial res.\n             .ok_or_else(no_res)?;\n@@ -429,7 +428,6 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         let item_name = Symbol::intern(item_str);\n         let path_root = split\n             .next()\n-            .map(|f| f.to_owned())\n             // If there's no `::`, it's not an associated item.\n             // So we can be sure that `rustc_resolve` was accurate when it said it wasn't resolved.\n             .ok_or_else(|| {"}]}