{"sha": "9b3452e10a3b8685370fea99664eccfd8fe958bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzQ1MmUxMGEzYjg2ODUzNzBmZWE5OTY2NGVjY2ZkOGZlOTU4YmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-11T17:22:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-11T17:22:23Z"}, "message": "libstd: Fix std test. rs=busted", "tree": {"sha": "ec7414ab4af5f00da417bf9b47ef1e00079e1599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec7414ab4af5f00da417bf9b47ef1e00079e1599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3452e10a3b8685370fea99664eccfd8fe958bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3452e10a3b8685370fea99664eccfd8fe958bb", "html_url": "https://github.com/rust-lang/rust/commit/9b3452e10a3b8685370fea99664eccfd8fe958bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3452e10a3b8685370fea99664eccfd8fe958bb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2fc50ca1d8fecdc54306203f226d87a365ce36", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2fc50ca1d8fecdc54306203f226d87a365ce36", "html_url": "https://github.com/rust-lang/rust/commit/ad2fc50ca1d8fecdc54306203f226d87a365ce36"}], "stats": {"total": 197, "additions": 111, "deletions": 86}, "files": [{"sha": "359d3039229e606b5e1bbee7c2348e0c12770183", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b3452e10a3b8685370fea99664eccfd8fe958bb/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3452e10a3b8685370fea99664eccfd8fe958bb/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=9b3452e10a3b8685370fea99664eccfd8fe958bb", "patch": "@@ -161,12 +161,14 @@ mod tests {\n     use core::libc;\n \n     fn malloc(n: size_t) -> CVec<u8> {\n-        let mem = libc::malloc(n);\n+        unsafe {\n+            let mem = libc::malloc(n);\n \n-        assert mem as int != 0;\n+            assert mem as int != 0;\n \n-        return unsafe { c_vec_with_dtor(mem as *mut u8, n as uint,\n-                                     ||free(mem)) };\n+            return unsafe { c_vec_with_dtor(mem as *mut u8, n as uint,\n+                                         || unsafe { free(mem) }) };\n+        }\n     }\n \n     #[test]"}, {"sha": "778daf131c4b0e78f6a14c9df19adbc0419ae285", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 105, "deletions": 82, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/9b3452e10a3b8685370fea99664eccfd8fe958bb/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3452e10a3b8685370fea99664eccfd8fe958bb/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=9b3452e10a3b8685370fea99664eccfd8fe958bb", "patch": "@@ -1594,125 +1594,148 @@ pub mod test {\n     // struct size tests\n     #[test]\n     fn test_uv_ll_struct_size_uv_tcp_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_tcp_t_size();\n-        let rust_handle_size = sys::size_of::<uv_tcp_t>();\n-        let output = fmt!(\"uv_tcp_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_tcp_t_size();\n+            let rust_handle_size = sys::size_of::<uv_tcp_t>();\n+            let output = fmt!(\"uv_tcp_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_connect_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_connect_t_size();\n-        let rust_handle_size = sys::size_of::<uv_connect_t>();\n-        let output = fmt!(\"uv_connect_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_connect_t_size();\n+            let rust_handle_size = sys::size_of::<uv_connect_t>();\n+            let output = fmt!(\"uv_connect_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_buf_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_buf_t_size();\n-        let rust_handle_size = sys::size_of::<uv_buf_t>();\n-        let output = fmt!(\"uv_buf_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_buf_t_size();\n+            let rust_handle_size = sys::size_of::<uv_buf_t>();\n+            let output = fmt!(\"uv_buf_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_write_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_write_t_size();\n-        let rust_handle_size = sys::size_of::<uv_write_t>();\n-        let output = fmt!(\"uv_write_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_write_t_size();\n+            let rust_handle_size = sys::size_of::<uv_write_t>();\n+            let output = fmt!(\"uv_write_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n \n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_sockaddr_in_size();\n-        let rust_handle_size = sys::size_of::<sockaddr_in>();\n-        let output = fmt!(\"sockaddr_in -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_sockaddr_in_size();\n+            let rust_handle_size = sys::size_of::<sockaddr_in>();\n+            let output = fmt!(\"sockaddr_in -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in6() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_sockaddr_in6_size();\n-        let rust_handle_size = sys::size_of::<sockaddr_in6>();\n-        let output = fmt!(\"sockaddr_in6 -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        // FIXME #1645 .. rust appears to pad structs to the nearest byte..?\n-        // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n-        // .. so the type always appears to be 32 in size.. which is\n-        // good, i guess.. better too big than too little\n-        assert (4u+foreign_handle_size as uint) == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_sockaddr_in6_size();\n+            let rust_handle_size = sys::size_of::<sockaddr_in6>();\n+            let output = fmt!(\"sockaddr_in6 -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            // FIXME #1645 .. rust appears to pad structs to the nearest\n+            // byte..?\n+            // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n+            // .. so the type always appears to be 32 in size.. which is\n+            // good, i guess.. better too big than too little\n+            assert (4u+foreign_handle_size as uint) == rust_handle_size;\n+        }\n     }\n     #[test]\n     #[ignore(reason = \"questionable size calculations\")]\n     fn test_uv_ll_struct_size_addr_in() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_addr_in_size();\n-        let rust_handle_size = sys::size_of::<addr_in>();\n-        let output = fmt!(\"addr_in -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        // FIXME #1645 .. see note above about struct padding\n-        assert (4u+foreign_handle_size as uint) == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_addr_in_size();\n+            let rust_handle_size = sys::size_of::<addr_in>();\n+            let output = fmt!(\"addr_in -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            // FIXME #1645 .. see note above about struct padding\n+            assert (4u+foreign_handle_size as uint) == rust_handle_size;\n+        }\n     }\n \n     #[test]\n     fn test_uv_ll_struct_size_uv_async_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_async_t_size();\n-        let rust_handle_size = sys::size_of::<uv_async_t>();\n-        let output = fmt!(\"uv_async_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_async_t_size();\n+            let rust_handle_size = sys::size_of::<uv_async_t>();\n+            let output = fmt!(\"uv_async_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n \n     #[test]\n     fn test_uv_ll_struct_size_uv_timer_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size();\n-        let rust_handle_size = sys::size_of::<uv_timer_t>();\n-        let output = fmt!(\"uv_timer_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size();\n+            let rust_handle_size = sys::size_of::<uv_timer_t>();\n+            let output = fmt!(\"uv_timer_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n \n     #[test]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_uv_getaddrinfo_t() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n-        let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n-        let output = fmt!(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n+            let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n+            let output = fmt!(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"macos\"))]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_addrinfo() {\n-        let foreign_handle_size =\n-            ::uv_ll::rustrt::rust_uv_helper_addrinfo_size();\n-        let rust_handle_size = sys::size_of::<addrinfo>();\n-        let output = fmt!(\"addrinfo -- foreign: %u rust: %u\",\n-                          foreign_handle_size as uint, rust_handle_size);\n-        log(debug, output);\n-        assert foreign_handle_size as uint == rust_handle_size;\n+        unsafe {\n+            let foreign_handle_size =\n+                ::uv_ll::rustrt::rust_uv_helper_addrinfo_size();\n+            let rust_handle_size = sys::size_of::<addrinfo>();\n+            let output = fmt!(\"addrinfo -- foreign: %u rust: %u\",\n+                              foreign_handle_size as uint, rust_handle_size);\n+            log(debug, output);\n+            assert foreign_handle_size as uint == rust_handle_size;\n+        }\n     }\n }"}]}