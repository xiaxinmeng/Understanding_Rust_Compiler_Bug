{"sha": "344603afcef264bc1790bca6865dbfb4815d2d5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDYwM2FmY2VmMjY0YmMxNzkwYmNhNjg2NWRiZmI0ODE1ZDJkNWQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-06T14:28:50Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-07T01:33:05Z"}, "message": "dev: Make UpdateMode a copy type", "tree": {"sha": "03ba044431f944bc74049953b4d4171a24d58c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ba044431f944bc74049953b4d4171a24d58c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344603afcef264bc1790bca6865dbfb4815d2d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344603afcef264bc1790bca6865dbfb4815d2d5d", "html_url": "https://github.com/rust-lang/rust/commit/344603afcef264bc1790bca6865dbfb4815d2d5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344603afcef264bc1790bca6865dbfb4815d2d5d/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729f943c53586013c7306e0485565fd089964fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/729f943c53586013c7306e0485565fd089964fa3", "html_url": "https://github.com/rust-lang/rust/commit/729f943c53586013c7306e0485565fd089964fa3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "403aa634c34fff9e0a25e1b89dc71239460eb11d", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/344603afcef264bc1790bca6865dbfb4815d2d5d/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344603afcef264bc1790bca6865dbfb4815d2d5d/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=344603afcef264bc1790bca6865dbfb4815d2d5d", "patch": "@@ -8,7 +8,7 @@ mod fmt;\n mod new_lint;\n mod stderr_length_check;\n \n-#[derive(PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum UpdateMode {\n     Check,\n     Change,\n@@ -113,9 +113,9 @@ fn main() {\n             if matches.is_present(\"print-only\") {\n                 print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints(&UpdateMode::Check);\n+                update_lints(UpdateMode::Check);\n             } else {\n-                update_lints(&UpdateMode::Change);\n+                update_lints(UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -124,7 +124,7 @@ fn main() {\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n             ) {\n-                Ok(_) => update_lints(&UpdateMode::Change),\n+                Ok(_) => update_lints(UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n@@ -161,7 +161,7 @@ fn print_lints() {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn update_lints(update_mode: &UpdateMode) {\n+fn update_lints(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n@@ -175,7 +175,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin lint list\",\n         \"end lint list\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n             format!(\n                 \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n@@ -194,7 +194,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang.github.io/rust-clippy/master/index.html\\)\"#,\n         \"\",\n         true,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n             vec![\n                 format!(\"[There are {} lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\", lint_count)\n@@ -207,7 +207,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"<!-- begin autogenerated links to lint list -->\",\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_changelog_lint_list(lint_list.clone()),\n     )\n     .changed;\n@@ -217,7 +217,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_deprecated(&lint_list),\n     )\n     .changed;\n@@ -227,7 +227,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin register lints\",\n         \"end register lints\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_register_lint_list(&lint_list),\n     )\n     .changed;\n@@ -237,7 +237,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_modules_list(lint_list.clone()),\n     )\n     .changed;\n@@ -248,7 +248,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         r#\"store.register_group\\(true, \"clippy::all\"\"#,\n         r#\"\\]\\);\"#,\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n             let all_group_lints = usable_lints\n@@ -271,13 +271,13 @@ fn update_lints(update_mode: &UpdateMode) {\n             &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n             r#\"\\]\\);\"#,\n             false,\n-            update_mode == &UpdateMode::Change,\n+            update_mode == UpdateMode::Change,\n             || gen_lint_group_list(lints.clone()),\n         )\n         .changed;\n     }\n \n-    if update_mode == &UpdateMode::Check && file_change {\n+    if update_mode == UpdateMode::Check && file_change {\n         println!(\n             \"Not all lints defined properly. \\\n              Please run `cargo dev update_lints` to make sure all lints are defined properly.\""}]}