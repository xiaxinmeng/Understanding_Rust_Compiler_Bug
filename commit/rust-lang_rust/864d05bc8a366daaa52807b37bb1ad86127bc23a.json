{"sha": "864d05bc8a366daaa52807b37bb1ad86127bc23a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGQwNWJjOGEzNjZkYWFhNTI4MDdiMzdiYjFhZDg2MTI3YmMyM2E=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-14T18:57:10Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-14T19:55:50Z"}, "message": "Add a workaround for catch_unwind in stage1 mingw target\n\nFixes #70001", "tree": {"sha": "d6249c23c3883f0d68318bd8d3608b5fbefe6a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6249c23c3883f0d68318bd8d3608b5fbefe6a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864d05bc8a366daaa52807b37bb1ad86127bc23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864d05bc8a366daaa52807b37bb1ad86127bc23a", "html_url": "https://github.com/rust-lang/rust/commit/864d05bc8a366daaa52807b37bb1ad86127bc23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864d05bc8a366daaa52807b37bb1ad86127bc23a/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1e814c119afe08abff199895f3279ee0376d70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1e814c119afe08abff199895f3279ee0376d70", "html_url": "https://github.com/rust-lang/rust/commit/0f1e814c119afe08abff199895f3279ee0376d70"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "05a31358443aa82bb94dd70a6f887e2ec7320f16", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/864d05bc8a366daaa52807b37bb1ad86127bc23a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864d05bc8a366daaa52807b37bb1ad86127bc23a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=864d05bc8a366daaa52807b37bb1ad86127bc23a", "patch": "@@ -278,36 +278,36 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         Err(ManuallyDrop::into_inner(data.p))\n     };\n \n-    // Compatibility wrapper around the try intrinsic for bootstrap\n-    #[inline]\n+    // Compatibility wrapper around the try intrinsic for bootstrap.\n+    //\n+    // We also need to mark it #[inline(never)] to work around a bug on MinGW\n+    // targets: the unwinding implementation was relying on UB, but this only\n+    // becomes a problem in practice if inlining is involved.\n+    #[cfg(not(bootstrap))]\n+    use intrinsics::r#try as do_try;\n+    #[cfg(bootstrap)]\n+    #[inline(never)]\n     unsafe fn do_try(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32 {\n-        #[cfg(not(bootstrap))]\n-        {\n-            intrinsics::r#try(try_fn, data, catch_fn)\n-        }\n-        #[cfg(bootstrap)]\n-        {\n-            use crate::mem::MaybeUninit;\n+        use crate::mem::MaybeUninit;\n+        #[cfg(target_env = \"msvc\")]\n+        type TryPayload = [u64; 2];\n+        #[cfg(not(target_env = \"msvc\"))]\n+        type TryPayload = *mut u8;\n+\n+        let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n+        let payload_ptr = payload.as_mut_ptr() as *mut u8;\n+        let r = intrinsics::r#try(try_fn, data, payload_ptr);\n+        if r != 0 {\n             #[cfg(target_env = \"msvc\")]\n-            type TryPayload = [u64; 2];\n+            {\n+                catch_fn(data, payload_ptr)\n+            }\n             #[cfg(not(target_env = \"msvc\"))]\n-            type TryPayload = *mut u8;\n-\n-            let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n-            let payload_ptr = payload.as_mut_ptr() as *mut u8;\n-            let r = intrinsics::r#try(try_fn, data, payload_ptr);\n-            if r != 0 {\n-                #[cfg(target_env = \"msvc\")]\n-                {\n-                    catch_fn(data, payload_ptr)\n-                }\n-                #[cfg(not(target_env = \"msvc\"))]\n-                {\n-                    catch_fn(data, payload.assume_init())\n-                }\n+            {\n+                catch_fn(data, payload.assume_init())\n             }\n-            r\n         }\n+        r\n     }\n \n     // We consider unwinding to be rare, so mark this function as cold. However,\n@@ -321,7 +321,9 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         obj\n     }\n \n-    #[inline]\n+    // See comment on do_try above for why #[inline(never)] is needed on bootstrap.\n+    #[cfg_attr(bootstrap, inline(never))]\n+    #[cfg_attr(not(bootstrap), inline)]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n         unsafe {\n             let data = data as *mut Data<F, R>;"}]}