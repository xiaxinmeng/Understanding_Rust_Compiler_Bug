{"sha": "0ef9c5f5853ce35db142e4e2793984148df3d5f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZjljNWY1ODUzY2UzNWRiMTQyZTRlMjc5Mzk4NDE0OGRmM2Q1Zjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-29T04:49:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-02-14T20:30:23Z"}, "message": "error correction for missing or mismatched closing brackets", "tree": {"sha": "5b3429ec00af605892a82a3dbc0112e9b9ddb955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3429ec00af605892a82a3dbc0112e9b9ddb955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef9c5f5853ce35db142e4e2793984148df3d5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef9c5f5853ce35db142e4e2793984148df3d5f8", "html_url": "https://github.com/rust-lang/rust/commit/0ef9c5f5853ce35db142e4e2793984148df3d5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef9c5f5853ce35db142e4e2793984148df3d5f8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "html_url": "https://github.com/rust-lang/rust/commit/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "5972f8f4b71164c628249ebdc16055edd8da9d7c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0ef9c5f5853ce35db142e4e2793984148df3d5f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef9c5f5853ce35db142e4e2793984148df3d5f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ef9c5f5853ce35db142e4e2793984148df3d5f8", "patch": "@@ -850,7 +850,7 @@ impl<'a> Parser<'a> {\n                                   -> PResult<'a, Vec<T>> where\n         F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n     {\n-        let val = try!(self.parse_seq_to_before_end(ket, sep, f));\n+        let val = self.parse_seq_to_before_end(ket, sep, f);\n         self.bump();\n         Ok(val)\n     }\n@@ -862,23 +862,37 @@ impl<'a> Parser<'a> {\n                                          ket: &token::Token,\n                                          sep: SeqSep,\n                                          mut f: F)\n-                                         -> PResult<'a, Vec<T>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+                                         -> Vec<T>\n+        where F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n     {\n         let mut first: bool = true;\n         let mut v = vec!();\n         while self.token != *ket {\n             match sep.sep {\n-              Some(ref t) => {\n-                if first { first = false; }\n-                else { try!(self.expect(t)); }\n-              }\n-              _ => ()\n+                Some(ref t) => {\n+                    if first {\n+                        first = false;\n+                    } else {\n+                        if let Err(mut e) = self.expect(t) {\n+                            e.emit();\n+                            break;\n+                        }\n+                    }\n+                }\n+                _ => ()\n             }\n             if sep.trailing_sep_allowed && self.check(ket) { break; }\n-            v.push(try!(f(self)));\n+\n+            match f(self) {\n+                Ok(t) => v.push(t),\n+                Err(mut e) => {\n+                    e.emit();\n+                    break;\n+                }\n+            }\n         }\n-        return Ok(v);\n+\n+        v\n     }\n \n     /// Parse a sequence, including the closing delimiter. The function\n@@ -893,7 +907,7 @@ impl<'a> Parser<'a> {\n         F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n     {\n         try!(self.expect(bra));\n-        let result = try!(self.parse_seq_to_before_end(ket, sep, f));\n+        let result = self.parse_seq_to_before_end(ket, sep, f);\n         self.bump();\n         Ok(result)\n     }\n@@ -929,7 +943,7 @@ impl<'a> Parser<'a> {\n     {\n         let lo = self.span.lo;\n         try!(self.expect(bra));\n-        let result = try!(self.parse_seq_to_before_end(ket, sep, f));\n+        let result = self.parse_seq_to_before_end(ket, sep, f);\n         let hi = self.span.hi;\n         self.bump();\n         Ok(spanned(lo, hi, result))\n@@ -2643,13 +2657,14 @@ impl<'a> Parser<'a> {\n \n         match self.token {\n             token::Eof => {\n-                let open_braces = self.open_braces.clone();\n                 let mut err: DiagnosticBuilder<'a> =\n-                    self.fatal(\"this file contains an un-closed delimiter\");\n-                for sp in &open_braces {\n+                    self.diagnostic().struct_span_err(self.span,\n+                                                      \"this file contains an un-closed delimiter\");\n+                for sp in &self.open_braces {\n                     err.span_help(*sp, \"did you mean to close this delimiter?\");\n                 }\n-                return Err(err);\n+\n+                Err(err)\n             },\n             token::OpenDelim(delim) => {\n                 // The span for beginning of the delimited section\n@@ -2661,11 +2676,9 @@ impl<'a> Parser<'a> {\n                 self.bump();\n \n                 // Parse the token trees within the delimiters\n-                let tts = try!(self.parse_seq_to_before_end(\n-                    &token::CloseDelim(delim),\n-                    seq_sep_none(),\n-                    |p| p.parse_token_tree()\n-                ));\n+                let tts = self.parse_seq_to_before_end(&token::CloseDelim(delim),\n+                                                       seq_sep_none(),\n+                                                       |p| p.parse_token_tree());\n \n                 // Parse the close delimiter.\n                 let close_span = self.span;\n@@ -2691,7 +2704,7 @@ impl<'a> Parser<'a> {\n                 match self.token {\n                     token::CloseDelim(_) => {\n                         let token_str = self.this_token_to_string();\n-                        let mut err = self.fatal(\n+                        let mut err = self.diagnostic().struct_span_err(self.span,\n                             &format!(\"incorrect close delimiter: `{}`\", token_str));\n                         // This is a conservative error: only report the last unclosed delimiter.\n                         // The previous unclosed delimiters could actually be closed! The parser\n@@ -4516,11 +4529,11 @@ impl<'a> Parser<'a> {\n                 token::Comma => {\n                     self.bump();\n                     let sep = seq_sep_trailing_allowed(token::Comma);\n-                    let mut fn_inputs = try!(self.parse_seq_to_before_end(\n+                    let mut fn_inputs = self.parse_seq_to_before_end(\n                         &token::CloseDelim(token::Paren),\n                         sep,\n                         parse_arg_fn\n-                    ));\n+                    );\n                     fn_inputs.insert(0, Arg::new_self(explicit_self_sp, mutbl_self, $self_id));\n                     fn_inputs\n                 }\n@@ -4539,8 +4552,7 @@ impl<'a> Parser<'a> {\n         let fn_inputs = match explicit_self {\n             SelfKind::Static =>  {\n                 let sep = seq_sep_trailing_allowed(token::Comma);\n-                try!(self.parse_seq_to_before_end(&token::CloseDelim(token::Paren),\n-                                                  sep, parse_arg_fn))\n+                self.parse_seq_to_before_end(&token::CloseDelim(token::Paren), sep, parse_arg_fn)\n             }\n             SelfKind::Value(id) => parse_remaining_arguments!(id),\n             SelfKind::Region(_,_,id) => parse_remaining_arguments!(id),\n@@ -4571,11 +4583,11 @@ impl<'a> Parser<'a> {\n             } else {\n                 try!(self.expect(&token::BinOp(token::Or)));\n                 try!(self.parse_obsolete_closure_kind());\n-                let args = try!(self.parse_seq_to_before_end(\n+                let args = self.parse_seq_to_before_end(\n                     &token::BinOp(token::Or),\n                     seq_sep_trailing_allowed(token::Comma),\n                     |p| p.parse_fn_block_arg()\n-                ));\n+                );\n                 self.bump();\n                 args\n             }"}]}