{"sha": "23b4db227a391b8c64a54c863846c0f8a8168426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjRkYjIyN2EzOTFiOGM2NGE1NGM4NjM4NDZjMGY4YTgxNjg0MjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-12T18:49:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-12T18:49:43Z"}, "message": "Implement basic incremental compilation", "tree": {"sha": "12fa30540df17890e90a8ba88590a99215fb62ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12fa30540df17890e90a8ba88590a99215fb62ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b4db227a391b8c64a54c863846c0f8a8168426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b4db227a391b8c64a54c863846c0f8a8168426", "html_url": "https://github.com/rust-lang/rust/commit/23b4db227a391b8c64a54c863846c0f8a8168426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b4db227a391b8c64a54c863846c0f8a8168426/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5859b9b65d77732c45661ff90520a24c65cbd080", "url": "https://api.github.com/repos/rust-lang/rust/commits/5859b9b65d77732c45661ff90520a24c65cbd080", "html_url": "https://github.com/rust-lang/rust/commit/5859b9b65d77732c45661ff90520a24c65cbd080"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "3d9bcbd1919d6cf61ce29b606a4b6572f15cace1", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23b4db227a391b8c64a54c863846c0f8a8168426/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/23b4db227a391b8c64a54c863846c0f8a8168426/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=23b4db227a391b8c64a54c863846c0f8a8168426", "patch": "@@ -20,6 +20,6 @@ $RUSTC mini_core.rs --crate-name mini_core --crate-type lib &&\n $RUSTC example.rs --crate-type lib &&\n $RUSTC mini_core_hello_world.rs --crate-type bin &&\n \n-$RUSTC ../target/libcore/src/libcore/lib.rs --color=always --crate-type lib 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n+$RUSTC ../target/libcore/src/libcore/lib.rs --color=always --crate-type lib -Cincremental=../target/libcore/incremental 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n cat ../target/log.txt | sort | uniq -c | grep -v \"rval unsize move\" | grep -v \"rval len\"\n rm *.rlib ../target/log.txt"}, {"sha": "bb51ba659c3d32d3f5c7569a43a25ff33a9e14cf", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23b4db227a391b8c64a54c863846c0f8a8168426/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4db227a391b8c64a54c863846c0f8a8168426/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=23b4db227a391b8c64a54c863846c0f8a8168426", "patch": "@@ -68,7 +68,7 @@ mod prelude {\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable, TypeVariants,\n     };\n-    pub use rustc_data_structures::{indexed_vec::Idx, sync::Lrc};\n+    pub use rustc_data_structures::{indexed_vec::Idx, sync::Lrc, fx::FxHashMap};\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::codemap::DUMMY_SP;\n@@ -186,6 +186,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         providers.target_features_whitelist = |_tcx, _cnum| Lrc::new(Default::default());\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n+        providers.upstream_monomorphizations = |_tcx, _cnum| Lrc::new(FxHashMap());\n+        providers.upstream_monomorphizations_for = |tcx, def_id| {\n+            debug_assert!(!def_id.is_local());\n+            tcx.upstream_monomorphizations(LOCAL_CRATE)\n+                .get(&def_id)\n+                .cloned()\n+        };\n     }\n     fn provide_extern(&self, providers: &mut Providers) {\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n@@ -251,9 +258,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut log = ::std::fs::File::create(\"../target/log.txt\").unwrap();\n \n             let before = ::std::time::Instant::now();\n-            for mono_item in\n-                collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0\n-            {\n+            let mono_items = collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0;\n+\n+            // TODO: move to the end of this function when compiling libcore doesn't have unimplemented stuff anymore\n+            save_incremental(tcx);\n+            tcx.sess.warn(\"Saved incremental data\");\n+\n+            for mono_item in mono_items {\n                 let cx = &mut cx;\n                 let context = &mut context;\n                 let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(move || {\n@@ -371,6 +382,12 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n }\n \n+fn save_incremental<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    rustc_incremental::assert_dep_graph(tcx);\n+    rustc_incremental::save_dep_graph(tcx);\n+    rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n+}\n+\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {"}]}