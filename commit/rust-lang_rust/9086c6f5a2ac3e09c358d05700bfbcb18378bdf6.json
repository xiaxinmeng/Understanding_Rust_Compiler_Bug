{"sha": "9086c6f5a2ac3e09c358d05700bfbcb18378bdf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODZjNmY1YTJhYzNlMDljMzU4ZDA1NzAwYmZiY2IxODM3OGJkZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-14T01:29:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-14T01:30:07Z"}, "message": "merge all auto_serialize tests into one", "tree": {"sha": "0a72635a018bb85f545f48734c1b94da6c2792cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a72635a018bb85f545f48734c1b94da6c2792cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6", "html_url": "https://github.com/rust-lang/rust/commit/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30cb8e43a57f8f16065c37a664b26db0891f134", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30cb8e43a57f8f16065c37a664b26db0891f134", "html_url": "https://github.com/rust-lang/rust/commit/b30cb8e43a57f8f16065c37a664b26db0891f134"}], "stats": {"total": 249, "additions": 98, "deletions": 151}, "files": [{"sha": "419985ef731c70574986b5a410981e2e2ced8700", "filename": "src/test/auxiliary/auto_serialize_lib.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Fauxiliary%2Fauto_serialize_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Fauxiliary%2Fauto_serialize_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fauto_serialize_lib.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,32 +0,0 @@\n-#[link(name=\"auto_serialize_lib\", vers=\"0.0\")];\n-\n-use std;\n-import std::ebml;\n-import io::writer;\n-\n-fn test_ser_and_deser<A>(a1: A,\n-                         expected: str,\n-                         ebml_ser_fn: fn(ebml::writer, A),\n-                         ebml_deser_fn: fn(ebml::ebml_deserializer) -> A,\n-                         io_ser_fn: fn(io::writer, A)) {\n-\n-    // check the pretty printer:\n-    io_ser_fn(io::stdout(), a1);\n-    let s = io::with_str_writer {|w| io_ser_fn(w, a1) };\n-    #debug[\"s == %?\", s];\n-    assert s == expected;\n-\n-    // check the EBML serializer:\n-    let buf = io::mem_buffer();\n-    let w = ebml::writer(buf as io::writer);\n-    ebml_ser_fn(w, a1);\n-    let d = ebml::new_doc(@io::mem_buffer_buf(buf));\n-    let a2 = ebml_deser_fn(ebml::ebml_deserializer(d));\n-    io::print(\"\\na1 = \");\n-    io_ser_fn(io::stdout(), a1);\n-    io::print(\"\\na2 = \");\n-    io_ser_fn(io::stdout(), a2);\n-    io::print(\"\\n\");\n-    assert a1 == a2;\n-\n-}"}, {"sha": "d2d7eaa5ac499695c37f829b540cea9b5d78acb5", "filename": "src/test/run-pass/auto_serialize.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c6f5a2ac3e09c358d05700bfbcb18378bdf6/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=9086c6f5a2ac3e09c358d05700bfbcb18378bdf6", "patch": "@@ -0,0 +1,98 @@\n+use std;\n+\n+// These tests used to be separate files, but I wanted to refactor all\n+// the common code.\n+\n+import std::ebml;\n+import io::writer;\n+import std::prettyprint::serializer;\n+import std::ebml::serializer;\n+import std::ebml::deserializer;\n+\n+fn test_ser_and_deser<A>(a1: A,\n+                         expected: str,\n+                         ebml_ser_fn: fn(ebml::writer, A),\n+                         ebml_deser_fn: fn(ebml::ebml_deserializer) -> A,\n+                         io_ser_fn: fn(io::writer, A)) {\n+\n+    // check the pretty printer:\n+    io_ser_fn(io::stdout(), a1);\n+    let s = io::with_str_writer {|w| io_ser_fn(w, a1) };\n+    #debug[\"s == %?\", s];\n+    assert s == expected;\n+\n+    // check the EBML serializer:\n+    let buf = io::mem_buffer();\n+    let w = ebml::writer(buf as io::writer);\n+    ebml_ser_fn(w, a1);\n+    let d = ebml::new_doc(@io::mem_buffer_buf(buf));\n+    let a2 = ebml_deser_fn(ebml::ebml_deserializer(d));\n+    io::print(\"\\na1 = \");\n+    io_ser_fn(io::stdout(), a1);\n+    io::print(\"\\na2 = \");\n+    io_ser_fn(io::stdout(), a2);\n+    io::print(\"\\n\");\n+    assert a1 == a2;\n+\n+}\n+\n+#[auto_serialize]\n+enum expr {\n+    val(uint),\n+    plus(@expr, @expr),\n+    minus(@expr, @expr)\n+}\n+\n+\n+#[auto_serialize]\n+type spanned<T> = {lo: uint, hi: uint, node: T};\n+\n+#[auto_serialize]\n+type spanned_uint = spanned<uint>;\n+\n+#[auto_serialize]\n+type some_rec = {v: uint_vec};\n+\n+#[auto_serialize]\n+enum an_enum = some_rec;\n+\n+#[auto_serialize]\n+type uint_vec = [uint];\n+\n+#[auto_serialize]\n+type point = {x: uint, y: uint};\n+\n+fn main() {\n+\n+    test_ser_and_deser(plus(@minus(@val(3u), @val(10u)),\n+                            @plus(@val(22u), @val(5u))),\n+                       \"plus(@minus(@val(3u), @val(10u)), \\\n+                        @plus(@val(22u), @val(5u)))\",\n+                       expr::serialize(_, _),\n+                       expr::deserialize(_),\n+                       expr::serialize(_, _));\n+\n+    test_ser_and_deser({lo: 0u, hi: 5u, node: 22u},\n+                       \"{lo: 0u, hi: 5u, node: 22u}\",\n+                       spanned_uint::serialize(_, _),\n+                       spanned_uint::deserialize(_),\n+                       spanned_uint::serialize(_, _));\n+\n+    test_ser_and_deser(an_enum({v: [1u, 2u, 3u]}),\n+                       \"an_enum({v: [1u, 2u, 3u]})\",\n+                       an_enum::serialize(_, _),\n+                       an_enum::deserialize(_),\n+                       an_enum::serialize(_, _));\n+\n+    test_ser_and_deser({x: 3u, y: 5u},\n+                       \"{x: 3u, y: 5u}\",\n+                       point::serialize(_, _),\n+                       point::deserialize(_),\n+                       point::serialize(_, _));\n+\n+    test_ser_and_deser([1u, 2u, 3u],\n+                       \"[1u, 2u, 3u]\",\n+                       uint_vec::serialize(_, _),\n+                       uint_vec::deserialize(_),\n+                       uint_vec::serialize(_, _));\n+}\n\\ No newline at end of file"}, {"sha": "8bb9e02e0f2ab432d1e13a7e6aab4a64fd69d0fc", "filename": "src/test/run-pass/auto_serialize_enum.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize_enum.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,26 +0,0 @@\n-// aux-build:auto_serialize_lib.rs\n-// xfail-fast:aux-build currently incompatible\n-\n-use std;\n-use auto_serialize_lib;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import auto_serialize_lib::*;\n-\n-#[auto_serialize]\n-enum expr {\n-    val(uint),\n-    plus(@expr, @expr),\n-    minus(@expr, @expr)\n-}\n-\n-fn main() {\n-    test_ser_and_deser(plus(@minus(@val(3u), @val(10u)),\n-                            @plus(@val(22u), @val(5u))),\n-                       \"plus(@minus(@val(3u), @val(10u)), \\\n-                        @plus(@val(22u), @val(5u)))\",\n-                       expr::serialize(_, _),\n-                       expr::deserialize(_),\n-                       expr::serialize(_, _));\n-}\n\\ No newline at end of file"}, {"sha": "b4cf5417b3b062300a16d1ec0406ed8dd34b4b01", "filename": "src/test/run-pass/auto_serialize_gen.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize_gen.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,25 +0,0 @@\n-// aux-build:auto_serialize_lib.rs\n-// xfail-fast:aux-build currently incompatible\n-\n-use std;\n-use auto_serialize_lib;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import auto_serialize_lib::*;\n-\n-// Test where we link various types used by name.\n-\n-#[auto_serialize]\n-type spanned<T> = {lo: uint, hi: uint, node: T};\n-\n-#[auto_serialize]\n-type spanned_uint = spanned<uint>;\n-\n-fn main() {\n-    test_ser_and_deser({lo: 0u, hi: 5u, node: 22u},\n-                       \"{lo: 0u, hi: 5u, node: 22u}\",\n-                       spanned_uint::serialize(_, _),\n-                       spanned_uint::deserialize(_),\n-                       spanned_uint::serialize(_, _));\n-}\n\\ No newline at end of file"}, {"sha": "5f3cd8f7aa62ab26be25506c4b141af8226150ec", "filename": "src/test/run-pass/auto_serialize_link.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize_link.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,28 +0,0 @@\n-// aux-build:auto_serialize_lib.rs\n-// xfail-fast:aux-build currently incompatible\n-\n-use std;\n-use auto_serialize_lib;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import auto_serialize_lib::*;\n-\n-// Test where we link various types used by name.\n-\n-#[auto_serialize]\n-type uint_vec = [uint];\n-\n-#[auto_serialize]\n-type some_rec = {v: uint_vec};\n-\n-#[auto_serialize]\n-enum an_enum = some_rec;\n-\n-fn main() {\n-    test_ser_and_deser(an_enum({v: [1u, 2u, 3u]}),\n-                       \"an_enum({v: [1u, 2u, 3u]})\",\n-                       an_enum::serialize(_, _),\n-                       an_enum::deserialize(_),\n-                       an_enum::serialize(_, _));\n-}\n\\ No newline at end of file"}, {"sha": "a16396ce3d0e615d5bdaf3070fa005f3aa5f7998", "filename": "src/test/run-pass/auto_serialize_rec.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize_rec.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,20 +0,0 @@\n-// aux-build:auto_serialize_lib.rs\n-// xfail-fast:aux-build currently incompatible\n-\n-use std;\n-use auto_serialize_lib;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import auto_serialize_lib::*;\n-\n-#[auto_serialize]\n-type point = {x: uint, y: uint};\n-\n-fn main() {\n-    test_ser_and_deser({x: 3u, y: 5u},\n-                       \"{x: 3u, y: 5u}\",\n-                       point::serialize(_, _),\n-                       point::deserialize(_),\n-                       point::serialize(_, _));\n-}\n\\ No newline at end of file"}, {"sha": "24fa76d5316eb67e96f217c6f6dcaa4bc75910e7", "filename": "src/test/run-pass/auto_serialize_vec.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30cb8e43a57f8f16065c37a664b26db0891f134/src%2Ftest%2Frun-pass%2Fauto_serialize_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize_vec.rs?ref=b30cb8e43a57f8f16065c37a664b26db0891f134", "patch": "@@ -1,20 +0,0 @@\n-// aux-build:auto_serialize_lib.rs\n-// xfail-fast:aux-build currently incompatible\n-\n-use std;\n-use auto_serialize_lib;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import auto_serialize_lib::*;\n-\n-#[auto_serialize]\n-type uint_vec = [uint];\n-\n-fn main() {\n-    test_ser_and_deser([1u, 2u, 3u],\n-                       \"[1u, 2u, 3u]\",\n-                       uint_vec::serialize(_, _),\n-                       uint_vec::deserialize(_),\n-                       uint_vec::serialize(_, _));\n-}\n\\ No newline at end of file"}]}