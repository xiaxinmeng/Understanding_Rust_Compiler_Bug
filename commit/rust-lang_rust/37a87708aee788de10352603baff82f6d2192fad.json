{"sha": "37a87708aee788de10352603baff82f6d2192fad", "node_id": "C_kwDOAAsO6NoAKDM3YTg3NzA4YWVlNzg4ZGUxMDM1MjYwM2JhZmY4MmY2ZDIxOTJmYWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T12:19:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T12:19:48Z"}, "message": "internal: Don't kick off inference in Semantics::descend_into_macros_impl", "tree": {"sha": "3804f8fcdee46b29ce478ea706d59b0819451759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3804f8fcdee46b29ce478ea706d59b0819451759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a87708aee788de10352603baff82f6d2192fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a87708aee788de10352603baff82f6d2192fad", "html_url": "https://github.com/rust-lang/rust/commit/37a87708aee788de10352603baff82f6d2192fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a87708aee788de10352603baff82f6d2192fad/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "html_url": "https://github.com/rust-lang/rust/commit/2ca3834c9f15027fa68a0d0f70f7abf75a26d750"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "02da397b0cec1f29314397aa5238219267db2360", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37a87708aee788de10352603baff82f6d2192fad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a87708aee788de10352603baff82f6d2192fad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=37a87708aee788de10352603baff82f6d2192fad", "patch": "@@ -528,7 +528,7 @@ impl<'db> SemanticsImpl<'db> {\n         if first == last {\n             self.descend_into_macros_impl(\n                 first,\n-                |InFile { value, .. }| {\n+                &mut |InFile { value, .. }| {\n                     if let Some(node) = value.ancestors().find_map(N::cast) {\n                         res.push(node)\n                     }\n@@ -540,7 +540,7 @@ impl<'db> SemanticsImpl<'db> {\n             let mut scratch: SmallVec<[_; 1]> = smallvec![];\n             self.descend_into_macros_impl(\n                 first,\n-                |token| {\n+                &mut |token| {\n                     scratch.push(token);\n                 },\n                 false,\n@@ -549,7 +549,7 @@ impl<'db> SemanticsImpl<'db> {\n             let mut scratch = scratch.into_iter();\n             self.descend_into_macros_impl(\n                 last,\n-                |InFile { value: last, file_id: last_fid }| {\n+                &mut |InFile { value: last, file_id: last_fid }| {\n                     if let Some(InFile { value: first, file_id: first_fid }) = scratch.next() {\n                         if first_fid == last_fid {\n                             if let Some(p) = first.parent() {\n@@ -574,28 +574,28 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn descend_into_macros(&self, token: SyntaxToken) -> SmallVec<[SyntaxToken; 1]> {\n         let mut res = smallvec![];\n-        self.descend_into_macros_impl(token, |InFile { value, .. }| res.push(value), false);\n+        self.descend_into_macros_impl(token, &mut |InFile { value, .. }| res.push(value), false);\n         res\n     }\n \n     fn descend_into_macros_single(&self, token: SyntaxToken) -> SyntaxToken {\n         let mut res = token.clone();\n-        self.descend_into_macros_impl(token, |InFile { value, .. }| res = value, true);\n+        self.descend_into_macros_impl(token, &mut |InFile { value, .. }| res = value, true);\n         res\n     }\n \n     fn descend_into_macros_impl(\n         &self,\n         token: SyntaxToken,\n-        mut f: impl FnMut(InFile<SyntaxToken>),\n+        f: &mut dyn FnMut(InFile<SyntaxToken>),\n         single: bool,\n     ) {\n         let _p = profile::span(\"descend_into_macros\");\n         let parent = match token.parent() {\n             Some(it) => it,\n             None => return,\n         };\n-        let sa = self.analyze(&parent);\n+        let sa = self.analyze_no_infer(&parent);\n         let mut stack: SmallVec<[_; 4]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut mcache = self.macro_call_cache.borrow_mut();\n@@ -927,14 +927,23 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn analyze(&self, node: &SyntaxNode) -> SourceAnalyzer {\n-        self.analyze_impl(node, None)\n+        self.analyze_impl(node, None, true)\n     }\n \n     fn analyze_with_offset(&self, node: &SyntaxNode, offset: TextSize) -> SourceAnalyzer {\n-        self.analyze_impl(node, Some(offset))\n+        self.analyze_impl(node, Some(offset), true)\n     }\n \n-    fn analyze_impl(&self, node: &SyntaxNode, offset: Option<TextSize>) -> SourceAnalyzer {\n+    fn analyze_no_infer(&self, node: &SyntaxNode) -> SourceAnalyzer {\n+        self.analyze_impl(node, None, false)\n+    }\n+\n+    fn analyze_impl(\n+        &self,\n+        node: &SyntaxNode,\n+        offset: Option<TextSize>,\n+        infer_body: bool,\n+    ) -> SourceAnalyzer {\n         let _p = profile::span(\"Semantics::analyze_impl\");\n         let node = self.find_file(node.clone());\n         let node = node.as_ref();\n@@ -946,7 +955,11 @@ impl<'db> SemanticsImpl<'db> {\n \n         let resolver = match container {\n             ChildContainer::DefWithBodyId(def) => {\n-                return SourceAnalyzer::new_for_body(self.db, def, node, offset)\n+                return if infer_body {\n+                    SourceAnalyzer::new_for_body(self.db, def, node, offset)\n+                } else {\n+                    SourceAnalyzer::new_for_body_no_infer(self.db, def, node, offset)\n+                }\n             }\n             ChildContainer::TraitId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::ImplId(it) => it.resolver(self.db.upcast()),"}, {"sha": "2d779393f0950601f7e420698cc63c3c222d45bb", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a87708aee788de10352603baff82f6d2192fad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a87708aee788de10352603baff82f6d2192fad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=37a87708aee788de10352603baff82f6d2192fad", "patch": "@@ -50,7 +50,7 @@ impl SourceAnalyzer {\n     pub(crate) fn new_for_body(\n         db: &dyn HirDatabase,\n         def: DefWithBodyId,\n-        node: InFile<&SyntaxNode>,\n+        node @ InFile { file_id, .. }: InFile<&SyntaxNode>,\n         offset: Option<TextSize>,\n     ) -> SourceAnalyzer {\n         let (body, source_map) = db.body_with_source_map(def);\n@@ -65,7 +65,29 @@ impl SourceAnalyzer {\n             body: Some(body),\n             body_source_map: Some(source_map),\n             infer: Some(db.infer(def)),\n-            file_id: node.file_id,\n+            file_id,\n+        }\n+    }\n+\n+    pub(crate) fn new_for_body_no_infer(\n+        db: &dyn HirDatabase,\n+        def: DefWithBodyId,\n+        node @ InFile { file_id, .. }: InFile<&SyntaxNode>,\n+        offset: Option<TextSize>,\n+    ) -> SourceAnalyzer {\n+        let (body, source_map) = db.body_with_source_map(def);\n+        let scopes = db.expr_scopes(def);\n+        let scope = match offset {\n+            None => scope_for(&scopes, &source_map, node),\n+            Some(offset) => scope_for_offset(db, &scopes, &source_map, node.with_value(offset)),\n+        };\n+        let resolver = resolver_for_scope(db.upcast(), def, scope);\n+        SourceAnalyzer {\n+            resolver,\n+            body: Some(body),\n+            body_source_map: Some(source_map),\n+            infer: None,\n+            file_id,\n         }\n     }\n "}]}