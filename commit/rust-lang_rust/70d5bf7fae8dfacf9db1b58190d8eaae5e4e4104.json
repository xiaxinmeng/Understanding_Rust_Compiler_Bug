{"sha": "70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "node_id": "C_kwDOAAsO6NoAKDcwZDViZjdmYWU4ZGZhY2Y5ZGIxYjU4MTkwZDhlYWFlNWU0ZTQxMDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-10T04:12:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-10T04:12:15Z"}, "message": "Rollup merge of #111410 - kylematsuda:earlybinder-abstract-const, r=BoxyUwU\n\nSwitch to `EarlyBinder` for `thir_abstract_const` query\n\nPart of the work to finish https://github.com/rust-lang/rust/issues/105779.\n\nThis PR adds `EarlyBinder` to the return type of the `thir_abstract_const` query and removes `bound_abstract_const`.\n\nr? `@compiler-errors`", "tree": {"sha": "2d61f9f6a441ce4395782d0c5e57cc75e133d64b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d61f9f6a441ce4395782d0c5e57cc75e133d64b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWxmfCRBK7hj4Ov3rIwAArQYIAC0sfdheAV36gnG1WEKyXP2I\n1AuKMmeEQAifPGVzQnBhzS06rec0rA/BTO6awZA7RgV8b8PeNA2QGGGw32nI51wA\nnA4UzsZlN98MxnQV9sGiN+xfGIEiSLxyJeT3Cv5VjkXZGCQCSmRhiByURKxRCzPp\nOOdW66LcQpX/bn8l68gvrbVNQStCdVWIj6mjOmUcRbEmtlqQIq+MBteveD5xIOXn\ngAxScCxlUx3RZRmg9aVrM3p9vMvoELwYgxY4Qq/Cvns4/gZQchiuoK38o9wIOPoV\nYFNV7DMVGA1ZjteSNWuBqqf3YPXbBtRi1pcwqzDlKNnGnfIhaUvYh8fi8vf4DcE=\n=92zF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d61f9f6a441ce4395782d0c5e57cc75e133d64b\nparent f60a174c2de3204024f8a617f6568b1d7bc4a398\nparent 26dc139b3702e7d3d2ea9dd0915da1d307f55011\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683691935 +0200\ncommitter GitHub <noreply@github.com> 1683691935 +0200\n\nRollup merge of #111410 - kylematsuda:earlybinder-abstract-const, r=BoxyUwU\n\nSwitch to `EarlyBinder` for `thir_abstract_const` query\n\nPart of the work to finish https://github.com/rust-lang/rust/issues/105779.\n\nThis PR adds `EarlyBinder` to the return type of the `thir_abstract_const` query and removes `bound_abstract_const`.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "html_url": "https://github.com/rust-lang/rust/commit/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60a174c2de3204024f8a617f6568b1d7bc4a398", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60a174c2de3204024f8a617f6568b1d7bc4a398", "html_url": "https://github.com/rust-lang/rust/commit/f60a174c2de3204024f8a617f6568b1d7bc4a398"}, {"sha": "26dc139b3702e7d3d2ea9dd0915da1d307f55011", "url": "https://api.github.com/repos/rust-lang/rust/commits/26dc139b3702e7d3d2ea9dd0915da1d307f55011", "html_url": "https://github.com/rust-lang/rust/commit/26dc139b3702e7d3d2ea9dd0915da1d307f55011"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "9a95a9c8375e00a2483d8d8b239ace66246aa2b0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -1530,7 +1530,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         // variables\n         let tcx = self.tcx;\n         if substs.has_non_region_infer() {\n-            if let Some(ct) = tcx.bound_abstract_const(unevaluated.def)? {\n+            if let Some(ct) = tcx.thir_abstract_const(unevaluated.def)? {\n                 let ct = tcx.expand_abstract_consts(ct.subst(tcx, substs));\n                 if let Err(e) = ct.error_reported() {\n                     return Err(ErrorHandled::Reported(e));"}, {"sha": "e2f6acb186b7234204f536ce424d644f17fc412e", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -394,7 +394,7 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_generator_witnesses: Table<DefIndex, LazyValue<mir::GeneratorLayout<'static>>>,\n     promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'static>>>>,\n-    thir_abstract_const: Table<DefIndex, LazyValue<ty::Const<'static>>>,\n+    thir_abstract_const: Table<DefIndex, LazyValue<ty::EarlyBinder<ty::Const<'static>>>>,\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     constness: Table<DefIndex, hir::Constness>,"}, {"sha": "28a9c1eef1a6d30c1daff18fd066af628d064e21", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -82,9 +82,10 @@ impl EraseType for Result<Option<ty::Instance<'_>>, rustc_errors::ErrorGuarantee\n         [u8; size_of::<Result<Option<ty::Instance<'static>>, rustc_errors::ErrorGuaranteed>>()];\n }\n \n-impl EraseType for Result<Option<ty::Const<'_>>, rustc_errors::ErrorGuaranteed> {\n-    type Result =\n-        [u8; size_of::<Result<Option<ty::Const<'static>>, rustc_errors::ErrorGuaranteed>>()];\n+impl EraseType for Result<Option<ty::EarlyBinder<ty::Const<'_>>>, rustc_errors::ErrorGuaranteed> {\n+    type Result = [u8; size_of::<\n+        Result<Option<ty::EarlyBinder<ty::Const<'static>>>, rustc_errors::ErrorGuaranteed>,\n+    >()];\n }\n \n impl EraseType for Result<ty::GenericArg<'_>, traits::query::NoSolution> {"}, {"sha": "dd89283d704e8b33b92d2cbbbc4a1cf93448df92", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -402,7 +402,7 @@ rustc_queries! {\n     /// Try to build an abstract representation of the given constant.\n     query thir_abstract_const(\n         key: DefId\n-    ) -> Result<Option<ty::Const<'tcx>>, ErrorGuaranteed> {\n+    ) -> Result<Option<ty::EarlyBinder<ty::Const<'tcx>>>, ErrorGuaranteed> {\n         desc {\n             |tcx| \"building an abstract representation for `{}`\", tcx.def_path_str(key),\n         }"}, {"sha": "972c417cbbabd907ef53a0a204a51920dad7a510", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -4,7 +4,6 @@ use crate::ty::{\n     TypeVisitableExt,\n };\n use rustc_errors::ErrorGuaranteed;\n-use rustc_hir::def_id::DefId;\n \n #[derive(Hash, Debug, Clone, Copy, Ord, PartialOrd, PartialEq, Eq)]\n #[derive(TyDecodable, TyEncodable, HashStable, TypeVisitable, TypeFoldable)]\n@@ -35,12 +34,6 @@ TrivialTypeTraversalAndLiftImpls! {\n pub type BoundAbstractConst<'tcx> = Result<Option<EarlyBinder<ty::Const<'tcx>>>, ErrorGuaranteed>;\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Returns a const without substs applied\n-    pub fn bound_abstract_const(self, uv: DefId) -> BoundAbstractConst<'tcx> {\n-        let ac = self.thir_abstract_const(uv);\n-        Ok(ac?.map(|ac| EarlyBinder(ac)))\n-    }\n-\n     pub fn expand_abstract_consts<T: TypeFoldable<TyCtxt<'tcx>>>(self, ac: T) -> T {\n         struct Expander<'tcx> {\n             tcx: TyCtxt<'tcx>,\n@@ -59,7 +52,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n             fn fold_const(&mut self, c: Const<'tcx>) -> Const<'tcx> {\n                 let ct = match c.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => match self.tcx.bound_abstract_const(uv.def) {\n+                    ty::ConstKind::Unevaluated(uv) => match self.tcx.thir_abstract_const(uv.def) {\n                         Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);"}, {"sha": "3dd1d056be24f603e272e5e68486547d709a2882", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=70d5bf7fae8dfacf9db1b58190d8eaae5e4e4104", "patch": "@@ -394,7 +394,7 @@ impl<'a, 'tcx> visit::Visitor<'a, 'tcx> for IsThirPolymorphic<'a, 'tcx> {\n pub fn thir_abstract_const(\n     tcx: TyCtxt<'_>,\n     def: LocalDefId,\n-) -> Result<Option<ty::Const<'_>>, ErrorGuaranteed> {\n+) -> Result<Option<ty::EarlyBinder<ty::Const<'_>>>, ErrorGuaranteed> {\n     if !tcx.features().generic_const_exprs {\n         return Ok(None);\n     }\n@@ -420,7 +420,7 @@ pub fn thir_abstract_const(\n \n     let root_span = body.exprs[body_id].span;\n \n-    Some(recurse_build(tcx, body, body_id, root_span)).transpose()\n+    Ok(Some(ty::EarlyBinder(recurse_build(tcx, body, body_id, root_span)?)))\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {"}]}