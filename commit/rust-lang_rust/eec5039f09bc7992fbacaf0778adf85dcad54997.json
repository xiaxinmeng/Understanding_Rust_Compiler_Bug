{"sha": "eec5039f09bc7992fbacaf0778adf85dcad54997", "node_id": "C_kwDOAAsO6NoAKGVlYzUwMzlmMDliYzc5OTJmYmFjYWYwNzc4YWRmODVkY2FkNTQ5OTc", "commit": {"author": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-11-28T09:40:00Z"}, "committer": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-12-03T08:06:57Z"}, "message": "fix test", "tree": {"sha": "d93c13729b8104900329a7f0b23fa9b0d70f842d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93c13729b8104900329a7f0b23fa9b0d70f842d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec5039f09bc7992fbacaf0778adf85dcad54997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec5039f09bc7992fbacaf0778adf85dcad54997", "html_url": "https://github.com/rust-lang/rust/commit/eec5039f09bc7992fbacaf0778adf85dcad54997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec5039f09bc7992fbacaf0778adf85dcad54997/comments", "author": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a94135cbce195078efcbf18ac2347a1d734e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a94135cbce195078efcbf18ac2347a1d734e68", "html_url": "https://github.com/rust-lang/rust/commit/67a94135cbce195078efcbf18ac2347a1d734e68"}], "stats": {"total": 155, "additions": 121, "deletions": 34}, "files": [{"sha": "eebfb753a0c5dfdefcb0e542676fcbf9c8faba6d", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n                     // Index is a const block.\n-                    if self.suppress_restriction_lint_in_const && let ExprKind::ConstBlock(..) = index.kind {\n+                    if let ExprKind::ConstBlock(..) = index.kind {\n                         return;\n                     }\n                     // Index is a constant uint."}, {"sha": "1b9384d7e3ee6092512025e92324a856aadd09a4", "filename": "tests/ui-toml/suppress_lint_in_const/clippy.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -1 +1 @@\n-suppress-restriction-lint-in-const = false\n+suppress-restriction-lint-in-const = true"}, {"sha": "5a2df9f6c5d912779067a1fe0ce6dcbd32a0f09f", "filename": "tests/ui-toml/suppress_lint_in_const/test.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -1,4 +1,51 @@\n+#![feature(inline_const)]\n #![warn(clippy::indexing_slicing)]\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n+\n+const ARR: [i32; 2] = [1, 2];\n+const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+\n+const fn idx() -> usize {\n+    1\n+}\n+const fn idx4() -> usize {\n+    4\n+}\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+    let index: usize = 1;\n+    x[index];\n+    x[4]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+\n+    x[0]; // Ok, should not produce stderr.\n+    x[3]; // Ok, should not produce stderr.\n+    x[const { idx() }]; // Ok, should not produce stderr.\n+    x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    const { &ARR[idx()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+    const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+\n+    let y = &x;\n+    y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021\n+    y[4]; // Ok, rustc will handle references too.\n+\n+    let v = vec![0; 5];\n+    v[0];\n+    v[10];\n+    v[1 << 3];\n+\n+    const N: usize = 15; // Out of bounds\n+    const M: usize = 3; // In bounds\n+    x[N]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[M]; // Ok, should not produce stderr.\n+    v[N];\n+    v[M];\n+}\n \n /// An opaque integer representation\n pub struct Integer<'a> {\n@@ -11,5 +58,3 @@ impl<'a> Integer<'a> {\n         self.value[0] & 0b1000_0000 != 0\n     }\n }\n-\n-fn main() {}"}, {"sha": "bc178b7e1319d4e81f9ee4303b6338d5a7e591ef", "filename": "tests/ui-toml/suppress_lint_in_const/test.stderr", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -1,12 +1,70 @@\n+error[E0080]: evaluation of `main::{constant#3}` failed\n+  --> $DIR/test.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+note: erroneous constant used\n+  --> $DIR/test.rs:31:5\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n error: indexing may panic\n-  --> $DIR/test.rs:11:9\n+  --> $DIR/test.rs:22:5\n    |\n-LL |         self.value[0] & 0b1000_0000 != 0\n-   |         ^^^^^^^^^^^^^\n+LL |     x[index];\n+   |     ^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n-   = note: the suggestion might not be applicable in constant blocks\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: indexing may panic\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     v[0];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:39:5\n+   |\n+LL |     v[10];\n+   |     ^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:40:5\n+   |\n+LL |     v[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:46:5\n+   |\n+LL |     v[N];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:47:5\n+   |\n+LL |     v[M];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/test.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "26abc9edb5e445f16976d94e032d33003388166d", "filename": "tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.rs?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -6,7 +6,7 @@\n #![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ARR: [i32; 2] = [1, 2];\n-const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n \n const fn idx() -> usize {\n@@ -27,8 +27,8 @@ fn main() {\n     x[3]; // Ok, should not produce stderr.\n     x[const { idx() }]; // Ok, should not produce stderr.\n     x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n-    const { &ARR[idx()] }; // Ok, should not produce stderr.\n-    const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+    const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+    const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n \n     let y = &x;\n     y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021"}, {"sha": "8fd77913a3fd97626ed617357380b578ab13ef1c", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eec5039f09bc7992fbacaf0778adf85dcad54997/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=eec5039f09bc7992fbacaf0778adf85dcad54997", "patch": "@@ -1,7 +1,7 @@\n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:9:20\n    |\n-LL | const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+LL | const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |                    ^^^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n@@ -20,13 +20,13 @@ LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n note: erroneous constant used\n   --> $DIR/indexing_slicing_index.rs:31:5\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: indexing may panic\n@@ -37,26 +37,10 @@ LL |     x[index];\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:28:5\n-   |\n-LL |     x[const { idx() }]; // Ok, should not produce stderr.\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n-\n-error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:29:5\n-   |\n-LL |     x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n-\n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:30:14\n    |\n-LL |     const { &ARR[idx()] }; // Ok, should not produce stderr.\n+LL |     const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |              ^^^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n@@ -65,7 +49,7 @@ LL |     const { &ARR[idx()] }; // Ok, should not produce stderr.\n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |              ^^^^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n@@ -117,6 +101,6 @@ error[E0080]: evaluation of constant value failed\n LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n    |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}