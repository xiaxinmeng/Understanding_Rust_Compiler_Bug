{"sha": "062bfd310af68016d080dabfceb7d47521939f43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MmJmZDMxMGFmNjgwMTZkMDgwZGFiZmNlYjdkNDc1MjE5MzlmNDM=", "commit": {"author": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-07-01T23:41:17Z"}, "committer": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-07-01T23:41:17Z"}, "message": "merging task/coroutine refactoring back into upstream", "tree": {"sha": "e62fe8a2168198774afd4a874ea1dd3bba6f0262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62fe8a2168198774afd4a874ea1dd3bba6f0262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/062bfd310af68016d080dabfceb7d47521939f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/062bfd310af68016d080dabfceb7d47521939f43", "html_url": "https://github.com/rust-lang/rust/commit/062bfd310af68016d080dabfceb7d47521939f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/062bfd310af68016d080dabfceb7d47521939f43/comments", "author": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cfad4b6de3a9ab749c975338c23fc2e20b0beec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfad4b6de3a9ab749c975338c23fc2e20b0beec", "html_url": "https://github.com/rust-lang/rust/commit/5cfad4b6de3a9ab749c975338c23fc2e20b0beec"}, {"sha": "ddbccecc27e7a6be144c9c55d25a5b56cac0a179", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbccecc27e7a6be144c9c55d25a5b56cac0a179", "html_url": "https://github.com/rust-lang/rust/commit/ddbccecc27e7a6be144c9c55d25a5b56cac0a179"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "b849bb690338603b129ed2ebeb585d90a3adb853", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/062bfd310af68016d080dabfceb7d47521939f43/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfd310af68016d080dabfceb7d47521939f43/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=062bfd310af68016d080dabfceb7d47521939f43", "patch": "@@ -155,7 +155,7 @@ impl Scheduler {\n \n         rtdebug!(\"run taking sched\");\n         let sched = Local::take::<Scheduler>();\n-        // XXX: Reenable this once we're using a per-task queue. With a shared\n+        // XXX: Reenable this once we're using a per-scheduler queue. With a shared\n         // queue this is not true\n         //assert!(sched.work_queue.is_empty());\n         rtdebug!(\"scheduler metrics: %s\\n\", {\n@@ -191,29 +191,29 @@ impl Scheduler {\n         if sched.resume_task_from_queue() {\n             // We performed a scheduling action. There may be other work\n             // to do yet, so let's try again later.\n-            let mut sched = Local::take::<Scheduler>();\n-            sched.metrics.tasks_resumed_from_queue += 1;\n-            sched.event_loop.callback(Scheduler::run_sched_once);\n-            Local::put(sched);\n+            do Local::borrow::<Scheduler, ()> |sched| {\n+                sched.metrics.tasks_resumed_from_queue += 1;\n+                sched.event_loop.callback(Scheduler::run_sched_once);\n+            }\n             return;\n         }\n \n         // If we got here then there was no work to do.\n         // Generate a SchedHandle and push it to the sleeper list so\n         // somebody can wake us up later.\n         rtdebug!(\"no work to do\");\n-        let mut sched = Local::take::<Scheduler>();\n-        sched.metrics.wasted_turns += 1;\n-        if !sched.sleepy && !sched.no_sleep {\n-            rtdebug!(\"sleeping\");\n-            sched.metrics.sleepy_times += 1;\n-            sched.sleepy = true;\n-            let handle = sched.make_handle();\n-            sched.sleeper_list.push(handle);\n-        } else {\n-            rtdebug!(\"not sleeping\");\n+        do Local::borrow::<Scheduler, ()> |sched| {\n+            sched.metrics.wasted_turns += 1;\n+            if !sched.sleepy && !sched.no_sleep {\n+                rtdebug!(\"sleeping\");\n+                sched.metrics.sleepy_times += 1;\n+                sched.sleepy = true;\n+                let handle = sched.make_handle();\n+                sched.sleeper_list.push(handle);\n+            } else {\n+                rtdebug!(\"not sleeping\");\n+            }\n         }\n-        Local::put(sched);\n     }\n \n     pub fn make_handle(&mut self) -> SchedHandle {\n@@ -441,8 +441,7 @@ impl Scheduler {\n             // here we know we are home, execute now OR we know we\n             // aren't homed, and that this sched doesn't care\n             do this.switch_running_tasks_and_then(task) |sched, last_task| {\n-                let last_task = Cell::new(last_task);\n-                sched.enqueue_task(last_task.take());\n+                sched.enqueue_task(last_task);\n             }\n         } else if !homed && !this.run_anything {\n             // the task isn't homed, but it can't be run here\n@@ -1141,4 +1140,4 @@ mod test {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}]}