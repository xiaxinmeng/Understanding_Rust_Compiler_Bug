{"sha": "b45aebfdf6d37599bd3771a2ba8b0b429acde005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NWFlYmZkZjZkMzc1OTliZDM3NzFhMmJhOGIwYjQyOWFjZGUwMDU=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-05-25T23:07:33Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-05-29T13:19:46Z"}, "message": "it compiles, but we do not use the output yet", "tree": {"sha": "3009d602ced070a18dc31cc87cfb9c080561216b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3009d602ced070a18dc31cc87cfb9c080561216b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b45aebfdf6d37599bd3771a2ba8b0b429acde005", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlsNU3IACgkQiMlBzaHU\nZDLybxAAiqJe78xPEHFhCuDiWLec/e3nEyWOZNyzJX3+umfTxqCHJaB/dfoAhCI+\ntKoyvJ1Pno/iarIiRklykBrBvkXBc8nLfUPAEdr6PKBJrrJsSfF/3V//rUS3S+os\nQqfNhY/9mXETeEvoveCxq90Ep7kp8qW9xnQF4tsCAjKmw4v7VJ2nxV+kfkotC2Ef\n9+hTiqXENUe421roXYma3dMw07sTl8eaN3u9zbmgZzOsJxc2JGEwRsQ3SgVzsPmD\nysFcLYWNBVZmeKFAMwUw3yxWILQXFCOabOeHrOex+f2JnNtuffJHk8QS+JSPm52u\ns6mDR18PYz4AI5Hmz6YTfOVyGDpBgL6f3Y0VtNZO9Ai3J/kMdbmJFa67nG/aRar+\nOk66fIz4sQAVyxbIrNoQtuK8KtEG8GmgTdDYX2YyAcri0ntx8J37Cv73XvzA56Ga\n05jYrsG+Z6JXqRNFj1dJ9ghIfrkSmAsUsuN3ufy9kJZdyHbjEVbSusHDGcepXzPC\nHOm5hyUpwJ9jniN0r4mfL0k7Qn4xSVCzGXrcWQLsHi1ntw24+IGcvFT6NIMjLcxW\nJ1jyEPjCsNI2bm1R3fDttN/LwAEDvI8gy1VrjDcqKIxagot5O77SfQo/WWb4xEYC\nL2WJx9l2Nzk3Jl5l+xcIxPb+wAyvHJC5OgGIfKUZZnGTW9t1oJ8=\n=jw4/\n-----END PGP SIGNATURE-----", "payload": "tree 3009d602ced070a18dc31cc87cfb9c080561216b\nparent 4f88283869c6f1c69ed4fd56d2e9a1b065401cd4\nauthor Douglas Campos <qmx@qmx.me> 1527289653 +0000\ncommitter Santiago Pastorino <spastorino@gmail.com> 1527599986 -0300\n\nit compiles, but we do not use the output yet\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b45aebfdf6d37599bd3771a2ba8b0b429acde005", "html_url": "https://github.com/rust-lang/rust/commit/b45aebfdf6d37599bd3771a2ba8b0b429acde005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b45aebfdf6d37599bd3771a2ba8b0b429acde005/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f88283869c6f1c69ed4fd56d2e9a1b065401cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f88283869c6f1c69ed4fd56d2e9a1b065401cd4", "html_url": "https://github.com/rust-lang/rust/commit/4f88283869c6f1c69ed4fd56d2e9a1b065401cd4"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "397cf1680e0ab0cf22ed88e428125abf07653a20", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b45aebfdf6d37599bd3771a2ba8b0b429acde005/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45aebfdf6d37599bd3771a2ba8b0b429acde005/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b45aebfdf6d37599bd3771a2ba8b0b429acde005", "patch": "@@ -198,7 +198,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let borrow_set = Rc::new(BorrowSet::build(tcx, mir));\n \n     // If we are in non-lexical mode, compute the non-lexical lifetimes.\n-    let (regioncx, opt_closure_req) = nll::compute_regions(\n+    let (regioncx, _polonius_output, opt_closure_req) = nll::compute_regions(\n         infcx,\n         def_id,\n         free_regions,"}, {"sha": "ebc2800d204833a93bc4d135af10f873657504bc", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b45aebfdf6d37599bd3771a2ba8b0b429acde005/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45aebfdf6d37599bd3771a2ba8b0b429acde005/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=b45aebfdf6d37599bd3771a2ba8b0b429acde005", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n+use borrow_check::location::{LocationIndex, LocationTable};\n use borrow_check::nll::facts::AllFactsExt;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n+use dataflow::indexes::BorrowIndex;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n@@ -22,13 +23,15 @@ use rustc::util::nodemap::FxHashMap;\n use std::collections::BTreeSet;\n use std::fmt::Debug;\n use std::io;\n+use std::rc::Rc;\n use std::path::PathBuf;\n use transform::MirSource;\n use util::liveness::{LivenessResults, LocalSet};\n \n use self::mir_util::PassWhere;\n use util as mir_util;\n use util::pretty::{self, ALIGN};\n+use polonius_engine::{Algorithm, Output};\n \n mod constraint_generation;\n pub mod explain_borrow;\n@@ -83,6 +86,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     borrow_set: &BorrowSet<'tcx>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n+    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n     Option<ClosureRegionRequirements<'gcx>>,\n ) {\n     // Run the MIR type-checker.\n@@ -98,7 +102,9 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         move_data,\n     );\n \n-    let mut all_facts = if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+    let mut all_facts = if infcx.tcx.sess.opts.debugging_opts.nll_facts\n+        || infcx.tcx.sess.opts.debugging_opts.polonius\n+    {\n         Some(AllFacts::default())\n     } else {\n         None\n@@ -142,11 +148,19 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     );\n \n     // Dump facts if requested.\n-    if let Some(all_facts) = all_facts {\n-        let def_path = infcx.tcx.hir.def_path(def_id);\n-        let dir_path = PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n-        all_facts.write_to_dir(dir_path, location_table).unwrap();\n-    }\n+    let polonius_output = all_facts.and_then(|all_facts| {\n+         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+             let def_path = infcx.tcx.hir.def_path(def_id);\n+             let dir_path = PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n+             all_facts.write_to_dir(dir_path, location_table).unwrap();\n+         }\n+\n+         if infcx.tcx.sess.opts.debugging_opts.polonius {\n+            Some(Rc::new(Output::compute(&all_facts, Algorithm::DatafrogOpt, false)))\n+         } else {\n+             None\n+         }\n+    });\n \n     // Solve the region constraints.\n     let closure_region_requirements = regioncx.solve(infcx, &mir, def_id);\n@@ -166,7 +180,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // information\n     dump_annotation(infcx, &mir, def_id, &regioncx, &closure_region_requirements);\n \n-    (regioncx, closure_region_requirements)\n+    (regioncx, polonius_output, closure_region_requirements)\n }\n \n fn dump_mir_results<'a, 'gcx, 'tcx>("}]}