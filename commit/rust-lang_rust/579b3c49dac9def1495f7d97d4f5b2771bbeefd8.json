{"sha": "579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWIzYzQ5ZGFjOWRlZjE0OTVmN2Q5N2Q0ZjViMjc3MWJiZWVmZDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-27T19:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T19:36:18Z"}, "message": "adjust MemoryKind comment", "tree": {"sha": "096eb1a2fda24d3c8652eb0c62c817bc609b3bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/096eb1a2fda24d3c8652eb0c62c817bc609b3bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeflWyCRBK7hj4Ov3rIwAAdHIIAJGCi4POUQ0hHAsJQiYnoDgS\nZqNOo9VEK8/tQqVBsYz+1SF9CGNHS+SmI/2MaFYXWEBYRQA9QI/Cyt/bxGcDJ8RC\nrbOO+lm714Sh67pFGx7GFvJya1/zzwRj5fkeLi3zSOttdfWkdRQO8SZhBCSOKELt\nJImTIZxQmr9dpyKmrqZUQ0g2nNSGskkG1GWZmw9Nx0mMJ31+ctn7cgszW8H+BPeb\nZ/DM0Mkc/DCLm6viOHPAnKT5XroEzAEbI8dzCdqQAXcSaErsCHnMynlwn9TeXE8t\ngsIV/B25pDCGOMPhg/blhmETv4OiDvx6umJ1Il5945gTUjaJW4QSDjpZjeaRREU=\n=ckWW\n-----END PGP SIGNATURE-----\n", "payload": "tree 096eb1a2fda24d3c8652eb0c62c817bc609b3bc8\nparent ea836eeb0d72d5f983489f283ea7fc5f6a7ad442\nauthor Ralf Jung <post@ralfj.de> 1585337778 +0100\ncommitter GitHub <noreply@github.com> 1585337778 +0100\n\nadjust MemoryKind comment"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "html_url": "https://github.com/rust-lang/rust/commit/579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579b3c49dac9def1495f7d97d4f5b2771bbeefd8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea836eeb0d72d5f983489f283ea7fc5f6a7ad442", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea836eeb0d72d5f983489f283ea7fc5f6a7ad442", "html_url": "https://github.com/rust-lang/rust/commit/ea836eeb0d72d5f983489f283ea7fc5f6a7ad442"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "ed689b1f4272bbad5568d9623e6b5e755595c9f6", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579b3c49dac9def1495f7d97d4f5b2771bbeefd8/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579b3c49dac9def1495f7d97d4f5b2771bbeefd8/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "patch": "@@ -146,9 +146,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // Allocate environment block & Store environment variables to environment block.\n         // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n-        // FIXME: MemoryKind should be `MiMemoryKind::Machine`,\n-        //        but using it results in a Stacked Borrows error when running MIRI on 'tests/run-pass/env.rs'\n-        //        For now, use `MiriMemoryKind::WinHeap` instead.\n+        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n         let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::WinHeap.into());\n         // If the function succeeds, the return value is a pointer to the environment block of the current process.\n         Ok(envblock_ptr.into())\n@@ -160,9 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n         let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n-        // FIXME: MemoryKind should be `MiMemoryKind::Machine`,\n-        //        but using it results in a Stacked Borrows error when running MIRI on 'tests/run-pass/env.rs'\n-        //        For now, use `MiriMemoryKind::WinHeap` instead.\n+        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n         let result = this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into());\n         // If the function succeeds, the return value is nonzero.\n         Ok(result.is_ok() as i32)"}]}