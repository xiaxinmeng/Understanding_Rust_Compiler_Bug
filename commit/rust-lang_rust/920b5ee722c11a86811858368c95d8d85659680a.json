{"sha": "920b5ee722c11a86811858368c95d8d85659680a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMGI1ZWU3MjJjMTFhODY4MTE4NTgzNjhjOTVkOGQ4NTY1OTY4MGE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-01T21:21:54Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-13T12:49:16Z"}, "message": "Lint on extern in item declaration position", "tree": {"sha": "c4dcb741fbd469a2bb52c3c60afba14ceaeb483a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4dcb741fbd469a2bb52c3c60afba14ceaeb483a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920b5ee722c11a86811858368c95d8d85659680a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920b5ee722c11a86811858368c95d8d85659680a", "html_url": "https://github.com/rust-lang/rust/commit/920b5ee722c11a86811858368c95d8d85659680a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920b5ee722c11a86811858368c95d8d85659680a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "html_url": "https://github.com/rust-lang/rust/commit/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "69257ce1c19e961962503d6580be94df839c198f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/920b5ee722c11a86811858368c95d8d85659680a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920b5ee722c11a86811858368c95d8d85659680a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=920b5ee722c11a86811858368c95d8d85659680a", "patch": "@@ -310,7 +310,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     );\n                     let sig = hir::FnSig {\n                         decl,\n-                        header: this.lower_fn_header(header),\n+                        header: this.lower_fn_header(header, fn_sig_span, id),\n                         span: fn_sig_span,\n                     };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n@@ -806,13 +806,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n+                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n+                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n@@ -882,6 +882,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n                     asyncness.opt_return_id(),\n+                    i.id,\n                 );\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n@@ -1275,8 +1276,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         fn_def_id: LocalDefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n+        id: NodeId,\n     ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n-        let header = self.lower_fn_header(sig.header);\n+        let header = self.lower_fn_header(sig.header, sig.span, id);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n             fn_def_id,\n@@ -1293,12 +1295,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         (generics, hir::FnSig { header, decl, span: sig.span })\n     }\n \n-    fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n+    fn lower_fn_header(&mut self, h: FnHeader, span: Span, id: NodeId) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n             asyncness: self.lower_asyncness(h.asyncness),\n             constness: self.lower_constness(h.constness),\n-            abi: self.lower_extern(h.ext),\n+            abi: self.lower_extern(h.ext, span, id),\n         }\n     }\n \n@@ -1309,10 +1311,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         })\n     }\n \n-    pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n+    pub(super) fn lower_extern(&mut self, ext: Extern, span: Span, id: NodeId) -> abi::Abi {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n-            Extern::Implicit => abi::Abi::C,\n+            Extern::Implicit => {\n+                self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n+                abi::Abi::C\n+            }\n             Extern::Explicit(abi) => self.lower_abi(abi),\n         }\n     }"}, {"sha": "6d95da02151a85c1c00b9d753ae009b756f9cf89", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/920b5ee722c11a86811858368c95d8d85659680a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920b5ee722c11a86811858368c95d8d85659680a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=920b5ee722c11a86811858368c95d8d85659680a", "patch": "@@ -1290,14 +1290,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n                 this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n+                    let span = this.sess.source_map().next_point(t.span.shrink_to_lo());\n                     hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(\n                             &f.generic_params,\n                             &NodeMap::default(),\n                             ImplTraitContext::disallowed(),\n                         ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n-                        abi: this.lower_extern(f.ext),\n+                        abi: this.lower_extern(f.ext, span, t.id),\n                         decl: this.lower_fn_decl(&f.decl, None, false, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),\n                     }))"}]}