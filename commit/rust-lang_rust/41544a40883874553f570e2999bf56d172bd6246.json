{"sha": "41544a40883874553f570e2999bf56d172bd6246", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTQ0YTQwODgzODc0NTUzZjU3MGUyOTk5YmY1NmQxNzJiZDYyNDY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T03:47:26Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T05:10:37Z"}, "message": "Refactoring", "tree": {"sha": "b45d7619b97cc6edaf6bcf7d1a42366879bdd703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b45d7619b97cc6edaf6bcf7d1a42366879bdd703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41544a40883874553f570e2999bf56d172bd6246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41544a40883874553f570e2999bf56d172bd6246", "html_url": "https://github.com/rust-lang/rust/commit/41544a40883874553f570e2999bf56d172bd6246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41544a40883874553f570e2999bf56d172bd6246/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea1cfd7804dd57d63196e71f66c22e56cfd79a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea1cfd7804dd57d63196e71f66c22e56cfd79a8", "html_url": "https://github.com/rust-lang/rust/commit/2ea1cfd7804dd57d63196e71f66c22e56cfd79a8"}], "stats": {"total": 108, "additions": 55, "deletions": 53}, "files": [{"sha": "e36b5a412b903dc65487b61e1a010d9f94cbed35", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=41544a40883874553f570e2999bf56d172bd6246", "patch": "@@ -106,7 +106,7 @@ fn match_subtree(\n             }\n             Op::TokenTree(tt::TokenTree::Subtree(lhs)) => {\n                 let rhs = src.expect_subtree().map_err(|()| err!(\"expected subtree\"))?;\n-                if lhs.delimiter.map(|it| it.kind) != rhs.delimiter.map(|it| it.kind) {\n+                if lhs.delimiter_kind() != rhs.delimiter_kind() {\n                     bail!(\"mismatched delimiter\")\n                 }\n                 let mut src = TtIter::new(rhs);"}, {"sha": "b841c39d31440aa54c45c70873ad9d2c3cd621a2", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=41544a40883874553f570e2999bf56d172bd6246", "patch": "@@ -70,11 +70,11 @@ impl<'a> SubtreeTokenSource<'a> {\n                     }\n                     Some(tt::TokenTree::Subtree(subtree)) => {\n                         self.cached_cursor.set(cursor.subtree().unwrap());\n-                        cached.push(Some(convert_delim(subtree.delimiter, false)));\n+                        cached.push(Some(convert_delim(subtree.delimiter_kind(), false)));\n                     }\n                     None => {\n                         if let Some(subtree) = cursor.end() {\n-                            cached.push(Some(convert_delim(subtree.delimiter, true)));\n+                            cached.push(Some(convert_delim(subtree.delimiter_kind(), true)));\n                             self.cached_cursor.set(cursor.bump());\n                         }\n                     }\n@@ -114,8 +114,8 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n     }\n }\n \n-fn convert_delim(d: Option<tt::Delimiter>, closing: bool) -> TtToken {\n-    let (kinds, texts) = match d.map(|it| it.kind) {\n+fn convert_delim(d: Option<tt::DelimiterKind>, closing: bool) -> TtToken {\n+    let (kinds, texts) = match d {\n         Some(tt::DelimiterKind::Parenthesis) => ([T!['('], T![')']], \"()\"),\n         Some(tt::DelimiterKind::Brace) => ([T!['{'], T!['}']], \"{}\"),\n         Some(tt::DelimiterKind::Bracket) => ([T!['['], T![']']], \"[]\"),"}, {"sha": "2c60430d155cd51cfe072551124d276bfb563043", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=41544a40883874553f570e2999bf56d172bd6246", "patch": "@@ -269,35 +269,33 @@ impl Convertor {\n                             .take(token.text().len() - 1)\n                             .chain(std::iter::once(last_spacing));\n                         for (char, spacing) in token.text().chars().zip(spacing_iter) {\n-                            let id = self.alloc(token.text_range());\n-                            token_trees\n-                                .push(tt::Leaf::from(tt::Punct { char, spacing, id }).into());\n+                            token_trees.push(\n+                                tt::Leaf::from(tt::Punct {\n+                                    char,\n+                                    spacing,\n+                                    id: self.alloc(token.text_range()),\n+                                })\n+                                .into(),\n+                            );\n                         }\n                     } else {\n+                        macro_rules! make_leaf {\n+                            ($i:ident) => {\n+                                tt::$i {\n+                                    id: self.alloc(token.text_range()),\n+                                    text: token.text().clone(),\n+                                }\n+                                .into()\n+                            };\n+                        }\n+\n                         let child: tt::Leaf = match token.kind() {\n-                            T![true] | T![false] => {\n-                                let id = self.alloc(token.text_range());\n-                                let text = token.text().clone();\n-                                tt::Literal { text, id }.into()\n-                            }\n-                            IDENT | LIFETIME => {\n-                                let id = self.alloc(token.text_range());\n-                                let text = token.text().clone();\n-                                tt::Ident { text, id }.into()\n-                            }\n-                            k if k.is_keyword() => {\n-                                let id = self.alloc(token.text_range());\n-                                let text = token.text().clone();\n-                                tt::Ident { text, id }.into()\n-                            }\n-                            k if k.is_literal() => {\n-                                let id = self.alloc(token.text_range());\n-                                let text = token.text().clone();\n-                                tt::Literal { text, id }.into()\n-                            }\n+                            T![true] | T![false] => make_leaf!(Literal),\n+                            IDENT | LIFETIME => make_leaf!(Ident),\n+                            k if k.is_keyword() => make_leaf!(Ident),\n+                            k if k.is_literal() => make_leaf!(Literal),\n                             _ => return None,\n                         };\n-\n                         token_trees.push(child.into());\n                     }\n                 }\n@@ -370,8 +368,8 @@ impl<'a> TtTreeSink<'a> {\n     }\n }\n \n-fn delim_to_str(d: Option<tt::Delimiter>, closing: bool) -> SmolStr {\n-    let texts = match d.map(|it| it.kind) {\n+fn delim_to_str(d: Option<tt::DelimiterKind>, closing: bool) -> SmolStr {\n+    let texts = match d {\n         Some(tt::DelimiterKind::Parenthesis) => \"()\",\n         Some(tt::DelimiterKind::Brace) => \"{}\",\n         Some(tt::DelimiterKind::Bracket) => \"[]\",\n@@ -395,7 +393,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n                 break;\n             }\n \n-            let text: Option<SmolStr> = match self.cursor.token_tree() {\n+            let text: SmolStr = match self.cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n                     // Mark the range if needed\n                     let id = match leaf {\n@@ -407,35 +405,35 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n                     let range = TextRange::offset_len(self.text_pos, TextUnit::of_str(&text));\n                     self.token_map.insert(id, range);\n                     self.cursor = self.cursor.bump();\n-                    Some(text)\n+                    text\n                 }\n                 Some(tt::TokenTree::Subtree(subtree)) => {\n                     self.cursor = self.cursor.subtree().unwrap();\n                     if let Some(id) = subtree.delimiter.map(|it| it.id) {\n                         self.open_delims.insert(id, self.text_pos);\n                     }\n-                    Some(delim_to_str(subtree.delimiter, false))\n+                    delim_to_str(subtree.delimiter_kind(), false)\n                 }\n-                None => self.cursor.end().and_then(|parent| {\n-                    self.cursor = self.cursor.bump();\n-                    if let Some(id) = parent.delimiter.map(|it| it.id) {\n-                        if let Some(open_delim) = self.open_delims.get(&id) {\n-                            let open_range =\n-                                TextRange::offset_len(*open_delim, TextUnit::from_usize(1));\n-                            let close_range =\n-                                TextRange::offset_len(self.text_pos, TextUnit::from_usize(1));\n-                            self.token_map.insert_delim(id, open_range, close_range);\n+                None => {\n+                    if let Some(parent) = self.cursor.end() {\n+                        self.cursor = self.cursor.bump();\n+                        if let Some(id) = parent.delimiter.map(|it| it.id) {\n+                            if let Some(open_delim) = self.open_delims.get(&id) {\n+                                let open_range =\n+                                    TextRange::offset_len(*open_delim, TextUnit::from_usize(1));\n+                                let close_range =\n+                                    TextRange::offset_len(self.text_pos, TextUnit::from_usize(1));\n+                                self.token_map.insert_delim(id, open_range, close_range);\n+                            }\n                         }\n+                        delim_to_str(parent.delimiter_kind(), true)\n+                    } else {\n+                        continue;\n                     }\n-\n-                    Some(delim_to_str(parent.delimiter, true))\n-                }),\n+                }\n             };\n-\n-            if let Some(text) = text {\n-                self.buf += &text;\n-                self.text_pos += TextUnit::of_str(&text);\n-            }\n+            self.buf += &text;\n+            self.text_pos += TextUnit::of_str(&text);\n         }\n \n         let text = SmolStr::new(self.buf.as_str());\n@@ -583,7 +581,7 @@ mod tests {\n         let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n         let tt = ast_to_token_tree(&token_tree).unwrap().0;\n \n-        assert_eq!(tt.delimiter.map(|it| it.kind), Some(tt::DelimiterKind::Brace));\n+        assert_eq!(tt.delimiter_kind(), Some(tt::DelimiterKind::Brace));\n     }\n \n     #[test]"}, {"sha": "10f424aae96c645cecae2b7f5e411c61d24a79c0", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41544a40883874553f570e2999bf56d172bd6246/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=41544a40883874553f570e2999bf56d172bd6246", "patch": "@@ -103,7 +103,7 @@ impl fmt::Display for TokenTree {\n \n impl fmt::Display for Subtree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let (l, r) = match self.delimiter.map(|it| it.kind) {\n+        let (l, r) = match self.delimiter_kind() {\n             Some(DelimiterKind::Parenthesis) => (\"(\", \")\"),\n             Some(DelimiterKind::Brace) => (\"{\", \"}\"),\n             Some(DelimiterKind::Bracket) => (\"[\", \"]\"),\n@@ -171,6 +171,10 @@ impl Subtree {\n \n         self.token_trees.len() + children_count\n     }\n+\n+    pub fn delimiter_kind(&self) -> Option<DelimiterKind> {\n+        self.delimiter.map(|it| it.kind)\n+    }\n }\n \n pub mod buffer;"}]}