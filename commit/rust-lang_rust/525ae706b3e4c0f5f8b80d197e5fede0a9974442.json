{"sha": "525ae706b3e4c0f5f8b80d197e5fede0a9974442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNWFlNzA2YjNlNGMwZjVmOGI4MGQxOTdlNWZlZGUwYTk5NzQ0NDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-29T15:38:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T15:38:00Z"}, "message": "Merge #5570\n\n5570: Dead code r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8c8ef7e8dd61e79af322880292957c2cb5ca7289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8ef7e8dd61e79af322880292957c2cb5ca7289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525ae706b3e4c0f5f8b80d197e5fede0a9974442", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIZfYCRBK7hj4Ov3rIwAAdHIIACKiyvSLzVDmWBb/wLHZWVI2\nap8k8cTNOCL7kDrTIIMtnPaRzDSjzrG6HUPvSGYoktm9ot/U0zNaRQhJzSGMhSwA\na4Jp8xbZ7MG3qzn+CQ3p9i1ZLJJgECsmvf+/bClz77EwqA31fpOaJT7KwKlKUsOA\nVVwsJQnTP4Wmh/WD3eYx63k9ZiOSq7DCInbMLku8TK/wI8bnroFDxWkCFjVsIZPj\ncAUuAz5chkW1eAfu+xx7NTVXIOerAxhBsMddQhUcSU1gOJp/GBLITEDjHb6uxhTk\nV5Nzd+4pWsTWJ/pnTaKx8dQ++zrr7MFnyQPYkDv7NCbxwF24sP8OPDFoJjEUAzA=\n=3wOx\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c8ef7e8dd61e79af322880292957c2cb5ca7289\nparent 9110e3b67f8403f453247a12ad878b6c92c3d3d3\nparent 0d1357be0515cf14bbca3577715b68794a7637b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596037080 +0000\ncommitter GitHub <noreply@github.com> 1596037080 +0000\n\nMerge #5570\n\n5570: Dead code r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525ae706b3e4c0f5f8b80d197e5fede0a9974442", "html_url": "https://github.com/rust-lang/rust/commit/525ae706b3e4c0f5f8b80d197e5fede0a9974442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525ae706b3e4c0f5f8b80d197e5fede0a9974442/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9110e3b67f8403f453247a12ad878b6c92c3d3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9110e3b67f8403f453247a12ad878b6c92c3d3d3", "html_url": "https://github.com/rust-lang/rust/commit/9110e3b67f8403f453247a12ad878b6c92c3d3d3"}, {"sha": "0d1357be0515cf14bbca3577715b68794a7637b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1357be0515cf14bbca3577715b68794a7637b2", "html_url": "https://github.com/rust-lang/rust/commit/0d1357be0515cf14bbca3577715b68794a7637b2"}], "stats": {"total": 49, "additions": 0, "deletions": 49}, "files": [{"sha": "1fe5f450a432bbd6005da045397e6e3161111e15", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/525ae706b3e4c0f5f8b80d197e5fede0a9974442/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525ae706b3e4c0f5f8b80d197e5fede0a9974442/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=525ae706b3e4c0f5f8b80d197e5fede0a9974442", "patch": "@@ -1710,7 +1710,6 @@ pub struct RecordFieldPatList {\n }\n impl RecordFieldPatList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn pats(&self) -> AstChildren<RecordInnerPat> { support::children(&self.syntax) }\n     pub fn record_field_pats(&self) -> AstChildren<RecordFieldPat> {\n         support::children(&self.syntax)\n     }\n@@ -2721,13 +2720,6 @@ pub enum Pat {\n     LiteralPat(LiteralPat),\n     MacroPat(MacroPat),\n }\n-/// Any kind of pattern that appears directly inside of the curly\n-/// braces of a record pattern\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum RecordInnerPat {\n-    RecordFieldPat(RecordFieldPat),\n-    BindPat(BindPat),\n-}\n /// Any kind of input to an attribute\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AttrInput {\n@@ -4693,34 +4685,6 @@ impl AstNode for Pat {\n         }\n     }\n }\n-impl From<RecordFieldPat> for RecordInnerPat {\n-    fn from(node: RecordFieldPat) -> RecordInnerPat { RecordInnerPat::RecordFieldPat(node) }\n-}\n-impl From<BindPat> for RecordInnerPat {\n-    fn from(node: BindPat) -> RecordInnerPat { RecordInnerPat::BindPat(node) }\n-}\n-impl AstNode for RecordInnerPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_PAT | BIND_PAT => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            RECORD_FIELD_PAT => RecordInnerPat::RecordFieldPat(RecordFieldPat { syntax }),\n-            BIND_PAT => RecordInnerPat::BindPat(BindPat { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            RecordInnerPat::RecordFieldPat(it) => &it.syntax,\n-            RecordInnerPat::BindPat(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<Literal> for AttrInput {\n     fn from(node: Literal) -> AttrInput { AttrInput::Literal(node) }\n }\n@@ -4847,11 +4811,6 @@ impl std::fmt::Display for Pat {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordInnerPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for AttrInput {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "a6a4d7c35524fdf4293cb59bd54cff54fb5c7e99", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/525ae706b3e4c0f5f8b80d197e5fede0a9974442/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525ae706b3e4c0f5f8b80d197e5fede0a9974442/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=525ae706b3e4c0f5f8b80d197e5fede0a9974442", "patch": "@@ -1479,7 +1479,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n             /// [Reference](https://doc.rust-lang.org/reference/patterns.html#struct-patterns)\n             struct RecordFieldPatList {\n                 T!['{'],\n-                pats: [RecordInnerPat],\n                 record_field_pats: [RecordFieldPat],\n                 bind_pats: [BindPat],\n                 T![..],\n@@ -2213,13 +2212,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n                 MacroPat,\n             }\n \n-            /// Any kind of pattern that appears directly inside of the curly\n-            /// braces of a record pattern\n-            enum RecordInnerPat {\n-                RecordFieldPat,\n-                BindPat\n-            }\n-\n             /// Any kind of input to an attribute\n             enum AttrInput { Literal, TokenTree }\n "}]}