{"sha": "b17226fcc11587fed612631be372a5b4cb89988a", "node_id": "C_kwDOAAsO6NoAKGIxNzIyNmZjYzExNTg3ZmVkNjEyNjMxYmUzNzJhNWI0Y2I4OTk4OGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-18T18:49:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-18T18:49:25Z"}, "message": "Auto merge of #94121 - matthiaskrgr:rollup-6ps95da, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #92683 (Suggest copying trait associated type bounds on lifetime error)\n - #92933 (Deny mixing bin crate type with lib crate types)\n - #92959 (Add more info and suggestions to use of #[test] on invalid items)\n - #93024 (Do not ICE when inlining a function with un-satisfiable bounds)\n - #93613 (Move `{core,std}::stream::Stream` to `{core,std}::async_iter::AsyncIterator`)\n - #93634 (compiler: clippy::complexity fixes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f254265efe6fcda78534a586983a65940f4d6f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f254265efe6fcda78534a586983a65940f4d6f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17226fcc11587fed612631be372a5b4cb89988a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17226fcc11587fed612631be372a5b4cb89988a", "html_url": "https://github.com/rust-lang/rust/commit/b17226fcc11587fed612631be372a5b4cb89988a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17226fcc11587fed612631be372a5b4cb89988a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}, {"sha": "a144ea1c4b39bdef608c537b25343674aa2b5bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a144ea1c4b39bdef608c537b25343674aa2b5bc7", "html_url": "https://github.com/rust-lang/rust/commit/a144ea1c4b39bdef608c537b25343674aa2b5bc7"}], "stats": {"total": 834, "additions": 613, "deletions": 221}, "files": [{"sha": "b94b8c872169306349e49b834af24dc798c3441c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -230,7 +230,7 @@ impl AttrItem {\n     }\n \n     pub fn meta_kind(&self) -> Option<MetaItemKind> {\n-        Some(MetaItemKind::from_mac_args(&self.args)?)\n+        MetaItemKind::from_mac_args(&self.args)\n     }\n }\n "}, {"sha": "6c44fb0df236377baef7a736a6425b12f87f4eef", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -823,7 +823,7 @@ fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n             );\n             let mut all_stable = true;\n             for ident in\n-                attr.meta_item_list().into_iter().flatten().map(|nested| nested.ident()).flatten()\n+                attr.meta_item_list().into_iter().flatten().flat_map(|nested| nested.ident())\n             {\n                 let name = ident.name;\n                 let stable_since = lang_features"}, {"sha": "c9dd114047b76eda6c0fb10bc249d2cdd82306b9", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -56,7 +56,6 @@ pub fn inject(\n     is_proc_macro_crate: bool,\n     has_proc_macro_decls: bool,\n     is_test_crate: bool,\n-    num_crate_types: usize,\n     handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n@@ -81,10 +80,6 @@ pub fn inject(\n         return krate;\n     }\n \n-    if num_crate_types > 1 {\n-        handler.err(\"cannot mix `proc-macro` crate type with others\");\n-    }\n-\n     if is_test_crate {\n         return krate;\n     }"}, {"sha": "690879624058b4ac3a0667baec6a403889bbe683", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -6,6 +6,7 @@ use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast_pretty::pprust;\n+use rustc_errors::Applicability;\n use rustc_expand::base::*;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -102,11 +103,20 @@ pub fn expand_test_or_bench(\n         }\n     };\n \n-    if let ast::ItemKind::MacCall(_) = item.kind {\n-        cx.sess.parse_sess.span_diagnostic.span_warn(\n-            item.span,\n-            \"`#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\",\n-        );\n+    // Note: non-associated fn items are already handled by `expand_test_or_bench`\n+    if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n+        cx.sess\n+            .parse_sess\n+            .span_diagnostic\n+            .struct_span_err(\n+                attr_sp,\n+                \"the `#[test]` attribute may only be used on a non-associated function\",\n+            )\n+            .note(\"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n+            .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n+            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", String::from(\"#[cfg(test)]\"), Applicability::MaybeIncorrect)\n+            .emit();\n+\n         return vec![Annotatable::Item(item)];\n     }\n \n@@ -466,7 +476,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n             (false, _) => true,\n         }\n     } else {\n-        sd.span_err(i.span, \"only functions may be used as tests\");\n+        // should be unreachable because `is_test_fn_item` should catch all non-fn items\n         false\n     }\n }"}, {"sha": "90ddf7914502bd8ad0b18da65eaab86a8984cc60", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -292,7 +292,7 @@ pub unsafe fn create_module<'ll>(\n             \"sign-return-address-all\\0\".as_ptr().cast(),\n             pac_opts.leaf.into(),\n         );\n-        let is_bkey = if pac_opts.key == PAuthKey::A { false } else { true };\n+        let is_bkey: bool = pac_opts.key != PAuthKey::A;\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Error,"}, {"sha": "6976999c0e4f7a4b457601959465a54ae995db1e", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::ProjectionElem::Subslice { from, to, from_end } => {\n                     let mut subslice = cg_base.project_index(bx, bx.cx().const_usize(from as u64));\n                     let projected_ty =\n-                        PlaceTy::from_ty(cg_base.layout.ty).projection_ty(tcx, elem.clone()).ty;\n+                        PlaceTy::from_ty(cg_base.layout.ty).projection_ty(tcx, *elem).ty;\n                     subslice.layout = bx.cx().layout_of(self.monomorphize(projected_ty));\n \n                     if subslice.layout.is_unsized() {"}, {"sha": "f71fb58cf6b9f1f7952b63564636c1a6db229c63", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1039,7 +1039,7 @@ fn check_matcher_core(\n                                 ));\n                                 err.span_suggestion(\n                                     span,\n-                                    &format!(\"try a `pat_param` fragment specifier instead\"),\n+                                    \"try a `pat_param` fragment specifier instead\",\n                                     suggestion,\n                                     Applicability::MaybeIncorrect,\n                                 );"}, {"sha": "f44e6e04346b253440244ba96c8785ee9623fcd0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -64,7 +64,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_mismatched_static_lifetime())\n     }\n \n-    pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n+    pub(super) fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), *sub, *sup)),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {"}, {"sha": "8671ecba6e92462e2244ff4a16c5886cb0e8a0e9", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -102,6 +102,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...so that the definition in impl matches the definition from the trait\",\n                 );\n             }\n+            infer::CheckAssociatedTypeBounds { ref parent, .. } => {\n+                self.note_region_origin(err, &parent);\n+            }\n         }\n     }\n \n@@ -345,6 +348,55 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     trait_item_def_id,\n                     &format!(\"`{}: {}`\", sup, sub),\n                 ),\n+            infer::CheckAssociatedTypeBounds { impl_item_def_id, trait_item_def_id, parent } => {\n+                let mut err = self.report_concrete_failure(*parent, sub, sup);\n+\n+                let trait_item_span = self.tcx.def_span(trait_item_def_id);\n+                let item_name = self.tcx.item_name(impl_item_def_id);\n+                err.span_label(\n+                    trait_item_span,\n+                    format!(\"definition of `{}` from trait\", item_name),\n+                );\n+\n+                let trait_predicates = self.tcx.explicit_predicates_of(trait_item_def_id);\n+                let impl_predicates = self.tcx.explicit_predicates_of(impl_item_def_id);\n+\n+                let impl_predicates: rustc_data_structures::stable_set::FxHashSet<_> =\n+                    impl_predicates.predicates.into_iter().map(|(pred, _)| pred).collect();\n+                let clauses: Vec<_> = trait_predicates\n+                    .predicates\n+                    .into_iter()\n+                    .filter(|&(pred, _)| !impl_predicates.contains(pred))\n+                    .map(|(pred, _)| format!(\"{}\", pred))\n+                    .collect();\n+\n+                if !clauses.is_empty() {\n+                    let where_clause_span = self\n+                        .tcx\n+                        .hir()\n+                        .get_generics(impl_item_def_id.expect_local())\n+                        .unwrap()\n+                        .where_clause\n+                        .tail_span_for_suggestion();\n+\n+                    let suggestion = format!(\n+                        \"{} {}\",\n+                        if !impl_predicates.is_empty() { \",\" } else { \" where\" },\n+                        clauses.join(\", \"),\n+                    );\n+                    err.span_suggestion(\n+                        where_clause_span,\n+                        &format!(\n+                            \"try copying {} from the trait\",\n+                            if clauses.len() > 1 { \"these clauses\" } else { \"this clause\" }\n+                        ),\n+                        suggestion,\n+                        rustc_errors::Applicability::MaybeIncorrect,\n+                    );\n+                }\n+\n+                err\n+            }\n         }\n     }\n "}, {"sha": "57ac98ca897ee7cf012b151f24d69114b615e855", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -438,6 +438,13 @@ pub enum SubregionOrigin<'tcx> {\n     /// Comparing the signature and requirements of an impl associated type\n     /// against the containing trait\n     CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },\n+\n+    /// Checking that the bounds of a trait's associated type hold for a given impl\n+    CheckAssociatedTypeBounds {\n+        parent: Box<SubregionOrigin<'tcx>>,\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n }\n \n // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -1832,6 +1839,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplMethodObligation { span, .. } => span,\n             CompareImplTypeObligation { span, .. } => span,\n+            CheckAssociatedTypeBounds { ref parent, .. } => parent.span(),\n         }\n     }\n \n@@ -1862,6 +1870,15 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                 trait_item_def_id,\n             },\n \n+            traits::ObligationCauseCode::CheckAssociatedTypeBounds {\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } => SubregionOrigin::CheckAssociatedTypeBounds {\n+                impl_item_def_id,\n+                trait_item_def_id,\n+                parent: Box::new(default()),\n+            },\n+\n             _ => default(),\n         }\n     }"}, {"sha": "c0552fd200be8d83680401202cc82d9cf3a318a7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -393,8 +393,18 @@ pub fn configure_and_expand(\n     });\n \n     let crate_types = sess.crate_types();\n+    let is_executable_crate = crate_types.contains(&CrateType::Executable);\n     let is_proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n \n+    if crate_types.len() > 1 {\n+        if is_executable_crate {\n+            sess.err(\"cannot mix `bin` crate type with others\");\n+        }\n+        if is_proc_macro_crate {\n+            sess.err(\"cannot mix `proc-macro` crate type with others\");\n+        }\n+    }\n+\n     // For backwards compatibility, we don't try to run proc macro injection\n     // if rustdoc is run on a proc macro crate without '--crate-type proc-macro' being\n     // specified. This should only affect users who manually invoke 'rustdoc', as\n@@ -411,7 +421,6 @@ pub fn configure_and_expand(\n         msg.emit()\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n-            let num_crate_types = crate_types.len();\n             let is_test_crate = sess.opts.test;\n             rustc_builtin_macros::proc_macro_harness::inject(\n                 sess,\n@@ -420,7 +429,6 @@ pub fn configure_and_expand(\n                 is_proc_macro_crate,\n                 has_proc_macro_decls,\n                 is_test_crate,\n-                num_crate_types,\n                 sess.diagnostic(),\n             )\n         });"}, {"sha": "fedf456ccc88f8456bf493056009e35139ca0ec9", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -198,7 +198,7 @@ fn deprecation_message(\n     } else {\n         let since = since.as_ref().map(Symbol::as_str);\n \n-        if since.as_deref() == Some(\"TBD\") {\n+        if since == Some(\"TBD\") {\n             format!(\"use of {} `{}` that will be deprecated in a future Rust version\", kind, path)\n         } else {\n             format!("}, {"sha": "b54418e5201715797757fb8253ddbafdb6149b40", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -285,6 +285,12 @@ pub enum ObligationCauseCode<'tcx> {\n         trait_item_def_id: DefId,\n     },\n \n+    /// Checking that the bounds of a trait's associated type hold for a given impl\n+    CheckAssociatedTypeBounds {\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n+\n     /// Checking that this expression can be assigned where it needs to be\n     // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable,"}, {"sha": "7c57d42631ad7c8206867aed19f69ee41c03e90d", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -855,7 +855,7 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n     ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {\n         Ok(ty::ProjectionPredicate {\n             projection_ty: relation.relate(a.projection_ty, b.projection_ty)?,\n-            term: relation.relate(a.term, b.term)?.into(),\n+            term: relation.relate(a.term, b.term)?,\n         })\n     }\n }"}, {"sha": "8f4cc182e7f4e28436aade6ddbc3e3dc871e6dfa", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -210,7 +210,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n \n-        blanket_impls.iter().chain(non_blanket_impls.iter().map(|(_, v)| v).flatten()).cloned()\n+        blanket_impls.iter().chain(non_blanket_impls.iter().flat_map(|(_, v)| v)).cloned()\n     }\n }\n "}, {"sha": "da921904523c4b5a2ca0c9554df5fee2acd1383d", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -140,7 +140,7 @@ fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx Cod\n     let body = mir_body(tcx, def_id);\n     body.basic_blocks()\n         .iter()\n-        .map(|data| {\n+        .flat_map(|data| {\n             data.statements.iter().filter_map(|statement| match statement.kind {\n                 StatementKind::Coverage(box ref coverage) => {\n                     if is_inlined(body, statement) {\n@@ -152,7 +152,6 @@ fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx Cod\n                 _ => None,\n             })\n         })\n-        .flatten()\n         .collect()\n }\n "}, {"sha": "55ce5910c818b71424f630ef2b19d47d81ed37ec", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -7,6 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n@@ -75,10 +76,18 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n         return false;\n     }\n \n+    let param_env = tcx.param_env_reveal_all_normalized(def_id);\n+    let param_env = rustc_trait_selection::traits::normalize_param_env_or_error(\n+        tcx,\n+        def_id,\n+        param_env,\n+        ObligationCause::misc(body.span, hir_id),\n+    );\n+\n     let mut this = Inliner {\n         tcx,\n-        param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n-        codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()),\n+        param_env,\n+        codegen_fn_attrs: tcx.codegen_fn_attrs(def_id),\n         hir_id,\n         history: Vec::new(),\n         changed: false,"}, {"sha": "b8684a09fd7cea3b2bd6399d2a5c128874e052ed", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -220,18 +220,16 @@ pub fn partition<'tcx>(\n         let mut cgus: Vec<_> = post_inlining.codegen_units.iter_mut().collect();\n         cgus.sort_by_key(|cgu| cgu.size_estimate());\n \n-        let dead_code_cgu = if let Some(cgu) = cgus\n-            .into_iter()\n-            .rev()\n-            .filter(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n-            .next()\n-        {\n-            cgu\n-        } else {\n-            // If there are no CGUs that have externally linked items,\n-            // then we just pick the first CGU as a fallback.\n-            &mut post_inlining.codegen_units[0]\n-        };\n+        let dead_code_cgu =\n+            if let Some(cgu) = cgus.into_iter().rev().find(|cgu| {\n+                cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External)\n+            }) {\n+                cgu\n+            } else {\n+                // If there are no CGUs that have externally linked items,\n+                // then we just pick the first CGU as a fallback.\n+                &mut post_inlining.codegen_units[0]\n+            };\n         dead_code_cgu.make_code_coverage_dead_code_cgu();\n     }\n "}, {"sha": "def23005fbe1137ea37d46a9766d6dff3f3a88a8", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -2156,7 +2156,7 @@ impl<'a> Parser<'a> {\n                             | PatKind::TupleStruct(qself @ None, path, _)\n                             | PatKind::Path(qself @ None, path) => match &first_pat.kind {\n                                 PatKind::Ident(_, ident, _) => {\n-                                    path.segments.insert(0, PathSegment::from_ident(ident.clone()));\n+                                    path.segments.insert(0, PathSegment::from_ident(*ident));\n                                     path.span = new_span;\n                                     show_sugg = true;\n                                     first_pat = pat;\n@@ -2183,8 +2183,8 @@ impl<'a> Parser<'a> {\n                                             Path {\n                                                 span: new_span,\n                                                 segments: vec![\n-                                                    PathSegment::from_ident(old_ident.clone()),\n-                                                    PathSegment::from_ident(ident.clone()),\n+                                                    PathSegment::from_ident(*old_ident),\n+                                                    PathSegment::from_ident(*ident),\n                                                 ],\n                                                 tokens: None,\n                                             },\n@@ -2194,7 +2194,7 @@ impl<'a> Parser<'a> {\n                                     }\n                                     PatKind::Path(old_qself, old_path) => {\n                                         let mut segments = old_path.segments.clone();\n-                                        segments.push(PathSegment::from_ident(ident.clone()));\n+                                        segments.push(PathSegment::from_ident(*ident));\n                                         let path = PatKind::Path(\n                                             old_qself.clone(),\n                                             Path { span: new_span, segments, tokens: None },"}, {"sha": "4b57aa1f24a1c5979f4267fbaf06cbb61dbccf71", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -260,7 +260,7 @@ impl<'a> Parser<'a> {\n             let ate_comma = self.eat(&token::Comma);\n \n             if self.eat_keyword_noexpect(kw::Where) {\n-                let msg = &format!(\"cannot define duplicate `where` clauses on an item\");\n+                let msg = \"cannot define duplicate `where` clauses on an item\";\n                 let mut err = self.struct_span_err(self.token.span, msg);\n                 err.span_label(lo, \"previous `where` clause starts here\");\n                 err.span_suggestion_verbose("}, {"sha": "9a2fb3b86e2b0b984372e847bf00090b4ce3e0ed", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1362,8 +1362,7 @@ impl<'a> Resolver<'a> {\n                     .filter(|(_, module)| {\n                         current_module.is_ancestor_of(module) && !ptr::eq(current_module, *module)\n                     })\n-                    .map(|(_, module)| module.kind.name())\n-                    .flatten(),\n+                    .flat_map(|(_, module)| module.kind.name()),\n             )\n             .filter(|c| !c.to_string().is_empty())\n             .collect::<Vec<_>>();\n@@ -1859,7 +1858,7 @@ crate fn show_candidates(\n         let instead = if instead { \" instead\" } else { \"\" };\n         let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n-        for note in accessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+        for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n             err.note(note);\n         }\n \n@@ -1942,7 +1941,7 @@ crate fn show_candidates(\n                 multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n             }\n \n-            for note in inaccessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+            for note in inaccessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n                 err.note(note);\n             }\n "}, {"sha": "129db038f4a5ba4a52ad87cdbc9674a1634376f5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1163,7 +1163,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             &\"use this syntax instead\",\n-                            format!(\"{path_str}\"),\n+                            path_str.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "bf6e6a4fcbb9d9e0d70bd3601712e367b19bf111", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -64,6 +64,8 @@ pub fn codegen_fulfill_obligation<'tcx>(\n             Err(Unimplemented) => {\n                 // This can trigger when we probe for the source of a `'static` lifetime requirement\n                 // on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n+                // This can also trigger when we have a global bound that is not actually satisfied,\n+                // but was included during typeck due to the trivial_bounds feature.\n                 infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!("}, {"sha": "c3df17c83bbf9e5574b749e22b3db52dfef1dffb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1437,8 +1437,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                                     self.tcx\n                                         .associated_items(did)\n                                         .in_definition_order()\n-                                        .filter(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n-                                        .next()\n+                                        .find(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n                                 },\n                             )\n                         })"}, {"sha": "7df880a7cc05509d463ca5546b00c91e1854648e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1928,7 +1928,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::AwaitableExpr(_)\n             | ObligationCauseCode::ForLoopIterator\n             | ObligationCauseCode::QuestionMark\n-            | ObligationCauseCode::LetElse => {}\n+            | ObligationCauseCode::LetElse\n+            | ObligationCauseCode::CheckAssociatedTypeBounds { .. } => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "f5d531e631e46ab69a41ac368501d2d4b6141a09", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -959,7 +959,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 infcx.inner.borrow_mut().projection_cache().insert_term(cache_key, result.clone());\n             }\n             obligations.extend(result.obligations);\n-            Ok(Some(result.value.into()))\n+            Ok(Some(result.value))\n         }\n         Ok(Projected::NoProgress(projected_ty)) => {\n             let result = Normalized { value: projected_ty, obligations: vec![] };"}, {"sha": "7e9abe3a250db2c03deff124ab88fd7835b051fb", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -211,8 +211,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         let all_candidate_names: Vec<_> = all_candidates()\n-            .map(|r| self.tcx().associated_items(r.def_id()).in_definition_order())\n-            .flatten()\n+            .flat_map(|r| self.tcx().associated_items(r.def_id()).in_definition_order())\n             .filter_map(\n                 |item| if item.kind == ty::AssocKind::Type { Some(item.name) } else { None },\n             )"}, {"sha": "1650a62f79f29cc878bba3736c485fd833c489ff", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -392,7 +392,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     \"when the type does not implement `Copy`, \\\n                     wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\",\n                     vec![\n-                        (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n+                        (ty_span.shrink_to_lo(), \"std::mem::ManuallyDrop<\".into()),\n                         (ty_span.shrink_to_hi(), \">\".into()),\n                     ],\n                     Applicability::MaybeIncorrect,"}, {"sha": "38449c2a76a5be4a473d0922d226afd14cc22899", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1378,7 +1378,14 @@ pub fn check_type_bounds<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n-        let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n+        let normalize_cause = ObligationCause::new(\n+            impl_ty_span,\n+            impl_ty_hir_id,\n+            ObligationCauseCode::CheckAssociatedTypeBounds {\n+                impl_item_def_id: impl_ty.def_id,\n+                trait_item_def_id: trait_ty.def_id,\n+            },\n+        );\n         let mk_cause = |span: Span| {\n             let code = if span.is_dummy() {\n                 traits::MiscObligation"}, {"sha": "e7eadb760c7c04ec692230d2993aa8005145cf77", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                 Some(ident) => format!(\"{}: \", ident),\n-                None => format!(\"\"),\n+                None => String::new(),\n             };\n \n             match &compatible_variants[..] {\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                         let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                             Some(ident) => format!(\"{}: \", ident),\n-                            None => format!(\"\"),\n+                            None => String::new(),\n                         };\n \n                         if let Some(hir::Node::Expr(hir::Expr {\n@@ -875,7 +875,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             };\n                             let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                                 Some(ident) => format!(\"{}: \", ident),\n-                                None => format!(\"\"),\n+                                None => String::new(),\n                             };\n                             let (span, suggestion) = if self.is_else_if_block(expr) {\n                                 // Don't suggest nonsense like `else *if`"}, {"sha": "972dd622d6e98a3f5b563855cc04faa5d740e207", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -246,7 +246,7 @@ impl DropRangesBuilder {\n \n     fn add_control_edge(&mut self, from: PostOrderId, to: PostOrderId) {\n         trace!(\"adding control edge from {:?} to {:?}\", from, to);\n-        self.node_mut(from.into()).successors.push(to.into());\n+        self.node_mut(from).successors.push(to);\n     }\n }\n "}, {"sha": "cfed784ea728b8bf337c172d987565f5a8a538c0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -527,7 +527,7 @@ impl DropRangesBuilder {\n \n     fn drop_at(&mut self, value: TrackedValue, location: PostOrderId) {\n         let value = self.tracked_value_index(value);\n-        self.node_mut(location.into()).drops.push(value);\n+        self.node_mut(location).drops.push(value);\n     }\n \n     fn reinit_at(&mut self, value: TrackedValue, location: PostOrderId) {\n@@ -537,7 +537,7 @@ impl DropRangesBuilder {\n             // ignore this.\n             None => return,\n         };\n-        self.node_mut(location.into()).reinits.push(value);\n+        self.node_mut(location).reinits.push(value);\n     }\n \n     /// Looks up PostOrderId for any control edges added by HirId and adds a proper edge for them."}, {"sha": "cd7343a3211e39f5666042cd896e73dc5cb3d75e", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -527,7 +527,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                       // FIXME(associated_const_equality): add a useful error message here.\n                       tcx.ty_error_with_message(\n                         DUMMY_SP,\n-                        &format!(\"Could not find associated const on trait\"),\n+                        \"Could not find associated const on trait\",\n                     )\n                   }\n                 }"}, {"sha": "68bf59a01b3dd637efb5ca605d365f49616d7a37", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -133,6 +133,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::any::Any;\n+use core::async_iter::AsyncIterator;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n@@ -149,7 +150,6 @@ use core::ops::{\n };\n use core::pin::Pin;\n use core::ptr::{self, Unique};\n-use core::stream::Stream;\n use core::task::{Context, Poll};\n \n #[cfg(not(no_global_oom_handling))]\n@@ -1992,8 +1992,8 @@ where\n     }\n }\n \n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-impl<S: ?Sized + Stream + Unpin> Stream for Box<S> {\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+impl<S: ?Sized + AsyncIterator + Unpin> AsyncIterator for Box<S> {\n     type Item = S::Item;\n \n     fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {"}, {"sha": "6da32df57efb761c654afbb068a99b8842de9883", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -91,7 +91,7 @@\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_windows)]\n-#![feature(async_stream)]\n+#![feature(async_iterator)]\n #![feature(coerce_unsized)]\n #![cfg_attr(not(no_global_oom_handling), feature(const_alloc_error))]\n #![feature(const_box)]"}, {"sha": "f29de31171a67446ac456a23eb1408652c3bf054", "filename": "library/core/src/async_iter/async_iter.rs", "status": "renamed", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -4,50 +4,50 @@ use crate::task::{Context, Poll};\n \n /// An interface for dealing with asynchronous iterators.\n ///\n-/// This is the main stream trait. For more about the concept of streams\n+/// This is the main async iterator trait. For more about the concept of async iterators\n /// generally, please see the [module-level documentation]. In particular, you\n-/// may want to know how to [implement `Stream`][impl].\n+/// may want to know how to [implement `AsyncIterator`][impl].\n ///\n /// [module-level documentation]: index.html\n-/// [impl]: index.html#implementing-stream\n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-#[must_use = \"streams do nothing unless polled\"]\n-pub trait Stream {\n-    /// The type of items yielded by the stream.\n+/// [impl]: index.html#implementing-async-iterator\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+#[must_use = \"async iterators do nothing unless polled\"]\n+pub trait AsyncIterator {\n+    /// The type of items yielded by the async iterator.\n     type Item;\n \n-    /// Attempt to pull out the next value of this stream, registering the\n+    /// Attempt to pull out the next value of this async iterator, registering the\n     /// current task for wakeup if the value is not yet available, and returning\n-    /// `None` if the stream is exhausted.\n+    /// `None` if the async iterator is exhausted.\n     ///\n     /// # Return value\n     ///\n     /// There are several possible return values, each indicating a distinct\n-    /// stream state:\n+    /// async iterator state:\n     ///\n-    /// - `Poll::Pending` means that this stream's next value is not ready\n+    /// - `Poll::Pending` means that this async iterator's next value is not ready\n     /// yet. Implementations will ensure that the current task will be notified\n     /// when the next value may be ready.\n     ///\n-    /// - `Poll::Ready(Some(val))` means that the stream has successfully\n+    /// - `Poll::Ready(Some(val))` means that the async iterator has successfully\n     /// produced a value, `val`, and may produce further values on subsequent\n     /// `poll_next` calls.\n     ///\n-    /// - `Poll::Ready(None)` means that the stream has terminated, and\n+    /// - `Poll::Ready(None)` means that the async iterator has terminated, and\n     /// `poll_next` should not be invoked again.\n     ///\n     /// # Panics\n     ///\n-    /// Once a stream has finished (returned `Ready(None)` from `poll_next`), calling its\n+    /// Once an async iterator has finished (returned `Ready(None)` from `poll_next`), calling its\n     /// `poll_next` method again may panic, block forever, or cause other kinds of\n-    /// problems; the `Stream` trait places no requirements on the effects of\n+    /// problems; the `AsyncIterator` trait places no requirements on the effects of\n     /// such a call. However, as the `poll_next` method is not marked `unsafe`,\n     /// Rust's usual rules apply: calls must never cause undefined behavior\n     /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n-    /// regardless of the stream's state.\n+    /// regardless of the async iterator's state.\n     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n \n-    /// Returns the bounds on the remaining length of the stream.\n+    /// Returns the bounds on the remaining length of the async iterator.\n     ///\n     /// Specifically, `size_hint()` returns a tuple where the first element\n     /// is the lower bound, and the second element is the upper bound.\n@@ -58,12 +58,12 @@ pub trait Stream {\n     ///\n     /// # Implementation notes\n     ///\n-    /// It is not enforced that a stream implementation yields the declared\n-    /// number of elements. A buggy stream may yield less than the lower bound\n+    /// It is not enforced that an async iterator implementation yields the declared\n+    /// number of elements. A buggy async iterator may yield less than the lower bound\n     /// or more than the upper bound of elements.\n     ///\n     /// `size_hint()` is primarily intended to be used for optimizations such as\n-    /// reserving space for the elements of the stream, but must not be\n+    /// reserving space for the elements of the async iterator, but must not be\n     /// trusted to e.g., omit bounds checks in unsafe code. An incorrect\n     /// implementation of `size_hint()` should not lead to memory safety\n     /// violations.\n@@ -72,15 +72,15 @@ pub trait Stream {\n     /// because otherwise it would be a violation of the trait's protocol.\n     ///\n     /// The default implementation returns <code>(0, [None])</code> which is correct for any\n-    /// stream.\n+    /// async iterator.\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (0, None)\n     }\n }\n \n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-impl<S: ?Sized + Stream + Unpin> Stream for &mut S {\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+impl<S: ?Sized + AsyncIterator + Unpin> AsyncIterator for &mut S {\n     type Item = S::Item;\n \n     fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n@@ -92,16 +92,16 @@ impl<S: ?Sized + Stream + Unpin> Stream for &mut S {\n     }\n }\n \n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-impl<P> Stream for Pin<P>\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+impl<P> AsyncIterator for Pin<P>\n where\n     P: DerefMut,\n-    P::Target: Stream,\n+    P::Target: AsyncIterator,\n {\n-    type Item = <P::Target as Stream>::Item;\n+    type Item = <P::Target as AsyncIterator>::Item;\n \n     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n-        <P::Target as Stream>::poll_next(self.as_deref_mut(), cx)\n+        <P::Target as AsyncIterator>::poll_next(self.as_deref_mut(), cx)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {", "previous_filename": "library/core/src/stream/stream.rs"}, {"sha": "3180187afc8c94be13f8a4597b6e3fcda197c211", "filename": "library/core/src/async_iter/from_iter.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Ffrom_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Ffrom_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasync_iter%2Ffrom_iter.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,31 +1,31 @@\n use crate::pin::Pin;\n \n-use crate::stream::Stream;\n+use crate::async_iter::AsyncIterator;\n use crate::task::{Context, Poll};\n \n-/// A stream that was created from iterator.\n+/// An async iterator that was created from iterator.\n ///\n-/// This stream is created by the [`from_iter`] function.\n+/// This async iterator is created by the [`from_iter`] function.\n /// See it documentation for more.\n ///\n /// [`from_iter`]: fn.from_iter.html\n-#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+#[unstable(feature = \"async_iter_from_iter\", issue = \"81798\")]\n #[derive(Clone, Debug)]\n pub struct FromIter<I> {\n     iter: I,\n }\n \n-#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+#[unstable(feature = \"async_iter_from_iter\", issue = \"81798\")]\n impl<I> Unpin for FromIter<I> {}\n \n-/// Converts an iterator into a stream.\n-#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+/// Converts an iterator into an async iterator.\n+#[unstable(feature = \"async_iter_from_iter\", issue = \"81798\")]\n pub fn from_iter<I: IntoIterator>(iter: I) -> FromIter<I::IntoIter> {\n     FromIter { iter: iter.into_iter() }\n }\n \n-#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n-impl<I: Iterator> Stream for FromIter<I> {\n+#[unstable(feature = \"async_iter_from_iter\", issue = \"81798\")]\n+impl<I: Iterator> AsyncIterator for FromIter<I> {\n     type Item = I::Item;\n \n     fn poll_next(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {", "previous_filename": "library/core/src/stream/from_iter.rs"}, {"sha": "0c6f637711b372a393fb7f4d5db0b108d00fe87f", "filename": "library/core/src/async_iter/mod.rs", "status": "renamed", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fasync_iter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasync_iter%2Fmod.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,82 +1,81 @@\n //! Composable asynchronous iteration.\n //!\n-//! If futures are asynchronous values, then streams are asynchronous\n-//! iterators. If you've found yourself with an asynchronous collection of some kind,\n+//! If you've found yourself with an asynchronous collection of some kind,\n //! and needed to perform an operation on the elements of said collection,\n-//! you'll quickly run into 'streams'. Streams are heavily used in idiomatic\n-//! asynchronous Rust code, so it's worth becoming familiar with them.\n+//! you'll quickly run into 'async iterators'. Async Iterators are heavily used in\n+//! idiomatic asynchronous Rust code, so it's worth becoming familiar with them.\n //!\n //! Before explaining more, let's talk about how this module is structured:\n //!\n //! # Organization\n //!\n //! This module is largely organized by type:\n //!\n-//! * [Traits] are the core portion: these traits define what kind of streams\n+//! * [Traits] are the core portion: these traits define what kind of async iterators\n //!   exist and what you can do with them. The methods of these traits are worth\n //!   putting some extra study time into.\n-//! * Functions provide some helpful ways to create some basic streams.\n+//! * Functions provide some helpful ways to create some basic async iterators.\n //! * Structs are often the return types of the various methods on this\n //!   module's traits. You'll usually want to look at the method that creates\n //!   the `struct`, rather than the `struct` itself. For more detail about why,\n-//!   see '[Implementing Stream](#implementing-stream)'.\n+//!   see '[Implementing Async Iterator](#implementing-async-iterator)'.\n //!\n //! [Traits]: #traits\n //!\n-//! That's it! Let's dig into streams.\n+//! That's it! Let's dig into async iterators.\n //!\n-//! # Stream\n+//! # Async Iterators\n //!\n-//! The heart and soul of this module is the [`Stream`] trait. The core of\n-//! [`Stream`] looks like this:\n+//! The heart and soul of this module is the [`AsyncIterator`] trait. The core of\n+//! [`AsyncIterator`] looks like this:\n //!\n //! ```\n //! # use core::task::{Context, Poll};\n //! # use core::pin::Pin;\n-//! trait Stream {\n+//! trait AsyncIterator {\n //!     type Item;\n //!     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n //! }\n //! ```\n //!\n-//! Unlike `Iterator`, `Stream` makes a distinction between the [`poll_next`]\n-//! method which is used when implementing a `Stream`, and a (to-be-implemented)\n-//! `next` method which is used when consuming a stream. Consumers of `Stream`\n+//! Unlike `Iterator`, `AsyncIterator` makes a distinction between the [`poll_next`]\n+//! method which is used when implementing an `AsyncIterator`, and a (to-be-implemented)\n+//! `next` method which is used when consuming an async iterator. Consumers of `AsyncIterator`\n //! only need to consider `next`, which when called, returns a future which\n-//! yields `Option<Stream::Item>`.\n+//! yields `Option<AsyncIterator::Item>`.\n //!\n //! The future returned by `next` will yield `Some(Item)` as long as there are\n //! elements, and once they've all been exhausted, will yield `None` to indicate\n //! that iteration is finished. If we're waiting on something asynchronous to\n-//! resolve, the future will wait until the stream is ready to yield again.\n+//! resolve, the future will wait until the async iterator is ready to yield again.\n //!\n-//! Individual streams may choose to resume iteration, and so calling `next`\n+//! Individual async iterators may choose to resume iteration, and so calling `next`\n //! again may or may not eventually yield `Some(Item)` again at some point.\n //!\n-//! [`Stream`]'s full definition includes a number of other methods as well,\n+//! [`AsyncIterator`]'s full definition includes a number of other methods as well,\n //! but they are default methods, built on top of [`poll_next`], and so you get\n //! them for free.\n //!\n //! [`Poll`]: super::task::Poll\n-//! [`poll_next`]: Stream::poll_next\n+//! [`poll_next`]: AsyncIterator::poll_next\n //!\n-//! # Implementing Stream\n+//! # Implementing Async Iterator\n //!\n-//! Creating a stream of your own involves two steps: creating a `struct` to\n-//! hold the stream's state, and then implementing [`Stream`] for that\n+//! Creating an async iterator of your own involves two steps: creating a `struct` to\n+//! hold the async iterator's state, and then implementing [`AsyncIterator`] for that\n //! `struct`.\n //!\n-//! Let's make a stream named `Counter` which counts from `1` to `5`:\n+//! Let's make an async iterator named `Counter` which counts from `1` to `5`:\n //!\n //! ```no_run\n-//! #![feature(async_stream)]\n-//! # use core::stream::Stream;\n+//! #![feature(async_iterator)]\n+//! # use core::async_iter::AsyncIterator;\n //! # use core::task::{Context, Poll};\n //! # use core::pin::Pin;\n //!\n //! // First, the struct:\n //!\n-//! /// A stream which counts from one to five\n+//! /// An async iterator which counts from one to five\n //! struct Counter {\n //!     count: usize,\n //! }\n@@ -90,9 +89,9 @@\n //!     }\n //! }\n //!\n-//! // Then, we implement `Stream` for our `Counter`:\n+//! // Then, we implement `AsyncIterator` for our `Counter`:\n //!\n-//! impl Stream for Counter {\n+//! impl AsyncIterator for Counter {\n //!     // we will be counting with usize\n //!     type Item = usize;\n //!\n@@ -113,17 +112,17 @@\n //!\n //! # Laziness\n //!\n-//! Streams are *lazy*. This means that just creating a stream doesn't _do_ a\n-//! whole lot. Nothing really happens until you call `poll_next`. This is\n-//! sometimes a source of confusion when creating a stream solely for its side\n+//! Async iterators are *lazy*. This means that just creating an async iterator doesn't\n+//! _do_ a whole lot. Nothing really happens until you call `poll_next`. This is\n+//! sometimes a source of confusion when creating an async iterator solely for its side\n //! effects. The compiler will warn us about this kind of behavior:\n //!\n //! ```text\n-//! warning: unused result that must be used: streams do nothing unless polled\n+//! warning: unused result that must be used: async iterators do nothing unless polled\n //! ```\n \n+mod async_iter;\n mod from_iter;\n-mod stream;\n \n+pub use async_iter::AsyncIterator;\n pub use from_iter::{from_iter, FromIter};\n-pub use stream::Stream;", "previous_filename": "library/core/src/stream/mod.rs"}, {"sha": "aa1ad9362a90e897b4fee9c84dc74cdcbeb32ff5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -305,6 +305,8 @@ pub mod ops;\n pub mod any;\n pub mod array;\n pub mod ascii;\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+pub mod async_iter;\n pub mod cell;\n pub mod char;\n pub mod ffi;\n@@ -316,8 +318,6 @@ pub mod panic;\n pub mod panicking;\n pub mod pin;\n pub mod result;\n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-pub mod stream;\n pub mod sync;\n \n pub mod fmt;"}, {"sha": "95be879e319aac0b7b51bf7ca0262e76de7a3715", "filename": "library/core/src/panic/unwind_safe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,10 +1,10 @@\n+use crate::async_iter::AsyncIterator;\n use crate::cell::UnsafeCell;\n use crate::fmt;\n use crate::future::Future;\n use crate::ops::{Deref, DerefMut};\n use crate::pin::Pin;\n use crate::ptr::{NonNull, Unique};\n-use crate::stream::Stream;\n use crate::task::{Context, Poll};\n \n /// A marker trait which represents \"panic safe\" types in Rust.\n@@ -290,8 +290,8 @@ impl<F: Future> Future for AssertUnwindSafe<F> {\n     }\n }\n \n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-impl<S: Stream> Stream for AssertUnwindSafe<S> {\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+impl<S: AsyncIterator> AsyncIterator for AssertUnwindSafe<S> {\n     type Item = S::Item;\n \n     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<S::Item>> {"}, {"sha": "8c38db9b62cdcecf9c896f248d10dbd2fb3645e2", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -233,7 +233,7 @@\n #![feature(array_error_internals)]\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n-#![feature(async_stream)]\n+#![feature(async_iterator)]\n #![feature(atomic_mut_ptr)]\n #![feature(auto_traits)]\n #![feature(bench_black_box)]\n@@ -404,6 +404,8 @@ pub use alloc_crate::vec;\n pub use core::any;\n #[stable(feature = \"core_array\", since = \"1.36.0\")]\n pub use core::array;\n+#[unstable(feature = \"async_iterator\", issue = \"79024\")]\n+pub use core::async_iter;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::cell;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -458,8 +460,6 @@ pub use core::pin;\n pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-pub use core::stream;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::u128;"}, {"sha": "cc3b257a5c5bf6b9efa35011a6962f4638f6ff61", "filename": "src/test/run-make-fulldeps/libs-and-bins/Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2FMakefile?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,6 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) foo.rs\n-\t$(call RUN,foo)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,foo)"}, {"sha": "ae166b17840e3c8d93529767205504b0d79558d8", "filename": "src/test/run-make-fulldeps/libs-and-bins/foo.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibs-and-bins%2Ffoo.rs?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,4 +0,0 @@\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"bin\"]\n-\n-fn main() {}"}, {"sha": "69a286f0b74f83a3faf3e75502fe1c33822d3ba6", "filename": "src/test/run-make-fulldeps/output-with-hyphens/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2FMakefile?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,6 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo-bar.rs\n+\t$(RUSTC) foo-bar.rs --crate-type bin\n \t[ -f $(TMPDIR)/$(call BIN,foo-bar) ]\n+\t$(RUSTC) foo-bar.rs --crate-type lib\n \t[ -f $(TMPDIR)/libfoo_bar.rlib ]"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/output-with-hyphens/foo-bar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2Ffoo-bar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2Ffoo-bar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Foutput-with-hyphens%2Ffoo-bar.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,4 +1 @@\n-#![crate_type = \"lib\"]\n-#![crate_type = \"bin\"]\n-\n fn main() {}"}, {"sha": "bd0dea372194d4f14a6b4c90c975b6c33abe0510", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -19,8 +19,13 @@ LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:35\n    |\n+LL |     type B<'a, 'b> where 'a: 'b;\n+   |     ---------------------------- definition of `B` from trait\n+...\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |                                   ^^^^^^^^^^^^^^^\n+   |                                -  ^^^^^^^^^^^^^^^\n+   |                                |\n+   |                                help: try copying this clause from the trait: `, 'a: 'b`\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/impl_bounds.rs:17:12"}, {"sha": "c97d17811ba7c918b72d01d6521aa4ca1d301f0e", "filename": "src/test/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -8,7 +8,7 @@ trait A<'a> {\n     // FIXME(generic_associated_types): Remove one of the below bounds\n     // https://github.com/rust-lang/rust/pull/90678#discussion_r744976085\n     where\n-        'a: 'b, Self: 'a, Self: 'b;\n+        Self: 'a, Self: 'b;\n \n     fn a(&'a self) -> Self::B<'a>;\n }\n@@ -17,8 +17,7 @@ struct C;\n \n impl<'a> A<'a> for C {\n     type B<'b> = impl Clone;\n-    //~^ ERROR: lifetime bound not satisfied\n-    //~| ERROR: could not find defining uses\n+    //~^ ERROR: could not find defining uses\n \n     fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n }"}, {"sha": "4e4f86bbac87c512d0212b17ab60d55a92466615", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,22 +1,5 @@\n-error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-88595.rs:19:18\n-   |\n-LL |     type B<'b> = impl Clone;\n-   |                  ^^^^^^^^^^\n-   |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/issue-88595.rs:18:6\n-   |\n-LL | impl<'a> A<'a> for C {\n-   |      ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/issue-88595.rs:19:12\n-   |\n-LL |     type B<'b> = impl Clone;\n-   |            ^^\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:23:23\n+  --> $DIR/issue-88595.rs:22:23\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                       ^^^^^^^^^^^\n@@ -35,6 +18,5 @@ error: could not find defining uses\n LL |     type B<'b> = impl Clone;\n    |                  ^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0478`."}, {"sha": "f8fb71bbddb4b8673145ec7592e03efe984a3334", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -1,8 +1,13 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n   --> $DIR/issue-90014.rs:14:20\n    |\n+LL |     type Fut<'a> where Self: 'a;\n+   |     ---------------------------- definition of `Fut` from trait\n+...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 -  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:14:14"}, {"sha": "1d5f7d5c0099e6360383987f4705290268bf742c", "filename": "src/test/ui/generic-associated-types/issue-92033.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,39 @@\n+#![feature(generic_associated_types)]\n+\n+struct Texture;\n+\n+trait Surface {\n+    type TextureIter<'a>: Iterator<Item = &'a Texture>\n+    where\n+        Self: 'a;\n+\n+    fn get_texture(&self) -> Self::TextureIter<'_>;\n+}\n+\n+trait Swapchain {\n+    type Surface<'a>: Surface\n+    where\n+        Self: 'a;\n+\n+    fn get_surface(&self) -> Self::Surface<'_>;\n+}\n+\n+impl<'s> Surface for &'s Texture {\n+    type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+    //~^ ERROR the type\n+\n+    fn get_texture(&self) -> Self::TextureIter<'_> {\n+        let option: Option<&Texture> = Some(self);\n+        option.into_iter()\n+    }\n+}\n+\n+impl Swapchain for Texture {\n+    type Surface<'a> = &'a Texture;\n+\n+    fn get_surface(&self) -> Self::Surface<'_> {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "caa6618f39884b1e7bbc9a1dfccc69f8c2704af8", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,22 @@\n+error[E0477]: the type `&'s Texture` does not fulfill the required lifetime\n+  --> $DIR/issue-92033.rs:22:28\n+   |\n+LL | /     type TextureIter<'a>: Iterator<Item = &'a Texture>\n+LL | |     where\n+LL | |         Self: 'a;\n+   | |_________________- definition of `TextureIter` from trait\n+...\n+LL |       type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+   |                           -  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           |\n+   |                           help: try copying this clause from the trait: `where Self: 'a`\n+   |\n+note: type must outlive the lifetime `'a` as defined here\n+  --> $DIR/issue-92033.rs:22:22\n+   |\n+LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+   |                      ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "8f6745246fd1db2eb1c3144b46c3793e74a1bb57", "filename": "src/test/ui/issues/issue-14772.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags: --test\n-\n-#[test]\n-mod foo {} //~ ERROR only functions may be used as tests\n-\n-fn main() {}"}, {"sha": "253fec5e57833e70d6fb958e4c75e811a143cd5b", "filename": "src/test/ui/issues/issue-14772.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,8 +0,0 @@\n-error: only functions may be used as tests\n-  --> $DIR/issue-14772.rs:4:1\n-   |\n-LL | mod foo {}\n-   | ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0667364d13cd499ef721f1c1777006fad0708ab3", "filename": "src/test/ui/test-attrs/test-on-macro.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-// compile-flags:--test\n-\n-#![deny(warnings)]\n-\n-macro_rules! foo {\n-    () => (fn foo(){})\n-}\n-\n-#[test]\n-foo!(); //~ WARNING `#[test]` attribute should not be used on macros\n-\n-fn main(){}"}, {"sha": "98190b060cec59e35a8758c2831e1e0273b75f22", "filename": "src/test/ui/test-attrs/test-on-macro.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,8 +0,0 @@\n-warning: `#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\n-  --> $DIR/test-on-macro.rs:11:1\n-   |\n-LL | foo!();\n-   | ^^^^^^^\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b2f681c01d156c12553b9403f305eb21335c5627", "filename": "src/test/ui/test-attrs/test-on-not-fn.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,80 @@\n+// compile-flags: --test\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+mod test {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+mod loooooooooooooong_teeeeeeeeeest {\n+    /*\n+    this is a comment\n+    this comment goes on for a very long time\n+    this is to pad out the span for this module for a long time\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n+    labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n+    laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n+    voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n+    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n+    */\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+extern \"C\" {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+trait Foo {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+impl Foo for i32 {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+const FOO: i32 = -1_i32;\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+static BAR: u64 = 10_000_u64;\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+enum MyUnit {\n+    Unit,\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+struct NewI32(i32);\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+union Spooky {\n+    x: i32,\n+    y: u32,\n+}\n+\n+#[repr(C, align(64))]\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+#[derive(Copy, Clone, Debug)]\n+struct MoreAttrs {\n+    a: i32,\n+    b: u64,\n+}\n+\n+macro_rules! foo {\n+    () => {};\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+foo!();\n+\n+// make sure it doesn't erroneously trigger on a real test\n+#[test]\n+fn real_test() {\n+    assert_eq!(42_i32, 42_i32);\n+}\n+\n+// make sure it works with cfg test\n+#[cfg(test)]\n+mod real_tests {\n+    #[cfg(test)]\n+    fn foo() {}\n+\n+    #[test]\n+    fn bar() {\n+        foo();\n+    }\n+}"}, {"sha": "dd693cf316dc7c87561f8be1e045db311ce22f59", "filename": "src/test/ui/test-attrs/test-on-not-fn.stderr", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,185 @@\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:3:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | mod test {}\n+   | ----------- expected a non-associated function, found a module\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:6:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / mod loooooooooooooong_teeeeeeeeeest {\n+LL | |     /*\n+LL | |     this is a comment\n+LL | |     this comment goes on for a very long time\n+...  |\n+LL | |     */\n+LL | | }\n+   | |_- expected a non-associated function, found a module\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:20:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | extern \"C\" {}\n+   | ------------- expected a non-associated function, found an extern block\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:23:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | trait Foo {}\n+   | ------------ expected a non-associated function, found a trait\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:26:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | impl Foo for i32 {}\n+   | ------------------- expected a non-associated function, found an implementation\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:29:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | const FOO: i32 = -1_i32;\n+   | ------------------------ expected a non-associated function, found a constant item\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:32:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | static BAR: u64 = 10_000_u64;\n+   | ----------------------------- expected a non-associated function, found a static item\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:35:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / enum MyUnit {\n+LL | |     Unit,\n+LL | | }\n+   | |_- expected a non-associated function, found an enum\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:40:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | struct NewI32(i32);\n+   | ------------------- expected a non-associated function, found a struct\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:43:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / union Spooky {\n+LL | |     x: i32,\n+LL | |     y: u32,\n+LL | | }\n+   | |_- expected a non-associated function, found a union\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:50:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL |   #[derive(Copy, Clone, Debug)]\n+LL | / struct MoreAttrs {\n+LL | |     a: i32,\n+LL | |     b: u64,\n+LL | | }\n+   | |_- expected a non-associated function, found a struct\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:61:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | foo!();\n+   | ------- expected a non-associated function, found an item macro invocation\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "1b010566cbc6ed5ef9733fd794e541fd17558eab", "filename": "src/test/ui/trait-bounds/issue-93008.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmir-opt-level=4\n+\n+pub fn bar<T>(s: &'static mut ())\n+where\n+    &'static mut (): Clone, //~ ERROR the trait bound\n+{\n+    <&'static mut () as Clone>::clone(&s);\n+}\n+\n+fn main() {}"}, {"sha": "10f80f8de0c9b8267a8f8c6466cba7048bae10f7", "filename": "src/test/ui/trait-bounds/issue-93008.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17226fcc11587fed612631be372a5b4cb89988a/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr?ref=b17226fcc11587fed612631be372a5b4cb89988a", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `&'static mut (): Clone` is not satisfied\n+  --> $DIR/issue-93008.rs:5:5\n+   |\n+LL |     &'static mut (): Clone,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&'static mut ()`\n+   |\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}