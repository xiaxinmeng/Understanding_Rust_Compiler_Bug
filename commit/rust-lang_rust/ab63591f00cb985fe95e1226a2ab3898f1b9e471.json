{"sha": "ab63591f00cb985fe95e1226a2ab3898f1b9e471", "node_id": "C_kwDOAAsO6NoAKGFiNjM1OTFmMDBjYjk4NWZlOTVlMTIyNmEyYWIzODk4ZjFiOWU0NzE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-22T08:22:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-26T17:00:31Z"}, "message": "Remove the distinction between LifetimeName::Implicit and LifetimeName::Underscore.", "tree": {"sha": "971030dee934837e4565310105300fcad9612969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971030dee934837e4565310105300fcad9612969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab63591f00cb985fe95e1226a2ab3898f1b9e471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab63591f00cb985fe95e1226a2ab3898f1b9e471", "html_url": "https://github.com/rust-lang/rust/commit/ab63591f00cb985fe95e1226a2ab3898f1b9e471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab63591f00cb985fe95e1226a2ab3898f1b9e471/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2254d5d7c57be00cc640c0f7a8e21b320e947aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2254d5d7c57be00cc640c0f7a8e21b320e947aa", "html_url": "https://github.com/rust-lang/rust/commit/a2254d5d7c57be00cc640c0f7a8e21b320e947aa"}], "stats": {"total": 84, "additions": 21, "deletions": 63}, "files": [{"sha": "a031480611641eab2614608de835b2f9f9102df3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -1883,7 +1883,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 hir::LifetimeName::Param(param, ParamName::Fresh)\n             }\n-            LifetimeRes::Anonymous { binder, elided } => {\n+            LifetimeRes::Anonymous { binder } => {\n                 let mut l_name = None;\n                 if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                     if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n@@ -1900,11 +1900,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     self.captured_lifetimes = Some(captured_lifetimes);\n                 };\n-                l_name.unwrap_or(if elided {\n-                    hir::LifetimeName::Implicit\n-                } else {\n-                    hir::LifetimeName::Underscore\n-                })\n+                l_name.unwrap_or(hir::LifetimeName::Underscore)\n             }\n             LifetimeRes::Static => hir::LifetimeName::Static,\n             LifetimeRes::Error => hir::LifetimeName::Error,"}, {"sha": "8ba76979c39c66aaadfc36ab391828b1d00e0c5e", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -589,7 +589,6 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n             hir::LifetimeName::Param(_, hir::ParamName::Fresh)\n             | hir::LifetimeName::ImplicitObjectLifetimeDefault\n-            | hir::LifetimeName::Implicit\n             | hir::LifetimeName::Underscore => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:"}, {"sha": "2003d70835c6f2e811fa2730ac86a5ad76b1ab71", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -742,8 +742,6 @@ pub enum LifetimeRes {\n     Anonymous {\n         /// Id of the introducing place. See `Param`.\n         binder: NodeId,\n-        /// Whether this lifetime was spelled or elided.\n-        elided: bool,\n     },\n     /// Explicit `'static` lifetime.\n     Static,"}, {"sha": "7a0bf265fafdb3aeef8abbbe7be84288c8a350b7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -90,9 +90,6 @@ pub enum LifetimeName {\n     /// User-given names or fresh (synthetic) names.\n     Param(LocalDefId, ParamName),\n \n-    /// User wrote nothing (e.g., the lifetime in `&u32`).\n-    Implicit,\n-\n     /// Implicit lifetime in a context like `dyn Foo`. This is\n     /// distinguished from implicit lifetimes elsewhere because the\n     /// lifetime that they default to must appear elsewhere within the\n@@ -110,7 +107,7 @@ pub enum LifetimeName {\n     /// that was already reported.\n     Error,\n \n-    /// User wrote specifies `'_`.\n+    /// User wrote an anonymous lifetime, either `'_` or nothing.\n     Underscore,\n \n     /// User wrote `'static`.\n@@ -120,9 +117,7 @@ pub enum LifetimeName {\n impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n-            LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit\n-            | LifetimeName::Error => Ident::empty(),\n+            LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(_, param_name) => param_name.ident(),\n@@ -132,7 +127,6 @@ impl LifetimeName {\n     pub fn is_anonymous(&self) -> bool {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit\n             | LifetimeName::Underscore\n             | LifetimeName::Param(_, ParamName::Fresh)\n             | LifetimeName::Error => true,\n@@ -142,9 +136,7 @@ impl LifetimeName {\n \n     pub fn is_elided(&self) -> bool {\n         match self {\n-            LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit\n-            | LifetimeName::Underscore => true,\n+            LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh` counts as\n             // *not* elided -- but this is because, as far as the code"}, {"sha": "b1d8c616fb81df49e8008933e59165f3335c9f00", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -496,7 +496,6 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         | LifetimeName::Param(_, ParamName::Error)\n         | LifetimeName::Static\n         | LifetimeName::Error\n-        | LifetimeName::Implicit\n         | LifetimeName::ImplicitObjectLifetimeDefault\n         | LifetimeName::Underscore => {}\n     }"}, {"sha": "a12495c51ad7c94c49e8a062341a604fb95129df", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 12, "deletions": 38, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -262,9 +262,6 @@ enum LifetimeRibKind {\n     /// error on default object bounds (e.g., `Box<dyn Foo>`).\n     AnonymousReportError,\n \n-    /// Pass responsibility to `resolve_lifetime` code for all cases.\n-    AnonymousPassThrough(NodeId),\n-\n     /// Replace all anonymous lifetimes by provided lifetime.\n     Elided(LifetimeRes),\n \n@@ -868,7 +865,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             let previous_state = replace(&mut this.in_func_body, true);\n                             // Resolve the function body, potentially inside the body of an async closure\n                             this.with_lifetime_rib(\n-                                LifetimeRibKind::AnonymousPassThrough(fn_id),\n+                                LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: fn_id }),\n                                 |this| this.visit_block(body),\n                             );\n \n@@ -896,7 +893,9 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         this.with_lifetime_rib(\n                             match binder {\n                                 ClosureBinder::NotPresent => {\n-                                    LifetimeRibKind::AnonymousPassThrough(fn_id)\n+                                    LifetimeRibKind::Elided(LifetimeRes::Anonymous {\n+                                        binder: fn_id,\n+                                    })\n                                 }\n                                 ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n                             },\n@@ -908,7 +907,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         let previous_state = replace(&mut this.in_func_body, true);\n                         // Resolve the function body, potentially inside the body of an async closure\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id),\n+                            LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: fn_id }),\n                             |this| this.visit_expr(body),\n                         );\n \n@@ -1053,8 +1052,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                                 visit::walk_generic_args(self, path_span, args);\n                                 break;\n                             }\n-                            LifetimeRibKind::AnonymousPassThrough(..)\n-                            | LifetimeRibKind::AnonymousCreateParameter { .. }\n+                            LifetimeRibKind::AnonymousCreateParameter { .. }\n                             | LifetimeRibKind::AnonymousReportError\n                             | LifetimeRibKind::Elided(_)\n                             | LifetimeRibKind::ElisionFailure\n@@ -1415,8 +1413,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     | LifetimeRibKind::AnonymousReportError\n                                     | LifetimeRibKind::ElisionFailure => Some(LifetimeUseSet::Many),\n                                     // An anonymous lifetime is legal here, go ahead.\n-                                    LifetimeRibKind::AnonymousPassThrough(_)\n-                                    | LifetimeRibKind::AnonymousCreateParameter { .. } => {\n+                                    LifetimeRibKind::AnonymousCreateParameter { .. } => {\n                                         Some(LifetimeUseSet::One { use_span: ident.span, use_ctxt })\n                                     }\n                                     // Only report if eliding the lifetime would have the same\n@@ -1527,14 +1524,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.record_lifetime_res(lifetime.id, LifetimeRes::Error, elision_candidate);\n                     return;\n                 }\n-                LifetimeRibKind::AnonymousPassThrough(node_id) => {\n-                    self.record_lifetime_res(\n-                        lifetime.id,\n-                        LifetimeRes::Anonymous { binder: node_id, elided },\n-                        elision_candidate,\n-                    );\n-                    return;\n-                }\n                 LifetimeRibKind::Elided(res) => {\n                     self.record_lifetime_res(lifetime.id, res, elision_candidate);\n                     return;\n@@ -1658,8 +1647,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // Do not create a parameter for patterns and expressions.\n                 for rib in self.lifetime_ribs.iter().rev() {\n                     match rib.kind {\n-                        LifetimeRibKind::AnonymousPassThrough(binder) => {\n-                            let res = LifetimeRes::Anonymous { binder, elided: true };\n+                        LifetimeRibKind::Elided(res @ LifetimeRes::Anonymous { .. }) => {\n                             for id in node_ids {\n                                 self.record_lifetime_res(id, res, LifetimeElisionCandidate::Named);\n                             }\n@@ -1673,8 +1661,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             // FIXME(cjgillot) This resolution is wrong, but this does not matter\n                             // since these cases are erroneous anyway.  Lifetime resolution should\n                             // emit a \"missing lifetime specifier\" diagnostic.\n-                            let res =\n-                                LifetimeRes::Anonymous { binder: DUMMY_NODE_ID, elided: true };\n+                            let res = LifetimeRes::Anonymous { binder: DUMMY_NODE_ID };\n                             for id in node_ids {\n                                 self.record_lifetime_res(id, res, LifetimeElisionCandidate::Named);\n                             }\n@@ -1753,19 +1740,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         }\n                         break;\n                     }\n-                    // `PassThrough` is the normal case.\n-                    LifetimeRibKind::AnonymousPassThrough(binder) => {\n-                        let res = LifetimeRes::Anonymous { binder, elided: true };\n-                        let mut candidate = LifetimeElisionCandidate::Missing(missing_lifetime);\n-                        for id in node_ids {\n-                            self.record_lifetime_res(\n-                                id,\n-                                res,\n-                                replace(&mut candidate, LifetimeElisionCandidate::Ignore),\n-                            );\n-                        }\n-                        break;\n-                    }\n                     LifetimeRibKind::Elided(res) => {\n                         let mut candidate = LifetimeElisionCandidate::Missing(missing_lifetime);\n                         for id in node_ids {\n@@ -2272,7 +2246,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         this.visit_ty(ty);\n                     });\n                     this.with_lifetime_rib(\n-                        LifetimeRibKind::AnonymousPassThrough(item.id),\n+                        LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n                         |this| {\n                             if let Some(expr) = expr {\n                                 let constant_item_kind = match item.kind {\n@@ -2547,7 +2521,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         // Type parameters can already be used and as associated consts are\n                         // not used as part of the type system, this is far less surprising.\n                         self.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousPassThrough(item.id),\n+                            LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n                             |this| {\n                                 this.with_constant_rib(\n                                     IsRepeatExpr::No,\n@@ -2721,7 +2695,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     // Type parameters can already be used and as associated consts are\n                     // not used as part of the type system, this is far less surprising.\n                     self.with_lifetime_rib(\n-                        LifetimeRibKind::AnonymousPassThrough(item.id),\n+                        LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n                         |this| {\n                             this.with_constant_rib(\n                                 IsRepeatExpr::No,"}, {"sha": "e9cbbedc7b0b2211d766dc52eaf8a7d239b34d4b", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab63591f00cb985fe95e1226a2ab3898f1b9e471/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ab63591f00cb985fe95e1226a2ab3898f1b9e471", "patch": "@@ -819,7 +819,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // `Box<dyn Debug + 'static>`.\n                         self.resolve_object_lifetime_default(lifetime)\n                     }\n-                    LifetimeName::Implicit | LifetimeName::Underscore => {\n+                    LifetimeName::Underscore => {\n                         // If the user writes `'_`, we use the *ordinary* elision\n                         // rules. So the `'_` in e.g., `Box<dyn Debug + '_>` will be\n                         // resolved the same as the `'_` in `&'_ Foo`.\n@@ -1135,9 +1135,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         match lifetime_ref.name {\n-            hir::LifetimeName::ImplicitObjectLifetimeDefault\n-            | hir::LifetimeName::Implicit\n-            | hir::LifetimeName::Underscore => self.resolve_elided_lifetimes(&[lifetime_ref]),\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Underscore => {\n+                self.resolve_elided_lifetimes(&[lifetime_ref])\n+            }\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),\n             hir::LifetimeName::Param(param_def_id, _) => {\n                 self.resolve_lifetime_ref(param_def_id, lifetime_ref)"}]}