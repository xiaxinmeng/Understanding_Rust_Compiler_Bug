{"sha": "71965ab4d05b023cd29c914ef1262a72cac02e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOTY1YWI0ZDA1YjAyM2NkMjljOTE0ZWYxMjYyYTcyY2FjMDJlMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T05:01:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T05:01:30Z"}, "message": "Auto merge of #84411 - m-ou-se:rollup-9btsp2t, r=m-ou-se\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #84013 (Replace all `fmt.pad` with `debug_struct`)\n - #84119 (Move `sys::vxworks` code to `sys::unix`)\n - #84212 (Replace `Void` in `sys` with never type)\n - #84251 (fix 'const-stable since' for NonZeroU*::new_unchecked)\n - #84301 (Document that `index` and `index_mut` can panic)\n - #84365 (Improve the docstrings of the `Lto` struct.)\n - #84378 (Fix broken doc link)\n - #84379 (Add GAT related tests)\n - #84380 (Write Rustdoc titles like \"x in crate::mod - Rust\")\n - #84390 (Format `Struct { .. }` on one line even with `{:#?}`.)\n - #84393 (Support `x.py doc std --open`)\n - #84406 (Remove `delete` alias from `mem::drop`.)\n\nFailed merges:\n\n - #84387 (Move `sys_common::poison` to `sync::poison`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bc5c5084c6c21d76871f0ab6e40825ebfeaeed51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5c5084c6c21d76871f0ab6e40825ebfeaeed51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71965ab4d05b023cd29c914ef1262a72cac02e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71965ab4d05b023cd29c914ef1262a72cac02e01", "html_url": "https://github.com/rust-lang/rust/commit/71965ab4d05b023cd29c914ef1262a72cac02e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71965ab4d05b023cd29c914ef1262a72cac02e01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c757729701e3d065e3ad6a9bf9f15ab206633c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/c757729701e3d065e3ad6a9bf9f15ab206633c51", "html_url": "https://github.com/rust-lang/rust/commit/c757729701e3d065e3ad6a9bf9f15ab206633c51"}, {"sha": "268d29d75d4ba1839e1c288cb7bd594e8bb9662f", "url": "https://api.github.com/repos/rust-lang/rust/commits/268d29d75d4ba1839e1c288cb7bd594e8bb9662f", "html_url": "https://github.com/rust-lang/rust/commit/268d29d75d4ba1839e1c288cb7bd594e8bb9662f"}], "stats": {"total": 1382, "additions": 793, "deletions": 589}, "files": [{"sha": "b683626bbd64d5753053b38d706cb81a6eeb62b6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -75,19 +75,21 @@ impl_stable_hash_via_hash!(OptLevel);\n \n /// This is what the `LtoCli` values get mapped to after resolving defaults and\n /// and taking other command line options into account.\n+///\n+/// Note that linker plugin-based LTO is a different mechanism entirely.\n #[derive(Clone, PartialEq)]\n pub enum Lto {\n-    /// Don't do any LTO whatsoever\n+    /// Don't do any LTO whatsoever.\n     No,\n \n-    /// Do a full crate graph LTO with ThinLTO\n+    /// Do a full-crate-graph (inter-crate) LTO with ThinLTO.\n     Thin,\n \n-    /// Do a local graph LTO with ThinLTO (only relevant for multiple codegen\n-    /// units).\n+    /// Do a local ThinLTO (intra-crate, over the CodeGen Units of the local crate only). This is\n+    /// only relevant if multiple CGUs are used.\n     ThinLocal,\n \n-    /// Do a full crate graph LTO with \"fat\" LTO\n+    /// Do a full-crate-graph (inter-crate) LTO with \"fat\" LTO.\n     Fat,\n }\n "}, {"sha": "b4741c35c583fa3157e44ef5175c00397329cf39", "filename": "library/alloc/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Falloc%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Falloc%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftests.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -49,17 +49,17 @@ fn test_show() {\n     let b = Box::new(Test) as Box<dyn Any>;\n     let a_str = format!(\"{:?}\", a);\n     let b_str = format!(\"{:?}\", b);\n-    assert_eq!(a_str, \"Any\");\n-    assert_eq!(b_str, \"Any\");\n+    assert_eq!(a_str, \"Any { .. }\");\n+    assert_eq!(b_str, \"Any { .. }\");\n \n     static EIGHT: usize = 8;\n     static TEST: Test = Test;\n     let a = &EIGHT as &dyn Any;\n     let b = &TEST as &dyn Any;\n     let s = format!(\"{:?}\", a);\n-    assert_eq!(s, \"Any\");\n+    assert_eq!(s, \"Any { .. }\");\n     let s = format!(\"{:?}\", b);\n-    assert_eq!(s, \"Any\");\n+    assert_eq!(s, \"Any { .. }\");\n }\n \n #[test]"}, {"sha": "5e1725cfc7a6324b178740ac72a47dd9c6adca60", "filename": "library/core/src/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -141,7 +141,7 @@ impl<T: 'static + ?Sized> Any for T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Any\")\n+        f.debug_struct(\"Any\").finish_non_exhaustive()\n     }\n }\n \n@@ -151,14 +151,14 @@ impl fmt::Debug for dyn Any {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any + Send {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Any\")\n+        f.debug_struct(\"Any\").finish_non_exhaustive()\n     }\n }\n \n #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n impl fmt::Debug for dyn Any + Send + Sync {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Any\")\n+        f.debug_struct(\"Any\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "4780d8dc7883ff0b17ddf2bb32faf32c3aaf230b", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -145,6 +145,6 @@ impl fmt::Display for EscapeDefault {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"EscapeDefault { .. }\")\n+        f.debug_struct(\"EscapeDefault\").finish_non_exhaustive()\n     }\n }"}, {"sha": "b208ddd4b272fbd0f1c5bbda2c86a9ce310bbf4a", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -53,7 +53,7 @@ pub enum c_void {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for c_void {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"c_void\")\n+        f.debug_struct(\"c_void\").finish()\n     }\n }\n "}, {"sha": "b660788c0515fb5b6d1d36f63b3da858b555788b", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -188,28 +188,19 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     #[stable(feature = \"debug_non_exhaustive\", since = \"1.53.0\")]\n     pub fn finish_non_exhaustive(&mut self) -> fmt::Result {\n         self.result = self.result.and_then(|_| {\n-            // Draw non-exhaustive dots (`..`), and open brace if necessary (no fields).\n-            if self.is_pretty() {\n-                if !self.has_fields {\n-                    self.fmt.write_str(\" {\\n\")?;\n-                }\n-                let mut slot = None;\n-                let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n-                writer.write_str(\"..\\n\")?;\n-            } else {\n-                if self.has_fields {\n-                    self.fmt.write_str(\", ..\")?;\n+            if self.has_fields {\n+                if self.is_pretty() {\n+                    let mut slot = None;\n+                    let mut state = Default::default();\n+                    let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                    writer.write_str(\"..\\n\")?;\n+                    self.fmt.write_str(\"}\")\n                 } else {\n-                    self.fmt.write_str(\" { ..\")?;\n+                    self.fmt.write_str(\", .. }\")\n                 }\n-            }\n-            if self.is_pretty() {\n-                self.fmt.write_str(\"}\")?\n             } else {\n-                self.fmt.write_str(\" }\")?;\n+                self.fmt.write_str(\" { .. }\")\n             }\n-            Ok(())\n         });\n         self.result\n     }"}, {"sha": "87042d95fbef06ac0720bd7ad48985e682e71b2a", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -2220,7 +2220,7 @@ impl Debug for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for PhantomData<T> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        f.pad(\"PhantomData\")\n+        f.debug_struct(\"PhantomData\").finish()\n     }\n }\n \n@@ -2270,7 +2270,7 @@ impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: ?Sized> Debug for UnsafeCell<T> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        f.pad(\"UnsafeCell\")\n+        f.debug_struct(\"UnsafeCell\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "7dbd68b73f05a08044de9b54c783807fc572fd3f", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -507,7 +507,7 @@ pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n #[stable(since = \"1.9.0\", feature = \"core_impl_debug\")]\n impl<H> fmt::Debug for BuildHasherDefault<H> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"BuildHasherDefault\")\n+        f.debug_struct(\"BuildHasherDefault\").finish()\n     }\n }\n "}, {"sha": "919c564f2872a8d95020e1e27f6de07052f7935d", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -36,7 +36,7 @@ unsafe impl<T> Sync for Empty<T> {}\n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Empty\")\n+        f.debug_struct(\"Empty\").finish()\n     }\n }\n "}, {"sha": "5bf47c3951da22ff93397bf17e8abf315bf089c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -886,7 +886,6 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// ```\n ///\n /// [`RefCell`]: crate::cell::RefCell\n-#[doc(alias = \"delete\")]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) {}"}, {"sha": "6b9b435d47fe9994d5998b228983d050a17a0b96", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -23,7 +23,7 @@ macro_rules! impl_nonzero_fmt {\n }\n \n macro_rules! nonzero_integers {\n-    ( $( #[$stability: meta] $Ty: ident($Int: ty); )+ ) => {\n+    ( $( #[$stability: meta] #[$const_new_unchecked_stability: meta] $Ty: ident($Int: ty); )+ ) => {\n         $(\n             /// An integer that is known not to equal zero.\n             ///\n@@ -48,7 +48,7 @@ macro_rules! nonzero_integers {\n                 ///\n                 /// The value must not be zero.\n                 #[$stability]\n-                #[rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\")]\n+                #[$const_new_unchecked_stability]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n@@ -146,18 +146,18 @@ macro_rules! nonzero_integers {\n }\n \n nonzero_integers! {\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU64(u64);\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU128(u128);\n-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroUsize(usize);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI8(i8);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI16(i16);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI32(i32);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI64(i64);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI128(i128);\n-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU64(u64);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU128(u128);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroUsize(usize);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI8(i8);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI16(i16);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI32(i32);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI64(i64);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI128(i128);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n }\n \n macro_rules! from_str_radix_nzint_impl {"}, {"sha": "964378cc9c3c6d394ab8a37d789c90e8e7c9ca29", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -61,6 +61,10 @@ pub trait Index<Idx: ?Sized> {\n     type Output: ?Sized;\n \n     /// Performs the indexing (`container[index]`) operation.\n+    ///\n+    /// # Panics\n+    ///\n+    /// May panic if the index is out of bounds.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[track_caller]\n     fn index(&self, index: Idx) -> &Self::Output;\n@@ -161,6 +165,10 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n #[doc(alias = \"[]\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n+    ///\n+    /// # Panics\n+    ///\n+    /// May panic if the index is out of bounds.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[track_caller]\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;"}, {"sha": "906dcb1e8bceefd84ce2bddfdd0a5df4ada3be08", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -146,7 +146,7 @@ impl<'a> fmt::Display for EscapeAscii<'a> {\n #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n impl<'a> fmt::Debug for EscapeAscii<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"EscapeAscii { .. }\")\n+        f.debug_struct(\"EscapeAscii\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "7ebff180f9d733d2ac9378725ae0920e815345e3", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1359,7 +1359,7 @@ pub struct EncodeUtf16<'a> {\n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl fmt::Debug for EncodeUtf16<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"EncodeUtf16 { .. }\")\n+        f.debug_struct(\"EncodeUtf16\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "7580010a28b4a5394ef5665d09f0a0a12a509e62", "filename": "library/core/tests/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -105,12 +105,7 @@ mod debug_struct {\n         }\n \n         assert_eq!(\"Foo { .. }\", format!(\"{:?}\", Foo));\n-        assert_eq!(\n-            \"Foo {\n-    ..\n-}\",\n-            format!(\"{:#?}\", Foo)\n-        );\n+        assert_eq!(\"Foo { .. }\", format!(\"{:#?}\", Foo));\n     }\n \n     #[test]"}, {"sha": "bdf559847cc8511761d675be1de794e0e947ebe0", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -2257,7 +2257,7 @@ where\n     F: FnMut(&K, &mut V) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"DrainFilter { .. }\")\n+        f.debug_struct(\"DrainFilter\").finish_non_exhaustive()\n     }\n }\n \n@@ -2957,7 +2957,7 @@ impl Default for RandomState {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for RandomState {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"RandomState { .. }\")\n+        f.debug_struct(\"RandomState\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "5220c8ad70977657a13778eb4a16c174af444417", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1533,7 +1533,7 @@ where\n     F: FnMut(&K) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"DrainFilter { .. }\")\n+        f.debug_struct(\"DrainFilter\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "8f8d4e3a89832aa23651132869832e349f7241ac", "filename": "library/std/src/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -154,7 +154,7 @@ impl Iterator for Vars {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Vars {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Vars { .. }\")\n+        f.debug_struct(\"Vars\").finish_non_exhaustive()\n     }\n }\n \n@@ -172,7 +172,7 @@ impl Iterator for VarsOs {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for VarsOs {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"VarsOs { .. }\")\n+        f.debug_struct(\"VarOs\").finish_non_exhaustive()\n     }\n }\n \n@@ -419,7 +419,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for SplitPaths<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"SplitPaths { .. }\")\n+        f.debug_struct(\"SplitPaths\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "c2e0b24ba8327f200a55a0c45a7f009cc78ec53b", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -373,7 +373,7 @@ impl Stdin {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdin {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Stdin { .. }\")\n+        f.debug_struct(\"Stdin\").finish_non_exhaustive()\n     }\n }\n \n@@ -467,7 +467,7 @@ impl BufRead for StdinLock<'_> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StdinLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"StdinLock { .. }\")\n+        f.debug_struct(\"StdinLock\").finish_non_exhaustive()\n     }\n }\n \n@@ -607,7 +607,7 @@ impl Stdout {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdout {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Stdout { .. }\")\n+        f.debug_struct(\"Stdout\").finish_non_exhaustive()\n     }\n }\n \n@@ -689,7 +689,7 @@ impl Write for StdoutLock<'_> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StdoutLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"StdoutLock { .. }\")\n+        f.debug_struct(\"StdoutLock\").finish_non_exhaustive()\n     }\n }\n \n@@ -804,7 +804,7 @@ impl Stderr {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stderr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Stderr { .. }\")\n+        f.debug_struct(\"Stderr\").finish_non_exhaustive()\n     }\n }\n \n@@ -886,7 +886,7 @@ impl Write for StderrLock<'_> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for StderrLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"StderrLock { .. }\")\n+        f.debug_struct(\"StderrLock\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "73f2f3eb3f5dc9ec50265a782b9a93836c0a2072", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -78,7 +78,7 @@ impl Seek for Empty {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Empty {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Empty { .. }\")\n+        f.debug_struct(\"Empty\").finish_non_exhaustive()\n     }\n }\n \n@@ -150,7 +150,7 @@ impl Read for Repeat {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Repeat {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Repeat { .. }\")\n+        f.debug_struct(\"Repeat\").finish_non_exhaustive()\n     }\n }\n \n@@ -236,6 +236,6 @@ impl Write for &Sink {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Sink {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Sink { .. }\")\n+        f.debug_struct(\"Sink\").finish_non_exhaustive()\n     }\n }"}, {"sha": "931b3b600a302be5beba1527c7b6d979a4f036cb", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -312,7 +312,7 @@ impl FromInner<AnonPipe> for ChildStdin {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStdin {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"ChildStdin { .. }\")\n+        f.debug_struct(\"ChildStdin\").finish_non_exhaustive()\n     }\n }\n \n@@ -373,7 +373,7 @@ impl FromInner<AnonPipe> for ChildStdout {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStdout {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"ChildStdout { .. }\")\n+        f.debug_struct(\"ChildStdout\").finish_non_exhaustive()\n     }\n }\n \n@@ -434,7 +434,7 @@ impl FromInner<AnonPipe> for ChildStderr {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ChildStderr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"ChildStderr { .. }\")\n+        f.debug_struct(\"ChildStderr\").finish_non_exhaustive()\n     }\n }\n \n@@ -1257,7 +1257,7 @@ impl FromInner<imp::Stdio> for Stdio {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Stdio {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Stdio { .. }\")\n+        f.debug_struct(\"Stdio\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "a17b82f82e8c2eb8e9c7529c7f152169727b5721", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -60,7 +60,7 @@ pub struct BarrierWaitResult(bool);\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Barrier {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Barrier { .. }\")\n+        f.debug_struct(\"Barrier\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "60be63c9543fa802877ad0e15e81f661b90e5588", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -548,7 +548,7 @@ impl Condvar {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Condvar {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Condvar { .. }\")\n+        f.debug_struct(\"Condvar\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "ea1d598d26461b4b10f1f3058f150b2e506c2bd9", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1477,7 +1477,7 @@ impl<T> fmt::Debug for Receiver<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        \"SendError(..)\".fmt(f)\n+        f.debug_struct(\"SendError\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "6da6c18e47799d26ce75b57f630d46c89f5e4d9b", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -481,7 +481,7 @@ fn wait(state_and_queue: &AtomicUsize, mut current_state: usize) {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Once {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"Once { .. }\")\n+        f.debug_struct(\"Once\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "5b3f2fa4e8275e19e208fd1743c408a3d6ab70cb", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -9,7 +9,7 @@ use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::OsStrExt;\n \n pub use crate::sys_common::fs::copy;\n@@ -22,11 +22,11 @@ fn cstr(path: &Path) -> io::Result<CString> {\n #[derive(Debug)]\n pub struct File(FileDesc);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {\n@@ -41,146 +41,146 @@ pub struct OpenOptions {\n     mode: i32,\n }\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "56497162c0333478df3f36376897ddb1c4618ba5", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -61,11 +61,6 @@ pub fn unsupported_err() -> crate::io::Error {\n     )\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(start: *const c_char) -> usize {\n     let mut str = start;\n "}, {"sha": "5f8839157eafc0b5b6af665cc6f6a4a7d7379747", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -6,7 +6,7 @@ use crate::str;\n use crate::sync::Arc;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::IpAddress::{Ipv4, Ipv6};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::AsInner;\n use crate::time::Duration;\n \n@@ -411,18 +411,18 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "4487e9d636cb005b7e1224b85dcc4f0784416f8e", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -9,7 +9,7 @@ use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::*;\n use crate::vec;\n \n@@ -29,7 +29,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -38,7 +38,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "2450a7aac5ede3b02fd34cf7324c75661d59f735", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -25,10 +25,7 @@\n mod common;\n \n cfg_if::cfg_if! {\n-    if #[cfg(target_os = \"vxworks\")] {\n-        mod vxworks;\n-        pub use self::vxworks::*;\n-    } else if #[cfg(unix)] {\n+    if #[cfg(unix)] {\n         mod unix;\n         pub use self::unix::*;\n     } else if #[cfg(windows)] {"}, {"sha": "d6a56830733096d4bca00bc71919871f843a2144", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -115,11 +115,6 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n     }\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     let mut n = 0;\n     while unsafe { *s } != 0 {"}, {"sha": "5ccedece0f84b78eeeb07025b373a629515759af", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -5,7 +5,7 @@ use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr, ToSocketAddrs};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n-use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner, Void};\n+use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner};\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -310,137 +310,137 @@ impl FromInner<Socket> for TcpListener {\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n         unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -462,22 +462,22 @@ impl fmt::Display for NonIpSockAddr {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     fn new(host: String) -> io::Result<LookupHost> {\n         Err(io::Error::new(io::ErrorKind::Other, NonIpSockAddr { host }))\n     }\n \n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "144248d60c9cfb15d644ce99703cc77c44b950f3", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -5,12 +5,13 @@ use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::Mutex;\n use crate::sync::Once;\n-use crate::sys::{decode_error_kind, sgx_ineffective, unsupported, Void};\n+use crate::sys::{decode_error_kind, sgx_ineffective, unsupported};\n use crate::vec;\n \n pub fn errno() -> i32 {\n@@ -35,7 +36,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     sgx_ineffective(())\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -44,7 +45,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "3a88dc083b06c735fc0274abeea9ea357dfbe659", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -173,3 +173,14 @@ pub mod os {\n     pub const EXE_SUFFIX: &str = \"\";\n     pub const EXE_EXTENSION: &str = \"\";\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"vxworks\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}"}, {"sha": "735bf35a3ced6fc367ee523ce136a30cfb0afcfb", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -62,6 +62,8 @@ cfg_if::cfg_if! {\n         use crate::os::redox as platform;\n         #[cfg(target_os = \"solaris\")]\n         use crate::os::solaris as platform;\n+        #[cfg(target_os = \"vxworks\")]\n+        use crate::os::vxworks as platform;\n     }\n }\n "}, {"sha": "1316835a89d12f7ef84121793cb72ba395afec2b", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -71,6 +71,7 @@ pub fn init() {\n         } else if #[cfg(not(any(\n             target_os = \"emscripten\",\n             target_os = \"fuchsia\",\n+            target_os = \"vxworks\",\n             // The poll on Darwin doesn't set POLLNVAL for closed fds.\n             target_os = \"macos\",\n             target_os = \"ios\","}, {"sha": "bf649f6d76f815725d2b9b6c3e533c4705729575", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -85,11 +85,6 @@ pub fn errno() -> i32 {\n     unsafe { libc::errnoGet() }\n }\n \n-#[cfg(target_os = \"vxworks\")]\n-pub fn set_errno(e: i32) {\n-    unsafe { libc::errnoSet(e as c_int) };\n-}\n-\n #[cfg(target_os = \"dragonfly\")]\n pub fn errno() -> i32 {\n     extern \"C\" {\n@@ -642,7 +637,7 @@ pub fn getppid() -> u32 {\n     unsafe { libc::getppid() as u32 }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n pub fn glibc_version() -> Option<(usize, usize)> {\n     if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n         parse_glibc_version(version_str)\n@@ -651,7 +646,7 @@ pub fn glibc_version() -> Option<(usize, usize)> {\n     }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n fn glibc_version_cstr() -> Option<&'static CStr> {\n     weak! {\n         fn gnu_get_libc_version() -> *const libc::c_char\n@@ -665,7 +660,7 @@ fn glibc_version_cstr() -> Option<&'static CStr> {\n \n // Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n // ignoring any extra dot-separated parts. Otherwise return None.\n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n     let mut parsed_ints = version.split('.').map(str::parse::<usize>).fuse();\n     match (parsed_ints.next(), parsed_ints.next()) {"}, {"sha": "f67c70c01772fd7d7a5dd648ca8c1fbab5a08f33", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -4,11 +4,17 @@ pub use crate::ffi::OsString as EnvKey;\n pub use crate::sys_common::process::CommandEnvs;\n \n mod process_common;\n-#[cfg(not(target_os = \"fuchsia\"))]\n-#[path = \"process_unix.rs\"]\n-mod process_inner;\n-#[cfg(target_os = \"fuchsia\")]\n-#[path = \"process_fuchsia.rs\"]\n-mod process_inner;\n-#[cfg(target_os = \"fuchsia\")]\n-mod zircon;\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"fuchsia\")] {\n+        #[path = \"process_fuchsia.rs\"]\n+        mod process_inner;\n+        mod zircon;\n+    } else if #[cfg(target_os = \"vxworks\")] {\n+        #[path = \"process_vxworks.rs\"]\n+        mod process_inner;\n+    } else {\n+        #[path = \"process_unix.rs\"]\n+        mod process_inner;\n+    }\n+}"}, {"sha": "eecdb624b9cfab6b3351fe518e3b1afd1f0e1a9d", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "renamed", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -18,7 +18,6 @@ impl Command {\n         needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n         use crate::sys::cvt_r;\n-        const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n         let envp = self.capture_env();\n \n         if self.saw_nul() {\n@@ -61,14 +60,17 @@ impl Command {\n                 t!(cvt(libc::chdir(cwd.as_ptr())));\n             }\n \n+            // pre_exec closures are ignored on VxWorks\n+            let _ = self.get_closures();\n+\n             let c_envp = envp\n                 .as_ref()\n                 .map(|c| c.as_ptr())\n                 .unwrap_or_else(|| *sys::os::environ() as *const _);\n             let stack_size = thread::min_stack();\n \n             // ensure that access to the environment is synchronized\n-            let _lock = sys::os::env_lock();\n+            let _lock = sys::os::env_read_lock();\n \n             let ret = libc::rtpSpawn(\n                 self.get_program_cstr().as_ptr(),\n@@ -196,6 +198,24 @@ impl ExitStatus {\n     pub fn signal(&self) -> Option<i32> {\n         if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n     }\n+\n+    pub fn core_dumped(&self) -> bool {\n+        // This method is not yet properly implemented on VxWorks\n+        false\n+    }\n+\n+    pub fn stopped_signal(&self) -> Option<i32> {\n+        if libc::WIFSTOPPED(self.0) { Some(libc::WSTOPSIG(self.0)) } else { None }\n+    }\n+\n+    pub fn continued(&self) -> bool {\n+        // This method is not yet properly implemented on VxWorks\n+        false\n+    }\n+\n+    pub fn into_raw(&self) -> c_int {\n+        self.0\n+    }\n }\n \n /// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying.", "previous_filename": "library/std/src/sys/vxworks/process/process_vxworks.rs"}, {"sha": "44f9eabc319a0c968621c37d255fdbdb096a3a50", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -18,7 +18,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     not(target_os = \"freebsd\"),\n     not(target_os = \"netbsd\"),\n     not(target_os = \"fuchsia\"),\n-    not(target_os = \"redox\")\n+    not(target_os = \"redox\"),\n+    not(target_os = \"vxworks\")\n ))]\n mod imp {\n     use crate::fs::File;\n@@ -237,3 +238,29 @@ mod imp {\n         file.read_exact(v).expect(\"failed to read rand:\")\n     }\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+mod imp {\n+    use crate::io;\n+    use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        static RNG_INIT: AtomicBool = AtomicBool::new(false);\n+        while !RNG_INIT.load(Relaxed) {\n+            let ret = unsafe { libc::randSecure() };\n+            if ret < 0 {\n+                panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+            } else if ret > 0 {\n+                RNG_INIT.store(true, Relaxed);\n+                break;\n+            }\n+            unsafe { libc::usleep(10) };\n+        }\n+        let ret = unsafe {\n+            libc::randABytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n+        };\n+        if ret < 0 {\n+            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+        }\n+    }\n+}"}, {"sha": "c3f410353b915bcd212e20b967b1ed2067273c1d", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -92,3 +92,9 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n         }\n     }\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n+    register_dtor_fallback(t, dtor);\n+}"}, {"sha": "0ef84c84ee877d6b81e9c68dcdfe7e7bc8aa8341", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -36,11 +36,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     (1, 2)\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n     unsafe {"}, {"sha": "cd533761e37326d224965fe66faaab44455dd9d3", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -4,159 +4,159 @@ use crate::hash::{Hash, Hasher};\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n \n-pub struct File(Void);\n+pub struct File(!);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {}\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -179,59 +179,59 @@ impl File {\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn truncate(&self, _size: u64) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<File> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -247,7 +247,7 @@ impl DirBuilder {\n \n impl fmt::Debug for File {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "96203c74b576cf48bd735f7275de7a1a38ea0817", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -2,10 +2,10 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct TcpStream(Void);\n+pub struct TcpStream(!);\n \n impl TcpStream {\n     pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n@@ -17,292 +17,292 @@ impl TcpStream {\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpStream {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct TcpListener(Void);\n+pub struct TcpListener(!);\n \n impl TcpListener {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n         unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpListener {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n         unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "e30395a0b1d92d9b10664fe4953ae3242bc96efd", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1,8 +1,9 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n \n pub fn errno() -> i32 {\n@@ -21,7 +22,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -30,7 +31,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n \n@@ -62,12 +63,12 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-pub struct Env(Void);\n+pub struct Env(!);\n \n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "25514c2322fa45d3890efeb67f86dc2a99b0c99c", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1,35 +1,34 @@\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n \n-pub struct AnonPipe(Void);\n+pub struct AnonPipe(!);\n \n impl AnonPipe {\n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn diverge(&self) -> ! {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "38ac0a1ddd5f9ce1043be9a155bd48c937efffea", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -5,7 +5,7 @@ use crate::marker::PhantomData;\n use crate::path::Path;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n \n pub use crate::ffi::OsString as EnvKey;\n@@ -94,43 +94,43 @@ impl fmt::Debug for Command {\n     }\n }\n \n-pub struct ExitStatus(Void);\n+pub struct ExitStatus(!);\n \n impl ExitStatus {\n     pub fn success(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for ExitStatus {\n     fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for ExitStatus {}\n \n impl PartialEq for ExitStatus {\n     fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for ExitStatus {}\n \n impl fmt::Debug for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Display for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -146,23 +146,23 @@ impl ExitCode {\n     }\n }\n \n-pub struct Process(Void);\n+pub struct Process(!);\n \n impl Process {\n     pub fn id(&self) -> u32 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cda8510e1baebe1316cd57b8bb0c01e35a1fb145", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1,9 +1,9 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -26,7 +26,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "fe1aedd58590bb4acdff4456213b9855d7c8cfc1", "filename": "library/std/src/sys/vxworks/env.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,9 +0,0 @@\n-pub mod os {\n-    pub const FAMILY: &str = \"vxworks\";\n-    pub const OS: &str = \"vxworks\";\n-    pub const DLL_PREFIX: &str = \"lib\";\n-    pub const DLL_SUFFIX: &str = \".so\";\n-    pub const DLL_EXTENSION: &str = \"so\";\n-    pub const EXE_SUFFIX: &str = \"\";\n-    pub const EXE_EXTENSION: &str = \"\";\n-}"}, {"sha": "12d0147a129817eaffa1ad3ddbe91ed38b50ab97", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,138 +0,0 @@\n-#![allow(dead_code)]\n-#![allow(missing_docs, nonstandard_style)]\n-\n-use crate::io::ErrorKind;\n-\n-pub use self::rand::hashmap_random_keys;\n-pub use crate::os::vxworks as platform;\n-pub use libc::strlen;\n-\n-#[macro_use]\n-#[path = \"../unix/weak.rs\"]\n-pub mod weak;\n-\n-#[path = \"../unix/alloc.rs\"]\n-pub mod alloc;\n-#[path = \"../unix/args.rs\"]\n-pub mod args;\n-#[path = \"../unix/cmath.rs\"]\n-pub mod cmath;\n-#[path = \"../unix/condvar.rs\"]\n-pub mod condvar;\n-pub mod env;\n-#[path = \"../unix/ext/mod.rs\"]\n-pub mod ext;\n-#[path = \"../unix/fd.rs\"]\n-pub mod fd;\n-#[path = \"../unix/fs.rs\"]\n-pub mod fs;\n-#[path = \"../unix/io.rs\"]\n-pub mod io;\n-#[path = \"../unix/memchr.rs\"]\n-pub mod memchr;\n-#[path = \"../unix/mutex.rs\"]\n-pub mod mutex;\n-#[path = \"../unix/net.rs\"]\n-pub mod net;\n-#[path = \"../unix/os.rs\"]\n-pub mod os;\n-#[path = \"../unix/path.rs\"]\n-pub mod path;\n-#[path = \"../unix/pipe.rs\"]\n-pub mod pipe;\n-pub mod process;\n-pub mod rand;\n-#[path = \"../unix/rwlock.rs\"]\n-pub mod rwlock;\n-#[path = \"../unix/stack_overflow.rs\"]\n-pub mod stack_overflow;\n-#[path = \"../unix/stdio.rs\"]\n-pub mod stdio;\n-#[path = \"../unix/thread.rs\"]\n-pub mod thread;\n-pub mod thread_local_dtor;\n-#[path = \"../unix/thread_local_key.rs\"]\n-pub mod thread_local_key;\n-#[path = \"../unix/time.rs\"]\n-pub mod time;\n-\n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n-#[cfg(not(test))]\n-pub fn init() {\n-    // ignore SIGPIPE\n-    unsafe {\n-        assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n-    }\n-}\n-\n-pub use libc::signal;\n-\n-pub fn decode_error_kind(errno: i32) -> ErrorKind {\n-    match errno as libc::c_int {\n-        libc::ECONNREFUSED => ErrorKind::ConnectionRefused,\n-        libc::ECONNRESET => ErrorKind::ConnectionReset,\n-        libc::EPERM | libc::EACCES => ErrorKind::PermissionDenied,\n-        libc::EPIPE => ErrorKind::BrokenPipe,\n-        libc::ENOTCONN => ErrorKind::NotConnected,\n-        libc::ECONNABORTED => ErrorKind::ConnectionAborted,\n-        libc::EADDRNOTAVAIL => ErrorKind::AddrNotAvailable,\n-        libc::EADDRINUSE => ErrorKind::AddrInUse,\n-        libc::ENOENT => ErrorKind::NotFound,\n-        libc::EINTR => ErrorKind::Interrupted,\n-        libc::EINVAL => ErrorKind::InvalidInput,\n-        libc::ETIMEDOUT => ErrorKind::TimedOut,\n-        libc::EEXIST => ErrorKind::AlreadyExists,\n-        libc::ENOSYS => ErrorKind::Unsupported,\n-\n-        // These two constants can have the same value on some systems,\n-        // but different values on others, so we can't use a match\n-        // clause\n-        x if x == libc::EAGAIN || x == libc::EWOULDBLOCK => ErrorKind::WouldBlock,\n-\n-        _ => ErrorKind::Other,\n-    }\n-}\n-\n-#[doc(hidden)]\n-pub trait IsMinusOne {\n-    fn is_minus_one(&self) -> bool;\n-}\n-\n-macro_rules! impl_is_minus_one {\n-    ($($t:ident)*) => ($(impl IsMinusOne for $t {\n-        fn is_minus_one(&self) -> bool {\n-            *self == -1\n-        }\n-    })*)\n-}\n-\n-impl_is_minus_one! { i8 i16 i32 i64 isize }\n-\n-pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n-    if t.is_minus_one() { Err(crate::io::Error::last_os_error()) } else { Ok(t) }\n-}\n-\n-pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>\n-where\n-    T: IsMinusOne,\n-    F: FnMut() -> T,\n-{\n-    loop {\n-        match cvt(f()) {\n-            Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n-            other => return other,\n-        }\n-    }\n-}\n-\n-// On Unix-like platforms, libc::abort will unregister signal handlers\n-// including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc buffered\n-// output will be printed.  Additionally the shell will generally print a more\n-// understandable error message like \"Abort trap\" rather than \"Illegal\n-// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n-// implemented as an illegal instruction.\n-pub fn abort_internal() -> ! {\n-    unsafe { libc::abort() }\n-}"}, {"sha": "dc6130eaa24a8ad5b3dabae4191089544990cf14", "filename": "library/std/src/sys/vxworks/process/mod.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,9 +0,0 @@\n-pub use self::process_common::{Command, CommandArgs, ExitCode, Stdio, StdioPipes};\n-pub use self::process_inner::{ExitStatus, Process};\n-pub use crate::ffi::OsString as EnvKey;\n-pub use crate::sys_common::process::CommandEnvs;\n-\n-#[path = \"../../unix/process/process_common.rs\"]\n-mod process_common;\n-#[path = \"process_vxworks.rs\"]\n-mod process_inner;"}, {"sha": "3a1ff5fd3b9c64c4edb2ac96368b647f08aba4dd", "filename": "library/std/src/sys/vxworks/rand.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,36 +0,0 @@\n-use crate::mem;\n-use crate::slice;\n-\n-pub fn hashmap_random_keys() -> (u64, u64) {\n-    let mut v = (0, 0);\n-    unsafe {\n-        let view = slice::from_raw_parts_mut(&mut v as *mut _ as *mut u8, mem::size_of_val(&v));\n-        imp::fill_bytes(view);\n-    }\n-    return v;\n-}\n-\n-mod imp {\n-    use crate::io;\n-    use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n-\n-    pub fn fill_bytes(v: &mut [u8]) {\n-        static RNG_INIT: AtomicBool = AtomicBool::new(false);\n-        while !RNG_INIT.load(Relaxed) {\n-            let ret = unsafe { libc::randSecure() };\n-            if ret < 0 {\n-                panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-            } else if ret > 0 {\n-                RNG_INIT.store(true, Relaxed);\n-                break;\n-            }\n-            unsafe { libc::usleep(10) };\n-        }\n-        let ret = unsafe {\n-            libc::randABytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n-        };\n-        if ret < 0 {\n-            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-        }\n-    }\n-}"}, {"sha": "5391ed83ebc36267e5932ba1723411bdc3e722a6", "filename": "library/std/src/sys/vxworks/thread_local_dtor.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,7 +0,0 @@\n-#![cfg(target_thread_local)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-\n-pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n-    register_dtor_fallback(t, dtor);\n-}"}, {"sha": "06860673d90e00ec1c0c41536db7564c15c7dec5", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -5,7 +5,7 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n use crate::time::Duration;\n \n@@ -343,18 +343,18 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cf17ac0ba5f2bce2b228fe6fbc4da02ea16c59bf", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -10,7 +10,7 @@ use crate::os::wasi::prelude::*;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sys::memchr;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::vec;\n \n // Add a few symbols not in upstream `libc` just yet.\n@@ -87,7 +87,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     }\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -96,7 +96,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "74515553a82182d7e8521fb49a6bc5105c154f63", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -3,10 +3,10 @@\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -59,7 +59,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "b7bf95c89b482cd532966169bfad10fcc77ee6ac", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1,9 +1,9 @@\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -47,7 +47,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "1f71187f1b466bb32fb75aa4a7146768d389fa06", "filename": "library/std/src/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -127,7 +127,7 @@ pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for PoisonError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        \"PoisonError { inner: .. }\".fmt(f)\n+        f.debug_struct(\"PoisonError\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "abd5b7784834c77154c3667a91d93137a4c69c23", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -100,7 +100,7 @@ pub struct LocalKey<T: 'static> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: 'static> fmt::Debug for LocalKey<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"LocalKey { .. }\")\n+        f.debug_struct(\"LocalKey\").finish_non_exhaustive()\n     }\n }\n \n@@ -472,7 +472,7 @@ pub mod statik {\n \n     impl<T> fmt::Debug for Key<T> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            f.pad(\"Key { .. }\")\n+            f.debug_struct(\"Key\").finish_non_exhaustive()\n         }\n     }\n \n@@ -537,7 +537,7 @@ pub mod fast {\n \n     impl<T> fmt::Debug for Key<T> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            f.pad(\"Key { .. }\")\n+            f.debug_struct(\"Key\").finish_non_exhaustive()\n         }\n     }\n \n@@ -651,7 +651,7 @@ pub mod os {\n \n     impl<T> fmt::Debug for Key<T> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            f.pad(\"Key { .. }\")\n+            f.debug_struct(\"Key\").finish_non_exhaustive()\n         }\n     }\n "}, {"sha": "30d8c2a1b6fa01eff5308567e268043647dd471c", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -1413,7 +1413,7 @@ impl<T> IntoInner<imp::Thread> for JoinHandle<T> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T> fmt::Debug for JoinHandle<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(\"JoinHandle { .. }\")\n+        f.debug_struct(\"JoinHandle\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "a32b92ef1af83d0da472cad66b3e9a6ce0141d79", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -470,12 +470,16 @@ impl Step for Std {\n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n         for path in builder.paths.iter().map(components_simplified) {\n-            if path.get(0) == Some(&\"library\") {\n-                let requested_crate = &path[1];\n-                if krates.contains(&requested_crate) {\n-                    let index = out.join(requested_crate).join(\"index.html\");\n-                    open(builder, &index);\n-                }\n+            let requested_crate = if path.get(0) == Some(&\"library\") {\n+                &path[1]\n+            } else if !path.is_empty() {\n+                &path[0]\n+            } else {\n+                continue;\n+            };\n+            if krates.contains(&requested_crate) {\n+                let index = out.join(requested_crate).join(\"index.html\");\n+                open(builder, &index);\n             }\n         }\n     }"}, {"sha": "86bedb51538b5344f8e340f87818e10dfd3f0d5d", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -191,7 +191,7 @@ mechanisms of the compiler. This is often mapped to GCC's personality function\n which do not trigger a panic can be assured that this function is never\n called. The language item's name is `eh_personality`.\n \n-[unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n+[unwind]: https://github.com/rust-lang/rust/blob/master/library/panic_unwind/src/gcc.rs\n \n The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n compiler. When a panic happens, this controls the message that's displayed on"}, {"sha": "0aa7aa763c2afa7139497d67c04a704ff66e3e69", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -167,19 +167,18 @@ impl<'tcx> Context<'tcx> {\n         \"../\".repeat(self.current.len())\n     }\n \n-    fn render_item(&self, it: &clean::Item, pushname: bool) -> String {\n-        let mut title = if it.is_primitive() || it.is_keyword() {\n-            // No need to include the namespace for primitive types and keywords\n-            String::new()\n-        } else {\n-            self.current.join(\"::\")\n-        };\n-        if pushname {\n-            if !title.is_empty() {\n-                title.push_str(\"::\");\n-            }\n+    fn render_item(&self, it: &clean::Item, is_module: bool) -> String {\n+        let mut title = String::new();\n+        if !is_module {\n             title.push_str(&it.name.unwrap().as_str());\n         }\n+        if !it.is_primitive() && !it.is_keyword() {\n+            if !is_module {\n+                title.push_str(\" in \");\n+            }\n+            // No need to include the namespace for primitive types and keywords\n+            title.push_str(&self.current.join(\"::\"));\n+        };\n         title.push_str(\" - Rust\");\n         let tyname = it.type_();\n         let desc = it.doc_value().as_ref().map(|doc| plain_text_summary(&doc));\n@@ -598,7 +597,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         info!(\"Recursing into {}\", self.dst.display());\n \n-        let buf = self.render_item(item, false);\n+        let buf = self.render_item(item, true);\n         // buf will be empty if the module is stripped and there is no redirect for it\n         if !buf.is_empty() {\n             self.shared.ensure_dir(&self.dst)?;\n@@ -641,7 +640,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             self.render_redirect_pages = item.is_stripped();\n         }\n \n-        let buf = self.render_item(&item, true);\n+        let buf = self.render_item(&item, false);\n         // buf will be empty if the item is stripped and there is no redirect for it\n         if !buf.is_empty() {\n             let name = item.name.as_ref().unwrap();"}, {"sha": "fa3fd512fada6d9568bb1c02522dcfb50c7e0595", "filename": "src/test/rustdoc/prim-title.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c757729701e3d065e3ad6a9bf9f15ab206633c51/src%2Ftest%2Frustdoc%2Fprim-title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c757729701e3d065e3ad6a9bf9f15ab206633c51/src%2Ftest%2Frustdoc%2Fprim-title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprim-title.rs?ref=c757729701e3d065e3ad6a9bf9f15ab206633c51", "patch": "@@ -1,7 +0,0 @@\n-#![crate_name = \"foo\"]\n-\n-// @has foo/primitive.u8.html '//head/title' 'u8 - Rust'\n-// @!has - '//head/title' 'foo'\n-#[doc(primitive = \"u8\")]\n-/// `u8` docs\n-mod u8 {}"}, {"sha": "7dce6092deaed95fddbbbee00262ff2a90925254", "filename": "src/test/rustdoc/tab_title.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Frustdoc%2Ftab_title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Frustdoc%2Ftab_title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftab_title.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,44 @@\n+#![crate_name = \"foo\"]\n+#![feature(doc_keyword)]\n+\n+// tests for the html <title> element\n+\n+// @has foo/index.html '//head/title' 'foo - Rust'\n+\n+// @has foo/fn.widget_count.html '//head/title' 'widget_count in foo - Rust'\n+/// blah\n+pub fn widget_count() {}\n+\n+// @has foo/struct.Widget.html '//head/title' 'Widget in foo - Rust'\n+pub struct Widget;\n+\n+// @has foo/constant.ANSWER.html '//head/title' 'ANSWER in foo - Rust'\n+pub const ANSWER: u8 = 42;\n+\n+// @has foo/blah/index.html '//head/title' 'foo::blah - Rust'\n+pub mod blah {\n+    // @has foo/blah/struct.Widget.html '//head/title' 'Widget in foo::blah - Rust'\n+    pub struct Widget;\n+\n+    // @has foo/blah/trait.Awesome.html '//head/title' 'Awesome in foo::blah - Rust'\n+    pub trait Awesome {}\n+\n+    // @has foo/blah/fn.make_widget.html '//head/title' 'make_widget in foo::blah - Rust'\n+    pub fn make_widget() {}\n+\n+    // @has foo/macro.cool_macro.html '//head/title' 'cool_macro in foo - Rust'\n+    #[macro_export]\n+    macro_rules! cool_macro {\n+        ($t:tt) => { $t }\n+    }\n+}\n+\n+// @has foo/keyword.continue.html '//head/title' 'continue - Rust'\n+#[doc(keyword = \"continue\")]\n+mod continue_keyword {}\n+\n+// @has foo/primitive.u8.html '//head/title' 'u8 - Rust'\n+// @!has - '//head/title' 'foo'\n+#[doc(primitive = \"u8\")]\n+/// `u8` docs\n+mod u8 {}"}, {"sha": "9f924f1fd81d8bc2df40bc88ed41d342086baae3", "filename": "src/test/ui/associated-type-bounds/issue-79949.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(associated_type_bounds)]\n+#![feature(generic_associated_types)]\n+\n+trait MP {\n+    type T<'a>;\n+}\n+struct S(String);\n+impl MP for S {\n+    type T<'a> = &'a str;\n+}\n+\n+trait SR: MP {\n+    fn sr<IM>(&self) -> i32\n+    where\n+        for<'a> IM: T<T: U<<Self as MP>::T<'a>>>;\n+}\n+\n+trait T {\n+    type T;\n+}\n+trait U<X> {}\n+\n+fn main() {}"}, {"sha": "a1cb2295b639ee348311773026f425bda5c2da18", "filename": "src/test/ui/generic-associated-types/issue-70303.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,60 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Document {\n+    type Cursor<'a>: DocCursor<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_>;\n+}\n+\n+struct DocumentImpl {}\n+\n+impl Document for DocumentImpl {\n+    type Cursor<'a> = DocCursorImpl<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_> {\n+        DocCursorImpl {\n+            document: &self,\n+        }\n+    }\n+}\n+\n+\n+trait DocCursor<'a> {}\n+\n+struct DocCursorImpl<'a> {\n+    document: &'a DocumentImpl,\n+}\n+\n+impl<'a> DocCursor<'a> for DocCursorImpl<'a> {}\n+\n+struct Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    cursor: Cursor,\n+    _phantom: std::marker::PhantomData<&'d ()>,\n+}\n+\n+\n+impl<'d, Cursor> Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    pub fn from<Doc>(document: &'d Doc) -> Lexer<'d, Cursor>\n+    where\n+        Doc: Document<Cursor<'d> = Cursor>,\n+    {\n+        Lexer {\n+            cursor: document.cursor(),\n+            _phantom: std::marker::PhantomData,\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let doc = DocumentImpl {};\n+    let lexer: Lexer<'_, DocCursorImpl<'_>> = Lexer::from(&doc);\n+}"}, {"sha": "225f61d132ee61b11db5b8489c3705bcd220430a", "filename": "src/test/ui/generic-associated-types/issue-70304.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,63 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Document {\n+    type Cursor<'a>: DocCursor<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_>;\n+}\n+\n+struct DocumentImpl {}\n+\n+impl Document for DocumentImpl {\n+    type Cursor<'a> = DocCursorImpl<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_> {\n+        DocCursorImpl {\n+            document: &self,\n+        }\n+    }\n+}\n+\n+\n+trait DocCursor<'a> {}\n+\n+struct DocCursorImpl<'a> {\n+    document: &'a DocumentImpl,\n+}\n+\n+impl<'a> DocCursor<'a> for DocCursorImpl<'a> {}\n+\n+struct Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    cursor: Cursor,\n+    _phantom: std::marker::PhantomData<&'d ()>,\n+}\n+\n+\n+impl<'d, Cursor> Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    pub fn from<Doc>(document: &'d Doc) -> Lexer<'d, Cursor>\n+    where\n+        Doc: Document<Cursor<'d> = Cursor>,\n+    {\n+        Lexer {\n+            cursor: document.cursor(),\n+            _phantom: std::marker::PhantomData,\n+        }\n+    }\n+}\n+\n+fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n+                                       //~^ ERROR: missing lifetime specifier\n+    DocumentImpl {}\n+}\n+\n+pub fn main() {\n+    let doc = create_doc();\n+    let lexer: Lexer<'_, DocCursorImpl<'_>> = Lexer::from(&doc);\n+}"}, {"sha": "dfa86018976dc62ca1b6812fb6353c2057ab66c5", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-70304.rs:55:41\n+   |\n+LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n+   |                                         ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn create_doc() -> impl Document<Cursor<'static> = DocCursorImpl<'_>> {\n+   |                                         ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "470476bf476a0a0aa4c34e0da13b8d6ffa2c9fc9", "filename": "src/test/ui/generic-associated-types/issue-71176.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,21 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Provider {\n+    type A<'a>;\n+      //~^ ERROR: missing generics for associated type\n+}\n+\n+impl Provider for () {\n+    type A<'a> = ();\n+}\n+\n+struct Holder<B> {\n+  inner: Box<dyn Provider<A = B>>,\n+}\n+\n+fn main() {\n+    Holder {\n+        inner: Box::new(()),\n+    };\n+}"}, {"sha": "dd19dd4ad8e8307d7369b0be909e584d207b3d17", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `Provider::A`\n+  --> $DIR/issue-71176.rs:5:10\n+   |\n+LL |     type A<'a>;\n+   |          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-71176.rs:5:10\n+   |\n+LL |     type A<'a>;\n+   |          ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type A<'a><'a>;\n+   |           ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "1b02aac8bcb2481847ace23e5a1b5a3e59ce5fe9", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,14 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait CollectionFamily {\n+    type Member<T>;\n+         //~^ ERROR: missing generics for associated type\n+}\n+fn floatify() {\n+    Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+}\n+\n+struct Family;\n+\n+fn main() {}"}, {"sha": "7a9aced5beab8f8eb0967b423dc7845a95f7a1bc", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `CollectionFamily::Member`\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL |     type Member<T>;\n+   |          ^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `T`\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL |     type Member<T>;\n+   |          ^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Member<T><T>;\n+   |                ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "17f9387e29204cf9019f6cb016ef80314ba6d948", "filename": "src/test/ui/generic-associated-types/issue-79636-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,24 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Monad {\n+    type Unwrapped;\n+    type Wrapped<B>;\n+         //~^ ERROR: missing generics for associated type `Monad::Wrapped`\n+\n+    fn bind<B, F>(self, f: F) -> Self::Wrapped<B> {\n+        todo!()\n+    }\n+}\n+\n+fn join<MOuter, MInner, A>(outer: MOuter) -> MOuter::Wrapped<A>\n+where\n+    MOuter: Monad<Unwrapped = MInner>,\n+    MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n+{\n+    outer.bind(|inner| inner)\n+}\n+\n+fn main() {\n+    assert_eq!(join(Some(Some(true))), Some(true));\n+}"}, {"sha": "58eeb43f70d6637c590f33115f1d5262c205804f", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `Monad::Wrapped`\n+  --> $DIR/issue-79636-1.rs:6:10\n+   |\n+LL |     type Wrapped<B>;\n+   |          ^^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `B`\n+  --> $DIR/issue-79636-1.rs:6:10\n+   |\n+LL |     type Wrapped<B>;\n+   |          ^^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Wrapped<B><B>;\n+   |                 ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "5a6542193752b51cde26561c2a9b4ad9a90a56cc", "filename": "src/test/ui/generic-associated-types/issue-79636-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,18 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait SomeTrait {\n+    type Wrapped<A>: SomeTrait;\n+         //~^ ERROR: missing generics for associated type `SomeTrait::Wrapped`\n+\n+    fn f() -> ();\n+}\n+\n+fn program<W>() -> ()\n+where\n+    W: SomeTrait<Wrapped = W>,\n+{\n+    return W::f();\n+}\n+\n+fn main() {}"}, {"sha": "d5e3c56ebb9ef928bb57e4de4ed6c42ec9824054", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71965ab4d05b023cd29c914ef1262a72cac02e01/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=71965ab4d05b023cd29c914ef1262a72cac02e01", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `SomeTrait::Wrapped`\n+  --> $DIR/issue-79636-2.rs:5:10\n+   |\n+LL |     type Wrapped<A>: SomeTrait;\n+   |          ^^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `A`\n+  --> $DIR/issue-79636-2.rs:5:10\n+   |\n+LL |     type Wrapped<A>: SomeTrait;\n+   |          ^^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Wrapped<A><A>: SomeTrait;\n+   |                 ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}