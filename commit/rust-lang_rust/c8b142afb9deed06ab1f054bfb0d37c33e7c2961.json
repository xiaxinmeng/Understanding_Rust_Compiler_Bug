{"sha": "c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjE0MmFmYjlkZWVkMDZhYjFmMDU0YmZiMGQzN2MzM2U3YzI5NjE=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-29T02:59:20Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-29T03:17:46Z"}, "message": "Fix ICE assigning methods to local variables\n\nThis just adds some missing match cases in ty and trans\n\nCloses #18412", "tree": {"sha": "424feef0d8b37a1fc00267483e89566ea2d11289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424feef0d8b37a1fc00267483e89566ea2d11289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "html_url": "https://github.com/rust-lang/rust/commit/c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b142afb9deed06ab1f054bfb0d37c33e7c2961/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1652a1f2c61883c5f2b55a952796619d8aef365e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1652a1f2c61883c5f2b55a952796619d8aef365e", "html_url": "https://github.com/rust-lang/rust/commit/1652a1f2c61883c5f2b55a952796619d8aef365e"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "36635da3a9e1fc2c6f2b60e155c345664d15601a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8b142afb9deed06ab1f054bfb0d37c33e7c2961/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b142afb9deed06ab1f054bfb0d37c33e7c2961/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "patch": "@@ -833,7 +833,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_def_lvalue\");\n     match def {\n-        def::DefFn(..) | def::DefStaticMethod(..) |\n+        def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) |\n         def::DefStruct(_) | def::DefVariant(..) => {\n             trans_def_fn_unadjusted(bcx, ref_expr, def)\n         }\n@@ -1191,10 +1191,12 @@ fn trans_def_fn_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let llfn = match def {\n         def::DefFn(did, _, _) |\n         def::DefStruct(did) | def::DefVariant(_, did, _) |\n-        def::DefStaticMethod(did, def::FromImpl(_), _) => {\n+        def::DefStaticMethod(did, def::FromImpl(_), _) |\n+        def::DefMethod(did, _, def::FromImpl(_)) => {\n             callee::trans_fn_ref(bcx, did, ExprId(ref_expr.id))\n         }\n-        def::DefStaticMethod(impl_did, def::FromTrait(trait_did), _) => {\n+        def::DefStaticMethod(impl_did, def::FromTrait(trait_did), _) |\n+        def::DefMethod(impl_did, _, def::FromTrait(trait_did)) => {\n             meth::trans_static_method_callee(bcx, impl_did,\n                                              trait_did, ref_expr.id)\n         }"}, {"sha": "fda47dba7d4b6725aaf7472733ba5b0825434c20", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b142afb9deed06ab1f054bfb0d37c33e7c2961/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b142afb9deed06ab1f054bfb0d37c33e7c2961/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c8b142afb9deed06ab1f054bfb0d37c33e7c2961", "patch": "@@ -3631,7 +3631,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n                 def::DefFn(_, _, true) => RvalueDpsExpr,\n \n                 // Fn pointers are just scalar values.\n-                def::DefFn(..) | def::DefStaticMethod(..) => RvalueDatumExpr,\n+                def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) => RvalueDatumExpr,\n \n                 // Note: there is actually a good case to be made that\n                 // DefArg's, particularly those of immediate type, ought to"}]}