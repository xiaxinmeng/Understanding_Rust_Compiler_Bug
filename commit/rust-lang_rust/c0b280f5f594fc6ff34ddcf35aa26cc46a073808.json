{"sha": "c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYjI4MGY1ZjU5NGZjNmZmMzRkZGNmMzVhYTI2Y2M0NmEwNzM4MDg=", "commit": {"author": {"name": "moxian", "email": "moxian@google.com", "date": "2018-05-13T08:41:24Z"}, "committer": {"name": "moxian", "email": "moxian@google.com", "date": "2018-06-28T21:56:53Z"}, "message": "Load backtrace-related functions only once\n\n.. and pass them around in BacktraceContext.", "tree": {"sha": "dda3df1edd67f3c2c7f07380b0c44e3e2e091953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda3df1edd67f3c2c7f07380b0c44e3e2e091953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "html_url": "https://github.com/rust-lang/rust/commit/c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/comments", "author": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3245a475ab92b5ab77cf69e336279420c86a83eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3245a475ab92b5ab77cf69e336279420c86a83eb", "html_url": "https://github.com/rust-lang/rust/commit/3245a475ab92b5ab77cf69e336279420c86a83eb"}], "stats": {"total": 118, "additions": 77, "deletions": 41}, "files": [{"sha": "23bb4ab6dfe9111e8f8bdca3d39be9f39449eae0", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "patch": "@@ -47,6 +47,7 @@ mod printing;\n pub mod gnu;\n \n pub use self::printing::{foreach_symbol_fileline, resolve_symname};\n+use self::printing::{load_printing_fns_ex, load_printing_fns_64};\n \n pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n     let dbghelp = DynamicLibrary::open(\"dbghelp.dll\")?;\n@@ -55,29 +56,31 @@ pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceCon\n     let SymInitialize = sym!(dbghelp, \"SymInitialize\", SymInitializeFn)?;\n     let SymCleanup = sym!(dbghelp, \"SymCleanup\", SymCleanupFn)?;\n \n-    // enum for holding the StackWalk function. Different from StackWalkVariant\n-    // below, since there's no need to pass the function itself into\n-    // the BacktraceContext\n-    enum sw_fn_local {\n-        SWExFn(StackWalkExFn),\n-        SW64Fn(StackWalk64Fn),\n-    }\n+\n     // StackWalkEx might not be present and we'll fall back to StackWalk64\n-    let (StackWalkFn, variant) =\n-        sym!(dbghelp, \"StackWalkEx\", StackWalkExFn)\n-        .map(|f| (sw_fn_local::SWExFn(f), StackWalkVariant::StackWalkEx))\n-        .or_else(|_|\n-            sym!(dbghelp, \"StackWalk64\", StackWalk64Fn)\n-            .map(|f| (sw_fn_local::SW64Fn(f), StackWalkVariant::StackWalk64))\n-        )?;\n+    let sw_var = match sym!(dbghelp, \"StackWalkEx\", StackWalkExFn) {\n+         Ok(StackWalkEx) =>\n+            StackWalkVariant::StackWalkEx(\n+                StackWalkEx,\n+                load_printing_fns_ex(&dbghelp)?,\n+            ),\n+        Err(e) => match sym!(dbghelp, \"StackWalk64\", StackWalk64Fn) {\n+            Ok(StackWalk64) =>\n+                StackWalkVariant::StackWalk64(\n+                    StackWalk64,\n+                    load_printing_fns_64(&dbghelp)?,\n+                ),\n+            Err(..) => return Err(e),\n+        },\n+    };\n \n     // Allocate necessary structures for doing the stack walk\n     let process = unsafe { c::GetCurrentProcess() };\n \n     let backtrace_context = BacktraceContext {\n         handle: process,\n         SymCleanup,\n-        StackWalkVariant: variant,\n+        StackWalkVariant: sw_var,\n         dbghelp,\n     };\n \n@@ -88,9 +91,9 @@ pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceCon\n     }\n \n     // And now that we're done with all the setup, do the stack walking!\n-    match StackWalkFn {\n-        sw_fn_local::SWExFn(f) => set_frames_ex(f, frames, backtrace_context, process),\n-        sw_fn_local::SW64Fn(f) => set_frames_64(f, frames, backtrace_context, process),\n+    match backtrace_context.StackWalkVariant {\n+        StackWalkVariant::StackWalkEx(f, _) => set_frames_ex(f, frames, backtrace_context, process),\n+        StackWalkVariant::StackWalk64(f, _) => set_frames_64(f, frames, backtrace_context, process),\n     }\n }\n \n@@ -259,17 +262,19 @@ fn init_frame_64(frame: &mut c::STACKFRAME64, ctx: &c::CONTEXT) -> c::DWORD {\n }\n \n enum StackWalkVariant {\n-    StackWalkEx,\n-    StackWalk64,\n+    StackWalkEx(StackWalkExFn, printing::PrintingFnsEx),\n+    StackWalk64(StackWalk64Fn, printing::PrintingFns64),\n }\n \n \n pub struct BacktraceContext {\n     handle: c::HANDLE,\n     SymCleanup: SymCleanupFn,\n     // Only used in printing for msvc and not gnu\n+    // The gnu version is effectively a ZST dummy.\n     #[allow(dead_code)]\n     StackWalkVariant: StackWalkVariant,\n+    // keeping DynamycLibrary loaded until its functions no longer needed\n     #[allow(dead_code)]\n     dbghelp: DynamicLibrary,\n }"}, {"sha": "251d5028aeaa6eb551f1c5d1b120c83c5b7e6adb", "filename": "src/libstd/sys/windows/backtrace/printing/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs?ref=c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "patch": "@@ -15,6 +15,20 @@ mod printing;\n #[cfg(target_env = \"gnu\")]\n mod printing {\n     pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n+\n+    // dummy functions to mirror those present in msvc version.\n+    use sys::dynamic_lib::DynamicLibrary;\n+    use io;\n+    pub struct PrintingFnsEx {}\n+    pub struct PrintingFns64 {}\n+    pub fn load_printing_fns_ex(_: &DynamicLibrary) -> io::Result<PrintingFnsEx> {\n+        Ok(PrintingFnsEx{})\n+    }\n+    pub fn load_printing_fns_64(_: &DynamicLibrary) -> io::Result<PrintingFns64> {\n+        Ok(PrintingFns64{})\n+    }\n }\n \n pub use self::printing::{foreach_symbol_fileline, resolve_symname};\n+pub use self::printing::{load_printing_fns_ex, load_printing_fns_64,\n+                         PrintingFnsEx, PrintingFns64};"}, {"sha": "9cfc2c3d3525e19cadb42bc31a98d35d6c80d8e1", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b280f5f594fc6ff34ddcf35aa26cc46a073808/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=c0b280f5f594fc6ff34ddcf35aa26cc46a073808", "patch": "@@ -15,8 +15,38 @@ use mem;\n use sys::backtrace::BacktraceContext;\n use sys::backtrace::StackWalkVariant;\n use sys::c;\n+use sys::dynamic_lib::DynamicLibrary;\n use sys_common::backtrace::Frame;\n \n+\n+// Structs holding printing functions and loaders for them\n+// Two versions depending on whether dbghelp.dll has StackWalkEx or not\n+// (the former being in newer Windows versions, the older being in Win7 and before)\n+pub struct PrintingFnsEx {\n+    resolve_symname: SymFromInlineContextFn,\n+    sym_get_line: SymGetLineFromInlineContextFn,\n+}\n+pub struct PrintingFns64 {\n+    resolve_symname: SymFromAddrFn,\n+    sym_get_line: SymGetLineFromAddr64Fn,\n+}\n+\n+pub fn load_printing_fns_ex(dbghelp: &DynamicLibrary) -> io::Result<PrintingFnsEx> {\n+    Ok(PrintingFnsEx{\n+        resolve_symname: sym!(dbghelp, \"SymFromInlineContext\",\n+                              SymFromInlineContextFn)?,\n+        sym_get_line: sym!(dbghelp, \"SymGetLineFromInlineContext\",\n+                           SymGetLineFromInlineContextFn)?,\n+    })\n+}\n+pub fn load_printing_fns_64(dbghelp: &DynamicLibrary) -> io::Result<PrintingFns64> {\n+    Ok(PrintingFns64{\n+        resolve_symname: sym!(dbghelp, \"SymFromAddr\", SymFromAddrFn)?,\n+        sym_get_line: sym!(dbghelp, \"SymGetLineFromAddr64\",\n+                     SymGetLineFromAddr64Fn)?,\n+    })\n+}\n+\n type SymFromInlineContextFn =\n     unsafe extern \"system\" fn(c::HANDLE, u64, c::ULONG, *mut u64, *mut c::SYMBOL_INFO) -> c::BOOL;\n type SymGetLineFromInlineContextFn = unsafe extern \"system\" fn(\n@@ -39,14 +69,11 @@ where\n     F: FnOnce(Option<&str>) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n-        StackWalkVariant::StackWalkEx => {\n-            let SymFromInlineContext =\n-                sym!(&context.dbghelp, \"SymFromInlineContext\",SymFromInlineContextFn)?;\n-            resolve_symname_from_inline_context(SymFromInlineContext, frame, callback, context)\n+        StackWalkVariant::StackWalkEx(_, ref fns) => {\n+            resolve_symname_from_inline_context(fns.resolve_symname, frame, callback, context)\n         },\n-        StackWalkVariant::StackWalk64 => {\n-            let SymFromAddr = sym!(&context.dbghelp, \"SymFromAddr\", SymFromAddrFn)?;\n-            resolve_symname_from_addr(SymFromAddr, frame, callback, context)\n+        StackWalkVariant::StackWalk64(_, ref fns) => {\n+            resolve_symname_from_addr(fns.resolve_symname, frame, callback, context)\n         }\n     }\n }\n@@ -134,20 +161,10 @@ where\n     F: FnMut(&[u8], u32) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n-        StackWalkVariant::StackWalkEx => {\n-            let SymGetLineFromInlineContext =\n-                sym!(&context.dbghelp, \"SymGetLineFromInlineContext\",\n-                     SymGetLineFromInlineContextFn)?;\n-            foreach_symbol_fileline_ex(SymGetLineFromInlineContext,\n-                frame, f, context)\n-        },\n-        StackWalkVariant::StackWalk64 => {\n-            let SymGetLineFromAddr64 =\n-                sym!(&context.dbghelp, \"SymGetLineFromAddr64\",\n-                     SymGetLineFromAddr64Fn)?;\n-            foreach_symbol_fileline_64(SymGetLineFromAddr64,\n-                frame, f, context)\n-        }\n+        StackWalkVariant::StackWalkEx(_, ref fns) =>\n+            foreach_symbol_fileline_ex(fns.sym_get_line, frame, f, context),\n+        StackWalkVariant::StackWalk64(_, ref fns) =>\n+            foreach_symbol_fileline_64(fns.sym_get_line, frame, f, context),\n     }\n }\n "}]}