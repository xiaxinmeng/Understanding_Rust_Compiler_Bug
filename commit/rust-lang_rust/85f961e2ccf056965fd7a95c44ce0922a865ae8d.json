{"sha": "85f961e2ccf056965fd7a95c44ce0922a865ae8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Zjk2MWUyY2NmMDU2OTY1ZmQ3YTk1YzQ0Y2UwOTIyYTg2NWFlOGQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-08T11:02:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:24Z"}, "message": "Update compile fail tests to use usize.", "tree": {"sha": "35a4eba610197d3b0442914440963dab9200fdd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a4eba610197d3b0442914440963dab9200fdd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f961e2ccf056965fd7a95c44ce0922a865ae8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f961e2ccf056965fd7a95c44ce0922a865ae8d", "html_url": "https://github.com/rust-lang/rust/commit/85f961e2ccf056965fd7a95c44ce0922a865ae8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f961e2ccf056965fd7a95c44ce0922a865ae8d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "html_url": "https://github.com/rust-lang/rust/commit/0c70ce1424f380360dcc8d857c68d2df1a27b6fd"}], "stats": {"total": 650, "additions": 325, "deletions": 325}, "files": [{"sha": "047e3325666537b875d71af3b5a400eb42b01000", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n \n   how_hungry : isize,\n }\n@@ -18,7 +18,7 @@ impl cat {\n     pub fn speak(&self) { self.meows += 1u; }\n }\n \n-fn cat(in_x : uint, in_y : isize) -> cat {\n+fn cat(in_x : usize, in_y : isize) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y"}, {"sha": "755a9f2d73f6271f22dbb263c9bcc40aeeeedeba", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -19,8 +19,8 @@ pub trait Foo {\n struct Bar;\n \n impl Foo for isize {\n-    type A = uint;\n-    fn boo(&self) -> uint { 42 }\n+    type A = usize;\n+    fn boo(&self) -> usize { 42 }\n }\n \n fn baz<I: Foo>(x: &<I as Foo<A=Bar>>::A) {}"}, {"sha": "037f503788844b642ad2cbc44884d5cfb958538e", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -19,8 +19,8 @@ pub trait Foo {\n struct Bar;\n \n impl Foo for isize {\n-    type A = uint;\n-    fn boo(&self) -> uint {\n+    type A = usize;\n+    fn boo(&self) -> usize {\n         42\n     }\n }"}, {"sha": "9baa7f1ad5a6901237f64cb4f1777590e47d638d", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,11 +16,11 @@ trait Foo {\n }\n \n impl Foo for isize {\n-    type A = uint;\n+    type A = usize;\n     fn bar() -> isize { 42 }\n }\n \n pub fn main() {\n-    let x: isize = Foo::<A=uint>::bar();\n+    let x: isize = Foo::<A=usize>::bar();\n     //~^ERROR unexpected binding of associated item in expression path\n }"}, {"sha": "d5678c155fd2db44dd4f6a94e354ff6a3ee7b196", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -33,9 +33,9 @@ struct UintStruct {\n }\n \n impl<'a> TheTrait<&'a isize> for UintStruct {\n-    type A = &'a uint;\n+    type A = &'a usize;\n \n-    fn get(&self, t: &'a isize) -> &'a uint {\n+    fn get(&self, t: &'a isize) -> &'a usize {\n         panic!()\n     }\n }\n@@ -47,7 +47,7 @@ fn foo<T>()\n }\n \n fn bar<T>()\n-    where T : for<'x> TheTrait<&'x isize, A = &'x uint>\n+    where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n {\n     // ok for UintStruct, but not IntStruct\n }"}, {"sha": "30923f0912734853ecf0fb7bfdbf46a396792fa9", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -20,17 +20,17 @@ pub trait Foo {\n struct Bar;\n \n impl Foo for isize {\n-    type A = uint;\n+    type A = usize;\n     type B = char;\n-    fn boo(&self) -> uint {\n+    fn boo(&self) -> usize {\n         42\n     }\n }\n \n pub fn main() {\n-    let a = &42i as &Foo<A=uint, B=char>;\n+    let a = &42i as &Foo<A=usize, B=char>;\n \n-    let b = &42i as &Foo<A=uint>;\n+    let b = &42i as &Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n     let c = &42i as &Foo<B=char>;"}, {"sha": "74c8dffced5cf9e0d06f2847c0fab8e00dc14d78", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,7 +15,7 @@ pub trait Foo {\n }\n \n impl Foo for isize {\n-    type A = uint;\n+    type A = usize;\n }\n \n pub fn f1<T: Foo>(a: T, x: T::A) {}"}, {"sha": "aecbf217a5b25e916155829b81188bf7401049ac", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ trait Foo {\n }\n \n impl Foo for isize {\n-    type A = uint;\n+    type A = usize;\n     fn bar() -> isize { 42 }\n }\n "}, {"sha": "e364d0283c4b1f25e6a83abf165f651f62ca3933", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that a function with a ! annotation always actually fails\n \n-fn bad_bang(i: uint) -> ! {\n+fn bad_bang(i: usize) -> ! {\n     return 7u; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n "}, {"sha": "817b107d8140ca2d7565e27a1275464271b3fc8c", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that a function with a ! annotation always actually fails\n \n-fn bad_bang(i: uint) -> ! { //~ ERROR computation may converge in a function marked as diverging\n+fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n     if i < 0u { } else { panic!(); }\n }\n "}, {"sha": "636c881a3e16281af5af3099fb7438036f96d72f", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ trait bar {\n     fn bar<T:Send>(&self);\n }\n \n-impl bar for uint {\n+impl bar for usize {\n     fn bar<T:Send>(&self) {\n     }\n }"}, {"sha": "228b07555f29cc0967bfecee7e664f50f3255033", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,7 +13,7 @@\n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n \n-fn set(x: &mut uint) { *x = 5; }\n+fn set(x: &mut usize) { *x = 5; }\n \n fn main() {\n     // By-ref captures"}, {"sha": "5ee2b89dd9839d4e9d510dfb457a9312ea9d055f", "filename": "src/test/compile-fail/borrowck-anon-fields-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n // Tests that we are able to distinguish when loans borrow different\n // anonymous fields of a tuple vs the same anonymous field.\n \n-struct Y(uint, uint);\n+struct Y(usize, usize);\n \n fn distinct_variant() {\n     let mut y = Y(1, 2);"}, {"sha": "4e1b85283a6b1d3a0e72c0ae9d3c5c68291b9b57", "filename": "src/test/compile-fail/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of an enum variant vs the same anonymous field.\n \n enum Foo {\n-    X, Y(uint, uint)\n+    X, Y(usize, usize)\n }\n \n fn distinct_variant() {"}, {"sha": "d5f09305808f0bc3e54454cf0d8ca6f97e3bfb3e", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,10 +10,10 @@\n \n enum Either<T, U> { Left(T), Right(U) }\n \n-struct X(Either<(uint,uint), fn()>);\n+struct X(Either<(usize,usize), fn()>);\n \n impl X {\n-    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(uint, uint), fn()>) {\n+    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(usize, usize), fn()>) {\n         let X(ref e) = *self;\n         blk(e)\n     }"}, {"sha": "4d1939be5b9f7350eeeb6772b458d21badf7227d", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,12 +13,12 @@\n \n #![feature(box_syntax)]\n \n-fn rewrite(v: &mut Box<uint>) -> uint {\n+fn rewrite(v: &mut Box<usize>) -> usize {\n     *v = box 22;\n     **v\n }\n \n-fn add(v: &uint, w: uint) -> uint {\n+fn add(v: &usize, w: usize) -> usize {\n     *v + w\n }\n "}, {"sha": "9eda3689334c19f4176be63c228ea93157ac9e62", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,12 +13,12 @@\n \n #![feature(box_syntax)]\n \n-fn rewrite(v: &mut Box<uint>) -> uint {\n+fn rewrite(v: &mut Box<usize>) -> usize {\n     *v = box 22;\n     **v\n }\n \n-fn add(v: &uint, w: Box<uint>) -> uint {\n+fn add(v: &usize, w: Box<usize>) -> usize {\n     *v + *w\n }\n "}, {"sha": "98d1905ed9068155797f616b3f75a29db5ab128f", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ extern crate collections;\n use std::collections::HashMap;\n \n fn main() {\n-    let mut buggy_map: HashMap<uint, &uint> = HashMap::new();\n+    let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n     buggy_map.insert(42, &*box 1); //~ ERROR borrowed value does not live long enough\n \n     // but it is ok if we use a temporary"}, {"sha": "00dba3856a28336e9e600d517ceeadeb5d720fd7", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -113,8 +113,8 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n-    F: FnMut(&'r mut uint) -> bool,\n+fn loop_break_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where\n+    F: FnMut(&'r mut usize) -> bool,\n {\n     // Here we check that when you break out of an inner loop, the\n     // borrows that go out of scope as you exit the inner loop are\n@@ -123,21 +123,21 @@ fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n     while cond() {\n         while cond() {\n             // this borrow is limited to the scope of `r`...\n-            let r: &'r mut uint = produce();\n+            let r: &'r mut usize = produce();\n             if !f(&mut *r) {\n                 break; // ...so it is not live as exit the `while` loop here\n             }\n         }\n     }\n }\n \n-fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where F: FnMut(&'r mut uint) -> bool {\n+fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where F: FnMut(&'r mut usize) -> bool {\n     // Similar to `loop_break_pops_scopes` but for the `loop` keyword\n \n     while cond() {\n         while cond() {\n             // this borrow is limited to the scope of `r`...\n-            let r: &'r mut uint = produce();\n+            let r: &'r mut usize = produce();\n             if !f(&mut *r) {\n                 continue; // ...so it is not live as exit (and re-enter) the `while` loop here\n             }"}, {"sha": "902762f687ed9a46d3275f74b3c89626c6683462", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,7 +13,7 @@\n use std::ops::Add;\n \n #[derive(Clone)]\n-struct foo(Box<uint>);\n+struct foo(Box<usize>);\n \n impl Add for foo {\n     type Output = foo;"}, {"sha": "7d35a27c0ae2016093916cdcc3d83f25b235647e", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -38,8 +38,8 @@ struct SFnOnce {\n     x: String,\n }\n \n-impl FnOnce<(String,),uint> for SFnOnce {\n-    extern \"rust-call\" fn call_once(self, (z,): (String,)) -> uint {\n+impl FnOnce<(String,),usize> for SFnOnce {\n+    extern \"rust-call\" fn call_once(self, (z,): (String,)) -> usize {\n         self.x.len() + z.len()\n     }\n }"}, {"sha": "bfdd46345de00b7eeb51bc1c2e51c4819fd326ec", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,10 +16,10 @@ struct MyVec<T> {\n     data: Vec<T>,\n }\n \n-impl<T> Index<uint> for MyVec<T> {\n+impl<T> Index<usize> for MyVec<T> {\n     type Output = T;\n \n-    fn index(&self, &i: &uint) -> &T {\n+    fn index(&self, &i: &usize) -> &T {\n         &self.data[i]\n     }\n }"}, {"sha": "31e09e877c7086805907218c8b42116ac653290d", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,7 +15,7 @@ trait noisy {\n }\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n \n   how_hungry : isize,\n   name : String,\n@@ -50,7 +50,7 @@ impl cat {\n     }\n }\n \n-fn cat(in_x : uint, in_y : isize, in_name: String) -> cat {\n+fn cat(in_x : usize, in_y : isize, in_name: String) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "8d57380630837bd5ba063fba3c031ad0750d8556", "filename": "src/test/compile-fail/class-implements-bad-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:nonexistent\n class cat : nonexistent {\n-  let meows: uint;\n-  new(in_x : uint) { self.meows = in_x; }\n+  let meows: usize;\n+  new(in_x : usize) { self.meows = in_x; }\n }\n \n fn main() {"}, {"sha": "56b3caf6d213398e170d94c4bf1e37cabaf608b8", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,14 +13,14 @@ trait animal {\n }\n \n struct cat {\n-  meows: uint,\n+  meows: usize,\n }\n \n impl animal for cat {\n     //~^ ERROR not all trait items implemented, missing: `eat`\n }\n \n-fn cat(in_x : uint) -> cat {\n+fn cat(in_x : usize) -> cat {\n     cat {\n         meows: in_x\n     }"}, {"sha": "af172cd492459e1f884b127acff3f707b0432de4", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n }\n \n impl cat {"}, {"sha": "27d97d18c949f16f0935f92de930368030e7f0f5", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ use std::default::Default;\n // for the same type (though this crate doesn't).\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n trait Even { }\n@@ -25,14 +25,14 @@ trait Odd { }\n \n impl Even for isize { }\n \n-impl Odd for uint { }\n+impl Odd for usize { }\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<T:Odd> MyTrait for T {\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n fn main() { }"}, {"sha": "0f233b78c72160b2bc833bac871dba077622281d", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,19 +16,19 @@ use std::default::Default;\n // for the same type (though this crate doesn't implement them at all).\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n trait Even { }\n \n trait Odd { }\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<T:Odd> MyTrait for T {\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n fn main() { }"}, {"sha": "c3563792ce3c7d2e5b9f8c17a183560838ff5f9a", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -26,11 +26,11 @@ impl<T> MyTrait<T> for T { //~ ERROR E0119\n \n #[derive(Clone)]\n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait<MyType> for MyType {\n-    fn get(&self) -> uint { (*self).clone() }\n+    fn get(&self) -> usize { (*self).clone() }\n }\n \n fn main() { }"}, {"sha": "eeaa68677eb670c37c44e7852401966608bfcbb3", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,19 +16,19 @@ trait OtherTrait {\n }\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T:OtherTrait> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait for MyType {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n impl OtherTrait for MyType {"}, {"sha": "980e4256d2b854d635c4ccdaff00a97a4d710025", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,19 +15,19 @@ use std::default::Default;\n // specific T.\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait for MyType {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n fn main() { }"}, {"sha": "0bd0224b246d1503fff6b5fbcf97274a2f0ff9d3", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ use lib::TheTrait;\n \n struct TheType;\n \n-impl TheTrait<uint> for isize { } //~ ERROR E0117\n+impl TheTrait<usize> for isize { } //~ ERROR E0117\n \n impl TheTrait<TheType> for isize { } //~ ERROR E0117\n "}, {"sha": "9673fb6a21392dd3e619715beaa4c51b98fa31c2", "filename": "src/test/compile-fail/coherence-tuple-conflict.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,15 +15,15 @@ use std::default::Default;\n // specific T.\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T> MyTrait for (T,T) { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<A,B> MyTrait for (A,B) {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n fn main() { }"}, {"sha": "053efe3b41b540a8f186c91466910d5d12f54250", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A: uint = { 1u; 2 };\n+static A: usize = { 1u; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n-static B: uint = { { } 2 };\n+static B: usize = { { } 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n macro_rules! foo {\n     () => (()) //~ ERROR: blocks in constants are limited to items and tail expressions\n }\n-static C: uint = { foo!(); 2 };\n+static C: usize = { foo!(); 2 };\n \n-static D: uint = { let x = 4u; 2 };\n+static D: usize = { let x = 4u; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "324f189bbfb9286a5bf233bcc80236d9c440740d", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: uint = 0u;\n+static s: usize = 0u;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: uint = 0u;\n+const c: usize = 0u;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }\n@@ -34,7 +34,7 @@ mod m { }\n extern \"C\" { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-type A = uint;\n+type A = usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n fn main() { }"}, {"sha": "6e9b120aa69b5a6b27a173b69a5ec41cc7535969", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -22,7 +22,7 @@ struct B(isize);\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n #[derive(FromPrimitive)]\n-enum C { Foo(isize), Bar(uint) }\n+enum C { Foo(isize), Bar(usize) }\n //~^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n //~^^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n "}, {"sha": "f64093200c4f960b3ff9c0bfb52feb778de71905", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -18,10 +18,10 @@ struct S;\n \n impl Copy for S {}\n \n-impl Index<uint> for S {\n+impl Index<usize> for S {\n     type Output = str;\n \n-    fn index<'a>(&'a self, _: &uint) -> &'a str {\n+    fn index<'a>(&'a self, _: &usize) -> &'a str {\n         \"hello\"\n     }\n }\n@@ -30,11 +30,11 @@ struct T;\n \n impl Copy for T {}\n \n-impl Index<uint> for T {\n+impl Index<usize> for T {\n     type Output = Show + 'static;\n \n-    fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n-        static x: uint = 42;\n+    fn index<'a>(&'a self, idx: &usize) -> &'a (Show + 'static) {\n+        static x: usize = 42;\n         &x\n     }\n }"}, {"sha": "1d7794336a09671999d7f8f50ae9dff971bc9357", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -53,6 +53,6 @@ enum Ei32 {\n // u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a\n // little counterintuitive, but since the discriminant can store all the bits, and extracting it\n // with a cast requires specifying the signedness, there is no loss of information in those cases.\n-// This also applies to isize and uint on 64-bit targets.\n+// This also applies to isize and usize on 64-bit targets.\n \n pub fn main() { }"}, {"sha": "d2c88865d54f21126eb1c8bd95d87de1014486c9", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -22,10 +22,10 @@ extern \"rust-intrinsic\" {\n \n     // Bounds aren't checked right now, so this should work\n     // even though it's incorrect.\n-    fn size_of<T: Clone>() -> uint;\n+    fn size_of<T: Clone>() -> usize;\n \n     // Unresolved bounds should still error.\n-    fn align_of<T: NoSuchTrait>() -> uint;\n+    fn align_of<T: NoSuchTrait>() -> usize;\n     //~^ ERROR attempt to bound type parameter with a nonexistent trait `NoSuchTrait`\n }\n "}, {"sha": "0c730b5f593f755c83f41b4bef25df69c7b42711", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,11 +11,11 @@\n #![allow(dead_code)]\n \n mod u {\n-    type X = uint; //~ WARN the `uint` type is deprecated\n+    type X = usize; //~ WARN the `usize` type is deprecated\n     struct Foo {\n-        x: uint //~ WARN the `uint` type is deprecated\n+        x: usize //~ WARN the `usize` type is deprecated\n     }\n-    fn bar(x: uint) { //~ WARN the `uint` type is deprecated\n+    fn bar(x: usize) { //~ WARN the `usize` type is deprecated\n         1u; //~ WARN the `u` suffix on integers is deprecated\n     }\n }"}, {"sha": "dc0c9a093fff8c302932d8e084b11b787d3904e0", "filename": "src/test/compile-fail/fully-qualified-type-name3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n \n // ignore-test\n \n-type T1 = uint;\n+type T1 = usize;\n type T2 = isize;\n \n fn bar(x: T1) -> T2 {"}, {"sha": "2365f494075d2126a786c54564b9d7168240def6", "filename": "src/test/compile-fail/hrtb-debruijn-in-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,7 +14,7 @@\n use std::collections::HashMap;\n \n struct Foo<'a> {\n-    map: HashMap<uint, &'a str>\n+    map: HashMap<usize, &'a str>\n }\n \n impl<'a> Foo<'a> {"}, {"sha": "1e04e685e41b8b3434ca2b62dfd92671eea445eb", "filename": "src/test/compile-fail/huge-array-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: too big for the current\n \n fn main() {\n-   let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as uint +(1u64<<31) as uint];\n+   let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as usize +(1u64<<31) as usize];\n }"}, {"sha": "37c2d2ffdc57f9e2eb07b02b735f541f9965e58a", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> uint { return 0u; }\n+    pub fn common() -> usize { return 0u; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> uint { return 1u; }\n+    pub fn common() -> usize { return 1u; }\n }\n \n mod test {"}, {"sha": "901d8783d0278997a9e6dfd00e909b2f1af4a40e", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure that indexing an array is only valid with a `uint`, not any other\n+// Make sure that indexing an array is only valid with a `usize`, not any other\n // integral type.\n \n fn main() {\n     fn bar<T>(_: T) {}\n     [0][0u8]; //~ ERROR: the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR: the trait `core::ops::Index<u8>` is not implemented\n \n-    [0][0]; // should infer to be a uint\n+    [0][0]; // should infer to be a usize\n \n     let i = 0;      // i is an IntVar\n-    [0][i];         // i should be locked to uint\n+    [0][i];         // i should be locked to usize\n     bar::<isize>(i);  // i should not be re-coerced back to an isize\n     //~^ ERROR: mismatched types\n }"}, {"sha": "514557a96a4b362ea41ee343fa01fd48422f6019", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,8 +15,8 @@ trait to_opt {\n     fn to_option(&self) -> Option<Self>;\n }\n \n-impl to_opt for uint {\n-    fn to_option(&self) -> Option<uint> {\n+impl to_opt for usize {\n+    fn to_option(&self) -> Option<usize> {\n         Some(*self)\n     }\n }\n@@ -27,7 +27,7 @@ impl<T:Clone> to_opt for Option<T> {\n     }\n }\n \n-fn function<T:to_opt + Clone>(counter: uint, t: T) {\n+fn function<T:to_opt + Clone>(counter: usize, t: T) {\n     if counter > 0u {\n         function(counter - 1u, t.to_option());\n     }"}, {"sha": "03d4e9b81eb2924f34a5ecf0e3b05c6aac855607", "filename": "src/test/compile-fail/issue-10200.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo(bool);\n-fn foo(_: uint) -> Foo { Foo(false) }\n+fn foo(_: usize) -> Foo { Foo(false) }\n \n fn main() {\n     match Foo(true) {"}, {"sha": "bb020d55bdb0b6323b968fd5e2ad4cb78a8e1783", "filename": "src/test/compile-fail/issue-10636-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10636-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n struct Obj { //~ NOTE: unclosed delimiter\n-    member: uint\n+    member: usize\n ) //~ ERROR: incorrect close delimiter"}, {"sha": "39f25b837cd4976e6b0e439dffbbc4c7a67cb7e0", "filename": "src/test/compile-fail/issue-10877.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -18,7 +18,7 @@ extern {\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n     fn qux((x,y): ());\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n-    fn this_is_actually_ok(a: uint);\n-    fn and_so_is_this(_: uint);\n+    fn this_is_actually_ok(a: usize);\n+    fn and_so_is_this(_: usize);\n }\n fn main() {}"}, {"sha": "2e33886037708f32bd8bf10579434cd78c68bfd4", "filename": "src/test/compile-fail/issue-13359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     foo(1*(1 as isize));\n     //~^ ERROR: mismatched types: expected `i16`, found `isize` (expected i16, found isize)\n \n-    bar(1*(1 as uint));\n+    bar(1*(1 as usize));\n     //~^ ERROR: mismatched types: expected `u32`, found `usize` (expected u32, found usize)\n }"}, {"sha": "64c503376d561853975f01f4004c0bcd7a1c5867", "filename": "src/test/compile-fail/issue-1362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #1362 - without that fix the span will be bogus\n // no-reformat\n fn main() {\n-  let x: uint = 20i; //~ ERROR mismatched types\n+  let x: usize = 20i; //~ ERROR mismatched types\n }\n // NOTE: Do not add any extra lines as the line number the error is\n // on is significant; an error later in the source file might not"}, {"sha": "0ec64ba6a3f9b53bea95d2f05254811b7549baf2", "filename": "src/test/compile-fail/issue-14303-fncall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     range(0, 4)\n     .map(|x| x * 2)\n-    .collect::<Vec<'a, uint, 'b>>()\n+    .collect::<Vec<'a, usize, 'b>>()\n     //~^ ERROR lifetime parameters must be declared prior to type parameters\n }"}, {"sha": "72803ea9ad188b977e172880f324f8d55d35e252", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #1448 and #1386\n \n-fn foo(a: uint) -> uint { a }\n+fn foo(a: usize) -> usize { a }\n \n fn main() {\n     println!(\"{}\", foo(10i)); //~ ERROR mismatched types"}, {"sha": "2228b6d37799de44b226fbea051e69fc969b7aa1", "filename": "src/test/compile-fail/issue-15260.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    a: uint,\n+    a: usize,\n }\n \n fn main() {"}, {"sha": "1b1b03023839dbf045c01e27f8e73fb861dd18e3", "filename": "src/test/compile-fail/issue-15783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn foo(params: Option<&[&str]>) -> uint {\n+pub fn foo(params: Option<&[&str]>) -> usize {\n     params.unwrap().first().unwrap().len()\n }\n "}, {"sha": "c4373ba3351575d09b5c2252f30b136c950098e9", "filename": "src/test/compile-fail/issue-15896.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     enum R { REB(()) }\n-    struct Tau { t: uint }\n+    struct Tau { t: usize }\n     enum E { B(R, Tau) }\n \n     let e = E::B(R::REB(()), Tau { t: 3 });"}, {"sha": "a6b73dcc19ceacb7e15e615ebbf163e15e337dd0", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n mod Y {\n-    type X = uint;\n+    type X = usize;\n     extern {\n-        static x: *const uint;\n+        static x: *const usize;\n     }\n     fn foo(value: *const X) -> *const X {\n         value"}, {"sha": "a400263a243277738eaa620491fa325de4231163", "filename": "src/test/compile-fail/issue-16562.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,11 +15,11 @@ struct Col<D, C> {\n     col: C,\n }\n \n-trait Collection { fn len(&self) -> uint; }\n+trait Collection { fn len(&self) -> usize; }\n \n-impl<T, M: MatrixShape> Collection for Col<M, uint> {\n+impl<T, M: MatrixShape> Collection for Col<M, usize> {\n //~^ ERROR type parameter `T` is not constrained\n-    fn len(&self) -> uint {\n+    fn len(&self) -> usize {\n         unimplemented!()\n     }\n }"}, {"sha": "814b885e3aafc5c81f85e1b107076758fd50f19d", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@ trait ListItem<'a> {\n     fn list_name() -> &'a str;\n }\n \n-trait Collection { fn len(&self) -> uint; }\n+trait Collection { fn len(&self) -> usize; }\n \n struct List<'a, T: ListItem<'a>> {\n //~^ ERROR the parameter type `T` may not live long enough\n@@ -22,7 +22,7 @@ struct List<'a, T: ListItem<'a>> {\n }\n \n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n-    fn len(&self) -> uint {\n+    fn len(&self) -> usize {\n         0\n     }\n }"}, {"sha": "2e9ef8d6077843815bc32fc2416bc5f316ccd7f4", "filename": "src/test/compile-fail/issue-17252.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: uint = FOO; //~ ERROR recursive constant\n+static FOO: usize = FOO; //~ ERROR recursive constant\n \n fn main() {\n     let _x: [u8; FOO]; // caused stack overflow prior to fix\n-    let _y: uint = 1 + {\n-        static BAR: uint = BAR; //~ ERROR recursive constant\n+    let _y: usize = 1 + {\n+        static BAR: usize = BAR; //~ ERROR recursive constant\n         let _z: [u8; BAR]; // caused stack overflow prior to fix\n         1\n     };"}, {"sha": "9f76feeaf0465312be247012bc2b26d66a431345", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n // within assignments in if expressions.\n \n struct Foo {\n-    foo: uint\n+    foo: usize\n }\n \n fn main() {"}, {"sha": "d9fd67f9197dddf18ce08e60df35a1843f678c89", "filename": "src/test/compile-fail/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17458.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static X: uint = 0 as *const uint as uint;\n+static X: usize = 0 as *const usize as usize;\n //~^ ERROR: can not cast a pointer to an integer in a constant expression\n \n fn main() {"}, {"sha": "d33c12668f28867e28f5d0469450f407ea80dbd1", "filename": "src/test/compile-fail/issue-17718-borrow-interior.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct S { a: uint }\n+struct S { a: usize }\n static A: S  = S { a: 3 };\n-static B: &'static uint = &A.a;\n+static B: &'static usize = &A.a;\n //~^ ERROR: cannot refer to the interior of another static\n-static C: &'static uint = &(A.a);\n+static C: &'static usize = &(A.a);\n //~^ ERROR: cannot refer to the interior of another static\n \n-static D: [uint; 1] = [1];\n-static E: uint = D[0];\n+static D: [usize; 1] = [1];\n+static E: usize = D[0];\n //~^ ERROR: cannot refer to other statics by value\n-static F: &'static uint = &D[0];\n+static F: &'static usize = &D[0];\n //~^ ERROR: cannot refer to the interior of another static\n \n fn main() {}"}, {"sha": "daa250d12f52e469fdc1f32d4cd85f9a3c7821c5", "filename": "src/test/compile-fail/issue-17718-const-bad-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const C1: &'static mut [uint] = &mut [];\n+const C1: &'static mut [usize] = &mut [];\n //~^ ERROR: constants are not allowed to have mutable references\n \n-static mut S: uint = 3;\n-const C2: &'static mut uint = &mut S;\n+static mut S: usize = 3;\n+const C2: &'static mut usize = &mut S;\n //~^ ERROR: constants cannot refer to other statics\n //~^^ ERROR: are not allowed to have mutable references\n "}, {"sha": "dfa5bca8ccdb657b153f2235d798157d7ec2c416", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,13 +10,13 @@\n \n use std::cell::UnsafeCell;\n \n-const A: UnsafeCell<uint> = UnsafeCell { value: 1 };\n-const B: &'static UnsafeCell<uint> = &A;\n+const A: UnsafeCell<usize> = UnsafeCell { value: 1 };\n+const B: &'static UnsafeCell<usize> = &A;\n //~^ ERROR: cannot borrow a constant which contains interior mutability\n \n-struct C { a: UnsafeCell<uint> }\n+struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell { value: 1 } };\n-const E: &'static UnsafeCell<uint> = &D.a;\n+const E: &'static UnsafeCell<usize> = &D.a;\n //~^ ERROR: cannot borrow a constant which contains interior mutability\n const F: &'static C = &D;\n //~^ ERROR: cannot borrow a constant which contains interior mutability"}, {"sha": "5177ebbc1882f6144802348bb3947374250bbf40", "filename": "src/test/compile-fail/issue-17718-const-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n const\n mut //~ ERROR: const globals cannot be mutable\n //~^ HELP did you mean to declare a static?\n-FOO: uint = 3;\n+FOO: usize = 3;\n \n fn main() {\n }"}, {"sha": "a9af30a3ff03db38ad4de825081c1754b1df4bac", "filename": "src/test/compile-fail/issue-17718-const-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -20,7 +20,7 @@ use other::{\n };\n \n mod a {\n-    const B: uint = 3;\n+    const B: usize = 3;\n }\n \n fn main() {}"}, {"sha": "db56d2c6cf3c66a67579c1eaa3e0fb6d8c65f853", "filename": "src/test/compile-fail/issue-17718-constants-not-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const FOO: uint = 3;\n+const FOO: usize = 3;\n \n-fn foo() -> &'static uint { &FOO }\n+fn foo() -> &'static usize { &FOO }\n //~^ ERROR: borrowed value does not live long enough\n \n fn main() {"}, {"sha": "ab95606da4445661c8a2d19fc420b17c395492e1", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A1: uint = 1;\n-static mut A2: uint = 1;\n-const A3: uint = 1;\n+static A1: usize = 1;\n+static mut A2: usize = 1;\n+const A3: usize = 1;\n \n fn main() {\n     match 1u {"}, {"sha": "9959b0c6fc523f7689db17490ff4186c0500cd80", "filename": "src/test/compile-fail/issue-17718-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: uint = B; //~ ERROR: recursive constant\n-const B: uint = A; //~ ERROR: recursive constant\n+const A: usize = B; //~ ERROR: recursive constant\n+const B: usize = A; //~ ERROR: recursive constant\n \n fn main() {}"}, {"sha": "9d8b116f56982ef3d7fa38f3c7b27a7ebf9f8827", "filename": "src/test/compile-fail/issue-17718-references.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,21 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Struct { a: uint }\n+struct Struct { a: usize }\n \n-const C: uint = 1;\n-static S: uint = 1;\n+const C: usize = 1;\n+static S: usize = 1;\n \n-const T1: &'static uint = &C;\n-const T2: &'static uint = &S; //~ ERROR: constants cannot refer to other statics\n-static T3: &'static uint = &C;\n-static T4: &'static uint = &S;\n+const T1: &'static usize = &C;\n+const T2: &'static usize = &S; //~ ERROR: constants cannot refer to other statics\n+static T3: &'static usize = &C;\n+static T4: &'static usize = &S;\n \n-const T5: uint = C;\n-const T6: uint = S; //~ ERROR: constants cannot refer to other statics\n+const T5: usize = C;\n+const T6: usize = S; //~ ERROR: constants cannot refer to other statics\n //~^ cannot refer to other statics\n-static T7: uint = C;\n-static T8: uint = S; //~ ERROR: cannot refer to other statics by value\n+static T7: usize = C;\n+static T8: usize = S; //~ ERROR: cannot refer to other statics by value\n \n const T9: Struct = Struct { a: C };\n const T10: Struct = Struct { a: S }; //~ ERROR: cannot refer to other statics by value"}, {"sha": "394a9cc69bee7d28126821544a892c4e930d3017", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n struct Foo { marker: marker::NoSync }\n \n-static FOO: uint = 3;\n+static FOO: usize = 3;\n static BAR: Foo = Foo { marker: marker::NoSync };\n //~^ ERROR: the trait `core::marker::Sync` is not implemented\n "}, {"sha": "1a490245cfc4d1b9d289b4abdd96837c5d3f6939", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static X: uint = 1u;\n+pub static X: usize = 1u;\n \n fn main() {\n     match 1u {"}, {"sha": "dd9626f74eccffa02aa50f060daa4447579b8c11", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Foo {\n-    Variant { x: uint }\n+    Variant { x: usize }\n }\n \n fn main() {"}, {"sha": "efc1ba1635c952e413135b031a268625ea92c631", "filename": "src/test/compile-fail/issue-18294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18294.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     const X: u32 = 1;\n-    const Y: uint = &X as *const u32 as uint; //~ ERROR E0018\n+    const Y: usize = &X as *const u32 as usize; //~ ERROR E0018\n     println!(\"{}\", Y);\n }"}, {"sha": "17dc59dbc8d7dacc78dfd2e9906f683706546929", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,19 +10,19 @@\n \n use std::ops::Deref;\n \n-struct MyPtr<'a>(&'a mut uint);\n+struct MyPtr<'a>(&'a mut usize);\n impl<'a> Deref for MyPtr<'a> {\n-    type Target = uint;\n+    type Target = usize;\n \n-    fn deref<'b>(&'b self) -> &'b uint { self.0 }\n+    fn deref<'b>(&'b self) -> &'b usize { self.0 }\n }\n \n trait Tr {\n-    fn poke(&self, s: &mut uint);\n+    fn poke(&self, s: &mut usize);\n }\n \n-impl Tr for uint {\n-    fn poke(&self, s: &mut uint)  {\n+impl Tr for usize {\n+    fn poke(&self, s: &mut usize)  {\n         *s = 2;\n     }\n }"}, {"sha": "0850705aee6cb1529f9dd323c6ab961e49a686d5", "filename": "src/test/compile-fail/issue-19244-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const TUP: (uint,) = (42,);\n+const TUP: (usize,) = (42,);\n \n fn main() {\n     let a: [isize; TUP.1];"}, {"sha": "93a3fc87eb0107198dd7f55571b281816f568024", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct MyStruct { field: uint }\n+struct MyStruct { field: usize }\n const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {"}, {"sha": "8180ce52bdbc1ace9efa8f34d40d695799b9da09", "filename": "src/test/compile-fail/issue-2111.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(a: Option<uint>, b: Option<uint>) {\n+fn foo(a: Option<usize>, b: Option<usize>) {\n   match (a,b) {\n   //~^ ERROR: non-exhaustive patterns: `(None, None)` not covered\n     (Some(a), Some(b)) if a == b => { }"}, {"sha": "5ebc445bace2621f5e8ed5177d8e84efb85093ef", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n-fn fail_len(v: Vec<isize> ) -> uint {\n+fn fail_len(v: Vec<isize> ) -> usize {\n     let mut i = 3;\n     panic!();\n     for x in v.iter() { i += 1u; }"}, {"sha": "f0ae0eb59f532f768622a6f249f078161b039992", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -30,7 +30,7 @@ impl MaybeDog {\n }\n \n impl Groom for cat {\n-  fn shave(&self, other: uint) {\n+  fn shave(&self, other: usize) {\n     whiskers -= other;\n     //~^ ERROR: unresolved name `whiskers`. Did you mean `self.whiskers`?\n     shave(4);\n@@ -75,7 +75,7 @@ impl cat {\n     //~^ ERROR: unresolved name `whiskers`. Did you mean `self.whiskers`?\n   }\n \n-  pub fn grow_older(other:uint) {\n+  pub fn grow_older(other:usize) {\n     whiskers = 4;\n     //~^ ERROR: unresolved name `whiskers`. Did you mean `self.whiskers`?\n     purr_louder();"}, {"sha": "73532cb768ad8eafb0014b002dd9bd4a846b7906", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[derive(PartialEq)]\n-struct thing(uint);\n+struct thing(usize);\n impl PartialOrd for thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n     fn le(&self, other: &thing) -> bool { true }\n     fn ge(&self, other: &thing) -> bool { true }"}, {"sha": "ad818cf9f83169983baff87dafeee32c33307797", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Obj {\n-    member: uint\n+    member: usize\n }\n \n impl Obj {"}, {"sha": "b4bc7ecdc5f89693cb35bb449882fdc9693bb247", "filename": "src/test/compile-fail/issue-4265.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-      baz: uint\n+      baz: usize\n }\n \n impl Foo {"}, {"sha": "b37b8e237edda12eadef63d2e68acdf2313df46b", "filename": "src/test/compile-fail/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,5 +10,5 @@\n \n // Regression test for issue #4935\n \n-fn foo(a: uint) {}\n+fn foo(a: usize) {}\n fn main() { foo(5, 6) } //~ ERROR this function takes 1 parameter but 2 parameters were supplied"}, {"sha": "96bad3a6a44551115c3a3fa0554aabb13b6966fa", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Either<T, U> { Left(T), Right(U) }\n-struct S(Either<uint, uint>);\n+struct S(Either<usize, usize>);\n \n fn main() {\n     match S(Either::Left(5)) {"}, {"sha": "7e5809cdee0b05c39b67954f9049cb422b8c3185", "filename": "src/test/compile-fail/issue-5500-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct TrieMapIterator<'a> {\n-    node: &'a uint\n+    node: &'a usize\n }\n \n fn main() {"}, {"sha": "9424ff22dc75ce971e9e68fdf571a7f12441ad0e", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,16 +14,16 @@\n \n #![feature(box_syntax)]\n \n-fn twice(x: Box<uint>) -> uint {\n+fn twice(x: Box<usize>) -> usize {\n      *x * 2\n }\n \n-fn invoke<F>(f: F) where F: FnOnce() -> uint {\n+fn invoke<F>(f: F) where F: FnOnce() -> usize {\n      f();\n }\n \n fn main() {\n-      let x  : Box<uint>  = box 9;\n+      let x  : Box<usize>  = box 9;\n       let sq =  |:| { *x * *x };\n \n       twice(x); //~ ERROR: cannot move out of"}, {"sha": "0cc5898adfca1145833470e5b2a23f13be81d5db", "filename": "src/test/compile-fail/issue-6991.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-6991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-6991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6991.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static x: &'static uint = &1;\n-static y: uint = *x;\n+static x: &'static usize = &1;\n+static y: usize = *x;\n //~^ ERROR cannot refer to other statics by value,\n //         use the address-of operator or a constant instead\n fn main() {}"}, {"sha": "9541899b46913386b0f9983340c9d39d696246c8", "filename": "src/test/compile-fail/issue-7607-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n // ignore-tidy-linelength\n \n pub mod a {\n-    pub struct Foo { a: uint }\n+    pub struct Foo { a: usize }\n }\n \n pub mod b {"}, {"sha": "b1204e828900c80b3288236f8e3bd686910a915f", "filename": "src/test/compile-fail/issue-9957.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,5 +11,5 @@\n pub extern crate core; //~ ERROR: `pub` visibility is not allowed\n \n fn main() {\n-    pub use std::uint; //~ ERROR: imports in functions are never reachable\n+    pub use std::usize; //~ ERROR: imports in functions are never reachable\n }"}, {"sha": "172587dc1e4aa0289896e163f27f492afd27358c", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n \n use std::rc::Rc;\n \n-fn foo(_x: Rc<uint>) {}\n+fn foo(_x: Rc<usize>) {}\n \n fn bar<F:FnOnce() + Send>(_: F) { }\n "}, {"sha": "fac518c7635692822d1e0e8746d3a8613663baea", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,15 +14,15 @@ use std::iter::{Range,range};\n \n trait Itble<'r, T, I: Iterator<Item=T>> { fn iter(&'r self) -> I; }\n \n-impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n-    fn iter(&'r self) -> Range<uint> {\n+impl<'r> Itble<'r, usize, Range<usize>> for (usize, usize) {\n+    fn iter(&'r self) -> Range<usize> {\n         let &(min, max) = self;\n         range(min, max)\n     }\n }\n \n-fn check<'r, I: Iterator<Item=uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<Item = uint>, T: Itble<'r, uint, I>>(cont: &'r T)\n+fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<Item = usize>, T: Itble<'r, usize, I>>(cont: &'r T)\n     let cont_iter = cont.iter(); //~ ERROR: cannot infer\n     let result = cont_iter.fold(Some(0u16), |state, val| {\n         state.map_or(None, |mask| {"}, {"sha": "801f9dfd1cf3bc2fe0a56d6df4894c6f8554b64f", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,9 +14,9 @@ extern crate libc;\n \n extern {\n     pub fn bare_type1(size: isize); //~ ERROR: found rust type\n-    pub fn bare_type2(size: uint); //~ ERROR: found rust type\n+    pub fn bare_type2(size: usize); //~ ERROR: found rust type\n     pub fn ptr_type1(size: *const isize); //~ ERROR: found rust type\n-    pub fn ptr_type2(size: *const uint); //~ ERROR: found rust type\n+    pub fn ptr_type2(size: *const usize); //~ ERROR: found rust type\n \n     pub fn good1(size: *const libc::c_int);\n     pub fn good2(size: *const libc::c_uint);"}, {"sha": "bc2e0940f447106c236b5b157898d81fdfe944d2", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -17,12 +17,12 @@ extern crate libc;\n use std::num::Int;\n \n struct Foo {\n-    x: uint,\n+    x: usize,\n     b: bool, //~ ERROR: struct field is never used\n     marker: std::marker::NoCopy\n }\n \n-fn field_read(f: Foo) -> uint {\n+fn field_read(f: Foo) -> usize {\n     f.x.pow(2)\n }\n \n@@ -43,7 +43,7 @@ fn field_match_in_patterns(b: XYZ) -> String {\n }\n \n struct Bar {\n-    x: uint, //~ ERROR: struct field is never used\n+    x: usize, //~ ERROR: struct field is never used\n     b: bool,\n     _guard: ()\n }"}, {"sha": "3d8d5b407fdf4fea8e6a746659376e33da32cc64", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -57,6 +57,6 @@ fn main() {\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1i << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u << std::uint::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}, {"sha": "4320b3e7441524479972fcc6c7bbeb819feb027c", "filename": "src/test/compile-fail/lint-raw-ptr-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -28,7 +28,7 @@ enum Baz {\n #[derive(Clone)]\n struct Buzz {\n     x: (*const isize, //~ ERROR use of `#[derive]` with a raw pointer\n-        *const uint) //~ ERROR use of `#[derive]` with a raw pointer\n+        *const usize) //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n fn main() {}"}, {"sha": "c8469fb7f8cf306e2e094be3016a87118e79e03c", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -174,7 +174,7 @@ mod inheritance {\n         let _ = Experimental::ExperimentalVariant; //~ ERROR use of experimental item\n         let _ = Experimental::StableVariant;\n \n-        let x: uint = 0;\n+        let x: usize = 0;\n         x.experimental(); //~ ERROR use of experimental item\n         x.stable();\n     }"}, {"sha": "c9d34d40479cfa4c961a1b8995896ef112a955d3", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -28,6 +28,6 @@ use rand::isaac::IsaacRng;\n use other::*;\n \n fn main() {\n-    let x: collecs::vec::Vec<uint> = Vec::new();\n+    let x: collecs::vec::Vec<usize> = Vec::new();\n     let y = foo();\n }"}, {"sha": "a6d7c587c7bd5e0a6e9d6a0f11149e70dddd5c8c", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -44,7 +44,7 @@ mod test {\n \n mod foo {\n     pub struct Point{pub x: isize, pub y: isize}\n-    pub struct Square{pub p: Point, pub h: uint, pub w: uint}\n+    pub struct Square{pub p: Point, pub h: usize, pub w: usize}\n }\n \n mod bar {"}, {"sha": "9317e465a7a07933c3d0f70c7f0a8e612ede5227", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -17,15 +17,15 @@ use std::io::File;\n use std::io::IoError;\n \n struct Something {\n-    X: uint //~ ERROR structure field `X` should have a snake case name such as `x`\n+    X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n }\n \n-fn test(Xx: uint) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n+fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n     println!(\"{}\", Xx);\n }\n \n fn main() {\n-    let Test: uint = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n+    let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n     println!(\"{}\", Test);\n \n     let mut f = File::open(&Path::new(\"something.txt\"));"}, {"sha": "c612a0233659134e55a4f2b88dd5dd80347dbf4f", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that a function with a ! annotation always actually fails\n \n-fn bad_bang(i: uint) -> ! { //~ ERROR computation may converge in a function marked as diverging\n+fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n     println!(\"{}\", 3i);\n }\n "}, {"sha": "e63ddf6c7fd9b6ff210acf15b07cfecfcf459221", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,8 +10,8 @@\n \n fn main() {\n     enum color {\n-        rgb(uint, uint, uint),\n-        cmyk(uint, uint, uint, uint),\n+        rgb(usize, usize, usize),\n+        cmyk(usize, usize, usize, usize),\n         no_color,\n     }\n "}, {"sha": "8426ecdaf995e3366c69fbd0550548b313726efb", "filename": "src/test/compile-fail/match-pattern-field-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,8 +10,8 @@\n \n fn main() {\n     enum color {\n-        rgb(uint, uint, uint),\n-        cmyk(uint, uint, uint, uint),\n+        rgb(usize, usize, usize),\n+        cmyk(usize, usize, usize, usize),\n         no_color,\n     }\n "}, {"sha": "c6d45f1c9db8a665e5381ac6ed4d2c00c2a1e5c2", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ trait foo {\n     fn foo(&self) -> isize;\n }\n \n-impl foo for Vec<uint> {\n+impl foo for Vec<usize> {\n     fn foo(&self) -> isize {1}\n }\n \n@@ -39,7 +39,7 @@ fn m2() {\n     let mut x = Vec::new();\n \n     // ...but we still resolved `foo()` to the trait and hence know the return type.\n-    let y: uint = x.foo(); //~ ERROR mismatched types\n+    let y: usize = x.foo(); //~ ERROR mismatched types\n }\n \n fn main() { }"}, {"sha": "91d1e73e232ab684b5183267edfdd93fa9ac2c14", "filename": "src/test/compile-fail/method-ambig-two-traits-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,8 +15,8 @@\n extern crate ambig_impl_2_lib;\n use ambig_impl_2_lib::me;\n trait me2 {\n-    fn me(&self) -> uint;\n+    fn me(&self) -> usize;\n }\n-impl me2 for uint { fn me(&self) -> uint { *self } }\n+impl me2 for usize { fn me(&self) -> usize { *self } }\n fn main() { 1u.me(); } //~ ERROR E0034\n "}, {"sha": "dc5f1023b9964ba2dd81234f83baac2008655123", "filename": "src/test/compile-fail/method-ambig-two-traits-with-default-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,8 +15,8 @@\n trait Foo { fn method(&self) {} }\n trait Bar { fn method(&self) {} }\n \n-impl Foo for uint {}\n-impl Bar for uint {}\n+impl Foo for usize {}\n+impl Bar for usize {}\n \n fn main() {\n     1u.method(); //~ ERROR E0034"}, {"sha": "d0eeebd02f8091aa0d4636fc741581a8f51d3e12", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -34,7 +34,7 @@ pub fn test_move_array_into_recv(a: [D; 3], recv: &mut [D; 3]) {\n }\n \n #[rustc_move_fragments]\n-pub fn test_extract_array_elem(a: [D; 3], i: uint) -> D {\n+pub fn test_extract_array_elem(a: [D; 3], i: usize) -> D {\n     //~^ ERROR                 parent_of_fragments: `$(local a)`\n     //~| ERROR                  assigned_leaf_path: `$(local i)`\n     //~| ERROR                     moved_leaf_path: `$(local a).[]`\n@@ -43,7 +43,7 @@ pub fn test_extract_array_elem(a: [D; 3], i: uint) -> D {\n }\n \n #[rustc_move_fragments]\n-pub fn test_overwrite_array_elem(mut a: [D; 3], i: uint, d: D) {\n+pub fn test_overwrite_array_elem(mut a: [D; 3], i: usize, d: D) {\n     //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n     //~| ERROR                  assigned_leaf_path: `$(local i)`\n     //~| ERROR                  assigned_leaf_path: `$(local d)`\n@@ -59,7 +59,7 @@ pub fn test_overwrite_array_elem(mut a: [D; 3], i: uint, d: D) {\n // See RFC PR 320 for more discussion.\n \n #[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem1(mut a: [D; 3], i: uint, recv: &mut [D; 3], d: D) {\n+pub fn test_move_array_then_overwrite_elem1(mut a: [D; 3], i: usize, recv: &mut [D; 3], d: D) {\n     //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n     //~| ERROR                 parent_of_fragments: `$(local recv)`\n     //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n@@ -76,7 +76,7 @@ pub fn test_move_array_then_overwrite_elem1(mut a: [D; 3], i: uint, recv: &mut [\n }\n \n #[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem2(mut a: [D; 3], i: uint, j: uint,\n+pub fn test_move_array_then_overwrite_elem2(mut a: [D; 3], i: usize, j: usize,\n                                             recv: &mut [D; 3], d1: D, d2: D) {\n     //~^^ ERROR                parent_of_fragments: `$(local mut a)`\n     //~| ERROR                 parent_of_fragments: `$(local recv)`"}, {"sha": "5dfe7f0c71f140dd01d6164b3b5e98acebbcd465", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(box_syntax)]\n \n-use std::uint;\n+use std::usize;\n \n-fn test(_x: Box<uint>) {}\n+fn test(_x: Box<usize>) {}\n \n fn main() {\n     let i = box 3;"}, {"sha": "708affe30f34a1352eb9943905791a9c54329c6c", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n \n   how_hungry : isize,\n }\n@@ -21,7 +21,7 @@ impl cat {\n \n }\n \n-fn cat(in_x : uint, in_y : isize) -> cat {\n+fn cat(in_x : usize, in_y : isize) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y"}, {"sha": "15046c4c51be0575dd24bc176fc508490a5bc6b4", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n   how_hungry : isize,\n }\n \n-fn cat(in_x : uint, in_y : isize) -> cat {\n+fn cat(in_x : usize, in_y : isize) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y"}, {"sha": "0212adff305d0d53e2df9a4253ce1e2ad3154971", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,6 +11,6 @@\n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n-    [State::ST_NULL; (State::ST_WHITESPACE as uint)];\n+    [State::ST_NULL; (State::ST_WHITESPACE as usize)];\n     //~^ ERROR expected constant integer for repeat count, found non-constant expression\n }"}, {"sha": "26528543b435a253fa7f00f0ce4c478733c7a7eb", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -11,7 +11,7 @@\n // Check that non constant exprs fail for vector repeat syntax\n \n fn main() {\n-    fn bar(n: uint) {\n+    fn bar(n: usize) {\n         let _x = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n     }\n }"}, {"sha": "7442900c9b778594bdec880cbf50e758e56e20bf", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n \n struct Foo {\n     first: bool,\n-    second: Option<[uint; 4]>\n+    second: Option<[usize; 4]>\n }\n \n enum Color {"}, {"sha": "f845d1e6344ec409c375104e9d33d2591d39d280", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern: mismatched types\n \n-enum blah { a(isize, isize, uint), b(isize, isize), }\n+enum blah { a(isize, isize, usize), b(isize, isize), }\n \n fn main() { match blah::a(1, 1, 2u) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "b80dd0b36ed52d77ada87770af76dd7486bafe43", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -20,13 +20,13 @@ use std::mem;\n #[repr(packed)]\n struct Foo {\n     bar: u8,\n-    baz: uint\n+    baz: usize\n }\n \n #[derive(Show)]\n struct Oof {\n     rab: u8,\n-    zab: uint\n+    zab: usize\n }\n \n fn main() {"}, {"sha": "526e4c1618721461c2fd48c1a1a60e740ebd91a7", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo(uint);\n+struct foo(usize);\n \n fn main() {\n     let (foo, _) = (2, 3); //~ ERROR declaration of `foo` shadows"}, {"sha": "cc0b74dc82a5b24eb57e5a6f30ae0fd29b84f668", "filename": "src/test/compile-fail/prim-with-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,7 +15,7 @@ let x: i8<isize>; //~ ERROR type parameters are not allowed on this type\n let x: i16<isize>; //~ ERROR type parameters are not allowed on this type\n let x: i32<isize>; //~ ERROR type parameters are not allowed on this type\n let x: i64<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: uint<isize>; //~ ERROR type parameters are not allowed on this type\n+let x: usize<isize>; //~ ERROR type parameters are not allowed on this type\n let x: u8<isize>; //~ ERROR type parameters are not allowed on this type\n let x: u16<isize>; //~ ERROR type parameters are not allowed on this type\n let x: u32<isize>; //~ ERROR type parameters are not allowed on this type\n@@ -27,7 +27,7 @@ let x: i8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: i16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: i32<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: i64<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: uint<'static>; //~ ERROR lifetime parameters are not allowed on this type\n+let x: usize<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: u8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: u16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n let x: u32<'static>; //~ ERROR lifetime parameters are not allowed on this type"}, {"sha": "f897a2bc9f3aee4a045a92c6d534c13286ceab27", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n \n mod kitties {\n     pub struct cat {\n-        meows : uint,\n+        meows : usize,\n \n         how_hungry : isize,\n     }\n@@ -21,7 +21,7 @@ mod kitties {\n         fn nap(&self) {}\n     }\n \n-    pub fn cat(in_x : uint, in_y : isize) -> cat {\n+    pub fn cat(in_x : usize, in_y : isize) -> cat {\n         cat {\n             meows: in_x,\n             how_hungry: in_y"}, {"sha": "b98719e157ea62e76a0788f1cc09e84b3844085b", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n mod cat {\n     pub struct Cat {\n-        meows: uint\n+        meows: usize\n     }\n \n     pub fn new_cat() -> Cat {"}, {"sha": "6cd984c071a0c1d444d61e2b02634965bfc77231", "filename": "src/test/compile-fail/recursion_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -35,7 +35,7 @@ link! { K, L }\n link! { L, M }\n link! { M, N }\n \n-enum N { N(uint) }\n+enum N { N(usize) }\n \n fn is_send<T:Send>() { }\n "}, {"sha": "5b04fa3d87ca5e97c2492e2733a7e32e165d3471", "filename": "src/test/compile-fail/region-bound-on-closure-outlives-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn call_rec<F>(mut f: F) -> uint where F: FnMut(uint) -> uint {\n+fn call_rec<F>(mut f: F) -> usize where F: FnMut(usize) -> usize {\n     (|&mut: x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n }\n "}, {"sha": "6aeac1bd1b3763cd32684b01c22427597d3a54a4", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n struct dog {\n-    cats_chased: uint,\n+    cats_chased: usize,\n }\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let p: &'static mut uint = &mut self.cats_chased; //~ ERROR cannot infer\n+        let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n         *p += 1u;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n-        let p: &mut uint = &mut self.cats_chased;\n+        let p: &mut usize = &mut self.cats_chased;\n         *p += 1u;\n     }\n }"}, {"sha": "33898b2e782cb3b48ded2a043a78ccfa3a02e02b", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n+use std::usize;\n \n struct dog {\n-    food: uint,\n+    food: usize,\n }\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = |&:| {\n-            let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer\n+            let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n             *p = 3u;\n         };\n     }"}, {"sha": "2e7a4051ff221706523a9a67d5dfc89f047eff06", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum ast<'a> {\n-    num(uint),\n+    num(usize),\n     add(&'a ast<'a>, &'a ast<'a>)\n }\n \n@@ -20,14 +20,14 @@ fn build() {\n     compute(&z);\n }\n \n-fn compute(x: &ast) -> uint {\n+fn compute(x: &ast) -> usize {\n     match *x {\n       ast::num(x) => { x }\n       ast::add(x, y) => { compute(x) + compute(y) }\n     }\n }\n \n-fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(uint) -> uint {\n+fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n     match *x {\n       ast::num(x) => {\n         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough"}, {"sha": "4c8484540aabbb1248695fc550c75ac159ae0908", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum ast<'a> {\n-    num(uint),\n+    num(usize),\n     add(&'a ast<'a>, &'a ast<'a>)\n }\n "}, {"sha": "5dc9b370f32b5a361c7a87803da21410285c5345", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum ast<'a> {\n-    num(uint),\n+    num(usize),\n     add(&'a ast<'a>, &'a ast<'a>)\n }\n "}, {"sha": "22724081a1bcec374a1fc33a50c5650d198b6cb2", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,32 +12,32 @@\n // that appear in their parameter list.  See also\n // regions-free-region-ordering-caller.rs\n \n-fn ordering1<'a, 'b>(x: &'a &'b uint) -> &'a uint {\n+fn ordering1<'a, 'b>(x: &'a &'b usize) -> &'a usize {\n     // It is safe to assume that 'a <= 'b due to the type of x\n-    let y: &'b uint = &**x;\n+    let y: &'b usize = &**x;\n     return y;\n }\n \n-fn ordering2<'a, 'b>(x: &'a &'b uint, y: &'a uint) -> &'b uint {\n+fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n     // However, it is not safe to assume that 'b <= 'a\n     &*y //~ ERROR cannot infer\n }\n \n-fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n+fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n     // Do not infer an ordering from the return value.\n-    let z: &'b uint = &*x;\n+    let z: &'b usize = &*x;\n     //~^ ERROR cannot infer\n     panic!();\n }\n \n-fn ordering4<'a, 'b, F>(a: &'a uint, b: &'b uint, x: F) where F: FnOnce(&'a &'b uint) {\n+fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n     // Do not infer ordering from closure argument types.\n-    let z: Option<&'a &'b uint> = None;\n+    let z: Option<&'a &'b usize> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references\n }\n \n-fn ordering5<'a, 'b>(a: &'a uint, b: &'b uint, x: Option<&'a &'b uint>) {\n-    let z: Option<&'a &'b uint> = None;\n+fn ordering5<'a, 'b>(a: &'a usize, b: &'b usize, x: Option<&'a &'b usize>) {\n+    let z: Option<&'a &'b usize> = None;\n }\n \n fn main() {}"}, {"sha": "edca3b7ed41e4c9a1cb613e7552140b31ab80056", "filename": "src/test/compile-fail/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,21 +12,21 @@\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs\n \n-struct Paramd<'a> { x: &'a uint }\n+struct Paramd<'a> { x: &'a usize }\n \n-fn call2<'a, 'b>(a: &'a uint, b: &'b uint) {\n-    let z: Option<&'b &'a uint> = None;\n+fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+    let z: Option<&'b &'a usize> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references\n }\n \n-fn call3<'a, 'b>(a: &'a uint, b: &'b uint) {\n+fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n     let y: Paramd<'a> = Paramd { x: a };\n     let z: Option<&'b Paramd<'a>> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references\n }\n \n-fn call4<'a, 'b>(a: &'a uint, b: &'b uint) {\n-    let z: Option<&'a &'b uint> = None;\n+fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+    let z: Option<&'a &'b usize> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references\n }\n "}, {"sha": "b29518ccdabb537a35d1c7643af93b51e0fdd5de", "filename": "src/test/compile-fail/regions-free-region-ordering-caller1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,11 +12,11 @@\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs\n \n-fn call1<'a>(x: &'a uint) {\n+fn call1<'a>(x: &'a usize) {\n     // Test that creating a pointer like\n-    // &'a &'z uint requires that 'a <= 'z:\n-    let y: uint = 3;\n-    let z: &'a & uint = &(&y);\n+    // &'a &'z usize requires that 'a <= 'z:\n+    let y: usize = 3;\n+    let z: &'a & usize = &(&y);\n     //~^ ERROR borrowed value does not live long enough\n     //~^^ ERROR `y` does not live long enough\n }"}, {"sha": "f43d35c579e25721c22016b3d9ec878384a1a73f", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,8 +12,8 @@ mod argparse {\n     pub struct Flag<'a> {\n         name: &'a str,\n         desc: &'a str,\n-        max_count: uint,\n-        value: uint\n+        max_count: usize,\n+        value: usize\n     }\n \n     pub fn flag<'r>(name: &'r str, desc: &'r str) -> Flag<'r> {"}, {"sha": "613a90dda67c861eec1b207971299f539e1b9503", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,19 +12,19 @@\n // See also regions-undeclared.rs\n \n enum yes0<'lt> {\n-    X3(&'lt uint)\n+    X3(&'lt usize)\n }\n \n enum yes1<'a> {\n-    X4(&'a uint)\n+    X4(&'a usize)\n }\n \n enum no0 {\n-    X5(&'foo uint) //~ ERROR use of undeclared lifetime name `'foo`\n+    X5(&'foo usize) //~ ERROR use of undeclared lifetime name `'foo`\n }\n \n enum no1 {\n-    X6(&'a uint) //~ ERROR use of undeclared lifetime name `'a`\n+    X6(&'a usize) //~ ERROR use of undeclared lifetime name `'a`\n }\n \n fn main() {}"}, {"sha": "c231d3a913e0cf21729587b622e1abda54e7d613", "filename": "src/test/compile-fail/regions-in-structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n struct yes1<'a> {\n-  x: &'a uint,\n+  x: &'a usize,\n }\n \n struct yes2<'a> {\n-  x: &'a uint,\n+  x: &'a usize,\n }\n \n struct StructDecl {"}, {"sha": "d5ef9f3a9642e7412d9883d5e50db552e9cfcf45", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-struct ctxt { v: uint }\n+struct ctxt { v: usize }\n \n trait get_ctxt {\n     // Here the `&` is bound in the method definition:\n@@ -29,7 +29,7 @@ impl<'a> get_ctxt for has_ctxt<'a> {\n \n }\n \n-fn get_v(gc: Box<get_ctxt>) -> uint {\n+fn get_v(gc: Box<get_ctxt>) -> usize {\n     gc.get_ctxt().v\n }\n "}, {"sha": "0f298492e612ebce4117b013ef2b2d0a5f096cf4", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -13,7 +13,7 @@\n // Test that you cannot escape a reference\n // into a trait.\n \n-struct ctxt { v: uint }\n+struct ctxt { v: usize }\n \n trait get_ctxt {\n     fn get_ctxt(&self) -> &'a ctxt;"}, {"sha": "8943abb49ae93d6bf1a24e0e4805588b31cbc5d8", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -22,19 +22,19 @@\n // except according to those terms.\n \n trait get_ctxt<'a> {\n-    fn get_ctxt(self) -> &'a uint;\n+    fn get_ctxt(self) -> &'a usize;\n }\n \n fn make_gc1(gc: @get_ctxt<'a>) -> @get_ctxt<'b>  {\n     return gc; //~ ERROR mismatched types: expected `@get_ctxt/&b`, found `@get_ctxt/&a`\n }\n \n struct Foo {\n-    r: &'a uint\n+    r: &'a usize\n }\n \n impl get_ctxt for Foo<'a> {\n-    fn get_ctxt(&self) -> &'a uint { self.r }\n+    fn get_ctxt(&self) -> &'a usize { self.r }\n }\n \n fn make_gc2<'a,'b>(foo: Foo<'a>) -> @get_ctxt<'b>  {"}, {"sha": "c1affeca8d955724723e6d57ce0be65acc83c3aa", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -21,6 +21,6 @@ fn main() {\n     let x = *&x; //~ ERROR: cannot move out of dereference\n     let x = ATOMIC_UINT_INIT;\n     let x = *&x; //~ ERROR: cannot move out of dereference\n-    let x: AtomicPtr<uint> = AtomicPtr::new(ptr::null_mut());\n+    let x: AtomicPtr<usize> = AtomicPtr::new(ptr::null_mut());\n     let x = *&x; //~ ERROR: cannot move out of dereference\n }"}, {"sha": "4b65292340fa1cc29e34d9963be01fcfe706be0e", "filename": "src/test/compile-fail/struct-pat-derived-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct a {\n-    b: uint,\n-    c: uint\n+    b: usize,\n+    c: usize\n }\n \n impl a {"}, {"sha": "99e98b24b63c3a1dca1e1579bca180b7c12edff8", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,6 +12,6 @@\n \n fn f() -> isize { return g(); }\n \n-fn g() -> uint { return 0u; }\n+fn g() -> usize { return 0u; }\n \n fn main() { let y = f(); }"}, {"sha": "1e5422a798e33fedb1d199765c5f4699fc2e31e8", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -15,7 +15,7 @@ struct foo {\n \n struct bar {\n     a: isize,\n-    b: uint,\n+    b: usize,\n }\n \n fn want_foo(f: foo) {}"}, {"sha": "479f21ea3a1604e7dc6eebab24a86624c16dc9c6", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -20,7 +20,7 @@ fn main() {\n         x: 3i\n     };\n \n-    let baz: Foo<uint> = panic!();\n+    let baz: Foo<usize> = panic!();\n     //~^ ERROR not implemented\n }\n "}, {"sha": "d5369817e9ac189aac608c37d2d47255866bc023", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,7 +14,7 @@ struct Foo<T:Trait> {\n     x: T,\n }\n \n-static X: Foo<uint> = Foo {\n+static X: Foo<usize> = Foo {\n //~^ ERROR not implemented\n     x: 1,\n };"}, {"sha": "ded75aa1d85e4e52b4dfdcc0ec9668ec1dd16af3", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,7 +14,7 @@ extern crate trait_bounds_on_structs_and_enums_xc;\n \n use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n-fn explode(x: Foo<uint>) {}\n+fn explode(x: Foo<usize>) {}\n //~^ ERROR not implemented\n \n fn kaboom(y: Bar<f32>) {}"}, {"sha": "490ee0e8ad6f3fcae09e62e057a9b958a500a8b8", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -17,7 +17,7 @@ struct Foo<T:Trait> {\n enum Bar<T:Trait> {\n     ABar(isize),\n     BBar(T),\n-    CBar(uint),\n+    CBar(usize),\n }\n \n fn explode(x: Foo<u32>) {}\n@@ -38,7 +38,7 @@ struct Baz {\n \n enum Boo {\n //~^ ERROR not implemented\n-    Quux(Bar<uint>),\n+    Quux(Bar<usize>),\n }\n \n struct Badness<U> {\n@@ -57,7 +57,7 @@ trait PolyTrait<T> {\n \n struct Struct;\n \n-impl PolyTrait<Foo<uint>> for Struct {\n+impl PolyTrait<Foo<usize>> for Struct {\n //~^ ERROR not implemented\n     fn whatever() {}\n }"}, {"sha": "647dd4e05faf595d42c678a275dfb8eb237d2fc5", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait foo {\n-    fn bar(&self, x: uint) -> Self;\n+    fn bar(&self, x: usize) -> Self;\n }\n impl foo for isize {\n     fn bar(&self) -> isize {"}, {"sha": "4e2eb22421354d2d2ced3bb3a31c85859a7fa12e", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,12 +10,12 @@\n \n \n trait Mumbo {\n-    fn jumbo(&self, x: &uint) -> uint;\n+    fn jumbo(&self, x: &usize) -> usize;\n }\n \n-impl Mumbo for uint {\n+impl Mumbo for usize {\n     // Cannot have a larger effect than the trait:\n-    unsafe fn jumbo(&self, x: &uint) { *self + *x; }\n+    unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n     //~^ ERROR expected normal fn, found unsafe fn\n }\n "}, {"sha": "583d0421d1eb1636a75a9ba8ac706bcb13983da6", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,7 +12,7 @@\n \n trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n impl bar for isize { fn dup(&self) -> isize { *self } fn blah<X>(&self) {} }\n-impl bar for uint { fn dup(&self) -> uint { *self } fn blah<X>(&self) {} }\n+impl bar for usize { fn dup(&self) -> usize { *self } fn blah<X>(&self) {} }\n \n fn main() {\n     10i.dup::<isize>(); //~ ERROR does not take type parameters"}, {"sha": "d53e353d9d928381925e8a84b3f5a5f3da3c5bdb", "filename": "src/test/compile-fail/trait-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -10,6 +10,6 @@\n \n trait foo { fn foo(&self); }\n \n-impl isize for uint { fn foo(&self) {} } //~ ERROR trait\n+impl isize for usize { fn foo(&self) {} } //~ ERROR trait\n \n fn main() {}"}, {"sha": "f655844e2f36ffa350256437769b9ed0bf7537b0", "filename": "src/test/compile-fail/traits-multidispatch-bad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,9 +14,9 @@ trait Convert<Target> {\n     fn convert(&self) -> Target;\n }\n \n-impl Convert<uint> for isize {\n-    fn convert(&self) -> uint {\n-        *self as uint\n+impl Convert<usize> for isize {\n+    fn convert(&self) -> usize {\n+        *self as usize\n     }\n }\n "}, {"sha": "aa4ecad6393726f749ccc36e2871d095989b76a1", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -31,7 +31,7 @@ static TEST5: (_, _) = (1, 2);\n fn test6(_: _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-fn test7(x: _) { let _x: uint = x; }\n+fn test7(x: _) { let _x: usize = x; }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test8(_f: fn() -> _) { }\n@@ -84,7 +84,7 @@ pub fn main() {\n     fn fn_test6(_: _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-    fn fn_test7(x: _) { let _x: uint = x; }\n+    fn fn_test7(x: _) { let _x: usize = x; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test8(_f: fn() -> _) { }"}, {"sha": "8178335de5931a21d590311714e36a5bb6a65fbf", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,6 +16,6 @@ struct Foo<'a, T:'a> {\n }\n \n pub fn main() {\n-    let c: Foo<_, uint> = Foo { r: &5 };\n+    let c: Foo<_, usize> = Foo { r: &5 };\n     //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "6c323e8c1ae506ad1485bce8197add550336ea15", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -28,7 +28,7 @@ impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize { //~ ERROR mismatched self type\n         x\n     }\n-    fn bar(self: &Bar<uint>, x: isize) -> isize {   //~ ERROR mismatched self type\n+    fn bar(self: &Bar<usize>, x: isize) -> isize {   //~ ERROR mismatched self type\n         x\n     }\n }"}, {"sha": "3848f07a08970c05a55e231242d01790913a5e38", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -14,7 +14,7 @@\n // environment cannot mutate captured variables that have not been\n // declared mutable (#18335)\n \n-fn set(x: &mut uint) { *x = 0; }\n+fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n     let x = 0u;"}, {"sha": "9dff0e9e01e34676adcfc41c2f92f24f17730b90", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -28,21 +28,21 @@ fn test<'a,'b>() {\n     // No errors expected:\n     eq::< Foo<(),()>,                   Foo()                         >();\n     eq::< Foo<(isize,),()>,               Foo(isize)                      >();\n-    eq::< Foo<(isize,uint),()>,           Foo(isize,uint)                 >();\n-    eq::< Foo<(isize,uint),uint>,         Foo(isize,uint) -> uint         >();\n-    eq::< Foo<(&'a isize,&'b uint),uint>, Foo(&'a isize,&'b uint) -> uint >();\n+    eq::< Foo<(isize,usize),()>,           Foo(isize,usize)                 >();\n+    eq::< Foo<(isize,usize),usize>,         Foo(isize,usize) -> usize         >();\n+    eq::< Foo<(&'a isize,&'b usize),usize>, Foo(&'a isize,&'b usize) -> usize >();\n \n     // Test that anonymous regions in `()` form are equivalent\n     // to fresh bound regions, and that we can intermingle\n     // named and anonymous as we choose:\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y uint),uint>,\n-          for<'x,'y> Foo(&'x isize,&'y uint) -> uint            >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y uint),uint>,\n-          for<'x> Foo(&'x isize,&uint) -> uint                  >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y uint),uint>,\n-          for<'y> Foo(&isize,&'y uint) -> uint                  >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y uint),uint>,\n-          Foo(&isize,&uint) -> uint                             >();\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+          for<'x,'y> Foo(&'x isize,&'y usize) -> usize            >();\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+          for<'x> Foo(&'x isize,&usize) -> usize                  >();\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+          for<'y> Foo(&isize,&'y usize) -> usize                  >();\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+          Foo(&isize,&usize) -> usize                             >();\n \n     // lifetime elision\n     eq::< for<'x> Foo<(&'x isize,), &'x isize>,"}, {"sha": "29429c708d25501244ea5adba785b26e92376993", "filename": "src/test/compile-fail/unboxed-closure-sugar-lifetime-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -30,5 +30,5 @@ fn main() {\n     eq::< for<'a> Foo<(&'a isize,), (&'a isize, &'a isize)>,\n           Foo(&isize) -> (&isize, &isize)                           >();\n \n-    let _: Foo(&isize, &uint) -> &uint; //~ ERROR missing lifetime specifier\n+    let _: Foo(&isize, &usize) -> &usize; //~ ERROR missing lifetime specifier\n }"}, {"sha": "d86f55d53685ab6ed01d9721633c38a1756bfdc1", "filename": "src/test/compile-fail/unboxed-closure-sugar-used-on-struct-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -19,7 +19,7 @@ impl<A,B> Bar<A,B> {\n }\n \n fn bar() {\n-    let b = Box::Bar::<isize,uint>::new(); // OK\n+    let b = Box::Bar::<isize,usize>::new(); // OK\n \n     let b = Box::Bar::()::new();\n     //~^ ERROR expected ident, found `(`"}, {"sha": "95673a513190b77f6bf0d87aba2522217a48b4a1", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -17,7 +17,7 @@ fn call_it<F:FnMut<(isize,isize),isize>>(y: isize, mut f: F) -> isize {\n }\n \n pub fn main() {\n-    let f = |&mut: x: uint, y: isize| -> isize { (x as isize) + y };\n+    let f = |&mut: x: usize, y: isize| -> isize { (x as isize) + y };\n     let z = call_it(3, f);  //~ ERROR type mismatch\n     println!(\"{}\", z);\n }"}, {"sha": "c277e63aba9fef8f62ad45b06aed5979f3ebba74", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -12,6 +12,6 @@\n \n #![feature(box_syntax)]\n \n-enum foo { a(Box<foo>, isize), b(uint), }\n+enum foo { a(Box<foo>, isize), b(usize), }\n \n fn main() { match foo::b(1u) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "dc10f795cd4229df96e75cb1f5c6fb69c8f1bc31", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -21,11 +21,11 @@ struct S2<X: ?Sized> {\n }\n struct S3 {\n     f: str, //~ ERROR `core::marker::Sized` is not implemented\n-    g: [uint]\n+    g: [usize]\n }\n struct S4 {\n     f: str, //~ ERROR `core::marker::Sized` is not implemented\n-    g: uint\n+    g: usize\n }\n enum E<X: ?Sized> {\n     V1(X, isize), //~ERROR `core::marker::Sized` is not implemented"}, {"sha": "a5471e87f220403b242351530204b04e9557e7f9", "filename": "src/test/compile-fail/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -16,7 +16,7 @@ fn foo<\n >() {}\n \n struct X {\n-    \u03b4: uint //~ ERROR non-ascii idents are not fully supported\n+    \u03b4: usize //~ ERROR non-ascii idents are not fully supported\n }\n \n pub fn main() {"}, {"sha": "1d519c978a35c4211ffe91dc1ec1429841545aeb", "filename": "src/test/compile-fail/variadic-ffi-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-2.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn baz(f: extern \"stdcall\" fn(uint, ...)) {\n+fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n     //~^ ERROR: variadic function must have C calling convention\n     f(22, 44);\n }"}, {"sha": "6db11fcffd2275669e45bf531a4fccf42567fb1c", "filename": "src/test/compile-fail/wrong-ret-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fwrong-ret-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f961e2ccf056965fd7a95c44ce0922a865ae8d/src%2Ftest%2Fcompile-fail%2Fwrong-ret-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-ret-type.rs?ref=85f961e2ccf056965fd7a95c44ce0922a865ae8d", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern: mismatched types\n-fn mk_int() -> uint { let i: isize = 3; return i; }\n+fn mk_int() -> usize { let i: isize = 3; return i; }\n fn main() { }"}]}