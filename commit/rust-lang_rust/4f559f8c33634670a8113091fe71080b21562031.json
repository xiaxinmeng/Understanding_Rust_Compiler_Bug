{"sha": "4f559f8c33634670a8113091fe71080b21562031", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTU5ZjhjMzM2MzQ2NzBhODExMzA5MWZlNzEwODBiMjE1NjIwMzE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-04T12:32:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-28T00:55:21Z"}, "message": "rustc_typeck: force users of RegionScope to get anon_region's one by one.", "tree": {"sha": "20cb90300fe610f6de392953c5281223b38d9fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cb90300fe610f6de392953c5281223b38d9fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f559f8c33634670a8113091fe71080b21562031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f559f8c33634670a8113091fe71080b21562031", "html_url": "https://github.com/rust-lang/rust/commit/4f559f8c33634670a8113091fe71080b21562031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f559f8c33634670a8113091fe71080b21562031/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154c202afb256c379b7d454ec0244da69eaa2ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/154c202afb256c379b7d454ec0244da69eaa2ced", "html_url": "https://github.com/rust-lang/rust/commit/154c202afb256c379b7d454ec0244da69eaa2ced"}], "stats": {"total": 113, "additions": 39, "deletions": 74}, "files": [{"sha": "166178d6c29c1ef9c66258ffcda0d97b9b7e67ff", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4f559f8c33634670a8113091fe71080b21562031", "patch": "@@ -306,9 +306,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 ast_region_to_region(self.tcx(), lifetime)\n             }\n \n-            None => self.tcx().mk_region(match rscope.anon_regions(default_span, 1) {\n-                Ok(rs) => rs[0],\n-                Err(params) => {\n+            None => {\n+                self.tcx().mk_region(rscope.anon_region(default_span).unwrap_or_else(|params| {\n                     let ampersand_span = Span { hi: default_span.lo, ..default_span};\n \n                     let mut err = struct_span_err!(self.tcx().sess, ampersand_span, E0106,\n@@ -320,8 +319,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     }\n                     err.emit();\n                     ty::ReStatic\n-                }\n-            })\n+                }))\n+            }\n         };\n \n         debug!(\"opt_ast_region_to_region(opt_lifetime={:?}) yields {:?}\",\n@@ -412,8 +411,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let regions = if expected_num_region_params == supplied_num_region_params {\n             lifetimes.iter().map(|l| *ast_region_to_region(tcx, l)).collect()\n         } else {\n-            let anon_regions =\n-                rscope.anon_regions(span, expected_num_region_params);\n+            let anon_regions = (0..expected_num_region_params).map(|_| {\n+                rscope.anon_region(span)\n+            }).collect::<Result<Vec<_>, _>>();\n \n             if supplied_num_region_params != 0 || anon_regions.is_err() {\n                 report_lifetime_number_error(tcx, span,"}, {"sha": "1e76267f32c3811148aaf565f690da082bc5276b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f559f8c33634670a8113091fe71080b21562031", "patch": "@@ -1466,11 +1466,9 @@ impl<'a, 'gcx, 'tcx> RegionScope for FnCtxt<'a, 'gcx, 'tcx> {\n         *self.next_region_var(infer::MiscVariable(span))\n     }\n \n-    fn anon_regions(&self, span: Span, count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n-        Ok((0..count).map(|_| {\n-            *self.next_region_var(infer::MiscVariable(span))\n-        }).collect())\n+    fn anon_region(&self, span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>> {\n+        Ok(*self.next_region_var(infer::MiscVariable(span)))\n     }\n }\n "}, {"sha": "839eb8be9ace8c093ccaa115e4a174acab0e0fc4", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 29, "deletions": 62, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f559f8c33634670a8113091fe71080b21562031/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=4f559f8c33634670a8113091fe71080b21562031", "patch": "@@ -33,18 +33,16 @@ pub type ElidedLifetime = Result<ty::Region, Option<Vec<ElisionFailureInfo>>>;\n /// Defines strategies for handling regions that are omitted.  For\n /// example, if one writes the type `&Foo`, then the lifetime of\n /// this reference has been omitted. When converting this\n-/// type, the generic functions in astconv will invoke `anon_regions`\n+/// type, the generic functions in astconv will invoke `anon_region`\n /// on the provided region-scope to decide how to translate this\n /// omitted region.\n ///\n-/// It is not always legal to omit regions, therefore `anon_regions`\n+/// It is not always legal to omit regions, therefore `anon_region`\n /// can return `Err(())` to indicate that this is not a scope in which\n /// regions can legally be omitted.\n pub trait RegionScope {\n-    fn anon_regions(&self,\n-                    span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>;\n+    fn anon_region(&self, span: Span)\n+                    -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>>;\n \n     /// If an object omits any explicit lifetime bound, and none can\n     /// be derived from the object traits, what should we use? If\n@@ -117,11 +115,9 @@ impl<R: RegionScope> RegionScope for MaybeWithAnonTypes<R> {\n         self.base_scope.object_lifetime_default(span)\n     }\n \n-    fn anon_regions(&self,\n-                    span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n-        self.base_scope.anon_regions(span, count)\n+    fn anon_region(&self, span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>> {\n+        self.base_scope.anon_region(span)\n     }\n \n     fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n@@ -139,10 +135,8 @@ impl<R: RegionScope> RegionScope for MaybeWithAnonTypes<R> {\n pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {\n-    fn anon_regions(&self,\n-                    _span: Span,\n-                    _count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n+    fn anon_region(&self, _span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>> {\n         Err(None)\n     }\n \n@@ -165,12 +159,9 @@ impl UnelidableRscope {\n }\n \n impl RegionScope for UnelidableRscope {\n-    fn anon_regions(&self,\n-                    _span: Span,\n-                    _count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n-        let UnelidableRscope(ref v) = *self;\n-        Err(v.clone())\n+    fn anon_region(&self, _span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>> {\n+        Err(self.0.clone())\n     }\n \n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n@@ -208,12 +199,10 @@ impl RegionScope for ElidableRscope {\n         ty::ReStatic\n     }\n \n-    fn anon_regions(&self,\n-                    _span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>\n+    fn anon_region(&self, _span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>>\n     {\n-        Ok(vec![self.default; count])\n+        Ok(self.default)\n     }\n }\n \n@@ -232,10 +221,8 @@ impl<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> StaticRscope<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> RegionScope for StaticRscope<'a, 'gcx, 'tcx> {\n-    fn anon_regions(&self,\n-                    span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n+    fn anon_region(&self, span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>> {\n         if !self.tcx.sess.features.borrow().static_in_const {\n             self.tcx\n                 .sess\n@@ -244,7 +231,7 @@ impl<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> RegionScope for StaticRscope<'a, 'gcx, 'tcx>\n                                  `static_in_const` feature, see #35897\")\n                 .emit();\n         }\n-        Ok(vec![ty::ReStatic; count])\n+        Ok(ty::ReStatic)\n     }\n \n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n@@ -268,12 +255,6 @@ impl BindingRscope {\n             anon_bindings: Cell::new(0),\n         }\n     }\n-\n-    fn next_region(&self) -> ty::Region {\n-        let idx = self.anon_bindings.get();\n-        self.anon_bindings.set(idx + 1);\n-        ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrAnon(idx))\n-    }\n }\n \n impl RegionScope for BindingRscope {\n@@ -288,12 +269,12 @@ impl RegionScope for BindingRscope {\n         ty::ReStatic\n     }\n \n-    fn anon_regions(&self,\n-                    _: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>\n+    fn anon_region(&self, _: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>>\n     {\n-        Ok((0..count).map(|_| self.next_region()).collect())\n+        let idx = self.anon_bindings.get();\n+        self.anon_bindings.set(idx + 1);\n+        Ok(ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrAnon(idx)))\n     }\n }\n \n@@ -334,12 +315,10 @@ impl<'r> RegionScope for ObjectLifetimeDefaultRscope<'r> {\n         self.base_scope.base_object_lifetime_default(span)\n     }\n \n-    fn anon_regions(&self,\n-                    span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>\n+    fn anon_region(&self, span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>>\n     {\n-        self.base_scope.anon_regions(span, count)\n+        self.base_scope.anon_region(span)\n     }\n \n     fn anon_type_scope(&self) -> Option<AnonTypeScope> {\n@@ -369,22 +348,10 @@ impl<'r> RegionScope for ShiftedRscope<'r> {\n         ty::fold::shift_region(self.base_scope.base_object_lifetime_default(span), 1)\n     }\n \n-    fn anon_regions(&self,\n-                    span: Span,\n-                    count: usize)\n-                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>\n+    fn anon_region(&self, span: Span)\n+                   -> Result<ty::Region, Option<Vec<ElisionFailureInfo>>>\n     {\n-        match self.base_scope.anon_regions(span, count) {\n-            Ok(mut v) => {\n-                for r in &mut v {\n-                    *r = ty::fold::shift_region(*r, 1);\n-                }\n-                Ok(v)\n-            }\n-            Err(errs) => {\n-                Err(errs)\n-            }\n-        }\n+        self.base_scope.anon_region(span).map(|r| ty::fold::shift_region(r, 1))\n     }\n \n     fn anon_type_scope(&self) -> Option<AnonTypeScope> {"}]}