{"sha": "ddc28298b9133e6a9cc39e276f9feff51d808949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYzI4Mjk4YjkxMzNlNmE5Y2MzOWUyNzZmOWZlZmY1MWQ4MDg5NDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T13:11:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T13:11:29Z"}, "message": "Auto merge of #27365 - pcwalton:more-collections, r=aturon\n\nThis was showing up in Servo profiles.\r\n\r\nr? @aturon", "tree": {"sha": "6b374cc9cc0cb488cf307f1ded36e2929008ae65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b374cc9cc0cb488cf307f1ded36e2929008ae65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc28298b9133e6a9cc39e276f9feff51d808949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc28298b9133e6a9cc39e276f9feff51d808949", "html_url": "https://github.com/rust-lang/rust/commit/ddc28298b9133e6a9cc39e276f9feff51d808949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc28298b9133e6a9cc39e276f9feff51d808949/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78bf4b6ff68420a718e8b0ed6b3016d1cf395083", "url": "https://api.github.com/repos/rust-lang/rust/commits/78bf4b6ff68420a718e8b0ed6b3016d1cf395083", "html_url": "https://github.com/rust-lang/rust/commit/78bf4b6ff68420a718e8b0ed6b3016d1cf395083"}, {"sha": "3a12b4c4f805f66d223861d4be232112c2982a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a12b4c4f805f66d223861d4be232112c2982a0e", "html_url": "https://github.com/rust-lang/rust/commit/3a12b4c4f805f66d223861d4be232112c2982a0e"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "a9b66c8f418c8818587ad4972210652cfd460069", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddc28298b9133e6a9cc39e276f9feff51d808949/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc28298b9133e6a9cc39e276f9feff51d808949/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ddc28298b9133e6a9cc39e276f9feff51d808949", "patch": "@@ -425,6 +425,7 @@ impl str {\n                  since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n+    #[inline]\n     pub fn width(&self, is_cjk: bool) -> usize {\n         UnicodeStr::width(self, is_cjk)\n     }\n@@ -459,6 +460,7 @@ impl str {\n                          with the existence of the char_indices iterator or \\\n                          this method may want to be replaced with checked \\\n                          slicing\")]\n+    #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n         core_str::StrExt::is_char_boundary(self, index)\n     }\n@@ -514,6 +516,7 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         core_str::StrExt::slice_unchecked(self, begin, end)\n     }\n@@ -522,6 +525,7 @@ impl str {\n     ///\n     /// Same as `slice_unchecked`, but works with `&mut str` instead of `&str`.\n     #[unstable(feature = \"str_slice_mut\", reason = \"recently added\")]\n+    #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         core_str::StrExt::slice_mut_unchecked(self, begin, end)\n     }\n@@ -556,6 +560,7 @@ impl str {\n     #[deprecated(since = \"1.3.0\",\n                  reason = \"can be implemented with char_indices and \\\n                            hasn't seen enough use to justify inclusion\")]\n+    #[inline]\n     pub fn slice_chars(&self, begin: usize, end: usize) -> &str {\n         core_str::StrExt::slice_chars(self, begin, end)\n     }\n@@ -608,6 +613,7 @@ impl str {\n                reason = \"often replaced by char_indices, this method may \\\n                          be removed in favor of just char_at() or eventually \\\n                          removed altogether\")]\n+    #[inline]\n     pub fn char_range_at(&self, start: usize) -> CharRange {\n         core_str::StrExt::char_range_at(self, start)\n     }\n@@ -665,6 +671,7 @@ impl str {\n                reason = \"often replaced by char_indices, this method may \\\n                          be removed in favor of just char_at_reverse() or \\\n                          eventually removed altogether\")]\n+    #[inline]\n     pub fn char_range_at_reverse(&self, start: usize) -> CharRange {\n         core_str::StrExt::char_range_at_reverse(self, start)\n     }\n@@ -691,6 +698,7 @@ impl str {\n                          future; it is normally replaced by chars/char_indices \\\n                          iterators or by getting the first char from a \\\n                          subslice\")]\n+    #[inline]\n     pub fn char_at(&self, i: usize) -> char {\n         core_str::StrExt::char_at(self, i)\n     }\n@@ -716,6 +724,7 @@ impl str {\n                reason = \"see char_at for more details, but reverse semantics \\\n                          are also somewhat unclear, especially with which \\\n                          cases generate panics\")]\n+    #[inline]\n     pub fn char_at_reverse(&self, i: usize) -> char {\n         core_str::StrExt::char_at_reverse(self, i)\n     }\n@@ -749,6 +758,7 @@ impl str {\n                reason = \"awaiting conventions about shifting and slices and \\\n                          may not be warranted with the existence of the chars \\\n                          and/or char_indices iterators\")]\n+    #[inline]\n     pub fn slice_shift_char(&self) -> Option<(char, &str)> {\n         core_str::StrExt::slice_shift_char(self)\n     }\n@@ -810,6 +820,7 @@ impl str {\n     ///     '\\u{1f1e8}', '\\u{1f1ed}', ' ', '\ud55c']);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn chars(&self) -> Chars {\n         core_str::StrExt::chars(self)\n     }\n@@ -825,6 +836,7 @@ impl str {\n     /// assert_eq!(v, b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn char_indices(&self) -> CharIndices {\n         core_str::StrExt::char_indices(self)\n     }\n@@ -839,6 +851,7 @@ impl str {\n     /// assert_eq!(v, b\"bors\".to_vec());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn bytes(&self) -> Bytes {\n         core_str::StrExt::bytes(self)\n     }\n@@ -855,6 +868,7 @@ impl str {\n     /// assert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     /// ```\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n+    #[inline]\n     pub fn split_whitespace(&self) -> SplitWhitespace {\n         UnicodeStr::split_whitespace(self)\n     }\n@@ -877,6 +891,7 @@ impl str {\n     #[unstable(feature = \"str_words\",\n                reason = \"the precise algorithm to use is unclear\")]\n     #[allow(deprecated)]\n+    #[inline]\n     pub fn words(&self) -> Words {\n         UnicodeStr::words(self)\n     }\n@@ -903,6 +918,7 @@ impl str {\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn lines(&self) -> Lines {\n         core_str::StrExt::lines(self)\n     }\n@@ -930,6 +946,7 @@ impl str {\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn lines_any(&self) -> LinesAny {\n         core_str::StrExt::lines_any(self)\n     }"}]}