{"sha": "4e14017f3d9e0379304dd8d34772786631310104", "node_id": "C_kwDOAAsO6NoAKDRlMTQwMTdmM2Q5ZTAzNzkzMDRkZDhkMzQ3NzI3ODY2MzEzMTAxMDQ", "commit": {"author": {"name": "Sean Stangl", "email": "sean.stangl@gmail.com", "date": "2022-04-03T21:20:00Z"}, "committer": {"name": "Sean Stangl", "email": "sean.stangl@gmail.com", "date": "2022-04-03T21:20:00Z"}, "message": "Standardize documentation for SIMD vector and mask types", "tree": {"sha": "1be31e3d9452a780c4c016fa49a881689fa5a7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be31e3d9452a780c4c016fa49a881689fa5a7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e14017f3d9e0379304dd8d34772786631310104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e14017f3d9e0379304dd8d34772786631310104", "html_url": "https://github.com/rust-lang/rust/commit/4e14017f3d9e0379304dd8d34772786631310104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e14017f3d9e0379304dd8d34772786631310104/comments", "author": {"login": "sstangl", "id": 171223, "node_id": "MDQ6VXNlcjE3MTIyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/171223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sstangl", "html_url": "https://github.com/sstangl", "followers_url": "https://api.github.com/users/sstangl/followers", "following_url": "https://api.github.com/users/sstangl/following{/other_user}", "gists_url": "https://api.github.com/users/sstangl/gists{/gist_id}", "starred_url": "https://api.github.com/users/sstangl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sstangl/subscriptions", "organizations_url": "https://api.github.com/users/sstangl/orgs", "repos_url": "https://api.github.com/users/sstangl/repos", "events_url": "https://api.github.com/users/sstangl/events{/privacy}", "received_events_url": "https://api.github.com/users/sstangl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sstangl", "id": 171223, "node_id": "MDQ6VXNlcjE3MTIyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/171223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sstangl", "html_url": "https://github.com/sstangl", "followers_url": "https://api.github.com/users/sstangl/followers", "following_url": "https://api.github.com/users/sstangl/following{/other_user}", "gists_url": "https://api.github.com/users/sstangl/gists{/gist_id}", "starred_url": "https://api.github.com/users/sstangl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sstangl/subscriptions", "organizations_url": "https://api.github.com/users/sstangl/orgs", "repos_url": "https://api.github.com/users/sstangl/repos", "events_url": "https://api.github.com/users/sstangl/events{/privacy}", "received_events_url": "https://api.github.com/users/sstangl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "html_url": "https://github.com/rust-lang/rust/commit/0711e11593e7d3ce7cffdb7bd966553e4a4f858f"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "a56a154b437c22ac77cd8260de812e06ac9e7d71", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=4e14017f3d9e0379304dd8d34772786631310104", "patch": "@@ -507,58 +507,58 @@ where\n     }\n }\n \n-/// Vector of eight 8-bit masks\n+/// A 64-bit SIMD vector mask for eight elements of 8 bits.\n pub type mask8x8 = Mask<i8, 8>;\n \n-/// Vector of 16 8-bit masks\n+/// A 128-bit SIMD vector mask for 16 elements of 8 bits.\n pub type mask8x16 = Mask<i8, 16>;\n \n-/// Vector of 32 8-bit masks\n+/// A 256-bit SIMD vector mask for 32 elements of 8 bits.\n pub type mask8x32 = Mask<i8, 32>;\n \n-/// Vector of 16 8-bit masks\n+/// A 512-bit SIMD vector mask for 64 elements of 8 bits.\n pub type mask8x64 = Mask<i8, 64>;\n \n-/// Vector of four 16-bit masks\n+/// A 64-bit SIMD vector mask for four elements of 16 bits.\n pub type mask16x4 = Mask<i16, 4>;\n \n-/// Vector of eight 16-bit masks\n+/// A 128-bit SIMD vector mask for eight elements of 16 bits.\n pub type mask16x8 = Mask<i16, 8>;\n \n-/// Vector of 16 16-bit masks\n+/// A 256-bit SIMD vector mask for 16 elements of 16 bits.\n pub type mask16x16 = Mask<i16, 16>;\n \n-/// Vector of 32 16-bit masks\n+/// A 512-bit SIMD vector mask for 32 elements of 16 bits.\n pub type mask16x32 = Mask<i16, 32>;\n \n-/// Vector of two 32-bit masks\n+/// A 64-bit SIMD vector mask for two elements of 32 bits.\n pub type mask32x2 = Mask<i32, 2>;\n \n-/// Vector of four 32-bit masks\n+/// A 128-bit SIMD vector mask for four elements of 32 bits.\n pub type mask32x4 = Mask<i32, 4>;\n \n-/// Vector of eight 32-bit masks\n+/// A 256-bit SIMD vector mask for eight elements of 32 bits.\n pub type mask32x8 = Mask<i32, 8>;\n \n-/// Vector of 16 32-bit masks\n+/// A 512-bit SIMD vector mask for 16 elements of 32 bits.\n pub type mask32x16 = Mask<i32, 16>;\n \n-/// Vector of two 64-bit masks\n+/// A 128-bit SIMD vector mask for two elements of 64 bits.\n pub type mask64x2 = Mask<i64, 2>;\n \n-/// Vector of four 64-bit masks\n+/// A 256-bit SIMD vector mask for four elements of 64 bits.\n pub type mask64x4 = Mask<i64, 4>;\n \n-/// Vector of eight 64-bit masks\n+/// A 512-bit SIMD vector mask for eight elements of 64 bits.\n pub type mask64x8 = Mask<i64, 8>;\n \n-/// Vector of two pointer-width masks\n+/// A SIMD vector mask for two elements of pointer width.\n pub type masksizex2 = Mask<isize, 2>;\n \n-/// Vector of four pointer-width masks\n+/// A SIMD vector mask for four elements of pointer width.\n pub type masksizex4 = Mask<isize, 4>;\n \n-/// Vector of eight pointer-width masks\n+/// A SIMD vector mask for eight elements of pointer width.\n pub type masksizex8 = Mask<isize, 8>;\n \n macro_rules! impl_from {"}, {"sha": "f7985b6471064c231182344d9e158d75277b062b", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=4e14017f3d9e0379304dd8d34772786631310104", "patch": "@@ -177,23 +177,23 @@ macro_rules! impl_float_vector {\n impl_float_vector! { f32, u32, i32 }\n impl_float_vector! { f64, u64, i64 }\n \n-/// Vector of two `f32` values\n+/// A 64-bit SIMD vector with two elements of type `f32`.\n pub type f32x2 = Simd<f32, 2>;\n \n-/// Vector of four `f32` values\n+/// A 128-bit SIMD vector with four elements of type `f32`.\n pub type f32x4 = Simd<f32, 4>;\n \n-/// Vector of eight `f32` values\n+/// A 256-bit SIMD vector with eight elements of type `f32`.\n pub type f32x8 = Simd<f32, 8>;\n \n-/// Vector of 16 `f32` values\n+/// A 512-bit SIMD vector with 16 elements of type `f32`.\n pub type f32x16 = Simd<f32, 16>;\n \n-/// Vector of two `f64` values\n+/// A 128-bit SIMD vector with two elements of type `f64`.\n pub type f64x2 = Simd<f64, 2>;\n \n-/// Vector of four `f64` values\n+/// A 256-bit SIMD vector with four elements of type `f64`.\n pub type f64x4 = Simd<f64, 4>;\n \n-/// Vector of eight `f64` values\n+/// A 512-bit SIMD vector with eight elements of type `f64`.\n pub type f64x8 = Simd<f64, 8>;"}, {"sha": "eec483212b3dd3e48e2881332c7595ee28630477", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=4e14017f3d9e0379304dd8d34772786631310104", "patch": "@@ -42,62 +42,62 @@ impl_integer_vector! { i32 }\n impl_integer_vector! { i64 }\n impl_integer_vector! { i8 }\n \n-/// Vector of two `isize` values\n+/// A SIMD vector with two elements of type `isize`.\n pub type isizex2 = Simd<isize, 2>;\n \n-/// Vector of four `isize` values\n+/// A SIMD vector with four elements of type `isize`.\n pub type isizex4 = Simd<isize, 4>;\n \n-/// Vector of eight `isize` values\n+/// A SIMD vector with eight elements of type `isize`.\n pub type isizex8 = Simd<isize, 8>;\n \n-/// Vector of two `i16` values\n+/// A 32-bit SIMD vector with two elements of type `i16`.\n pub type i16x2 = Simd<i16, 2>;\n \n-/// Vector of four `i16` values\n+/// A 64-bit SIMD vector with four elements of type `i16`.\n pub type i16x4 = Simd<i16, 4>;\n \n-/// Vector of eight `i16` values\n+/// A 128-bit SIMD vector with eight elements of type `i16`.\n pub type i16x8 = Simd<i16, 8>;\n \n-/// Vector of 16 `i16` values\n+/// A 256-bit SIMD vector with 16 elements of type `i16`.\n pub type i16x16 = Simd<i16, 16>;\n \n-/// Vector of 32 `i16` values\n+/// A 512-bit SIMD vector with 32 elements of type `i16`.\n pub type i16x32 = Simd<i16, 32>;\n \n-/// Vector of two `i32` values\n+/// A 64-bit SIMD vector with two elements of type `i32`.\n pub type i32x2 = Simd<i32, 2>;\n \n-/// Vector of four `i32` values\n+/// A 128-bit SIMD vector with four elements of type `i32`.\n pub type i32x4 = Simd<i32, 4>;\n \n-/// Vector of eight `i32` values\n+/// A 256-bit SIMD vector with eight elements of type `i32`.\n pub type i32x8 = Simd<i32, 8>;\n \n-/// Vector of 16 `i32` values\n+/// A 512-bit SIMD vector with 16 elements of type `i32`.\n pub type i32x16 = Simd<i32, 16>;\n \n-/// Vector of two `i64` values\n+/// A 128-bit SIMD vector with two elements of type `i64`.\n pub type i64x2 = Simd<i64, 2>;\n \n-/// Vector of four `i64` values\n+/// A 256-bit SIMD vector with four elements of type `i64`.\n pub type i64x4 = Simd<i64, 4>;\n \n-/// Vector of eight `i64` values\n+/// A 512-bit SIMD vector with eight elements of type `i64`.\n pub type i64x8 = Simd<i64, 8>;\n \n-/// Vector of four `i8` values\n+/// A 32-bit SIMD vector with four elements of type `i8`.\n pub type i8x4 = Simd<i8, 4>;\n \n-/// Vector of eight `i8` values\n+/// A 64-bit SIMD vector with eight elements of type `i8`.\n pub type i8x8 = Simd<i8, 8>;\n \n-/// Vector of 16 `i8` values\n+/// A 128-bit SIMD vector with 16 elements of type `i8`.\n pub type i8x16 = Simd<i8, 16>;\n \n-/// Vector of 32 `i8` values\n+/// A 256-bit SIMD vector with 32 elements of type `i8`.\n pub type i8x32 = Simd<i8, 32>;\n \n-/// Vector of 64 `i8` values\n+/// A 512-bit SIMD vector with 64 elements of type `i8`.\n pub type i8x64 = Simd<i8, 64>;"}, {"sha": "b4a69c44363f1d5a0d9297ccc06504f1ea65ac78", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e14017f3d9e0379304dd8d34772786631310104/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=4e14017f3d9e0379304dd8d34772786631310104", "patch": "@@ -2,62 +2,62 @@\n \n use crate::simd::Simd;\n \n-/// Vector of two `usize` values\n+/// A SIMD vector with two elements of type `usize`.\n pub type usizex2 = Simd<usize, 2>;\n \n-/// Vector of four `usize` values\n+/// A SIMD vector with four elements of type `usize`.\n pub type usizex4 = Simd<usize, 4>;\n \n-/// Vector of eight `usize` values\n+/// A SIMD vector with eight elements of type `usize`.\n pub type usizex8 = Simd<usize, 8>;\n \n-/// Vector of two `u16` values\n+/// A 32-bit SIMD vector with two elements of type `u16`.\n pub type u16x2 = Simd<u16, 2>;\n \n-/// Vector of four `u16` values\n+/// A 64-bit SIMD vector with four elements of type `u16`.\n pub type u16x4 = Simd<u16, 4>;\n \n-/// Vector of eight `u16` values\n+/// A 128-bit SIMD vector with eight elements of type `u16`.\n pub type u16x8 = Simd<u16, 8>;\n \n-/// Vector of 16 `u16` values\n+/// A 256-bit SIMD vector with 16 elements of type `u16`.\n pub type u16x16 = Simd<u16, 16>;\n \n-/// Vector of 32 `u16` values\n+/// A 512-bit SIMD vector with 32 elements of type `u16`.\n pub type u16x32 = Simd<u16, 32>;\n \n-/// Vector of two `u32` values\n+/// A 64-bit SIMD vector with two elements of type `u32`.\n pub type u32x2 = Simd<u32, 2>;\n \n-/// Vector of four `u32` values\n+/// A 128-bit SIMD vector with four elements of type `u32`.\n pub type u32x4 = Simd<u32, 4>;\n \n-/// Vector of eight `u32` values\n+/// A 256-bit SIMD vector with eight elements of type `u32`.\n pub type u32x8 = Simd<u32, 8>;\n \n-/// Vector of 16 `u32` values\n+/// A 512-bit SIMD vector with 16 elements of type `u32`.\n pub type u32x16 = Simd<u32, 16>;\n \n-/// Vector of two `u64` values\n+/// A 128-bit SIMD vector with two elements of type `u64`.\n pub type u64x2 = Simd<u64, 2>;\n \n-/// Vector of four `u64` values\n+/// A 256-bit SIMD vector with four elements of type `u64`.\n pub type u64x4 = Simd<u64, 4>;\n \n-/// Vector of eight `u64` values\n+/// A 512-bit SIMD vector with eight elements of type `u64`.\n pub type u64x8 = Simd<u64, 8>;\n \n-/// Vector of four `u8` values\n+/// A 32-bit SIMD vector with four elements of type `u8`.\n pub type u8x4 = Simd<u8, 4>;\n \n-/// Vector of eight `u8` values\n+/// A 64-bit SIMD vector with eight elements of type `u8`.\n pub type u8x8 = Simd<u8, 8>;\n \n-/// Vector of 16 `u8` values\n+/// A 128-bit SIMD vector with 16 elements of type `u8`.\n pub type u8x16 = Simd<u8, 16>;\n \n-/// Vector of 32 `u8` values\n+/// A 256-bit SIMD vector with 32 elements of type `u8`.\n pub type u8x32 = Simd<u8, 32>;\n \n-/// Vector of 64 `u8` values\n+/// A 512-bit SIMD vector with 64 elements of type `u8`.\n pub type u8x64 = Simd<u8, 64>;"}]}