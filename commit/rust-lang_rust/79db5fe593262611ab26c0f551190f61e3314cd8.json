{"sha": "79db5fe593262611ab26c0f551190f61e3314cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGI1ZmU1OTMyNjI2MTFhYjI2YzBmNTUxMTkwZjYxZTMzMTRjZDg=", "commit": {"author": {"name": "memoryleak47", "email": "memoryleak47@protonmail.ch", "date": "2018-03-23T02:31:43Z"}, "committer": {"name": "memoryleak47", "email": "memoryleak47@protonmail.ch", "date": "2018-03-23T02:31:43Z"}, "message": "add --compare-mode option to compiletest", "tree": {"sha": "15f72a4d73d9569a734882ee77366e6570fc9882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f72a4d73d9569a734882ee77366e6570fc9882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79db5fe593262611ab26c0f551190f61e3314cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79db5fe593262611ab26c0f551190f61e3314cd8", "html_url": "https://github.com/rust-lang/rust/commit/79db5fe593262611ab26c0f551190f61e3314cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79db5fe593262611ab26c0f551190f61e3314cd8/comments", "author": {"login": "memoryleak47", "id": 5725430, "node_id": "MDQ6VXNlcjU3MjU0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5725430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryleak47", "html_url": "https://github.com/memoryleak47", "followers_url": "https://api.github.com/users/memoryleak47/followers", "following_url": "https://api.github.com/users/memoryleak47/following{/other_user}", "gists_url": "https://api.github.com/users/memoryleak47/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryleak47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryleak47/subscriptions", "organizations_url": "https://api.github.com/users/memoryleak47/orgs", "repos_url": "https://api.github.com/users/memoryleak47/repos", "events_url": "https://api.github.com/users/memoryleak47/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryleak47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryleak47", "id": 5725430, "node_id": "MDQ6VXNlcjU3MjU0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5725430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryleak47", "html_url": "https://github.com/memoryleak47", "followers_url": "https://api.github.com/users/memoryleak47/followers", "following_url": "https://api.github.com/users/memoryleak47/following{/other_user}", "gists_url": "https://api.github.com/users/memoryleak47/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryleak47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryleak47/subscriptions", "organizations_url": "https://api.github.com/users/memoryleak47/orgs", "repos_url": "https://api.github.com/users/memoryleak47/repos", "events_url": "https://api.github.com/users/memoryleak47/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryleak47/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b176285ba775f86301040fc624acb96b4499f562", "url": "https://api.github.com/repos/rust-lang/rust/commits/b176285ba775f86301040fc624acb96b4499f562", "html_url": "https://github.com/rust-lang/rust/commit/b176285ba775f86301040fc624acb96b4499f562"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "4a1c7b499538f14f0387d987b64eccec40343a0a", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=79db5fe593262611ab26c0f551190f61e3314cd8", "patch": "@@ -95,6 +95,19 @@ impl fmt::Display for Mode {\n     }\n }\n \n+#[derive(Clone)]\n+pub enum CompareMode {\n+    Nll\n+}\n+\n+impl CompareMode {\n+    fn to_str(&self) -> &'static str {\n+        match *self {\n+            CompareMode::Nll => \"nll\"\n+        }\n+    }\n+}\n+\n #[derive(Clone)]\n pub struct Config {\n     /// The library paths required for running the compiler\n@@ -210,6 +223,9 @@ pub struct Config {\n     /// where to find the remote test client process, if we're using it\n     pub remote_test_client: Option<PathBuf>,\n \n+    /// mode describing what file the actual ui output will be compared to\n+    pub compare_mode: Option<CompareMode>,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,\n@@ -230,12 +246,15 @@ pub struct TestPaths {\n }\n \n /// Used by `ui` tests to generate things like `foo.stderr` from `foo.rs`.\n-pub fn expected_output_path(testpaths: &TestPaths, revision: Option<&str>, kind: &str) -> PathBuf {\n+pub fn expected_output_path(testpaths: &TestPaths, revision: Option<&str>, compare_mode: &Option<CompareMode>, kind: &str) -> PathBuf {\n     assert!(UI_EXTENSIONS.contains(&kind));\n-    let extension = match revision {\n-        Some(r) => format!(\"{}.{}\", r, kind),\n-        None => kind.to_string(),\n-    };\n+    let mut parts = Vec::new();\n+\n+    if let Some(x) = revision { parts.push(x); }\n+    if let Some(ref x) = *compare_mode { parts.push(x.to_str()); }\n+    parts.push(kind);\n+\n+    let extension = parts.join(\".\");\n     testpaths.file.with_extension(extension)\n }\n "}, {"sha": "7c676fe939dff367b1a3b9b2ea958a4dcbea23c6", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=79db5fe593262611ab26c0f551190f61e3314cd8", "patch": "@@ -38,6 +38,7 @@ use getopts::Options;\n use common::{Config, TestPaths};\n use common::{DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n use common::{expected_output_path, UI_EXTENSIONS};\n+use common::CompareMode;\n use test::ColorConfig;\n use util::logv;\n \n@@ -227,6 +228,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"path to the remote test client\",\n             \"PATH\",\n         )\n+        .optopt(\n+            \"\",\n+            \"compare-mode\",\n+            \"mode describing what file the actual ui output will be compared to\",\n+            \"COMPARE MODE\"\n+        )\n         .optflag(\"h\", \"help\", \"show this message\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -320,6 +327,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         quiet: matches.opt_present(\"quiet\"),\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n+        compare_mode: matches.opt_str(\"compare-mode\").and_then(|x| if x == \"nll\" { Some(CompareMode::Nll) } else { panic!(\"Unknown compare-mode {}\", x) }),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n@@ -688,12 +696,12 @@ fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> boo\n     // UI test files.\n     for extension in UI_EXTENSIONS {\n         for revision in &props.revisions {\n-            let path = &expected_output_path(testpaths, Some(revision), extension);\n+            let path = &expected_output_path(testpaths, Some(revision), &config.compare_mode, extension);\n             inputs.push(mtime(path));\n         }\n \n         if props.revisions.is_empty() {\n-            let path = &expected_output_path(testpaths, None, extension);\n+            let path = &expected_output_path(testpaths, None, &config.compare_mode, extension);\n             inputs.push(mtime(path));\n         }\n     }"}, {"sha": "8caa52719008e1c58eefd8fa907582630461954a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79db5fe593262611ab26c0f551190f61e3314cd8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=79db5fe593262611ab26c0f551190f61e3314cd8", "patch": "@@ -13,6 +13,7 @@ use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{Incremental, MirOpt, RunMake, Ui};\n use common::{expected_output_path, UI_STDERR, UI_STDOUT};\n+use common::CompareMode;\n use diff;\n use errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n@@ -1681,6 +1682,13 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        match self.config.compare_mode {\n+            Some(CompareMode::Nll) => {\n+                rustc.args(&[\"-Znll\", \"-Zborrowck=mir\", \"-Ztwo-phase-borrows\"]);\n+            },\n+            None => {},\n+        }\n+\n         if self.props.force_host {\n             rustc.args(self.split_maybe_args(&self.config.host_rustcflags));\n         } else {\n@@ -2507,11 +2515,8 @@ impl<'test> TestCx<'test> {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n \n-        let expected_stderr_path = self.expected_output_path(UI_STDERR);\n-        let expected_stderr = self.load_expected_output(&expected_stderr_path);\n-\n-        let expected_stdout_path = self.expected_output_path(UI_STDOUT);\n-        let expected_stdout = self.load_expected_output(&expected_stdout_path);\n+        let expected_stderr = self.load_expected_output(UI_STDERR);\n+        let expected_stdout = self.load_expected_output(UI_STDOUT);\n \n         let normalized_stdout =\n             self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n@@ -2797,19 +2802,31 @@ impl<'test> TestCx<'test> {\n         normalized\n     }\n \n-    fn expected_output_path(&self, kind: &str) -> PathBuf {\n-        expected_output_path(&self.testpaths, self.revision, kind)\n-    }\n+    fn expected_output_path(&self, kind: &str) -> Result<PathBuf, String> {\n+        let mut path = expected_output_path(&self.testpaths, self.revision, &self.config.compare_mode, kind);\n+        if !path.exists() && self.config.compare_mode.is_some() {\n+            // fallback!\n+            path = expected_output_path(&self.testpaths, self.revision, &None, kind);\n+        }\n \n-    fn load_expected_output(&self, path: &Path) -> String {\n-        if !path.exists() {\n-            return String::new();\n+        if path.exists() {\n+            Ok(path)\n+        } else {\n+            Err(String::from(\"no existing output_path found\"))\n         }\n+    }\n \n+    fn load_expected_output(&self, kind: &str) -> String {\n+        self.expected_output_path(kind)\n+            .and_then(|x| self.load_expected_output_from_path(&x))\n+            .unwrap_or_else(|x| self.fatal(&x))\n+    }\n+\n+    fn load_expected_output_from_path(&self, path: &Path) -> Result<String, String> {\n         let mut result = String::new();\n         match File::open(path).and_then(|mut f| f.read_to_string(&mut result)) {\n-            Ok(_) => result,\n-            Err(e) => self.fatal(&format!(\n+            Ok(_) => Ok(result),\n+            Err(e) => Err(format!(\n                 \"failed to load expected output from `{}`: {}\",\n                 path.display(),\n                 e"}]}