{"sha": "0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDU0Yjg1ZWYxZmRhZDNiYzRjMWM0ZTFhOTg5YjlmNjU0MGEwZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-19T02:02:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-19T15:03:18Z"}, "message": "Round 5 test fixes and rebase conflicts", "tree": {"sha": "b2973ab6fdb99ec1d3ff8fd930f29cf78da183f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2973ab6fdb99ec1d3ff8fd930f29cf78da183f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "html_url": "https://github.com/rust-lang/rust/commit/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb29c468f38ba93f624277c2c3a8e46a4d85e619", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb29c468f38ba93f624277c2c3a8e46a4d85e619", "html_url": "https://github.com/rust-lang/rust/commit/cb29c468f38ba93f624277c2c3a8e46a4d85e619"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "2e83334b93732378c960019def28bbef57e2ee77", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -158,7 +158,7 @@ pub trait Hasher {\n     #[inline]\n     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]\n     fn write_usize(&mut self, i: usize) {\n-        if cfg!(target_pointer_size = \"32\") {\n+        if cfg!(target_pointer_width = \"32\") {\n             self.write_u32(i as u32)\n         } else {\n             self.write_u64(i as u64)\n@@ -241,7 +241,7 @@ mod impls {\n                 #[inline]\n                 fn hash(&self, state: &mut S) {\n                     let a: [u8; ::$ty::BYTES] = unsafe {\n-                        mem::transmute((*self as $uty).to_le() as $ty)\n+                        mem::transmute(*self)\n                     };\n                     state.write(&a)\n                 }"}, {"sha": "c803cfbcb7d85db2b9a77b33955b1ebce56c67a8", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -104,7 +104,7 @@ struct EnvKey(CString);\n #[derive(Eq, Clone, Debug)]\n struct EnvKey(CString);\n \n-#[cfg(windows)]\n+#[cfg(all(windows, stage0))]\n impl<H: hash::Writer + hash::Hasher> hash::Hash<H> for EnvKey {\n     fn hash(&self, state: &mut H) {\n         let &EnvKey(ref x) = self;\n@@ -116,6 +116,18 @@ impl<H: hash::Writer + hash::Hasher> hash::Hash<H> for EnvKey {\n         }\n     }\n }\n+#[cfg(all(windows, not(stage0)))]\n+impl hash::Hash for EnvKey {\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        let &EnvKey(ref x) = self;\n+        match str::from_utf8(x.as_bytes()) {\n+            Ok(s) => for ch in s.chars() {\n+                (ch as u8 as char).to_lowercase().hash(state);\n+            },\n+            Err(..) => x.hash(state)\n+        }\n+    }\n+}\n \n #[cfg(windows)]\n impl PartialEq for EnvKey {"}, {"sha": "f181fc5df5759b557ae5f9099ff12fd6061754b7", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -561,10 +561,11 @@ pub fn get_exit_status() -> int {\n #[cfg(target_os = \"macos\")]\n unsafe fn load_argc_and_argv(argc: int,\n                              argv: *const *const c_char) -> Vec<Vec<u8>> {\n+    use ffi::CStr;\n     use iter::range;\n \n-    (0..argc as uint).map(|i| {\n-        ffi::c_str_to_bytes(&*argv.offset(i as int)).to_vec()\n+    (0..argc).map(|i| {\n+        CStr::from_ptr(*argv.offset(i)).to_bytes().to_vec()\n     }).collect()\n }\n "}, {"sha": "3d1ef3a2c37f7e8267dfb65d84f79ba4e0e55bc1", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -266,7 +266,7 @@ pub fn args() -> Args {\n         let (argc, argv) = (*_NSGetArgc() as isize,\n                             *_NSGetArgv() as *const *const c_char);\n         range(0, argc as isize).map(|i| {\n-            let bytes = CStr::from_ptr(&*argv.offset(i)).to_bytes().to_vec();\n+            let bytes = CStr::from_ptr(*argv.offset(i)).to_bytes().to_vec();\n             OsStringExt::from_vec(bytes)\n         }).collect::<Vec<_>>()\n     };"}, {"sha": "51cf30324233c772cfaa66185365640db174b275", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -25,7 +25,7 @@\n #![allow(dead_code)]\n \n use dynamic_lib::DynamicLibrary;\n-use ffi;\n+use ffi::CStr;\n use intrinsics;\n use old_io::{IoResult, Writer};\n use libc;\n@@ -362,7 +362,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n         if ret == libc::TRUE {\n             try!(write!(w, \" - \"));\n             let ptr = info.Name.as_ptr() as *const libc::c_char;\n-            let bytes = unsafe { ffi::c_str_to_bytes(&ptr) };\n+            let bytes = unsafe { CStr::from_ptr(ptr).to_bytes() };\n             match str::from_utf8(bytes) {\n                 Ok(s) => try!(demangle(w, s)),\n                 Err(..) => try!(w.write_all(&bytes[..bytes.len()-1])),"}, {"sha": "60d24e6174fd757a5cd949443ebc803ae1a6b61e", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -589,6 +589,7 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n     }\n }\n \n+#[cfg(stage0)]\n fn with_envp<K, V, T, F>(env: Option<&collections::HashMap<K, V>>, cb: F) -> T\n     where K: BytesContainer + Eq + Hash<Hasher>,\n           V: BytesContainer,\n@@ -616,6 +617,34 @@ fn with_envp<K, V, T, F>(env: Option<&collections::HashMap<K, V>>, cb: F) -> T\n         _ => cb(ptr::null_mut())\n     }\n }\n+#[cfg(not(stage0))]\n+fn with_envp<K, V, T, F>(env: Option<&collections::HashMap<K, V>>, cb: F) -> T\n+    where K: BytesContainer + Eq + Hash,\n+          V: BytesContainer,\n+          F: FnOnce(*mut c_void) -> T,\n+{\n+    // On Windows we pass an \"environment block\" which is not a char**, but\n+    // rather a concatenation of null-terminated k=v\\0 sequences, with a final\n+    // \\0 to terminate.\n+    match env {\n+        Some(env) => {\n+            let mut blk = Vec::new();\n+\n+            for pair in env {\n+                let kv = format!(\"{}={}\",\n+                                 pair.0.container_as_str().unwrap(),\n+                                 pair.1.container_as_str().unwrap());\n+                blk.extend(kv.utf16_units());\n+                blk.push(0);\n+            }\n+\n+            blk.push(0);\n+\n+            cb(blk.as_mut_ptr() as *mut c_void)\n+        }\n+        _ => cb(ptr::null_mut())\n+    }\n+}\n \n fn with_dirp<T, F>(d: Option<&CString>, cb: F) -> T where\n     F: FnOnce(*const u16) -> T,"}, {"sha": "9736910d7b5fe5425b4b7c0b4113df5a788fcbe1", "filename": "src/test/compile-fail/regions-assoc-type-outlives-container-hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -18,7 +18,7 @@ use std::marker::PhantomFn;\n \n ///////////////////////////////////////////////////////////////////////////\n \n-pub trait TheTrait<'b> : PhantomFn<Self,Self> {\n+pub trait TheTrait<'b> : PhantomFn<&'b Self,Self> {\n     type TheAssocType;\n }\n "}, {"sha": "38381da3670c18be3fa9e126ccb3c08e0237f031", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=0cd54b85ef1fdad3bc4c1c4e1a989b9f6540a0fa", "patch": "@@ -34,7 +34,7 @@ use std::mem::size_of;\n static uni: &'static str = \"Les Mis\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9rables\";\n static yy: usize = 25;\n \n-static bob: Option<std::borrow::Cow<'static, [isize]>> = None;\n+static bob: Option<&'static [isize]> = None;\n \n // buglink test - see issue #1337.\n "}]}