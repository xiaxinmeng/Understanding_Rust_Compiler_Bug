{"sha": "215b377cc327dbd1140fbc0168b69fa8ae345c6d", "node_id": "C_kwDOAAsO6NoAKDIxNWIzNzdjYzMyN2RiZDExNDBmYmMwMTY4YjY5ZmE4YWUzNDVjNmQ", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-04-01T18:59:23Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-04-22T16:06:21Z"}, "message": "extend `EventArgRecorder` into span-aware `SpannedEventArgRecorder`\n\nThe self-profiler's `EventArgRecorder` is general-purpose in its ability to record Strings (and `rustc_span` depends on the crate its defined in, `rustc_data_structure`).\n\nSome generic activities could use recording locations where they happen in the user's code: to allow e.g. to track macro expansions and diagnose performance issues there.\n\nThis adds a `SpannedEventArgRecorder` that can record an argument given as a span, rather than a String, since turning spans into Strings can be tricky if you're not happy with its default Debug output. This way the recorder can have a `record_arg_spanned` method which will do that.", "tree": {"sha": "707b740648f5479fb58c680708c9941793864522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707b740648f5479fb58c680708c9941793864522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215b377cc327dbd1140fbc0168b69fa8ae345c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215b377cc327dbd1140fbc0168b69fa8ae345c6d", "html_url": "https://github.com/rust-lang/rust/commit/215b377cc327dbd1140fbc0168b69fa8ae345c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215b377cc327dbd1140fbc0168b69fa8ae345c6d/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8272f23cc121cc3e98f3148c8dab532decc7b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8272f23cc121cc3e98f3148c8dab532decc7b90", "html_url": "https://github.com/rust-lang/rust/commit/a8272f23cc121cc3e98f3148c8dab532decc7b90"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "f22faef2580a56c6482570ba083e44fc790eb548", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b377cc327dbd1140fbc0168b69fa8ae345c6d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b377cc327dbd1140fbc0168b69fa8ae345c6d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=215b377cc327dbd1140fbc0168b69fa8ae345c6d", "patch": "@@ -59,6 +59,8 @@ pub use symbol::{sym, Symbol};\n mod analyze_source_file;\n pub mod fatal_error;\n \n+pub mod profiling;\n+\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n "}, {"sha": "f169007fab43d77ff58d09d7168049706d2fee08", "filename": "compiler/rustc_span/src/profiling.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/215b377cc327dbd1140fbc0168b69fa8ae345c6d/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b377cc327dbd1140fbc0168b69fa8ae345c6d/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=215b377cc327dbd1140fbc0168b69fa8ae345c6d", "patch": "@@ -0,0 +1,35 @@\n+use std::borrow::Borrow;\n+\n+use rustc_data_structures::profiling::EventArgRecorder;\n+\n+/// Extension trait for self-profiling purposes: allows to record spans within a generic activity's\n+/// event arguments.\n+pub trait SpannedEventArgRecorder {\n+    /// Records the following event arguments within the current generic activity being profiled:\n+    /// - the provided `event_arg`\n+    /// - a string representation of the provided `span`\n+    ///\n+    /// Note: when self-profiling with costly event arguments, at least one argument\n+    /// needs to be recorded. A panic will be triggered if that doesn't happen.\n+    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    where\n+        A: Borrow<str> + Into<String>;\n+}\n+\n+impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n+    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    where\n+        A: Borrow<str> + Into<String>,\n+    {\n+        self.record_arg(event_arg);\n+\n+        let span_arg = crate::with_session_globals(|session_globals| {\n+            if let Some(source_map) = &*session_globals.source_map.borrow() {\n+                source_map.span_to_embeddable_string(span)\n+            } else {\n+                format!(\"{:?}\", span)\n+            }\n+        });\n+        self.record_arg(span_arg);\n+    }\n+}"}]}