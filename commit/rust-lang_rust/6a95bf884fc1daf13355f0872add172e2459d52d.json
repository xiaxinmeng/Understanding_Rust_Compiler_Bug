{"sha": "6a95bf884fc1daf13355f0872add172e2459d52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTViZjg4NGZjMWRhZjEzMzU1ZjA4NzJhZGQxNzJlMjQ1OWQ1MmQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T16:54:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:45:07Z"}, "message": "Use Place directly on Operand::place and friends, it's Copy", "tree": {"sha": "c6e8ca581037824bad49e530df39757bf33755e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e8ca581037824bad49e530df39757bf33755e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a95bf884fc1daf13355f0872add172e2459d52d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DgaMACgkQgTGiTgx5\n768rABAAiVIb1CJhrlTVxvA6vdy6v6bOJxwCUnxVABEgbJDOSE9jV6kJfdXznyCK\nbS0/6LaHXa8abMHySdtBlREIRiN32HMBhFtnHbpQ8luNryVeAcp4zuhPyk0gRw5m\nIg+mkspfAX599w5Te9zOllB60VTM6QsA5o6CKdRc+VFJWay+DYV9SpHLHeYKiDEF\nfS34mQ4IGE7y1dfbWCiXS+OjRu8Mj1oSD2XHm6qnlGBzoaubIIlg+naEFBwFkl+m\n4tJvWD05ptoXVhJqt50XQ1fr4ZNRW+5xy2LiU21tmt7Gg/k4CAs7cXPk0ygwFWnT\n2VBZM+wYAjSZl1xy/N9ZQMA2QFevxqFs/jUrpA9DXn88IHMP+yVc36oDjtNGdqby\nwvu3mKaI+zNN6EijUNa6QHUuza3lYgt7GjI1l1MnSNbo3Gr0xlmRzW9sa14x6JQZ\n6tOjTDR83zK0RLnIQeTz9ZDA/ato0GbjVaB3ZVeCyDC/Wp/9aqQahKN0bDjWje1E\nGZ3kcBxb9xvPFmTraf3EqjPQCMzSVpy5fIYo7uWUsWfqnvPdvAEX3aN/hvdF9mxY\nfrirjX422qKKDIdf7offGHXtnKCxMWiTX934AZxdFMKnPrAULPZ+L7BNQ7wvW2eS\ngttCxsWZez4BBI8avJBT2EZpbx4gHfzL1oKwcOj5j3orIobkges=\n=5y/H\n-----END PGP SIGNATURE-----", "payload": "tree c6e8ca581037824bad49e530df39757bf33755e5\nparent 890b39381f587169c0684831ff04f9d8602ea95a\nauthor Santiago Pastorino <spastorino@gmail.com> 1585673660 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585676707 -0300\n\nUse Place directly on Operand::place and friends, it's Copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a95bf884fc1daf13355f0872add172e2459d52d", "html_url": "https://github.com/rust-lang/rust/commit/6a95bf884fc1daf13355f0872add172e2459d52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a95bf884fc1daf13355f0872add172e2459d52d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890b39381f587169c0684831ff04f9d8602ea95a", "url": "https://api.github.com/repos/rust-lang/rust/commits/890b39381f587169c0684831ff04f9d8602ea95a", "html_url": "https://github.com/rust-lang/rust/commit/890b39381f587169c0684831ff04f9d8602ea95a"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "216fe43e819976fa30cf73fb56af60efbcb6b511", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -2030,9 +2030,9 @@ impl<'tcx> Operand<'tcx> {\n \n     /// Returns the `Place` that is the target of this `Operand`, or `None` if this `Operand` is a\n     /// constant.\n-    pub fn place(&self) -> Option<&Place<'tcx>> {\n+    pub fn place(&self) -> Option<Place<'tcx>> {\n         match self {\n-            Operand::Copy(place) | Operand::Move(place) => Some(place),\n+            Operand::Copy(place) | Operand::Move(place) => Some(*place),\n             Operand::Constant(_) => None,\n         }\n     }"}, {"sha": "39676d03740b26b6e84c0806c7c2d1d9cdd27ac1", "filename": "src/librustc_mir/dataflow/framework/cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -135,14 +135,14 @@ where\n                     target.block,\n                     func,\n                     args,\n-                    return_place,\n+                    *return_place,\n                 );\n             }\n             TerminatorKind::Yield { resume, resume_arg, .. } => {\n                 self.results.borrow().analysis.apply_yield_resume_effect(\n                     &mut self.state,\n                     *resume,\n-                    resume_arg,\n+                    *resume_arg,\n                 );\n             }\n             _ => {}"}, {"sha": "9bb727354df9af08686372982b62831229fafd4a", "filename": "src/librustc_mir/dataflow/framework/engine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -228,7 +228,7 @@ where\n                     self.propagate_bits_into_entry_set_for(in_out, drop, dirty_list);\n                 }\n \n-                self.analysis.apply_yield_resume_effect(in_out, target, &resume_arg);\n+                self.analysis.apply_yield_resume_effect(in_out, target, resume_arg);\n                 self.propagate_bits_into_entry_set_for(in_out, target, dirty_list);\n             }\n \n@@ -272,7 +272,7 @@ where\n                     }\n                 }\n \n-                if let Some((ref dest_place, dest_bb)) = *destination {\n+                if let Some((dest_place, dest_bb)) = *destination {\n                     // N.B.: This must be done *last*, otherwise the unwind path will see the call\n                     // return effect.\n                     self.analysis.apply_call_return_effect(in_out, bb, func, args, dest_place);\n@@ -314,7 +314,7 @@ where\n         in_out: &mut BitSet<A::Idx>,\n         bb: BasicBlock,\n         enum_def: &'tcx ty::AdtDef,\n-        enum_place: &mir::Place<'tcx>,\n+        enum_place: mir::Place<'tcx>,\n         dirty_list: &mut WorkQueue<BasicBlock>,\n         values: &[u128],\n         targets: &[BasicBlock],\n@@ -361,14 +361,14 @@ fn switch_on_enum_discriminant(\n     tcx: TyCtxt<'tcx>,\n     body: &'mir mir::Body<'tcx>,\n     block: &'mir mir::BasicBlockData<'tcx>,\n-    switch_on: &mir::Place<'tcx>,\n-) -> Option<(&'mir mir::Place<'tcx>, &'tcx ty::AdtDef)> {\n+    switch_on: mir::Place<'tcx>,\n+) -> Option<(mir::Place<'tcx>, &'tcx ty::AdtDef)> {\n     match block.statements.last().map(|stmt| &stmt.kind) {\n         Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(discriminated))))\n-            if lhs == switch_on =>\n+            if *lhs == switch_on =>\n         {\n             match &discriminated.ty(body, tcx).ty.kind {\n-                ty::Adt(def, _) => Some((discriminated, def)),\n+                ty::Adt(def, _) => Some((*discriminated, def)),\n \n                 // `Rvalue::Discriminant` is also used to get the active yield point for a\n                 // generator, but we do not need edge-specific effects in that case. This may"}, {"sha": "fd2a3d5ea28f24d684bf1dc531b1d6dbef13b704", "filename": "src/librustc_mir/dataflow/framework/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -225,7 +225,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         block: BasicBlock,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     );\n \n     /// Updates the current dataflow state with the effect of resuming from a `Yield` terminator.\n@@ -238,7 +238,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         &self,\n         _state: &mut BitSet<Self::Idx>,\n         _resume_block: BasicBlock,\n-        _resume_place: &mir::Place<'tcx>,\n+        _resume_place: mir::Place<'tcx>,\n     ) {\n     }\n \n@@ -251,7 +251,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         &self,\n         _state: &mut BitSet<Self::Idx>,\n         _block: BasicBlock,\n-        _enum_place: &mir::Place<'tcx>,\n+        _enum_place: mir::Place<'tcx>,\n         _adt: &ty::AdtDef,\n         _variant: VariantIdx,\n     ) {\n@@ -332,15 +332,15 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n         block: BasicBlock,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     );\n \n     /// See `Analysis::apply_yield_resume_effect`.\n     fn yield_resume_effect(\n         &self,\n         _trans: &mut BitSet<Self::Idx>,\n         _resume_block: BasicBlock,\n-        _resume_place: &mir::Place<'tcx>,\n+        _resume_place: mir::Place<'tcx>,\n     ) {\n     }\n \n@@ -349,7 +349,7 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n         &self,\n         _state: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n-        _enum_place: &mir::Place<'tcx>,\n+        _enum_place: mir::Place<'tcx>,\n         _adt: &ty::AdtDef,\n         _variant: VariantIdx,\n     ) {\n@@ -402,7 +402,7 @@ where\n         block: BasicBlock,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     ) {\n         self.call_return_effect(state, block, func, args, return_place);\n     }\n@@ -411,7 +411,7 @@ where\n         &self,\n         state: &mut BitSet<Self::Idx>,\n         resume_block: BasicBlock,\n-        resume_place: &mir::Place<'tcx>,\n+        resume_place: mir::Place<'tcx>,\n     ) {\n         self.yield_resume_effect(state, resume_block, resume_place);\n     }\n@@ -420,7 +420,7 @@ where\n         &self,\n         state: &mut BitSet<Self::Idx>,\n         block: BasicBlock,\n-        enum_place: &mir::Place<'tcx>,\n+        enum_place: mir::Place<'tcx>,\n         adt: &ty::AdtDef,\n         variant: VariantIdx,\n     ) {"}, {"sha": "6972a81cf1b0e1afbe9bc90820f4a1f6c9345061", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -123,7 +123,7 @@ where\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _dest_place: &mir::Place<'tcx>,\n+        _dest_place: mir::Place<'tcx>,\n     ) {\n     }\n }"}, {"sha": "0de8f45720e6f441778ec083ad286dc574415059", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -329,7 +329,7 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _dest_place: &mir::Place<'tcx>,\n+        _dest_place: mir::Place<'tcx>,\n     ) {\n     }\n }"}, {"sha": "1c85226b1221f19f6dcb006f76171b068c47b872", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -323,7 +323,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        dest_place: &mir::Place<'tcx>,\n+        dest_place: mir::Place<'tcx>,\n     ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n@@ -342,7 +342,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        enum_place: &mir::Place<'tcx>,\n+        enum_place: mir::Place<'tcx>,\n         _adt: &ty::AdtDef,\n         variant: VariantIdx,\n     ) {\n@@ -425,7 +425,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        dest_place: &mir::Place<'tcx>,\n+        dest_place: mir::Place<'tcx>,\n     ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 0 (initialized).\n@@ -494,7 +494,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        dest_place: &mir::Place<'tcx>,\n+        dest_place: mir::Place<'tcx>,\n     ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n@@ -585,7 +585,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n         block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _dest_place: &mir::Place<'tcx>,\n+        _dest_place: mir::Place<'tcx>,\n     ) {\n         let move_data = self.move_data();\n         let init_loc_map = &move_data.init_loc_map;"}, {"sha": "3dfcfe16fb51493e5f51fd32345c59e0623fd528", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -56,7 +56,7 @@ impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n         _block: BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _return_place: &mir::Place<'tcx>,\n+        _return_place: mir::Place<'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }\n@@ -231,7 +231,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n         _block: BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     ) {\n         trans.gen(return_place.local);\n     }\n@@ -240,7 +240,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n         &self,\n         trans: &mut BitSet<Self::Idx>,\n         _resume_block: BasicBlock,\n-        resume_place: &mir::Place<'tcx>,\n+        resume_place: mir::Place<'tcx>,\n     ) {\n         trans.gen(resume_place.local);\n     }"}, {"sha": "b95a3939389bace36adc7db94eb2b1ffd2dbe221", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a95bf884fc1daf13355f0872add172e2459d52d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=6a95bf884fc1daf13355f0872add172e2459d52d", "patch": "@@ -68,15 +68,15 @@ where\n         _block: BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     ) {\n         // We cannot reason about another function's internals, so use conservative type-based\n         // qualification for the result of a function call.\n         let return_ty = return_place.ty(*self.item.body, self.item.tcx).ty;\n         let qualif = Q::in_any_value_of_ty(self.item, return_ty);\n \n         if !return_place.is_indirect() {\n-            self.assign_qualif_direct(return_place, qualif);\n+            self.assign_qualif_direct(&return_place, qualif);\n         }\n     }\n }\n@@ -214,7 +214,7 @@ where\n         block: BasicBlock,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        return_place: &mir::Place<'tcx>,\n+        return_place: mir::Place<'tcx>,\n     ) {\n         self.transfer_function(state).apply_call_return_effect(block, func, args, return_place)\n     }"}]}