{"sha": "62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjM1OTA5NGYwZGNlYmRiMDNlNGJiYzBlNDkzNGNlMzhkODYyM2E=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-11T11:41:56Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:19Z"}, "message": "Check for uninhabitedness instead of never", "tree": {"sha": "ff988a91dfb358e3f050fa33770c47f2201d6cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff988a91dfb358e3f050fa33770c47f2201d6cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "html_url": "https://github.com/rust-lang/rust/commit/62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1137d29d5e551e377579c5a601fe7c444057d00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1137d29d5e551e377579c5a601fe7c444057d00c", "html_url": "https://github.com/rust-lang/rust/commit/1137d29d5e551e377579c5a601fe7c444057d00c"}], "stats": {"total": 86, "additions": 26, "deletions": 60}, "files": [{"sha": "0464b2f3454d3a769212479805bcb3ecb4b6c74e", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -415,8 +415,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             args: I) -> CFGIndex {\n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n         let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n-        // FIXME(canndrew): This is_never should probably be an is_uninhabited.\n-        if self.tables.expr_ty(call_expr).is_never() {\n+        if self.tables.expr_ty(call_expr).conservative_is_uninhabited() {\n             self.add_unreachable_node()\n         } else {\n             ret"}, {"sha": "6e3db217d7af116d7b615e3573cd9f722fd38aca", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -1197,8 +1197,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                // FIXME(canndrew): This is_never should really be an is_uninhabited\n-                let succ = if self.tables.expr_ty(expr).is_never() {\n+                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited() {\n                     self.s.exit_ln\n                 } else {\n                     succ\n@@ -1208,8 +1207,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                // FIXME(canndrew): This is_never should really be an is_uninhabited\n-                let succ = if self.tables.expr_ty(expr).is_never() {\n+                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited() {\n                     self.s.exit_ln\n                 } else {\n                     succ"}, {"sha": "037adb2c53ca7f4aced89fb6449831f74d8f9a71", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -1543,6 +1543,17 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn conservative_is_uninhabited(&self) -> bool {\n+        // Checks whether a type is definitely uninhabited. This is\n+        // conservative: for some types that are uninhabited we return `false`,\n+        // but we only return `true` for types that are definitely uninhabited.\n+        match self.sty {\n+            ty::Never => true,\n+            ty::Adt(def, _) => def.variants.is_empty(),\n+            _ => false\n+        }\n+    }\n+\n     pub fn is_primitive(&self) -> bool {\n         match self.sty {\n             Bool | Char | Int(_) | Uint(_) | Float(_) => true,"}, {"sha": "39019b35beb184517e8bacddcfa6990746587853", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -1546,8 +1546,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             None => {\n-                // FIXME(canndrew): This is_never should probably be an is_uninhabited\n-                if !sig.output().is_never() {\n+                if !sig.output().conservative_is_uninhabited() {\n                     span_mirbug!(self, term, \"call to converging function {:?} w/o dest\", sig);\n                 }\n             }"}, {"sha": "77cb4820ba4606b633e87a1dcd10cef2081a4885", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -275,8 +275,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 exit_block.unit()\n             }\n             ExprKind::Call { ty, fun, args, from_hir_call } => {\n-                // FIXME(canndrew): This is_never should probably be an is_uninhabited\n-                let diverges = expr.ty.is_never();\n+                let diverges = expr.ty.conservative_is_uninhabited();\n                 let intrinsic = match ty.sty {\n                     ty::FnDef(def_id, _) => {\n                         let f = ty.fn_sig(this.hir.tcx());\n@@ -332,7 +331,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             func: fun,\n                             args,\n                             cleanup: Some(cleanup),\n-                            destination: if diverges {\n+                            destination: if expr.ty.conservative_is_uninhabited() {\n                                 None\n                             } else {\n                                 Some((destination.clone(), success))"}, {"sha": "1f1967eca6a18cf3dafe6a1a5a50d37ab23be7ad", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n-                    self.conservative_is_uninhabited(pat_ty)\n+                    pat_ty.conservative_is_uninhabited()\n                 };\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n@@ -258,15 +258,6 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n         })\n     }\n \n-    fn conservative_is_uninhabited(&self, scrutinee_ty: Ty<'tcx>) -> bool {\n-        // \"rustc-1.0-style\" uncontentious uninhabitableness check\n-        match scrutinee_ty.sty {\n-            ty::Never => true,\n-            ty::Adt(def, _) => def.variants.is_empty(),\n-            _ => false\n-        }\n-    }\n-\n     fn check_irrefutable(&self, pat: &'tcx Pat, origin: &str) {\n         let module = self.tcx.hir().get_module_parent(pat.id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {"}, {"sha": "27e8e9d17e82c87d91acaae60ff6d57acbff7de5", "filename": "src/test/debuginfo/nil-enum.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b359094f0dcebdb03e4bbc0e4934ce38d8623a/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs?ref=62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "patch": "@@ -1,55 +1,24 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// NOTE Instantiating an empty enum is UB. This test may break in the future.\n-\n-// LLDB can't handle zero-sized values\n+// LLDB can't handle zero-sized values.\n // ignore-lldb\n \n-\n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// gdb 8.2.0 crashes on this test case, see\n-// https://sourceware.org/bugzilla/show_bug.cgi?id=23626\n-// This will be fixed in the next release, which will be >= 8.2.1.\n-// min-system-llvm-version: 7.0\n-// min-gdb-version: 8.2.1\n-\n // compile-flags:-g\n // gdb-command:run\n \n-// gdb-command:print first\n-// gdbr-check:$1 = nil_enum::ANilEnum {<No data fields>}\n-\n-// gdb-command:print second\n-// gdbr-check:$2 = nil_enum::AnotherNilEnum {<No data fields>}\n+// gdb-command:print *first\n+// gdbg-check:$1 = {<No data fields>}\n+// gdbr-check:$1 = <error reading variable>\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![feature(maybe_uninit)]\n #![omit_gdb_pretty_printer_section]\n \n-use std::mem::MaybeUninit;\n-\n-enum ANilEnum {}\n-enum AnotherNilEnum {}\n+enum Void {}\n \n-// This test relies on gdbg printing the string \"{<No data fields>}\" for empty\n-// structs (which may change some time)\n-// The error from gdbr is expected since nil enums are not supposed to exist.\n fn main() {\n-    unsafe {\n-        let first: ANilEnum = MaybeUninit::uninitialized().into_inner();\n-        let second: AnotherNilEnum = MaybeUninit::uninitialized().into_inner();\n+    let first: *const Void = 1 as *const _;\n \n-        zzz(); // #break\n-    }\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() {}"}]}