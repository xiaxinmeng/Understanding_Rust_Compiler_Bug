{"sha": "b22beed737531e78cb0aa8a20d3b49e679295779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmJlZWQ3Mzc1MzFlNzhjYjBhYThhMjBkM2I0OWU2NzkyOTU3Nzk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-01T04:56:23Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Fix build after rebase to lastest master", "tree": {"sha": "690f267f67930cf0b228580d7ccf3b7dcacd98e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690f267f67930cf0b228580d7ccf3b7dcacd98e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22beed737531e78cb0aa8a20d3b49e679295779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22beed737531e78cb0aa8a20d3b49e679295779", "html_url": "https://github.com/rust-lang/rust/commit/b22beed737531e78cb0aa8a20d3b49e679295779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22beed737531e78cb0aa8a20d3b49e679295779/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed02344fbc7d3bed591f528304f603f9d320e919", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed02344fbc7d3bed591f528304f603f9d320e919", "html_url": "https://github.com/rust-lang/rust/commit/ed02344fbc7d3bed591f528304f603f9d320e919"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "dae7bc9662f5cce0ab59f80b7200b92722602f9e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22beed737531e78cb0aa8a20d3b49e679295779/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22beed737531e78cb0aa8a20d3b49e679295779/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=b22beed737531e78cb0aa8a20d3b49e679295779", "patch": "@@ -610,7 +610,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let scheme = tcx.lookup_item_type(def.def_id());\n         let scheme = if scheme.ty.is_fn() {\n             // Replace constructor type with constructed type for tuple struct patterns.\n-            let fn_ret = tcx.no_late_bound_regions(&scheme.ty.fn_ret()).unwrap().unwrap();\n+            let fn_ret = tcx.no_late_bound_regions(&scheme.ty.fn_ret()).unwrap();\n             ty::TypeScheme { ty: fn_ret, generics: scheme.generics }\n         } else {\n             // Leave the type as is for unit structs (backward compatibility)."}, {"sha": "3e8852d63321f581e7644726b612bf824a7dac95", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22beed737531e78cb0aa8a20d3b49e679295779/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22beed737531e78cb0aa8a20d3b49e679295779/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b22beed737531e78cb0aa8a20d3b49e679295779", "patch": "@@ -4090,7 +4090,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   def: Def,\n                                   span: Span,\n                                   node_id: ast::NodeId,\n-                                  node_is_expr: bool) {\n+                                  node_is_expr: bool)\n                                   -> Ty<'tcx> {\n         debug!(\"instantiate_value_path(path={:?}, def={:?}, node_id={}, type_scheme={:?})\",\n                segments,"}]}