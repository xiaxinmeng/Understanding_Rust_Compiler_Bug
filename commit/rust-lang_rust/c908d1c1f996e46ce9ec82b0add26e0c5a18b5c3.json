{"sha": "c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDhkMWMxZjk5NmU0NmNlOWVjODJiMGFkZDI2ZTBjNWExOGI1YzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-14T06:44:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-14T06:44:32Z"}, "message": "Revert \"Extend dead code lint to detect more unused enum variants\"\n\nThis reverts commit b042ffc4a768c2bd6d7588b1b2f47af22669c2cb.\n\nConflicts:\n\tsrc/librustc/middle/pat_util.rs", "tree": {"sha": "c23e47e57c3548a985b0378948ef50f3c877333d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23e47e57c3548a985b0378948ef50f3c877333d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "html_url": "https://github.com/rust-lang/rust/commit/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bcc552327e1cb0b82d35caf04c4a3d07769561", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bcc552327e1cb0b82d35caf04c4a3d07769561", "html_url": "https://github.com/rust-lang/rust/commit/82bcc552327e1cb0b82d35caf04c4a3d07769561"}], "stats": {"total": 94, "additions": 1, "deletions": 93}, "files": [{"sha": "5efea66ab0c6cc751cff9f1550057df4657780f7", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "patch": "@@ -47,7 +47,6 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     struct_has_extern_repr: bool,\n     ignore_non_const_paths: bool,\n     inherited_pub_visibility: bool,\n-    ignore_variant_stack: Vec<ast::NodeId>,\n }\n \n impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n@@ -60,7 +59,6 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             struct_has_extern_repr: false,\n             ignore_non_const_paths: false,\n             inherited_pub_visibility: false,\n-            ignore_variant_stack: vec![],\n         }\n     }\n \n@@ -81,9 +79,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 def::DefPrimTy(_) => (),\n                 def::DefVariant(enum_id, variant_id, _) => {\n                     self.check_def_id(enum_id);\n-                    if !self.ignore_variant_stack.contains(&variant_id.node) {\n-                        self.check_def_id(variant_id);\n-                    }\n+                    self.check_def_id(variant_id);\n                 }\n                 _ => {\n                     self.check_def_id(def.def_id());\n@@ -282,23 +278,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         visit::walk_expr(self, expr);\n     }\n \n-    fn visit_arm(&mut self, arm: &ast::Arm) {\n-        if arm.pats.len() == 1 {\n-            let pat = &*arm.pats[0];\n-            let variants = pat_util::necessary_variants(&self.tcx.def_map, pat);\n-\n-            // Inside the body, ignore constructions of variants\n-            // necessary for the pattern to match. Those construction sites\n-            // can't be reached unless the variant is constructed elsewhere.\n-            let len = self.ignore_variant_stack.len();\n-            self.ignore_variant_stack.push_all(&*variants);\n-            visit::walk_arm(self, arm);\n-            self.ignore_variant_stack.truncate(len);\n-        } else {\n-            visit::walk_arm(self, arm);\n-        }\n-    }\n-\n     fn visit_pat(&mut self, pat: &ast::Pat) {\n         let def_map = &self.tcx.def_map;\n         match pat.node {\n@@ -418,11 +397,6 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n         worklist.push(*id);\n     }\n     for id in reachable_symbols {\n-        // Reachable variants can be dead, because we warn about\n-        // variants never constructed, not variants never used.\n-        if let Some(ast_map::NodeVariant(..)) = tcx.map.find(*id) {\n-            continue;\n-        }\n         worklist.push(*id);\n     }\n "}, {"sha": "c5abff3b96360bceaa9ca8b8d8124e02ad4fb08e", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=c908d1c1f996e46ce9ec82b0add26e0c5a18b5c3", "patch": "@@ -155,27 +155,3 @@ pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path {\n         span: DUMMY_SP,\n     })\n }\n-\n-/// Return variants that are necessary to exist for the pattern to match.\n-pub fn necessary_variants(dm: &DefMap, pat: &ast::Pat) -> Vec<ast::NodeId> {\n-    let mut variants = vec![];\n-    walk_pat(pat, |p| {\n-        match p.node {\n-            ast::PatEnum(_, _) |\n-            ast::PatIdent(_, _, None) |\n-            ast::PatStruct(..) => {\n-                match dm.borrow().get(&p.id) {\n-                    Some(&PathResolution {base_def: DefVariant(_, id, _), ..}) => {\n-                        variants.push(id.node);\n-                    }\n-                    _ => ()\n-                }\n-            }\n-            _ => ()\n-        }\n-        true\n-    });\n-    variants.sort();\n-    variants.dedup();\n-    variants\n-}"}, {"sha": "6146be65e38803493f9622ae9e46d02dab523526", "filename": "src/test/compile-fail/lint-dead-code-variant.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/82bcc552327e1cb0b82d35caf04c4a3d07769561/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bcc552327e1cb0b82d35caf04c4a3d07769561/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs?ref=82bcc552327e1cb0b82d35caf04c4a3d07769561", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(dead_code)]\n-\n-#[derive(Copy)]\n-enum Enum {\n-    Variant1, //~ ERROR: variant is never used\n-    Variant2,\n-    Variant3,\n-}\n-\n-fn copy(e: Enum) -> Enum {\n-    use Enum::*;\n-    match e {\n-        Variant1 => Variant1,\n-        Variant2 => Variant2,\n-        Variant3 => Variant3,\n-    }\n-}\n-\n-fn max(e: Enum) -> Enum {\n-    use Enum::*;\n-    match e {\n-        Variant1 => Variant3,\n-        Variant2 => Variant3,\n-        Variant3 => Variant3,\n-    }\n-}\n-\n-fn main() {\n-    let e = Enum::Variant2;\n-    copy(e);\n-    max(e);\n-}"}]}