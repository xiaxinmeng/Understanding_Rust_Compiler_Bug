{"sha": "3725276554fe63fdd9b63a10b86e794b3eb73158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjUyNzY1NTRmZTYzZmRkOWI2M2ExMGI4NmU3OTRiM2ViNzMxNTg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-09T12:44:58Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-09T12:44:58Z"}, "message": "Merge #271\n\n271: Implement format hook r=matklad a=DJMcNab\n\nTentatively: fixes #155.\r\n\r\nHowever, this does add all changes in staged files, which might not be desirable. However, I think we can't solve that without explicit support in rustfmt for it, so it should be fine.\n\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "01de23f215e51459c67d2eb7f4bfb77d65afd1b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01de23f215e51459c67d2eb7f4bfb77d65afd1b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3725276554fe63fdd9b63a10b86e794b3eb73158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3725276554fe63fdd9b63a10b86e794b3eb73158", "html_url": "https://github.com/rust-lang/rust/commit/3725276554fe63fdd9b63a10b86e794b3eb73158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3725276554fe63fdd9b63a10b86e794b3eb73158/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b9c17a6001aaf79e181a86218883fe96d9c95c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c17a6001aaf79e181a86218883fe96d9c95c09", "html_url": "https://github.com/rust-lang/rust/commit/b9c17a6001aaf79e181a86218883fe96d9c95c09"}, {"sha": "cbce28a348ebb5db646cfc5cd3305c6bce80e915", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbce28a348ebb5db646cfc5cd3305c6bce80e915", "html_url": "https://github.com/rust-lang/rust/commit/cbce28a348ebb5db646cfc5cd3305c6bce80e915"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "c319d33f24c7c33a7fe420715fde4fb1fac272f3", "filename": ".cargo/config", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3725276554fe63fdd9b63a10b86e794b3eb73158/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/3725276554fe63fdd9b63a10b86e794b3eb73158/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=3725276554fe63fdd9b63a10b86e794b3eb73158", "patch": "@@ -1,9 +1,10 @@\n [alias]\n # Automatically generates the ast and syntax kinds files\n-gen-syntax =    \"run --package tools -- gen-syntax\"\n-gen-tests =    \"run --package tools -- gen-tests\"\n-install-code = \"run --package tools -- install-code\"\n-format =    \"run --package tools -- format\"\n+gen-syntax =   \"run --package tools --bin tools -- gen-syntax\"\n+gen-tests =    \"run --package tools --bin tools -- gen-tests\"\n+install-code = \"run --package tools --bin tools -- install-code\"\n+format =       \"run --package tools --bin tools -- format\"\n+format-hook =  \"run --package tools --bin tools -- format-hook\"\n \n-render-test = \"run --package ra_cli -- render-test\"\n-parse =       \"run --package ra_cli -- parse\"\n+render-test =  \"run --package ra_cli -- render-test\"\n+parse =        \"run --package ra_cli -- parse\""}, {"sha": "01acdda7c3c19fcf48b0202082dcc0dee96d06bd", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=3725276554fe63fdd9b63a10b86e794b3eb73158", "patch": "@@ -20,7 +20,7 @@ pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n                 return LocalEdit {\n                     edit: EditBuilder::new().finish(),\n                     cursor_position: None,\n-                }\n+                };\n             }\n             Some(pos) => pos,\n         };"}, {"sha": "ca1909479563fa1cfd91663a6249c22f0907ff96", "filename": "crates/tools/src/bin/pre-commit.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs?ref=3725276554fe63fdd9b63a10b86e794b3eb73158", "patch": "@@ -0,0 +1,37 @@\n+use std::{\n+    process::{Command},\n+};\n+\n+use tools::{Result, run_rustfmt, run, project_root};\n+use failure::bail;\n+\n+fn main() -> tools::Result<()> {\n+    run_rustfmt(tools::Overwrite)?;\n+    update_staged()\n+}\n+\n+fn update_staged() -> Result<()> {\n+    let root = project_root();\n+    let output = Command::new(\"git\")\n+        .arg(\"diff\")\n+        .arg(\"--name-only\")\n+        .arg(\"--cached\")\n+        .current_dir(&root)\n+        .output()?;\n+    if !output.status.success() {\n+        bail!(\n+            \"`git diff --name-only --cached` exited with {}\",\n+            output.status\n+        );\n+    }\n+    for line in String::from_utf8(output.stdout)?.lines() {\n+        run(\n+            &format!(\n+                \"git update-index --add {}\",\n+                root.join(line).to_string_lossy()\n+            ),\n+            \".\",\n+        )?;\n+    }\n+    Ok(())\n+}"}, {"sha": "95d6e08f048558e7c8f9543907051947c3a4a1d6", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=3725276554fe63fdd9b63a10b86e794b3eb73158", "patch": "@@ -1,6 +1,8 @@\n use std::{\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n+    fs::copy,\n+    io::{Error, ErrorKind}\n };\n \n use failure::bail;\n@@ -39,7 +41,7 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n         let (start_line, name) = loop {\n             match block.next() {\n                 Some((idx, line)) if line.starts_with(\"test \") => {\n-                    break (idx, line[\"test \".len()..].to_string())\n+                    break (idx, line[\"test \".len()..].to_string());\n                 }\n                 Some(_) => (),\n                 None => continue 'outer,\n@@ -65,7 +67,7 @@ pub fn generate(mode: Mode) -> Result<()> {\n }\n \n pub fn project_root() -> PathBuf {\n-    Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap())\n+    Path::new(&env!(\"CARGO_MANIFEST_DIR\"))\n         .ancestors()\n         .nth(2)\n         .unwrap()\n@@ -116,3 +118,18 @@ fn install_rustfmt() -> Result<()> {\n         \".\",\n     )\n }\n+\n+pub fn install_format_hook() -> Result<()> {\n+    let result_path = Path::new(\"./.git/hooks/pre-commit\");\n+    if !result_path.exists() {\n+        run(\"cargo build --package tools --bin pre-commit\", \".\")?;\n+        if cfg!(windows) {\n+            copy(\"./target/debug/pre-commit.exe\", result_path)?;\n+        } else {\n+            copy(\"./target/debug/pre-commit\", result_path)?;\n+        }\n+    } else {\n+        return Err(Error::new(ErrorKind::AlreadyExists, \"Git hook already created\").into());\n+    }\n+    Ok(())\n+}"}, {"sha": "9e90ac5c21b12745ee9aee88dab579ec64c47b82", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3725276554fe63fdd9b63a10b86e794b3eb73158/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=3725276554fe63fdd9b63a10b86e794b3eb73158", "patch": "@@ -7,7 +7,7 @@ use std::{\n use clap::{App, Arg, SubCommand};\n use failure::bail;\n \n-use tools::{collect_tests, generate, run, run_rustfmt, Mode, Overwrite, Result, Test, Verify};\n+use tools::{collect_tests, generate, install_format_hook, run, run_rustfmt, Mode, Overwrite, Result, Test, Verify};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";\n const INLINE_TESTS_DIR: &str = \"./crates/ra_syntax/tests/data/parser/inline\";\n@@ -25,17 +25,22 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"gen-tests\"))\n         .subcommand(SubCommand::with_name(\"install-code\"))\n         .subcommand(SubCommand::with_name(\"format\"))\n+        .subcommand(SubCommand::with_name(\"format-hook\"))\n         .get_matches();\n     let mode = if matches.is_present(\"verify\") {\n         Verify\n     } else {\n         Overwrite\n     };\n-    match matches.subcommand() {\n-        (\"install-code\", _) => install_code_extension()?,\n-        (\"gen-tests\", _) => gen_tests(mode)?,\n-        (\"gen-syntax\", _) => generate(Overwrite)?,\n-        (\"format\", _) => run_rustfmt(Overwrite)?,\n+    match matches\n+        .subcommand_name()\n+        .expect(\"Subcommand must be specified\")\n+    {\n+        \"install-code\" => install_code_extension()?,\n+        \"gen-tests\" => gen_tests(mode)?,\n+        \"gen-syntax\" => generate(Overwrite)?,\n+        \"format\" => run_rustfmt(mode)?,\n+        \"format-hook\" => install_format_hook()?,\n         _ => unreachable!(),\n     }\n     Ok(())"}]}