{"sha": "cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOWE3M2QyZWE0Y2E5NDUyZTM0NzFkN2U2YzA0YWYxNGViMWMyZWQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-01-10T12:52:00Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-01-10T12:52:00Z"}, "message": "make use of pointer::is_null", "tree": {"sha": "9cc6c46767976077aa615a3c8311a72201fbf376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc6c46767976077aa615a3c8311a72201fbf376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "html_url": "https://github.com/rust-lang/rust/commit/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8d559bbecf6272eb41f8a800e319238aa9d621", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8d559bbecf6272eb41f8a800e319238aa9d621", "html_url": "https://github.com/rust-lang/rust/commit/2d8d559bbecf6272eb41f8a800e319238aa9d621"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "9d3fe5254f8a9de7b254d930bd133f031097dedb", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -63,7 +63,7 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let sz = mem::size_of_val(&data);\n     let exception = __cxa_allocate_exception(sz);\n-    if exception == ptr::null_mut() {\n+    if exception.is_null() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n     ptr::write(exception as *mut _, data);"}, {"sha": "78eabf8f81e984e149bd551efed65503381eed02", "filename": "src/libstd/sys/hermit/os.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::marker::PhantomData;\n use crate::memchr;\n use crate::path::{self, PathBuf};\n-use crate::ptr;\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n@@ -77,13 +76,17 @@ pub fn init_environment(env: *const *const i8) {\n     unsafe {\n         ENV = Some(Mutex::new(HashMap::new()));\n \n+        if env.is_null() {\n+            return;\n+        }\n+\n         let mut guard = ENV.as_ref().unwrap().lock().unwrap();\n         let mut environ = env;\n-        while environ != ptr::null() && *environ != ptr::null() {\n+        while !(*environ).is_null() {\n             if let Some((key, value)) = parse(CStr::from_ptr(*environ).to_bytes()) {\n                 guard.insert(key, value);\n             }\n-            environ = environ.offset(1);\n+            environ = environ.add(1);\n         }\n     }\n "}, {"sha": "c6f8adb21623a0f26581ed14e20d7988d3b32b9e", "filename": "src/libstd/sys/hermit/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -18,14 +18,14 @@ static KEYS_LOCK: Mutex = Mutex::new();\n static mut LOCALS: *mut BTreeMap<Key, *mut u8> = ptr::null_mut();\n \n unsafe fn keys() -> &'static mut BTreeMap<Key, Option<Dtor>> {\n-    if KEYS == ptr::null_mut() {\n+    if KEYS.is_null() {\n         KEYS = Box::into_raw(Box::new(BTreeMap::new()));\n     }\n     &mut *KEYS\n }\n \n unsafe fn locals() -> &'static mut BTreeMap<Key, *mut u8> {\n-    if LOCALS == ptr::null_mut() {\n+    if LOCALS.is_null() {\n         LOCALS = Box::into_raw(Box::new(BTreeMap::new()));\n     }\n     &mut *LOCALS"}, {"sha": "2b0485c4f03635041b91de0f320d5681496a046a", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -70,7 +70,7 @@ impl<'a> Drop for ActiveTls<'a> {\n             any_non_null_dtor = false;\n             for (value, dtor) in TLS_KEY_IN_USE.iter().filter_map(&value_with_destructor) {\n                 let value = value.replace(ptr::null_mut());\n-                if value != ptr::null_mut() {\n+                if !value.is_null() {\n                     any_non_null_dtor = true;\n                     unsafe { dtor(value) }\n                 }"}, {"sha": "91f7d1524ccef79f9c0d451ef5ccfab86e0a70a0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -480,11 +480,13 @@ pub fn env() -> Env {\n         let _guard = env_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n-        while environ != ptr::null() && *environ != ptr::null() {\n-            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n-                result.push(key_value);\n+        if !environ.is_null() {\n+            while !(*environ).is_null() {\n+                if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                    result.push(key_value);\n+                }\n+                environ = environ.add(1);\n             }\n-            environ = environ.offset(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "1fadf71613561fb6b45498f8e22b63dd48272092", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -7,7 +7,6 @@ use crate::marker::PhantomData;\n use crate::mem;\n use crate::memchr;\n use crate::path::{self, Path, PathBuf};\n-use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n@@ -226,15 +225,15 @@ pub fn env() -> Env {\n     unsafe {\n         let _guard = env_lock();\n         let mut environ = *environ();\n-        if environ == ptr::null() {\n+        if environ.is_null() {\n             panic!(\"os::env() failure getting env string from OS: {}\", io::Error::last_os_error());\n         }\n         let mut result = Vec::new();\n-        while *environ != ptr::null() {\n+        while !(*environ).is_null() {\n             if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n                 result.push(key_value);\n             }\n-            environ = environ.offset(1);\n+            environ = environ.add(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "8052c0aa8a8d9bc59756c3920bc3559720779b5d", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::marker::PhantomData;\n use crate::os::wasi::prelude::*;\n use crate::path::{self, PathBuf};\n-use crate::ptr;\n use crate::str;\n use crate::sys::memchr;\n use crate::sys::{unsupported, Void};\n@@ -107,11 +106,13 @@ pub fn env() -> Env {\n         let _guard = env_lock();\n         let mut environ = libc::environ;\n         let mut result = Vec::new();\n-        while environ != ptr::null_mut() && *environ != ptr::null_mut() {\n-            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n-                result.push(key_value);\n+        if !environ.is_null() {\n+            while !(*environ).is_null() {\n+                if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                    result.push(key_value);\n+                }\n+                environ = environ.add(1);\n             }\n-            environ = environ.offset(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "cc4ae4059069385ea4dd0e0e93801d75abc24a48", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=cd9a73d2ea4ca9452e3471d7e6c04af14eb1c2ed", "patch": "@@ -43,7 +43,7 @@ pub fn error_string(mut errnum: i32) -> String {\n             ];\n             module = c::GetModuleHandleW(NTDLL_DLL.as_ptr());\n \n-            if module != ptr::null_mut() {\n+            if !module.is_null() {\n                 errnum ^= c::FACILITY_NT_BIT as i32;\n                 flags = c::FORMAT_MESSAGE_FROM_HMODULE;\n             }"}]}