{"sha": "372ba2a03d7180c3a58631ecbd93e8912e697bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MmJhMmEwM2Q3MTgwYzNhNTg2MzFlY2JkOTNlODkxMmU2OTdiYWI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-30T13:38:46Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-30T15:11:58Z"}, "message": "Use `LocalDefId` instead of `NodeId` in `resolve_str_path_error`", "tree": {"sha": "e55ed7645c692a0ccc84944e228cbbf5fbfb39a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55ed7645c692a0ccc84944e228cbbf5fbfb39a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372ba2a03d7180c3a58631ecbd93e8912e697bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372ba2a03d7180c3a58631ecbd93e8912e697bab", "html_url": "https://github.com/rust-lang/rust/commit/372ba2a03d7180c3a58631ecbd93e8912e697bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372ba2a03d7180c3a58631ecbd93e8912e697bab/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fb72a8a9f53de2bcc5638c1358fcb552dba8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fb72a8a9f53de2bcc5638c1358fcb552dba8ce", "html_url": "https://github.com/rust-lang/rust/commit/91fb72a8a9f53de2bcc5638c1358fcb552dba8ce"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "e5fc23e14d2ab729c423824fa97e0ab7b736fd05", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=372ba2a03d7180c3a58631ecbd93e8912e697bab", "patch": "@@ -2902,7 +2902,7 @@ impl<'a> Resolver<'a> {\n         span: Span,\n         path_str: &str,\n         ns: Namespace,\n-        module_id: NodeId,\n+        module_id: LocalDefId,\n     ) -> Result<(ast::Path, Res), ()> {\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n@@ -2922,10 +2922,7 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let module = self.block_map.get(&module_id).copied().unwrap_or_else(|| {\n-            let def_id = self.definitions.local_def_id(module_id);\n-            self.module_map.get(&def_id).copied().unwrap_or(self.graph_root)\n-        });\n+        let module = self.module_map.get(&module_id).copied().unwrap_or(self.graph_root);\n         let parent_scope = &ParentScope::module(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))"}, {"sha": "06293a987124e7301a945cca26efaf4e088d2813", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=372ba2a03d7180c3a58631ecbd93e8912e697bab", "patch": "@@ -1,4 +1,3 @@\n-use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n@@ -7,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Namespace::TypeNS;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_interface::interface;\n use rustc_middle::middle::cstore::CrateStore;\n@@ -390,7 +389,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 resolver.borrow_mut().access(|resolver| {\n                     for extern_name in &extern_names {\n                         resolver\n-                            .resolve_str_path_error(DUMMY_SP, extern_name, TypeNS, CRATE_NODE_ID)\n+                            .resolve_str_path_error(\n+                                DUMMY_SP,\n+                                extern_name,\n+                                TypeNS,\n+                                LocalDefId { local_def_index: CRATE_DEF_INDEX },\n+                            )\n                             .unwrap_or_else(|()| {\n                                 panic!(\"Unable to resolve external crate {}\", extern_name)\n                             });"}, {"sha": "149480ec80f2960a81073c1e16ffe8c72c4aad42", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372ba2a03d7180c3a58631ecbd93e8912e697bab/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=372ba2a03d7180c3a58631ecbd93e8912e697bab", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def::{\n     Namespace::{self, *},\n     PerNS, Res,\n };\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         &self,\n         path_str: &str,\n         current_item: &Option<String>,\n-        module_id: rustc_ast::ast::NodeId,\n+        module_id: LocalDefId,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         // In case we're in a module, try to resolve the relative path.\n         if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-            let module_id = cx.tcx.hir().hir_id_to_node_id(module_id);\n+            let module_id = cx.tcx.hir().local_def_id(module_id);\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });"}]}