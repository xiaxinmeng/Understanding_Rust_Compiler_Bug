{"sha": "e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "node_id": "C_kwDOAAsO6NoAKGU4NmJhYzkyZjQ4NWZmOGYxN2EzZmU0OWY4ZjdlN2ExMGJhY2ZlY2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T13:27:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T13:27:19Z"}, "message": "Auto merge of #14019 - Veykril:ts-bin-og, r=Veykril\n\nSubstitute VSCode variables more generally", "tree": {"sha": "acc8ee87c2b2e61f337807c41bd97cdc4cbd2b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc8ee87c2b2e61f337807c41bd97cdc4cbd2b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "html_url": "https://github.com/rust-lang/rust/commit/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "html_url": "https://github.com/rust-lang/rust/commit/cd4ac0d87b0c40c9ac1cea299718c723ea93a162"}, {"sha": "ec9476015ce966fc4238408baef7a7ad1b3db5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9476015ce966fc4238408baef7a7ad1b3db5d8", "html_url": "https://github.com/rust-lang/rust/commit/ec9476015ce966fc4238408baef7a7ad1b3db5d8"}], "stats": {"total": 172, "additions": 87, "deletions": 85}, "files": [{"sha": "b38fa06a85cc42478f08308abf412fe3680723f8", "filename": "editors/code/src/bootstrap.ts", "status": "modified", "additions": 47, "deletions": 51, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fbootstrap.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fbootstrap.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fbootstrap.ts?ref=e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from \"vscode\";\n import * as os from \"os\";\n-import { Config, substituteVSCodeVariables } from \"./config\";\n+import { Config } from \"./config\";\n import { log, isValidExecutable } from \"./util\";\n import { PersistentState } from \"./persistent_state\";\n import { exec } from \"child_process\";\n@@ -31,58 +31,12 @@ export async function bootstrap(\n \n     return path;\n }\n-\n-async function patchelf(dest: vscode.Uri): Promise<void> {\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            title: \"Patching rust-analyzer for NixOS\",\n-        },\n-        async (progress, _) => {\n-            const expression = `\n-            {srcStr, pkgs ? import <nixpkgs> {}}:\n-                pkgs.stdenv.mkDerivation {\n-                    name = \"rust-analyzer\";\n-                    src = /. + srcStr;\n-                    phases = [ \"installPhase\" \"fixupPhase\" ];\n-                    installPhase = \"cp $src $out\";\n-                    fixupPhase = ''\n-                    chmod 755 $out\n-                    patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n-                    '';\n-                }\n-            `;\n-            const origFile = vscode.Uri.file(dest.fsPath + \"-orig\");\n-            await vscode.workspace.fs.rename(dest, origFile, { overwrite: true });\n-            try {\n-                progress.report({ message: \"Patching executable\", increment: 20 });\n-                await new Promise((resolve, reject) => {\n-                    const handle = exec(\n-                        `nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n-                        (err, stdout, stderr) => {\n-                            if (err != null) {\n-                                reject(Error(stderr));\n-                            } else {\n-                                resolve(stdout);\n-                            }\n-                        }\n-                    );\n-                    handle.stdin?.write(expression);\n-                    handle.stdin?.end();\n-                });\n-            } finally {\n-                await vscode.workspace.fs.delete(origFile);\n-            }\n-        }\n-    );\n-}\n-\n async function getServer(\n     context: vscode.ExtensionContext,\n     config: Config,\n     state: PersistentState\n ): Promise<string | undefined> {\n-    const explicitPath = serverPath(config);\n+    const explicitPath = process.env.__RA_LSP_SERVER_DEBUG ?? config.serverPath;\n     if (explicitPath) {\n         if (explicitPath.startsWith(\"~/\")) {\n             return os.homedir() + explicitPath.slice(\"~\".length);\n@@ -131,9 +85,6 @@ async function getServer(\n     );\n     return undefined;\n }\n-function serverPath(config: Config): string | null {\n-    return process.env.__RA_LSP_SERVER_DEBUG ?? substituteVSCodeVariables(config.serverPath);\n-}\n \n async function isNixOs(): Promise<boolean> {\n     try {\n@@ -146,3 +97,48 @@ async function isNixOs(): Promise<boolean> {\n         return false;\n     }\n }\n+\n+async function patchelf(dest: vscode.Uri): Promise<void> {\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            title: \"Patching rust-analyzer for NixOS\",\n+        },\n+        async (progress, _) => {\n+            const expression = `\n+            {srcStr, pkgs ? import <nixpkgs> {}}:\n+                pkgs.stdenv.mkDerivation {\n+                    name = \"rust-analyzer\";\n+                    src = /. + srcStr;\n+                    phases = [ \"installPhase\" \"fixupPhase\" ];\n+                    installPhase = \"cp $src $out\";\n+                    fixupPhase = ''\n+                    chmod 755 $out\n+                    patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n+                    '';\n+                }\n+            `;\n+            const origFile = vscode.Uri.file(dest.fsPath + \"-orig\");\n+            await vscode.workspace.fs.rename(dest, origFile, { overwrite: true });\n+            try {\n+                progress.report({ message: \"Patching executable\", increment: 20 });\n+                await new Promise((resolve, reject) => {\n+                    const handle = exec(\n+                        `nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n+                        (err, stdout, stderr) => {\n+                            if (err != null) {\n+                                reject(Error(stderr));\n+                            } else {\n+                                resolve(stdout);\n+                            }\n+                        }\n+                    );\n+                    handle.stdin?.write(expression);\n+                    handle.stdin?.end();\n+                });\n+            } finally {\n+                await vscode.workspace.fs.delete(origFile);\n+            }\n+        }\n+    );\n+}"}, {"sha": "ce1142df3a812bf462b5d7ae84fbb62bfc84accb", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "patch": "@@ -1,5 +1,6 @@\n-import * as path from \"path\";\n+import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import * as os from \"os\";\n+import * as path from \"path\";\n import * as vscode from \"vscode\";\n import { Env } from \"./client\";\n import { log } from \"./util\";\n@@ -47,7 +48,7 @@ export class Config {\n     }\n \n     private refreshLogging() {\n-        log.setEnabled(this.traceExtension);\n+        log.setEnabled(this.traceExtension ?? false);\n         log.info(\"Extension version:\", this.package.version);\n \n         const cfg = Object.entries(this.cfg).filter(([_, val]) => !(val instanceof Function));\n@@ -163,18 +164,24 @@ export class Config {\n      * ```\n      * So this getter handles this quirk by not requiring the caller to use postfix `!`\n      */\n-    private get<T>(path: string): T {\n-        return this.cfg.get<T>(path)!;\n+    private get<T>(path: string): T | undefined {\n+        return substituteVSCodeVariables(this.cfg.get<T>(path));\n     }\n \n     get serverPath() {\n         return this.get<null | string>(\"server.path\") ?? this.get<null | string>(\"serverPath\");\n     }\n+\n     get serverExtraEnv(): Env {\n         const extraEnv =\n             this.get<{ [key: string]: string | number } | null>(\"server.extraEnv\") ?? {};\n-        return Object.fromEntries(\n-            Object.entries(extraEnv).map(([k, v]) => [k, typeof v !== \"string\" ? v.toString() : v])\n+        return substituteVariablesInEnv(\n+            Object.fromEntries(\n+                Object.entries(extraEnv).map(([k, v]) => [\n+                    k,\n+                    typeof v !== \"string\" ? v.toString() : v,\n+                ])\n+            )\n         );\n     }\n     get traceExtension() {\n@@ -216,13 +223,13 @@ export class Config {\n         if (sourceFileMap !== \"auto\") {\n             // \"/rustc/<id>\" used by suggestions only.\n             const { [\"/rustc/<id>\"]: _, ...trimmed } =\n-                this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+                this.get<Record<string, string>>(\"debug.sourceFileMap\") ?? {};\n             sourceFileMap = trimmed;\n         }\n \n         return {\n             engine: this.get<string>(\"debug.engine\"),\n-            engineSettings: this.get<object>(\"debug.engineSettings\"),\n+            engineSettings: this.get<object>(\"debug.engineSettings\") ?? {},\n             openDebugPane: this.get<boolean>(\"debug.openDebugPane\"),\n             sourceFileMap: sourceFileMap,\n         };\n@@ -247,37 +254,27 @@ export class Config {\n     }\n }\n \n-const VarRegex = new RegExp(/\\$\\{(.+?)\\}/g);\n-\n-export function substituteVSCodeVariableInString(val: string): string {\n-    return val.replace(VarRegex, (substring: string, varName) => {\n-        if (typeof varName === \"string\") {\n-            return computeVscodeVar(varName) || substring;\n-        } else {\n-            return substring;\n-        }\n-    });\n-}\n-\n-export function substituteVSCodeVariables(resp: any): any {\n-    if (typeof resp === \"string\") {\n-        return substituteVSCodeVariableInString(resp);\n-    } else if (resp && Array.isArray(resp)) {\n+export function substituteVSCodeVariables<T>(resp: T): T {\n+    if (Is.string(resp)) {\n+        return substituteVSCodeVariableInString(resp) as T;\n+    } else if (resp && Is.array<any>(resp)) {\n         return resp.map((val) => {\n             return substituteVSCodeVariables(val);\n-        });\n+        }) as T;\n     } else if (resp && typeof resp === \"object\") {\n         const res: { [key: string]: any } = {};\n         for (const key in resp) {\n             const val = resp[key];\n             res[key] = substituteVSCodeVariables(val);\n         }\n-        return res;\n-    } else if (typeof resp === \"function\") {\n-        return null;\n+        return res as T;\n+    } else if (Is.func(resp)) {\n+        throw new Error(\"Unexpected function type in substitution\");\n     }\n     return resp;\n }\n+\n+// FIXME: Merge this with `substituteVSCodeVariables` above\n export function substituteVariablesInEnv(env: Env): Env {\n     const missingDeps = new Set<string>();\n     // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier\n@@ -355,6 +352,17 @@ export function substituteVariablesInEnv(env: Env): Env {\n     return resolvedEnv;\n }\n \n+const VarRegex = new RegExp(/\\$\\{(.+?)\\}/g);\n+function substituteVSCodeVariableInString(val: string): string {\n+    return val.replace(VarRegex, (substring: string, varName) => {\n+        if (Is.string(varName)) {\n+            return computeVscodeVar(varName) || substring;\n+        } else {\n+            return substring;\n+        }\n+    });\n+}\n+\n function computeVscodeVar(varName: string): string | null {\n     const workspaceFolder = () => {\n         const folders = vscode.workspace.workspaceFolders ?? [];"}, {"sha": "8b04182155dfe160210320034bd93b192161fd1e", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "patch": "@@ -2,7 +2,7 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n \n-import { Config, substituteVariablesInEnv, substituteVSCodeVariables } from \"./config\";\n+import { Config, substituteVSCodeVariables } from \"./config\";\n import { createClient } from \"./client\";\n import { isRustDocument, isRustEditor, log, RustEditor } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n@@ -152,9 +152,7 @@ export class Ctx {\n                     throw new Error(message);\n                 }\n             );\n-            const newEnv = substituteVariablesInEnv(\n-                Object.assign({}, process.env, this.config.serverExtraEnv)\n-            );\n+            const newEnv = Object.assign({}, process.env, this.config.serverExtraEnv);\n             const run: lc.Executable = {\n                 command: this._serverPath,\n                 options: { env: newEnv },"}, {"sha": "268b70b4fbbc79ff2b857aacbc2741650e4d15fd", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "patch": "@@ -84,7 +84,7 @@ async function getDebugConfiguration(\n             debugEngine = vscode.extensions.getExtension(engineId);\n             if (debugEngine) break;\n         }\n-    } else {\n+    } else if (debugOptions.engine) {\n         debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n     }\n "}, {"sha": "a92c90f7ff43f618cb63415ab9b9566c01e42879", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=e86bac92f485ff8f17a3fe49f8f7e7a10bacfecc", "patch": "@@ -117,7 +117,7 @@ export function isValidExecutable(path: string): boolean {\n \n     const res = spawnSync(path, [\"--version\"], { encoding: \"utf8\" });\n \n-    const printOutput = res.error && (res.error as any).code !== \"ENOENT\" ? log.warn : log.debug;\n+    const printOutput = res.error ? log.warn : log.info;\n     printOutput(path, \"--version:\", res);\n \n     return res.status === 0;"}]}