{"sha": "2d713215a8fba320b2e5472d1ae6924e5a9d263c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzEzMjE1YThmYmEzMjBiMmU1NDcyZDFhZTY5MjRlNWE5ZDI2M2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T20:27:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T21:05:16Z"}, "message": "Record the internal reference count of environment boxes. Closes #981", "tree": {"sha": "269bbe6df1b56f501ea2a3582e17fcc330d8f63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269bbe6df1b56f501ea2a3582e17fcc330d8f63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d713215a8fba320b2e5472d1ae6924e5a9d263c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d713215a8fba320b2e5472d1ae6924e5a9d263c", "html_url": "https://github.com/rust-lang/rust/commit/2d713215a8fba320b2e5472d1ae6924e5a9d263c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d713215a8fba320b2e5472d1ae6924e5a9d263c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4c33e0092ac14d75f1667ae4dcafeec9728273", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4c33e0092ac14d75f1667ae4dcafeec9728273", "html_url": "https://github.com/rust-lang/rust/commit/6c4c33e0092ac14d75f1667ae4dcafeec9728273"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "2e3ff89291c714e9cc1cf6c5a6b9f2aecd90dcf4", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2d713215a8fba320b2e5472d1ae6924e5a9d263c/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2d713215a8fba320b2e5472d1ae6924e5a9d263c/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=2d713215a8fba320b2e5472d1ae6924e5a9d263c", "patch": "@@ -95,7 +95,12 @@ class irc : public shape::data<irc,shape::ptr> {\n     }\n \n     void walk_fn() {\n-        shape::data<irc,shape::ptr>::walk_fn_contents(dp);\n+\t// Record an irc for the environment box, but don't descend\n+\t// into it since it will be walked via the box's allocation\n+\tdp += sizeof(void *); // skip code pointer\n+\tuint8_t * box_ptr = shape::bump_dp<uint8_t *>(dp);\n+\tshape::ptr ref_count_dp(box_ptr);\n+\tmaybe_record_irc(ref_count_dp);\n     }\n \n     void walk_obj() {\n@@ -114,28 +119,32 @@ class irc : public shape::data<irc,shape::ptr> {\n     void walk_subcontext(irc &sub) { sub.walk(); }\n \n     void walk_box_contents(irc &sub, shape::ptr &ref_count_dp) {\n-        if (!ref_count_dp)\n-            return;\n-\n-        // Bump the internal reference count of the box.\n-        if (ircs.find((void *)ref_count_dp) == ircs.end()) {\n-\t    LOG(task, gc,\n-\t\t\"setting internal reference count for %p to 1\",\n-\t\t(void *)ref_count_dp);\n-            ircs[(void *)ref_count_dp] = 1;\n-        } else {\n-\t    uintptr_t newcount = ircs[(void *)ref_count_dp] + 1;\n-\t    LOG(task, gc,\n-\t\t\"bumping internal reference count for %p to %lu\",\n-\t\t(void *)ref_count_dp, newcount);\n-            ircs[(void *)ref_count_dp] = newcount;\n-        }\n+\tmaybe_record_irc(ref_count_dp);\n \n         // Do not traverse the contents of this box; it's in the allocation\n         // somewhere, so we're guaranteed to come back to it (if we haven't\n         // traversed it already).\n     }\n \n+    void maybe_record_irc(shape::ptr &ref_count_dp) {\n+        if (!ref_count_dp)\n+            return;\n+\n+\t// Bump the internal reference count of the box.\n+\tif (ircs.find((void *)ref_count_dp) == ircs.end()) {\n+\t  LOG(task, gc,\n+\t      \"setting internal reference count for %p to 1\",\n+\t      (void *)ref_count_dp);\n+\t  ircs[(void *)ref_count_dp] = 1;\n+\t} else {\n+\t  uintptr_t newcount = ircs[(void *)ref_count_dp] + 1;\n+\t  LOG(task, gc,\n+\t      \"bumping internal reference count for %p to %lu\",\n+\t      (void *)ref_count_dp, newcount);\n+\t  ircs[(void *)ref_count_dp] = newcount;\n+\t}\n+    }\n+\n     void walk_struct(const uint8_t *end_sp) {\n         while (this->sp != end_sp) {\n             this->walk();\n@@ -231,8 +240,8 @@ find_roots(rust_task *task, irc_map &ircs, std::vector<void *> &roots) {\n         } else {\n             LOG(task, gc, \"nonroot found: %p, irc %lu, ref count %lu\",\n \t\talloc, irc, ref_count);\n-            /*assert(irc == ref_count && \"Internal reference count must be \"\n-                   \"less than or equal to the total reference count!\");*/\n+            assert(irc == ref_count && \"Internal reference count must be \"\n+                   \"less than or equal to the total reference count!\");\n         }\n \n         ++begin;"}, {"sha": "33609d17c09d85902cc12dd7873173825c04fb03", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d713215a8fba320b2e5472d1ae6924e5a9d263c/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d713215a8fba320b2e5472d1ae6924e5a9d263c/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=2d713215a8fba320b2e5472d1ae6924e5a9d263c", "patch": "@@ -0,0 +1,10 @@\n+type foo = { mutable z : fn@() };\n+\n+fn nop() { }\n+fn nop_foo(_x : @foo) { }\n+\n+fn main() {\n+    let w = @{ mutable z: bind nop() };\n+    let x = bind nop_foo(w);\n+    w.z = x;\n+}\n\\ No newline at end of file"}]}