{"sha": "ff90c6353b1e78aee13acedbfd545b02bc9e830f", "node_id": "C_kwDOAAsO6NoAKGZmOTBjNjM1M2IxZTc4YWVlMTNhY2VkYmZkNTQ1YjAyYmM5ZTgzMGY", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-13T14:49:57Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-25T23:05:52Z"}, "message": "Cleanup the reporting of unreachable patterns", "tree": {"sha": "59cad530987dcfda79f055a4a901cfb0c3a0fc86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cad530987dcfda79f055a4a901cfb0c3a0fc86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff90c6353b1e78aee13acedbfd545b02bc9e830f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff90c6353b1e78aee13acedbfd545b02bc9e830f", "html_url": "https://github.com/rust-lang/rust/commit/ff90c6353b1e78aee13acedbfd545b02bc9e830f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff90c6353b1e78aee13acedbfd545b02bc9e830f/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003bbcb799c147ce004c597f77853155cee8a2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/003bbcb799c147ce004c597f77853155cee8a2be", "html_url": "https://github.com/rust-lang/rust/commit/003bbcb799c147ce004c597f77853155cee8a2be"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "42645fca3aa588cbf3a999ce605d86287df69818", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ff90c6353b1e78aee13acedbfd545b02bc9e830f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff90c6353b1e78aee13acedbfd545b02bc9e830f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=ff90c6353b1e78aee13acedbfd545b02bc9e830f", "patch": "@@ -190,20 +190,16 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         let scrut_ty = self.typeck_results.expr_ty_adjusted(scrut);\n         let report = compute_match_usefulness(&cx, &arms, scrut.hir_id, scrut_ty);\n \n-        report_arm_reachability(&cx, &report, |arm_span, arm_hir_id, catchall| {\n-            match source {\n-                hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n-                    unreachable_pattern(cx.tcx, arm_span, arm_hir_id, catchall);\n-                }\n-                // Unreachable patterns in try and await expressions occur when one of\n-                // the arms are an uninhabited type. Which is OK.\n-                hir::MatchSource::AwaitDesugar | hir::MatchSource::TryDesugar => {}\n+        match source {\n+            hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n+                report_arm_reachability(&cx, &report)\n             }\n-        });\n+            // Unreachable patterns in try and await expressions occur when one of\n+            // the arms are an uninhabited type. Which is OK.\n+            hir::MatchSource::AwaitDesugar | hir::MatchSource::TryDesugar => {}\n+        }\n \n         // Check if the match is exhaustive.\n-        // Note: An empty match isn't the same as an empty matrix for diagnostics purposes,\n-        // since an empty matrix can occur when there are arms, if those arms all have guards.\n         let is_empty_match = arms.is_empty();\n         let witnesses = report.non_exhaustiveness_witnesses;\n         if !witnesses.is_empty() {\n@@ -434,9 +430,10 @@ fn check_let_reachability<'p, 'tcx>(\n     let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n     let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n \n-    report_arm_reachability(&cx, &report, |arm_span, arm_hir_id, _| {\n-        unreachable_pattern(cx.tcx, arm_span, arm_hir_id, None)\n-    });\n+    // Report if the pattern is unreachable, which can only occur when the type is uninhabited.\n+    // This also reports unreachable sub-patterns though, so we can't just replace it with an\n+    // `is_uninhabited` check.\n+    report_arm_reachability(&cx, &report);\n \n     if report.non_exhaustiveness_witnesses.is_empty() {\n         // The match is exhaustive, i.e. the `if let` pattern is irrefutable.\n@@ -445,18 +442,15 @@ fn check_let_reachability<'p, 'tcx>(\n }\n \n /// Report unreachable arms, if any.\n-fn report_arm_reachability<'p, 'tcx, F>(\n+fn report_arm_reachability<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n     report: &UsefulnessReport<'p, 'tcx>,\n-    unreachable: F,\n-) where\n-    F: Fn(Span, HirId, Option<Span>),\n-{\n+) {\n     use Reachability::*;\n     let mut catchall = None;\n     for (arm, is_useful) in report.arm_usefulness.iter() {\n         match is_useful {\n-            Unreachable => unreachable(arm.pat.span, arm.hir_id, catchall),\n+            Unreachable => unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, catchall),\n             Reachable(unreachables) if unreachables.is_empty() => {}\n             // The arm is reachable, but contains unreachable subpatterns (from or-patterns).\n             Reachable(unreachables) => {"}]}