{"sha": "a609336d7287b3ddddbde30b1f0fb606bf149baf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDkzMzZkNzI4N2IzZGRkZGJkZTMwYjFmMGZiNjA2YmYxNDliYWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-06T10:56:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-06T10:56:59Z"}, "message": "Merge #4765\n\n4765: Fix type parameter defaults r=matklad a=flodiebold\n\nThey should not be applied in expression or pattern contexts, unless there are other explicitly given type args.\r\n\r\n(The existing tests about this were actually wrong.)\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "343d39c2a01bd3643bcab13eb01dfbd4f6a511cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343d39c2a01bd3643bcab13eb01dfbd4f6a511cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a609336d7287b3ddddbde30b1f0fb606bf149baf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe23Z7CRBK7hj4Ov3rIwAAdHIIAEfaZD4BGQ/QTszakCxilehv\nOTuJxeG1vYr9J49d0rN9hVCZ4xH3225SPMm1RBpbLKLwRVvkyit4a4optmI1JeeH\neW1PbxMG5b60YRi981K9ksR9pgZoT74gaAp2CZ//O3TwfvQ7b/JKGKQ97sEoT9Ae\nNk84BGj3YW9tFEPRcOeekgV1oNJ5Yq0l5HsvmNkjEmA+/ef/lM0KGmJaqfCvCbZ3\nRb2MewdZTkk95GxQYUFnj/k73LBntcDT+ACbxJePCMTV6sdDP4955YNe40mKwLfq\napHLHu2jgxNodaCXqVB6uLUhajpytKjF/8x2UyMY/H/GcS+ahombjsXidVwRHpI=\n=NQHU\n-----END PGP SIGNATURE-----\n", "payload": "tree 343d39c2a01bd3643bcab13eb01dfbd4f6a511cc\nparent 02f7b5d7abbab829c2a0f66cdcbb6678afb412a4\nparent a4a4a1854ebb53e1cdd7a5e3b308112bbbf3c676\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591441019 +0000\ncommitter GitHub <noreply@github.com> 1591441019 +0000\n\nMerge #4765\n\n4765: Fix type parameter defaults r=matklad a=flodiebold\n\nThey should not be applied in expression or pattern contexts, unless there are other explicitly given type args.\r\n\r\n(The existing tests about this were actually wrong.)\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a609336d7287b3ddddbde30b1f0fb606bf149baf", "html_url": "https://github.com/rust-lang/rust/commit/a609336d7287b3ddddbde30b1f0fb606bf149baf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a609336d7287b3ddddbde30b1f0fb606bf149baf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f7b5d7abbab829c2a0f66cdcbb6678afb412a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f7b5d7abbab829c2a0f66cdcbb6678afb412a4", "html_url": "https://github.com/rust-lang/rust/commit/02f7b5d7abbab829c2a0f66cdcbb6678afb412a4"}, {"sha": "a4a4a1854ebb53e1cdd7a5e3b308112bbbf3c676", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a4a1854ebb53e1cdd7a5e3b308112bbbf3c676", "html_url": "https://github.com/rust-lang/rust/commit/a4a4a1854ebb53e1cdd7a5e3b308112bbbf3c676"}], "stats": {"total": 307, "additions": 192, "deletions": 115}, "files": [{"sha": "90b06a62595c8f4d2afe16e45ea83764dbaf1b4c", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -195,7 +195,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|> = Test { t: 23, k: 33 };\n+    let test<|> = Test { t: 23u8, k: 33 };\n }\"#,\n             r#\"\n struct Test<K, T = u8> {\n@@ -204,7 +204,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test: Test<i32> = Test { t: 23, k: 33 };\n+    let test: Test<i32> = Test { t: 23u8, k: 33 };\n }\"#,\n         );\n     }"}, {"sha": "2e16e5120db0921367c81edc4df14b8151719438", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -439,13 +439,13 @@ impl<'a> InferenceContext<'a> {\n             };\n         return match resolution {\n             TypeNs::AdtId(AdtId::StructId(strukt)) => {\n-                let substs = Ty::substs_from_path(&ctx, path, strukt.into());\n+                let substs = Ty::substs_from_path(&ctx, path, strukt.into(), true);\n                 let ty = self.db.ty(strukt.into());\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n             TypeNs::EnumVariantId(var) => {\n-                let substs = Ty::substs_from_path(&ctx, path, var.into());\n+                let substs = Ty::substs_from_path(&ctx, path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(var.into())), unresolved)"}, {"sha": "1ad0d8397166599e1e36c345a645de7ea36595a8", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -95,7 +95,7 @@ impl<'a> InferenceContext<'a> {\n         // self_subst is just for the parent\n         let parent_substs = self_subst.unwrap_or_else(Substs::empty);\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n-        let substs = Ty::substs_from_path(&ctx, path, typable);\n+        let substs = Ty::substs_from_path(&ctx, path, typable, true);\n         let full_substs = Substs::builder(substs.len())\n             .use_parent_substs(&parent_substs)\n             .fill(substs.0[parent_substs.len()..].iter().cloned())\n@@ -141,6 +141,7 @@ impl<'a> InferenceContext<'a> {\n                     def,\n                     resolved_segment,\n                     remaining_segments_for_ty,\n+                    true,\n                 );\n                 if let Ty::Unknown = ty {\n                     return None;"}, {"sha": "42713928f451b813c2b8d6e9b03d2ec26140f148", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -323,6 +323,7 @@ impl Ty {\n         resolution: TypeNs,\n         resolved_segment: PathSegment<'_>,\n         remaining_segments: PathSegments<'_>,\n+        infer_args: bool,\n     ) -> (Ty, Option<TypeNs>) {\n         let ty = match resolution {\n             TypeNs::TraitId(trait_) => {\n@@ -400,9 +401,15 @@ impl Ty {\n                 ctx.db.ty(adt.into()).subst(&substs)\n             }\n \n-            TypeNs::AdtId(it) => Ty::from_hir_path_inner(ctx, resolved_segment, it.into()),\n-            TypeNs::BuiltinType(it) => Ty::from_hir_path_inner(ctx, resolved_segment, it.into()),\n-            TypeNs::TypeAliasId(it) => Ty::from_hir_path_inner(ctx, resolved_segment, it.into()),\n+            TypeNs::AdtId(it) => {\n+                Ty::from_hir_path_inner(ctx, resolved_segment, it.into(), infer_args)\n+            }\n+            TypeNs::BuiltinType(it) => {\n+                Ty::from_hir_path_inner(ctx, resolved_segment, it.into(), infer_args)\n+            }\n+            TypeNs::TypeAliasId(it) => {\n+                Ty::from_hir_path_inner(ctx, resolved_segment, it.into(), infer_args)\n+            }\n             // FIXME: report error\n             TypeNs::EnumVariantId(_) => return (Ty::Unknown, None),\n         };\n@@ -428,7 +435,13 @@ impl Ty {\n             ),\n             Some(i) => (path.segments().get(i - 1).unwrap(), path.segments().skip(i)),\n         };\n-        Ty::from_partly_resolved_hir_path(ctx, resolution, resolved_segment, remaining_segments)\n+        Ty::from_partly_resolved_hir_path(\n+            ctx,\n+            resolution,\n+            resolved_segment,\n+            remaining_segments,\n+            false,\n+        )\n     }\n \n     fn select_associated_type(\n@@ -474,13 +487,14 @@ impl Ty {\n         ctx: &TyLoweringContext<'_>,\n         segment: PathSegment<'_>,\n         typable: TyDefId,\n+        infer_args: bool,\n     ) -> Ty {\n         let generic_def = match typable {\n             TyDefId::BuiltinType(_) => None,\n             TyDefId::AdtId(it) => Some(it.into()),\n             TyDefId::TypeAliasId(it) => Some(it.into()),\n         };\n-        let substs = substs_from_path_segment(ctx, segment, generic_def, false);\n+        let substs = substs_from_path_segment(ctx, segment, generic_def, infer_args);\n         ctx.db.ty(typable).subst(&substs)\n     }\n \n@@ -493,6 +507,7 @@ impl Ty {\n         // `ValueTyDefId` is just a convenient way to pass generics and\n         // special-case enum variants\n         resolved: ValueTyDefId,\n+        infer_args: bool,\n     ) -> Substs {\n         let last = path.segments().last().expect(\"path should have at least one segment\");\n         let (segment, generic_def) = match resolved {\n@@ -515,22 +530,27 @@ impl Ty {\n                 (segment, Some(var.parent.into()))\n             }\n         };\n-        substs_from_path_segment(ctx, segment, generic_def, false)\n+        substs_from_path_segment(ctx, segment, generic_def, infer_args)\n     }\n }\n \n-pub(super) fn substs_from_path_segment(\n+fn substs_from_path_segment(\n     ctx: &TyLoweringContext<'_>,\n     segment: PathSegment<'_>,\n     def_generic: Option<GenericDefId>,\n-    _add_self_param: bool,\n+    infer_args: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n     let def_generics = def_generic.map(|def| generics(ctx.db.upcast(), def));\n \n     let (parent_params, self_params, type_params, impl_trait_params) =\n         def_generics.map_or((0, 0, 0, 0), |g| g.provenance_split());\n+    let total_len = parent_params + self_params + type_params + impl_trait_params;\n+\n     substs.extend(iter::repeat(Ty::Unknown).take(parent_params));\n+\n+    let mut had_explicit_args = false;\n+\n     if let Some(generic_args) = &segment.args_and_bindings {\n         if !generic_args.has_self_type {\n             substs.extend(iter::repeat(Ty::Unknown).take(self_params));\n@@ -542,31 +562,35 @@ pub(super) fn substs_from_path_segment(\n         for arg in generic_args.args.iter().skip(skip).take(expected_num) {\n             match arg {\n                 GenericArg::Type(type_ref) => {\n+                    had_explicit_args = true;\n                     let ty = Ty::from_hir(ctx, type_ref);\n                     substs.push(ty);\n                 }\n             }\n         }\n     }\n-    let total_len = parent_params + self_params + type_params + impl_trait_params;\n-    // add placeholders for args that were not provided\n-    for _ in substs.len()..total_len {\n-        substs.push(Ty::Unknown);\n-    }\n-    assert_eq!(substs.len(), total_len);\n \n-    // handle defaults\n-    if let Some(def_generic) = def_generic {\n-        let default_substs = ctx.db.generic_defaults(def_generic);\n-        assert_eq!(substs.len(), default_substs.len());\n+    // handle defaults. In expression or pattern path segments without\n+    // explicitly specified type arguments, missing type arguments are inferred\n+    // (i.e. defaults aren't used).\n+    if !infer_args || had_explicit_args {\n+        if let Some(def_generic) = def_generic {\n+            let default_substs = ctx.db.generic_defaults(def_generic);\n+            assert_eq!(total_len, default_substs.len());\n \n-        for (i, default_ty) in default_substs.iter().enumerate() {\n-            if substs[i] == Ty::Unknown {\n-                substs[i] = default_ty.clone();\n+            for default_ty in default_substs.iter().skip(substs.len()) {\n+                substs.push(default_ty.clone());\n             }\n         }\n     }\n \n+    // add placeholders for args that were not provided\n+    // FIXME: emit diagnostics in contexts where this is not allowed\n+    for _ in substs.len()..total_len {\n+        substs.push(Ty::Unknown);\n+    }\n+    assert_eq!(substs.len(), total_len);\n+\n     Substs(substs.into())\n }\n \n@@ -615,9 +639,7 @@ impl TraitRef {\n         segment: PathSegment<'_>,\n         resolved: TraitId,\n     ) -> Substs {\n-        let has_self_param =\n-            segment.args_and_bindings.as_ref().map(|a| a.has_self_type).unwrap_or(false);\n-        substs_from_path_segment(ctx, segment, Some(resolved.into()), !has_self_param)\n+        substs_from_path_segment(ctx, segment, Some(resolved.into()), false)\n     }\n \n     pub(crate) fn from_type_bound("}, {"sha": "5dfa0a014599fd75386563be0b39438663447f81", "filename": "crates/ra_hir_ty/src/tests/display_source_code.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -29,7 +29,7 @@ fn omit_default_type_parameters() {\n         //- /main.rs\n         struct Foo<T = u8> { t: T }\n         fn main() {\n-            let foo = Foo { t: 5 };\n+            let foo = Foo { t: 5u8 };\n             foo<|>;\n         }\n         \",\n@@ -41,7 +41,7 @@ fn omit_default_type_parameters() {\n         //- /main.rs\n         struct Foo<K, T = u8> { k: K, t: T }\n         fn main() {\n-            let foo = Foo { k: 400, t: 5 };\n+            let foo = Foo { k: 400, t: 5u8 };\n             foo<|>;\n         }\n         \","}, {"sha": "804297315c4d539e49441057ae9e67399d0ff51b", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -183,60 +183,6 @@ fn test() {\n     );\n }\n \n-#[test]\n-fn infer_associated_method_generics_with_default_param() {\n-    assert_snapshot!(\n-        infer(r#\"\n-struct Gen<T=u32> {\n-    val: T\n-}\n-\n-impl<T> Gen<T> {\n-    pub fn make() -> Gen<T> {\n-        loop { }\n-    }\n-}\n-\n-fn test() {\n-    let a = Gen::make();\n-}\n-\"#),\n-        @r###\"\n-    80..104 '{     ...     }': Gen<T>\n-    90..98 'loop { }': !\n-    95..98 '{ }': ()\n-    118..146 '{     ...e(); }': ()\n-    128..129 'a': Gen<u32>\n-    132..141 'Gen::make': fn make<u32>() -> Gen<u32>\n-    132..143 'Gen::make()': Gen<u32>\n-    \"###\n-    );\n-}\n-\n-#[test]\n-fn infer_associated_method_generics_with_default_tuple_param() {\n-    let t = type_at(\n-        r#\"\n-//- /main.rs\n-struct Gen<T=()> {\n-    val: T\n-}\n-\n-impl<T> Gen<T> {\n-    pub fn make() -> Gen<T> {\n-        loop { }\n-    }\n-}\n-\n-fn test() {\n-    let a = Gen::make();\n-    a.val<|>;\n-}\n-\"#,\n-    );\n-    assert_eq!(t, \"()\");\n-}\n-\n #[test]\n fn infer_associated_method_generics_without_args() {\n     assert_snapshot!("}, {"sha": "8a5031756faded01eb9d1cc3ca7c60d179b3663f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -1997,3 +1997,111 @@ fn foo() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn generic_default() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Thing<T = ()> { t: T }\n+enum OtherThing<T = ()> {\n+    One { t: T },\n+    Two(T),\n+}\n+\n+fn test(t1: Thing, t2: OtherThing, t3: Thing<i32>, t4: OtherThing<i32>) {\n+    t1.t;\n+    t3.t;\n+    match t2 {\n+        OtherThing::One { t } => { t; },\n+        OtherThing::Two(t) => { t; },\n+    }\n+    match t4 {\n+        OtherThing::One { t } => { t; },\n+        OtherThing::Two(t) => { t; },\n+    }\n+}\n+\"#),\n+        @r###\"\n+    98..100 't1': Thing<()>\n+    109..111 't2': OtherThing<()>\n+    125..127 't3': Thing<i32>\n+    141..143 't4': OtherThing<i32>\n+    162..385 '{     ...   } }': ()\n+    168..170 't1': Thing<()>\n+    168..172 't1.t': ()\n+    178..180 't3': Thing<i32>\n+    178..182 't3.t': i32\n+    188..283 'match ...     }': ()\n+    194..196 't2': OtherThing<()>\n+    207..228 'OtherT... { t }': OtherThing<()>\n+    225..226 't': ()\n+    232..238 '{ t; }': ()\n+    234..235 't': ()\n+    248..266 'OtherT...Two(t)': OtherThing<()>\n+    264..265 't': ()\n+    270..276 '{ t; }': ()\n+    272..273 't': ()\n+    288..383 'match ...     }': ()\n+    294..296 't4': OtherThing<i32>\n+    307..328 'OtherT... { t }': OtherThing<i32>\n+    325..326 't': i32\n+    332..338 '{ t; }': ()\n+    334..335 't': i32\n+    348..366 'OtherT...Two(t)': OtherThing<i32>\n+    364..365 't': i32\n+    370..376 '{ t; }': ()\n+    372..373 't': i32\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn generic_default_in_struct_literal() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Thing<T = ()> { t: T }\n+enum OtherThing<T = ()> {\n+    One { t: T },\n+    Two(T),\n+}\n+\n+fn test() {\n+    let x = Thing { t: loop {} };\n+    let y = Thing { t: () };\n+    let z = Thing { t: 1i32 };\n+    if let Thing { t } = z {\n+        t;\n+    }\n+\n+    let a = OtherThing::One { t: 1i32 };\n+    let b = OtherThing::Two(1i32);\n+}\n+\"#),\n+        @r###\"\n+    100..320 '{     ...32); }': ()\n+    110..111 'x': Thing<!>\n+    114..134 'Thing ...p {} }': Thing<!>\n+    125..132 'loop {}': !\n+    130..132 '{}': ()\n+    144..145 'y': Thing<()>\n+    148..163 'Thing { t: () }': Thing<()>\n+    159..161 '()': ()\n+    173..174 'z': Thing<i32>\n+    177..194 'Thing ...1i32 }': Thing<i32>\n+    188..192 '1i32': i32\n+    200..241 'if let...     }': ()\n+    207..218 'Thing { t }': Thing<i32>\n+    215..216 't': i32\n+    221..222 'z': Thing<i32>\n+    223..241 '{     ...     }': ()\n+    233..234 't': i32\n+    251..252 'a': OtherThing<i32>\n+    255..282 'OtherT...1i32 }': OtherThing<i32>\n+    276..280 '1i32': i32\n+    292..293 'b': OtherThing<i32>\n+    296..311 'OtherThing::Two': Two<i32>(i32) -> OtherThing<i32>\n+    296..317 'OtherT...(1i32)': OtherThing<i32>\n+    312..316 '1i32': i32\n+    \"###\n+    );\n+}"}, {"sha": "133fb5f398c9e5939f4973fbe5844459aff4bf6c", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -1806,33 +1806,33 @@ fn test() {\n }\n \"#),\n         @r###\"\n-65..69 'self': &Self\n-166..170 'self': Self\n-172..176 'args': Args\n-240..244 'self': &Foo\n-255..257 '{}': ()\n-335..336 'f': F\n-355..357 '{}': ()\n-444..690 '{     ...o(); }': ()\n-454..459 'lazy1': Lazy<Foo, fn() -> T>\n-476..485 'Lazy::new': fn new<Foo, fn() -> T>(fn() -> T) -> Lazy<Foo, fn() -> T>\n-476..493 'Lazy::...| Foo)': Lazy<Foo, fn() -> T>\n-486..492 '|| Foo': || -> T\n-489..492 'Foo': Foo\n-503..505 'r1': {unknown}\n-508..513 'lazy1': Lazy<Foo, fn() -> T>\n-508..519 'lazy1.foo()': {unknown}\n-561..576 'make_foo_fn_ptr': fn() -> Foo\n-592..603 'make_foo_fn': fn make_foo_fn() -> Foo\n-613..618 'lazy2': Lazy<Foo, fn() -> T>\n-635..644 'Lazy::new': fn new<Foo, fn() -> T>(fn() -> T) -> Lazy<Foo, fn() -> T>\n-635..661 'Lazy::...n_ptr)': Lazy<Foo, fn() -> T>\n-645..660 'make_foo_fn_ptr': fn() -> Foo\n-671..673 'r2': {unknown}\n-676..681 'lazy2': Lazy<Foo, fn() -> T>\n-676..687 'lazy2.foo()': {unknown}\n-550..552 '{}': ()\n-\"###\n+    65..69 'self': &Self\n+    166..170 'self': Self\n+    172..176 'args': Args\n+    240..244 'self': &Foo\n+    255..257 '{}': ()\n+    335..336 'f': F\n+    355..357 '{}': ()\n+    444..690 '{     ...o(); }': ()\n+    454..459 'lazy1': Lazy<Foo, || -> Foo>\n+    476..485 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n+    476..493 'Lazy::...| Foo)': Lazy<Foo, || -> Foo>\n+    486..492 '|| Foo': || -> Foo\n+    489..492 'Foo': Foo\n+    503..505 'r1': usize\n+    508..513 'lazy1': Lazy<Foo, || -> Foo>\n+    508..519 'lazy1.foo()': usize\n+    561..576 'make_foo_fn_ptr': fn() -> Foo\n+    592..603 'make_foo_fn': fn make_foo_fn() -> Foo\n+    613..618 'lazy2': Lazy<Foo, fn() -> Foo>\n+    635..644 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n+    635..661 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n+    645..660 'make_foo_fn_ptr': fn() -> Foo\n+    671..673 'r2': {unknown}\n+    676..681 'lazy2': Lazy<Foo, fn() -> Foo>\n+    676..687 'lazy2.foo()': {unknown}\n+    550..552 '{}': ()\n+    \"###\n     );\n }\n "}, {"sha": "846d8c69ba26f8acaf1082543080e7747b2db7d9", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -529,7 +529,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let zz<|> = Test { t: 23, k: 33 };\n+    let zz<|> = Test { t: 23u8, k: 33 };\n }\"#,\n             &[\"Test<i32, u8>\"],\n         );"}, {"sha": "7eb2cef735f49d61f3c91123cd3a260cd669199f", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609336d7287b3ddddbde30b1f0fb606bf149baf/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=a609336d7287b3ddddbde30b1f0fb606bf149baf", "patch": "@@ -415,7 +415,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let zz = Test { t: 23, k: 33 };\n+    let zz = Test { t: 23u8, k: 33 };\n     let zz_ref = &zz;\n }\"#,\n         );\n@@ -428,7 +428,7 @@ fn main() {\n                 label: \"Test<i32>\",\n             },\n             InlayHint {\n-                range: 105..111,\n+                range: 107..113,\n                 kind: TypeHint,\n                 label: \"&Test<i32>\",\n             },"}]}