{"sha": "a238d1284e3efc67bf97687a0701d8b1449bfae3", "node_id": "C_kwDOAAsO6NoAKGEyMzhkMTI4NGUzZWZjNjdiZjk3Njg3YTA3MDFkOGIxNDQ5YmZhZTM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T22:36:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T22:36:23Z"}, "message": "remove Clean trait implementation for ty::Predicate", "tree": {"sha": "1da41a10b602987f6c2f87a4afe6050916f858e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da41a10b602987f6c2f87a4afe6050916f858e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a238d1284e3efc67bf97687a0701d8b1449bfae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a238d1284e3efc67bf97687a0701d8b1449bfae3", "html_url": "https://github.com/rust-lang/rust/commit/a238d1284e3efc67bf97687a0701d8b1449bfae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a238d1284e3efc67bf97687a0701d8b1449bfae3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c0b12d177c507f767f9169ed966ef83597eb44", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c0b12d177c507f767f9169ed966ef83597eb44", "html_url": "https://github.com/rust-lang/rust/commit/61c0b12d177c507f767f9169ed966ef83597eb44"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "5a208768a758d8333409788face20f304cce5ad5", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a238d1284e3efc67bf97687a0701d8b1449bfae3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a238d1284e3efc67bf97687a0701d8b1449bfae3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=a238d1284e3efc67bf97687a0701d8b1449bfae3", "patch": "@@ -474,7 +474,7 @@ where\n         let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n \n         for p in clean_where_predicates {\n-            let (orig_p, p) = (p, p.clean(self.cx));\n+            let (orig_p, p) = (p, clean_predicate(p, self.cx));\n             if p.is_none() {\n                 continue;\n             }"}, {"sha": "b5244616309dcb5942eeb3e68f364c7eb9e4296e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a238d1284e3efc67bf97687a0701d8b1449bfae3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a238d1284e3efc67bf97687a0701d8b1449bfae3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a238d1284e3efc67bf97687a0701d8b1449bfae3", "patch": "@@ -307,26 +307,27 @@ fn clean_where_predicate<'tcx>(\n     })\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let bound_predicate = self.kind();\n-        match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred) => {\n-                clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n-            }\n-            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred),\n-            ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n-            ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n-            ty::PredicateKind::ConstEvaluatable(..) => None,\n-            ty::PredicateKind::WellFormed(..) => None,\n-\n-            ty::PredicateKind::Subtype(..)\n-            | ty::PredicateKind::Coerce(..)\n-            | ty::PredicateKind::ObjectSafe(..)\n-            | ty::PredicateKind::ClosureKind(..)\n-            | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n+pub(crate) fn clean_predicate<'tcx>(\n+    predicate: ty::Predicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let bound_predicate = predicate.kind();\n+    match bound_predicate.skip_binder() {\n+        ty::PredicateKind::Trait(pred) => {\n+            clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n         }\n+        ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred),\n+        ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n+        ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n+        ty::PredicateKind::ConstEvaluatable(..) => None,\n+        ty::PredicateKind::WellFormed(..) => None,\n+\n+        ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n+        | ty::PredicateKind::ObjectSafe(..)\n+        | ty::PredicateKind::ClosureKind(..)\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n     }\n }\n \n@@ -707,7 +708,7 @@ fn clean_ty_generics<'tcx>(\n \n             if let Some(param_idx) = param_idx {\n                 if let Some(b) = impl_trait.get_mut(&param_idx.into()) {\n-                    let p: WherePredicate = p.clean(cx)?;\n+                    let p: WherePredicate = clean_predicate(*p, cx)?;\n \n                     b.extend(\n                         p.get_bounds()\n@@ -764,7 +765,7 @@ fn clean_ty_generics<'tcx>(\n     // Now that `cx.impl_trait_bounds` is populated, we can process\n     // remaining predicates which could contain `impl Trait`.\n     let mut where_predicates =\n-        where_predicates.into_iter().flat_map(|p| p.clean(cx)).collect::<Vec<_>>();\n+        where_predicates.into_iter().flat_map(|p| clean_predicate(*p, cx)).collect::<Vec<_>>();\n \n     // Type parameters have a Sized bound by default unless removed with\n     // ?Sized. Scan through the predicates and mark any type parameter with"}]}