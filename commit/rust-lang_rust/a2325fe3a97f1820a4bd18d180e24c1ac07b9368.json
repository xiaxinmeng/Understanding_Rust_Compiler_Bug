{"sha": "a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "node_id": "C_kwDOAAsO6NoAKGEyMzI1ZmUzYTk3ZjE4MjBhNGJkMThkMTgwZTI0YzFhYzA3YjkzNjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-04T16:28:01Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-04T16:28:01Z"}, "message": "Remove an option and choose a behaviour-preserving default instead.", "tree": {"sha": "6d5eb0c6c464c1c969aab9161e26ea0a462a921f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5eb0c6c464c1c969aab9161e26ea0a462a921f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "html_url": "https://github.com/rust-lang/rust/commit/a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2325fe3a97f1820a4bd18d180e24c1ac07b9368/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c008e440e59d793c2883f7dd712481dc965045", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c008e440e59d793c2883f7dd712481dc965045", "html_url": "https://github.com/rust-lang/rust/commit/47c008e440e59d793c2883f7dd712481dc965045"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2a61a3ec3306c1175a11b00202ace11b035f7633", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2325fe3a97f1820a4bd18d180e24c1ac07b9368/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2325fe3a97f1820a4bd18d180e24c1ac07b9368/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "patch": "@@ -274,7 +274,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n-            None,\n+            ty::BoundConstness::NotConst,\n         );\n         if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n@@ -324,7 +324,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generic_args: &'a hir::GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Option<Ty<'tcx>>,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n@@ -538,7 +538,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n-        if let Some(ty::BoundConstness::ConstIfConst) = constness\n+        if let ty::BoundConstness::ConstIfConst = constness\n             && generics.has_self && !tcx.has_attr(def_id, sym::const_trait)\n         {\n             tcx.sess.emit_err(crate::errors::ConstBoundForNonConstTrait { span } );\n@@ -611,7 +611,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n-            None,\n+            ty::BoundConstness::NotConst,\n         );\n \n         if let Some(b) = item_segment.args().bindings.first() {\n@@ -641,7 +641,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n             true,\n-            Some(constness),\n+            constness,\n         )\n     }\n \n@@ -668,7 +668,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             Some(self_ty),\n-            Some(constness),\n+            constness,\n         );\n \n         let tcx = self.tcx();\n@@ -798,7 +798,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &hir::PathSegment<'_>,\n         is_impl: bool,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> ty::TraitRef<'tcx> {\n         let (substs, _) = self.create_substs_for_ast_trait_ref(\n             span,\n@@ -822,7 +822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &'a hir::PathSegment<'a>,\n         is_impl: bool,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment, is_impl);\n \n@@ -2115,7 +2115,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty,\n             trait_segment,\n             false,\n-            Some(constness),\n+            constness,\n         );\n \n         let item_substs = self.create_substs_for_associated_item(\n@@ -2686,7 +2686,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     &GenericArgs::none(),\n                     true,\n                     None,\n-                    None,\n+                    ty::BoundConstness::NotConst,\n                 );\n                 EarlyBinder(self.normalize_ty(span, tcx.at(span).type_of(def_id)))\n                     .subst(tcx, substs)"}]}