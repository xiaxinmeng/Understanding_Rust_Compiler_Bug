{"sha": "945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWQ1N2E2ZmY4ZDMxMzM3YmY2Y2RlZGNmYTZjNGEwM2Q5ZjFkZGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T00:58:45Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T00:58:45Z"}, "message": "Export VecUnboxedRepr from vec so a test case can use it", "tree": {"sha": "1d77be7634a9c56ddd6091114c85658b89ed6764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d77be7634a9c56ddd6091114c85658b89ed6764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "html_url": "https://github.com/rust-lang/rust/commit/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1ff31f4a70b6bd7840cf75af9395aedfac060b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ff31f4a70b6bd7840cf75af9395aedfac060b", "html_url": "https://github.com/rust-lang/rust/commit/3c1ff31f4a70b6bd7840cf75af9395aedfac060b"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "3fa37a2fb8e5d89efcff66fbfb76cb0987fd72d2", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "patch": "@@ -246,7 +246,7 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n     }\n \n     fn visit_unboxed_vec(mtbl: uint, inner: *TyDesc) -> bool {\n-        self.align_to::<vec::raw::UnboxedVecRepr>();\n+        self.align_to::<vec::UnboxedVecRepr>();\n         if ! self.inner.visit_vec(mtbl, inner) { return false; }\n         true\n     }"}, {"sha": "2003949d6314693417f23df60872358d86aa5cab", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "patch": "@@ -15,7 +15,8 @@ use to_str::ToStr;\n use cast::transmute;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n use reflect::{MovePtr, MovePtrAdaptor};\n-use vec::raw::{VecRepr, UnboxedVecRepr, SliceRepr};\n+use vec::UnboxedVecRepr;\n+use vec::raw::{VecRepr, SliceRepr};\n pub use box::raw::BoxRepr;\n use box::raw::BoxHeaderRepr;\n \n@@ -303,7 +304,7 @@ impl ReprVisitor : TyVisitor {\n \n \n     fn visit_unboxed_vec(mtbl: uint, inner: *TyDesc) -> bool {\n-        do self.get::<vec::raw::UnboxedVecRepr> |b| {\n+        do self.get::<vec::UnboxedVecRepr> |b| {\n             self.write_unboxed_vec_repr(mtbl, b, inner);\n         }\n     }"}, {"sha": "b242ed5aee4f577c160180fd2d1b96b83c0dec71", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=945d57a6ff8d31337bf6cdedcfa6c4a03d9f1ddc", "patch": "@@ -1671,6 +1671,13 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n     raw::from_buf_raw(ptr, elts)\n }\n \n+/// The internal 'unboxed' representation of a vector\n+pub struct UnboxedVecRepr {\n+    mut fill: uint,\n+    mut alloc: uint,\n+    data: u8\n+}\n+\n /// Unsafe operations\n mod raw {\n \n@@ -1680,13 +1687,6 @@ mod raw {\n         unboxed: UnboxedVecRepr\n     }\n \n-    /// The internal 'unboxed' representation of a vector\n-    pub struct UnboxedVecRepr {\n-        mut fill: uint,\n-        mut alloc: uint,\n-        data: u8\n-    }\n-\n     pub type SliceRepr = {\n         mut data: *u8,\n         mut len: uint"}]}