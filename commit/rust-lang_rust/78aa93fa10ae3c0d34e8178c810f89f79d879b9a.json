{"sha": "78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YWE5M2ZhMTBhZTNjMGQzNGU4MTc4YzgxMGY4OWY3OWQ4NzliOWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T04:45:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T04:45:51Z"}, "message": "correctly reject functions pointers that had arithmetic done to them", "tree": {"sha": "ef30c4b9d65bb4fcd50606de62a9e877a3450ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef30c4b9d65bb4fcd50606de62a9e877a3450ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "html_url": "https://github.com/rust-lang/rust/commit/78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b1582b383ba98ad458001c332004b500dd39eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1582b383ba98ad458001c332004b500dd39eed", "html_url": "https://github.com/rust-lang/rust/commit/7b1582b383ba98ad458001c332004b500dd39eed"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "4cf3ecb8215ae0cbee631220de22d49719248b73", "filename": "src/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "patch": "@@ -480,11 +480,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n     }\n \n-    pub fn get_fn(&self, id: AllocId) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n-        debug!(\"reading fn ptr: {}\", id);\n-        match self.functions.get(&id) {\n+    pub fn get_fn(&self, ptr: Pointer) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+        if ptr.offset != 0 {\n+            return Err(EvalError::InvalidFunctionPointer);\n+        }\n+        debug!(\"reading fn ptr: {}\", ptr.alloc_id);\n+        match self.functions.get(&ptr.alloc_id) {\n             Some(&fndef) => Ok(fndef),\n-            None => match self.alloc_map.get(&id) {\n+            None => match self.alloc_map.get(&ptr.alloc_id) {\n                 Some(_) => Err(EvalError::ExecuteMemory),\n                 None => Err(EvalError::InvalidFunctionPointer),\n             }"}, {"sha": "22b1bf309ce8b7a4cce10d3427f4c7abf3cc351c", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let (fn_def, sig) = match func_ty.sty {\n                     ty::TyFnPtr(sig) => {\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr()?;\n-                        let instance = self.memory.get_fn(fn_ptr.alloc_id)?;\n+                        let instance = self.memory.get_fn(fn_ptr)?;\n                         let instance_ty = instance.def.def_ty(self.tcx);\n                         let instance_ty = self.monomorphize(instance_ty, instance.substs);\n                         match instance_ty.sty {\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let ptr_size = self.memory.pointer_size();\n                 let (_, vtable) = self.eval_operand(&arg_operands[0])?.expect_ptr_vtable_pair(&self.memory)?;\n                 let fn_ptr = self.memory.read_ptr(vtable.offset(ptr_size * (idx as u64 + 3), self.memory.layout)?)?;\n-                let instance = self.memory.get_fn(fn_ptr.to_ptr()?.alloc_id)?;\n+                let instance = self.memory.get_fn(fn_ptr.to_ptr()?)?;\n                 let mut arg_operands = arg_operands.to_vec();\n                 let ty = self.operand_ty(&arg_operands[0]);\n                 let ty = self.get_field_ty(ty, 0)?;\n@@ -596,7 +596,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let u8_ptr_ty = self.tcx.mk_mut_ptr(self.tcx.types.u8);\n                 let f = args[0].read_ptr(&self.memory)?.to_ptr()?;\n                 let data = args[1].read_ptr(&self.memory)?;\n-                let f_instance = self.memory.get_fn(f.alloc_id)?;\n+                let f_instance = self.memory.get_fn(f)?;\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n \n                 // Now we make a function call.  TODO: Consider making this re-usable?  EvalContext::step does sth. similar for the TLS dtors,\n@@ -723,7 +723,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves...)\n                 let dtor = match args[1].read_ptr(&self.memory)? {\n-                    PrimVal::Ptr(dtor_ptr) => Some(self.memory.get_fn(dtor_ptr.alloc_id)?),\n+                    PrimVal::Ptr(dtor_ptr) => Some(self.memory.get_fn(dtor_ptr)?),\n                     PrimVal::Bytes(0) => None,\n                     PrimVal::Bytes(_) => return Err(EvalError::ReadBytesAsPointer),\n                     PrimVal::Undef => return Err(EvalError::ReadUndefBytes),"}, {"sha": "680776968f9898f6ba0046bc2325a389d33f5195", "filename": "src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78aa93fa10ae3c0d34e8178c810f89f79d879b9a/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=78aa93fa10ae3c0d34e8178c810f89f79d879b9a", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match self.read_ptr(vtable, self.tcx.mk_nil_ptr())? {\n             // some values don't need to call a drop impl, so the value is null\n             Value::ByVal(PrimVal::Bytes(0)) => Ok(None),\n-            Value::ByVal(PrimVal::Ptr(drop_fn)) => self.memory.get_fn(drop_fn.alloc_id).map(Some),\n+            Value::ByVal(PrimVal::Ptr(drop_fn)) => self.memory.get_fn(drop_fn).map(Some),\n             _ => Err(EvalError::ReadBytesAsPointer),\n         }\n     }"}]}