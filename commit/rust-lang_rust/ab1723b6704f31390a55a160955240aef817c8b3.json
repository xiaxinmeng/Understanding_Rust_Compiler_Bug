{"sha": "ab1723b6704f31390a55a160955240aef817c8b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMTcyM2I2NzA0ZjMxMzkwYTU1YTE2MDk1NTI0MGFlZjgxN2M4YjM=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T17:31:42Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T17:32:01Z"}, "message": "rustc: Add long diagnostics for E0301", "tree": {"sha": "e8ae236cbad02b0137a9e94d7233f11bfe4f9d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ae236cbad02b0137a9e94d7233f11bfe4f9d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1723b6704f31390a55a160955240aef817c8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1723b6704f31390a55a160955240aef817c8b3", "html_url": "https://github.com/rust-lang/rust/commit/ab1723b6704f31390a55a160955240aef817c8b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1723b6704f31390a55a160955240aef817c8b3/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c6f4b6d1d57ef53886034b91f46e09f892a2851", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6f4b6d1d57ef53886034b91f46e09f892a2851", "html_url": "https://github.com/rust-lang/rust/commit/9c6f4b6d1d57ef53886034b91f46e09f892a2851"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "3495f8eb160f45c45a95214651777b0d531742b9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab1723b6704f31390a55a160955240aef817c8b3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1723b6704f31390a55a160955240aef817c8b3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ab1723b6704f31390a55a160955240aef817c8b3", "patch": "@@ -139,6 +139,20 @@ for item in xs {\n }\n \"##,\n \n+E0301: r##\"\n+Mutable borrows are not allowed in pattern guards, because matching cannot have\n+side effects. Side effects could alter the matched object or the environment\n+on which the match depends in such a way, that the match would not be\n+exhaustive. For instance, the following would not match any arm if mutable\n+borrows were allowed:\n+\n+match Some(()) {\n+    None => { },\n+    option if option.take().is_none() => { /* impossible, option is `Some` */ },\n+    Some(_) => { } // When the previous match failed, the option became `None`.\n+}\n+\"##,\n+\n E0303: r##\"\n In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n@@ -224,7 +238,6 @@ register_diagnostics! {\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     E0300, // unexpanded macro\n-    E0301, // cannot mutable borrow in a pattern guard\n     E0302, // cannot assign in a pattern guard\n     E0304, // expected signed integer constant\n     E0305, // expected constant"}]}