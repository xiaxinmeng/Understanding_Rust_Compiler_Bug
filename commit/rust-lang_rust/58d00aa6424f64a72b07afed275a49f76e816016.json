{"sha": "58d00aa6424f64a72b07afed275a49f76e816016", "node_id": "C_kwDOAAsO6NoAKDU4ZDAwYWE2NDI0ZjY0YTcyYjA3YWZlZDI3NWE0OWY3NmU4MTYwMTY", "commit": {"author": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-11T13:37:49Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-11T16:45:53Z"}, "message": "Add target_os_is_unix helper", "tree": {"sha": "b3f9961254f696cd31948f25e8a3e225a684b156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f9961254f696cd31948f25e8a3e225a684b156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d00aa6424f64a72b07afed275a49f76e816016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d00aa6424f64a72b07afed275a49f76e816016", "html_url": "https://github.com/rust-lang/rust/commit/58d00aa6424f64a72b07afed275a49f76e816016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d00aa6424f64a72b07afed275a49f76e816016/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada7b72a879d79aaa06f0a2a95edd520615da1a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada7b72a879d79aaa06f0a2a95edd520615da1a2", "html_url": "https://github.com/rust-lang/rust/commit/ada7b72a879d79aaa06f0a2a95edd520615da1a2"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "b494e85075c41b3d2cfaa7e2670a9b8f30ac9fbc", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=58d00aa6424f64a72b07afed275a49f76e816016", "patch": "@@ -895,3 +895,9 @@ impl std::fmt::Display for HexRange {\n         write!(f, \"[{:#x}..{:#x}]\", self.0.start.bytes(), self.0.end().bytes())\n     }\n }\n+\n+/// Helper function used inside the shims of foreign functions to check that\n+/// `target_os` is a supported UNIX OS.\n+pub fn target_os_is_unix(target_os: &str) -> bool {\n+    matches!(target_os, \"linux\" | \"macos\")\n+}"}, {"sha": "499e9f8a201fd843341ce43a38709ddc9842592d", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=58d00aa6424f64a72b07afed275a49f76e816016", "patch": "@@ -1,6 +1,7 @@\n use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n+use crate::helpers::target_os_is_unix;\n use crate::*;\n use shims::unix::dlsym as unix;\n use shims::windows::dlsym as windows;\n@@ -18,7 +19,8 @@ impl Dlsym {\n     pub fn from_str<'tcx>(name: &[u8], target_os: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         let name = &*String::from_utf8_lossy(name);\n         Ok(match target_os {\n-            \"linux\" | \"macos\" => unix::Dlsym::from_str(name, target_os)?.map(Dlsym::Posix),\n+            target if target_os_is_unix(target) =>\n+                unix::Dlsym::from_str(name, target)?.map(Dlsym::Posix),\n             \"windows\" => windows::Dlsym::from_str(name)?.map(Dlsym::Windows),\n             os => bug!(\"dlsym not implemented for target_os {}\", os),\n         })"}, {"sha": "91acff40fe165d7b433a5c71201dbcb2f3bf2cd0", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=58d00aa6424f64a72b07afed275a49f76e816016", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_target::abi::Size;\n \n+use crate::helpers::target_os_is_unix;\n use crate::*;\n \n /// Check whether an operation that writes to a target buffer was successful.\n@@ -55,7 +56,7 @@ impl<'tcx> EnvVars<'tcx> {\n                 };\n                 if forward {\n                     let var_ptr = match target_os {\n-                        \"linux\" | \"macos\" =>\n+                        target if target_os_is_unix(target) =>\n                             alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,\n                         \"windows\" => alloc_env_var_as_wide_str(name.as_ref(), value.as_ref(), ecx)?,\n                         unsupported =>"}, {"sha": "cd4fedad0fba020c932275582862970d1d3f65d8", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d00aa6424f64a72b07afed275a49f76e816016/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=58d00aa6424f64a72b07afed275a49f76e816016", "patch": "@@ -22,7 +22,7 @@ use rustc_target::{\n };\n \n use super::backtrace::EvalContextExt as _;\n-use crate::helpers::convert::Truncate;\n+use crate::helpers::{convert::Truncate, target_os_is_unix};\n use crate::*;\n \n /// Returned by `emulate_foreign_item_by_name`.\n@@ -702,7 +702,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_ref() {\n-                \"linux\" | \"macos\" => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }"}]}