{"sha": "287af0403a0cf0f9594b4eb2159235751487fba9", "node_id": "C_kwDOAAsO6NoAKDI4N2FmMDQwM2EwY2YwZjk1OTRiNGViMjE1OTIzNTc1MTQ4N2ZiYTk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-04T06:13:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T06:13:16Z"}, "message": "Rollup merge of #86828 - lambinoo:67441-const-fn-copied-take-replace, r=joshtriplett\n\nconst fn for option copied, take & replace\n\nTracking issue: [#67441](https://github.com/rust-lang/rust/issues/67441)\n\nAdding const fn for the copied, take and replace method of Option. Also adding necessary unit test.\n\nIt's my first contribution so I am pretty sure I don't know what I'm doing but there's a first for everything!", "tree": {"sha": "8a136f507099cc27a520c5f5697cc3a5c41911bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a136f507099cc27a520c5f5697cc3a5c41911bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287af0403a0cf0f9594b4eb2159235751487fba9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWpt8CRBK7hj4Ov3rIwAAs3wIAGkPmAWawS8IWRKAlE+0IOVr\nnRqoDlCH9uu6y1rc6GrGztwMNzARPw0/E3yo2Wdz/55ZszwGoFNW3euTXzP50jj+\nStQYTV7g1uWncmRgzPEVCTwHT3mSqH46WTMvcFF8LD4Uxy+RYG51Jx30TP6b2pE4\nZFwwHc0EauEn0IrMRVX7icPnUDk3fLi3fu0cP8FpJMmv+dazMEGZPbpAmlotpz8U\naS/B1fkX+u3EaKU7tVNDdT+WezJDdxZSgVwmhRdhcVdlOVArLNEePZeS8bgkuAT8\naDXExmPu1jKnJjtHoYuggf3/Cdy6kfzE9s/dvwUMKYRPtzW4kf5I2KQ5P1G2KyU=\n=D8ch\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a136f507099cc27a520c5f5697cc3a5c41911bf\nparent 22714ed4e3954b3d60b3650bad743ec4b3d64d27\nparent 10ddabc194cc3349d4cd0951b00484d736edc6aa\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633327996 -0700\ncommitter GitHub <noreply@github.com> 1633327996 -0700\n\nRollup merge of #86828 - lambinoo:67441-const-fn-copied-take-replace, r=joshtriplett\n\nconst fn for option copied, take & replace\n\nTracking issue: [#67441](https://github.com/rust-lang/rust/issues/67441)\n\nAdding const fn for the copied, take and replace method of Option. Also adding necessary unit test.\n\nIt's my first contribution so I am pretty sure I don't know what I'm doing but there's a first for everything!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287af0403a0cf0f9594b4eb2159235751487fba9", "html_url": "https://github.com/rust-lang/rust/commit/287af0403a0cf0f9594b4eb2159235751487fba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287af0403a0cf0f9594b4eb2159235751487fba9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22714ed4e3954b3d60b3650bad743ec4b3d64d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/22714ed4e3954b3d60b3650bad743ec4b3d64d27", "html_url": "https://github.com/rust-lang/rust/commit/22714ed4e3954b3d60b3650bad743ec4b3d64d27"}, {"sha": "10ddabc194cc3349d4cd0951b00484d736edc6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ddabc194cc3349d4cd0951b00484d736edc6aa", "html_url": "https://github.com/rust-lang/rust/commit/10ddabc194cc3349d4cd0951b00484d736edc6aa"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "45ef1fcde2a55929588b3969f26d9d9685f677a7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=287af0403a0cf0f9594b4eb2159235751487fba9", "patch": "@@ -91,6 +91,7 @@\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_option)]\n #![feature(const_pin)]\n+#![feature(const_replace)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "3259e142a0c2ac0e5075b4755c1a2ff278804449", "filename": "library/core/src/option.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=287af0403a0cf0f9594b4eb2159235751487fba9", "patch": "@@ -544,8 +544,8 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n     }\n@@ -564,8 +564,8 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|_| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     pub const fn is_none(&self) -> bool {\n         !self.is_some()\n     }\n@@ -1318,8 +1318,10 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn take(&mut self) -> Option<T> {\n-        mem::take(self)\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    pub const fn take(&mut self) -> Option<T> {\n+        // FIXME replace `mem::replace` by `mem::take` when the latter is const ready\n+        mem::replace(self, None)\n     }\n \n     /// Replaces the actual value in the option by the value given in parameter,\n@@ -1340,8 +1342,9 @@ impl<T> Option<T> {\n     /// assert_eq!(old, None);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"option_replace\", since = \"1.31.0\")]\n-    pub fn replace(&mut self, value: T) -> Option<T> {\n+    pub const fn replace(&mut self, value: T) -> Option<T> {\n         mem::replace(self, Some(value))\n     }\n \n@@ -1446,8 +1449,14 @@ impl<T: Copy> Option<&T> {\n     /// assert_eq!(copied, Some(12));\n     /// ```\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n-    pub fn copied(self) -> Option<T> {\n-        self.map(|&t| t)\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    pub const fn copied(self) -> Option<T> {\n+        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const\n+        // ready yet, should be reverted when possible to avoid code repetition\n+        match self {\n+            Some(&v) => Some(v),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "8995f96b1238a654badb66cece7ed962f109dd3c", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287af0403a0cf0f9594b4eb2159235751487fba9/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=287af0403a0cf0f9594b4eb2159235751487fba9", "patch": "@@ -367,6 +367,19 @@ fn option_const() {\n \n     const IS_NONE: bool = OPTION.is_none();\n     assert!(!IS_NONE);\n+\n+    const COPIED: Option<usize> = OPTION.as_ref().copied();\n+    assert_eq!(COPIED, OPTION);\n+}\n+\n+#[test]\n+const fn option_const_mut() {\n+    // test that the methods of `Option` that take mutable references are usable in a const context\n+\n+    let mut option: Option<usize> = Some(32);\n+\n+    let _take = option.take();\n+    let _replace = option.replace(42);\n }\n \n #[test]"}]}