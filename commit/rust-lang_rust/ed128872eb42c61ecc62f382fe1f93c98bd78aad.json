{"sha": "ed128872eb42c61ecc62f382fe1f93c98bd78aad", "node_id": "C_kwDOAAsO6NoAKGVkMTI4ODcyZWI0MmM2MWVjYzYyZjM4MmZlMWY5M2M5OGJkNzhhYWQ", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2022-12-30T08:05:03Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-02T14:52:32Z"}, "message": "remove needless borrows", "tree": {"sha": "7a01c8ddd717118730bf08a63ef11cc17676d1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a01c8ddd717118730bf08a63ef11cc17676d1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed128872eb42c61ecc62f382fe1f93c98bd78aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed128872eb42c61ecc62f382fe1f93c98bd78aad", "html_url": "https://github.com/rust-lang/rust/commit/ed128872eb42c61ecc62f382fe1f93c98bd78aad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed128872eb42c61ecc62f382fe1f93c98bd78aad/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77051679d70ffb7421b1fb75402306a51c2337bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/77051679d70ffb7421b1fb75402306a51c2337bd", "html_url": "https://github.com/rust-lang/rust/commit/77051679d70ffb7421b1fb75402306a51c2337bd"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "e6b05f27a5447b20606e1162769af1a510bdacda", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -542,7 +542,7 @@ impl<'a> AssocItemCollector<'a> {\n             if !attrs.is_cfg_enabled(self.expander.cfg_options()) {\n                 self.inactive_diagnostics.push(DefDiagnostic::unconfigured_code(\n                     self.module_id.local_id,\n-                    InFile::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast()),\n+                    InFile::new(self.expander.current_file_id(), item.ast_id(item_tree).upcast()),\n                     attrs.cfg().unwrap(),\n                     self.expander.cfg_options().clone(),\n                 ));\n@@ -551,7 +551,7 @@ impl<'a> AssocItemCollector<'a> {\n \n             'attrs: for attr in &*attrs {\n                 let ast_id =\n-                    AstId::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast());\n+                    AstId::new(self.expander.current_file_id(), item.ast_id(item_tree).upcast());\n                 let ast_id_with_path = AstIdWithPath { path: (*attr.path).clone(), ast_id };\n \n                 if let Ok(ResolvedAttr::Macro(call_id)) = self.def_map.resolve_attr_macro("}, {"sha": "ddd7ad99e9ad3cd083821803bcb0b64ae700dd98", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -176,7 +176,7 @@ fn find_path_for_module(\n \n     // - if relative paths are fine, check if we are searching for a parent\n     if prefixed.filter(PrefixKind::is_absolute).is_none() {\n-        if let modpath @ Some(_) = find_self_super(&def_map, module_id, from) {\n+        if let modpath @ Some(_) = find_self_super(def_map, module_id, from) {\n             return modpath;\n         }\n     }"}, {"sha": "1955745c3b0943d2bed10c014de79912bea406c6", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -1094,7 +1094,7 @@ impl DefCollector<'_> {\n                         ast_id,\n                         *expand_to,\n                         self.def_map.krate,\n-                        &resolver_def_id,\n+                        resolver_def_id,\n                         &mut |_err| (),\n                     );\n                     if let Ok(Ok(call_id)) = call_id {\n@@ -1110,7 +1110,7 @@ impl DefCollector<'_> {\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver,\n+                        resolver,\n                     );\n \n                     if let Ok((macro_id, def_id, call_id)) = id {"}, {"sha": "58d192f9fe0085b145f39acef889b29b878f5996", "filename": "crates/hir-expand/src/builtin_attr_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -115,7 +115,8 @@ pub fn pseudo_derive_attr_expansion(\n     };\n \n     let mut token_trees = Vec::new();\n-    for tt in (&args.token_trees)\n+    for tt in args\n+        .token_trees\n         .split(|tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct { char: ',', .. }))))\n     {\n         token_trees.push(mk_leaf('#'));"}, {"sha": "e8b3e312aab7aa3a33149ae2ef7079cfe793555b", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -62,7 +62,7 @@ impl<'a> UnescapedName<'a> {\n                     it.clone()\n                 }\n             }\n-            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+            Repr::TupleField(it) => SmolStr::new(it.to_string()),\n         }\n     }\n }\n@@ -139,7 +139,7 @@ impl Name {\n     pub fn to_smol_str(&self) -> SmolStr {\n         match &self.0 {\n             Repr::Text(it) => it.clone(),\n-            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+            Repr::TupleField(it) => SmolStr::new(it.to_string()),\n         }\n     }\n "}, {"sha": "d1660914766c2216e35e929041be02e805c2f963", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -404,7 +404,7 @@ pub(crate) fn path_to_const(\n     args_lazy: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n ) -> Option<Const> {\n-    match resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n+    match resolver.resolve_path_in_value_ns_fully(db.upcast(), path) {\n         Some(ValueNs::GenericParam(p)) => {\n             let ty = db.const_param_ty(p);\n             let args = args_lazy();"}, {"sha": "c5aa7357772c3c5d5363c66de00992d60899aedb", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -1335,7 +1335,7 @@ impl<'a> InferenceContext<'a> {\n                             ty,\n                             c,\n                             ParamLoweringMode::Placeholder,\n-                            || generics(this.db.upcast(), (&this.resolver).generic_def().unwrap()),\n+                            || generics(this.db.upcast(), this.resolver.generic_def().unwrap()),\n                             DebruijnIndex::INNERMOST,\n                         )\n                     },"}, {"sha": "e32c760b8b0706afd0181fd96dc60bd614f40642", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -153,7 +153,7 @@ impl<'a> InferenceContext<'a> {\n     ) -> Ty {\n         let mut expected = self.resolve_ty_shallow(expected);\n \n-        if is_non_ref_pat(&self.body, pat) {\n+        if is_non_ref_pat(self.body, pat) {\n             let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 pat_adjustments.push(expected.clone());"}, {"sha": "7a1cca3143ec85ccb6a132865e8cc1e8fb7b81e3", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -241,7 +241,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n \n fn layout_of_unit(cx: &LayoutCx<'_>, dl: &TargetDataLayout) -> Result<Layout, LayoutError> {\n     cx.univariant::<RustcEnumVariantIdx, &&Layout>(\n-        &dl,\n+        dl,\n         &[],\n         &ReprOptions::default(),\n         StructKind::AlwaysSized,"}, {"sha": "d97cb4bc711bdd7d35bc90afd93e67ff298a1de0", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -12,8 +12,7 @@ use super::layout_of_ty;\n fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = std::process::Command::new(\"rustc\");\n-    cmd.args(&[\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"])\n-        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+    cmd.args([\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n     let output = cmd.output().unwrap();\n     assert!(output.status.success(), \"{}\", output.status);\n     let stdout = String::from_utf8(output.stdout).unwrap();"}, {"sha": "592410008a679c3e979cd3b34d21d3215577e986", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -780,7 +780,7 @@ impl<'a> TyLoweringContext<'a> {\n                         |_, c, ty| {\n                             const_or_path_to_chalk(\n                                 self.db,\n-                                &self.resolver,\n+                                self.resolver,\n                                 ty,\n                                 c,\n                                 self.type_param_mode,\n@@ -1852,7 +1852,7 @@ pub(crate) fn return_type_impl_traits(\n     let ctx_ret = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Opaque)\n         .with_type_param_mode(ParamLoweringMode::Variable);\n-    let _ret = (&ctx_ret).lower_ty(&data.ret_type);\n+    let _ret = ctx_ret.lower_ty(&data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n     let return_type_impl_traits =\n         ReturnTypeImplTraits { impl_traits: ctx_ret.opaque_type_data.into_inner() };"}, {"sha": "b6f41c0e828f100a12afeff5402f07b1612424cc", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -926,7 +926,7 @@ fn iterate_method_candidates_by_receiver(\n     while let Some((self_ty, _)) = autoderef.next() {\n         iterate_inherent_methods(\n             &self_ty,\n-            &mut autoderef.table,\n+            autoderef.table,\n             name,\n             Some(&receiver_ty),\n             Some(receiver_adjustments.clone()),\n@@ -941,7 +941,7 @@ fn iterate_method_candidates_by_receiver(\n     while let Some((self_ty, _)) = autoderef.next() {\n         iterate_trait_method_candidates(\n             &self_ty,\n-            &mut autoderef.table,\n+            autoderef.table,\n             traits_in_scope,\n             name,\n             Some(&receiver_ty),\n@@ -1246,7 +1246,7 @@ fn is_valid_candidate(\n                     let expected_self_ty = TyBuilder::impl_self_ty(db, impl_id)\n                         .fill_with_inference_vars(table)\n                         .build();\n-                    table.unify(&expected_self_ty, &self_ty)\n+                    table.unify(&expected_self_ty, self_ty)\n                 });\n                 if !self_ty_matches {\n                     cov_mark::hit!(const_candidate_self_type_mismatch);"}, {"sha": "d43c5c83096e8fd3e6be4abc665354a7eb93b646", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -1252,7 +1252,7 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn to_def<T: ToDef>(&self, src: &T) -> Option<T::Def> {\n         let src = self.find_file(src.syntax()).with_value(src).cloned();\n-        T::to_def(&self, src)\n+        T::to_def(self, src)\n     }\n \n     fn to_module_def(&self, file: FileId) -> impl Iterator<Item = Module> {"}, {"sha": "be062ec3723af22b551714e1f644d0d1abc3b226", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -228,7 +228,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         pat: &ast::Pat,\n     ) -> Option<SmallVec<[Type; 1]>> {\n-        let pat_id = self.pat_id(&pat)?;\n+        let pat_id = self.pat_id(pat)?;\n         let infer = self.infer.as_ref()?;\n         Some(\n             infer\n@@ -824,7 +824,7 @@ impl SourceAnalyzer {\n     }\n \n     fn ty_of_expr(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<&Ty> {\n-        self.infer.as_ref()?.type_of_expr.get(self.expr_id(db, &expr)?)\n+        self.infer.as_ref()?.type_of_expr.get(self.expr_id(db, expr)?)\n     }\n }\n "}, {"sha": "879c478acf882ff704ce00234043c107d90532bf", "filename": "crates/ide-assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -35,16 +35,16 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n             match builder_edit_pos {\n                 InsertOrReplace::Insert(insert_pos, needs_whitespace) => {\n                     let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n-                    builder.insert(insert_pos, &format!(\"{preceeding_whitespace}-> {ty} \"))\n+                    builder.insert(insert_pos, format!(\"{preceeding_whitespace}-> {ty} \"))\n                 }\n                 InsertOrReplace::Replace(text_range) => {\n-                    builder.replace(text_range, &format!(\"-> {ty}\"))\n+                    builder.replace(text_range, format!(\"-> {ty}\"))\n                 }\n             }\n             if let FnType::Closure { wrap_expr: true } = fn_type {\n                 cov_mark::hit!(wrap_closure_non_block_expr);\n                 // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n-                builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{tail_expr}}}\"));\n+                builder.replace(tail_expr.syntax().text_range(), format!(\"{{{tail_expr}}}\"));\n             }\n         },\n     )"}, {"sha": "698ad78cce6ffb0159d5077cb28436453a25286a", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -203,7 +203,7 @@ fn relevance_score(\n         // get the distance between the imported path and the current module\n         // (prefer items that are more local)\n         Some((item_module, current_module)) => {\n-            score -= module_distance_hueristic(db, &current_module, &item_module) as i32;\n+            score -= module_distance_hueristic(db, current_module, &item_module) as i32;\n         }\n \n         // could not find relevant modules, so just use the length of the path as an estimate"}, {"sha": "cd037f7492c66246c1b417db19c830b77ed5e862", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -180,7 +180,7 @@ fn make_tuple_field_list(\n ) -> Option<ast::FieldList> {\n     let args = call_expr.arg_list()?.args();\n     let tuple_fields = args.map(|arg| {\n-        let ty = expr_ty(ctx, arg, &scope).unwrap_or_else(make::ty_placeholder);\n+        let ty = expr_ty(ctx, arg, scope).unwrap_or_else(make::ty_placeholder);\n         make::tuple_field(None, ty)\n     });\n     Some(make::tuple_field_list(tuple_fields).into())"}, {"sha": "07040f6f08b3765529d316b718636bd51c5b6076", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -176,7 +176,7 @@ pub(crate) fn generate_getter_impl(\n                 // for separating it from other assoc items, that needs\n                 // to be handled spearately\n                 let mut getter_buf =\n-                    generate_getter_from_info(ctx, &getter_info, &record_field_info);\n+                    generate_getter_from_info(ctx, &getter_info, record_field_info);\n \n                 // Insert `$0` only for last getter we generate\n                 if i == record_fields_count - 1 {"}, {"sha": "8d311262a753fa3f54f5ad93e919c3fda366312d", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n                 )?;\n \n                 let expr = use_trivial_constructor(\n-                    &ctx.sema.db,\n+                    ctx.sema.db,\n                     ide_db::helpers::mod_path_to_ast(&type_path),\n                     &ty,\n                 )?;"}, {"sha": "5982e9d61dbf91331eab191cf20ea175fa9a8e42", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -138,7 +138,7 @@ pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n             replacement = Replacement::Plain;\n         }\n         _ => {\n-            let alias = get_type_alias(&ctx, &alias_instance)?;\n+            let alias = get_type_alias(ctx, &alias_instance)?;\n             concrete_type = alias.ty()?;\n             replacement = inline(&alias, &alias_instance)?;\n         }\n@@ -158,7 +158,7 @@ impl Replacement {\n     fn to_text(&self, concrete_type: &ast::Type) -> String {\n         match self {\n             Replacement::Generic { lifetime_map, const_and_type_map } => {\n-                create_replacement(&lifetime_map, &const_and_type_map, &concrete_type)\n+                create_replacement(lifetime_map, const_and_type_map, concrete_type)\n             }\n             Replacement::Plain => concrete_type.to_string(),\n         }\n@@ -240,7 +240,7 @@ impl ConstAndTypeMap {\n     ) -> Option<Self> {\n         let mut inner = HashMap::new();\n         let instance_generics = generic_args_to_const_and_type_generics(instance_args);\n-        let alias_generics = generic_param_list_to_const_and_type_generics(&alias_generics);\n+        let alias_generics = generic_param_list_to_const_and_type_generics(alias_generics);\n \n         if instance_generics.len() > alias_generics.len() {\n             cov_mark::hit!(too_many_generic_args);"}, {"sha": "7f612c2a142c77789a55ed12482f6e877721e707", "filename": "crates/ide-assists/src/handlers/unnecessary_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -107,7 +107,7 @@ fn find_all_references(\n /// If no await expression is found, returns None.\n fn find_await_expression(ctx: &AssistContext<'_>, nameref: &NameRef) -> Option<ast::AwaitExpr> {\n     // From the nameref, walk up the tree to the await expression.\n-    let await_expr = if let Some(path) = full_path_of_name_ref(&nameref) {\n+    let await_expr = if let Some(path) = full_path_of_name_ref(nameref) {\n         // Function calls.\n         path.syntax()\n             .parent()"}, {"sha": "7c6e5e100f63fdb264ebf0c80a4f587855155c72", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -32,12 +32,12 @@ pub(crate) fn complete_dot(\n         complete_fields(\n             acc,\n             ctx,\n-            &receiver_ty,\n+            receiver_ty,\n             |acc, field, ty| acc.add_field(ctx, dot_access, None, field, &ty),\n             |acc, field, ty| acc.add_tuple_field(ctx, None, field, &ty),\n         );\n     }\n-    complete_methods(ctx, &receiver_ty, |func| acc.add_method(ctx, dot_access, func, None, None));\n+    complete_methods(ctx, receiver_ty, |func| acc.add_method(ctx, dot_access, func, None, None));\n }\n \n pub(crate) fn complete_undotted_self("}, {"sha": "cfe4787f734d70a6d58c134b2a656e904d505623", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn complete_expr_path(\n                 acc.add_enum_variants(ctx, path_ctx, e);\n             }\n \n-            ctx.iterate_path_candidates(&ty, |item| {\n+            ctx.iterate_path_candidates(ty, |item| {\n                 add_assoc_item(acc, item);\n             });\n "}, {"sha": "5c46c5806e65e8fd8639d3cbc352c288726238a2", "filename": "crates/ide-completion/src/completions/format_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn format_string(\n     original: &ast::String,\n     expanded: &ast::String,\n ) {\n-    if !is_format_string(&expanded) {\n+    if !is_format_string(expanded) {\n         return;\n     }\n     let cursor = ctx.position.offset;"}, {"sha": "37849c251a480e82896c9b6c8e5e187a4b24a43c", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn complete_type_path(\n             trait_.items(ctx.sema.db).into_iter().for_each(|item| add_assoc_item(acc, item))\n         }\n         Qualified::TypeAnchor { ty: Some(ty), trait_: None } => {\n-            ctx.iterate_path_candidates(&ty, |item| {\n+            ctx.iterate_path_candidates(ty, |item| {\n                 add_assoc_item(acc, item);\n             });\n "}, {"sha": "e34824e22eac10af3befb77828b62ff5cea5a435", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -226,7 +226,7 @@ fn analyze(\n             find_node_at_offset(&file_with_fake_ident, offset)\n         {\n             let parent = name_ref.syntax().parent()?;\n-            let (mut nameref_ctx, _) = classify_name_ref(&sema, &original_file, name_ref, parent)?;\n+            let (mut nameref_ctx, _) = classify_name_ref(sema, &original_file, name_ref, parent)?;\n             if let NameRefKind::Path(path_ctx) = &mut nameref_ctx.kind {\n                 path_ctx.kind = PathKind::Derive {\n                     existing_derives: sema\n@@ -277,7 +277,7 @@ fn analyze(\n             return Some((analysis, (None, None), QualifierCtx::default()));\n         }\n     };\n-    let expected = expected_type_and_name(sema, &self_token, &name_like);\n+    let expected = expected_type_and_name(sema, self_token, &name_like);\n     let mut qual_ctx = QualifierCtx::default();\n     let analysis = match name_like {\n         ast::NameLike::Lifetime(lifetime) => {\n@@ -374,7 +374,7 @@ fn expected_type_and_name(\n                 ast::ArgList(_) => {\n                     cov_mark::hit!(expected_type_fn_param);\n                     ActiveParameter::at_token(\n-                        &sema,\n+                        sema,\n                        token.clone(),\n                     ).map(|ap| {\n                         let name = ap.ident().map(NameOrNameRef::Name);\n@@ -507,7 +507,7 @@ fn classify_lifetime(\n             _ => LifetimeKind::Lifetime,\n         }\n     };\n-    let lifetime = find_node_at_offset(&original_file, lifetime.syntax().text_range().start());\n+    let lifetime = find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n \n     Some(LifetimeContext { lifetime, kind })\n }\n@@ -548,7 +548,7 @@ fn classify_name(\n             _ => return None,\n         }\n     };\n-    let name = find_node_at_offset(&original_file, name.syntax().text_range().start());\n+    let name = find_node_at_offset(original_file, name.syntax().text_range().start());\n     Some(NameContext { name, kind })\n }\n \n@@ -558,7 +558,7 @@ fn classify_name_ref(\n     name_ref: ast::NameRef,\n     parent: SyntaxNode,\n ) -> Option<(NameRefContext, QualifierCtx)> {\n-    let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n+    let nameref = find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n     let make_res = |kind| (NameRefContext { nameref: nameref.clone(), kind }, Default::default());\n "}, {"sha": "1b09ad1731f9de498e71bff2dae0cda7e6f1e191", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -68,7 +68,7 @@ pub(crate) fn render_union_literal(\n \n     item.set_documentation(ctx.docs(un))\n         .set_deprecated(ctx.is_deprecated(un))\n-        .detail(&detail)\n+        .detail(detail)\n         .set_relevance(ctx.completion_relevance());\n \n     match ctx.snippet_cap() {"}, {"sha": "43af4d4f16aab5a62ae04f2ada97f9271d9e751d", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -128,9 +128,9 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n                         )?;\n \n                         use_trivial_constructor(\n-                            &ctx.sema.db,\n+                            ctx.sema.db,\n                             ide_db::helpers::mod_path_to_ast(&type_path),\n-                            &ty,\n+                            ty,\n                         )\n                     })();\n "}, {"sha": "8da04e628d67001f978b00d4dd2448f8646177c4", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -68,7 +68,7 @@ fn missing_record_expr_field_fixes(\n     }\n     let new_field = make::record_field(\n         None,\n-        make::name(&record_expr_field.field_name()?.ident_token()?.text()),\n+        make::name(record_expr_field.field_name()?.ident_token()?.text()),\n         make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n "}, {"sha": "64ba08ac883bab3a60924e6e4ea0f434fe89fce8", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -229,7 +229,7 @@ pub fn diagnostics(\n     for node in parse.syntax().descendants() {\n         handlers::useless_braces::useless_braces(&mut res, file_id, &node);\n         handlers::field_shorthand::field_shorthand(&mut res, file_id, &node);\n-        handlers::json_is_not_rust::json_in_items(&sema, &mut res, file_id, &node, &config);\n+        handlers::json_is_not_rust::json_in_items(&sema, &mut res, file_id, &node, config);\n     }\n \n     let module = sema.to_module_def(file_id);"}, {"sha": "9e7fcfc590b7037abd34bbbedc2e38e7f3dcb8d8", "filename": "crates/ide-diagnostics/src/tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -11,7 +11,7 @@ fn sourcegen_diagnostic_docs() {\n         diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = sourcegen::add_preamble(\"sourcegen_diagnostic_docs\", contents);\n     let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n-    fs::write(&dst, &contents).unwrap();\n+    fs::write(dst, contents).unwrap();\n }\n \n #[derive(Debug)]"}, {"sha": "418043d67981175834afe681a47d58d65da5c86d", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -163,7 +163,7 @@ fn _format(\n ) -> Option<String> {\n     use ide_db::base_db::{FileLoader, SourceDatabase};\n     // hack until we get hygiene working (same character amount to preserve formatting as much as possible)\n-    const DOLLAR_CRATE_REPLACE: &str = &\"__r_a_\";\n+    const DOLLAR_CRATE_REPLACE: &str = \"__r_a_\";\n     let expansion = expansion.replace(\"$crate\", DOLLAR_CRATE_REPLACE);\n     let (prefix, suffix) = match kind {\n         SyntaxKind::MACRO_PAT => (\"fn __(\", \": u32);\"),"}, {"sha": "b214fa12a4fecf9f7e7b0c03b5538fd804fd0d33", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -195,7 +195,7 @@ pub(crate) fn hover(\n         // fallback to type hover if there aren't any other suggestions\n         // this finds its own range instead of using the closest token's range\n         .or_else(|| {\n-            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, &token))\n+            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, token))\n         })\n }\n "}, {"sha": "47257f0bfad053ea015c51ba8b1ddc8b66efeeec", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -276,7 +276,7 @@ pub(super) fn struct_rest_pat(\n         }\n     };\n     for (_, t) in &missing_fields {\n-        walk_and_push_ty(sema.db, &t, &mut push_new_def);\n+        walk_and_push_ty(sema.db, t, &mut push_new_def);\n     }\n \n     res.markup = {"}, {"sha": "987230abfbdd416fd91affdda2c2251482244f9a", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -253,7 +253,7 @@ fn label_of_ty(\n         ty: hir::Type,\n         label_builder: &mut InlayHintLabelBuilder<'_>,\n     ) {\n-        let iter_item_type = hint_iterator(sema, &famous_defs, &ty);\n+        let iter_item_type = hint_iterator(sema, famous_defs, &ty);\n         match iter_item_type {\n             Some(ty) => {\n                 const LABEL_START: &str = \"impl Iterator<Item = \";\n@@ -279,7 +279,7 @@ fn label_of_ty(\n         location_link_enabled: config.location_links,\n         result: InlayHintLabel::default(),\n     };\n-    rec(sema, &famous_defs, config.max_length, ty, &mut label_builder);\n+    rec(sema, famous_defs, config.max_length, ty, &mut label_builder);\n     let r = label_builder.finish();\n     Some(r)\n }\n@@ -315,7 +315,7 @@ pub(crate) fn inlay_hints(\n \n     let mut acc = Vec::new();\n \n-    if let Some(scope) = sema.scope(&file) {\n+    if let Some(scope) = sema.scope(file) {\n         let famous_defs = FamousDefs(&sema, scope.krate());\n \n         let hints = |node| hints(&mut acc, &famous_defs, config, file_id, node);"}, {"sha": "a0166d0048ab051c4fd67c656685d633a2180ae0", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -31,7 +31,7 @@ pub(super) fn hints(\n         .last();\n     let range =\n         outer_paren_pat.as_ref().map_or_else(|| pat.syntax(), |it| it.syntax()).text_range();\n-    let pattern_adjustments = sema.pattern_adjustments(&pat);\n+    let pattern_adjustments = sema.pattern_adjustments(pat);\n     pattern_adjustments.iter().for_each(|ty| {\n         let reference = ty.is_reference();\n         let mut_reference = ty.is_mutable_reference();"}, {"sha": "c1a6083655822d59a8e26e7b614e8b43017ff1ff", "filename": "crates/mbe/src/syntax_bridge/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -30,7 +30,7 @@ fn check_punct_spacing(fixture: &str) {\n     while !cursor.eof() {\n         while let Some(token_tree) = cursor.token_tree() {\n             if let TokenTreeRef::Leaf(Leaf::Punct(Punct { spacing, id, .. }), _) = token_tree {\n-                if let Some(expected) = annotations.remove(&id) {\n+                if let Some(expected) = annotations.remove(id) {\n                     assert_eq!(expected, *spacing);\n                 }\n             }"}, {"sha": "068f79f824dcac89e601328cec87f55fdae8f25f", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -182,7 +182,7 @@ impl server::TokenStream for RustAnalyzer {\n             .map(|tree| match tree {\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n                     bridge::TokenTree::Ident(bridge::Ident {\n-                        sym: Symbol::intern(&ident.text.trim_start_matches(\"r#\")),\n+                        sym: Symbol::intern(ident.text.trim_start_matches(\"r#\")),\n                         is_raw: ident.text.starts_with(\"r#\"),\n                         span: ident.id,\n                     })"}, {"sha": "7ca3c7d629570494724523d74f08abc66bdc07a3", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -114,7 +114,7 @@ impl Drop for CpuSpan {\n             match out {\n                 Ok(out) if out.status.success() => {\n                     let svg = profile_data.with_extension(\"svg\");\n-                    std::fs::write(&svg, &out.stdout).unwrap();\n+                    std::fs::write(&svg, out.stdout).unwrap();\n                     eprintln!(\"Profile rendered to:\\n\\n    {}\\n\", svg.display());\n                 }\n                 _ => {"}, {"sha": "6550cf27e9916761dcbe48964119e60b24e2cf42", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -66,15 +66,15 @@ impl WorkspaceBuildScripts {\n             _ => {\n                 let mut cmd = Command::new(toolchain::cargo());\n \n-                cmd.args(&[\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n+                cmd.args([\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n \n                 // --all-targets includes tests, benches and examples in addition to the\n                 // default lib and bins. This is an independent concept from the --target\n                 // flag below.\n                 cmd.arg(\"--all-targets\");\n \n                 if let Some(target) = &config.target {\n-                    cmd.args(&[\"--target\", target]);\n+                    cmd.args([\"--target\", target]);\n                 }\n \n                 match &config.features {\n@@ -122,7 +122,7 @@ impl WorkspaceBuildScripts {\n             InvocationLocation::Root(root) if config.run_build_script_command.is_some() => {\n                 root.as_path()\n             }\n-            _ => &workspace.workspace_root(),\n+            _ => workspace.workspace_root(),\n         }\n         .as_ref();\n \n@@ -133,7 +133,7 @@ impl WorkspaceBuildScripts {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n                 let mut cmd = Self::build_command(config)?;\n-                cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n+                cmd.args([\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n                 let mut res = Self::run_per_ws(cmd, workspace, current_dir, progress)?;\n                 res.error = Some(error);\n                 Ok(res)"}, {"sha": "f2a972094f81bf87990c71716b98163efb861e3f", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -517,7 +517,7 @@ fn cargo_config_build_target(\n     cargo_config.envs(extra_env);\n     cargo_config\n         .current_dir(cargo_toml.parent())\n-        .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n+        .args([\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n         .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`\n     // or `build.target = [\"<target 1>\", ..]`"}, {"sha": "0066f6717efe6457b05c8bd2b3b4cb4fe7a64328", "filename": "crates/project-model/src/rustc_cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -50,10 +50,10 @@ fn get_rust_cfgs(\n         cargo_config.envs(extra_env);\n         cargo_config\n             .current_dir(cargo_toml.parent())\n-            .args(&[\"rustc\", \"-Z\", \"unstable-options\", \"--print\", \"cfg\"])\n+            .args([\"rustc\", \"-Z\", \"unstable-options\", \"--print\", \"cfg\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n-            cargo_config.args(&[\"--target\", target]);\n+            cargo_config.args([\"--target\", target]);\n         }\n         match utf8_stdout(cargo_config) {\n             Ok(it) => return Ok(it),\n@@ -63,9 +63,9 @@ fn get_rust_cfgs(\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = Command::new(toolchain::rustc());\n     cmd.envs(extra_env);\n-    cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+    cmd.args([\"--print\", \"cfg\", \"-O\"]);\n     if let Some(target) = target {\n-        cmd.args(&[\"--target\", target]);\n+        cmd.args([\"--target\", target]);\n     }\n     utf8_stdout(cmd)\n }"}, {"sha": "8d5ab0061e518bcfebc93e87eb530444046d9e2b", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -171,7 +171,7 @@ fn discover_sysroot_dir(\n ) -> Result<AbsPathBuf> {\n     let mut rustc = Command::new(toolchain::rustc());\n     rustc.envs(extra_env);\n-    rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n+    rustc.current_dir(current_dir).args([\"--print\", \"sysroot\"]);\n     tracing::debug!(\"Discovering sysroot by {:?}\", rustc);\n     let stdout = utf8_stdout(rustc)?;\n     Ok(AbsPathBuf::assert(PathBuf::from(stdout)))\n@@ -203,7 +203,7 @@ fn discover_sysroot_src_dir_or_add_component(\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n             rustup.envs(extra_env);\n-            rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n+            rustup.current_dir(current_dir).args([\"component\", \"add\", \"rust-src\"]);\n             tracing::info!(\"adding rust-src component by {:?}\", rustup);\n             utf8_stdout(rustup).ok()?;\n             get_rust_src(sysroot_path)"}, {"sha": "40cf47c3f55979690d7d3a76722dfbc8046c9291", "filename": "crates/project-model/src/target_data_layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -15,10 +15,10 @@ pub(super) fn get(\n             let mut cmd = Command::new(toolchain::rustc());\n             cmd.envs(extra_env);\n             cmd.current_dir(cargo_toml.parent())\n-                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+                .args([\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n                 .env(\"RUSTC_BOOTSTRAP\", \"1\");\n             if let Some(target) = target {\n-                cmd.args(&[\"--target\", target]);\n+                cmd.args([\"--target\", target]);\n             }\n             match utf8_stdout(cmd) {\n                 Ok(it) => return Ok(it),\n@@ -28,10 +28,10 @@ pub(super) fn get(\n         // using unstable cargo features failed, fall back to using plain rustc\n         let mut cmd = Command::new(toolchain::rustc());\n         cmd.envs(extra_env)\n-            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+            .args([\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n-            cmd.args(&[\"--target\", target]);\n+            cmd.args([\"--target\", target]);\n         }\n         utf8_stdout(cmd)\n     })()"}, {"sha": "e2382aa37e8e5e724c5f0a101bca7f7aae398836", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -407,7 +407,7 @@ impl ProjectWorkspace {\n                 [\"libexec\", \"lib\"]\n                     .into_iter()\n                     .map(|segment| sysroot.root().join(segment).join(&standalone_server_name))\n-                    .find(|server_path| std::fs::metadata(&server_path).is_ok())\n+                    .find(|server_path| std::fs::metadata(server_path).is_ok())\n             }\n             _ => None,\n         }"}, {"sha": "122d2e6ff1b762dce6b8753761576b689fcb299b", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -42,7 +42,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n                 \"(\".to_string(),\n             ]),\n             all_commit_characters: None,\n-            completion_item: completion_item(&config),\n+            completion_item: completion_item(config),\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },\n         }),\n         signature_help_provider: Some(SignatureHelpOptions {\n@@ -67,7 +67,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         },\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: Some(more_trigger_character(&config)),\n+            more_trigger_character: Some(more_trigger_character(config)),\n         }),\n         selection_range_provider: Some(SelectionRangeProviderCapability::Simple(true)),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),"}, {"sha": "b050d1e95ac1f4afd36b79fab89c5c5fdcf413cc", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -102,7 +102,7 @@ impl flags::Scip {\n                 let symbol = tokens_to_symbol\n                     .entry(id)\n                     .or_insert_with(|| {\n-                        let symbol = token_to_symbol(&token).unwrap_or_else(&mut new_local_symbol);\n+                        let symbol = token_to_symbol(token).unwrap_or_else(&mut new_local_symbol);\n                         scip::symbol::format_symbol(symbol)\n                     })\n                     .clone();\n@@ -176,7 +176,7 @@ fn get_relative_filepath(\n     rootpath: &vfs::AbsPathBuf,\n     file_id: ide::FileId,\n ) -> Option<String> {\n-    Some(vfs.file_path(file_id).as_path()?.strip_prefix(&rootpath)?.as_ref().to_str()?.to_string())\n+    Some(vfs.file_path(file_id).as_path()?.strip_prefix(rootpath)?.as_ref().to_str()?.to_string())\n }\n \n // SCIP Ranges have a (very large) optimization that ranges if they are on the same line"}, {"sha": "0bc940dfe8dab8413a7de156b91e555e3f8a30bf", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -877,7 +877,7 @@ impl GlobalState {\n                 if let Ok(vfs_path) = from_proto::vfs_path(&params.text_document.uri) {\n                     // Re-fetch workspaces if a workspace related file has changed\n                     if let Some(abs_path) = vfs_path.as_path() {\n-                        if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n+                        if reload::should_refresh_for_change(abs_path, ChangeKind::Modify) {\n                             this.fetch_workspaces_queue\n                                 .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n                         }"}, {"sha": "2eafb0da69210b095b00b19472adb4379a8dc69e", "filename": "crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -14,7 +14,7 @@ fn sourcegen_feature_docs() {\n         contents.trim()\n     );\n     let dst = sourcegen::project_root().join(\"docs/user/generated_features.adoc\");\n-    fs::write(&dst, &contents).unwrap();\n+    fs::write(dst, contents).unwrap();\n }\n \n #[derive(Debug)]"}, {"sha": "72d26635c33692de44c9f046f86f12b60bba3db4", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -119,7 +119,7 @@ pub struct Location {\n \n impl fmt::Display for Location {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let path = self.file.strip_prefix(&project_root()).unwrap().display().to_string();\n+        let path = self.file.strip_prefix(project_root()).unwrap().display().to_string();\n         let path = path.replace('\\\\', \"/\");\n         let name = self.file.file_name().unwrap();\n         write!(\n@@ -175,7 +175,7 @@ pub fn ensure_file_contents(file: &Path, contents: &str) {\n         }\n     }\n \n-    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    let display_path = file.strip_prefix(project_root()).unwrap_or(file);\n     eprintln!(\n         \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n         display_path.display()"}, {"sha": "a493c92e7dae90d2218002010c2fd89d1c9ee5a9", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -888,6 +888,6 @@ enum Foo {\n         let enum_ = ast_mut_from_text::<ast::Enum>(before);\n         enum_.variant_list().map(|it| it.add_variant(variant));\n         let after = enum_.to_string();\n-        assert_eq_text!(&trim_indent(expected.trim()), &trim_indent(&after.trim()));\n+        assert_eq_text!(&trim_indent(expected.trim()), &trim_indent(after.trim()));\n     }\n }"}, {"sha": "168439053c27abd77f27952258e5a242046fefb8", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -157,7 +157,7 @@ fn collect_rust_files(root_dir: &Path, paths: &[&str]) -> Vec<(PathBuf, String)>\n /// Collects paths to all `.rs` files from `dir` in a sorted `Vec<PathBuf>`.\n fn rust_files_in_dir(dir: &Path) -> Vec<PathBuf> {\n     let mut acc = Vec::new();\n-    for file in fs::read_dir(&dir).unwrap() {\n+    for file in fs::read_dir(dir).unwrap() {\n         let file = file.unwrap();\n         let path = file.path();\n         if path.extension().unwrap_or_default() == \"rs\" {"}, {"sha": "a7a52e08e75a8448663c2cb45e725dc13a8ccbae", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed128872eb42c61ecc62f382fe1f93c98bd78aad/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=ed128872eb42c61ecc62f382fe1f93c98bd78aad", "patch": "@@ -479,7 +479,7 @@ pub fn try_ensure_file_contents(file: &Path, contents: &str) -> Result<(), ()> {\n         }\n         _ => (),\n     }\n-    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    let display_path = file.strip_prefix(project_root()).unwrap_or(file);\n     eprintln!(\n         \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n         display_path.display()"}]}