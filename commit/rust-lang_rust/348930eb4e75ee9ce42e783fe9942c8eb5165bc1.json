{"sha": "348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODkzMGViNGU3NWVlOWNlNDJlNzgzZmU5OTQyYzhlYjUxNjViYzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-01T19:59:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-09T04:42:23Z"}, "message": "std: Move the `cmath` module into the `sys` module\n\nThis commit moves the `f32::cmath` and `f64::cmath` modules into the\n`sys` module. Note that these are not publicly exported modules, simply\nimplementation details. These modules are already platform-specific with\nshims on MSVC and this is mostly just a reflection of that reality. This\nshould also help cut down on `#[cfg]` traffic if platforms are brought on\nwhich don't directly support these functions.", "tree": {"sha": "ed4168f92e2d32127b390d06b199abc219ad3a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4168f92e2d32127b390d06b199abc219ad3a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "html_url": "https://github.com/rust-lang/rust/commit/348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ccb50eaa670f86b69e7a64484a8c97e13169183", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccb50eaa670f86b69e7a64484a8c97e13169183", "html_url": "https://github.com/rust-lang/rust/commit/1ccb50eaa670f86b69e7a64484a8c97e13169183"}], "stats": {"total": 329, "additions": 196, "deletions": 133}, "files": [{"sha": "7ec6124dfa4623548f43791f0e88304ad38b1de0", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 86, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -23,6 +23,8 @@ use core::num;\n use intrinsics;\n #[cfg(not(test))]\n use num::FpCategory;\n+#[cfg(not(test))]\n+use sys::cmath;\n \n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -36,92 +38,6 @@ pub use core::f32::{MIN, MIN_POSITIVE, MAX};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::consts;\n \n-#[allow(dead_code)]\n-mod cmath {\n-    use libc::{c_float, c_int};\n-\n-    extern {\n-        pub fn cbrtf(n: c_float) -> c_float;\n-        pub fn erff(n: c_float) -> c_float;\n-        pub fn erfcf(n: c_float) -> c_float;\n-        pub fn expm1f(n: c_float) -> c_float;\n-        pub fn fdimf(a: c_float, b: c_float) -> c_float;\n-        pub fn fmodf(a: c_float, b: c_float) -> c_float;\n-        pub fn ilogbf(n: c_float) -> c_int;\n-        pub fn logbf(n: c_float) -> c_float;\n-        pub fn log1pf(n: c_float) -> c_float;\n-        pub fn modff(n: c_float, iptr: &mut c_float) -> c_float;\n-        pub fn nextafterf(x: c_float, y: c_float) -> c_float;\n-        pub fn tgammaf(n: c_float) -> c_float;\n-\n-        #[cfg_attr(all(windows, target_env = \"msvc\"), link_name = \"__lgammaf_r\")]\n-        pub fn lgammaf_r(n: c_float, sign: &mut c_int) -> c_float;\n-        #[cfg_attr(all(windows, target_env = \"msvc\"), link_name = \"_hypotf\")]\n-        pub fn hypotf(x: c_float, y: c_float) -> c_float;\n-    }\n-\n-    // See the comments in the `floor` function for why MSVC is special\n-    // here.\n-    #[cfg(not(target_env = \"msvc\"))]\n-    extern {\n-        pub fn acosf(n: c_float) -> c_float;\n-        pub fn asinf(n: c_float) -> c_float;\n-        pub fn atan2f(a: c_float, b: c_float) -> c_float;\n-        pub fn atanf(n: c_float) -> c_float;\n-        pub fn coshf(n: c_float) -> c_float;\n-        pub fn sinhf(n: c_float) -> c_float;\n-        pub fn tanf(n: c_float) -> c_float;\n-        pub fn tanhf(n: c_float) -> c_float;\n-    }\n-\n-    #[cfg(target_env = \"msvc\")]\n-    pub use self::shims::*;\n-    #[cfg(target_env = \"msvc\")]\n-    mod shims {\n-        use libc::c_float;\n-\n-        #[inline]\n-        pub unsafe fn acosf(n: c_float) -> c_float {\n-            f64::acos(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn asinf(n: c_float) -> c_float {\n-            f64::asin(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn atan2f(n: c_float, b: c_float) -> c_float {\n-            f64::atan2(n as f64, b as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn atanf(n: c_float) -> c_float {\n-            f64::atan(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn coshf(n: c_float) -> c_float {\n-            f64::cosh(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn sinhf(n: c_float) -> c_float {\n-            f64::sinh(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn tanf(n: c_float) -> c_float {\n-            f64::tan(n as f64) as c_float\n-        }\n-\n-        #[inline]\n-        pub unsafe fn tanhf(n: c_float) -> c_float {\n-            f64::tanh(n as f64) as c_float\n-        }\n-    }\n-}\n-\n #[cfg(not(test))]\n #[lang = \"f32\"]\n impl f32 {"}, {"sha": "e0f0acc6ac44136b808810900e13c9c749351974", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -23,6 +23,8 @@ use core::num;\n use intrinsics;\n #[cfg(not(test))]\n use num::FpCategory;\n+#[cfg(not(test))]\n+use sys::cmath;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n@@ -35,53 +37,6 @@ pub use core::f64::{MIN, MIN_POSITIVE, MAX};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::consts;\n \n-#[allow(dead_code)]\n-mod cmath {\n-    use libc::{c_double, c_int};\n-\n-    #[link_name = \"m\"]\n-    extern {\n-        pub fn acos(n: c_double) -> c_double;\n-        pub fn asin(n: c_double) -> c_double;\n-        pub fn atan(n: c_double) -> c_double;\n-        pub fn atan2(a: c_double, b: c_double) -> c_double;\n-        pub fn cbrt(n: c_double) -> c_double;\n-        pub fn cosh(n: c_double) -> c_double;\n-        pub fn erf(n: c_double) -> c_double;\n-        pub fn erfc(n: c_double) -> c_double;\n-        pub fn expm1(n: c_double) -> c_double;\n-        pub fn fdim(a: c_double, b: c_double) -> c_double;\n-        pub fn fmod(a: c_double, b: c_double) -> c_double;\n-        pub fn frexp(n: c_double, value: &mut c_int) -> c_double;\n-        pub fn ilogb(n: c_double) -> c_int;\n-        pub fn ldexp(x: c_double, n: c_int) -> c_double;\n-        pub fn logb(n: c_double) -> c_double;\n-        pub fn log1p(n: c_double) -> c_double;\n-        pub fn nextafter(x: c_double, y: c_double) -> c_double;\n-        pub fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-        pub fn sinh(n: c_double) -> c_double;\n-        pub fn tan(n: c_double) -> c_double;\n-        pub fn tanh(n: c_double) -> c_double;\n-        pub fn tgamma(n: c_double) -> c_double;\n-\n-        // These are commonly only available for doubles\n-\n-        pub fn j0(n: c_double) -> c_double;\n-        pub fn j1(n: c_double) -> c_double;\n-        pub fn jn(i: c_int, n: c_double) -> c_double;\n-\n-        pub fn y0(n: c_double) -> c_double;\n-        pub fn y1(n: c_double) -> c_double;\n-        pub fn yn(i: c_int, n: c_double) -> c_double;\n-\n-        #[cfg_attr(all(windows, target_env = \"msvc\"), link_name = \"__lgamma_r\")]\n-        pub fn lgamma_r(n: c_double, sign: &mut c_int) -> c_double;\n-\n-        #[cfg_attr(all(windows, target_env = \"msvc\"), link_name = \"_hypot\")]\n-        pub fn hypot(x: c_double, y: c_double) -> c_double;\n-    }\n-}\n-\n #[cfg(not(test))]\n #[lang = \"f64\"]\n impl f64 {"}, {"sha": "2bc96651b0c8469436431766ecfabeba4359ae77", "filename": "src/libstd/sys/redox/cmath.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fredox%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fredox%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fcmath.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg(not(test))]\n+\n+use libc::{c_float, c_double};\n+\n+#[link_name = \"m\"]\n+extern {\n+    pub fn acos(n: c_double) -> c_double;\n+    pub fn acosf(n: c_float) -> c_float;\n+    pub fn asin(n: c_double) -> c_double;\n+    pub fn asinf(n: c_float) -> c_float;\n+    pub fn atan(n: c_double) -> c_double;\n+    pub fn atan2(a: c_double, b: c_double) -> c_double;\n+    pub fn atan2f(a: c_float, b: c_float) -> c_float;\n+    pub fn atanf(n: c_float) -> c_float;\n+    pub fn cbrt(n: c_double) -> c_double;\n+    pub fn cbrtf(n: c_float) -> c_float;\n+    pub fn cosh(n: c_double) -> c_double;\n+    pub fn coshf(n: c_float) -> c_float;\n+    pub fn expm1(n: c_double) -> c_double;\n+    pub fn expm1f(n: c_float) -> c_float;\n+    pub fn fdim(a: c_double, b: c_double) -> c_double;\n+    pub fn fdimf(a: c_float, b: c_float) -> c_float;\n+    pub fn hypot(x: c_double, y: c_double) -> c_double;\n+    pub fn hypotf(x: c_float, y: c_float) -> c_float;\n+    pub fn log1p(n: c_double) -> c_double;\n+    pub fn log1pf(n: c_float) -> c_float;\n+    pub fn sinh(n: c_double) -> c_double;\n+    pub fn sinhf(n: c_float) -> c_float;\n+    pub fn tan(n: c_double) -> c_double;\n+    pub fn tanf(n: c_float) -> c_float;\n+    pub fn tanh(n: c_double) -> c_double;\n+    pub fn tanhf(n: c_float) -> c_float;\n+}"}, {"sha": "ca5f66375149f4d099dc58d982d0956e9b2f6663", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -17,6 +17,7 @@ pub use self::rand::hashmap_random_keys;\n pub mod args;\n #[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n+pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;"}, {"sha": "2bc96651b0c8469436431766ecfabeba4359ae77", "filename": "src/libstd/sys/unix/cmath.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg(not(test))]\n+\n+use libc::{c_float, c_double};\n+\n+#[link_name = \"m\"]\n+extern {\n+    pub fn acos(n: c_double) -> c_double;\n+    pub fn acosf(n: c_float) -> c_float;\n+    pub fn asin(n: c_double) -> c_double;\n+    pub fn asinf(n: c_float) -> c_float;\n+    pub fn atan(n: c_double) -> c_double;\n+    pub fn atan2(a: c_double, b: c_double) -> c_double;\n+    pub fn atan2f(a: c_float, b: c_float) -> c_float;\n+    pub fn atanf(n: c_float) -> c_float;\n+    pub fn cbrt(n: c_double) -> c_double;\n+    pub fn cbrtf(n: c_float) -> c_float;\n+    pub fn cosh(n: c_double) -> c_double;\n+    pub fn coshf(n: c_float) -> c_float;\n+    pub fn expm1(n: c_double) -> c_double;\n+    pub fn expm1f(n: c_float) -> c_float;\n+    pub fn fdim(a: c_double, b: c_double) -> c_double;\n+    pub fn fdimf(a: c_float, b: c_float) -> c_float;\n+    pub fn hypot(x: c_double, y: c_double) -> c_double;\n+    pub fn hypotf(x: c_float, y: c_float) -> c_float;\n+    pub fn log1p(n: c_double) -> c_double;\n+    pub fn log1pf(n: c_float) -> c_float;\n+    pub fn sinh(n: c_double) -> c_double;\n+    pub fn sinhf(n: c_float) -> c_float;\n+    pub fn tan(n: c_double) -> c_double;\n+    pub fn tanf(n: c_float) -> c_float;\n+    pub fn tanh(n: c_double) -> c_double;\n+    pub fn tanhf(n: c_float) -> c_float;\n+}"}, {"sha": "47be7ab03946fa27f707c56a520b8080de94a0bc", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -38,6 +38,7 @@ pub mod args;\n pub mod android;\n #[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n+pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;"}, {"sha": "b665a2c9ba4db733e64e4c76747e6b6d4e82d821", "filename": "src/libstd/sys/windows/cmath.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -0,0 +1,103 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg(not(test))]\n+\n+use libc::{c_float, c_double};\n+\n+#[link_name = \"m\"]\n+extern {\n+    pub fn acos(n: c_double) -> c_double;\n+    pub fn asin(n: c_double) -> c_double;\n+    pub fn atan(n: c_double) -> c_double;\n+    pub fn atan2(a: c_double, b: c_double) -> c_double;\n+    pub fn cbrt(n: c_double) -> c_double;\n+    pub fn cbrtf(n: c_float) -> c_float;\n+    pub fn cosh(n: c_double) -> c_double;\n+    pub fn expm1(n: c_double) -> c_double;\n+    pub fn expm1f(n: c_float) -> c_float;\n+    pub fn fdim(a: c_double, b: c_double) -> c_double;\n+    pub fn fdimf(a: c_float, b: c_float) -> c_float;\n+    #[cfg_attr(target_env = \"msvc\", link_name = \"_hypot\")]\n+    pub fn hypot(x: c_double, y: c_double) -> c_double;\n+    #[cfg_attr(target_env = \"msvc\", link_name = \"_hypotf\")]\n+    pub fn hypotf(x: c_float, y: c_float) -> c_float;\n+    pub fn log1p(n: c_double) -> c_double;\n+    pub fn log1pf(n: c_float) -> c_float;\n+    pub fn sinh(n: c_double) -> c_double;\n+    pub fn tan(n: c_double) -> c_double;\n+    pub fn tanh(n: c_double) -> c_double;\n+}\n+\n+pub use self::shims::*;\n+\n+#[cfg(not(target_env = \"msvc\"))]\n+mod shims {\n+    use libc::c_float;\n+\n+    extern {\n+        pub fn acosf(n: c_float) -> c_float;\n+        pub fn asinf(n: c_float) -> c_float;\n+        pub fn atan2f(a: c_float, b: c_float) -> c_float;\n+        pub fn atanf(n: c_float) -> c_float;\n+        pub fn coshf(n: c_float) -> c_float;\n+        pub fn sinhf(n: c_float) -> c_float;\n+        pub fn tanf(n: c_float) -> c_float;\n+        pub fn tanhf(n: c_float) -> c_float;\n+    }\n+}\n+\n+// On MSVC these functions aren't defined, so we just define shims which promote\n+// everything fo f64, perform the calculation, and then demote back to f32.\n+// While not precisely correct should be \"correct enough\" for now.\n+#[cfg(target_env = \"msvc\")]\n+mod shims {\n+    use libc::c_float;\n+\n+    #[inline]\n+    pub unsafe fn acosf(n: c_float) -> c_float {\n+        f64::acos(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn asinf(n: c_float) -> c_float {\n+        f64::asin(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn atan2f(n: c_float, b: c_float) -> c_float {\n+        f64::atan2(n as f64, b as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn atanf(n: c_float) -> c_float {\n+        f64::atan(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn coshf(n: c_float) -> c_float {\n+        f64::cosh(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn sinhf(n: c_float) -> c_float {\n+        f64::sinh(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn tanf(n: c_float) -> c_float {\n+        f64::tan(n as f64) as c_float\n+    }\n+\n+    #[inline]\n+    pub unsafe fn tanhf(n: c_float) -> c_float {\n+        f64::tanh(n as f64) as c_float\n+    }\n+}"}, {"sha": "180b55a66e3dcbedbe60f312f1846a6f1622293b", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348930eb4e75ee9ce42e783fe9942c8eb5165bc1/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "patch": "@@ -25,6 +25,7 @@ pub mod args;\n #[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod c;\n+pub mod cmath;\n pub mod condvar;\n #[cfg(feature = \"backtrace\")]\n pub mod dynamic_lib;"}]}