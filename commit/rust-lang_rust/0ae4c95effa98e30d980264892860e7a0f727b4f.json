{"sha": "0ae4c95effa98e30d980264892860e7a0f727b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZTRjOTVlZmZhOThlMzBkOTgwMjY0ODkyODYwZTdhMGY3MjdiNGY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-23T13:41:53Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-12-12T23:44:00Z"}, "message": "BTreeMap: capture a recurring use pattern as replace_kv", "tree": {"sha": "41e73df867779380cc99834280540a1266ff633a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e73df867779380cc99834280540a1266ff633a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae4c95effa98e30d980264892860e7a0f727b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae4c95effa98e30d980264892860e7a0f727b4f", "html_url": "https://github.com/rust-lang/rust/commit/0ae4c95effa98e30d980264892860e7a0f727b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae4c95effa98e30d980264892860e7a0f727b4f/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "html_url": "https://github.com/rust-lang/rust/commit/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "ae5831d514067077e4299f31e82a74844b43e4c6", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ae4c95effa98e30d980264892860e7a0f727b4f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae4c95effa98e30d980264892860e7a0f727b4f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=0ae4c95effa98e30d980264892860e7a0f727b4f", "patch": "@@ -1159,6 +1159,12 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>\n             (key, val)\n         }\n     }\n+\n+    /// Replace the key and value that the KV handle refers to.\n+    pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {\n+        let (key, val) = self.kv_mut();\n+        (mem::replace(key, k), mem::replace(val, v))\n+    }\n }\n \n impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n@@ -1432,8 +1438,7 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         unsafe {\n             let (k, v, edge) = self.left_child.pop();\n \n-            let k = mem::replace(self.parent.kv_mut().0, k);\n-            let v = mem::replace(self.parent.kv_mut().1, v);\n+            let (k, v) = self.parent.replace_kv(k, v);\n \n             match self.right_child.reborrow_mut().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push_front(k, v),\n@@ -1455,8 +1460,7 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         unsafe {\n             let (k, v, edge) = self.right_child.pop_front();\n \n-            let k = mem::replace(self.parent.kv_mut().0, k);\n-            let v = mem::replace(self.parent.kv_mut().1, v);\n+            let (k, v) = self.parent.replace_kv(k, v);\n \n             match self.left_child.reborrow_mut().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push(k, v),"}, {"sha": "1da0a0608064d74977e50264e92cae81a0d2e77c", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae4c95effa98e30d980264892860e7a0f727b4f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae4c95effa98e30d980264892860e7a0f727b4f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=0ae4c95effa98e30d980264892860e7a0f727b4f", "patch": "@@ -1,7 +1,6 @@\n use super::map::MIN_LEN;\n use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};\n use super::unwrap_unchecked;\n-use core::mem;\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n     /// Removes a key-value pair from the tree, and returns that pair, as well as\n@@ -84,10 +83,9 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         // The internal node may have been stolen from or merged. Go back right\n         // to find where the original KV ended up.\n         let mut internal = unsafe { unwrap_unchecked(left_hole.next_kv().ok()) };\n-        let old_key = mem::replace(internal.kv_mut().0, left_kv.0);\n-        let old_val = mem::replace(internal.kv_mut().1, left_kv.1);\n+        let old_kv = internal.replace_kv(left_kv.0, left_kv.1);\n         let pos = internal.next_leaf_edge();\n-        ((old_key, old_val), pos)\n+        (old_kv, pos)\n     }\n }\n "}]}