{"sha": "1f631e8e93681ddc6e62d6ba6065cac7c449534c", "node_id": "C_kwDOAAsO6NoAKDFmNjMxZThlOTM2ODFkZGM2ZTYyZDZiYTYwNjVjYWM3YzQ0OTUzNGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T22:20:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T22:20:56Z"}, "message": "Auto merge of #96369 - matthiaskrgr:rollup-q18w4v2, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95395 (Better error message for `_` in function signature in `impl Trait for Ty`)\n - #96090 (Implement MIR opt unit tests)\n - #96107 ([test] Add test cases for untested functions for VecDeque)\n - #96212 (Use revisions instead of nll compare mode for `/regions/` ui tests)\n - #96215 (Drop support for legacy PM with LLVM 15)\n - #96366 (bootstrap: Remove dead code in rustdoc shim)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1979fbc5d6eff8f77c14bffe679edc86b7101c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1979fbc5d6eff8f77c14bffe679edc86b7101c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f631e8e93681ddc6e62d6ba6065cac7c449534c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f631e8e93681ddc6e62d6ba6065cac7c449534c", "html_url": "https://github.com/rust-lang/rust/commit/1f631e8e93681ddc6e62d6ba6065cac7c449534c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f631e8e93681ddc6e62d6ba6065cac7c449534c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f314e7027fe7084aaab8620c624a0d7bd29e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f314e7027fe7084aaab8620c624a0d7bd29e70", "html_url": "https://github.com/rust-lang/rust/commit/18f314e7027fe7084aaab8620c624a0d7bd29e70"}, {"sha": "f5837f83923ade04dfce20527fb1f571de2c4c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5837f83923ade04dfce20527fb1f571de2c4c82", "html_url": "https://github.com/rust-lang/rust/commit/f5837f83923ade04dfce20527fb1f571de2c4c82"}], "stats": {"total": 2223, "additions": 1602, "deletions": 621}, "files": [{"sha": "3f5957bdb6e8f2ede7e2ae34b00c5b15abc4ec18", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -625,7 +625,7 @@ pub(crate) fn run_pass_manager(\n             if thin {\n                 llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm);\n             } else {\n-                llvm::LLVMPassManagerBuilderPopulateLTOPassManager(\n+                llvm::LLVMRustPassManagerBuilderPopulateLTOPassManager(\n                     b, pm, /* Internalize = */ False, /* RunInliner = */ True,\n                 );\n             }"}, {"sha": "99e30531c226f0aa5d3dd08c6d8b05943f311887", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -523,6 +523,12 @@ pub(crate) unsafe fn optimize(\n     let module_name = module.name.clone();\n     let module_name = Some(&module_name[..]);\n \n+    if let Some(false) = config.new_llvm_pass_manager && llvm_util::get_version() >= (15, 0, 0) {\n+        diag_handler.warn(\n+            \"ignoring `-Z new-llvm-pass-manager=no`, which is no longer supported with LLVM 15\",\n+        );\n+    }\n+\n     if config.emit_no_opt_bc {\n         let out = cgcx.output_filenames.temp_path_ext(\"no-opt.bc\", module_name);\n         let out = path_to_c_string(&out);\n@@ -628,8 +634,8 @@ pub(crate) unsafe fn optimize(\n                         extra_passes.as_ptr(),\n                         extra_passes.len() as size_t,\n                     );\n-                    llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n-                    llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n+                    llvm::LLVMRustPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n+                    llvm::LLVMRustPassManagerBuilderPopulateModulePassManager(b, mpm);\n                 });\n \n                 have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n@@ -1085,7 +1091,7 @@ pub unsafe fn with_llvm_pmb(\n     // Create the PassManagerBuilder for LLVM. We configure it with\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n-    let builder = llvm::LLVMPassManagerBuilderCreate();\n+    let builder = llvm::LLVMRustPassManagerBuilderCreate();\n     let opt_size = config.opt_size.map_or(llvm::CodeGenOptSizeNone, |x| to_llvm_opt_settings(x).1);\n     let inline_threshold = config.inline_threshold;\n     let pgo_gen_path = get_pgo_gen_path(config);\n@@ -1102,14 +1108,9 @@ pub unsafe fn with_llvm_pmb(\n         pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_sample_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        opt_size as c_int,\n     );\n \n-    llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n-\n-    if opt_size != llvm::CodeGenOptSizeNone {\n-        llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(builder, 1);\n-    }\n-\n     llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, config.no_builtins);\n \n     // Here we match what clang does (kinda). For O0 we only inline\n@@ -1118,16 +1119,16 @@ pub unsafe fn with_llvm_pmb(\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n         (.., Some(t)) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, t);\n         }\n         (llvm::CodeGenOptLevel::Aggressive, ..) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n         }\n         (_, llvm::CodeGenOptSizeDefault, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n         }\n         (_, llvm::CodeGenOptSizeAggressive, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n         }\n         (llvm::CodeGenOptLevel::None, ..) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n@@ -1136,12 +1137,12 @@ pub unsafe fn with_llvm_pmb(\n             llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n         }\n         (llvm::CodeGenOptLevel::Default, ..) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n     }\n \n     f(builder);\n-    llvm::LLVMPassManagerBuilderDispose(builder);\n+    llvm::LLVMRustPassManagerBuilderDispose(builder);\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "13baaddccd4df5be8bf9d37d83b2ed37c5489fe2", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1825,24 +1825,22 @@ extern \"C\" {\n \n     pub fn LLVMAddAnalysisPasses<'a>(T: &'a TargetMachine, PM: &PassManager<'a>);\n \n-    pub fn LLVMPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n-    pub fn LLVMPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n-    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: &PassManagerBuilder, Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: &PassManagerBuilder, Value: Bool);\n-    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(\n+    pub fn LLVMRustPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n+    pub fn LLVMRustPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n+    pub fn LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n         PMB: &PassManagerBuilder,\n         threshold: c_uint,\n     );\n-    pub fn LLVMPassManagerBuilderPopulateModulePassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateModulePassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n     );\n \n-    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n     );\n-    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateLTOPassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n         Internalize: Bool,\n@@ -2308,6 +2306,7 @@ extern \"C\" {\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n         PGOSampleUsePath: *const c_char,\n+        SizeLevel: c_int,\n     );\n     pub fn LLVMRustAddLibraryInfo<'a>(\n         PM: &PassManager<'a>,"}, {"sha": "7b407c94e7b066e8e9c6b30aa98b42b29ba3451d", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -542,6 +542,11 @@ pub(crate) fn should_use_new_llvm_pass_manager(user_opt: &Option<bool>, target_a\n     // The new pass manager is enabled by default for LLVM >= 13.\n     // This matches Clang, which also enables it since Clang 13.\n \n+    // Since LLVM 15, the legacy pass manager is no longer supported.\n+    if llvm_util::get_version() >= (15, 0, 0) {\n+        return true;\n+    }\n+\n     // There are some perf issues with the new pass manager when targeting\n     // s390x with LLVM 13, so enable the new pass manager only with LLVM 14.\n     // See https://github.com/rust-lang/rust/issues/89609."}, {"sha": "1327bf6fcd427a9523213875f9ae02fec1fce78d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -752,6 +752,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n+    tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, Some(true));"}, {"sha": "38fddbdba54ddf9a04a22a7b52c7fe05065a6161", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -107,6 +107,7 @@ static LLVMRustPassKind toRust(PassKind Kind) {\n }\n \n extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n+#if LLVM_VERSION_LT(15, 0)\n   StringRef SR(PassName);\n   PassRegistry *PR = PassRegistry::getPassRegistry();\n \n@@ -115,36 +116,59 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n     return wrap(PI->createPass());\n   }\n   return nullptr;\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n   const bool UseAfterScope = true;\n \n   return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover, UseAfterScope));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createModuleAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n+#if LLVM_VERSION_LT(15, 0)\n   return wrap(createThreadSanitizerLegacyPassPass());\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n@@ -154,23 +178,84 @@ extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n }\n \n extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n+#if LLVM_VERSION_LT(15, 0)\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);\n   PassManagerBase *PMB = unwrap(PMR);\n   PMB->add(Pass);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" LLVMPassManagerBuilderRef LLVMRustPassManagerBuilderCreate() {\n+#if LLVM_VERSION_LT(15, 0)\n+  return LLVMPassManagerBuilderCreate();\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderDispose(LLVMPassManagerBuilderRef PMB) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderDispose(PMB);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateFunctionPassManager(PMB, PM);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateModulePassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateModulePassManager(PMB, PM);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateLTOPassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM, bool Internalize, bool RunInliner) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateLTOPassManager(PMB, PM, Internalize, RunInliner);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\"\n void LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n   LLVMPassManagerBuilderRef PMBR,\n   LLVMPassManagerRef PMR\n ) {\n+#if LLVM_VERSION_LT(15, 0)\n   unwrap(PMBR)->populateThinLTOPassManager(*unwrap(PMR));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n+  LLVMPassManagerBuilderRef PMB, unsigned Threshold) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderUseInlinerWithThreshold(PMB, Threshold);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\"\n void LLVMRustAddLastExtensionPasses(\n     LLVMPassManagerBuilderRef PMBR, LLVMPassRef *Passes, size_t NumPasses) {\n+#if LLVM_VERSION_LT(15, 0)\n   auto AddExtensionPasses = [Passes, NumPasses](\n       const PassManagerBuilder &Builder, PassManagerBase &PM) {\n     for (size_t I = 0; I < NumPasses; I++) {\n@@ -183,6 +268,9 @@ void LLVMRustAddLastExtensionPasses(\n                              AddExtensionPasses);\n   unwrap(PMBR)->addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,\n                              AddExtensionPasses);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n #ifdef LLVM_COMPONENT_X86\n@@ -533,12 +621,16 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n-    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath) {\n+    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath,\n+    int SizeLevel) {\n+#if LLVM_VERSION_LT(15, 0)\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n   unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n+  unwrap(PMBR)->SizeLevel = SizeLevel;\n+  unwrap(PMBR)->DisableUnrollLoops = SizeLevel != 0;\n \n   if (PGOGenPath) {\n     assert(!PGOUsePath && !PGOSampleUsePath);\n@@ -550,6 +642,9 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n   } else if (PGOSampleUsePath) {\n     unwrap(PMBR)->PGOSampleUse = PGOSampleUsePath;\n   }\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`"}, {"sha": "850b80e42801bfe31074df388103e21e87a66317", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -6,6 +6,7 @@\n #include \"llvm/IR/GlobalVariable.h\"\n #include \"llvm/IR/Instructions.h\"\n #include \"llvm/IR/Intrinsics.h\"\n+#include \"llvm/IR/Mangler.h\"\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/COFFImportFile.h\"\n #include \"llvm/Object/ObjectFile.h\""}, {"sha": "2380391d09a914042e3b83e77c740543c1077175", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -77,17 +77,30 @@ pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn\n     let mut cnt = 0;\n \n     let validate = tcx.sess.opts.debugging_opts.validate_mir;\n+    let overridden_passes = &tcx.sess.opts.debugging_opts.mir_enable_passes;\n+    trace!(?overridden_passes);\n \n     if validate {\n         validate_body(tcx, body, format!(\"start of phase transition from {:?}\", start_phase));\n     }\n \n     for pass in passes {\n-        if !pass.is_enabled(&tcx.sess) {\n-            continue;\n-        }\n-\n         let name = pass.name();\n+\n+        if let Some((_, polarity)) = overridden_passes.iter().rev().find(|(s, _)| s == &*name) {\n+            trace!(\n+                pass = %name,\n+                \"{} as requested by flag\",\n+                if *polarity { \"Running\" } else { \"Not running\" },\n+            );\n+            if !polarity {\n+                continue;\n+            }\n+        } else {\n+            if !pass.is_enabled(&tcx.sess) {\n+                continue;\n+            }\n+        }\n         let dump_enabled = pass.is_mir_dump_enabled();\n \n         if dump_enabled {"}, {"sha": "96f50e57ac4d0efe779ec63c14fc44a3a1c1c2f0", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -368,6 +368,8 @@ mod desc {\n     pub const parse_opt_langid: &str = \"a language identifier\";\n     pub const parse_opt_pathbuf: &str = \"a path\";\n     pub const parse_list: &str = \"a space-separated list of strings\";\n+    pub const parse_list_with_polarity: &str =\n+        \"a comma-separated list of strings, with elements beginning with + or -\";\n     pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n     pub const parse_number: &str = \"a number\";\n     pub const parse_opt_number: &str = parse_number;\n@@ -529,6 +531,19 @@ mod parse {\n         }\n     }\n \n+    crate fn parse_list_with_polarity(slot: &mut Vec<(String, bool)>, v: Option<&str>) -> bool {\n+        match v {\n+            Some(s) => {\n+                for s in s.split(\",\") {\n+                    let Some(pass_name) = s.strip_prefix(&['+', '-'][..]) else { return false };\n+                    slot.push((pass_name.to_string(), &s[..1] == \"+\"));\n+                }\n+                true\n+            }\n+            None => false,\n+        }\n+    }\n+\n     crate fn parse_location_detail(ld: &mut LocationDetail, v: Option<&str>) -> bool {\n         if let Some(v) = v {\n             ld.line = false;\n@@ -1318,6 +1333,10 @@ options! {\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n+    mir_enable_passes: Vec<(String, bool)> = (Vec::new(), parse_list_with_polarity, [TRACKED],\n+        \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n+        enabled, overriding all other checks. Passes that are not specified are enabled or \\\n+        disabled by other flags as usual.\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],"}, {"sha": "1cd0ace8adb052ab23d242516c85198138156f60", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 83, "deletions": 9, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2563,40 +2563,77 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We proactively collect all the inferred type params to emit a single error per fn def.\n         let mut visitor = HirPlaceholderCollector::default();\n-        for ty in decl.inputs {\n-            visitor.visit_ty(ty);\n-        }\n+        let mut infer_replacements = vec![];\n+\n         walk_generics(&mut visitor, generics);\n \n-        let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n+        let input_tys: Vec<_> = decl\n+            .inputs\n+            .iter()\n+            .enumerate()\n+            .map(|(i, a)| {\n+                if let hir::TyKind::Infer = a.kind && !self.allow_ty_infer() {\n+                    if let Some(suggested_ty) =\n+                        self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, Some(i))\n+                    {\n+                        infer_replacements.push((a.span, suggested_ty.to_string()));\n+                        return suggested_ty;\n+                    }\n+                }\n+\n+                // Only visit the type looking for `_` if we didn't fix the type above\n+                visitor.visit_ty(a);\n+                self.ty_of_arg(a, None)\n+            })\n+            .collect();\n+\n         let output_ty = match decl.output {\n             hir::FnRetTy::Return(output) => {\n-                visitor.visit_ty(output);\n-                self.ast_ty_to_ty(output)\n+                if let hir::TyKind::Infer = output.kind\n+                    && !self.allow_ty_infer()\n+                    && let Some(suggested_ty) =\n+                        self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, None)\n+                {\n+                    infer_replacements.push((output.span, suggested_ty.to_string()));\n+                    suggested_ty\n+                } else {\n+                    visitor.visit_ty(output);\n+                    self.ast_ty_to_ty(output)\n+                }\n             }\n             hir::FnRetTy::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);\n \n-        let fn_ty = tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi);\n+        let fn_ty = tcx.mk_fn_sig(input_tys.into_iter(), output_ty, decl.c_variadic, unsafety, abi);\n         let bare_fn_ty = ty::Binder::bind_with_vars(fn_ty, bound_vars);\n \n-        if !self.allow_ty_infer() {\n+        if !self.allow_ty_infer() && !(visitor.0.is_empty() && infer_replacements.is_empty()) {\n             // We always collect the spans for placeholder types when evaluating `fn`s, but we\n             // only want to emit an error complaining about them if infer types (`_`) are not\n             // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n             // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n \n-            crate::collect::placeholder_type_error(\n+            let mut diag = crate::collect::placeholder_type_error_diag(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()),\n                 generics.params,\n                 visitor.0,\n+                infer_replacements.iter().map(|(s, _)| *s).collect(),\n                 true,\n                 hir_ty,\n                 \"function\",\n             );\n+\n+            if !infer_replacements.is_empty() {\n+                diag.multipart_suggestion(&format!(\n+                    \"try replacing `_` with the type{} in the corresponding trait method signature\",\n+                    rustc_errors::pluralize!(infer_replacements.len()),\n+                ), infer_replacements, Applicability::MachineApplicable);\n+            }\n+\n+            diag.emit();\n         }\n \n         // Find any late-bound regions declared in return type that do\n@@ -2624,6 +2661,43 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         bare_fn_ty\n     }\n \n+    /// Given a fn_hir_id for a impl function, suggest the type that is found on the\n+    /// corresponding function in the trait that the impl implements, if it exists.\n+    /// If arg_idx is Some, then it corresponds to an input type index, otherwise it\n+    /// corresponds to the return type.\n+    fn suggest_trait_fn_ty_for_impl_fn_infer(\n+        &self,\n+        fn_hir_id: hir::HirId,\n+        arg_idx: Option<usize>,\n+    ) -> Option<Ty<'tcx>> {\n+        let tcx = self.tcx();\n+        let hir = tcx.hir();\n+\n+        let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n+            hir.get(fn_hir_id) else { return None };\n+        let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n+                hir.get(hir.get_parent_node(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n+\n+        let trait_ref =\n+            self.instantiate_mono_trait_ref(i.of_trait.as_ref()?, self.ast_ty_to_ty(i.self_ty));\n+\n+        let x: &ty::AssocItem = tcx.associated_items(trait_ref.def_id).find_by_name_and_kind(\n+            tcx,\n+            *ident,\n+            ty::AssocKind::Fn,\n+            trait_ref.def_id,\n+        )?;\n+\n+        let fn_sig = tcx.fn_sig(x.def_id).subst(\n+            tcx,\n+            trait_ref.substs.extend_to(tcx, x.def_id, |param, _| tcx.mk_param_from_def(param)),\n+        );\n+\n+        let ty = if let Some(arg_idx) = arg_idx { fn_sig.input(arg_idx) } else { fn_sig.output() };\n+\n+        Some(tcx.erase_late_bound_regions(ty))\n+    }\n+\n     fn validate_late_bound_regions(\n         &self,\n         constrained_regions: FxHashSet<ty::BoundRegionKind>,"}, {"sha": "be77bdb0bf5f06e3b16840f6ab2e67fed4489e28", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 107, "deletions": 45, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -160,6 +160,33 @@ crate fn placeholder_type_error<'tcx>(\n         return;\n     }\n \n+    placeholder_type_error_diag(\n+        tcx,\n+        span,\n+        generics,\n+        placeholder_types,\n+        vec![],\n+        suggest,\n+        hir_ty,\n+        kind,\n+    )\n+    .emit();\n+}\n+\n+crate fn placeholder_type_error_diag<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    span: Option<Span>,\n+    generics: &[hir::GenericParam<'_>],\n+    placeholder_types: Vec<Span>,\n+    additional_spans: Vec<Span>,\n+    suggest: bool,\n+    hir_ty: Option<&hir::Ty<'_>>,\n+    kind: &'static str,\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n+    if placeholder_types.is_empty() {\n+        return bad_placeholder(tcx, additional_spans, kind);\n+    }\n+\n     let type_name = generics.next_type_param_name(None);\n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();\n@@ -182,7 +209,8 @@ crate fn placeholder_type_error<'tcx>(\n         sugg.push((span, format!(\", {}\", type_name)));\n     }\n \n-    let mut err = bad_placeholder(tcx, placeholder_types, kind);\n+    let mut err =\n+        bad_placeholder(tcx, placeholder_types.into_iter().chain(additional_spans).collect(), kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -218,7 +246,8 @@ crate fn placeholder_type_error<'tcx>(\n             );\n         }\n     }\n-    err.emit();\n+\n+    err\n }\n \n fn reject_placeholder_type_signatures_in_item<'tcx>(\n@@ -1868,50 +1897,17 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             generics,\n             ..\n         })\n-        | ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), ident, generics, .. })\n         | Item(hir::Item { kind: ItemKind::Fn(sig, generics, _), ident, .. }) => {\n-            match get_infer_ret_ty(&sig.decl.output) {\n-                Some(ty) => {\n-                    let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n-                    // Typeck doesn't expect erased regions to be returned from `type_of`.\n-                    let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n-                        ty::ReErased => tcx.lifetimes.re_static,\n-                        _ => r,\n-                    });\n-                    let fn_sig = ty::Binder::dummy(fn_sig);\n-\n-                    let mut visitor = HirPlaceholderCollector::default();\n-                    visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n-                    let ret_ty = fn_sig.skip_binder().output();\n-                    if !ret_ty.references_error() {\n-                        if !ret_ty.is_closure() {\n-                            let ret_ty_str = match ret_ty.kind() {\n-                                // Suggest a function pointer return type instead of a unique function definition\n-                                // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n-                                // syntax)\n-                                ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n-                                _ => ret_ty.to_string(),\n-                            };\n-                            diag.span_suggestion(\n-                                ty.span,\n-                                \"replace with the correct return type\",\n-                                ret_ty_str,\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                            // to prevent the user from getting a papercut while trying to use the unique closure\n-                            // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n-                            diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                            diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n-                        }\n-                    }\n-                    diag.emit();\n+            infer_return_ty_for_fn_sig(tcx, sig, *ident, generics, def_id, &icx)\n+        }\n \n-                    fn_sig\n-                }\n-                None => <dyn AstConv<'_>>::ty_of_fn(\n+        ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), ident, generics, .. }) => {\n+            // Do not try to inference the return type for a impl method coming from a trait\n+            if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n+                tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+                && i.of_trait.is_some()\n+            {\n+                <dyn AstConv<'_>>::ty_of_fn(\n                     &icx,\n                     hir_id,\n                     sig.header.unsafety,\n@@ -1920,7 +1916,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     generics,\n                     Some(ident.span),\n                     None,\n-                ),\n+                )\n+            } else {\n+                infer_return_ty_for_fn_sig(tcx, sig, *ident, generics, def_id, &icx)\n             }\n         }\n \n@@ -1982,6 +1980,70 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     }\n }\n \n+fn infer_return_ty_for_fn_sig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    sig: &hir::FnSig<'_>,\n+    ident: Ident,\n+    generics: &hir::Generics<'_>,\n+    def_id: LocalDefId,\n+    icx: &ItemCtxt<'tcx>,\n+) -> ty::PolyFnSig<'tcx> {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+\n+    match get_infer_ret_ty(&sig.decl.output) {\n+        Some(ty) => {\n+            let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n+            // Typeck doesn't expect erased regions to be returned from `type_of`.\n+            let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n+                ty::ReErased => tcx.lifetimes.re_static,\n+                _ => r,\n+            });\n+            let fn_sig = ty::Binder::dummy(fn_sig);\n+\n+            let mut visitor = HirPlaceholderCollector::default();\n+            visitor.visit_ty(ty);\n+            let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n+            let ret_ty = fn_sig.skip_binder().output();\n+            if !ret_ty.references_error() {\n+                if !ret_ty.is_closure() {\n+                    let ret_ty_str = match ret_ty.kind() {\n+                        // Suggest a function pointer return type instead of a unique function definition\n+                        // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n+                        // syntax)\n+                        ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n+                        _ => ret_ty.to_string(),\n+                    };\n+                    diag.span_suggestion(\n+                        ty.span,\n+                        \"replace with the correct return type\",\n+                        ret_ty_str,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n+                    // to prevent the user from getting a papercut while trying to use the unique closure\n+                    // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n+                    diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+                    diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n+                }\n+            }\n+            diag.emit();\n+\n+            fn_sig\n+        }\n+        None => <dyn AstConv<'_>>::ty_of_fn(\n+            icx,\n+            hir_id,\n+            sig.header.unsafety,\n+            sig.header.abi,\n+            sig.decl,\n+            generics,\n+            Some(ident.span),\n+            None,\n+        ),\n+    }\n+}\n+\n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n     match tcx.hir().expect_item(def_id.expect_local()).kind {"}, {"sha": "f2869a54713d29d70eb9c6f90189ad9cab8c23c9", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -162,6 +162,300 @@ fn test_insert() {\n     }\n }\n \n+#[test]\n+fn test_get() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester.len(), 3);\n+\n+    assert_eq!(tester.get(1), Some(&2));\n+    assert_eq!(tester.get(2), Some(&3));\n+    assert_eq!(tester.get(0), Some(&1));\n+    assert_eq!(tester.get(3), None);\n+\n+    tester.remove(0);\n+\n+    assert_eq!(tester.len(), 2);\n+    assert_eq!(tester.get(0), Some(&2));\n+    assert_eq!(tester.get(1), Some(&3));\n+    assert_eq!(tester.get(2), None);\n+}\n+\n+#[test]\n+fn test_get_mut() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester.len(), 3);\n+\n+    if let Some(elem) = tester.get_mut(0) {\n+        assert_eq!(*elem, 1);\n+        *elem = 10;\n+    }\n+\n+    if let Some(elem) = tester.get_mut(2) {\n+        assert_eq!(*elem, 3);\n+        *elem = 30;\n+    }\n+\n+    assert_eq!(tester.get(0), Some(&10));\n+    assert_eq!(tester.get(2), Some(&30));\n+    assert_eq!(tester.get_mut(3), None);\n+\n+    tester.remove(2);\n+\n+    assert_eq!(tester.len(), 2);\n+    assert_eq!(tester.get(0), Some(&10));\n+    assert_eq!(tester.get(1), Some(&2));\n+    assert_eq!(tester.get(2), None);\n+}\n+\n+#[test]\n+fn test_swap() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester, [1, 2, 3]);\n+\n+    tester.swap(0, 0);\n+    assert_eq!(tester, [1, 2, 3]);\n+    tester.swap(0, 1);\n+    assert_eq!(tester, [2, 1, 3]);\n+    tester.swap(2, 1);\n+    assert_eq!(tester, [2, 3, 1]);\n+    tester.swap(1, 2);\n+    assert_eq!(tester, [2, 1, 3]);\n+    tester.swap(0, 2);\n+    assert_eq!(tester, [3, 1, 2]);\n+    tester.swap(2, 2);\n+    assert_eq!(tester, [3, 1, 2]);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: j < self.len()\"]\n+fn test_swap_panic() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+    tester.swap(2, 3);\n+}\n+\n+#[test]\n+fn test_reserve_exact() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    tester.reserve_exact(50);\n+    assert!(tester.capacity() >= 51);\n+    tester.reserve_exact(40);\n+    assert!(tester.capacity() >= 51);\n+    tester.reserve_exact(200);\n+    assert!(tester.capacity() >= 200);\n+}\n+\n+#[test]\n+#[should_panic = \"capacity overflow\"]\n+fn test_reserve_exact_panic() {\n+    let mut tester: VecDeque<i32> = VecDeque::new();\n+    tester.reserve_exact(usize::MAX);\n+}\n+\n+#[test]\n+fn test_try_reserve_exact() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    assert_eq!(tester.try_reserve_exact(100), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve_exact(50), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve_exact(200), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert_eq!(tester.try_reserve_exact(0), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert!(tester.try_reserve_exact(usize::MAX).is_err());\n+}\n+\n+#[test]\n+fn test_try_reserve() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    assert_eq!(tester.try_reserve(100), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve(50), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve(200), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert_eq!(tester.try_reserve(0), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert!(tester.try_reserve(usize::MAX).is_err());\n+}\n+\n+#[test]\n+fn test_contains() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert!(tester.contains(&1));\n+    assert!(tester.contains(&3));\n+    assert!(!tester.contains(&0));\n+    assert!(!tester.contains(&4));\n+    tester.remove(0);\n+    assert!(!tester.contains(&1));\n+    assert!(tester.contains(&2));\n+    assert!(tester.contains(&3));\n+}\n+\n+#[test]\n+fn test_rotate_left_right() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+\n+    assert_eq!(tester.len(), 10);\n+\n+    tester.rotate_left(0);\n+    assert_eq!(tester, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n+\n+    tester.rotate_right(0);\n+    assert_eq!(tester, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n+\n+    tester.rotate_left(3);\n+    assert_eq!(tester, [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]);\n+\n+    tester.rotate_right(5);\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_left(tester.len());\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_right(tester.len());\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_left(1);\n+    assert_eq!(tester, [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: mid <= self.len()\"]\n+fn test_rotate_left_panic() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+    tester.rotate_left(tester.len() + 1);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: k <= self.len()\"]\n+fn test_rotate_right_panic() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+    tester.rotate_right(tester.len() + 1);\n+}\n+\n+#[test]\n+fn test_binary_search() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+\n+    assert_eq!(tester.binary_search(&0), Ok(0));\n+    assert_eq!(tester.binary_search(&5), Ok(5));\n+    assert_eq!(tester.binary_search(&55), Ok(10));\n+    assert_eq!(tester.binary_search(&4), Err(5));\n+    assert_eq!(tester.binary_search(&-1), Err(0));\n+    assert!(matches!(tester.binary_search(&1), Ok(1..=2)));\n+\n+    let tester: VecDeque<_> = [1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3].into();\n+    assert_eq!(tester.binary_search(&1), Ok(0));\n+    assert!(matches!(tester.binary_search(&2), Ok(1..=4)));\n+    assert!(matches!(tester.binary_search(&3), Ok(5..=13)));\n+    assert_eq!(tester.binary_search(&-2), Err(0));\n+    assert_eq!(tester.binary_search(&0), Err(0));\n+    assert_eq!(tester.binary_search(&4), Err(14));\n+    assert_eq!(tester.binary_search(&5), Err(14));\n+}\n+\n+#[test]\n+fn test_binary_search_by() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&0)), Ok(0));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&5)), Ok(5));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&55)), Ok(10));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&4)), Err(5));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&-1)), Err(0));\n+    assert!(matches!(tester.binary_search_by(|x| x.cmp(&1)), Ok(1..=2)));\n+}\n+\n+#[test]\n+fn test_binary_search_key() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [\n+        (-1, 0),\n+        (2, 10),\n+        (6, 5),\n+        (7, 1),\n+        (8, 10),\n+        (10, 2),\n+        (20, 3),\n+        (24, 5),\n+        (25, 18),\n+        (28, 13),\n+        (31, 21),\n+        (32, 4),\n+        (54, 25),\n+    ]\n+    .into();\n+\n+    assert_eq!(tester.binary_search_by_key(&-1, |&(a, _b)| a), Ok(0));\n+    assert_eq!(tester.binary_search_by_key(&8, |&(a, _b)| a), Ok(4));\n+    assert_eq!(tester.binary_search_by_key(&25, |&(a, _b)| a), Ok(8));\n+    assert_eq!(tester.binary_search_by_key(&54, |&(a, _b)| a), Ok(12));\n+    assert_eq!(tester.binary_search_by_key(&-2, |&(a, _b)| a), Err(0));\n+    assert_eq!(tester.binary_search_by_key(&1, |&(a, _b)| a), Err(1));\n+    assert_eq!(tester.binary_search_by_key(&4, |&(a, _b)| a), Err(2));\n+    assert_eq!(tester.binary_search_by_key(&13, |&(a, _b)| a), Err(6));\n+    assert_eq!(tester.binary_search_by_key(&55, |&(a, _b)| a), Err(13));\n+    assert_eq!(tester.binary_search_by_key(&100, |&(a, _b)| a), Err(13));\n+\n+    let tester: VecDeque<_> = [\n+        (0, 0),\n+        (2, 1),\n+        (6, 1),\n+        (5, 1),\n+        (3, 1),\n+        (1, 2),\n+        (2, 3),\n+        (4, 5),\n+        (5, 8),\n+        (8, 13),\n+        (1, 21),\n+        (2, 34),\n+        (4, 55),\n+    ]\n+    .into();\n+\n+    assert_eq!(tester.binary_search_by_key(&0, |&(_a, b)| b), Ok(0));\n+    assert!(matches!(tester.binary_search_by_key(&1, |&(_a, b)| b), Ok(1..=4)));\n+    assert_eq!(tester.binary_search_by_key(&8, |&(_a, b)| b), Ok(8));\n+    assert_eq!(tester.binary_search_by_key(&13, |&(_a, b)| b), Ok(9));\n+    assert_eq!(tester.binary_search_by_key(&55, |&(_a, b)| b), Ok(12));\n+    assert_eq!(tester.binary_search_by_key(&-1, |&(_a, b)| b), Err(0));\n+    assert_eq!(tester.binary_search_by_key(&4, |&(_a, b)| b), Err(7));\n+    assert_eq!(tester.binary_search_by_key(&56, |&(_a, b)| b), Err(13));\n+    assert_eq!(tester.binary_search_by_key(&100, |&(_a, b)| b), Err(13));\n+}\n+\n #[test]\n fn make_contiguous_big_tail() {\n     let mut tester = VecDeque::with_capacity(15);"}, {"sha": "5f85fc5aa5903d0cbcc61bf265e1974ea7b20eaa", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -31,8 +31,8 @@ fn main() {\n \n     let mut cmd = Command::new(rustdoc);\n \n-    // I am not actually sure why it's necessary to pass the sysroot for `--test`,\n-    // but `test --doc --stage 0` is broken without it :(\n+    // cfg(bootstrap)\n+    // NOTE: the `--test` special-casing can be removed when https://github.com/rust-lang/cargo/pull/10594 lands on beta.\n     if target.is_some() || args.iter().any(|x| x == \"--test\") {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option,\n@@ -65,13 +65,6 @@ fn main() {\n         }\n     }\n \n-    // Needed to be able to run all rustdoc tests.\n-    if let Some(ref x) = env::var_os(\"RUSTDOC_RESOURCE_SUFFIX\") {\n-        // This \"unstable-options\" can be removed when `--resource-suffix` is stabilized\n-        cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        cmd.arg(\"--resource-suffix\").arg(x);\n-    }\n-\n     if verbose > 1 {\n         eprintln!(\n             \"rustdoc command: {:?}={:?} {:?}\","}, {"sha": "7a84484c41996906a75af3073afb4f81be5e17ec", "filename": "src/test/codegen/panic-in-drop-abort.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,14 +1,12 @@\n-// compile-flags: -Z panic-in-drop=abort -O -Z new-llvm-pass-manager=no\n+// compile-flags: -Z panic-in-drop=abort -O\n+// ignore-msvc\n \n // Ensure that unwinding code paths are eliminated from the output after\n // optimization.\n \n-// This test uses -Z new-llvm-pass-manager=no, because the expected optimization does not happen\n-// on targets using SEH exceptions (i.e. MSVC) anymore. The core issue is that Rust promises that\n-// the drop_in_place() function can't unwind, but implements it in a way that *can*, because we\n-// currently go out of our way to allow longjmps, which also use the unwinding mechanism on MSVC\n-// targets. We should either forbid longjmps, or not assume nounwind, making this optimization\n-// incompatible with the current behavior of running cleanuppads on longjmp unwinding.\n+// This test uses ignore-msvc, because the expected optimization does not happen on targets using\n+// SEH exceptions with the new LLVM pass manager anymore, see\n+// https://github.com/llvm/llvm-project/issues/51311.\n \n // CHECK-NOT: {{(call|invoke).*}}should_not_appear_in_output\n "}, {"sha": "7cc50a86e21e1d5ab813f4de454f456ca9403b93", "filename": "src/test/mir-opt/combine_clone_of_primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=0 -Z inline_mir=no\n+// unit-test: InstCombine\n // ignore-wasm32 compiled with panic=abort by default\n \n // EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff"}, {"sha": "fdc016a95d58e68738edefe4e7dc7f82455d8b88", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -23,9 +23,15 @@\n       }\n   \n       bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n           _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n           _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n           _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_5);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n -         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n -         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n +         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n@@ -37,6 +43,10 @@\n       }\n   \n       bb1: {\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n+          StorageLive(_8);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_9);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_10);                // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n@@ -50,6 +60,10 @@\n       }\n   \n       bb2: {\n+          StorageDead(_9);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n+          StorageLive(_11);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_12);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_13);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n@@ -63,10 +77,20 @@\n       }\n   \n       bb3: {\n+          StorageDead(_12);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n           Deinit(_0);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          StorageDead(_13);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_11);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_10);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_8);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_5);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n           return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:15: 6:15\n       }\n   "}, {"sha": "038a1afc58bb6e44becf9780f93ee84489a895d3", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -68,8 +68,10 @@\n +     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:8:2: 8:2\n-+     }\n-+ \n+      }\n+  \n+-     bb5 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:3:1: 8:2\n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n +         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17"}, {"sha": "75549c1b3ddf276e0e5749c38637a160623f2761", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -32,7 +32,7 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n--         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb7]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+-         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n@@ -84,8 +84,8 @@\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:17:2: 17:2\n       }\n   \n--     bb7: {\n--         unreachable;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:11:1: 17:2\n +     bb5: {\n +         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17"}, {"sha": "30726d8621e1f98f63a6758829dcace56c9bd42b", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -68,8 +68,10 @@\n +     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:26:2: 26:2\n-+     }\n-+ \n+      }\n+  \n+-     bb5 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:21:1: 26:2\n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n +         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17"}, {"sha": "7be9fbd0326f65fbbca5d0e26afa540d4e51ca58", "filename": "src/test/mir-opt/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n // EMIT_MIR early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>) -> u32 {\n     match (x, y) {"}, {"sha": "ddf26ad8ab323c5ef55aa6c48e61bf4165717ad5", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -90,8 +90,10 @@\n +     bb4: {\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:2: 9:2\n-+     }\n-+ \n+      }\n+  \n+-     bb6 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:1: 9:2\n +     bb5: {\n +         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n +         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20"}, {"sha": "76055e1330fa7c88beec278069d74d0b5e99f3ad", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // EMIT_MIR early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>, z: Option<u32>) -> u32 {"}, {"sha": "4d2db490836d834ab49144e9fe12a3a87e80a6c1", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -38,54 +38,62 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _8) -> [0_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          switchInt(move _8) -> [0_isize: bb1, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb1: {\n           _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _6) -> [0_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          switchInt(move _6) -> [0_isize: bb2, 1_isize: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb2: {\n           _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n       }\n   \n       bb3: {\n-          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _7) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n       }\n   \n       bb4: {\n+          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          switchInt(move _7) -> [0_isize: bb6, 1_isize: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+      }\n+  \n+      bb5: {\n           StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n           _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n           StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n       }\n   \n-      bb5: {\n+      bb6: {\n           StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n           StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n       }\n   \n-      bb6: {\n+      bb7: {\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n       }\n   \n-      bb7: {\n+      bb8: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:1: 14:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:2: 14:2\n       }\n+  \n+      bb9 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:1: 14:2\n+      }\n   }\n   "}, {"sha": "ef766bbd4a651b6ff664af1f1f6a915c1774a350", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // must not optimize as it does not follow the pattern of\n // left and right hand side being the same variant"}, {"sha": "92a719d997d6bea4738cf21a3adb84964124a0b0", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -19,7 +19,7 @@\n   \n       bb1: {\n           _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n       }\n   \n       bb2: {\n@@ -29,15 +29,23 @@\n   \n       bb3: {\n           _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n       }\n   \n       bb4: {\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n           _5 = (((*_2) as Some).0: i32);   // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n           _0 = _5;                         // scope 1 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n+      }\n+  \n+      bb5: {\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:27:2: 27:2\n+      }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:18:1: 27:2\n       }\n   }\n   "}, {"sha": "c43b32c7fc6e3d4b0503cc0f850c754187f2aa2d", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -19,12 +19,20 @@\n   \n       bb2: {\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n       }\n   \n       bb3: {\n           _0 = const 2_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:49: 13:50\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:14:2: 14:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:1: 14:2\n       }\n   }\n   "}, {"sha": "cd458923245348dcfd013b31b74c96487146c6f4", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // Tests various cases that the `early_otherwise_branch` opt should *not* optimize\n "}, {"sha": "398311e6bb8e2b9249f495287ea1ee858b7aed39", "filename": "src/test/mir-opt/if-condition-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O\n+// unit-test: SimplifyComparisonIntegral\n // EMIT_MIR if_condition_int.opt_u32.SimplifyComparisonIntegral.diff\n // EMIT_MIR if_condition_int.opt_negative.SimplifyComparisonIntegral.diff\n // EMIT_MIR if_condition_int.opt_char.SimplifyComparisonIntegral.diff"}, {"sha": "319a47367b3ab6bbc117a63f7fa3214bbbd14711", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:25: 17:26\n           return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:16:1: 18:2\n+      }\n   }\n   "}, {"sha": "98a6c83cbffae6da358335b4fc1915f87c0acc68", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -30,5 +30,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:34: 53:35\n           return;                          // scope 0 at $DIR/if-condition-int.rs:54:2: 54:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:52:1: 54:2\n+      }\n   }\n   "}, {"sha": "4019021ede8d57bb6a54e43cd6c47e2162628de9", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -54,5 +54,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:49:1: 49:2\n           return;                          // scope 0 at $DIR/if-condition-int.rs:49:2: 49:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:43:1: 49:2\n+      }\n   }\n   "}, {"sha": "d4f100e289f06d860a1f577feaea5de964729ed6", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:32: 21:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:22:2: 22:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:20:1: 22:2\n+      }\n   }\n   "}, {"sha": "06d2c666aeca69d17b4d6f51b5b9fac53840d681", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:31: 25:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:26:2: 26:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:24:1: 26:2\n+      }\n   }\n   "}, {"sha": "a7e4edf40a8d66686afa346b54efd17056bc54dd", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -61,5 +61,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n           return;                          // scope 0 at $DIR/if-condition-int.rs:40:2: 40:2\n       }\n+  \n+      bb7 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:32:1: 40:2\n+      }\n   }\n   "}, {"sha": "47f69b85e898c71256e46a7a03b4f686e4515457", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:32: 29:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:30:2: 30:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:28:1: 30:2\n+      }\n   }\n   "}, {"sha": "3920627d5248783f9edb5ea5a97a1b92bf273bb0", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:31: 12:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:13:2: 13:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:11:1: 13:2\n+      }\n   }\n   "}, {"sha": "12955aed1fbbe242b22061e33e0df6f5731cd49d", "filename": "src/test/mir-opt/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=3\n+// unit-test: LowerSliceLenCalls\n \n // EMIT_MIR lower_slice_len.bound.LowerSliceLenCalls.diff\n pub fn bound(index: usize, slice: &[u8]) -> u8 {"}, {"sha": "5786ae62127054cbd56a2e507ba8b9da07befd86", "filename": "src/test/mir-opt/nrvo-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=1\n+// unit-test: RenameReturnPlace\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff\n fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {"}, {"sha": "e07af6d5983112bb846139193059f86c0a8370a4", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -39,5 +39,9 @@\n -         StorageDead(_2);                 // scope 0 at $DIR/nrvo-simple.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/nrvo-simple.rs:8:2: 8:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/nrvo-simple.rs:4:1: 8:2\n+      }\n   }\n   "}, {"sha": "4963790c35de26101e74c9cfaf9f23e0e5a8828a", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+trait Foo<T>: Sized {\n+    fn bar(i: i32, t: T, s: &Self) -> (T, i32);\n+}\n+\n+impl Foo<usize> for () {\n+    fn bar(i: i32, t: usize, s: &()) -> (usize, i32) {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+        (1, 2)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ddf39c9c861973e65f309ae73d1627388aff40c8", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+trait Foo<T>: Sized {\n+    fn bar(i: i32, t: T, s: &Self) -> (T, i32);\n+}\n+\n+impl Foo<usize> for () {\n+    fn bar(i: _, t: _, s: _) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+        (1, 2)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "730836a40c26a2d97f1a6a70b853ad6a28228e54", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -0,0 +1,18 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/replace-impl-infer-ty-from-trait.rs:9:15\n+   |\n+LL |     fn bar(i: _, t: _, s: _) -> _ {\n+   |               ^     ^     ^     ^ not allowed in type signatures\n+   |               |     |     |\n+   |               |     |     not allowed in type signatures\n+   |               |     not allowed in type signatures\n+   |               not allowed in type signatures\n+   |\n+help: try replacing `_` with the types in the corresponding trait method signature\n+   |\n+LL |     fn bar(i: i32, t: usize, s: &()) -> (usize, i32) {\n+   |               ~~~     ~~~~~     ~~~     ~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "f10b19738c42374b944f83102f8148aba37d092e", "filename": "src/test/ui/regions/issue-28848.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,16 +1,16 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-28848.rs:10:5\n+  --> $DIR/issue-28848.rs:14:5\n    |\n LL |     Foo::<'a, 'b>::xmute(u)\n    |     ^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined here\n-  --> $DIR/issue-28848.rs:9:16\n+  --> $DIR/issue-28848.rs:13:16\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |                ^^\n note: but lifetime parameter must outlive the lifetime `'a` as defined here\n-  --> $DIR/issue-28848.rs:9:12\n+  --> $DIR/issue-28848.rs:13:12\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            ^^", "previous_filename": "src/test/ui/regions/issue-28848.stderr"}, {"sha": "f9de8948272af6b01bb47b3d3d25fdb7b8351257", "filename": "src/test/ui/regions/issue-28848.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-28848.rs:10:5\n+  --> $DIR/issue-28848.rs:14:5\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            --  -- lifetime `'b` defined here"}, {"sha": "d8ab42a08d448f579af0fbbb8598be34c0072f1d", "filename": "src/test/ui/regions/issue-28848.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fissue-28848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo<'a, 'b: 'a>(&'a &'b ());\n \n impl<'a, 'b> Foo<'a, 'b> {\n@@ -7,7 +11,9 @@ impl<'a, 'b> Foo<'a, 'b> {\n }\n \n pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n-    Foo::<'a, 'b>::xmute(u) //~ ERROR lifetime bound not satisfied\n+    Foo::<'a, 'b>::xmute(u)\n+    //[base]~^ ERROR lifetime bound not satisfied\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "ce21751a95a2681348d078e73b8894968b5b430f", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/region-invariant-static-error-reporting.rs:17:9\n+  --> $DIR/region-invariant-static-error-reporting.rs:21:9\n    |\n LL |       let bad = if x.is_some() {\n    |  _______________-\n@@ -14,7 +14,7 @@ LL | |     };\n    = note: expected struct `Invariant<'a>`\n               found struct `Invariant<'static>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/region-invariant-static-error-reporting.rs:13:10\n+  --> $DIR/region-invariant-static-error-reporting.rs:17:10\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n    |          ^^", "previous_filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr"}, {"sha": "6905fd008c525df8367324e2c3d45569b9c68c9c", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/region-invariant-static-error-reporting.rs:15:9\n+  --> $DIR/region-invariant-static-error-reporting.rs:19:9\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n    |          --  - `x` is a reference that is only valid in the function body"}, {"sha": "b81022ca4b40bacddc6ea35a0516d392dda756f3", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -3,18 +3,22 @@\n // over time, but this test used to exhibit some pretty bogus messages\n // that were not remotely helpful.\n \n-// error-pattern:the lifetime `'a`\n-// error-pattern:the static lifetime\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[base] error-pattern:the lifetime `'a`\n+//[base] error-pattern:the static lifetime\n+//[nll] compile-flags: -Z borrowck=mir\n+//[nll] error-pattern:argument requires that `'a` must outlive `'static`\n \n struct Invariant<'a>(Option<&'a mut &'a mut ()>);\n \n fn mk_static() -> Invariant<'static> { Invariant(None) }\n \n fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n     let bad = if x.is_some() {\n-        x.unwrap()\n+        x.unwrap() //[nll]~ ERROR borrowed data escapes outside of function [E0521]\n     } else {\n-        mk_static()\n+        mk_static() //[base]~ ERROR `if` and `else` have incompatible types [E0308]\n     };\n     f(bad);\n }"}, {"sha": "2ba4f4f5d9f46381c5c2f68fb5cdc00caa1fd239", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:8:10\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:12:10\n    |\n LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                      ---------          --------- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:14:7\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:7\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                     ---------          --------- these two types are declared with different lifetimes...\n@@ -17,7 +17,7 @@ LL |     a(x, y);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other", "previous_filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr"}, {"sha": "c64309743346d09b7815d8eab4feabe8cd9b84d1", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:8:5\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:12:5\n    |\n LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     *x = *y;\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:14:5\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:5\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |      -- -- lifetime `'b` defined here\n@@ -28,7 +28,7 @@ LL |     a(x, y);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:12\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -37,7 +37,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n               found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:12\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other"}, {"sha": "ec91d1798083c5c63b196f1ea1307620539e3923", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,23 +1,33 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) where 'b: 'a {\n     // Note: this is legal because of the `'b:'a` declaration.\n     *x = *y;\n }\n \n fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR E0623\n+    *x = *y;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y); //~ ERROR lifetime mismatch [E0623]\n+    a(x, y);\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n+    let _: fn(&mut &isize, &mut &isize) = a;\n+    //~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "537a1fb98a50f1093be89bf14b2144731f1e75a8", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:9:10\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:13:10\n    |\n LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |                          ---------          --------- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:10:10\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:10\n    |\n LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |                                             ---------          ---------\n@@ -19,7 +19,7 @@ LL |     *z = *y;\n    |          ^^ ...but data from `y` flows into `z` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:7\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:7\n    |\n LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |                         ---------          --------- these two types are declared with different lifetimes...\n@@ -28,7 +28,7 @@ LL |     a(x, y, z);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |                                                        ^ one type is more general than the other", "previous_filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr"}, {"sha": "053078f58df93d54ddafe4a7595f10a24c6d274b", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:9:5\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:13:5\n    |\n LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     *x = *y;\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:5\n    |\n LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |      -- -- lifetime `'b` defined here\n@@ -28,7 +28,7 @@ LL |     a(x, y, z);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -37,7 +37,7 @@ LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n               found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n \n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -46,7 +46,7 @@ LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n               found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n \n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other"}, {"sha": "13741664ef227bd0c49d7947110453d5ce3bbe3d", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/18f314e7027fe7084aaab8620c624a0d7bd29e70/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18f314e7027fe7084aaab8620c624a0d7bd29e70/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr?ref=18f314e7027fe7084aaab8620c624a0d7bd29e70", "patch": "@@ -1,82 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:9:5\n-   |\n-LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     // Illegal now because there is no `'b:'a` declaration.\n-LL |     *x = *y;\n-   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:10:5\n-   |\n-LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |          --  -- lifetime `'c` defined here\n-   |          |\n-   |          lifetime `'b` defined here\n-...\n-LL |     *z = *y;\n-   |     ^^^^^^^ assignment requires that `'b` must outlive `'c`\n-   |\n-   = help: consider adding the following bound: `'b: 'c`\n-\n-help: add bound `'b: 'a + 'c`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n-   |\n-LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |      -- -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |     a(x, y, z);\n-   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &isize\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n-   |\n-LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |         --  -- lifetime `'c` defined here\n-   |         |\n-   |         lifetime `'b` defined here\n-...\n-LL |     a(x, y, z);\n-   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'c`\n-   |\n-   = help: consider adding the following bound: `'b: 'c`\n-   = note: requirement occurs because of a mutable reference to &isize\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-help: add bound `'b: 'a + 'c`\n-\n-error: higher-ranked subtype error\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "8b5c1d47ec61b506f42e5ad9a0fe567f42ea53da", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) where 'b: 'a + 'c {\n     // Note: this is legal because of the `'b:'a` declaration.\n     *x = *y;\n@@ -6,20 +10,27 @@ fn a<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) where\n \n fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR E0623\n-    *z = *y; //~ ERROR E0623\n+    *x = *y;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    *z = *y; //[base]~ ERROR E0623\n }\n \n fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y, z); //~ ERROR lifetime mismatch [E0623]\n+    a(x, y, z);\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0308\n+    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+    //~^ ERROR E0308\n+    //[nll]~^^ ERROR mismatched types [E0308]\n+    //[nll]~| ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "118fe476500483ad376a865596040b5d98248eb4", "filename": "src/test/ui/regions/region-object-lifetime-2.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/region-object-lifetime-2.rs:10:7\n+  --> $DIR/region-object-lifetime-2.rs:14:7\n    |\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/region-object-lifetime-2.rs:9:42\n+  --> $DIR/region-object-lifetime-2.rs:13:42\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                          ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/region-object-lifetime-2.rs:10:5\n+  --> $DIR/region-object-lifetime-2.rs:14:5\n    |\n LL |     x.borrowed()\n    |     ^\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/region-object-lifetime-2.rs:9:45\n+  --> $DIR/region-object-lifetime-2.rs:13:45\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                             ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/region-object-lifetime-2.rs:10:5\n+  --> $DIR/region-object-lifetime-2.rs:14:5\n    |\n LL |     x.borrowed()\n    |     ^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/region-object-lifetime-2.stderr"}, {"sha": "c0b09ebb6f58b5e50014c58c8a4fdacfaa282511", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-2.rs:10:5\n+  --> $DIR/region-object-lifetime-2.rs:14:5\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                          -- -- lifetime `'b` defined here"}, {"sha": "e12b9822f60845e7e1e8d0091fe0a7de6bc96e93", "filename": "src/test/ui/regions/region-object-lifetime-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,19 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     fn borrowed<'a>(&'a self) -> &'a ();\n }\n \n // Borrowed receiver but two distinct lifetimes, we get an error.\n fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n-    x.borrowed() //~ ERROR cannot infer\n+    x.borrowed()\n+    //[base]~^ ERROR cannot infer\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "3765076a9c5cf0a0900805598e8c6ab65b8e442b", "filename": "src/test/ui/regions/region-object-lifetime-4.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/region-object-lifetime-4.rs:12:7\n+  --> $DIR/region-object-lifetime-4.rs:16:7\n    |\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/region-object-lifetime-4.rs:11:41\n+  --> $DIR/region-object-lifetime-4.rs:15:41\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n    |                                         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/region-object-lifetime-4.rs:12:5\n+  --> $DIR/region-object-lifetime-4.rs:16:5\n    |\n LL |     x.borrowed()\n    |     ^\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/region-object-lifetime-4.rs:11:44\n+  --> $DIR/region-object-lifetime-4.rs:15:44\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n    |                                            ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/region-object-lifetime-4.rs:12:5\n+  --> $DIR/region-object-lifetime-4.rs:16:5\n    |\n LL |     x.borrowed()\n    |     ^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/region-object-lifetime-4.stderr"}, {"sha": "a2a958f90b234e16369d5e6ee50577a5712f385a", "filename": "src/test/ui/regions/region-object-lifetime-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-4.rs:12:5\n+  --> $DIR/region-object-lifetime-4.rs:16:5\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n    |                                         -- -- lifetime `'b` defined here"}, {"sha": "aad9c2c95217ba259b9865f3c7393de954c7441a", "filename": "src/test/ui/regions/region-object-lifetime-4.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     fn borrowed<'a>(&'a self) -> &'a ();\n }\n@@ -9,7 +13,9 @@ trait Foo {\n // with the longer lifetime when (from the signature) we only know\n // that it lives as long as the shorter lifetime. Therefore, error.\n fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n-    x.borrowed() //~ ERROR cannot infer\n+    x.borrowed()\n+    //[base]~^ ERROR cannot infer\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "85bfa16b3d37d1bef2639046ef13c02062d8599e", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n@@ -16,15 +16,15 @@ LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ~~~~~~~~~~~~~\n \n error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n    |              ^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/region-object-lifetime-in-coercion.rs:12:33\n+  --> $DIR/region-object-lifetime-in-coercion.rs:18:33\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |                                 ^^^^^^^ `'static` requirement introduced here\n@@ -40,7 +40,7 @@ LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ~~~~~~~~~~~~~\n \n error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:27:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with an anonymous lifetime `'_`...\n@@ -49,7 +49,7 @@ LL |     Box::new(v)\n    |              ^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/region-object-lifetime-in-coercion.rs:16:23\n+  --> $DIR/region-object-lifetime-in-coercion.rs:24:23\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |                       ^^^^^^^ `'static` requirement introduced here\n@@ -62,30 +62,30 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ++++\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:33:14\n    |\n LL |     Box::new(v)\n    |              ^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:22:6\n+  --> $DIR/region-object-lifetime-in-coercion.rs:32:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:33:14\n    |\n LL |     Box::new(v)\n    |              ^\n    = note: expected `&[u8]`\n               found `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:22:9\n+  --> $DIR/region-object-lifetime-in-coercion.rs:32:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:33:5\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr"}, {"sha": "4d72724586e9a0ecd795b4d7f81966ee8f6d9025", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:8:12\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:12\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         - let's call the lifetime of this reference `'1`\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:13:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:5\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         - let's call the lifetime of this reference `'1`\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:19:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:27:5\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         - let's call the lifetime of this reference `'1`\n@@ -24,7 +24,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:33:5\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      -- -- lifetime `'b` defined here"}, {"sha": "ed28d6c0ff1aeeae28939de84474bd0cff27553e", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,26 +1,38 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    let x: Box<dyn Foo + 'static> = Box::new(v); //~ ERROR E0759\n+    let x: Box<dyn Foo + 'static> = Box::new(v);\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n     x\n }\n \n fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    Box::new(v) //~ ERROR E0759\n+    Box::new(v)\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn c(v: &[u8]) -> Box<dyn Foo> {\n     // same as previous case due to RFC 599\n \n-    Box::new(v) //~ ERROR E0759\n+    Box::new(v)\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n-    Box::new(v) //~ ERROR cannot infer an appropriate lifetime due to conflicting\n+    Box::new(v)\n+    //[base]~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn e<'a:'b,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {"}, {"sha": "3167c2f210784056291758044843508c338a1699", "filename": "src/test/ui/regions/regions-addr-of-self.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-addr-of-self.rs:7:37\n+  --> $DIR/regions-addr-of-self.rs:11:37\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      --------- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/regions/regions-addr-of-self.stderr"}, {"sha": "1f720520f6ba6c24f9ee29c26403f59a25008d55", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-addr-of-self.rs:7:16\n+  --> $DIR/regions-addr-of-self.rs:11:16\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`"}, {"sha": "698433c71b3804ba9e8f4a5d02af555a0f978a3f", "filename": "src/test/ui/regions/regions-addr-of-self.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Dog {\n     cats_chased: usize,\n }\n \n impl Dog {\n     pub fn chase_cat(&mut self) {\n-        let p: &'static mut usize = &mut self.cats_chased; //~ ERROR E0759\n+        let p: &'static mut usize = &mut self.cats_chased;\n+        //[base]~^ ERROR E0759\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         *p += 1;\n     }\n "}, {"sha": "42d0638e8b74ca67f45376b10a464ae4b0cd646f", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,22 +1,22 @@\n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'_` as defined here...\n-  --> $DIR/regions-addr-of-upvar-self.rs:7:18\n+  --> $DIR/regions-addr-of-upvar-self.rs:11:18\n    |\n LL |         let _f = || {\n    |                  ^^\n note: ...so that closure can access `self`\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr"}, {"sha": "b8e37e92316dbf5755d8b52c804bb9b229bfbe6d", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:20\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:20\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n@@ -9,7 +9,7 @@ LL |             let p: &'static mut usize = &mut self.food;\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:20\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n@@ -18,7 +18,7 @@ LL |             let p: &'static mut usize = &mut self.food;\n    |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:8:46\n+  --> $DIR/regions-addr-of-upvar-self.rs:12:46\n    |\n LL |         let _f = || {\n    |                  -- value captured here"}, {"sha": "36cc592d47c93e98bc2ff80b6cbc20d272325baa", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,11 +1,19 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Dog {\n     food: usize,\n }\n \n impl Dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n-            let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n+            let p: &'static mut usize = &mut self.food;\n+            //[base]~^ ERROR cannot infer\n+            //[nll]~^^ ERROR lifetime may not live long enough\n+            //[nll]~^^^ ERROR lifetime may not live long enough\n+            //[nll]~^^^^ ERROR E0597\n             *p = 3;\n         };\n     }"}, {"sha": "9b45dcfd95a7a357d067cc4575f15c1cb0555da7", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.base.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,71 +1,71 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:22:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n    |\n LL |     assert_send::<&'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^\n \n error[E0477]: the type `&'a str` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n    |\n LL |     assert_send::<&'a str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^\n \n error[E0477]: the type `&'a [isize]` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:38:5\n    |\n LL |     assert_send::<&'a [isize]>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^\n \n error[E0477]: the type `Box<&'a isize>` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n    |\n LL |     assert_send::<Box<&'a isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^\n \n error[E0477]: the type `*const &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:67:5\n    |\n LL |     assert_send::<*const &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^\n \n error[E0477]: the type `*mut &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:73:5\n    |\n LL |     assert_send::<*mut &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:10:18\n    |\n LL | fn assert_send<T:'static>() { }\n    |                  ^^^^^^^", "previous_filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.stderr"}, {"sha": "558a77516bbf73e48f496de63bf7f877ac098edb", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,45 +1,45 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:22:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n    |\n LL | fn param_not_ok<'a>(x: &'a isize) {\n    |                 -- lifetime `'a` defined here\n LL |     assert_send::<&'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n    |\n LL | fn param_not_ok1<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:38:5\n    |\n LL | fn param_not_ok2<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a [isize]>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n    |\n LL | fn box_with_region_not_ok<'a>() {\n    |                           -- lifetime `'a` defined here\n LL |     assert_send::<Box<&'a isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:67:5\n    |\n LL | fn unsafe_ok2<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here\n LL |     assert_send::<*const &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:73:5\n    |\n LL | fn unsafe_ok3<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here"}, {"sha": "37dc1300d398329de11be9be47acf62ed4a23f25", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,10 @@\n // in this file all test region bound and lifetime violations that are\n // detected during type check.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Dummy : 'static { }\n fn assert_send<T:'static>() { }\n \n@@ -19,15 +23,21 @@ fn static_lifime_ok<'a,T,U:Send>(_: &'a isize) {\n // otherwise lifetime pointers are not ok\n \n fn param_not_ok<'a>(x: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<&'a isize>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn param_not_ok1<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<&'a str>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn param_not_ok2<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<&'a [isize]>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n // boxes are ok\n@@ -41,7 +51,9 @@ fn box_ok() {\n // but not if they own a bad thing\n \n fn box_with_region_not_ok<'a>() {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<Box<&'a isize>>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n // raw pointers are ok unless they point at unsendable things\n@@ -52,11 +64,15 @@ fn unsafe_ok1<'a>(_: &'a isize) {\n }\n \n fn unsafe_ok2<'a>(_: &'a isize) {\n-    assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<*const &'a isize>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn unsafe_ok3<'a>(_: &'a isize) {\n-    assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n+    assert_send::<*mut &'a isize>();\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "e031f0db4124cf76bc74026bd8a0ab083d0b3132", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:20:7\n+  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:23:7\n    |\n LL | fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n    |                                  -------     ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.stderr"}, {"sha": "4f5d747be711bc8cb5efbcef4ae301d2fcfe36e3", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:20:5\n+  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:23:5\n    |\n LL | fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n    |                       --  -- lifetime `'y` defined here"}, {"sha": "e0965613f1dbec7c5ccef7bb8c7a2dc32880509f", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,4 +1,7 @@\n // aux-build:rbmtp_cross_crate_lib.rs\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n // Check explicit region bounds on methods in the cross crate case.\n \n@@ -17,7 +20,9 @@ fn call_into_maybe_owned<'x,F:IntoMaybeOwned<'x>>(f: F) {\n \n fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n     // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n-    a.bigger_region(b) //~ ERROR lifetime mismatch [E0623]\n+    a.bigger_region(b)\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "0a213e3f779988075b3d777394536582233e1507", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:7\n+  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:24:7\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n    |                                -------     ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.stderr"}, {"sha": "1c2f46a5fc1b2ced2dc4a7cf698842781c593814", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n+  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:24:5\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n    |            -- -- lifetime `'b` defined here"}, {"sha": "8a52a1549abf2a328ffe6a8acb07c31a6f986624", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,10 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Inv<'a> { // invariant w/r/t 'a\n     x: &'a mut &'a isize\n }\n@@ -17,7 +21,9 @@ fn caller1<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n \n fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n-    f.method(b); //~ ERROR lifetime mismatch [E0623]\n+    f.method(b);\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn caller3<'a,'b:'a,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {"}, {"sha": "3d37a1ba47b14f8ec3002af7b1432bd7e07ae33a", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-method-type-parameters.rs:12:9\n+  --> $DIR/regions-bounded-method-type-parameters.rs:16:9\n    |\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/regions-bounded-method-type-parameters.rs:8:22\n+  --> $DIR/regions-bounded-method-type-parameters.rs:12:22\n    |\n LL |     fn some_method<A:'static>(self) { }\n    |                      ^^^^^^^", "previous_filename": "src/test/ui/regions/regions-bounded-method-type-parameters.stderr"}, {"sha": "05c3fa58ea363482cdf0cfb3f9fabeaa46375016", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-bounded-method-type-parameters.rs:12:9\n+  --> $DIR/regions-bounded-method-type-parameters.rs:16:9\n    |\n LL | fn caller<'a>(x: &isize) {\n    |           -- lifetime `'a` defined here"}, {"sha": "06bc1544a3807e3d55319fdb2e84fc5878b2dc7b", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,10 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo;\n \n impl Foo {\n@@ -10,7 +14,8 @@ impl Foo {\n \n fn caller<'a>(x: &isize) {\n     Foo.some_method::<&'a isize>();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //[base]~^ ERROR does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "d853cdde336df6581e36e1358bbc325e0991aa66", "filename": "src/test/ui/regions/regions-bounds.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-bounds.rs:9:12\n+  --> $DIR/regions-bounds.rs:13:12\n    |\n LL |     return e;\n    |            ^ lifetime mismatch\n    |\n    = note: expected struct `TupleStruct<'b>`\n               found struct `TupleStruct<'a>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/regions-bounds.rs:8:10\n+  --> $DIR/regions-bounds.rs:12:10\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/regions-bounds.rs:8:13\n+  --> $DIR/regions-bounds.rs:12:13\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |             ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-bounds.rs:13:12\n+  --> $DIR/regions-bounds.rs:19:12\n    |\n LL |     return e;\n    |            ^ lifetime mismatch\n    |\n    = note: expected struct `Struct<'b>`\n               found struct `Struct<'a>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/regions-bounds.rs:12:10\n+  --> $DIR/regions-bounds.rs:18:10\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/regions-bounds.rs:12:13\n+  --> $DIR/regions-bounds.rs:18:13\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |             ^^", "previous_filename": "src/test/ui/regions/regions-bounds.stderr"}, {"sha": "7109220165f129f489512086f9b9bf4f262ebf4e", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-bounds.rs:9:12\n+  --> $DIR/regions-bounds.rs:13:12\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          -- -- lifetime `'b` defined here\n@@ -11,7 +11,7 @@ LL |     return e;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-bounds.rs:13:12\n+  --> $DIR/regions-bounds.rs:19:12\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          -- -- lifetime `'b` defined here"}, {"sha": "b13dac49f8c85ebd46919104680d27d9eb2ddab4", "filename": "src/test/ui/regions/regions-bounds.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,15 +2,23 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct TupleStruct<'a>(&'a isize);\n struct Struct<'a> { x:&'a isize }\n \n fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n-    return e; //~ ERROR mismatched types\n+    return e;\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n-    return e; //~ ERROR mismatched types\n+    return e;\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "fbbb598040172a2a969f409f85142e6bdebd8387", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:15:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:19:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:22:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:26:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `Box<<T as Iter>::Item>` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:28:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:32:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:35:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:39:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-close-associated-type-into-object.stderr"}, {"sha": "dd4b97aa5628aea116c149f90bb685ae5638e054", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:15:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:19:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:22:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:26:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:28:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:32:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     Box::new(item)\n    = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:35:5\n+  --> $DIR/regions-close-associated-type-into-object.rs:39:5\n    |\n LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^"}, {"sha": "94199f562122828d72a6a3152b7df17270d80097", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait X {}\n \n "}, {"sha": "ddf168ffd106b8d76553cb3ce6308df78f5ad5bf", "filename": "src/test/ui/regions/regions-close-object-into-object-2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-close-object-into-object-2.rs:9:16\n+  --> $DIR/regions-close-object-into-object-2.rs:13:16\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-close-object-into-object-2.rs:8:60\n+  --> $DIR/regions-close-object-into-object-2.rs:12:60\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                                                            ^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr"}, {"sha": "1a79da2776b0a2307bcc113aa9f9d8e73573386a", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-close-object-into-object-2.rs:9:5\n+  --> $DIR/regions-close-object-into-object-2.rs:13:5\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n-  --> $DIR/regions-close-object-into-object-2.rs:9:5\n+  --> $DIR/regions-close-object-into-object-2.rs:13:5\n    |\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^"}, {"sha": "33ea03f061e093ee7402c62aae9e9d04292910dc", "filename": "src/test/ui/regions/regions-close-object-into-object-2.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait A<T> { }\n \n struct B<'a, T:'a>(&'a (dyn A<T> + 'a));\n@@ -6,7 +10,10 @@ trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-    Box::new(B(&*v)) as Box<dyn X> //~ ERROR E0759\n+    Box::new(B(&*v)) as Box<dyn X>\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR cannot return value referencing local data `*v` [E0515]\n }\n \n fn main() { }"}, {"sha": "33d4df3d1945069d2c66b7213548b1dd8c782f06", "filename": "src/test/ui/regions/regions-close-object-into-object-4.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-close-object-into-object-4.rs:9:16\n+  --> $DIR/regions-close-object-into-object-4.rs:13:16\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-close-object-into-object-4.rs:8:52\n+  --> $DIR/regions-close-object-into-object-4.rs:12:52\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                                                    ^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr"}, {"sha": "993b13ddbf8039232a1368c609cab9387ca78c77", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,37 +1,37 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+  --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+  --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+  --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+  --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n-  --> $DIR/regions-close-object-into-object-4.rs:9:5\n+  --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     returns a value referencing data owned by the current function\n \n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:9:14\n+  --> $DIR/regions-close-object-into-object-4.rs:13:14\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |             - help: consider adding an explicit lifetime bound...: `U: 'static`"}, {"sha": "5a852b7329a0f87f917fe19a4e568cf12a06a02d", "filename": "src/test/ui/regions/regions-close-object-into-object-4.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait A<T> { }\n \n struct B<'a, T:'a>(&'a (dyn A<T> + 'a));\n@@ -6,7 +10,15 @@ trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-    Box::new(B(&*v)) as Box<dyn X> //~ ERROR E0759\n+    Box::new(B(&*v)) as Box<dyn X>\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR the parameter type `U` may not live long enough [E0310]\n+    //[nll]~| ERROR the parameter type `U` may not live long enough [E0310]\n+    //[nll]~| ERROR the parameter type `U` may not live long enough [E0310]\n+    //[nll]~| ERROR lifetime may not live long enough\n+    //[nll]~| ERROR cannot return value referencing local data `*v` [E0515]\n+    //[nll]~| ERROR the parameter type `U` may not live long enough [E0310]\n+\n }\n \n fn main() {}"}, {"sha": "8b5a06bab7156f65dd672b0b015ac044236eaca2", "filename": "src/test/ui/regions/regions-close-object-into-object-5.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -8,13 +8,13 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+  --> $DIR/regions-close-object-into-object-5.rs:13:17\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -23,7 +23,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `B<'_, T>` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:14\n+  --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -32,13 +32,13 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+  --> $DIR/regions-close-object-into-object-5.rs:13:17\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:14\n+  --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -47,13 +47,13 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+  --> $DIR/regions-close-object-into-object-5.rs:13:17\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:16\n+  --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -62,7 +62,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:16\n+  --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -71,7 +71,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:16\n+  --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`", "previous_filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr"}, {"sha": "f4e3809e91613116378111caee1241f96ccdabbd", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -8,7 +8,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -17,7 +17,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -26,7 +26,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0515]: cannot return value referencing local data `*v`\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n+  --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^---^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     returns a value referencing data owned by the current function\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:14\n+  --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`"}, {"sha": "0e5fec28d19b0b086cc0388aee68d3334f598962", "filename": "src/test/ui/regions/regions-close-object-into-object-5.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(warnings)]\n \n \n@@ -19,9 +23,10 @@ fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR the parameter type `T` may not live long enough\n-    //~| ERROR the parameter type `T` may not live long enough\n-    //~| ERROR the parameter type `T` may not live long enough\n-    //~| ERROR the parameter type `T` may not live long enough\n+    //[base]~| ERROR the parameter type `T` may not live long enough\n+    //[base]~| ERROR the parameter type `T` may not live long enough\n+    //[base]~| ERROR the parameter type `T` may not live long enough\n+    //[nll]~| ERROR cannot return value referencing local data `*v` [E0515]\n }\n \n fn main() {}"}, {"sha": "41dc03e86dd85ff4506b33958e3575e42ee6dc40", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:15:5\n    |\n LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n    |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:24:5\n    |\n LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n    |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`", "previous_filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr"}, {"sha": "41dc03e86dd85ff4506b33958e3575e42ee6dc40", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:15:5\n    |\n LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n    |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:24:5\n    |\n LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n    |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`"}, {"sha": "cf425bcd4f342742b65bbae00d0f4c7c5a97337b", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,9 @@\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n trait SomeTrait {\n     fn get(&self) -> isize;"}, {"sha": "171203897d7d634ea8508c48a12775d57a0e6a5c", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:23:5\n    |\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:18:20\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:21:20\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                    ^^\n note: ...so that the declared lifetime parameter bounds are satisfied\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:23:5\n    |\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: but, the lifetime must be valid for the lifetime `'c` as defined here...\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:18:26\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:21:26\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                          ^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:23:5\n    |\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr"}, {"sha": "66459957ed466db24a3cfecd13d1a2b6a830b5fe", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:23:5\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                    --    -- lifetime `'c` defined here"}, {"sha": "3d5f4e12665b8f0c818204e1c7ed4905e8310ed7", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,9 @@\n // Various tests where we over type parameters with multiple lifetime\n // bounds.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n trait SomeTrait { fn get(&self) -> isize; }\n \n@@ -17,7 +20,9 @@ fn make_object_good2<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'b> {\n \n fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n     // A outlives 'a AND 'b...but not 'c.\n-    Box::new(v) as Box<dyn SomeTrait + 'a> //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(v) as Box<dyn SomeTrait + 'a>\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "7e135c654505b250cc71bf5c65416bc22624527d", "filename": "src/test/ui/regions/regions-close-param-into-object.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:6:5\n+  --> $DIR/regions-close-param-into-object.rs:10:5\n    |\n LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -8,7 +8,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:12:5\n+  --> $DIR/regions-close-param-into-object.rs:16:5\n    |\n LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -17,7 +17,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `Box<T>` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:18:5\n+  --> $DIR/regions-close-param-into-object.rs:22:5\n    |\n LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n@@ -26,7 +26,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:24:5\n+  --> $DIR/regions-close-param-into-object.rs:28:5\n    |\n LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`", "previous_filename": "src/test/ui/regions/regions-close-param-into-object.stderr"}, {"sha": "3fbc1022631152ba85f747b640ed4677855fdf5f", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:6:5\n+  --> $DIR/regions-close-param-into-object.rs:10:5\n    |\n LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -8,7 +8,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:12:5\n+  --> $DIR/regions-close-param-into-object.rs:16:5\n    |\n LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n@@ -17,7 +17,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:18:5\n+  --> $DIR/regions-close-param-into-object.rs:22:5\n    |\n LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n@@ -26,7 +26,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:24:5\n+  --> $DIR/regions-close-param-into-object.rs:28:5\n    |\n LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`"}, {"sha": "aab3ad202e6c0bbf3ff9eaeaec4b4ef2d1f78cd5", "filename": "src/test/ui/regions/regions-close-param-into-object.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait X { fn foo(&self) {} }\n \n fn p1<T>(v: T) -> Box<dyn X + 'static>"}, {"sha": "68a7b473695cf028313d4ff16a4d7ca2e867d885", "filename": "src/test/ui/regions/regions-creating-enums3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-creating-enums3.rs:7:5\n+  --> $DIR/regions-creating-enums3.rs:11:5\n    |\n LL | fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n    |                                          -----------     -------", "previous_filename": "src/test/ui/regions/regions-creating-enums3.stderr"}, {"sha": "8334dc77687012e2cc93a46fa4f402b4643a7ebe", "filename": "src/test/ui/regions/regions-creating-enums3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-creating-enums3.rs:7:5\n+  --> $DIR/regions-creating-enums3.rs:11:5\n    |\n LL | fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n    |                -- -- lifetime `'b` defined here"}, {"sha": "dcea761d33fd6e7115581719147016325f88a18d", "filename": "src/test/ui/regions/regions-creating-enums3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n enum Ast<'a> {\n     Num(usize),\n     Add(&'a Ast<'a>, &'a Ast<'a>)\n }\n \n fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n-    Ast::Add(x, y) //~ ERROR lifetime mismatch [E0623]\n+    Ast::Add(x, y)\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "445a4291f27bb2e07b4b04905c99a0a71a5c0391", "filename": "src/test/ui/regions/regions-creating-enums4.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,28 +1,28 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-creating-enums4.rs:7:5\n+  --> $DIR/regions-creating-enums4.rs:11:5\n    |\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/regions-creating-enums4.rs:6:16\n+  --> $DIR/regions-creating-enums4.rs:10:16\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                ^^\n note: ...so that the expression is assignable\n-  --> $DIR/regions-creating-enums4.rs:7:14\n+  --> $DIR/regions-creating-enums4.rs:11:14\n    |\n LL |     Ast::Add(x, y)\n    |              ^\n    = note: expected `&Ast<'_>`\n               found `&Ast<'a>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/regions-creating-enums4.rs:6:19\n+  --> $DIR/regions-creating-enums4.rs:10:19\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                   ^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-creating-enums4.rs:7:5\n+  --> $DIR/regions-creating-enums4.rs:11:5\n    |\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-creating-enums4.stderr"}, {"sha": "e215c63d39d5a4d15b652b0efbdd7de291dfb4b2", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-creating-enums4.rs:7:5\n+  --> $DIR/regions-creating-enums4.rs:11:5\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                -- -- lifetime `'b` defined here"}, {"sha": "18bd592b1c3eb77a99d0241755b24b0b1701ba27", "filename": "src/test/ui/regions/regions-creating-enums4.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n enum Ast<'a> {\n     Num(usize),\n     Add(&'a Ast<'a>, &'a Ast<'a>)\n }\n \n fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n-    Ast::Add(x, y) //~ ERROR cannot infer\n+    Ast::Add(x, y)\n+    //[base]~^ ERROR cannot infer\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "9e1f2b0e5bd1a07005882923bf47f02fab408bbb", "filename": "src/test/ui/regions/regions-early-bound-error-method.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-early-bound-error-method.rs:20:9\n+  --> $DIR/regions-early-bound-error-method.rs:24:9\n    |\n LL |         g2.get()\n    |         ^^^^^^^^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/regions-early-bound-error-method.rs:18:6\n+  --> $DIR/regions-early-bound-error-method.rs:22:6\n    |\n LL | impl<'a> Box<'a> {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-early-bound-error-method.rs:19:11\n+  --> $DIR/regions-early-bound-error-method.rs:23:11\n    |\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           ^^", "previous_filename": "src/test/ui/regions/regions-early-bound-error-method.stderr"}, {"sha": "98389ed0ca5b639cf3516cac1a9f1e7aad054b83", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-early-bound-error-method.rs:20:9\n+  --> $DIR/regions-early-bound-error-method.rs:24:9\n    |\n LL | impl<'a> Box<'a> {\n    |      -- lifetime `'a` defined here"}, {"sha": "44ee19fa898b8f6735f47bc809393ea8e080acdf", "filename": "src/test/ui/regions/regions-early-bound-error-method.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Tests that you can use a fn lifetime parameter as part of\n // the value for a type parameter in a bound.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait GetRef<'a> {\n     fn get(&self) -> &'a isize;\n }\n@@ -18,7 +22,8 @@ impl<'a> GetRef<'a> for Box<'a> {\n impl<'a> Box<'a> {\n     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n         g2.get()\n-        //~^ ERROR E0312\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "e1b60536d296f15a25debd2773fb74312b6e2fce", "filename": "src/test/ui/regions/regions-early-bound-error.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-early-bound-error.rs:19:5\n+  --> $DIR/regions-early-bound-error.rs:23:5\n    |\n LL |     g1.get()\n    |     ^^^^^^^^\n    |\n note: ...the reference is valid for the lifetime `'b` as defined here...\n-  --> $DIR/regions-early-bound-error.rs:18:11\n+  --> $DIR/regions-early-bound-error.rs:22:11\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |           ^^\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-early-bound-error.rs:18:8\n+  --> $DIR/regions-early-bound-error.rs:22:8\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |        ^^", "previous_filename": "src/test/ui/regions/regions-early-bound-error.stderr"}, {"sha": "f57249e4e8f77d5b41940af9955db9791801707b", "filename": "src/test/ui/regions/regions-early-bound-error.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-early-bound-error.rs:19:5\n+  --> $DIR/regions-early-bound-error.rs:23:5\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |        -- -- lifetime `'b` defined here"}, {"sha": "372596cd5f4b11571f85d5da58b1f414eb45dab2", "filename": "src/test/ui/regions/regions-early-bound-error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Tests that you can use a fn lifetime parameter as part of\n // the value for a type parameter in a bound.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait GetRef<'a, T> {\n     fn get(&self) -> &'a T;\n }\n@@ -17,7 +21,8 @@ impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n \n fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n     g1.get()\n-    //~^ ERROR E0312\n+    //[base]~^ ERROR E0312\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "2182d8f661ff8453441f7ba2b05f01555113a5e6", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:52:12\n    |\n LL |     want_G(baz);\n    |            ^^^ one type is more general than the other", "previous_filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.stderr"}, {"sha": "0bca2cfbefd9f2a4b884eddca27ef8768b380359", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:5\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:52:5\n    |\n LL |     want_G(baz);\n    |     ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "05c6ac0cb1ae4e57215a4dc9553ca501f91d5904", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -6,6 +6,10 @@\n // This can safely be considered to be an instance of `F` because all\n // lifetimes are sublifetimes of 'static.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "ae6d95dd4691dc3314e665d7e9a159864117fb56", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-callee.rs:13:5\n+  --> $DIR/regions-free-region-ordering-callee.rs:17:5\n    |\n LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n    |                         -------------                   ---------\n@@ -10,7 +10,7 @@ LL |     &*y\n    |     ^^^ ...but data from `x` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-callee.rs:18:24\n+  --> $DIR/regions-free-region-ordering-callee.rs:24:24\n    |\n LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n    |                                       ---------     -------------", "previous_filename": "src/test/ui/regions/regions-free-region-ordering-callee.stderr"}, {"sha": "7dfff2bb060d3815619a089d8ce21ebc85632d2f", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-callee.rs:13:5\n+  --> $DIR/regions-free-region-ordering-callee.rs:17:5\n    |\n LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n    |              --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     &*y\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-callee.rs:18:12\n+  --> $DIR/regions-free-region-ordering-callee.rs:24:12\n    |\n LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n    |              --  -- lifetime `'b` defined here"}, {"sha": "eca863f2e79583134a3b41bae3066257f26425da", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,10 @@\n // that appear in their parameter list.  See also\n // regions-free-region-ordering-caller.rs\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn ordering1<'a, 'b>(x: &'a &'b usize) -> &'a usize {\n     // It is safe to assume that 'a <= 'b due to the type of x\n     let y: &'b usize = &**x;\n@@ -10,13 +14,16 @@ fn ordering1<'a, 'b>(x: &'a &'b usize) -> &'a usize {\n \n fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n     // However, it is not safe to assume that 'b <= 'a\n-    &*y //~ ERROR lifetime mismatch [E0623]\n+    &*y\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n     // Do not infer an ordering from the return value.\n     let z: &'b usize = &*x;\n-    //~^ ERROR lifetime mismatch [E0623]\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n     panic!();\n }\n "}, {"sha": "eb4ffce89a325ef1c2ab09851f910122c4ff21a6", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:17:21\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:21:21\n    |\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:14:12\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:18:12\n    |\n LL |     fn get<'a>(&'a self) -> &'b T {\n    |            ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:17:21\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:21:21\n    |\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:13:6\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:17:6\n    |\n LL | impl<'b, T> Node<'b, T> {\n    |      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:15:9\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:19:9\n    |\n LL | /         match self.next {\n LL | |             Some(ref next) => next.get(),", "previous_filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.stderr"}, {"sha": "336cfd3e6c529fc467edb4128ec8020cacf5aa25", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:15:9\n+  --> $DIR/regions-free-region-ordering-incorrect.rs:19:9\n    |\n LL |   impl<'b, T> Node<'b, T> {\n    |        -- lifetime `'b` defined here"}, {"sha": "43427d13ffa715e15c1b8a8382edaa4b1027a7ab", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -5,16 +5,20 @@\n //\n // This test began its life as a test for issue #4325.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Node<'b, T: 'b> {\n     val: T,\n     next: Option<&'b Node<'b, T>>\n }\n \n impl<'b, T> Node<'b, T> {\n     fn get<'a>(&'a self) -> &'b T {\n-        match self.next {\n+        match self.next { //[nll]~ ERROR lifetime may not live long enough\n             Some(ref next) => next.get(),\n-            None => &self.val //~ ERROR cannot infer\n+            None => &self.val //[base]~ ERROR cannot infer\n         }\n     }\n }"}, {"sha": "ef68674a18f5ef97a815e94fea6b793a28fcd1ab", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:20:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`", "previous_filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr"}, {"sha": "6d63de6d6bd95b5ccb0a686c0b14d56cecc9b191", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:5\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:20:5\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`"}, {"sha": "f11fc207b91c6f9a6492d49a86dfd36ea3e6bd6f", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -3,6 +3,10 @@\n // there might be other ways for the caller of `func` to show that\n // `T::Foo: 'x` holds (e.g., where-clause).\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Trait1<'x> {\n     type Foo;\n }"}, {"sha": "faa638aa2811988265560ed08c7bd065406357ef", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait-self.rs:46:9\n+  --> $DIR/regions-infer-bound-from-trait-self.rs:50:9\n    |\n LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/regions-infer-bound-from-trait-self.rs:12:21\n+  --> $DIR/regions-infer-bound-from-trait-self.rs:16:21\n    |\n LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n    |                     ^^", "previous_filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.stderr"}, {"sha": "9c886c42c72acdf5d1e7d992a82b066a92baee62", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait-self.rs:46:9\n+  --> $DIR/regions-infer-bound-from-trait-self.rs:50:9\n    |\n LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ef8be05b2d26a4688457f6a5e8be36f1fe898905", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Test that we can derive lifetime bounds on `Self` from trait\n // inheritance.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Static : 'static { }\n \n trait Is<'a> : 'a { }"}, {"sha": "6a7e8ba134753633e8e54dd7202e18379787f56e", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,27 +1,27 @@\n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:33:5\n+  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n    |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/regions-infer-bound-from-trait.rs:12:21\n+  --> $DIR/regions-infer-bound-from-trait.rs:16:21\n    |\n LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n    |                     ^^\n \n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n+  --> $DIR/regions-infer-bound-from-trait.rs:41:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n    |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/regions-infer-bound-from-trait.rs:12:21\n+  --> $DIR/regions-infer-bound-from-trait.rs:16:21\n    |\n LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n    |                     ^^", "previous_filename": "src/test/ui/regions/regions-infer-bound-from-trait.stderr"}, {"sha": "4aa4b468eaa7237743314f72f9b3a04f1774349d", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:33:5\n+  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n    |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n+  --> $DIR/regions-infer-bound-from-trait.rs:41:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n    |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`"}, {"sha": "96f9125313bf95d0c170c7ba02fc6290a8f44e00", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Test that we can derive lifetime bounds on type parameters\n // from trait inheritance.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Static : 'static { }\n \n trait Is<'a> : 'a { }"}, {"sha": "fbe2c0da6e262f3c4075fdc82e21d1326271ca70", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:25:35\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:29:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.stderr"}, {"sha": "0b1bf5271a7798f4f3ae83b52451355323c866b7", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:25:12\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:29:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "233f72fd2964938b66239a212c489b87f762f1f0", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::marker;\n \n // This is contravariant with respect to 'a, meaning that\n@@ -22,7 +26,9 @@ fn use_<'short,'long>(c: Contravariant<'short>,\n     // 'short <= 'long, this would be true if the Contravariant type were\n     // covariant with respect to its parameter 'a.\n \n-    let _: Contravariant<'long> = c; //~ ERROR E0623\n+    let _: Contravariant<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "bb22e15af6991a61eb4f6bbacff98db61a70d6be", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:22:32\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:26:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------", "previous_filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.stderr"}, {"sha": "4d72b8471dcb2ffce4da2877c34d3d4d08c71fb8", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:22:12\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:26:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "c4225e76967ef7b7addf74e81b1e755ca765dbc7", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::marker;\n \n struct Covariant<'a> {\n@@ -19,7 +23,9 @@ fn use_<'short,'long>(c: Covariant<'long>,\n     // 'short <= 'long, this would be true if the Covariant type were\n     // contravariant with respect to its parameter 'a.\n \n-    let _: Covariant<'short> = c; //~ ERROR E0623\n+    let _: Covariant<'short> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "dc7d0005ca2686b6d8f89dc6168be065ec4114fb", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-invariance-due-to-decl.rs:12:5\n+  --> $DIR/regions-infer-invariance-due-to-decl.rs:16:5\n    |\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n note: the lifetime `'r` as defined here...\n-  --> $DIR/regions-infer-invariance-due-to-decl.rs:11:23\n+  --> $DIR/regions-infer-invariance-due-to-decl.rs:15:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       ^^", "previous_filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.stderr"}, {"sha": "d7b7f9883a763d6f41f5f8e115cbd35af28c4c2b", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-invariance-due-to-decl.rs:12:5\n+  --> $DIR/regions-infer-invariance-due-to-decl.rs:16:5\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here"}, {"sha": "6433773b2d18699e863b4a007c8b4882e72be765", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::marker;\n \n struct Invariant<'a> {\n@@ -9,7 +13,9 @@ fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n }\n \n fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n-    b_isize //~ ERROR mismatched types\n+    b_isize\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "b2530d7b6cd0b28787039f9c329a9bb9c7027b06", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:10:5\n+  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:14:5\n    |\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n note: the lifetime `'r` as defined here...\n-  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:9:23\n+  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:13:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       ^^", "previous_filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.stderr"}, {"sha": "37fa5e3bf447706e7da892caee745f43d0f5f385", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:10:5\n+  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:14:5\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here"}, {"sha": "4690f9d8b08fc9025f3d3a8404f1e30d914235aa", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Invariant<'a> {\n     f: Box<dyn FnOnce(&mut &'a isize) + 'static>,\n }\n@@ -7,7 +11,9 @@ fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n }\n \n fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n-    b_isize //~ ERROR mismatched types\n+    b_isize\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "12774ca92e232a8a67c6ea889b1bb23a40ce064e", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:10:5\n+  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:14:5\n    |\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n note: the lifetime `'r` as defined here...\n-  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:9:23\n+  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:13:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       ^^", "previous_filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.stderr"}, {"sha": "1b3ef7bc0289490cd1e68f6211e153c6bbb86df0", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:10:5\n+  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:14:5\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here"}, {"sha": "8e257c4fd0ebe2e83076071316ed7fb722dfa64e", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Invariant<'a> {\n     f: Box<dyn FnOnce() -> *mut &'a isize + 'static>,\n }\n@@ -7,7 +11,9 @@ fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n }\n \n fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n-    b_isize //~ ERROR mismatched types\n+    b_isize\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "f43274163d0465e286e6d8e1a14438e3aa77d293", "filename": "src/test/ui/regions/regions-infer-not-param.base.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,56 +1,56 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-not-param.rs:15:54\n+  --> $DIR/regions-infer-not-param.rs:19:54\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                                                      ^ lifetime mismatch\n    |\n    = note: expected struct `Direct<'b>`\n               found struct `Direct<'a>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/regions-infer-not-param.rs:15:16\n+  --> $DIR/regions-infer-not-param.rs:19:16\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/regions-infer-not-param.rs:15:19\n+  --> $DIR/regions-infer-not-param.rs:19:19\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                   ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-not-param.rs:19:63\n+  --> $DIR/regions-infer-not-param.rs:25:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                                                               ^ lifetime mismatch\n    |\n    = note: expected struct `Indirect2<'b>`\n               found struct `Indirect2<'a>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/regions-infer-not-param.rs:19:19\n+  --> $DIR/regions-infer-not-param.rs:25:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/regions-infer-not-param.rs:19:22\n+  --> $DIR/regions-infer-not-param.rs:25:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                      ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-not-param.rs:19:63\n+  --> $DIR/regions-infer-not-param.rs:25:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                                                               ^ lifetime mismatch\n    |\n    = note: expected struct `Indirect2<'b>`\n               found struct `Indirect2<'a>`\n note: the lifetime `'b` as defined here...\n-  --> $DIR/regions-infer-not-param.rs:19:22\n+  --> $DIR/regions-infer-not-param.rs:25:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                      ^^\n note: ...does not necessarily outlive the lifetime `'a` as defined here\n-  --> $DIR/regions-infer-not-param.rs:19:19\n+  --> $DIR/regions-infer-not-param.rs:25:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   ^^", "previous_filename": "src/test/ui/regions/regions-infer-not-param.stderr"}, {"sha": "95e6b03c350a3ff8a9bafb7e484ff436cd16b829", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-not-param.rs:15:54\n+  --> $DIR/regions-infer-not-param.rs:19:54\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                -- -- lifetime `'b` defined here      ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n@@ -9,7 +9,7 @@ LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-not-param.rs:19:63\n+  --> $DIR/regions-infer-not-param.rs:25:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n@@ -22,7 +22,7 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-not-param.rs:19:63\n+  --> $DIR/regions-infer-not-param.rs:25:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`"}, {"sha": "0b8af5bc152ba6173a54f79adce7e2227d75e795", "filename": "src/test/ui/regions/regions-infer-not-param.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Direct<'a> {\n     f: &'a isize\n }\n@@ -12,15 +16,20 @@ struct Indirect2<'a> {\n     g: Box<dyn FnOnce(Direct<'a>) + 'static>\n }\n \n-fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p } //~ ERROR mismatched types\n+fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n+//[base]~^ ERROR mismatched types\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn take_indirect1(p: Indirect1) -> Indirect1 { p }\n \n-fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n-//~| expected struct `Indirect2<'b>`\n-//~| found struct `Indirect2<'a>`\n-//~| ERROR mismatched types\n-//~| expected struct `Indirect2<'b>`\n-//~| found struct `Indirect2<'a>`\n+fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n+//[base]~^ ERROR mismatched types\n+//[base]~| expected struct `Indirect2<'b>`\n+//[base]~| found struct `Indirect2<'a>`\n+//[base]~| ERROR mismatched types\n+//[base]~| expected struct `Indirect2<'b>`\n+//[base]~| found struct `Indirect2<'a>`\n+//[nll]~^^^^^^^ ERROR lifetime may not live long enough\n+//[nll]~| ERROR lifetime may not live long enough\n \n fn main() {}"}, {"sha": "1d4471f910d30f69417c505470c5d287eb884aef", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-infer-paramd-indirect.rs:22:18\n+  --> $DIR/regions-infer-paramd-indirect.rs:26:18\n    |\n LL |         self.f = b;\n    |                  ^ lifetime mismatch\n    |\n    = note: expected struct `Box<Box<&'a isize>>`\n               found struct `Box<Box<&isize>>`\n note: the anonymous lifetime defined here...\n-  --> $DIR/regions-infer-paramd-indirect.rs:21:36\n+  --> $DIR/regions-infer-paramd-indirect.rs:25:36\n    |\n LL |     fn set_f_bad(&mut self, b: Box<B>) {\n    |                                    ^\n note: ...does not necessarily outlive the lifetime `'a` as defined here\n-  --> $DIR/regions-infer-paramd-indirect.rs:16:6\n+  --> $DIR/regions-infer-paramd-indirect.rs:20:6\n    |\n LL | impl<'a> SetF<'a> for C<'a> {\n    |      ^^", "previous_filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr"}, {"sha": "96377cbdab4ae9474cb9d4634cfbf3b727ee9d0e", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-infer-paramd-indirect.rs:22:9\n+  --> $DIR/regions-infer-paramd-indirect.rs:26:9\n    |\n LL | impl<'a> SetF<'a> for C<'a> {\n    |      -- lifetime `'a` defined here"}, {"sha": "060306f611e1debeb8543d5ebd8f24a9f8fb948c", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,6 +1,10 @@\n // Check that we correctly infer that b and c must be region\n // parameterized because they reference a which requires a region.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n type A<'a> = &'a isize;\n type B<'a> = Box<A<'a>>;\n \n@@ -20,10 +24,11 @@ impl<'a> SetF<'a> for C<'a> {\n \n     fn set_f_bad(&mut self, b: Box<B>) {\n         self.f = b;\n-        //~^ ERROR mismatched types\n-        //~| expected struct `Box<Box<&'a isize>>`\n-        //~| found struct `Box<Box<&isize>>`\n-        //~| lifetime mismatch\n+        //[base]~^ ERROR mismatched types\n+        //[base]~| expected struct `Box<Box<&'a isize>>`\n+        //[base]~| found struct `Box<Box<&isize>>`\n+        //[base]~| lifetime mismatch\n+        //[nll]~^^^^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "e57b06aac39272e2c7305e15f4dda86f1ef1d760", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:8:10\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:12:10\n    |\n LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                      ---------          --------- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:14:7\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:7\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                     ---------          --------- these two types are declared with different lifetimes...\n@@ -17,7 +17,7 @@ LL |     a(x, y);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other", "previous_filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr"}, {"sha": "7fe8b4bf57fc197c2e23fb1c049a0aeb12d68be1", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:8:5\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:12:5\n    |\n LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     *x = *y;\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:14:5\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:5\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |      -- -- lifetime `'b` defined here\n@@ -28,7 +28,7 @@ LL |     a(x, y);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:12\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -37,7 +37,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n               found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:12\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other"}, {"sha": "97c08d8ab0e3c9810f6268434e126a7f3f7bd33c", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,23 +1,33 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<'a, 'b:'a>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Note: this is legal because of the `'b:'a` declaration.\n     *x = *y;\n }\n \n fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR E0623\n+    *x = *y;\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y); //~ ERROR lifetime mismatch [E0623]\n+    a(x, y);\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0308\n+    let _: fn(&mut &isize, &mut &isize) = a;\n+    //~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "37ce569e761ba1a6d05b370435164b257b379b13", "filename": "src/test/ui/regions/regions-nested-fns.base.stderr", "status": "renamed", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,40 +1,46 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/regions-nested-fns.rs:5:18\n+  --> $DIR/regions-nested-fns.rs:9:18\n    |\n LL |     let mut ay = &y;\n    |                  ^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n-  --> $DIR/regions-nested-fns.rs:7:58\n+  --> $DIR/regions-nested-fns.rs:13:58\n    |\n LL |       ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n    |  __________________________________________________________^\n LL | |         ay = x;\n LL | |         ay = &y;\n+LL | |\n LL | |         ay = z;\n+LL | |\n LL | |     }));\n    | |_____^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-nested-fns.rs:10:14\n+  --> $DIR/regions-nested-fns.rs:17:14\n    |\n LL |         ay = z;\n    |              ^\n note: but, the lifetime must be valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/regions-nested-fns.rs:13:72\n+  --> $DIR/regions-nested-fns.rs:21:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n    |  ________________________________________________________________________^\n LL | |         if false { return x; }\n+LL | |\n+LL | |\n LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n note: ...so that the types are compatible\n-  --> $DIR/regions-nested-fns.rs:13:76\n+  --> $DIR/regions-nested-fns.rs:21:76\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n    |  ____________________________________________________________________________^\n LL | |         if false { return x; }\n+LL | |\n+LL | |\n LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n@@ -43,23 +49,25 @@ LL | |     }));\n               found `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-nested-fns.rs:14:27\n+  --> $DIR/regions-nested-fns.rs:22:27\n    |\n LL |         if false { return x; }\n    |                           ^\n    |\n note: ...the reference is valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/regions-nested-fns.rs:13:72\n+  --> $DIR/regions-nested-fns.rs:21:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n    |  ________________________________________________________________________^\n LL | |         if false { return x; }\n+LL | |\n+LL | |\n LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n note: ...but the borrowed content is only valid for the lifetime `'x` as defined here\n-  --> $DIR/regions-nested-fns.rs:3:11\n+  --> $DIR/regions-nested-fns.rs:7:11\n    |\n LL | fn nested<'x>(x: &'x isize) {\n    |           ^^", "previous_filename": "src/test/ui/regions/regions-nested-fns.stderr"}, {"sha": "6f2a89994b0475f3090cb76faf6165d9f8a66f46", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,17 +1,17 @@\n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/regions-nested-fns.rs:10:9\n+  --> $DIR/regions-nested-fns.rs:17:9\n    |\n LL |     let mut ay = &y;\n    |         ------ `ay` declared here, outside of the closure body\n-LL | \n+...\n LL |     ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n    |                                                           - `z` is a reference that is only valid in the closure body\n ...\n LL |         ay = z;\n    |         ^^^^^^ `z` escapes the closure body here\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/regions-nested-fns.rs:5:18\n+  --> $DIR/regions-nested-fns.rs:9:18\n    |\n LL |     let mut ay = &y;\n    |                  ^^ borrowed value does not live long enough\n@@ -23,7 +23,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/regions-nested-fns.rs:9:15\n+  --> $DIR/regions-nested-fns.rs:15:15\n    |\n LL |     ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n    |                                                          --- value captured here\n@@ -38,7 +38,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-nested-fns.rs:14:27\n+  --> $DIR/regions-nested-fns.rs:22:27\n    |\n LL | fn nested<'x>(x: &'x isize) {\n    |           -- lifetime `'x` defined here"}, {"sha": "8cc39792bd978d122dd0af92a32f146a74c89105", "filename": "src/test/ui/regions/regions-nested-fns.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,17 +1,27 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x isize) {\n     let y = 3;\n-    let mut ay = &y; //~ ERROR E0495\n+    let mut ay = &y;\n+    //[base]~^ ERROR E0495\n+    //[nll]~^^ ERROR `y` does not live long enough [E0597]\n \n     ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n         ay = x;\n         ay = &y;\n+        //[nll]~^ ERROR `y` does not live long enough\n         ay = z;\n+        //[nll]~^ ERROR borrowed data escapes outside of closure [E0521]\n     }));\n \n     ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-        if false { return x; } //~ ERROR E0312\n+        if false { return x; }\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         if false { return ay; }\n         return z;\n     }));"}, {"sha": "9a66f67ea6ec477213c7077a1bcdcfaee4ebe7fd", "filename": "src/test/ui/regions/regions-outlives-projection-container.base.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:36:13\n+  --> $DIR/regions-outlives-projection-container.rs:40:13\n    |\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:28:15\n+  --> $DIR/regions-outlives-projection-container.rs:32:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:28:18\n+  --> $DIR/regions-outlives-projection-container.rs:32:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:54:13\n+  --> $DIR/regions-outlives-projection-container.rs:59:13\n    |\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:50:18\n+  --> $DIR/regions-outlives-projection-container.rs:55:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:50:21\n+  --> $DIR/regions-outlives-projection-container.rs:55:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:63:12\n+  --> $DIR/regions-outlives-projection-container.rs:69:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:58:20\n+  --> $DIR/regions-outlives-projection-container.rs:64:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:58:23\n+  --> $DIR/regions-outlives-projection-container.rs:64:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:70:12\n+  --> $DIR/regions-outlives-projection-container.rs:77:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:67:23\n+  --> $DIR/regions-outlives-projection-container.rs:74:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container.rs:67:26\n+  --> $DIR/regions-outlives-projection-container.rs:74:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^", "previous_filename": "src/test/ui/regions/regions-outlives-projection-container.stderr"}, {"sha": "d93eef9ce0b5c2d60fb4f5703127a96627627909", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:36:13\n+  --> $DIR/regions-outlives-projection-container.rs:40:13\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:54:13\n+  --> $DIR/regions-outlives-projection-container.rs:59:13\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  -- -- lifetime `'b` defined here\n@@ -25,7 +25,7 @@ LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:63:5\n+  --> $DIR/regions-outlives-projection-container.rs:69:5\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    -- -- lifetime `'b` defined here\n@@ -38,7 +38,7 @@ LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:70:5\n+  --> $DIR/regions-outlives-projection-container.rs:77:5\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       -- -- lifetime `'b` defined here"}, {"sha": "ccfd2213b6f33f05377e77ab944950b88c279851", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,6 +2,10 @@\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears. Issue #22246.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n@@ -34,7 +38,8 @@ fn with_assoc<'a,'b>() {\n     // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n     // `_x` is changed to `_`\n     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[base]~^ ERROR reference has a longer lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn with_assoc1<'a,'b>() where 'b : 'a {\n@@ -52,7 +57,8 @@ fn without_assoc<'a,'b>() {\n     // that `'b:'a` holds because the `'b` appears in `TheType<'b>`.\n \n     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[base]~^ ERROR reference has a longer lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn call_with_assoc<'a,'b>() {\n@@ -61,13 +67,16 @@ fn call_with_assoc<'a,'b>() {\n     // no data.\n \n     call::<&'a WithAssoc<TheType<'b>>>();\n-    //~^ ERROR reference has a longer lifetime\n+    //[base]~^ ERROR reference has a longer lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn call_without_assoc<'a,'b>() {\n     // As `without_assoc`, but in a distinct scenario.\n \n-    call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n+    call::<&'a WithoutAssoc<TheType<'b>>>();\n+    //[base]~^ ERROR reference has a longer lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn call<T>() { }"}, {"sha": "427c6f4ec8c3c5ebd127db09ac26e120183e090e", "filename": "src/test/ui/regions/regions-proc-bound-capture.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-proc-bound-capture.rs:9:14\n+  --> $DIR/regions-proc-bound-capture.rs:13:14\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with an anonymous lifetime `'_`...\n@@ -8,7 +8,7 @@ LL |     Box::new(move || { *x })\n    |              ^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-proc-bound-capture.rs:7:59\n+  --> $DIR/regions-proc-bound-capture.rs:11:59\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                                                           ^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/regions/regions-proc-bound-capture.stderr"}, {"sha": "6120a53eb0955a974d826541813a472d749d3ade", "filename": "src/test/ui/regions/regions-proc-bound-capture.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-proc-bound-capture.rs:9:5\n+  --> $DIR/regions-proc-bound-capture.rs:13:5\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   - let's call the lifetime of this reference `'1`"}, {"sha": "1033163c8dd9c10d6df82f43729b7b9ca8defa64", "filename": "src/test/ui/regions/regions-proc-bound-capture.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn borrowed_proc<'a>(x: &'a isize) -> Box<dyn FnMut()->(isize) + 'a> {\n     // This is legal, because the region bound on `proc`\n     // states that it captures `x`.\n@@ -6,7 +10,9 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<dyn FnMut()->(isize) + 'a> {\n \n fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move || { *x }) //~ ERROR E0759\n+    Box::new(move || { *x })\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "7ecdb0cd15e9e418a59f4ea42f84bf5aee2ea1d6", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:4:5\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:8:5\n    |\n LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n    |                                     -----------------------------     -------------", "previous_filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.stderr"}, {"sha": "519ada7bdfc966b94d9a8a05e448c5d9f891876d", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:4:5\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:8:5\n    |\n LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n    |                      --  -- lifetime `'b` defined here"}, {"sha": "c4ad05010fb6d17a4397f130778f47f7ff2800d4", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,7 +1,13 @@\n // Issue #8624. Test for reborrowing with 3 levels, not just two.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n-    &mut ***p //~ ERROR lifetime mismatch [E0623]\n+    &mut ***p\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "3cb7de1585090114ed804855b200c382458b39b7", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:6:5\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:10:5\n    |\n LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n    |                                 ---------------------     -------------", "previous_filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.stderr"}, {"sha": "4dd2a83739ca74e3322e893a88dab976b13d48c6", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:6:5\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:10:5\n    |\n LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n    |                      --  -- lifetime `'b` defined here"}, {"sha": "c41e76e4d2a115f635b290ef2934555dbbe02a00", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,8 +2,14 @@\n // pointer which is backed by another `&'a mut` can only be done\n // for `'a` (which must be a sublifetime of `'b`).\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n-    &mut **p //~ ERROR lifetime mismatch [E0623]\n+    &mut **p\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "d102f93a64771522d9ed1cfb5defad07e5c3acda", "filename": "src/test/ui/regions/regions-ret-borrowed-1.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,28 +1,28 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+  --> $DIR/regions-ret-borrowed-1.rs:14:14\n    |\n LL |     with(|o| o)\n    |              ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n-  --> $DIR/regions-ret-borrowed-1.rs:10:10\n+  --> $DIR/regions-ret-borrowed-1.rs:14:10\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+  --> $DIR/regions-ret-borrowed-1.rs:14:14\n    |\n LL |     with(|o| o)\n    |              ^\n    = note: expected `&isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/regions-ret-borrowed-1.rs:9:14\n+  --> $DIR/regions-ret-borrowed-1.rs:13:14\n    |\n LL | fn return_it<'a>() -> &'a isize {\n    |              ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-ret-borrowed-1.rs:10:5\n+  --> $DIR/regions-ret-borrowed-1.rs:14:5\n    |\n LL |     with(|o| o)\n    |     ^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr"}, {"sha": "4fdadccab15f9f6f77bb62d95924e0e06bfdf1a9", "filename": "src/test/ui/regions/regions-ret-borrowed-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+  --> $DIR/regions-ret-borrowed-1.rs:14:14\n    |\n LL |     with(|o| o)\n    |           -- ^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "fed631320b44270aadafd73d223d3ad3988e8ae5", "filename": "src/test/ui/regions/regions-ret-borrowed-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -2,13 +2,18 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn with<R, F>(f: F) -> R where F: for<'a> FnOnce(&'a isize) -> R {\n     f(&3)\n }\n \n fn return_it<'a>() -> &'a isize {\n     with(|o| o)\n-        //~^ ERROR cannot infer\n+    //[base]~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements [E0495]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "62b42b5dd11719a1edd638b8675de16af055bafa", "filename": "src/test/ui/regions/regions-ret-borrowed.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,28 +1,28 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/regions-ret-borrowed.rs:13:14\n+  --> $DIR/regions-ret-borrowed.rs:17:14\n    |\n LL |     with(|o| o)\n    |              ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n-  --> $DIR/regions-ret-borrowed.rs:13:10\n+  --> $DIR/regions-ret-borrowed.rs:17:10\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-ret-borrowed.rs:13:14\n+  --> $DIR/regions-ret-borrowed.rs:17:14\n    |\n LL |     with(|o| o)\n    |              ^\n    = note: expected `&isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/regions-ret-borrowed.rs:12:14\n+  --> $DIR/regions-ret-borrowed.rs:16:14\n    |\n LL | fn return_it<'a>() -> &'a isize {\n    |              ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-ret-borrowed.rs:13:5\n+  --> $DIR/regions-ret-borrowed.rs:17:5\n    |\n LL |     with(|o| o)\n    |     ^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-ret-borrowed.stderr"}, {"sha": "d3ea5bd875f9b32bb0d9f3b0b83fdb0f36c83725", "filename": "src/test/ui/regions/regions-ret-borrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-ret-borrowed.rs:13:14\n+  --> $DIR/regions-ret-borrowed.rs:17:14\n    |\n LL |     with(|o| o)\n    |           -- ^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "2b6855d1c71ef0872fe580530efb0af281c49ad9", "filename": "src/test/ui/regions/regions-ret-borrowed.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -5,13 +5,18 @@\n // used to successfully compile because we failed to account for the\n // fact that fn(x: &isize) rebound the region &.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn with<R, F>(f: F) -> R where F: FnOnce(&isize) -> R {\n     f(&3)\n }\n \n fn return_it<'a>() -> &'a isize {\n     with(|o| o)\n-        //~^ ERROR cannot infer\n+    //[base]~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements [E0495]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "b37ce1e76bdfd4c883bc6b549e061da1d76182db", "filename": "src/test/ui/regions/regions-static-bound.base.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,41 +1,41 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-static-bound.rs:6:5\n+  --> $DIR/regions-static-bound.rs:10:5\n    |\n LL |     t\n    |     ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-static-bound.rs:5:24\n+  --> $DIR/regions-static-bound.rs:9:24\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        ^^\n \n error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:16:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |             --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n    |     ^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:16:5\n    |\n LL |     static_id(&u);\n    |     ^^^^^^^^^\n \n error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-static-bound.rs:11:5\n+  --> $DIR/regions-static-bound.rs:19:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- this data with an anonymous lifetime `'_`...\n-LL |     static_id(&u);\n+...\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/regions-static-bound.rs:11:5\n+  --> $DIR/regions-static-bound.rs:19:5\n    |\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/regions/regions-static-bound.stderr"}, {"sha": "d228c42f9957921d1c4c720dea0ea24b03edaaba", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:6:5\n+  --> $DIR/regions-static-bound.rs:10:5\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:16:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |          -  - let's call the lifetime of this reference `'1`\n@@ -20,13 +20,13 @@ LL |     static_id(&u);\n    |     argument requires that `'1` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:11:5\n+  --> $DIR/regions-static-bound.rs:19:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                  -  - let's call the lifetime of this reference `'2`\n    |                  |\n    |                  `v` is a reference that is only valid in the function body\n-LL |     static_id(&u);\n+...\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |     |"}, {"sha": "058b717c95daa38c9bae4b7d28254329ee33b0b5", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,14 +1,24 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'static { t }\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-    t //~ ERROR E0312\n+    t\n+    //[base]~^ ERROR E0312\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn error(u: &(), v: &()) {\n-    static_id(&u); //~ ERROR `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-    static_id_indirect(&v); //~ ERROR `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    static_id(&u);\n+    //[base]~^ ERROR `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR borrowed data escapes outside of function [E0521]\n+    static_id_indirect(&v);\n+    //[base]~^ ERROR `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR borrowed data escapes outside of function [E0521]\n }\n \n fn main() {}"}, {"sha": "9f52136f0c08b760e7de053da695ffbe3fd1863f", "filename": "src/test/ui/regions/regions-trait-object-subtyping.base.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,64 +1,64 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+  --> $DIR/regions-trait-object-subtyping.rs:19:5\n    |\n LL |     x\n    |     ^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/regions-trait-object-subtyping.rs:13:9\n+  --> $DIR/regions-trait-object-subtyping.rs:17:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         ^^\n note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/regions-trait-object-subtyping.rs:13:12\n+  --> $DIR/regions-trait-object-subtyping.rs:17:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |            ^^\n \n error[E0495]: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements\n-  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+  --> $DIR/regions-trait-object-subtyping.rs:19:5\n    |\n LL |     x\n    |     ^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/regions-trait-object-subtyping.rs:13:9\n+  --> $DIR/regions-trait-object-subtyping.rs:17:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+  --> $DIR/regions-trait-object-subtyping.rs:19:5\n    |\n LL |     x\n    |     ^\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/regions-trait-object-subtyping.rs:13:12\n+  --> $DIR/regions-trait-object-subtyping.rs:17:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |            ^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+  --> $DIR/regions-trait-object-subtyping.rs:19:5\n    |\n LL |     x\n    |     ^\n    = note: expected `&'b mut (dyn Dummy + 'b)`\n               found `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-trait-object-subtyping.rs:22:5\n+  --> $DIR/regions-trait-object-subtyping.rs:28:5\n    |\n LL |     x\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `Wrapper<&'b mut (dyn Dummy + 'b)>`\n               found struct `Wrapper<&'a mut (dyn Dummy + 'a)>`\n note: the lifetime `'b` as defined here...\n-  --> $DIR/regions-trait-object-subtyping.rs:20:15\n+  --> $DIR/regions-trait-object-subtyping.rs:26:15\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n    |               ^^\n note: ...does not necessarily outlive the lifetime `'a` as defined here\n-  --> $DIR/regions-trait-object-subtyping.rs:20:9\n+  --> $DIR/regions-trait-object-subtyping.rs:26:9\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n    |         ^^", "previous_filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr"}, {"sha": "c8cec3bd37797a0f51501b5038c8c56b1b597a75", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+  --> $DIR/regions-trait-object-subtyping.rs:19:5\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         -- -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     x\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-trait-object-subtyping.rs:22:5\n+  --> $DIR/regions-trait-object-subtyping.rs:28:5\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n    |         --    -- lifetime `'b` defined here"}, {"sha": "f108fc81cea4fed2a6aad99f024f557f1a8169a4", "filename": "src/test/ui/regions/regions-trait-object-subtyping.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Dummy { fn dummy(&self); }\n \n fn foo1<'a:'b,'b>(x: &'a mut (dyn Dummy+'a)) -> &'b mut (dyn Dummy+'b) {\n@@ -12,14 +16,18 @@ fn foo2<'a:'b,'b>(x: &'b mut (dyn Dummy+'a)) -> &'b mut (dyn Dummy+'b) {\n \n fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n     // Without knowing 'a:'b, we can't coerce\n-    x //~ ERROR lifetime bound not satisfied\n-     //~^ ERROR cannot infer an appropriate lifetime\n+    x\n+    //[base]~^ ERROR lifetime bound not satisfied\n+    //[base]~| ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n }\n \n struct Wrapper<T>(T);\n fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n     // We can't coerce because it is packed in `Wrapper`\n-    x //~ ERROR mismatched types\n+    x\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "23b3dea885d79b7c64627ee98fd4e929dcc643a5", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:25:30\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:29:30\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |                          ---------------- this type is declared with multiple lifetimes...", "previous_filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.stderr"}, {"sha": "f364f423f4ecf818ed194ad89cea39a440142e72", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:25:12\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:29:12\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "4bf32ec308247a4a3e1eb379a963df323d1285e6", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // `S` is contravariant with respect to both parameters.\n struct S<'a, 'b> {\n     f: &'a isize,\n@@ -22,7 +26,9 @@ fn use_<'short,'long>(c: S<'long, 'short>,\n     // 'short <= 'long, this would be true if the Contravariant type were\n     // covariant with respect to its parameter 'a.\n \n-    let _: S<'long, 'long> = c; //~ ERROR E0623\n+    let _: S<'long, 'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "8eca0d4d12125d211a78354ac439ce14c7ea9dfb", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:23:35\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:27:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.stderr"}, {"sha": "bc6dd6e69ed08ffd1282ff8f8ebdfc571e6609b0", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:23:12\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:27:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "ea08a7092305ea6e35f44788e05504165df7f405", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // This is contravariant with respect to 'a, meaning that\n // Contravariant<'long> <: Contravariant<'short> iff\n // 'short <= 'long\n@@ -20,7 +24,9 @@ fn use_<'short,'long>(c: Contravariant<'short>,\n     // 'short <= 'long, this would be true if the Contravariant type were\n     // covariant with respect to its parameter 'a.\n \n-    let _: Contravariant<'long> = c; //~ ERROR E0623\n+    let _: Contravariant<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "565de38ee11df9da720cacb74c27eba58e3b3397", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:23:32\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:27:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------", "previous_filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.stderr"}, {"sha": "9d3cebc9a4d561df3f7dc832462a016855b42a92", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:23:12\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:27:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "748ad84840a07a00ab2319b2eff00d3a0023703b", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // This is covariant with respect to 'a, meaning that\n // Covariant<'foo> <: Covariant<'static> because\n // 'foo <= 'static\n@@ -20,7 +24,9 @@ fn use_<'short,'long>(c: Covariant<'long>,\n     // 'short <= 'long, this would be true if the Covariant type were\n     // contravariant with respect to its parameter 'a.\n \n-    let _: Covariant<'short> = c; //~ ERROR E0623\n+    let _: Covariant<'short> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "e2e8958f53ecad6df72e5860bd99f2cd667189b4", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:20:32\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:24:32\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |                          ----------------", "previous_filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.stderr"}, {"sha": "b4ccb1693a7533c54bace8007ebdb5dd3d84b8e9", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:20:12\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:24:12\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "788f9b1b4d0f3a94ff0c904b1b5c09fb9ad43cae", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Invariant<'a> {\n     f: &'a mut &'a isize\n }\n@@ -17,7 +21,9 @@ fn use_<'short,'long>(c: Invariant<'long>,\n     // 'short <= 'long, this would be true if the Invariant type were\n     // contravariant with respect to its parameter 'a.\n \n-    let _: Invariant<'short> = c; //~ ERROR E0623\n+    let _: Invariant<'short> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "da91db1b91862e4cb1abe6d1536b3105195393cf", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.base.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:17:33\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:21:33\n    |\n LL |     let _: Invariant<'static> = c;\n    |                                 ^ lifetime mismatch\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'b>`\n note: the lifetime `'b` as defined here...\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:11:9\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:15:9\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         ^^", "previous_filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.stderr"}, {"sha": "7b05c357589e91e1ae4ecaa32fb3f7d52eaadbdf", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:17:12\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:21:12\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         -- lifetime `'b` defined here"}, {"sha": "4b7da4493acffe402b594c1c4315c004007d5f3b", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -4,6 +4,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Invariant<'a> {\n     f: &'a mut &'a isize\n }\n@@ -14,7 +18,9 @@ fn use_<'b>(c: Invariant<'b>) {\n     // Since 'b <= 'static, this would be true if Invariant were covariant\n     // with respect to its parameter 'a.\n \n-    let _: Invariant<'static> = c; //~ ERROR mismatched types\n+    let _: Invariant<'static> = c;\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "22fedb22d66c6b9b2fe96046bbd9706889062493", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -57,7 +57,7 @@ unsafe fn test12(x: *const usize) -> *const *const _ {\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n@@ -113,7 +113,7 @@ pub fn main() {\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n-        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n         //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions"}, {"sha": "3ea317dfb1a5d329a07c14569935f854b1a32861", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -545,25 +545,27 @@ help: use type parameters instead\n LL |     fn test10<T>(&self, _x : T) { }\n    |              +++             ~\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:59:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `Test9`\n+   |                        ^ not allowed in type signatures\n+   |\n+help: try replacing `_` with the type in the corresponding trait method signature\n+   |\n+LL |     fn clone(&self) -> Test9 { Test9 }\n+   |                        ~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:62:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n    |\n-help: use type parameters instead\n+help: try replacing `_` with the type in the corresponding trait method signature\n    |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  +++                   ~\n+LL |     fn clone_from(&mut self, other: &Test9) { *self = Test9; }\n+   |                                     ~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:107:31\n@@ -585,25 +587,27 @@ help: use type parameters instead\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     +++             ~\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:115:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^\n-   |                            |\n-   |                            not allowed in type signatures\n-   |                            help: replace with the correct return type: `FnTest9`\n+   |                            ^ not allowed in type signatures\n+   |\n+help: try replacing `_` with the type in the corresponding trait method signature\n+   |\n+LL |         fn clone(&self) -> FnTest9 { FnTest9 }\n+   |                            ~~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:118:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n    |\n-help: use type parameters instead\n+help: try replacing `_` with the type in the corresponding trait method signature\n    |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      +++                   ~\n+LL |         fn clone_from(&mut self, other: &FnTest9) { *self = FnTest9; }\n+   |                                         ~~~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:201:14"}, {"sha": "e6f058569dbd8cf816823a087cf6c3b646fc9a1f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -157,6 +157,8 @@ pub struct TestProps {\n     pub should_ice: bool,\n     // If true, the stderr is expected to be different across bit-widths.\n     pub stderr_per_bitwidth: bool,\n+    // The MIR opt to unit test, if any\n+    pub mir_unit_test: Option<String>,\n }\n \n mod directives {\n@@ -189,6 +191,7 @@ mod directives {\n     pub const STDERR_PER_BITWIDTH: &'static str = \"stderr-per-bitwidth\";\n     pub const INCREMENTAL: &'static str = \"incremental\";\n     pub const KNOWN_BUG: &'static str = \"known-bug\";\n+    pub const MIR_UNIT_TEST: &'static str = \"unit-test\";\n     // This isn't a real directive, just one that is probably mistyped often\n     pub const INCORRECT_COMPILER_FLAGS: &'static str = \"compiler-flags\";\n }\n@@ -232,6 +235,7 @@ impl TestProps {\n             assembly_output: None,\n             should_ice: false,\n             stderr_per_bitwidth: false,\n+            mir_unit_test: None,\n         }\n     }\n \n@@ -392,6 +396,9 @@ impl TestProps {\n                 config.set_name_directive(ln, STDERR_PER_BITWIDTH, &mut self.stderr_per_bitwidth);\n                 config.set_name_directive(ln, INCREMENTAL, &mut self.incremental);\n                 config.set_name_directive(ln, KNOWN_BUG, &mut self.known_bug);\n+                config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n+                    s.trim().to_string()\n+                });\n             });\n         }\n "}, {"sha": "6d94fe3ebb9cb53b76480ba6561e31dd203fe075", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f631e8e93681ddc6e62d6ba6065cac7c449534c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1f631e8e93681ddc6e62d6ba6065cac7c449534c", "patch": "@@ -1856,10 +1856,14 @@ impl<'test> TestCx<'test> {\n                 rustc.args(&[\n                     \"-Copt-level=1\",\n                     \"-Zdump-mir=all\",\n-                    \"-Zmir-opt-level=4\",\n                     \"-Zvalidate-mir\",\n                     \"-Zdump-mir-exclude-pass-number\",\n                 ]);\n+                if let Some(pass) = &self.props.mir_unit_test {\n+                    rustc.args(&[\"-Zmir-opt-level=0\", &format!(\"-Zmir-enable-passes=+{}\", pass)]);\n+                } else {\n+                    rustc.arg(\"-Zmir-opt-level=4\");\n+                }\n \n                 let mir_dump_dir = self.get_mir_dump_dir();\n                 let _ = fs::remove_dir_all(&mir_dump_dir);"}]}