{"sha": "f7c66fb625ad61bcac325c844180c1c32a04aa13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YzY2ZmI2MjVhZDYxYmNhYzMyNWM4NDQxODBjMWMzMmEwNGFhMTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-25T18:43:04Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-25T18:43:04Z"}, "message": "Allocate HIR id counters on demand", "tree": {"sha": "a41b6efdc028d27a2fd6751c30af4a71b2c73e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41b6efdc028d27a2fd6751c30af4a71b2c73e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7c66fb625ad61bcac325c844180c1c32a04aa13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c66fb625ad61bcac325c844180c1c32a04aa13", "html_url": "https://github.com/rust-lang/rust/commit/f7c66fb625ad61bcac325c844180c1c32a04aa13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7c66fb625ad61bcac325c844180c1c32a04aa13/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4ac714e1155c9ae66a25300250bdd887bb8e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ac714e1155c9ae66a25300250bdd887bb8e53", "html_url": "https://github.com/rust-lang/rust/commit/cb4ac714e1155c9ae66a25300250bdd887bb8e53"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "7dfb16602a3d44d911d9d05c451dc10f9053e3e4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f7c66fb625ad61bcac325c844180c1c32a04aa13/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c66fb625ad61bcac325c844180c1c32a04aa13/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f7c66fb625ad61bcac325c844180c1c32a04aa13", "patch": "@@ -51,7 +51,6 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::sync::Lrc;\n \n use std::collections::{BTreeSet, BTreeMap};\n-use std::fmt::Debug;\n use std::mem;\n use smallvec::SmallVec;\n use syntax::attr;\n@@ -378,13 +377,13 @@ impl<'a> LoweringContext<'a> {\n                                 Mark::root(),\n                                 tree.prefix.span,\n                             );\n-                            self.lctx.allocate_hir_id_counter(id, &tree);\n+                            self.lctx.allocate_hir_id_counter(id);\n                         }\n                     }\n                     UseTreeKind::Glob => (),\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n-                            let hir_id = self.lctx.allocate_hir_id_counter(id, &use_tree).hir_id;\n+                            let hir_id = self.lctx.allocate_hir_id_counter(id).hir_id;\n                             self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n                         }\n                     }\n@@ -394,7 +393,7 @@ impl<'a> LoweringContext<'a> {\n \n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n             fn visit_item(&mut self, item: &'lcx Item) {\n-                let hir_id = self.lctx.allocate_hir_id_counter(item.id, item).hir_id;\n+                let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n \n                 match item.node {\n                     ItemKind::Struct(_, ref generics)\n@@ -423,12 +422,12 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             fn visit_trait_item(&mut self, item: &'lcx TraitItem) {\n-                self.lctx.allocate_hir_id_counter(item.id, item);\n+                self.lctx.allocate_hir_id_counter(item.id);\n                 visit::walk_trait_item(self, item);\n             }\n \n             fn visit_impl_item(&mut self, item: &'lcx ImplItem) {\n-                self.lctx.allocate_hir_id_counter(item.id, item);\n+                self.lctx.allocate_hir_id_counter(item.id);\n                 visit::walk_impl_item(self, item);\n             }\n         }\n@@ -557,15 +556,13 @@ impl<'a> LoweringContext<'a> {\n         self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n     }\n \n-    fn allocate_hir_id_counter<T: Debug>(&mut self, owner: NodeId, debug: &T) -> LoweredNodeId {\n-        if self.item_local_id_counters.insert(owner, 0).is_some() {\n-            bug!(\n-                \"Tried to allocate item_local_id_counter for {:?} twice\",\n-                debug\n-            );\n-        }\n+    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> LoweredNodeId {\n+        // Setup the counter if needed\n+        self.item_local_id_counters.entry(owner).or_insert(0);\n         // Always allocate the first `HirId` for the owner itself.\n-        self.lower_node_id_with_owner(owner, owner)\n+        let lowered = self.lower_node_id_with_owner(owner, owner);\n+        debug_assert_eq!(lowered.hir_id.local_id.as_u32(), 0);\n+        lowered\n     }\n \n     fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> LoweredNodeId\n@@ -1417,7 +1414,7 @@ impl<'a> LoweringContext<'a> {\n             .opt_def_index(exist_ty_node_id)\n             .unwrap();\n \n-        self.allocate_hir_id_counter(exist_ty_node_id, &\"existential impl trait\");\n+        self.allocate_hir_id_counter(exist_ty_node_id);\n \n         let hir_bounds = self.with_hir_id_owner(exist_ty_node_id, lower_bounds);\n \n@@ -3495,9 +3492,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         node_ids.into_iter().map(|node_id| hir::ItemId {\n-            id: self.lower_node_id_generic(node_id, |_| {\n-                panic!(\"expected node_id to be lowered already {:#?}\", i)\n-            }).hir_id\n+            id: self.allocate_hir_id_counter(node_id).hir_id\n         }).collect()\n     }\n "}]}