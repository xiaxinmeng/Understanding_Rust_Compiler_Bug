{"sha": "0e6d2053b460a130ad798a5037708bb01352b3ea", "node_id": "C_kwDOAAsO6NoAKDBlNmQyMDUzYjQ2MGExMzBhZDc5OGE1MDM3NzA4YmIwMTM1MmIzZWE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-09T16:04:11Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:24:15Z"}, "message": "use target specs rather than --print=cfg to discover targets", "tree": {"sha": "b2b748b506fc897fab312bcf7bae2beb469de377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b748b506fc897fab312bcf7bae2beb469de377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6d2053b460a130ad798a5037708bb01352b3ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqfx8ACgkQzXazX3c0\ndp7f5g/+KX2DhK0Zf/jrS3V/3Fl5lZVE+h59DR+K1pzNURHA1myERBnrOUjY/dnz\n1L76v7sxb9P8+xMfVMRsnb2NzRyOjyiUFbSVu+fLVo1UXsCnj4YB4aWA5uomdiuY\npreJBlImwQ7SzH/htrSvJtPobm1bbbTV95kGBsOpvdPEfR11e+urO9DdxXn+ekCr\nfJPaG5A61gCZ6m7gUIiKpG8y5eApxGajh/tMVZVK1cvxQxk/v2M6X8nPUHUlH+dZ\nLCfHEKYBP5KheUvji7OygnK9Hkbi0n0vfRsfzQythvYfKexmHBi2vBghJCcj5gYZ\nmznHGzVo4BXbz8gQVcVytk90X3eBcYntftUQlp2uG8XaVqX8uhVopybSqnvZpVAw\nR5Q4y2QbZSVZvcadNHRv7KsOJORREI6AK+kpqZpHDgiTiykyneHSs94izTDfleHO\nnQb7tQSBa+TmcVKhAc14k/vbshAJYqQvywgjKjfcPWjUYfgv7GMdRdRqbDSZLTYk\njuIcdR2KjcGpUNb7ZMuGGS0OS+efpb3qdZdwwhN9DFDe3rZiXOYEpv18FSLTsDG9\nomEzvKVLYIRBJDho5VIwAjSmc/PgHZVqg84J0raXtCy/ya6raHjeQaBTyFSpGhrz\nDJ924Piyvob2YEqb0i3PQH43qiPv9VcL3SJV4OkHJvFl+CdBoQY=\n=pko5\n-----END PGP SIGNATURE-----", "payload": "tree b2b748b506fc897fab312bcf7bae2beb469de377\nparent ef2bf6d5053f55057aecd0f0cb35c13ef332d72a\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678377851 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680506655 +0200\n\nuse target specs rather than --print=cfg to discover targets\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d2053b460a130ad798a5037708bb01352b3ea", "html_url": "https://github.com/rust-lang/rust/commit/0e6d2053b460a130ad798a5037708bb01352b3ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d2053b460a130ad798a5037708bb01352b3ea/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2bf6d5053f55057aecd0f0cb35c13ef332d72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2bf6d5053f55057aecd0f0cb35c13ef332d72a", "html_url": "https://github.com/rust-lang/rust/commit/ef2bf6d5053f55057aecd0f0cb35c13ef332d72a"}], "stats": {"total": 78, "additions": 29, "deletions": 49}, "files": [{"sha": "03c0f2982fa730381fa0e5beb469d660b81e0c35", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 29, "deletions": 49, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d2053b460a130ad798a5037708bb01352b3ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d2053b460a130ad798a5037708bb01352b3ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0e6d2053b460a130ad798a5037708bb01352b3ea", "patch": "@@ -11,6 +11,7 @@ use crate::util::{add_dylib_path, PathBufExt};\n use lazycell::LazyCell;\n use std::collections::HashSet;\n use test::{ColorConfig, OutputFormat};\n+use serde::de::{Deserialize, Deserializer, Error as _};\n \n macro_rules! string_enum {\n     ($(#[$meta:meta])* $vis:vis enum $name:ident { $($variant:ident => $repr:expr,)* }) => {\n@@ -114,8 +115,10 @@ string_enum! {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq)]\n+#[derive(Clone, Copy, Debug, PartialEq, Default, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub enum PanicStrategy {\n+    #[default]\n     Unwind,\n     Abort,\n }\n@@ -450,72 +453,43 @@ impl TargetCfgs {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub struct TargetCfg {\n     pub(crate) arch: String,\n+    #[serde(default)]\n     pub(crate) os: String,\n+    #[serde(default)]\n     pub(crate) env: String,\n+    #[serde(default)]\n     pub(crate) abi: String,\n+    #[serde(rename = \"target-family\", default)]\n     pub(crate) families: Vec<String>,\n+    #[serde(rename = \"target-pointer-width\", deserialize_with = \"serde_parse_u32\")]\n     pub(crate) pointer_width: u32,\n+    #[serde(rename = \"target-endian\", default)]\n     endian: Endian,\n+    #[serde(rename = \"panic-strategy\", default)]\n     panic: PanicStrategy,\n }\n \n-#[derive(Eq, PartialEq, Clone, Debug)]\n+#[derive(Eq, PartialEq, Clone, Debug, Default, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub enum Endian {\n+    #[default]\n     Little,\n     Big,\n }\n \n impl TargetCfg {\n     fn new(config: &Config, target: &str) -> TargetCfg {\n-        let print_cfg = rustc_output(config, &[\"--print=cfg\", \"--target\", target]);\n-        let mut arch = None;\n-        let mut os = None;\n-        let mut env = None;\n-        let mut abi = None;\n-        let mut families = Vec::new();\n-        let mut pointer_width = None;\n-        let mut endian = None;\n-        let mut panic = None;\n-        for line in print_cfg.lines() {\n-            if let Some((name, value)) = line.split_once('=') {\n-                let value = value.trim_matches('\"');\n-                match name {\n-                    \"target_arch\" => arch = Some(value),\n-                    \"target_os\" => os = Some(value),\n-                    \"target_env\" => env = Some(value),\n-                    \"target_abi\" => abi = Some(value),\n-                    \"target_family\" => families.push(value.to_string()),\n-                    \"target_pointer_width\" => pointer_width = Some(value.parse().unwrap()),\n-                    \"target_endian\" => {\n-                        endian = Some(match value {\n-                            \"little\" => Endian::Little,\n-                            \"big\" => Endian::Big,\n-                            s => panic!(\"unexpected {s}\"),\n-                        })\n-                    }\n-                    \"panic\" => {\n-                        panic = match value {\n-                            \"abort\" => Some(PanicStrategy::Abort),\n-                            \"unwind\" => Some(PanicStrategy::Unwind),\n-                            s => panic!(\"unexpected {s}\"),\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-        }\n-        TargetCfg {\n-            arch: arch.unwrap().to_string(),\n-            os: os.unwrap().to_string(),\n-            env: env.unwrap().to_string(),\n-            abi: abi.unwrap().to_string(),\n-            families,\n-            pointer_width: pointer_width.unwrap(),\n-            endian: endian.unwrap(),\n-            panic: panic.unwrap(),\n+        let json = rustc_output(\n+            config,\n+            &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n+        );\n+        match serde_json::from_str(&json) {\n+            Ok(res) => res,\n+            Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n         }\n     }\n }\n@@ -524,6 +498,7 @@ fn rustc_output(config: &Config, args: &[&str]) -> String {\n     let mut command = Command::new(&config.rustc_path);\n     add_dylib_path(&mut command, iter::once(&config.compile_lib_path));\n     command.args(&config.target_rustcflags).args(args);\n+    command.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n     let output = match command.output() {\n         Ok(output) => output,\n@@ -539,6 +514,11 @@ fn rustc_output(config: &Config, args: &[&str]) -> String {\n     String::from_utf8(output.stdout).unwrap()\n }\n \n+fn serde_parse_u32<'de, D: Deserializer<'de>>(deserializer: D) -> Result<u32, D::Error> {\n+    let string = String::deserialize(deserializer)?;\n+    string.parse().map_err(D::Error::custom)\n+}\n+\n #[derive(Debug, Clone)]\n pub struct TestPaths {\n     pub file: PathBuf,         // e.g., compile-test/foo/bar/baz.rs"}]}