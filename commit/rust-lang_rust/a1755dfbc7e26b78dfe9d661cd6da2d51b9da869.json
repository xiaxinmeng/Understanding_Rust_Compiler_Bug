{"sha": "a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzU1ZGZiYzdlMjZiNzhkZmU5ZDY2MWNkNmRhMmQ1MWI5ZGE4Njk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-10T15:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-10T15:19:25Z"}, "message": "Rollup merge of #64292 - davidtwco:issue-63832-await-temporary-lifetimes, r=matthewjasper\n\nlowering: extend temporary lifetimes around await\n\nFixes #63832.\n\nr? @matthewjasper\ncc @nikomatsakis", "tree": {"sha": "77fbdab32ea55d9d5d90a2fff9a1d3110bb2f7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77fbdab32ea55d9d5d90a2fff9a1d3110bb2f7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdd779CRBK7hj4Ov3rIwAAdHIIAF447cDqPgVjEt6C3+D10HSB\nlfLBoZWwl9Z6l+7QSaehMcR4OWTyF3iNVmjc6NCxp9XLODO3tUpLN9KeE8SEGvYD\nDa/0jxFI8yXH1WNtCJYPli8A9z2Ux5dzmNZrRURtTEXfHcdYl5OpHQE62q4XbfKj\nNXavhR33dRq40HSjr0KX9H3GxvE8KOMiJybl4xOvdmwOidTX9S5yl1AMYOGYmJjK\n+sN2DxD5Z6vq8AYBl2PNDRCsD5TrzR/GHytav2XQ24gk97Rk1aSih/76liVhO5At\nhzkaQodzxwyveXx1gYg5L8rxlwlAKutCH09O0yBihEWcuDzlcDjbyZJyigrhPvc=\n=/3uv\n-----END PGP SIGNATURE-----\n", "payload": "tree 77fbdab32ea55d9d5d90a2fff9a1d3110bb2f7b2\nparent 347b5c89f552fb5a1817bb229052eab340c5996f\nparent 63fad69a9967a56e33927aa31c50768bc1498588\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568128765 +0200\ncommitter GitHub <noreply@github.com> 1568128765 +0200\n\nRollup merge of #64292 - davidtwco:issue-63832-await-temporary-lifetimes, r=matthewjasper\n\nlowering: extend temporary lifetimes around await\n\nFixes #63832.\n\nr? @matthewjasper\ncc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "html_url": "https://github.com/rust-lang/rust/commit/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "347b5c89f552fb5a1817bb229052eab340c5996f", "url": "https://api.github.com/repos/rust-lang/rust/commits/347b5c89f552fb5a1817bb229052eab340c5996f", "html_url": "https://github.com/rust-lang/rust/commit/347b5c89f552fb5a1817bb229052eab340c5996f"}, {"sha": "63fad69a9967a56e33927aa31c50768bc1498588", "url": "https://api.github.com/repos/rust-lang/rust/commits/63fad69a9967a56e33927aa31c50768bc1498588", "html_url": "https://github.com/rust-lang/rust/commit/63fad69a9967a56e33927aa31c50768bc1498588"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "a46cdabbb518fd74c1dd8270e60fd872b97095ae", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "patch": "@@ -507,14 +507,13 @@ impl LoweringContext<'_> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// {\n-    ///     let mut pinned = <expr>;\n-    ///     loop {\n+    /// match <expr> {\n+    ///     mut pinned => loop {\n     ///         match ::std::future::poll_with_tls_context(unsafe {\n-    ///             ::std::pin::Pin::new_unchecked(&mut pinned)\n+    ///             <::std::pin::Pin>::new_unchecked(&mut pinned)\n     ///         }) {\n     ///             ::std::task::Poll::Ready(result) => break result,\n-    ///             ::std::task::Poll::Pending => {},\n+    ///             ::std::task::Poll::Pending => {}\n     ///         }\n     ///         yield ();\n     ///     }\n@@ -549,21 +548,12 @@ impl LoweringContext<'_> {\n             self.allow_gen_future.clone(),\n         );\n \n-        // let mut pinned = <expr>;\n-        let expr = P(self.lower_expr(expr));\n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) = self.pat_ident_binding_mode(\n             span,\n             pinned_ident,\n             hir::BindingAnnotation::Mutable,\n         );\n-        let pinned_let = self.stmt_let_pat(\n-            ThinVec::new(),\n-            span,\n-            Some(expr),\n-            pinned_pat,\n-            hir::LocalSource::AwaitDesugar,\n-        );\n \n         // ::std::future::poll_with_tls_context(unsafe {\n         //     ::std::pin::Pin::new_unchecked(&mut pinned)\n@@ -621,7 +611,7 @@ impl LoweringContext<'_> {\n             self.arm(hir_vec![pending_pat], empty_block)\n         };\n \n-        let match_stmt = {\n+        let inner_match_stmt = {\n             let match_expr = self.expr_match(\n                 span,\n                 poll_expr,\n@@ -643,10 +633,11 @@ impl LoweringContext<'_> {\n \n         let loop_block = P(self.block_all(\n             span,\n-            hir_vec![match_stmt, yield_stmt],\n+            hir_vec![inner_match_stmt, yield_stmt],\n             None,\n         ));\n \n+        // loop { .. }\n         let loop_expr = P(hir::Expr {\n             hir_id: loop_hir_id,\n             node: hir::ExprKind::Loop(\n@@ -658,10 +649,14 @@ impl LoweringContext<'_> {\n             attrs: ThinVec::new(),\n         });\n \n-        hir::ExprKind::Block(\n-            P(self.block_all(span, hir_vec![pinned_let], Some(loop_expr))),\n-            None,\n-        )\n+        // mut pinned => loop { ... }\n+        let pinned_arm = self.arm(hir_vec![pinned_pat], loop_expr);\n+\n+        // match <expr> {\n+        //     mut pinned => loop { .. }\n+        // }\n+        let expr = P(self.lower_expr(expr));\n+        hir::ExprKind::Match(expr, hir_vec![pinned_arm], hir::MatchSource::AwaitDesugar)\n     }\n \n     fn lower_expr_closure("}, {"sha": "d2f92f04f40a716c078e7ca4b72c757b02b635d6", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "patch": "@@ -9,9 +9,9 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -26,9 +26,9 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -45,9 +45,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut dyn std::fmt::Write`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -68,9 +68,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::slice::Iter<'_, std::fmt::ArgumentV1<'_>>`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n "}, {"sha": "54059b29f72e27fd476fe4f4c1fe0ea2dcce2577", "filename": "src/test/ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs?ref=a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// edition:2018\n+\n+struct Test(String);\n+\n+impl Test {\n+    async fn borrow_async(&self) {}\n+\n+    fn with(&mut self, s: &str) -> &mut Self {\n+        self.0 = s.into();\n+        self\n+    }\n+}\n+\n+async fn test() {\n+    Test(\"\".to_string()).with(\"123\").borrow_async().await;\n+}\n+\n+fn main() { }"}, {"sha": "c5ea2b821ad782b53796875147081ba0ec4d1cff", "filename": "src/test/ui/async-await/issue-63832-await-short-temporary-lifetime.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1755dfbc7e26b78dfe9d661cd6da2d51b9da869/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs?ref=a1755dfbc7e26b78dfe9d661cd6da2d51b9da869", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// edition:2018\n+\n+async fn foo(x: &[Vec<u32>]) -> u32 {\n+    0\n+}\n+\n+async fn bar() {\n+    foo(&[vec![123]]).await;\n+}\n+\n+fn main() { }"}]}