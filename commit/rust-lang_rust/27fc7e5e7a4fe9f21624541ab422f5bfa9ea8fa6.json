{"sha": "27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZmM3ZTVlN2E0ZmU5ZjIxNjI0NTQxYWI0MjJmNWJmYTllYThmYTY=", "commit": {"author": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2020-05-16T10:29:23Z"}, "committer": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2020-05-16T10:58:20Z"}, "message": "Implement PartialOrd and Ord for SocketAddr*", "tree": {"sha": "c394bc75f7a14f989ad4f853bc917f04f109f1c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c394bc75f7a14f989ad4f853bc917f04f109f1c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "html_url": "https://github.com/rust-lang/rust/commit/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6/comments", "author": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84539360498cab3c70a7c9114c0b8106c8e1b06b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84539360498cab3c70a7c9114c0b8106c8e1b06b", "html_url": "https://github.com/rust-lang/rust/commit/84539360498cab3c70a7c9114c0b8106c8e1b06b"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "267fb8544c324a3b75271c66efb3f67d8fabc920", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 146, "deletions": 1, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "patch": "@@ -1,3 +1,4 @@\n+use crate::cmp::Ordering;\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n@@ -36,7 +37,7 @@ use crate::vec;\n /// assert_eq!(socket.port(), 8080);\n /// assert_eq!(socket.is_ipv4(), true);\n /// ```\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SocketAddr {\n     /// An IPv4 socket address.\n@@ -653,11 +654,115 @@ impl PartialEq for SocketAddrV6 {\n             && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n     }\n }\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV4> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV4) -> bool {\n+        match self {\n+            SocketAddr::V4(v4) => v4 == other,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV6> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV6) -> bool {\n+        match self {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => v6 == other,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV4 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(v4) => self == v4,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV6 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => self == v6,\n+        }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV4 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV6 {}\n \n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV4 {\n+    fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd<SocketAddr> for SocketAddrV4 {\n+    fn partial_cmp(&self, other: &SocketAddr) -> Option<Ordering> {\n+        match other {\n+            SocketAddr::V4(v4) => self.partial_cmp(v4),\n+            SocketAddr::V6(_) => Some(Ordering::Less),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd<SocketAddrV4> for SocketAddr {\n+    fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n+        match self {\n+            SocketAddr::V4(v4) => v4.partial_cmp(other),\n+            SocketAddr::V6(_) => Some(Ordering::Greater),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV6 {\n+    fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd<SocketAddr> for SocketAddrV6 {\n+    fn partial_cmp(&self, other: &SocketAddr) -> Option<Ordering> {\n+        match other {\n+            SocketAddr::V4(_) => Some(Ordering::Greater),\n+            SocketAddr::V6(v6) => self.partial_cmp(v6),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd<SocketAddrV6> for SocketAddr {\n+    fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n+        match self {\n+            SocketAddr::V4(_) => Some(Ordering::Less),\n+            SocketAddr::V6(v6) => v6.partial_cmp(other),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV4 {\n+    fn cmp(&self, other: &SocketAddrV4) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV6 {\n+    fn cmp(&self, other: &SocketAddrV6) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for SocketAddrV4 {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n@@ -1102,4 +1207,44 @@ mod tests {\n         assert!(!v6.is_ipv4());\n         assert!(v6.is_ipv6());\n     }\n+\n+    #[test]\n+    fn compare() {\n+        let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v4_2 = \"224.210.103.5:12345\".parse::<SocketAddrV4>().unwrap();\n+        let v4_3 = \"224.210.103.5:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v6_1 = \"[2001:db8:f00::1002]:1234\".parse::<SocketAddrV6>().unwrap();\n+        let v6_2 = \"[2001:db8:f00::2001]:1234\".parse::<SocketAddrV6>().unwrap();\n+        let v6_3 = \"[2001:db8:f00::2001]:2345\".parse::<SocketAddrV6>().unwrap();\n+\n+        // equality\n+        assert_eq!(v4_1, SocketAddr::V4(v4_1));\n+        assert_eq!(v6_1, SocketAddr::V6(v6_1));\n+        assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n+        assert_eq!(SocketAddr::V6(v6_1), SocketAddr::V6(v6_1));\n+        assert!(v4_1 != SocketAddr::V6(v6_1));\n+        assert!(v6_1 != SocketAddr::V4(v4_1));\n+        assert!(v4_1 != v4_2);\n+        assert!(v6_1 != v6_2);\n+\n+        // compare different addresses\n+        assert!(v4_1 < v4_2);\n+        assert!(v4_1 < SocketAddr::V4(v4_2));\n+        assert!(SocketAddr::V4(v4_1) < v4_2);\n+        assert!(SocketAddr::V4(v4_1) < SocketAddr::V4(v4_2));\n+        assert!(v6_1 < v6_2);\n+        assert!(v6_1 < SocketAddr::V6(v6_2));\n+        assert!(SocketAddr::V6(v6_1) < v6_2);\n+        assert!(SocketAddr::V6(v6_1) < SocketAddr::V6(v6_2));\n+\n+        // compare the same address with different ports\n+        assert!(v4_2 < v4_3);\n+        assert!(v4_2 < SocketAddr::V4(v4_3));\n+        assert!(SocketAddr::V4(v4_2) < v4_3);\n+        assert!(SocketAddr::V4(v4_2) < SocketAddr::V4(v4_3));\n+        assert!(v6_2 < v6_3);\n+        assert!(v6_2 < SocketAddr::V6(v6_3));\n+        assert!(SocketAddr::V6(v6_2) < v6_3);\n+        assert!(SocketAddr::V6(v6_2) < SocketAddr::V6(v6_3));\n+    }\n }"}]}