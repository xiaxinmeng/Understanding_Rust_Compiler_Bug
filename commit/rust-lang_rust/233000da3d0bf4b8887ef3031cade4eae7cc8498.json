{"sha": "233000da3d0bf4b8887ef3031cade4eae7cc8498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzAwMGRhM2QwYmY0Yjg4ODdlZjMwMzFjYWRlNGVhZTdjYzg0OTg=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-09T20:14:51Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-09T20:14:51Z"}, "message": "Merge pull request #752 from mcarton/rustup\n\nRustup to rustc 1.9.0-nightly (eabfc160f 2016-03-08)", "tree": {"sha": "4b9cb03304fbc49c63299fa6f2419c1fedb44680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9cb03304fbc49c63299fa6f2419c1fedb44680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233000da3d0bf4b8887ef3031cade4eae7cc8498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233000da3d0bf4b8887ef3031cade4eae7cc8498", "html_url": "https://github.com/rust-lang/rust/commit/233000da3d0bf4b8887ef3031cade4eae7cc8498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233000da3d0bf4b8887ef3031cade4eae7cc8498/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b5b2a26445c82565f83ffc0d188ed83067cd2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b5b2a26445c82565f83ffc0d188ed83067cd2f", "html_url": "https://github.com/rust-lang/rust/commit/d9b5b2a26445c82565f83ffc0d188ed83067cd2f"}, {"sha": "c95ae89387f022ec2bf396fba4c49cb4690c7bae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95ae89387f022ec2bf396fba4c49cb4690c7bae", "html_url": "https://github.com/rust-lang/rust/commit/c95ae89387f022ec2bf396fba4c49cb4690c7bae"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "8ee5e8ab346f18eb5ef3cbf2f57bbfd6d68d2bc5", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/233000da3d0bf4b8887ef3031cade4eae7cc8498/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/233000da3d0bf4b8887ef3031cade4eae7cc8498/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=233000da3d0bf4b8887ef3031cade4eae7cc8498", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.48\"\n+version = \"0.0.49\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "4c60ea89b34f9758433e3e14bf7cbf9be106ceef", "filename": "src/matches.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/233000da3d0bf4b8887ef3031cade4eae7cc8498/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233000da3d0bf4b8887ef3031cade4eae7cc8498/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=233000da3d0bf4b8887ef3031cade4eae7cc8498", "patch": "@@ -8,7 +8,7 @@ use std::cmp::Ordering;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::{COW_PATH, OPTION_PATH, RESULT_PATH};\n-use utils::{match_type, snippet, span_lint, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n \n /// **What it does:** This lint checks for matches with a single arm where an `if let` will usually suffice.\n ///\n@@ -309,18 +309,26 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n     if has_only_ref_pats(arms) {\n         if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {\n             let template = match_template(cx, expr.span, source, \"\", inner);\n-            span_lint(cx,\n-                      MATCH_REF_PATS,\n-                      expr.span,\n-                      &format!(\"you don't need to add `&` to both the expression and the patterns: use `{}`\",\n-                               template));\n+            span_lint_and_then(cx,\n+                               MATCH_REF_PATS,\n+                               expr.span,\n+                               \"you don't need to add `&` to both the expression and the patterns\",\n+                               |db| {\n+                                   db.span_suggestion(expr.span,\n+                                                      \"try\",\n+                                                      template);\n+                               });\n         } else {\n             let template = match_template(cx, expr.span, source, \"*\", ex);\n-            span_lint(cx,\n-                      MATCH_REF_PATS,\n-                      expr.span,\n-                      &format!(\"instead of prefixing all patterns with `&`, you can dereference the expression: `{}`\",\n-                               template));\n+            span_lint_and_then(cx,\n+                               MATCH_REF_PATS,\n+                               expr.span,\n+                               \"you don't need to add `&` to all patterns\",\n+                               |db| {\n+                                   db.span_suggestion(expr.span,\n+                                                      \"instead of prefixing all patterns with `&`, you can dereference the expression\",\n+                                                      template);\n+                               });\n         }\n     }\n }\n@@ -435,10 +443,11 @@ fn has_only_ref_pats(arms: &[Arm]) -> bool {\n fn match_template(cx: &LateContext, span: Span, source: MatchSource, op: &str, expr: &Expr) -> String {\n     let expr_snippet = snippet(cx, expr.span, \"..\");\n     match source {\n-        MatchSource::Normal => format!(\"match {}{} {{ ...\", op, expr_snippet),\n-        MatchSource::IfLetDesugar { .. } => format!(\"if let ... = {}{} {{\", op, expr_snippet),\n-        MatchSource::WhileLetDesugar => format!(\"while let ... = {}{} {{\", op, expr_snippet),\n+        MatchSource::Normal => format!(\"match {}{} {{ .. }}\", op, expr_snippet),\n+        MatchSource::IfLetDesugar { .. } => format!(\"if let .. = {}{} {{ .. }}\", op, expr_snippet),\n+        MatchSource::WhileLetDesugar => format!(\"while let .. = {}{} {{ .. }}\", op, expr_snippet),\n         MatchSource::ForLoopDesugar => cx.sess().span_bug(span, \"for loop desugared to match with &-patterns!\"),\n+        MatchSource::TryDesugar => cx.sess().span_bug(span, \"`?` operator desugared to match with &-patterns!\")\n     }\n }\n "}, {"sha": "f5f830fed513083c4b2e927c96716d9facb931c4", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/233000da3d0bf4b8887ef3031cade4eae7cc8498/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233000da3d0bf4b8887ef3031cade4eae7cc8498/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=233000da3d0bf4b8887ef3031cade4eae7cc8498", "patch": "@@ -137,7 +137,10 @@ fn match_bool() {\n fn ref_pats() {\n     {\n         let v = &Some(0);\n-        match v {  //~ERROR dereference the expression: `match *v { ...`\n+        match v {\n+            //~^ERROR add `&` to all patterns\n+            //~|HELP instead of\n+            //~|SUGGESTION `match *v { .. }`\n             &Some(v) => println!(\"{:?}\", v),\n             &None => println!(\"none\"),\n         }\n@@ -147,13 +150,19 @@ fn ref_pats() {\n         }\n     }\n     let tup =& (1, 2);\n-    match tup {  //~ERROR dereference the expression: `match *tup { ...`\n+    match tup {\n+        //~^ERROR add `&` to all patterns\n+        //~|HELP instead of\n+        //~|SUGGESTION `match *tup { .. }`\n         &(v, 1) => println!(\"{}\", v),\n         _ => println!(\"none\"),\n     }\n     // special case: using & both in expr and pats\n     let w = Some(0);\n-    match &w {  //~ERROR use `match w { ...`\n+    match &w {\n+        //~^ERROR add `&` to both\n+        //~|HELP try\n+        //~|SUGGESTION `match w { .. }`\n         &Some(v) => println!(\"{:?}\", v),\n         &None => println!(\"none\"),\n     }\n@@ -164,12 +173,18 @@ fn ref_pats() {\n     }\n \n     let a = &Some(0);\n-    if let &None = a { //~ERROR dereference the expression: `if let ... = *a {`\n+    if let &None = a {\n+        //~^ERROR add `&` to all patterns\n+        //~|HELP instead of\n+        //~|SUGGESTION `if let ... = *a { .. }`\n         println!(\"none\");\n     }\n \n     let b = Some(0);\n-    if let &None = &b { //~ERROR use `if let ... = b {`\n+    if let &None = &b {\n+        //~^ERROR add `&` to both\n+        //~|HELP try\n+        //~|SUGGESTION `if let ... = b { .. }`\n         println!(\"none\");\n     }\n }"}]}