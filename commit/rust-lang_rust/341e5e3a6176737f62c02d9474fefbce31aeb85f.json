{"sha": "341e5e3a6176737f62c02d9474fefbce31aeb85f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MWU1ZTNhNjE3NjczN2Y2MmMwMmQ5NDc0ZmVmYmNlMzFhZWI4NWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-13T20:56:04Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-21T17:40:46Z"}, "message": "Use MirBorrowckCtxt while reporting move errors", "tree": {"sha": "ac9271c85037ef63a8271484e00eaa28cb916570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac9271c85037ef63a8271484e00eaa28cb916570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341e5e3a6176737f62c02d9474fefbce31aeb85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341e5e3a6176737f62c02d9474fefbce31aeb85f", "html_url": "https://github.com/rust-lang/rust/commit/341e5e3a6176737f62c02d9474fefbce31aeb85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341e5e3a6176737f62c02d9474fefbce31aeb85f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942b384d61590c39eb635596de0370a823001817", "url": "https://api.github.com/repos/rust-lang/rust/commits/942b384d61590c39eb635596de0370a823001817", "html_url": "https://github.com/rust-lang/rust/commit/942b384d61590c39eb635596de0370a823001817"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "2e0ab522e3a4bdb1278d2f3b20f76667ccfbfc6d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=341e5e3a6176737f62c02d9474fefbce31aeb85f", "patch": "@@ -34,7 +34,7 @@ use std::rc::Rc;\n use syntax_pos::Span;\n \n use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MovePathIndex};\n+use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError, MovePathIndex};\n use dataflow::Borrows;\n use dataflow::DataflowResultsConsumer;\n use dataflow::FlowAtLocation;\n@@ -148,13 +148,11 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let mir = &mir; // no further changes\n     let location_table = &LocationTable::new(mir);\n \n-    let move_data: MoveData<'tcx> = match MoveData::gather_moves(mir, tcx) {\n-        Ok(move_data) => move_data,\n-        Err((move_data, move_errors)) => {\n-            move_errors::report_move_errors(&mir, tcx, move_errors, &move_data);\n-            move_data\n-        }\n-    };\n+    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<MoveError<'tcx>>>) =\n+        match MoveData::gather_moves(mir, tcx) {\n+            Ok(move_data) => (move_data, None),\n+            Err((move_data, move_errors)) => (move_data, Some(move_errors)),\n+        };\n \n     let mdpe = MoveDataParamEnv {\n         move_data: move_data,\n@@ -271,6 +269,9 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         polonius_output,\n     );\n \n+    if let Some(errors) = move_errors {\n+        mbcx.report_move_errors(errors);\n+    }\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n     // For each non-user used mutable variable, check if it's been assigned from\n@@ -1975,7 +1976,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ProjectionElem::Field(field, _ty) => {\n                     let base_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n \n-                    if  base_ty.is_closure() || base_ty.is_generator() {\n+                    if base_ty.is_closure() || base_ty.is_generator() {\n                         Some(field)\n                     } else {\n                         None"}, {"sha": "d979851376a2616e8504c2a8c31ce93b747b3a5d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=341e5e3a6176737f62c02d9474fefbce31aeb85f", "patch": "@@ -10,34 +10,15 @@\n \n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n-use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind, MoveData};\n+use borrow_check::MirBorrowckCtxt;\n+use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n-pub(crate) fn report_move_errors<'gcx, 'tcx>(\n-    mir: &Mir<'tcx>,\n-    tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    move_errors: Vec<MoveError<'tcx>>,\n-    move_data: &MoveData<'tcx>,\n-) {\n-    MoveErrorCtxt {\n-        mir,\n-        tcx,\n-        move_data,\n-    }.report_errors(move_errors);\n-}\n-\n-#[derive(Copy, Clone)]\n-struct MoveErrorCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    move_data: &'a MoveData<'tcx>,\n-}\n-\n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n // example:\n@@ -76,15 +57,15 @@ enum GroupedMoveError<'tcx> {\n     },\n }\n \n-impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n-    fn report_errors(self, move_errors: Vec<MoveError<'tcx>>) {\n+impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n+    pub(crate) fn report_move_errors(&self, move_errors: Vec<MoveError<'tcx>>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n         for error in grouped_errors {\n             self.report(error);\n         }\n     }\n \n-    fn group_move_errors(self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n+    fn group_move_errors(&self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n         let mut grouped_errors = Vec::new();\n         for error in errors {\n             self.append_to_grouped_errors(&mut grouped_errors, error);\n@@ -93,7 +74,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn append_to_grouped_errors(\n-        self,\n+        &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         error: MoveError<'tcx>,\n     ) {\n@@ -158,7 +139,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn append_binding_error(\n-        self,\n+        &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         kind: IllegalMoveOriginKind<'tcx>,\n         move_from: &Place<'tcx>,\n@@ -236,7 +217,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n         };\n     }\n \n-    fn report(self, error: GroupedMoveError<'tcx>) {\n+    fn report(&self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n             let (span, kind): (Span, &IllegalMoveOriginKind) = match error {\n                 GroupedMoveError::MovesFromMatchPlace { span, ref kind, .. }\n@@ -279,7 +260,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn add_move_hints(\n-        self,\n+        &self,\n         error: GroupedMoveError<'tcx>,\n         err: &mut DiagnosticBuilder<'a>,\n         span: Span,\n@@ -365,7 +346,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn suitable_to_remove_deref(self, proj: &PlaceProjection<'tcx>, snippet: &str) -> bool {\n+    fn suitable_to_remove_deref(&self, proj: &PlaceProjection<'tcx>, snippet: &str) -> bool {\n         let is_shared_ref = |ty: ty::Ty| match ty.sty {\n             ty::TypeVariants::TyRef(.., hir::Mutability::MutImmutable) => true,\n             _ => false,"}]}