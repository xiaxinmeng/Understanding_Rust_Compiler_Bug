{"sha": "fdff2d3588451c49adca5d92f551af94e920f0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZmYyZDM1ODg0NTFjNDlhZGNhNWQ5MmY1NTFhZjk0ZTkyMGYwZTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-09T15:58:49Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-12T08:25:42Z"}, "message": "Add some documentation to the dep_node module.", "tree": {"sha": "d5c58d67bfe2687b1cf7c51a45c7ba66cfeba548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c58d67bfe2687b1cf7c51a45c7ba66cfeba548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdff2d3588451c49adca5d92f551af94e920f0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdff2d3588451c49adca5d92f551af94e920f0e8", "html_url": "https://github.com/rust-lang/rust/commit/fdff2d3588451c49adca5d92f551af94e920f0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdff2d3588451c49adca5d92f551af94e920f0e8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f482808f9700259da6585597486166148576d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f482808f9700259da6585597486166148576d96", "html_url": "https://github.com/rust-lang/rust/commit/7f482808f9700259da6585597486166148576d96"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "3b6a7f87c13a54953824ccf3d1a57a95fb14b3dc", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fdff2d3588451c49adca5d92f551af94e920f0e8/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdff2d3588451c49adca5d92f551af94e920f0e8/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=fdff2d3588451c49adca5d92f551af94e920f0e8", "patch": "@@ -8,6 +8,58 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+//! This module defines the `DepNode` type which the compiler uses to represent\n+//! nodes in the dependency graph. A `DepNode` consists of a `DepKind` (which\n+//! specifies the kind of thing it represents, like a piece of HIR, MIR, etc)\n+//! and a `Fingerprint`, a 128 bit hash value the exact meaning of which\n+//! depends on the node's `DepKind`. Together, the kind and the fingerprint\n+//! fully identify a dependency node, even across multiple compilation sessions.\n+//! In other words, the value of the fingerprint does not depend on anything\n+//! that is specific to a given compilation session, like an unpredictable\n+//! interning key (e.g. NodeId, DefId, Symbol) or the numeric value of a\n+//! pointer. The concept behind this could be compared to how git commit hashes\n+//! uniquely identify a given commit and has a few advantages:\n+//!\n+//! * A `DepNode` can simply be serialized to disk and loaded in another session\n+//!   without the need to do any \"rebasing (like we have to do for Spans and\n+//!   NodeIds) or \"retracing\" like we had to do for `DefId` in earlier\n+//!   implementations of the dependency graph.\n+//! * A `Fingerprint` is just a bunch of bits, which allows `DepNode` to\n+//!   implement `Copy`, `Sync`, `Send`, `Freeze`, etc.\n+//! * Since we just have a bit pattern, `DepNode` can be mapped from disk into\n+//!   memory without any post-processing (e.g. \"abomination-style\" pointer\n+//!   reconstruction).\n+//! * Because a `DepNode` is self-contained, we can instantiate `DepNodes` that\n+//!   refer to things that do not exist anymore. In previous implementations\n+//!   `DepNode` contained a `DefId`. A `DepNode` referring to something that\n+//!   had been removed between the previous and the current compilation session\n+//!   could not be instantiated because the current compilation session\n+//!   contained no `DefId` for thing that had been removed.\n+//!\n+//! `DepNode` definition happens in the `define_dep_nodes!()` macro. This macro\n+//! defines the `DepKind` enum and a corresponding `DepConstructor` enum. The\n+//! `DepConstructor` enum links a `DepKind` to the parameters that are needed at\n+//! runtime in order to construct a valid `DepNode` fingerprint.\n+//!\n+//! Because the macro sees what parameters a given `DepKind` requires, it can\n+//! \"infer\" some properties for each kind of `DepNode`:\n+//!\n+//! * Whether a `DepNode` of a given kind has any parameters at all. Some\n+//!   `DepNode`s, like `Krate`, represent global concepts with only one value.\n+//! * Whether it is possible, in principle, to reconstruct a query key from a\n+//!   given `DepNode`. Many `DepKind`s only require a single `DefId` parameter,\n+//!   in which case it is possible to map the node's fingerprint back to the\n+//!   `DefId` it was computed from. In other cases, too much information gets\n+//!   lost during fingerprint computation.\n+//!\n+//! The `DepConstructor` enum, together with `DepNode::new()` ensures that only\n+//! valid `DepNode` instances can be constructed. For example, the API does not\n+//! allow for constructing parameterless `DepNode`s with anything other\n+//! than a zeroed out fingerprint. More generally speaking, it relieves the\n+//! user of the `DepNode` API of having to know how to compute the expected\n+//! fingerprint for a given set of node parameters.\n+\n use hir::def_id::{CrateNum, DefId};\n use hir::map::DefPathHash;\n "}]}