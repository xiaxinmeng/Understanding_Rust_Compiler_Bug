{"sha": "7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDBiOTk0YzliMWVlYjk3ZTgwYTNhNjRjYTUxZWM0NTJhYjg4OGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-19T11:38:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T11:38:40Z"}, "message": "Merge #8097\n\n8097: Parse extended_key_value_attributes r=jonas-schievink a=Veykril\n\nCompanion PR https://github.com/rust-analyzer/ungrammar/pull/31\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4bde423fd1a54c34286b7b65e9b2c062ddbd3d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bde423fd1a54c34286b7b65e9b2c062ddbd3d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVI1ACRBK7hj4Ov3rIwAAdHIIAD+R9gg0Mcfq36XYzzEHcoBD\n+EVz6utKTM2XqPkBcI/e22WN0CkssLZA05Vx9eJ0MrfAoHhaa9tgkiMe9JZOul+u\ngs45P0t1PeCqTsDTgfM30Jz0N14In551zFSZ0bXJdg9WQOSQTG86kPr2dLw4JquI\naM51qzpJG/V/yc3mRFbdiXWjLFVkmbGwdB02psRlihMDiRcQ48Y2y7rBXCNBrfdP\nSJQu+QFe24yPGSCPb+dMTA8Ng+Uw/ikfBleiqANhzw4OqmgN1eMMVZBd+3HmP8rv\nIIadDJmkvm3p732Pfo5k+QYrjPtSzdJBQ9KnTxYG4VC5Kh2x5m7w53T4mSL5wic=\n=QWMF\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bde423fd1a54c34286b7b65e9b2c062ddbd3d99\nparent 98d29d4f538899a8bd8caac7f4d2459438a1ae9a\nparent 4771a5679188177e653262e69ed7e33b4bf60c65\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616153920 +0000\ncommitter GitHub <noreply@github.com> 1616153920 +0000\n\nMerge #8097\n\n8097: Parse extended_key_value_attributes r=jonas-schievink a=Veykril\n\nCompanion PR https://github.com/rust-analyzer/ungrammar/pull/31\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "html_url": "https://github.com/rust-lang/rust/commit/7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d29d4f538899a8bd8caac7f4d2459438a1ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d29d4f538899a8bd8caac7f4d2459438a1ae9a", "html_url": "https://github.com/rust-lang/rust/commit/98d29d4f538899a8bd8caac7f4d2459438a1ae9a"}, {"sha": "4771a5679188177e653262e69ed7e33b4bf60c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/4771a5679188177e653262e69ed7e33b4bf60c65", "html_url": "https://github.com/rust-lang/rust/commit/4771a5679188177e653262e69ed7e33b4bf60c65"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "9f013c27574898570f076ebec0ef0e2e13acdc3a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -1809,9 +1809,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.12.2\"\n+version = \"1.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df6586a7c530704efe803d49a0b4132dcbdb4063163df39110548e6b5f2373ba\"\n+checksum = \"76760314176cc2b94047af2f921b92c39f11a34dc05c43a3c2b0fc91cb22959f\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "0360fb6270558d906445fba46db41eb6aa703d9f", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -458,7 +458,7 @@ pub enum AttrInput {\n impl Attr {\n     fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: u32) -> Option<Attr> {\n         let path = ModPath::from_src(ast.path()?, hygiene)?;\n-        let input = if let Some(lit) = ast.literal() {\n+        let input = if let Some(ast::Expr::Literal(lit)) = ast.expr() {\n             let value = match lit.kind() {\n                 ast::LiteralKind::String(string) => string.value()?.into(),\n                 _ => lit.syntax().first_token()?.text().trim_matches('\"').into(),"}, {"sha": "5722dea3ab9af18c0f69d64b22224bbec7bd6cc7", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -295,9 +295,9 @@ pub(super) fn doc_comment(\n }\n \n fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::String> {\n-    match it.literal() {\n+    match it.expr() {\n         // #[doc = lit]\n-        Some(lit) => match lit.kind() {\n+        Some(ast::Expr::Literal(lit)) => match lit.kind() {\n             ast::LiteralKind::String(it) => Some(it),\n             _ => None,\n         },\n@@ -315,6 +315,7 @@ fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::Stri\n                     string.text().get(1..string.text().len() - 1).map_or(false, |it| it == text)\n                 })\n         }\n+        _ => return None,\n     }\n }\n "}, {"sha": "96791ffc2a41c685757d4d64ade4958f4e3fc1ab", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -30,8 +30,8 @@ fn attr(p: &mut Parser, inner: bool) {\n         match p.current() {\n             T![=] => {\n                 p.bump(T![=]);\n-                if expressions::literal(p).is_none() {\n-                    p.error(\"expected literal\");\n+                if expressions::expr(p).0.is_none() {\n+                    p.error(\"expected expression\");\n                 }\n             }\n             T!['('] | T!['['] | T!['{'] => items::token_tree(p),"}, {"sha": "9a88fdb56722a785d849a9de2b1467dfd01d5e69", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -152,7 +152,7 @@ impl Attr {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n@@ -632,12 +632,6 @@ impl WherePred {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Literal {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for Literal {}\n-impl Literal {}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExprStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -805,6 +799,12 @@ impl IndexExpr {\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Literal {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for Literal {}\n+impl Literal {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -2072,17 +2072,6 @@ impl AstNode for WherePred {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Literal {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for ExprStmt {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == EXPR_STMT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2259,6 +2248,17 @@ impl AstNode for IndexExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for Literal {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for LoopExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3887,11 +3887,6 @@ impl std::fmt::Display for WherePred {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Literal {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for ExprStmt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3972,6 +3967,11 @@ impl std::fmt::Display for IndexExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for Literal {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for LoopExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "5a9834cbb8520b7b8e0059ca1a72493367e0224a", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -109,16 +109,6 @@ impl ast::Attr {\n         Some((self.simple_name()?, tt))\n     }\n \n-    pub fn as_simple_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n-        let lit = self.literal()?;\n-        let key = self.simple_name()?;\n-        let value_token = lit.syntax().first_token()?;\n-\n-        let value: SmolStr = ast::String::cast(value_token)?.value()?.into();\n-\n-        Some((key, value))\n-    }\n-\n     pub fn simple_name(&self) -> Option<SmolStr> {\n         let path = self.path()?;\n         match (path.segment(), path.qualifier()) {"}, {"sha": "997770958ff63232cee67882557e6e72f6b790b8", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7200b994c9b1eeb97e80a3a64ca51ec452ab888b/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "patch": "@@ -11,7 +11,7 @@ anyhow = \"1.0.26\"\n flate2 = \"1.0\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.12\"\n+ungrammar = \"=1.13\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}]}