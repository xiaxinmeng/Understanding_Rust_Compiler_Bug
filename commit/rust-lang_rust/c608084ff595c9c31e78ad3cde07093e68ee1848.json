{"sha": "c608084ff595c9c31e78ad3cde07093e68ee1848", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDgwODRmZjU5NWM5YzMxZTc4YWQzY2RlMDcwOTNlNjhlZTE4NDg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:13:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:13:15Z"}, "message": "rollup merge of #23598: brson/gate\n\nConflicts:\n\tsrc/compiletest/compiletest.rs\n\tsrc/libcollections/lib.rs\n\tsrc/librustc_back/lib.rs\n\tsrc/libserialize/lib.rs\n\tsrc/libstd/lib.rs\n\tsrc/libtest/lib.rs\n\tsrc/test/run-make/rustdoc-default-impl/foo.rs\n\tsrc/test/run-pass/env-home-dir.rs", "tree": {"sha": "b9b8d61635eb7b5cc12c738f4c60f868c1334a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b8d61635eb7b5cc12c738f4c60f868c1334a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c608084ff595c9c31e78ad3cde07093e68ee1848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c608084ff595c9c31e78ad3cde07093e68ee1848", "html_url": "https://github.com/rust-lang/rust/commit/c608084ff595c9c31e78ad3cde07093e68ee1848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c608084ff595c9c31e78ad3cde07093e68ee1848/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b06284ea88bdebdd95317e1313bd05a2ef5388", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b06284ea88bdebdd95317e1313bd05a2ef5388", "html_url": "https://github.com/rust-lang/rust/commit/d8b06284ea88bdebdd95317e1313bd05a2ef5388"}, {"sha": "8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "html_url": "https://github.com/rust-lang/rust/commit/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a"}], "stats": {"total": 4839, "additions": 4534, "deletions": 305}, "files": [{"sha": "461b5af6204edced4155e7ace9b3f5ab533c3c2c", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -40,8 +40,8 @@ pub struct TestProps {\n     pub check_stdout: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n     pub no_prefer_dynamic: bool,\n-    // Don't run --pretty expanded when running pretty printing tests\n-    pub no_pretty_expanded: bool,\n+    // Run --pretty expanded when running pretty printing tests\n+    pub pretty_expanded: bool,\n     // Which pretty mode are we testing with, default to 'normal'\n     pub pretty_mode: String,\n     // Only compare pretty output and don't try compiling\n@@ -62,7 +62,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut force_host = false;\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n-    let mut no_pretty_expanded = false;\n+    let mut pretty_expanded = false;\n     let mut pretty_mode = None;\n     let mut pretty_compare_only = false;\n     let mut forbid_output = Vec::new();\n@@ -96,8 +96,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             no_prefer_dynamic = parse_no_prefer_dynamic(ln);\n         }\n \n-        if !no_pretty_expanded {\n-            no_pretty_expanded = parse_no_pretty_expanded(ln);\n+        if !pretty_expanded {\n+            pretty_expanded = parse_pretty_expanded(ln);\n         }\n \n         if pretty_mode.is_none() {\n@@ -152,7 +152,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         force_host: force_host,\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n-        no_pretty_expanded: no_pretty_expanded,\n+        pretty_expanded: pretty_expanded,\n         pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n         pretty_compare_only: pretty_compare_only,\n         forbid_output: forbid_output,\n@@ -295,8 +295,8 @@ fn parse_no_prefer_dynamic(line: &str) -> bool {\n     parse_name_directive(line, \"no-prefer-dynamic\")\n }\n \n-fn parse_no_pretty_expanded(line: &str) -> bool {\n-    parse_name_directive(line, \"no-pretty-expanded\")\n+fn parse_pretty_expanded(line: &str) -> bool {\n+    parse_name_directive(line, \"pretty-expanded\")\n }\n \n fn parse_pretty_mode(line: &str) -> Option<String> {\n@@ -340,7 +340,8 @@ fn parse_pp_exact(line: &str, testfile: &Path) -> Option<PathBuf> {\n }\n \n fn parse_name_directive(line: &str, directive: &str) -> bool {\n-    line.contains(directive)\n+    // This 'no-' rule is a quick hack to allow pretty-expanded and no-pretty-expanded to coexist\n+    line.contains(directive) && !line.contains(&(\"no-\".to_string() + directive))\n }\n \n pub fn parse_name_value_directive(line: &str, directive: &str)"}, {"sha": "1666124b46a6185febf95b484ba3546645abbeab", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -245,7 +245,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if !proc_res.status.success() {\n         fatal_proc_rec(\"pretty-printed source does not typecheck\", &proc_res);\n     }\n-    if props.no_pretty_expanded { return }\n+    if !props.pretty_expanded { return }\n \n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testfile, srcs[round].clone(), \"expanded\");"}, {"sha": "07df3bdad34900ff00de2e1a6e6ed8c03ae2130e", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -816,8 +816,7 @@ may optionally begin with any number of `attributes` that apply to the\n containing module. Attributes on the anonymous crate module define important\n metadata that influences the behavior of the compiler.\n \n-```{.rust}\n-# #![allow(unused_attribute)]\n+```no_run\n // Crate name\n #![crate_name = \"projx\"]\n \n@@ -1020,6 +1019,7 @@ Use declarations support a number of convenient shortcuts:\n An example of `use` declarations:\n \n ```\n+# #![feature(core)]\n use std::iter::range_step;\n use std::option::Option::{Some, None};\n use std::collections::hash_map::{self, HashMap};\n@@ -1080,6 +1080,7 @@ declarations.\n An example of what will and will not work for `use` items:\n \n ```\n+# #![feature(core)]\n # #![allow(unused_imports)]\n use foo::core::iter;  // good: foo is at the root of the crate\n use foo::baz::foobaz;    // good: foo is at the root of the crate\n@@ -1781,6 +1782,7 @@ functions, with the exception that they may not have a body and are instead\n terminated by a semicolon.\n \n ```\n+# #![feature(libc)]\n extern crate libc;\n use libc::{c_char, FILE};\n "}, {"sha": "79cb3117c0ef2ea7c249ca5303f0eadaa1f0a860", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -88,6 +88,7 @@ When `guard` goes out of scope, it will block execution until the thread is\n finished. If we didn't want this behaviour, we could use `thread::spawn()`:\n \n ```\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -146,6 +147,7 @@ As an example, here is a Rust program that would have a data race in many\n languages. It will not compile:\n \n ```ignore\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -185,6 +187,7 @@ only one person at a time can mutate what's inside. For that, we can use the\n but for a different reason:\n \n ```ignore\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -229,6 +232,7 @@ guard across thread boundaries, which gives us our error.\n We can use `Arc<T>` to fix this. Here's the working version:\n \n ```\n+# #![feature(old_io, std_misc)]\n use std::sync::{Arc, Mutex};\n use std::thread;\n use std::old_io::timer;\n@@ -254,6 +258,7 @@ handle is then moved into the new thread. Let's examine the body of the\n thread more closely:\n \n ```\n+# #![feature(old_io, std_misc)]\n # use std::sync::{Arc, Mutex};\n # use std::thread;\n # use std::old_io::timer;"}, {"sha": "7a459ad354d3c13f353afe398f6ce0cf528eb106", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -237,14 +237,17 @@ fn main() {\n }\n ```\n \n-Here's the full algorithm:\n-\n-1. Given a code block, if it does not contain `fn main()`, it is wrapped in\n-   `fn main() { your_code }`\n-2. Given that result, if it contains no `extern crate` directives but it also\n-   contains the name of the crate being tested, then `extern crate <name>` is\n-   injected at the top.\n-3. Some common allow attributes are added for documentation examples at the top.\n+Here's the full algorithm rustdoc uses to postprocess examples:\n+\n+1. Any leading `#![foo]` attributes are left intact as crate attributes.\n+2. Some common `allow` attributes are inserted, including\n+   `unused_variables`, `unused_assignments`, `unused_mut`,\n+   `unused_attributes`, and `dead_code`. Small examples often trigger\n+   these lints.\n+3. If the example does not contain `extern crate`, then `extern crate\n+   <mycrate>;` is inserted.\n+2. Finally, if the example does not contain `fn main`, the remainder of the\n+   text is wrapped in `fn main() { your_code }`\n \n Sometimes, this isn't enough, though. For example, all of these code samples\n with `///` we've been talking about? The raw text:"}, {"sha": "695279e2d5bb6983cd34a3c6903633969fa2992a", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,7 @@ The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n use libc::size_t;\n \n@@ -45,6 +46,7 @@ keeping the binding correct at runtime.\n The `extern` block can be extended to cover the entire snappy API:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n use libc::{c_int, size_t};\n \n@@ -80,6 +82,7 @@ length is number of elements currently contained, and the capacity is the total\n the allocated memory. The length is less than or equal to the capacity.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{c_int, size_t};\n # unsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 }\n@@ -104,6 +107,7 @@ required capacity to hold the compressed output. The vector can then be passed t\n the true length after compression for setting the length.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{size_t, c_int};\n # unsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8,\n@@ -130,6 +134,7 @@ Decompression is similar, because snappy stores the uncompressed size as part of\n format and `snappy_uncompressed_length` will retrieve the exact buffer size required.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{size_t, c_int};\n # unsafe fn snappy_uncompress(compressed: *const u8,\n@@ -408,6 +413,7 @@ global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n \n #[link(name = \"readline\")]\n@@ -426,6 +432,7 @@ interface. To do this, statics can be declared with `mut` so we can mutate\n them.\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n \n use std::ffi::CString;\n@@ -458,6 +465,7 @@ calling foreign functions. Some foreign functions, most notably the Windows API,\n conventions. Rust provides a way to tell the compiler which convention to use:\n \n ```\n+# #![feature(libc)]\n extern crate libc;\n \n #[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]"}, {"sha": "8d7b1c3bd83932dbaab824ac5752d1ca87f64d1e", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -246,6 +246,7 @@ These two basic iterators should serve you well. There are some more\n advanced iterators, including ones that are infinite. Like `count`:\n \n ```rust\n+# #![feature(core)]\n std::iter::count(1, 5);\n ```\n \n@@ -294,6 +295,7 @@ has no side effect on the original iterator. Let's try it out with our infinite\n iterator from before, `count()`:\n \n ```rust\n+# #![feature(core)]\n for i in std::iter::count(1, 5).take(5) {\n     println!(\"{}\", i);\n }"}, {"sha": "8cb16f7ab33406422659b3d3a57eb82a7de220ec", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -23,6 +23,7 @@ the ability to use this *method call syntax* via the `impl` keyword.\n Here's how it works:\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -87,6 +88,7 @@ original example, `foo.bar().baz()`? This is called 'method chaining', and we\n can do it by returning `self`.\n \n ```\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -164,6 +166,7 @@ have method overloading, named arguments, or variable arguments. We employ\n the builder pattern instead. It looks like this:\n \n ```\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,"}, {"sha": "c46f84caa860cbcd681f4019634eadaeddbd433b", "filename": "src/doc/trpl/more-strings.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmore-strings.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -177,6 +177,7 @@ Rust provides iterators for each of these situations:\n Usually, the `graphemes()` method on `&str` is what you want:\n \n ```\n+# #![feature(unicode)]\n let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n \n for l in s.graphemes(true) {"}, {"sha": "a296e1311e6d16472e1df9427dfee03c8971fec1", "filename": "src/doc/trpl/standard-input.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -5,7 +5,7 @@ we haven't seen before. Here's a simple program that reads some input,\n and then prints it back out:\n \n ```{rust,ignore}\n-fn main() {\n+corefn main() {\n     println!(\"Type something!\");\n \n     let input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n@@ -28,6 +28,7 @@ Since writing the fully qualified name all the time is annoying, we can use\n the `use` statement to import it in:\n \n ```{rust}\n+# #![feature(old_io)]\n use std::old_io::stdin;\n \n stdin();\n@@ -37,6 +38,7 @@ However, it's considered better practice to not import individual functions, but\n to import the module, and only use one level of qualification:\n \n ```{rust}\n+# #![feature(old_io)]\n use std::old_io;\n \n old_io::stdin();"}, {"sha": "8fb08e1c6cfdea4f529e051e98cdd66b3e1b169f", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -546,6 +546,8 @@ is an opaque \"black box\" to the optimizer and so forces it to consider any\n argument as used.\n \n ```rust\n+# #![feature(test)]\n+\n extern crate test;\n \n # fn main() {"}, {"sha": "fe26fc5e1eb200a71cd45f74b8c826dfb7f7a573", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -4,6 +4,7 @@ Do you remember the `impl` keyword, used to call a function with method\n syntax?\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -21,6 +22,7 @@ Traits are similar, except that we define a trait with just the method\n signature, then implement the trait for that struct. Like this:\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -84,6 +86,7 @@ which implements `HasArea` will have an `.area()` method.\n Here's an extended example of how this works:\n \n ```{rust}\n+# #![feature(core)]\n trait HasArea {\n     fn area(&self) -> f64;\n }\n@@ -225,6 +228,7 @@ If we add a `use` line right above `main` and make the right things public,\n everything is fine:\n \n ```{rust}\n+# #![feature(core)]\n use shapes::HasArea;\n \n mod shapes {\n@@ -408,6 +412,7 @@ but instead, we found a floating-point variable. We need a different bound. `Flo\n to the rescue:\n \n ```\n+# #![feature(std_misc)]\n use std::num::Float;\n \n fn inverse<T: Float>(x: T) -> Result<T, String> {\n@@ -423,6 +428,7 @@ from the `Float` trait. Both `f32` and `f64` implement `Float`, so our function\n works just fine:\n \n ```\n+# #![feature(std_misc)]\n # use std::num::Float;\n # fn inverse<T: Float>(x: T) -> Result<T, String> {\n #     if x == Float::zero() { return Err(\"x cannot be zero!\".to_string()) }"}, {"sha": "2116976d55a4d56764bad679633c3cbb27d14533", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -187,6 +187,7 @@ As an example, we give a reimplementation of owned boxes by wrapping\n reimplementation is as safe as the `Box` type.\n \n ```\n+# #![feature(libc)]\n #![feature(unsafe_destructor)]\n \n extern crate libc;\n@@ -443,6 +444,7 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```\n+# #![feature(libc)]\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n@@ -470,6 +472,7 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```ignore\n+# #![feature(libc)]\n #![feature(no_std)]\n #![no_std]\n #![no_main]\n@@ -526,6 +529,7 @@ As an example, here is a program that will calculate the dot product of two\n vectors provided from C, using idiomatic Rust practices.\n \n ```\n+# #![feature(libc, core)]\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n@@ -650,6 +654,7 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```\n+# #![feature(libc)]\n #![feature(lang_items, box_syntax, start, no_std)]\n #![no_std]\n "}, {"sha": "97d3f78f67cbcd0a93e2acece525e458815a659c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -95,6 +95,7 @@ use heap::deallocate;\n /// task.\n ///\n /// ```\n+/// # #![feature(alloc, core)]\n /// use std::sync::Arc;\n /// use std::thread;\n ///\n@@ -185,6 +186,7 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -246,6 +248,7 @@ impl<T> Clone for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -289,6 +292,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let mut five = Arc::new(5);\n@@ -324,6 +328,7 @@ impl<T: Sync + Send> Drop for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// {\n@@ -387,6 +392,7 @@ impl<T: Sync + Send> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -424,6 +430,7 @@ impl<T: Sync + Send> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::new(5).downgrade();\n@@ -448,6 +455,7 @@ impl<T: Sync + Send> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "8b18fbf554a4cad6218fb0bf99b79135c637aa1b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -65,6 +65,7 @@ use core::raw::TraitObject;\n /// The following two examples are equivalent:\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// #![feature(box_syntax)]\n /// use std::boxed::HEAP;\n ///\n@@ -135,6 +136,7 @@ impl<T : ?Sized> Box<T> {\n ///\n /// # Examples\n /// ```\n+/// # #![feature(alloc)]\n /// use std::boxed;\n ///\n /// let seventeen = Box::new(17u32);\n@@ -178,6 +180,7 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc, core)]\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///"}, {"sha": "541de2d37fbe0cf68f47a6c51d6c9df8e96a2203", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -66,6 +66,7 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(no_std)]\n #![no_std]"}, {"sha": "e4b09bba5298902711250e3b8dd7f8f9614b9e74", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -32,6 +32,7 @@\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```rust\n+//! # #![feature(alloc, collections)]\n //! use std::rc::Rc;\n //!\n //! struct Owner {\n@@ -88,6 +89,7 @@\n //! Read the `Cell` documentation for more details on interior mutability.\n //!\n //! ```rust\n+//! # #![feature(alloc)]\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -218,6 +220,7 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -247,6 +250,7 @@ pub fn strong_count<T>(this: &Rc<T>) -> usize { this.strong() }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n@@ -267,6 +271,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3);\n@@ -301,6 +306,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3);\n@@ -330,6 +336,7 @@ impl<T: Clone> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let mut five = Rc::new(5);\n@@ -372,6 +379,7 @@ impl<T> Drop for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -420,6 +428,7 @@ impl<T> Clone for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -648,6 +657,7 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -676,6 +686,7 @@ impl<T> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -721,6 +732,7 @@ impl<T> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::new(5).downgrade();"}, {"sha": "6edee82dc30afe6e5d26ef498761197a9fb15739", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -216,6 +216,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n@@ -235,6 +236,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -255,6 +257,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -360,6 +363,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n     ///\n@@ -405,6 +409,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     /// heap.push(1);\n@@ -436,6 +441,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     ///\n@@ -461,6 +467,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n@@ -478,6 +485,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     ///\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);"}, {"sha": "377b52a3dbe292d4380c10816327493f3480e5f4", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,7 @@\n //! [sieve]: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n //!\n //! ```\n+//! # #![feature(collections, core)]\n //! use std::collections::{BitSet, BitVec};\n //! use std::num::Float;\n //! use std::iter;\n@@ -134,6 +135,7 @@ static FALSE: bool = false;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);\n@@ -262,6 +264,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     /// let mut bv = BitVec::new();\n     /// ```\n@@ -276,6 +279,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -316,6 +320,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000, 0b00010010]);\n@@ -358,6 +363,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_fn(5, |i| { i % 2 == 0 });\n@@ -376,6 +382,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -408,6 +415,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, false);\n@@ -432,6 +440,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -452,6 +461,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -480,6 +490,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -510,6 +521,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -540,6 +552,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -569,6 +582,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, true);\n@@ -593,6 +607,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01110100, 0b10010010]);\n@@ -609,6 +624,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -626,6 +642,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -647,6 +664,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, true);\n@@ -694,6 +712,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000]);\n@@ -714,6 +733,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -740,6 +760,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -770,6 +791,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -792,6 +814,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -813,6 +836,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -863,6 +887,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001001]);\n@@ -893,6 +918,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -1103,6 +1129,7 @@ impl<'a> IntoIterator for &'a BitVec {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::{BitSet, BitVec};\n ///\n /// // It's a regular set\n@@ -1199,6 +1226,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1215,6 +1243,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1232,6 +1261,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -1261,6 +1291,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1282,6 +1313,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1308,6 +1340,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1328,6 +1361,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1348,6 +1382,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1394,6 +1429,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1426,6 +1462,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let s = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01001010]));\n@@ -1447,6 +1484,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1477,6 +1515,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1507,6 +1546,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1545,6 +1585,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1574,6 +1615,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1597,6 +1639,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1621,6 +1664,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1653,6 +1697,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;"}, {"sha": "c2f6fbc0b2602cb62c537c23d9c2eb3c9e3905c9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -1297,6 +1297,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1319,6 +1320,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1506,6 +1508,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -1532,6 +1535,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Excluded};\n     ///\n@@ -1557,6 +1561,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::btree_map::Entry;\n     ///"}, {"sha": "08ee5801482fdb44e81a4531142527c987315401", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -116,6 +116,7 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -137,6 +138,7 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -162,6 +164,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -190,6 +193,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -213,6 +217,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -237,6 +242,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -261,6 +267,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -333,6 +340,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -350,6 +358,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -371,6 +380,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -413,6 +423,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();"}, {"sha": "b106f4adbc708219524bf1a368cdac19211c7689", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -174,6 +174,7 @@\n //! like:\n //!\n //! ```\n+//! # #![feature(core, std_misc)]\n //! use std::fmt;\n //! use std::f64;\n //! use std::num::Float;\n@@ -261,6 +262,7 @@\n //! Example usage is:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! # #![allow(unused_must_use)]\n //! use std::io::Write;\n //! let mut w = Vec::new();\n@@ -288,6 +290,7 @@\n //! off, some example usage is:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! use std::fmt;\n //! use std::io::{self, Write};\n //!"}, {"sha": "da2c61b6fd394a47cb1946a149376655c582010f", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -22,6 +22,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]\n@@ -37,7 +38,7 @@\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(convert)]\n-#![cfg_attr(test, feature(rand, rustc_private, test))]\n+#![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n \n #![feature(no_std)]"}, {"sha": "908c78a17f4f96ef2743f5b9a52dc3e56a5d4952", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -235,6 +235,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut a = LinkedList::new();\n@@ -483,6 +484,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut dl = LinkedList::new();\n@@ -530,6 +532,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -548,6 +551,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -573,6 +577,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -765,6 +770,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n@@ -792,6 +798,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();"}, {"sha": "2a668b0869d2529ab61a18611a59ba5bc5d976bf", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! Slices are a view into a block of memory represented as a pointer and a length.\n //!\n //! ```rust\n+//! # #![feature(core)]\n //! // slicing a Vec\n //! let vec = vec!(1, 2, 3);\n //! let int_slice = vec.as_slice();\n@@ -271,6 +272,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);\n@@ -561,6 +563,7 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n+    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -843,6 +846,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -854,6 +858,7 @@ impl<T> [T] {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -875,6 +880,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -922,6 +928,7 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n+    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -951,6 +958,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -973,6 +981,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];"}, {"sha": "ca2786e843e97031c56e1d37d7b63aa443d096ab", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -544,6 +544,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// assert!(\"hello\".contains_char('e'));\n     ///\n     /// assert!(!\"hello\".contains_char('z'));\n@@ -762,6 +763,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0,3), (6,9), (12,15)]);\n     ///\n@@ -784,6 +786,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".split_str(\"abc\").collect();\n     /// assert_eq!(v, [\"\", \"XXX\", \"YYY\", \"\"]);\n     ///\n@@ -892,6 +895,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.slice_chars(0, 4), \"L\u00f6we\");\n@@ -1042,6 +1046,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert!(s.is_char_boundary(0));\n     /// // start of `\u8001`\n@@ -1078,6 +1083,7 @@ impl str {\n     /// done by `.chars()` or `.char_indices()`.\n     ///\n     /// ```\n+    /// # #![feature(str_char, core)]\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n@@ -1128,6 +1134,7 @@ impl str {\n     /// done by `.chars().rev()` or `.char_indices()`.\n     ///\n     /// ```\n+    /// # #![feature(str_char, core)]\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n@@ -1171,6 +1178,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at(1), 'b');\n     /// assert_eq!(s.char_at(2), '\u03c0');\n@@ -1195,6 +1203,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at_reverse(1), 'a');\n     /// assert_eq!(s.char_at_reverse(2), 'b');\n@@ -1309,6 +1318,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.find_str(\"\u8001\u864e L\"), Some(6));\n@@ -1330,6 +1340,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let (c, s1) = s.slice_shift_char().unwrap();\n     ///\n@@ -1358,6 +1369,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let string = \"a\\nb\\nc\";\n     /// let lines: Vec<&str> = string.lines().collect();\n     ///\n@@ -1457,6 +1469,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(unicode, core)]\n     /// let gr1 = \"a\\u{310}e\\u{301}o\\u{308}\\u{332}\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"];\n     ///\n@@ -1479,6 +1492,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(unicode, core)]\n     /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(usize, &str)>>();\n     /// let b: &[_] = &[(0, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")];\n     ///\n@@ -1498,6 +1512,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_words)]\n     /// let some_words = \" Mary   had\\ta little  \\n\\t lamb\";\n     /// let v: Vec<&str> = some_words.words().collect();\n     ///"}, {"sha": "a61eaecd2b1ea36dcf2b892b05c0df9a6eac7f50", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -91,6 +91,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections, core)]\n     /// let s = String::from_str(\"hello\");\n     /// assert_eq!(s.as_slice(), \"hello\");\n     /// ```\n@@ -123,6 +124,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::str::Utf8Error;\n     ///\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n@@ -351,6 +353,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = String::from_str(\"hello\");\n     /// let bytes = s.into_bytes();\n     /// assert_eq!(bytes, [104, 101, 108, 108, 111]);\n@@ -366,6 +369,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// s.push_str(\"bar\");\n     /// assert_eq!(s, \"foobar\");\n@@ -442,6 +446,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// s.reserve(100);\n     /// assert!(s.capacity() >= 100);\n@@ -459,6 +464,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"abc\");\n     /// s.push('1');\n     /// s.push('2');\n@@ -494,6 +500,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = String::from_str(\"hello\");\n     /// let b: &[_] = &[104, 101, 108, 108, 111];\n     /// assert_eq!(s.as_bytes(), b);\n@@ -514,6 +521,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"hello\");\n     /// s.truncate(2);\n     /// assert_eq!(s, \"he\");\n@@ -531,6 +539,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('o'));\n@@ -568,6 +577,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// assert_eq!(s.remove(0), 'f');\n     /// assert_eq!(s.remove(1), 'o');\n@@ -630,6 +640,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"hello\");\n     /// unsafe {\n     ///     let vec = s.as_mut_vec();\n@@ -983,6 +994,7 @@ impl<'a> Deref for DerefString<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::string::as_string;\n ///\n /// fn string_consumer(s: String) {"}, {"sha": "e360c0b840ba0f1a231f6459eb19cef26e806c25", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -73,6 +73,7 @@ use borrow::{Cow, IntoCow};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// let mut vec = Vec::new();\n /// vec.push(1);\n /// vec.push(2);\n@@ -345,6 +346,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.push_all(&[1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n@@ -400,6 +402,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, [1, 2]);\n@@ -565,6 +568,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut v = vec![1, 2, 3];\n     /// assert_eq!(v.remove(1), 2);\n     /// assert_eq!(v, [1, 3]);\n@@ -696,6 +700,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n@@ -732,6 +737,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.drain() {\n     ///     // s has type String, not &String\n@@ -813,6 +819,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections, core)]\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(w.as_slice(), [3, 4, 5].as_slice());\n@@ -1015,6 +1022,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1,2,3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);\n@@ -1053,6 +1061,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -1081,6 +1090,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);\n@@ -1643,6 +1653,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// fn foo(slice: &[i32]) {}\n     ///\n     /// let vec = vec![1, 2];"}, {"sha": "af9db46f810b96b4a3fac3fcb3e97ef50f4cfb1f", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -257,6 +257,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -284,6 +285,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let buf: VecDeque<i32> = VecDeque::with_capacity(10);\n@@ -307,6 +309,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -328,6 +331,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -403,6 +407,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::with_capacity(15);\n@@ -489,6 +494,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -512,6 +518,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -535,6 +542,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -644,6 +652,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut v = VecDeque::new();\n@@ -882,6 +891,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -915,6 +925,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -948,6 +959,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1321,6 +1333,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1383,6 +1396,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1407,6 +1421,7 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "c994064d34724e8917c809c7a20f23725b5b6f66", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -34,6 +34,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::VecMap;\n ///\n /// let mut months = VecMap::new();\n@@ -134,6 +135,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// ```\n@@ -146,6 +148,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::with_capacity(10);\n     /// ```\n@@ -160,6 +163,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let map: VecMap<String> = VecMap::with_capacity(10);\n     /// assert!(map.capacity() >= 10);\n@@ -179,6 +183,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len(10);\n@@ -203,6 +208,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len_exact(10);\n@@ -242,6 +248,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -270,6 +277,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -301,6 +309,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -327,6 +336,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -362,6 +372,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -418,6 +429,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -445,6 +457,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -462,6 +475,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -479,6 +493,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -494,6 +509,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -518,6 +534,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -536,6 +553,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -564,6 +582,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -589,6 +608,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -610,6 +630,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// use std::collections::vec_map::Entry;\n     ///"}, {"sha": "365ef637a4c40a992b9a1731d50e6e2167f77a1d", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -20,6 +20,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unsafe_destructor)]\n+#![cfg_attr(test, feature(str_char))]\n \n #[macro_use] extern crate log;\n "}, {"sha": "a9c5de23d948bcbcde2650ae9833ecd172670fe7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -220,6 +220,7 @@ impl<T:Copy> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);"}, {"sha": "9ab8ab8672dfac71670014abe794beab39f3c505", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -19,7 +19,8 @@\n //! could do the following:\n //!\n //! ```\n-//! use core::num::SignedInt;\n+//! # #![feature(core)]\n+//! use std::num::SignedInt;\n //!\n //! struct FuzzyNum {\n //!     num: i32,\n@@ -398,6 +399,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(1), cmp::partial_min(1, 2));\n@@ -407,6 +409,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// When comparison is impossible:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_min(std::f64::NAN, 1.0);\n@@ -429,6 +432,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(2), cmp::partial_max(1, 2));\n@@ -438,6 +442,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// When comparison is impossible:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_max(std::f64::NAN, 1.0);"}, {"sha": "d7b4c9411fb4efc0bfbd9f715dc5ab7cb2df5356", "filename": "src/libcore/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -48,6 +48,7 @@\n //! For example,\n //!\n //! ```\n+//! # #![feature(os, old_io, old_path)]\n //! use std::error::FromError;\n //! use std::old_io::{File, IoError};\n //! use std::os::{MemoryMap, MapError};"}, {"sha": "93a7d2bb17b92237a305a8b5ac033060b51a12b1", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -19,6 +19,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(core)]\n //! # #![feature(unboxed_closures)]\n //!\n //! use std::finally::Finally;\n@@ -70,6 +71,7 @@ impl<T, F> Finally<T> for F where F: FnMut() -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::finally::try_finally;\n ///\n /// struct State<'a> { buffer: &'a mut [u8], len: usize }"}, {"sha": "cf427c16588d9add3682c30ff51449be8380151f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -624,6 +624,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo {\n@@ -655,6 +656,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(i32, String);\n@@ -683,6 +685,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<i32>);\n@@ -712,6 +715,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<(String, i32)>);"}, {"sha": "49da99b97cb206571b768a1e88e94b6ae86a6d1e", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -146,6 +146,7 @@ pub struct RadixFmt<T, R>(T, R);\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```"}, {"sha": "3c5810fdf804dcaf2caef0422f3a07e806505c18", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -16,6 +16,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(hash)]\n //! use std::hash::{hash, Hash, SipHasher};\n //!\n //! #[derive(Hash)]\n@@ -35,6 +36,7 @@\n //! the trait `Hash`:\n //!\n //! ```rust\n+//! # #![feature(hash)]\n //! use std::hash::{hash, Hash, Hasher, SipHasher};\n //!\n //! struct Person {"}, {"sha": "9873ba476acf0fe0cb95d20950d8e7edd1b982f4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -262,6 +262,7 @@ extern \"rust-intrinsic\" {\n     /// A safe swap function:\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::mem;\n     /// use std::ptr;\n     ///\n@@ -301,6 +302,7 @@ extern \"rust-intrinsic\" {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::ptr;\n     ///\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: uint) -> Vec<T> {"}, {"sha": "5f5b8ef73ef54edf1702e92c64369b5e318a38d6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -334,6 +334,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let xs = [100, 200, 300];\n     /// let mut it = xs.iter().cloned().peekable();\n     /// assert_eq!(*it.peek().unwrap(), 100);\n@@ -465,6 +466,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let xs = [2, 3];\n     /// let ys = [0, 1, 0, 1, 2];\n     /// let it = xs.iter().flat_map(|&x| std::iter::count(0, 1).take(x));\n@@ -521,6 +523,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n@@ -563,6 +566,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let b: Vec<_> = a.iter().cloned().collect();\n     /// assert_eq!(a, b);\n@@ -579,6 +583,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// do not.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let vec = vec![1, 2, 3, 4];\n     /// let (even, odd): (Vec<_>, Vec<_>) = vec.into_iter().partition(|&n| n % 2 == 0);\n     /// assert_eq!(even, [2, 4]);\n@@ -648,6 +653,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.any(|x| *x == 3));\n@@ -668,6 +674,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.find(|&x| *x == 3).unwrap(), &3);\n@@ -690,6 +697,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.position(|x| *x == 3).unwrap(), 2);\n@@ -718,6 +726,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 2, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.rposition(|x| *x == 2).unwrap(), 2);\n@@ -795,6 +804,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n     /// let a: [i32; 0] = [];\n@@ -860,7 +870,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::num::SignedInt;\n+    /// # #![feature(core)]\n+    /// use std::num::SignedInt;\n     ///\n     /// let a = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n@@ -890,7 +901,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::num::SignedInt;\n+    /// # #![feature(core)]\n+    /// use std::num::SignedInt;\n     ///\n     /// let a = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n@@ -940,6 +952,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [(1, 2), (3, 4)];\n     /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n     /// assert_eq!([1, 3], left);\n@@ -1146,6 +1159,7 @@ pub trait AdditiveIterator<A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1, 2, 3, 4, 5];\n@@ -1188,6 +1202,7 @@ pub trait MultiplicativeIterator<A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::{count, MultiplicativeIterator};\n     ///\n     /// fn factorial(n: usize) -> usize {\n@@ -1248,6 +1263,7 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<i32> = NoElements;\n@@ -2292,6 +2308,7 @@ impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n /// An iterator that yields sequential Fibonacci numbers, and stops on overflow.\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::iter::Unfold;\n /// use std::num::Int; // For `.checked_add()`\n ///\n@@ -2693,6 +2710,7 @@ pub struct RangeStepInclusive<A> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::iter::range_step_inclusive;\n ///\n /// for i in range_step_inclusive(0, 10, 2) {"}, {"sha": "a2b13584270940317f8935b3a7674d5e4d841b22", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -56,6 +56,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(no_std)]\n #![no_std]"}, {"sha": "40e32f4171a2d509900ccc4f685374710dfbef1f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -231,6 +231,7 @@ macro_rules! writeln {\n /// Iterators:\n ///\n /// ```\n+/// # #![feature(core)]\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in std::iter::count(0, 1) {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "a2e7b717772c94a0f902c1df473d0155d73411c5", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -323,6 +323,7 @@ impl<T:?Sized> MarkerTrait for T { }\n /// `MarkerTrait`:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::marker::MarkerTrait;\n /// trait Even : MarkerTrait { }\n /// ```"}, {"sha": "d211b0f9928cd2db17e276f8c72611462ff97b5e", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -282,7 +282,8 @@ impl Float for f32 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```\n-    /// use core::num::Float;\n+    /// # #![feature(core)]\n+    /// use std::num::Float;\n     ///\n     /// let x = 1.65f32;\n     /// assert!(x == x.trunc() + x.fract())"}, {"sha": "1421fdd72f2335c09855183f991cedc228d9b754", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -289,7 +289,8 @@ impl Float for f64 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```\n-    /// use core::num::Float;\n+    /// # #![feature(core)]\n+    /// use std::num::Float;\n     ///\n     /// let x = 1.65f64;\n     /// assert!(x == x.trunc() + x.fract())"}, {"sha": "9ca7b48fbe5ef05b9a125ea7323266ce44cb0b4d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -85,6 +85,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -100,6 +101,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -119,6 +121,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -135,6 +138,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -151,6 +155,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -168,6 +173,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -392,6 +398,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// assert_eq!(2.pow(4), 16);\n@@ -787,6 +794,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -803,6 +811,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -822,6 +831,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -841,6 +851,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -860,6 +871,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -881,6 +893,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1112,6 +1125,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// assert_eq!(2.pow(4), 16);\n@@ -1277,6 +1291,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -1295,6 +1310,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -1314,6 +1330,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -1333,6 +1350,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -1352,6 +1370,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1375,6 +1394,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1606,6 +1626,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// assert_eq!(2.pow(4), 16);\n@@ -2266,6 +2287,7 @@ impl_from_primitive! { f64, to_f64 }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::num;\n ///\n /// let twenty: f32 = num::cast(0x14).unwrap();"}, {"sha": "a565b137cc852a5f84cd33885f87f0a954cd3e13", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -276,6 +276,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();\n@@ -471,6 +472,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or(0), Ok(\"foo\"));\n     ///\n@@ -492,6 +494,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));\n     ///\n@@ -533,6 +536,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x = Some(4);\n     /// match x.iter_mut().next() {\n     ///     Some(&mut ref mut v) => *v = 42,"}, {"sha": "c05dffb369682df4cbb69939f6a39faefe0fece3", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -52,6 +52,7 @@\n //! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n+//! # #![feature(alloc)]\n //! use std::boxed;\n //!\n //! unsafe {\n@@ -70,6 +71,7 @@\n //! ## 3. Get it from C.\n //!\n //! ```\n+//! # #![feature(libc)]\n //! extern crate libc;\n //!\n //! use std::mem;"}, {"sha": "8502a9c53c4a88cc4a0b24fd3dc0d98e08eeca35", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -48,6 +48,7 @@ use mem;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::raw::{self, Repr};\n ///\n /// let slice: &[u16] = &[1, 2, 3, 4];\n@@ -106,6 +107,7 @@ pub struct Closure {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::mem;\n /// use std::raw;\n ///"}, {"sha": "62e1bcd827ae7ccbac2b0a2c20965d84aa0f94d8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -95,6 +95,7 @@\n //! by the [`Writer`](../io/trait.Writer.html) trait:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! use std::old_io::IoError;\n //!\n //! trait Writer {\n@@ -110,6 +111,7 @@\n //! something like this:\n //!\n //! ```{.ignore}\n+//! # #![feature(old_io)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -129,6 +131,7 @@\n //! a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -140,6 +143,7 @@\n //! You might also simply assert success:\n //!\n //! ```{.no_run}\n+//! # #![feature(old_io, old_path)]\n //! # use std::old_io::*;\n //! # use std::old_path::Path;\n //!\n@@ -151,6 +155,7 @@\n //! Or propagate the error up the call stack with `try!`:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! # use std::old_io::*;\n //! # use std::old_path::Path;\n //! fn write_message() -> Result<(), IoError> {\n@@ -171,6 +176,7 @@\n //! It replaces this:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -196,6 +202,7 @@\n //! With this:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -426,6 +433,7 @@ impl<T, E> Result<T, E> {\n     /// Convert from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();\n@@ -467,6 +475,7 @@ impl<T, E> Result<T, E> {\n     /// ignoring I/O and parse errors:\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut buffer: &[u8] = b\"1\\n2\\n3\\n4\\n\";"}, {"sha": "21cff3021abea400af1831356fe2644b384e1bf0", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -19,7 +19,7 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//!\n+//! # #![feature(core)]\n //! fn main() {\n //!     use std::simd::f32x4;\n //!     let a = f32x4(40.0, 41.0, 42.0, 43.0);"}, {"sha": "fce29abed7300c161c416be5f78b8f379cb92594", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -1697,6 +1697,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n /// # Examples\n ///\n /// ```\n+/// #![feature(core)]\n /// use std::slice;\n ///\n /// // manifest a slice out of thin air!"}, {"sha": "33f9b63bc4907d006439c5a77f5d61a6ee8ea788", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -24,6 +24,8 @@\n #![feature(io)]\n #![feature(collections)]\n #![feature(debug_builders)]\n+#![feature(unique)]\n+#![feature(step_by)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}, {"sha": "63d1fe968fe1b6a0a3aa4c53a0b78f287e1d1d1e", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -28,6 +28,7 @@\n #![feature(libc)]\n #![feature(staged_api)]\n #![feature(unique)]\n+#![cfg_attr(test, feature(rustc_private, rand, collections))]\n \n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "9a6e77af28e75ea6af2ccb7dcf085a758a5832b1", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -47,6 +47,7 @@\n //! which is cyclic.\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -148,6 +149,7 @@\n //! entity `&sube`).\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -205,6 +207,7 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;"}, {"sha": "0043f574cc90dbb237738ae33e725c0f6c3d44eb", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -5125,7 +5125,7 @@ pub mod funcs {\n                 ///\n                 /// # Examples\n                 ///\n-                /// ```no_run\n+                /// ```no_run,ignore\n                 /// extern crate libc;\n                 ///\n                 /// fn main() {"}, {"sha": "0c5f5cb0d444ee44962375c1b6a8818dde76b294", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -60,6 +60,7 @@ impl Rand for Exp1 {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Exp, IndependentSample};\n ///"}, {"sha": "d04e83e84f7289e1a8cecbec01d1048bb1503b06", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -40,6 +40,7 @@ use super::{IndependentSample, Sample, Exp};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{IndependentSample, Gamma};\n ///\n@@ -187,6 +188,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{ChiSquared, IndependentSample};\n ///\n@@ -244,6 +246,7 @@ impl IndependentSample<f64> for ChiSquared {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{FisherF, IndependentSample};\n ///\n@@ -288,6 +291,7 @@ impl IndependentSample<f64> for FisherF {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{StudentT, IndependentSample};\n ///"}, {"sha": "5cafb8d2e5eae2ab6f61339c9f4f2c42536d75d8", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -94,6 +94,7 @@ pub struct Weighted<T> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///"}, {"sha": "7cecc6ac611e2af1e6b587b03b2adaa228974f0b", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -76,6 +76,7 @@ impl Rand for StandardNormal {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Normal, IndependentSample};\n ///\n@@ -124,6 +125,7 @@ impl IndependentSample<f64> for Normal {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{LogNormal, IndependentSample};\n ///"}, {"sha": "e6f27a28ffa7ca118d7d6595c33afe8ae54b5b51", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -36,6 +36,7 @@ use distributions::{Sample, IndependentSample};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {"}, {"sha": "9f6399ff12dd659f792aa448eb1cb377456d06ca", "filename": "src/librand/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -34,7 +34,7 @@\n #![deprecated(reason = \"use the crates.io `rand` library instead\",\n               since = \"1.0.0-alpha\")]\n \n-#![cfg_attr(test, feature(test, rand))]\n+#![cfg_attr(test, feature(test, rand, rustc_private))]\n \n #![allow(deprecated)]\n \n@@ -149,6 +149,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand, core)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut v = [0; 13579];\n@@ -184,6 +185,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -202,6 +204,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -229,6 +232,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -247,6 +251,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -261,6 +266,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let s: String = thread_rng().gen_ascii_chars().take(10).collect();\n@@ -277,6 +283,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let choices = [1, 2, 4, 8, 16, 32];\n@@ -297,6 +304,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand, core)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -360,6 +368,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -375,6 +384,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -480,6 +490,7 @@ impl Rand for XorShiftRng {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{random, Open01};\n ///\n /// let Open01(val) = random::<Open01<f32>>();\n@@ -497,6 +508,7 @@ pub struct Open01<F>(pub F);\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{random, Closed01};\n ///\n /// let Closed01(val) = random::<Closed01<f32>>();"}, {"sha": "95dd986d2e3c7be0556708349b6b55f3411ccdf5", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -103,6 +103,7 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{Rng, SeedableRng, StdRng};\n /// use std::rand::reseeding::{Reseeder, ReseedingRng};\n ///"}, {"sha": "9688447dc046a50f3f3996333d98c82354d20442", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -212,7 +212,7 @@ impl LintStore {\n     fn maybe_stage_features(&mut self, sess: &Session) {\n         let lvl = match sess.opts.unstable_features {\n             UnstableFeatures::Default => return,\n-            UnstableFeatures::Disallow => Warn,\n+            UnstableFeatures::Disallow => Forbid,\n             UnstableFeatures::Cheat => Allow\n         };\n         match self.by_name.get(\"unstable_features\") {"}, {"sha": "7043b2613605d4b9ddf16bbab1d2d0550c9b454a", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -26,7 +26,7 @@ use syntax::ast::{Item, Generics, StructField};\n use syntax::ast_util::is_local;\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, Visitor};\n-use syntax::feature_gate::emit_feature_warn;\n+use syntax::feature_gate::emit_feature_err;\n use util::nodemap::{NodeMap, DefIdMap, FnvHashSet, FnvHashMap};\n use util::ppaux::Repr;\n \n@@ -237,7 +237,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n \n-                    emit_feature_warn(&self.tcx.sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n                                       &feature, span, &msg);\n                 }\n             }"}, {"sha": "b2e12a91ec86463781f3385164b39971bed45329", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -50,6 +50,7 @@\n #![feature(path_relative_from)]\n #![feature(step_by)]\n #![feature(convert)]\n+#![cfg_attr(test, feature(test, rand))]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "93a2a5d125778eeab36329aa661ec2dec366a926", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -18,6 +18,7 @@\n #![feature(no_std)]\n #![no_std]\n #![unstable(feature = \"rustc_private\")]\n+#![cfg_attr(test, feature(hash))]\n \n //! A typesafe bitmask flag generator.\n \n@@ -32,6 +33,7 @@\n /// # Examples\n ///\n /// ```{.rust}\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// bitflags! {\n@@ -58,6 +60,7 @@\n /// The generated `struct`s can also be extended with type and trait implementations:\n ///\n /// ```{.rust}\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// use std::fmt;"}, {"sha": "cdd8457687ac60d1b6cf9866303cb34083453d44", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -230,7 +230,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                         stripped_filtered_line(l).unwrap_or(l)\n                     }).collect::<Vec<&str>>().connect(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false, false);\n+                    let test = test::maketest(&test, krate, false, false, true);\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n                 s.push_str(&highlight::highlight(&text,"}, {"sha": "9f1d876432c389c55cdf55e6c8d18f1fb25dfda5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -52,6 +52,7 @@ extern crate rustc_back;\n extern crate serialize;\n extern crate syntax;\n extern crate \"test\" as testing;\n+extern crate unicode;\n #[macro_use] extern crate log;\n \n extern crate \"serialize\" as rustc_serialize; // used by deriving"}, {"sha": "f3d7ae19f4d3c1f978000636c5bf765381698e6e", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -143,7 +143,7 @@ pub fn test(input: &str, libs: SearchPaths, externs: core::Externs,\n             mut test_args: Vec<String>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_string(), libs, externs, true);\n+    let mut collector = Collector::new(input.to_string(), libs, externs, true, false);\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "7b37a5a9d1c8167e6fd19f3f60aa1222b291cc47", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 81, "deletions": 10, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -76,6 +76,8 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n+    let inject_crate = should_inject_crate(&krate);\n+\n     let ctx = core::DocContext {\n         krate: &krate,\n         maybe_typed: core::NotTyped(sess),\n@@ -100,7 +102,8 @@ pub fn run(input: &str,\n     let mut collector = Collector::new(krate.name.to_string(),\n                                        libs,\n                                        externs,\n-                                       false);\n+                                       false,\n+                                       inject_crate);\n     collector.fold_crate(krate);\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -110,13 +113,42 @@ pub fn run(input: &str,\n     0\n }\n \n+// Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n+fn should_inject_crate(krate: &::syntax::ast::Crate) -> bool {\n+    use syntax::attr::AttrMetaMethods;\n+\n+    let mut inject_crate = true;\n+\n+    for attr in &krate.attrs {\n+        if attr.check_name(\"doc\") {\n+            for list in attr.meta_item_list().into_iter() {\n+                for attr in list {\n+                    if attr.check_name(\"test\") {\n+                        for list in attr.meta_item_list().into_iter() {\n+                            for attr in list {\n+                                if attr.check_name(\"no_crate_inject\") {\n+                                    inject_crate = false;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return inject_crate;\n+}\n+\n #[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n-           should_panic: bool, no_run: bool, as_test_harness: bool) {\n+           should_panic: bool, no_run: bool, as_test_harness: bool,\n+           inject_crate: bool) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), true, as_test_harness);\n+    let test = maketest(test, Some(cratename), true, as_test_harness,\n+                        inject_crate);\n     let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n@@ -218,8 +250,16 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main: bool) -> String {\n+pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n+                dont_insert_main: bool, inject_crate: bool) -> String {\n+    let (crate_attrs, everything_else) = partition_source(s);\n+\n     let mut prog = String::new();\n+\n+    // First push any outer attributes from the example, assuming they\n+    // are intended to be crate attributes.\n+    prog.push_str(&crate_attrs);\n+\n     if lints {\n         prog.push_str(r\"\n #![allow(unused_variables, unused_assignments, unused_mut, unused_attributes, dead_code)]\n@@ -228,7 +268,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !s.contains(\"extern crate\") && cratename != Some(\"std\") {\n+    if !s.contains(\"extern crate\") && inject_crate {\n         match cratename {\n             Some(cratename) => {\n                 if s.contains(cratename) {\n@@ -240,16 +280,42 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n         }\n     }\n     if dont_insert_main || s.contains(\"fn main\") {\n-        prog.push_str(s);\n+        prog.push_str(&everything_else);\n     } else {\n         prog.push_str(\"fn main() {\\n    \");\n-        prog.push_str(&s.replace(\"\\n\", \"\\n    \"));\n+        prog.push_str(&everything_else.replace(\"\\n\", \"\\n    \"));\n         prog.push_str(\"\\n}\");\n     }\n \n+    info!(\"final test program: {}\", prog);\n+\n     return prog\n }\n \n+fn partition_source(s: &str) -> (String, String) {\n+    use unicode::str::UnicodeStr;\n+\n+    let mut after_header = false;\n+    let mut before = String::new();\n+    let mut after = String::new();\n+\n+    for line in s.lines() {\n+        let trimline = line.trim();\n+        let header = trimline.is_whitespace() ||\n+            trimline.starts_with(\"#![feature\");\n+        if !header || after_header {\n+            after_header = true;\n+            after.push_str(line);\n+            after.push_str(\"\\n\");\n+        } else {\n+            before.push_str(line);\n+            before.push_str(\"\\n\");\n+        }\n+    }\n+\n+    return (before, after);\n+}\n+\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     names: Vec<String>,\n@@ -259,11 +325,12 @@ pub struct Collector {\n     use_headers: bool,\n     current_header: Option<String>,\n     cratename: String,\n+    inject_crate: bool\n }\n \n impl Collector {\n     pub fn new(cratename: String, libs: SearchPaths, externs: core::Externs,\n-               use_headers: bool) -> Collector {\n+               use_headers: bool, inject_crate: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -273,11 +340,13 @@ impl Collector {\n             use_headers: use_headers,\n             current_header: None,\n             cratename: cratename,\n+            inject_crate: inject_crate\n         }\n     }\n \n     pub fn add_test(&mut self, test: String,\n-                    should_panic: bool, no_run: bool, should_ignore: bool, as_test_harness: bool) {\n+                    should_panic: bool, no_run: bool, should_ignore: bool,\n+                    as_test_harness: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -288,6 +357,7 @@ impl Collector {\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n+        let inject_crate = self.inject_crate;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -302,7 +372,8 @@ impl Collector {\n                         externs,\n                         should_panic,\n                         no_run,\n-                        as_test_harness);\n+                        as_test_harness,\n+                        inject_crate);\n             }))\n         });\n     }"}, {"sha": "e42aa1835dc4466e46e6429eaa292b801267bd54", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -32,6 +32,7 @@ impl ToHex for [u8] {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rustc_private)]\n     /// extern crate serialize;\n     /// use serialize::hex::ToHex;\n     ///\n@@ -101,6 +102,7 @@ impl FromHex for str {\n     /// This converts a string literal to hexadecimal and back.\n     ///\n     /// ```\n+    /// # #![feature(rustc_private)]\n     /// extern crate serialize;\n     /// use serialize::hex::{FromHex, ToHex};\n     ///"}, {"sha": "482e0d1d0eed3739d1bedc6d018d6bd102e9673f", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,7 +38,7 @@ Core encoding and decoding interfaces.\n #![feature(unicode)]\n #![feature(str_char)]\n #![feature(convert)]\n-#![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(test, old_io))]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "f9558b85825d2ee03ebacde2850aa347441a4d3e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -538,6 +538,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -566,6 +567,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -981,6 +983,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();"}, {"sha": "0933b4f662a9d744fbec130c491ea1d842e3d944", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -145,6 +145,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -169,6 +170,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -295,6 +297,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -325,6 +328,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -351,6 +355,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -376,6 +381,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -458,6 +464,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -477,6 +484,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -498,6 +506,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -519,6 +528,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sub: HashSet<_> = [1, 2].iter().cloned().collect();"}, {"sha": "8d24f6b191659f622aa6379aa4dc968ed8a2e499", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -300,6 +300,7 @@\n //! #### Counting the number of times each character in a string occurs\n //!\n //! ```\n+//! # #![feature(collections)]\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! let mut count = BTreeMap::new();\n@@ -327,6 +328,7 @@\n //! #### Tracking the inebriation of customers at a bar\n //!\n //! ```\n+//! # #![feature(collections)]\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! // A client of the bar. They have an id and a blood alcohol level."}, {"sha": "8b19d16017280ccce55b6458778101f02c5a81c2", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -45,6 +45,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// # extern crate libc;\n /// # fn main() {\n /// use std::ffi::CString;\n@@ -83,6 +84,7 @@ pub struct CString {\n /// Inspecting a foreign C string\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// extern crate libc;\n /// use std::ffi::CStr;\n ///\n@@ -99,6 +101,7 @@ pub struct CString {\n /// Passing a Rust-originating C string\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// extern crate libc;\n /// use std::ffi::{CString, CStr};\n ///\n@@ -147,6 +150,7 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// extern crate libc;\n     /// use std::ffi::CString;\n     ///\n@@ -182,6 +186,7 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// extern crate libc;\n     /// use std::ffi::CString;\n     ///\n@@ -332,6 +337,7 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// # extern crate libc;\n     /// # fn main() {\n     /// use std::ffi::CStr;"}, {"sha": "4f6085ef379621ea8da94663c08eac73fbecba02", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -633,6 +633,7 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(path_ext)]\n /// use std::io;\n /// use std::fs::{self, PathExt, DirEntry};\n /// use std::path::Path;\n@@ -771,6 +772,7 @@ pub fn set_file_times<P: AsRef<Path>>(path: P, accessed: u64,\n /// # Examples\n ///\n /// ```\n+/// # #![feature(fs)]\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///"}, {"sha": "f44256125cd30c9fe081866465cb3d2a320c5cbb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -105,6 +105,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]\n@@ -130,7 +131,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(str_char)]\n #![feature(into_cow)]\n-#![cfg_attr(test, feature(test, rustc_private))]\n+#![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std.\n #![feature(no_std)]"}, {"sha": "1681ed4282f48c9e2fa767e1868ab82674084aea", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -111,6 +111,7 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::thread;\n /// use std::sync::mpsc;\n ///"}, {"sha": "e8187dc2c402720453e8083195224bb6f4010d25", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -263,6 +263,7 @@ impl hash::Hash for SocketAddrV6 {\n /// Some examples:\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n ///\n /// fn main() {"}, {"sha": "48b3247f2127abd143646e0243add745cb9129bd", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -91,6 +91,7 @@ impl Iterator for LookupHost {\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "869faa795f9c3fb1c0cd506578ac26cc67360bb4", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -27,6 +27,7 @@ use sys_common::AsInner;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::io::prelude::*;\n /// use std::net::TcpStream;\n ///\n@@ -46,6 +47,7 @@ pub struct TcpStream(net_imp::TcpStream);\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::{TcpListener, TcpStream};\n /// use std::thread;\n ///"}, {"sha": "e593bbe8e489b526e67eb1e94da25dd25c9d378d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -27,6 +27,7 @@ use sys_common::AsInner;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::UdpSocket;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "a4f06f14d49df4d77a0a5de8f190d2d5928281c9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -365,6 +365,7 @@ impl f32 {\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -379,6 +380,7 @@ impl f32 {\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -396,6 +398,7 @@ impl f32 {\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -413,6 +416,7 @@ impl f32 {\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -431,6 +435,7 @@ impl f32 {\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -449,6 +454,7 @@ impl f32 {\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -525,6 +531,7 @@ impl f32 {\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -548,6 +555,7 @@ impl f32 {\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -563,6 +571,7 @@ impl f32 {\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -580,6 +589,7 @@ impl f32 {\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -601,6 +611,7 @@ impl f32 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -623,6 +634,7 @@ impl f32 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -650,6 +662,7 @@ impl f32 {\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -668,6 +681,7 @@ impl f32 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -770,6 +784,7 @@ impl f32 {\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -795,6 +810,7 @@ impl f32 {\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -856,6 +872,7 @@ impl f32 {\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -875,6 +892,7 @@ impl f32 {\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -922,6 +940,7 @@ impl f32 {\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -940,6 +959,7 @@ impl f32 {\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -1061,6 +1081,7 @@ impl f32 {\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1077,6 +1098,7 @@ impl f32 {\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1093,6 +1115,7 @@ impl f32 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -1114,6 +1137,7 @@ impl f32 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -1141,6 +1165,7 @@ impl f32 {\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -1194,6 +1219,7 @@ impl f32 {\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -1214,6 +1240,7 @@ impl f32 {\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -1233,6 +1260,7 @@ impl f32 {\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -1253,6 +1281,7 @@ impl f32 {\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1271,6 +1300,7 @@ impl f32 {\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1289,6 +1319,7 @@ impl f32 {\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1308,6 +1339,7 @@ impl f32 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1329,6 +1361,7 @@ impl f32 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1372,6 +1405,7 @@ impl f32 {\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1401,6 +1435,7 @@ impl f32 {\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1423,6 +1458,7 @@ impl f32 {\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -1442,6 +1478,7 @@ impl f32 {\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1461,6 +1498,7 @@ impl f32 {\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1483,6 +1521,7 @@ impl f32 {\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1505,6 +1544,7 @@ impl f32 {\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1527,6 +1567,7 @@ impl f32 {\n     /// Inverse hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0;\n@@ -1548,6 +1589,7 @@ impl f32 {\n     /// Inverse hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0;\n@@ -1569,6 +1611,7 @@ impl f32 {\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "9306804d1f787aa34f8345fd5595ffa4da96bf7f", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -374,6 +374,7 @@ impl f64 {\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -388,6 +389,7 @@ impl f64 {\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -405,6 +407,7 @@ impl f64 {\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -422,6 +425,7 @@ impl f64 {\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -440,6 +444,7 @@ impl f64 {\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -458,6 +463,7 @@ impl f64 {\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -534,6 +540,7 @@ impl f64 {\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -557,6 +564,7 @@ impl f64 {\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -572,6 +580,7 @@ impl f64 {\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -589,6 +598,7 @@ impl f64 {\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -610,6 +620,7 @@ impl f64 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -632,6 +643,7 @@ impl f64 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -659,6 +671,7 @@ impl f64 {\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -677,6 +690,7 @@ impl f64 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -779,6 +793,7 @@ impl f64 {\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -804,6 +819,7 @@ impl f64 {\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -865,6 +881,7 @@ impl f64 {\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -884,6 +901,7 @@ impl f64 {\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -931,6 +949,7 @@ impl f64 {\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -948,6 +967,7 @@ impl f64 {\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -1069,6 +1089,7 @@ impl f64 {\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1085,6 +1106,7 @@ impl f64 {\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1101,6 +1123,7 @@ impl f64 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -1122,6 +1145,7 @@ impl f64 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -1149,6 +1173,7 @@ impl f64 {\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -1202,6 +1227,7 @@ impl f64 {\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -1222,6 +1248,7 @@ impl f64 {\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -1241,6 +1268,7 @@ impl f64 {\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -1261,6 +1289,7 @@ impl f64 {\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1279,6 +1308,7 @@ impl f64 {\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1297,6 +1327,7 @@ impl f64 {\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1316,6 +1347,7 @@ impl f64 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1337,6 +1369,7 @@ impl f64 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1380,6 +1413,7 @@ impl f64 {\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1409,6 +1443,7 @@ impl f64 {\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1431,6 +1466,7 @@ impl f64 {\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -1450,6 +1486,7 @@ impl f64 {\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1469,6 +1506,7 @@ impl f64 {\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1491,6 +1529,7 @@ impl f64 {\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1513,6 +1552,7 @@ impl f64 {\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1577,6 +1617,7 @@ impl f64 {\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "b9e9433e3ee5addbd0ae3765286e817eb1bc7ba9", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -55,6 +55,7 @@ pub trait Float\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -67,6 +68,7 @@ pub trait Float\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -82,6 +84,7 @@ pub trait Float\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -97,6 +100,7 @@ pub trait Float\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -113,6 +117,7 @@ pub trait Float\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -129,6 +134,7 @@ pub trait Float\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -182,6 +188,7 @@ pub trait Float\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -199,6 +206,7 @@ pub trait Float\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -211,6 +219,7 @@ pub trait Float\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -226,6 +235,7 @@ pub trait Float\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -245,6 +255,7 @@ pub trait Float\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -265,6 +276,7 @@ pub trait Float\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -291,6 +303,7 @@ pub trait Float\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -308,6 +321,7 @@ pub trait Float\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -399,6 +413,7 @@ pub trait Float\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -422,6 +437,7 @@ pub trait Float\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -478,6 +494,7 @@ pub trait Float\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -495,6 +512,7 @@ pub trait Float\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -537,6 +555,7 @@ pub trait Float\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -553,6 +572,7 @@ pub trait Float\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -662,6 +682,7 @@ pub trait Float\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -676,6 +697,7 @@ pub trait Float\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -690,6 +712,7 @@ pub trait Float\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -707,6 +730,7 @@ pub trait Float\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -726,6 +750,7 @@ pub trait Float\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -769,6 +794,7 @@ pub trait Float\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -785,6 +811,7 @@ pub trait Float\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -800,6 +827,7 @@ pub trait Float\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -817,6 +845,7 @@ pub trait Float\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -831,6 +860,7 @@ pub trait Float\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -845,6 +875,7 @@ pub trait Float\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -860,6 +891,7 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -877,6 +909,7 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -912,6 +945,7 @@ pub trait Float\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -937,6 +971,7 @@ pub trait Float\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -956,6 +991,7 @@ pub trait Float\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -971,6 +1007,7 @@ pub trait Float\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -987,6 +1024,7 @@ pub trait Float\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1005,6 +1043,7 @@ pub trait Float\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1023,6 +1062,7 @@ pub trait Float\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1069,6 +1109,7 @@ pub trait Float\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "cb67d709a143ab6d289a8750ef65768cb28e302f", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -33,6 +33,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -137,6 +138,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -324,6 +326,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;"}, {"sha": "cd8252540dacce9eaa1ccc4445856479e4e27b45", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -23,6 +23,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::sync::mpsc::channel;\n /// use std::old_io::*;\n ///\n@@ -114,6 +115,7 @@ impl Reader for ChanReader {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::sync::mpsc::channel;\n /// use std::old_io::*;"}, {"sha": "40a7cce81dd01ebb8b85c7e481f30d0848612084", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -30,6 +30,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(old_io, io, old_path)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io::fs::PathExtensions;\n //! use std::old_io::*;\n@@ -105,6 +106,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```rust,should_fail\n+    /// # #![feature(old_io, old_path)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n     ///\n@@ -177,6 +179,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n     ///\n@@ -197,6 +200,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path, io)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n@@ -289,6 +293,7 @@ impl File {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -321,6 +326,7 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -364,6 +370,7 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -393,6 +400,7 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -444,6 +452,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::*;\n@@ -516,6 +525,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path, old_fs)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::*;\n@@ -541,6 +551,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -566,6 +577,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_io;\n /// use std::old_io::*;"}, {"sha": "d877a60b079d7f6c8b8e1f2986c6055ea1d22f67", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -54,6 +54,7 @@ impl Writer for Vec<u8> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -114,6 +115,7 @@ impl Writer for MemWriter {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -244,6 +246,7 @@ impl<'a> Buffer for &'a [u8] {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -316,6 +319,7 @@ impl<'a> Seek for BufWriter<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///"}, {"sha": "ac908c529dca661b0a6c2b70e59932919ff663ba", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -48,6 +48,7 @@\n //! * Read lines from stdin\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io as io;\n //!     use std::old_io::*;\n //!\n@@ -60,6 +61,7 @@\n //! * Read a complete file\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -69,6 +71,7 @@\n //! * Write a line to a file\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     # #![allow(unused_must_use)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n@@ -82,6 +85,7 @@\n //! * Iterate over the lines of a file\n //!\n //!     ```rust,no_run\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -95,6 +99,7 @@\n //! * Pull the lines of a file into a vector of strings\n //!\n //!     ```rust,no_run\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -106,6 +111,7 @@\n //! * Make a simple TCP client connection and request\n //!\n //!     ```rust\n+//!     # #![feature(old_io)]\n //!     # #![allow(unused_must_use)]\n //!     use std::old_io::*;\n //!\n@@ -122,6 +128,7 @@\n //! * Make a simple TCP server\n //!\n //!     ```rust\n+//!     # #![feature(old_io)]\n //!     # fn main() { }\n //!     # fn foo() {\n //!     # #![allow(dead_code)]\n@@ -186,6 +193,7 @@\n //! If you wanted to handle the error though you might write:\n //!\n //! ```rust\n+//! # #![feature(old_io, old_path)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n@@ -221,6 +229,7 @@\n //! If you wanted to read several `u32`s from a file and return their product:\n //!\n //! ```rust\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -948,6 +957,7 @@ unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io as io;\n /// use std::old_io::*;\n /// use std::old_io::util::LimitReader;\n@@ -1282,6 +1292,7 @@ impl<'a> Writer for &'a mut (Writer+'a) {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io::util::TeeReader;\n /// use std::old_io::*;\n ///\n@@ -1407,6 +1418,7 @@ pub trait Buffer: Reader {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut reader = BufReader::new(b\"hello\\nworld\");\n@@ -1631,6 +1643,7 @@ impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io as io;\n ///\n /// let eof = io::standard_error(io::EndOfFile);\n@@ -1719,6 +1732,7 @@ pub enum FileType {\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, old_path)]\n ///\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_path::Path;"}, {"sha": "f7953ac51b8e63e74146211226cb64399b8e7477", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -414,6 +414,7 @@ pub struct ParseError;\n /// Some examples:\n ///\n /// ```rust,no_run\n+/// # #![feature(old_io, core)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::{TcpStream, TcpListener};"}, {"sha": "f9e5ae71e12e5b737e7d92a62b3c17ba70e7077d", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -54,6 +54,7 @@ impl UnixStream {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path, io)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::net::pipe::UnixStream;\n     /// use std::old_io::*;\n@@ -181,6 +182,7 @@ impl UnixListener {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, io, old_path)]\n     /// # fn foo() {\n     /// use std::old_io::net::pipe::UnixListener;\n     /// use std::old_io::*;"}, {"sha": "75f786f0bb1e4d7271f4d5d312adabbecb116f58", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -41,6 +41,7 @@ use sys_common;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, io)]\n /// use std::old_io::*;\n ///\n /// {\n@@ -133,6 +134,7 @@ impl TcpStream {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, std_misc)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::*;\n     /// use std::time::Duration;\n@@ -278,6 +280,7 @@ impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # fn foo() {\n /// use std::old_io::*;\n /// use std::thread;\n@@ -374,6 +377,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut a = TcpListener::bind(\"127.0.0.1:8482\").listen().unwrap();\n@@ -417,6 +421,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::*;\n     /// use std::thread;\n     ///"}, {"sha": "3aa811974b3aa965364da836c355e9a5694a9516", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -31,6 +31,7 @@ use sys_common;\n /// # Examples\n ///\n /// ```rust,no_run\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::net::udp::UdpSocket;"}, {"sha": "0b555e2f0ff7e9c5eed72f11e3f135cc6c71070e", "filename": "src/libstd/old_io/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fpipe.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -46,6 +46,7 @@ impl PipeStream {\n     /// # Examples\n     ///\n     /// ```{rust,no_run}\n+    /// # #![feature(old_io, libc, io)]\n     /// # #![allow(unused_must_use)]\n     /// extern crate libc;\n     ///"}, {"sha": "d7ede451fb8b79460b3916374ac59b4de9aad267", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -61,6 +61,7 @@ use thread;\n /// # Examples\n ///\n /// ```should_fail\n+/// # #![feature(old_io)]\n /// use std::old_io::*;\n ///\n /// let mut child = match Command::new(\"/bin/cat\").arg(\"file.txt\").spawn() {\n@@ -164,6 +165,7 @@ pub type EnvMap = HashMap<EnvKey, CString>;\n /// to be changed (for example, by adding arguments) prior to spawning:\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io::*;\n ///\n /// let mut process = match Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").spawn() {\n@@ -365,6 +367,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, core)]\n     /// use std::old_io::Command;\n     ///\n     /// let output = match Command::new(\"cat\").arg(\"foot.txt\").output() {\n@@ -386,6 +389,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::Command;\n     ///\n     /// let status = match Command::new(\"ls\").status() {\n@@ -660,6 +664,7 @@ impl Process {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::{Command, IoResult};\n     /// use std::old_io::process::ProcessExit;\n     ///"}, {"sha": "ef811f832b394133a47b69f3591624db41ed8160", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -18,6 +18,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(old_io)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io;\n //! use std::old_io::*;\n@@ -140,6 +141,7 @@ impl StdinReader {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io;\n     /// use std::old_io::*;\n     ///"}, {"sha": "c0f6ddaaef7cc3e7264ea3a465e6c34fcc72bff4", "filename": "src/libstd/old_io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftempfile.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -29,6 +29,7 @@ use string::String;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::{Path, GenericPath};\n ///"}, {"sha": "f8cba0444433175b02a141ed88cdd62b234b81c5", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -31,6 +31,7 @@ use sys::timer::Timer as TimerImp;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, std_misc)]\n /// # fn foo() {\n /// use std::old_io::Timer;\n /// use std::time::Duration;\n@@ -54,6 +55,7 @@ use sys::timer::Timer as TimerImp;\n /// the `old_io::timer` module.\n ///\n /// ```\n+/// # #![feature(old_io, std_misc)]\n /// # fn foo() {\n /// use std::old_io::timer;\n /// use std::time::Duration;\n@@ -116,6 +118,7 @@ impl Timer {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -129,6 +132,7 @@ impl Timer {\n     /// ```\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -168,6 +172,7 @@ impl Timer {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -187,6 +192,7 @@ impl Timer {\n     /// ```\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///"}, {"sha": "50bda04b5d0745c33ce30b2baab8b886e472923e", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -49,6 +49,7 @@\n //! ## Examples\n //!\n //! ```rust\n+//! # #![feature(old_path, old_io)]\n //! use std::old_io::fs::PathExtensions;\n //! use std::old_path::{Path, GenericPath};\n //!\n@@ -143,6 +144,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -168,6 +170,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -191,6 +194,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -209,6 +213,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -224,6 +229,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -240,6 +246,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -259,6 +266,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -277,6 +285,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -293,6 +302,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -313,6 +323,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -329,6 +340,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -349,6 +361,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -377,6 +390,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -398,6 +412,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -426,6 +441,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -445,6 +461,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -472,6 +489,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -523,6 +541,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -549,6 +568,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -574,6 +594,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -594,6 +615,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -610,6 +632,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -635,6 +658,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -665,6 +689,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -683,6 +708,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -709,6 +735,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -732,6 +759,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -750,6 +778,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -769,6 +798,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -789,6 +819,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -806,6 +837,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}"}, {"sha": "4f367e3052673eb839b7f32ff656588a2d627b01", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -605,6 +605,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// println!(\"{}\", Path::new(r\"C:\\some\\path\").display());\n     /// ```\n@@ -620,6 +621,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// let path = Path::new_opt(r\"C:\\some\\path\");\n     ///"}, {"sha": "40aaea7aca0b796b98504c164bc8c35e373e393b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -126,6 +126,7 @@ pub const TMPBUF_SZ : uint = 1000;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -147,6 +148,7 @@ pub fn getcwd() -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // We will iterate through the references to the element returned by os::env();\n@@ -183,6 +185,7 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// let key = \"HOME\";\n@@ -225,6 +228,7 @@ fn byteify(s: OsString) -> Vec<u8> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// let key = \"KEY\";\n@@ -266,6 +270,7 @@ pub fn unsetenv(n: &str) {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_path, os)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -299,6 +304,7 @@ pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path, core)]\n /// use std::os;\n /// use std::old_path::Path;\n ///\n@@ -360,6 +366,7 @@ pub fn dll_filename(base: &str) -> String {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -381,6 +388,7 @@ pub fn self_exe_name() -> Option<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -411,6 +419,7 @@ pub fn self_exe_path() -> Option<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -502,6 +511,7 @@ pub fn tmpdir() -> Path {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -534,6 +544,7 @@ pub fn make_absolute(p: &Path) -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -556,6 +567,7 @@ pub fn errno() -> i32 {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // Same as println!(\"{}\", last_os_error());\n@@ -752,6 +764,7 @@ extern \"system\" {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // Prints each argument on a separate line"}, {"sha": "656ca980624dcdcf9302693bbbbb11ed3e4cbae0", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -58,6 +58,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::Rng;\n //!\n@@ -68,6 +69,7 @@\n //! ```\n //!\n //! ```rust\n+//! # #![feature(rand)]\n //! use std::rand;\n //!\n //! let tuple = rand::random::<(f64, char)>();\n@@ -92,6 +94,7 @@\n //! multiply this fraction by 4.\n //!\n //! ```\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::distributions::{IndependentSample, Range};\n //!\n@@ -134,6 +137,7 @@\n //! [Monty Hall Problem]: http://en.wikipedia.org/wiki/Monty_Hall_problem\n //!\n //! ```\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::Rng;\n //! use std::rand::distributions::{IndependentSample, Range};\n@@ -384,6 +388,7 @@ impl Rng for ThreadRng {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n ///\n /// let x: u8 = rand::random();\n@@ -400,6 +405,7 @@ impl Rng for ThreadRng {\n /// Caching the thread local random number generator:\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::Rng;\n ///\n@@ -427,6 +433,7 @@ pub fn random<T: Rand>() -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{thread_rng, sample};\n ///\n /// let mut rng = thread_rng();"}, {"sha": "d3a8fa864fce39a0594f26cba18ffaba1dcb1cbb", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -24,6 +24,7 @@ use result::Result::{Ok, Err};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand, old_io)]\n /// use std::rand::{reader, Rng};\n /// use std::old_io::MemReader;\n ///"}, {"sha": "69c5267ab69fccdbddf013277216c831b26d6170", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -69,6 +69,7 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticCondvar, CONDVAR_INIT};\n ///\n /// static CVAR: StaticCondvar = CONDVAR_INIT;"}, {"sha": "3c7fecb75153a9913473ff92f45cb835181a9497", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(std_misc)]\n //! use std::sync::Future;\n //!\n //! // a fake, for now"}, {"sha": "7adfd9154acf86bae7f5d19812de347d3b848bf1", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -119,6 +119,7 @@\n //! after 10 seconds no matter what:\n //!\n //! ```no_run\n+//! # #![feature(std_misc, old_io)]\n //! use std::sync::mpsc::channel;\n //! use std::old_io::timer::Timer;\n //! use std::time::Duration;\n@@ -143,6 +144,7 @@\n //! has been inactive for 5 seconds:\n //!\n //! ```no_run\n+//! # #![feature(std_misc, old_io)]\n //! use std::sync::mpsc::channel;\n //! use std::old_io::timer::Timer;\n //! use std::time::Duration;"}, {"sha": "0f936641cdc75bb5081f3bf63a09b3d9e8e58f39", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -27,6 +27,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(std_misc)]\n //! use std::sync::mpsc::channel;\n //!\n //! let (tx1, rx1) = channel();\n@@ -119,6 +120,7 @@ impl Select {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::sync::mpsc::Select;\n     ///\n     /// let select = Select::new();"}, {"sha": "2bf75cf1d3764c97ea0c89fba9e2bd206f6340f8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -85,6 +85,7 @@ use fmt;\n /// To recover from a poisoned mutex:\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n@@ -136,6 +137,7 @@ unsafe impl<T: Send> Sync for Mutex<T> { }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "6e94db6d7530c027a569bacbee71a9bb0b9c9401", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -77,6 +77,7 @@ unsafe impl<T: Send + Sync> Sync for RwLock<T> {}\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n /// static LOCK: StaticRwLock = RW_LOCK_INIT;"}, {"sha": "059cce572459e61767cf4ae7235f96d6b7c77923", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -25,6 +25,7 @@ use sync::{Mutex, Condvar};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::Semaphore;\n ///\n /// // Create a semaphore that represents 5 resources"}, {"sha": "51cf70e615bcc17eb1619a794b61c64ea595e37f", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -61,6 +61,7 @@ impl<'a> Drop for Sentinel<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc, core)]\n /// use std::sync::TaskPool;\n /// use std::iter::AdditiveIterator;\n /// use std::sync::mpsc::channel;"}, {"sha": "d57535391fd37ee45d9552d325277255a27a8819", "filename": "src/libstd/thread/scoped.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibstd%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -24,6 +24,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(std_misc)]\n //! scoped_thread_local!(static FOO: u32);\n //!\n //! // Initially each scoped slot is empty.\n@@ -146,6 +147,7 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.set(&100, || {\n@@ -198,6 +200,7 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(std_misc)]\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.with(|slot| {"}, {"sha": "c907b87bc3c66e9f3ec9f5a9dd81abf8cadd559c", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -19,6 +19,7 @@\n //! # Examples\n //!\n //! ```no_run\n+//! # #![feature(rustc_private)]\n //! extern crate term;\n //!\n //! use std::io::prelude::*;"}, {"sha": "402774321bfcbccbd1475b2b46a7b86915c8ab2e", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -46,6 +46,7 @@\n #![feature(set_stdio)]\n #![feature(os)]\n #![feature(convert)]\n+#![cfg_attr(test, feature(old_io))]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "db5a25b9bedcaf9e2352a9284566ba2626e99c14", "filename": "src/libunicode/char.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fchar.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -209,6 +209,7 @@ pub trait CharExt {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -219,6 +220,7 @@ pub trait CharExt {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -241,6 +243,7 @@ pub trait CharExt {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -251,6 +254,7 @@ pub trait CharExt {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -653,6 +657,7 @@ impl char {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -663,6 +668,7 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -685,6 +691,7 @@ impl char {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -695,6 +702,7 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);"}, {"sha": "6879fa7b3ba6834a7df0543d1aef4f6e560ff94b", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -35,6 +35,7 @@\n #![feature(no_std)]\n #![no_std]\n #![feature(core)]\n+#![doc(test(no_crate_inject))]\n \n extern crate core;\n "}, {"sha": "de3a593143e79191852a1d682cea733af46c5d63", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -481,19 +481,24 @@ impl<'a> Iterator for Utf16Items<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(unicode)]\n+/// extern crate unicode;\n+///\n /// use unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};\n ///\n-/// // \ud834\udd1emus<invalid>ic<invalid>\n-/// let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n-///          0x0073, 0xDD1E, 0x0069, 0x0063,\n-///          0xD834];\n+/// fn main() {\n+///     // \ud834\udd1emus<invalid>ic<invalid>\n+///     let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n+///              0x0073, 0xDD1E, 0x0069, 0x0063,\n+///              0xD834];\n ///\n-/// assert_eq!(unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n-///            vec![ScalarValue('\ud834\udd1e'),\n-///                 ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n-///                 LoneSurrogate(0xDD1E),\n-///                 ScalarValue('i'), ScalarValue('c'),\n-///                 LoneSurrogate(0xD834)]);\n+///     assert_eq!(unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n+///                vec![ScalarValue('\ud834\udd1e'),\n+///                     ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n+///                     LoneSurrogate(0xDD1E),\n+///                     ScalarValue('i'), ScalarValue('c'),\n+///                     LoneSurrogate(0xD834)]);\n+/// }\n /// ```\n pub fn utf16_items<'a>(v: &'a [u16]) -> Utf16Items<'a> {\n     Utf16Items { iter : v.iter() }"}, {"sha": "197fb9a6d018c488ae9e81522666859c4e32d58a", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"anonexternmod\"]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "c0d81cd8e1bad335e807e7346044895240f3e662", "filename": "src/test/auxiliary/check_static_recursion_foreign_helper.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Helper definition for test/run-pass/check-static-recursion-foreign.rs.\n \n+#![feature(libc)]\n+\n #[crate_id = \"check_static_recursion_foreign_helper\"]\n #[crate_type = \"lib\"]\n "}, {"sha": "fc2e328f68657e65c58f724a1fef960d62dd688b", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name=\"externcallback\"]\n #![crate_type = \"lib\"]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "92239ce55981c808dfd0991c4a7eaa2906377223", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"foreign_lib\"]\n+#![feature(libc)]\n \n pub mod rustrt {\n     extern crate libc;"}, {"sha": "b6199f59ebe0638c9e82c3bc27ae0c129ac2104b", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name=\"socketlib\"]\n #![crate_type = \"lib\"]\n+#![feature(libc)]\n \n pub mod socket {\n     extern crate libc;"}, {"sha": "4a8839abc7cb2083017e8030f302d466c04266ac", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n pub mod testtypes {\n     use std::any::TypeId;\n "}, {"sha": "58dee1216ee6047d03262e8cf8714c5bb779907f", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-stage1\n // force-host\n \n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n #![crate_type = \"dylib\"]\n \n extern crate syntax;"}, {"sha": "3d5e52d709df3ec4c1966eafc87252acd368efc0", "filename": "src/test/auxiliary/issue_3907.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3907.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n pub trait Foo : MarkerTrait {"}, {"sha": "5c878b1e667d9f61128c7f92cd90e6a1bca13e79", "filename": "src/test/auxiliary/issue_5844_aux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n extern \"C\" {"}, {"sha": "fd3e9b9ac9dcea8ca1de970fcddb5c8b842b0654", "filename": "src/test/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, old_path)]\n+\n use std::dynamic_lib::DynamicLibrary;\n \n #[no_mangle]"}, {"sha": "3b45b0ae701061c125cca7917ab8f104c94b19da", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n \n extern crate syntax;"}, {"sha": "ca5a7b75e06cfe61ac929401d378523c517fc458", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "20799ce5b467f9debdb077e3479a3baef395c58a", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "974db7c92463839a1a7b9bb973a30e7eddf5d225", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n #[macro_use] extern crate log;\n \n pub fn foo<T>() {"}, {"sha": "03cd70d949428886501b663dbe60de5b64df9039", "filename": "src/test/auxiliary/macro_crate_MacroRulesTT.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "5b7e52e9164e96744d8c34162eacf10d1b783cf7", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar, quote)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "5a615502a95e3200a11aae532eb4c3b4a1e74ffb", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "6f5f50475483d4ca05a5e672047551ed382e6928", "filename": "src/test/auxiliary/plugin_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_private)]\n \n extern crate rustc;\n "}, {"sha": "75f404c96cd0e7f380cdfb6e2f7cef70ca06fae1", "filename": "src/test/auxiliary/plugin_with_plugin_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n #![deny(plugin_as_library)] // should have no effect in a plugin crate\n \n extern crate macro_crate_test;"}, {"sha": "dc08033602c99dfa9a6f9f3aed31ce6ddf1c7412", "filename": "src/test/auxiliary/private_trait_xc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n trait Foo : ::std::marker::MarkerTrait {}"}, {"sha": "8c7ad2293e23db67cd051db94533e334486b6c07", "filename": "src/test/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "86ce3df9ba6efcd0740b132c8b69c6063102d418", "filename": "src/test/auxiliary/rlib_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"rlib\"]\n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate rustc;\n "}, {"sha": "a105cb7ae6cfb6ce9db14d867c12b2e2703b4b6b", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type=\"dylib\"]\n-#![feature(plugin_registrar)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "6d4ea499b2bde8f623b41acaf24ddc46d911aee6", "filename": "src/test/auxiliary/svh-a-base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "61e4aaf32586e3d96e1ba00fcd3bee56a58f003a", "filename": "src/test/auxiliary/svh-a-change-lit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "cfdb0902b5d365f6d42f091258a0d27ffaa704e5", "filename": "src/test/auxiliary/svh-a-change-significant-cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "e79738c04103522746e4cd728267ff38f6fb7218", "filename": "src/test/auxiliary/svh-a-change-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "b22d553c02b5afb951a4eea095747c980e3d0253", "filename": "src/test/auxiliary/svh-a-change-type-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "78dbdc28b9f31f572a9dde4ada8260d8fc2e71d6", "filename": "src/test/auxiliary/svh-a-change-type-ret.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "30592827039746562b385df875af145ecb2f2a13", "filename": "src/test/auxiliary/svh-a-change-type-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "4c457b099a4b17e6590b21905d056a47683d6e85", "filename": "src/test/auxiliary/svh-a-comment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "cab25ac9e4f4fbe78827cb65b74700c12f11282b", "filename": "src/test/auxiliary/svh-a-doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "01926dc8abc43938aef08b77287f8b9c88b7bfb4", "filename": "src/test/auxiliary/svh-a-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "6d4ea499b2bde8f623b41acaf24ddc46d911aee6", "filename": "src/test/auxiliary/svh-a-no-change.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "f3a31df94b3e4e42af2d1b05f607b82e442e32aa", "filename": "src/test/auxiliary/svh-a-redundant-cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "bec6b207c071e4c5bb7072e2adae9c2532026ddd", "filename": "src/test/auxiliary/svh-a-whitespace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,7 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n+#![feature(core)]\n \n use std::marker::MarkerTrait;\n "}, {"sha": "54da1a1e451c848b4f0ed0b04b04d79ca359b7be", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type = \"dylib\"]\n-#![feature(plugin_registrar, quote)]\n+#![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate \"syntax_extension_with_dll_deps_1\" as other;\n extern crate syntax;"}, {"sha": "4a4de2455e36ea4bce9e376fa364f2a4280f1c87", "filename": "src/test/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n pub trait Foo : ::std::marker::MarkerTrait {\n }\n "}, {"sha": "5a7a3e7bcc6942ac1b5a7495bd8a569990674cd1", "filename": "src/test/auxiliary/typeck-default-trait-impl-cross-crate-coherence-lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(optin_builtin_traits, core)]\n #![crate_type = \"rlib\"]\n \n use std::marker::MarkerTrait;"}, {"sha": "82d07a9df4e12662e428d1feb51cffb1ea716e81", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::any::TypeId;\n \n pub struct A;"}, {"sha": "82d07a9df4e12662e428d1feb51cffb1ea716e81", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::any::TypeId;\n \n pub struct A;"}, {"sha": "ceffae79677f4100f55d7d94ef219c9383f58a1e", "filename": "src/test/auxiliary/weak-lang-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,7 +13,7 @@\n // This aux-file will require the eh_personality function to be codegen'd, but\n // it hasn't been defined just yet. Make sure we don't explode.\n \n-#![feature(no_std)]\n+#![feature(no_std, core)]\n #![no_std]\n #![crate_type = \"rlib\"]\n "}, {"sha": "0cff90d61ed995c95959ae57c74fcdb9a39d2509", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, std_misc, rand)]\n \n use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;"}, {"sha": "aeedaa288fef810f3bec9db55f07e7e93a8a9022", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, rand, std_misc, collections)]\n \n extern crate collections;\n extern crate rand;"}, {"sha": "0344d6a46eeb58ffd54af4db766b59ec7c13785f", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-lexer-test FIXME #15679\n // Microbenchmarks for various functions in std and extra\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, rand, old_io, old_path, std_misc, collections)]\n \n use std::old_io::*;\n use std::old_path::{Path, GenericPath};"}, {"sha": "fb95f92da77094239763d5ee9c59a890fb0b2fc2", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -18,6 +18,8 @@\n // different scalability characteristics compared to the select\n // version.\n \n+#![feature(std_misc)]\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::env;\n use std::thread;"}, {"sha": "6d702242d765f2714ee84f327e05d779e0950de6", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,8 @@\n //\n // I *think* it's the same, more or less.\n \n+#![feature(std_misc)]\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::env;\n use std::thread;"}, {"sha": "6fb2c954e020503450a4845fc49fe5bafce01f6a", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -18,6 +18,8 @@\n // no-pretty-expanded FIXME #15189\n // ignore-lexer-test FIXME #15679\n \n+#![feature(std_misc)]\n+\n use std::env;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;"}, {"sha": "6cd758361870ee4e8ec84713f82b1884f4c2ab16", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,8 @@\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n // ignore-lexer-test FIXME #15679\n \n+#![feature(rand, core)]\n+\n use std::f32::consts::PI;\n use std::num::Float;\n use std::rand::{Rng, StdRng};"}, {"sha": "64c3872213780beefc05796991c918f900bc4bd9", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(rustc_private, core)]\n+\n extern crate arena;\n \n use std::iter::range_step;"}, {"sha": "e23862f4286aa33ab4790830fd7898a8e6dd483a", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core)]\n+\n use std::{cmp, iter, mem};\n use std::thread;\n "}, {"sha": "709b23ef9dd039c07e4cf109ad83ea4582bc25b1", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core, old_io, io, core)]\n+\n use std::cmp::min;\n use std::old_io::*;\n use std::iter::repeat;"}, {"sha": "78d31faeb51690c4cd8e2bc8ce6daf38ad5963e7", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(old_io, old_path, io, core)]\n+\n use std::cmp::min;\n use std::old_io::*;\n use std::old_io;"}, {"sha": "ebdc60cdd2b0f3628894e8c7ea8cac35e07433d8", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,7 +13,7 @@\n \n // multi tasking k-nucleotide\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc, old_io, collections, os)]\n \n use std::ascii::{AsciiExt, OwnedAsciiExt};\n use std::cmp::Ordering::{self, Less, Greater, Equal};"}, {"sha": "ba4f2c9b1c563abbfc9a00fc9d122bb22342521a", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, std_misc, collections)]\n \n use std::ascii::OwnedAsciiExt;\n use std::env;"}, {"sha": "d248293103bdec7940ae623dd621216fe685b3ea", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(simd)]\n+#![feature(simd, old_io, core, io)]\n \n // ignore-pretty very bad with line comments\n "}, {"sha": "150522fd02d4cb75ab41d8a0fb3c445bdb351b61", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -40,6 +40,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+#![feature(core)]\n+\n use std::iter::repeat;\n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "3748b65dacbb8bd581cd0352c6072e3c21b59931", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+#![feature(core)]\n+\n use std::num::Float;\n \n const PI: f64 = 3.141592653589793;"}, {"sha": "4d9bc951fa3061a460a4270e7e85484c481652a9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -18,6 +18,8 @@\n \n */\n \n+#![feature(std_misc, rustc_private)]\n+\n extern crate getopts;\n \n use std::sync::mpsc::{channel, Sender};"}, {"sha": "875ec670d42b1da7d165c03db25aa3e454e04645", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, libc, old_io, collections, io, core)]\n \n extern crate libc;\n "}, {"sha": "3889b404d8557c111b639c121791618847be1d75", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -41,7 +41,7 @@\n // no-pretty-expanded FIXME #15189\n \n #![allow(non_snake_case)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, core, os)]\n \n use std::iter::{repeat, AdditiveIterator};\n use std::thread;"}, {"sha": "dd56b18c144f2f29df781ada49cd3641008b2730", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Microbenchmark for the smallintmap library\n \n+#![feature(collections, std_misc)]\n+\n use std::collections::VecMap;\n use std::env;\n use std::time::Duration;"}, {"sha": "3913de3a3f99f49a5202859b11eef6e9016d76bb", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, core)]\n #![allow(non_snake_case)]\n \n use std::io::prelude::*;"}, {"sha": "d8f4603ab1af956990efb3a463aa41220cba823a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor, box_syntax)]\n+#![feature(unsafe_destructor, box_syntax, std_misc, collections)]\n \n use std::env;\n use std::thread;"}, {"sha": "2b48d47e940912c883795317f463ec779a752119", "filename": "src/test/compile-fail/internal-unstable-noallow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -16,13 +16,10 @@\n // aux-build:internal_unstable.rs\n // error-pattern:use of unstable library feature 'function'\n // error-pattern:use of unstable library feature 'struct_field'\n-// error-pattern:compilation successful\n-#![feature(rustc_attrs)]\n \n #[macro_use]\n extern crate internal_unstable;\n \n-#[rustc_error]\n fn main() {\n     call_unstable_noallow!();\n "}, {"sha": "74526fb3d83143de09750cce78068b9eab3a4184", "filename": "src/test/compile-fail/internal-unstable-thread-local.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,14 +10,12 @@\n \n // aux-build:internal_unstable.rs\n \n-#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n extern crate internal_unstable;\n \n \n thread_local!(static FOO: () = ());\n-thread_local!(static BAR: () = internal_unstable::unstable()); //~ WARN use of unstable\n+thread_local!(static BAR: () = internal_unstable::unstable()); //~ ERROR use of unstable\n \n-#[rustc_error]\n-fn main() {} //~ ERROR\n+fn main() {}"}, {"sha": "accc898b8a8081ce1b82a5e97b2bf6f70c0bbe46", "filename": "src/test/compile-fail/internal-unstable.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:internal_unstable.rs\n \n-#![feature(rustc_attrs, allow_internal_unstable)]\n+#![feature(allow_internal_unstable)]\n \n #[macro_use]\n extern crate internal_unstable;\n@@ -19,7 +19,7 @@ macro_rules! foo {\n     ($e: expr, $f: expr) => {{\n         $e;\n         $f;\n-        internal_unstable::unstable(); //~ WARN use of unstable\n+        internal_unstable::unstable(); //~ ERROR use of unstable\n     }}\n }\n \n@@ -32,20 +32,19 @@ macro_rules! bar {\n     }}\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR\n+fn main() {\n     // ok, the instability is contained.\n     call_unstable_allow!();\n     construct_unstable_allow!(0);\n \n     // bad.\n-    pass_through_allow!(internal_unstable::unstable()); //~ WARN use of unstable\n+    pass_through_allow!(internal_unstable::unstable()); //~ ERROR use of unstable\n \n-    pass_through_noallow!(internal_unstable::unstable()); //~ WARN use of unstable\n+    pass_through_noallow!(internal_unstable::unstable()); //~ ERROR use of unstable\n \n \n \n-    println!(\"{:?}\", internal_unstable::unstable()); //~ WARN use of unstable\n+    println!(\"{:?}\", internal_unstable::unstable()); //~ ERROR use of unstable\n \n-    bar!(internal_unstable::unstable()); //~ WARN use of unstable\n+    bar!(internal_unstable::unstable()); //~ ERROR use of unstable\n }"}, {"sha": "d95ed7f10bd17dfc63cb15e897c1f4bf85dc0339", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,10 +13,10 @@\n \n #![feature(foo)] //~ ERROR unused or unknown feature\n \n-extern crate lint_output_format; //~ WARNING: use of unstable library feature\n+extern crate lint_output_format; //~ ERROR use of unstable library feature\n use lint_output_format::{foo, bar};\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n-    let _y = bar(); //~ WARNING: use of unstable library feature\n+    let _y = bar(); //~ ERROR use of unstable library feature\n }"}, {"sha": "716d7674b2ddbe8b3b852aeca46696e6e9254196", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -22,147 +22,147 @@ mod cross_crate {\n     pub fn foo() {\n         let x = Stable {\n             inherit: 1,\n-            override1: 2, //~ WARN use of unstable\n+            override1: 2, //~ ERROR use of unstable\n             override2: 3,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         };\n \n         let _ = x.inherit;\n-        let _ = x.override1; //~ WARN use of unstable\n+        let _ = x.override1; //~ ERROR use of unstable\n         let _ = x.override2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let Stable {\n             inherit: _,\n-            override1: _, //~ WARN use of unstable\n+            override1: _, //~ ERROR use of unstable\n             override2: _\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n \n         let x = Stable2(1, 2, 3);\n \n         let _ = x.0;\n-        let _ = x.1; //~ WARN use of unstable\n+        let _ = x.1; //~ ERROR use of unstable\n         let _ = x.2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let Stable2(_,\n-                   _, //~ WARN use of unstable\n+                   _, //~ ERROR use of unstable\n                    _)\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             = x;\n         // all fine\n         let Stable2(..) = x;\n \n \n-        let x = Unstable { //~ WARN use of unstable\n-            inherit: 1, //~ WARN use of unstable\n+        let x = Unstable { //~ ERROR use of unstable\n+            inherit: 1, //~ ERROR use of unstable\n             override1: 2,\n             override2: 3,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         };\n \n-        let _ = x.inherit; //~ WARN use of unstable\n+        let _ = x.inherit; //~ ERROR use of unstable\n         let _ = x.override1;\n         let _ = x.override2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n-        let Unstable { //~ WARN use of unstable\n-            inherit: _, //~ WARN use of unstable\n+        let Unstable { //~ ERROR use of unstable\n+            inherit: _, //~ ERROR use of unstable\n             override1: _,\n             override2: _\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n         } = x;\n \n-        let Unstable  //~ WARN use of unstable\n+        let Unstable  //~ ERROR use of unstable\n             // the patterns are all fine:\n             { .. } = x;\n \n \n-        let x = Unstable2(1, 2, 3); //~ WARN use of unstable\n+        let x = Unstable2(1, 2, 3); //~ ERROR use of unstable\n \n-        let _ = x.0; //~ WARN use of unstable\n+        let _ = x.0; //~ ERROR use of unstable\n         let _ = x.1;\n         let _ = x.2;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n-        let Unstable2  //~ WARN use of unstable\n-            (_, //~ WARN use of unstable\n+        let Unstable2  //~ ERROR use of unstable\n+            (_, //~ ERROR use of unstable\n              _,\n              _)\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             = x;\n-        let Unstable2 //~ WARN use of unstable\n+        let Unstable2 //~ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n \n \n         let x = Deprecated {\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             inherit: 1,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             override1: 2,\n-            override2: 3, //~ WARN use of unstable\n+            override2: 3, //~ ERROR use of unstable\n         };\n \n         let _ = x.inherit;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n         let _ = x.override1;\n-        let _ = x.override2; //~ WARN use of unstable\n+        let _ = x.override2; //~ ERROR use of unstable\n \n         let Deprecated {\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             inherit: _,\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             override1: _,\n-            override2: _ //~ WARN use of unstable\n+            override2: _ //~ ERROR use of unstable\n         } = x;\n \n         let Deprecated\n             //~^ ERROR use of deprecated item\n-            //~^^ WARN use of unstable\n+            //~^^ ERROR use of unstable\n             // the patterns are all fine:\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n \n         let _ = x.0;\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n         let _ = x.1;\n-        let _ = x.2; //~ WARN use of unstable\n+        let _ = x.2; //~ ERROR use of unstable\n \n         let Deprecated2\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n             (_,\n              //~^ ERROR use of deprecated item\n-             //~^^ WARN use of unstable\n+             //~^^ ERROR use of unstable\n              _,\n-             _) //~ WARN use of unstable\n+             _) //~ ERROR use of unstable\n             = x;\n         let Deprecated2\n         //~^ ERROR use of deprecated item\n-        //~^^ WARN use of unstable\n+        //~^^ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "391b49e10686ec41e68c71e30bcad03ec60573af", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -24,7 +24,7 @@ extern crate lint_stability;\n \n mod cross_crate {\n     extern crate stability_cfg1;\n-    extern crate stability_cfg2; //~ WARNING: use of unstable library feature\n+    extern crate stability_cfg2; //~ ERROR use of unstable library feature\n \n     use lint_stability::*;\n \n@@ -51,64 +51,64 @@ mod cross_crate {\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n \n         deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Foo::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n \n         deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Foo::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n \n-        unstable(); //~ WARNING use of unstable library feature\n-        foo.method_unstable(); //~ WARNING use of unstable library feature\n-        Foo::method_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::method_unstable(&foo); //~ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        unstable(); //~ ERROR use of unstable library feature\n+        foo.method_unstable(); //~ ERROR use of unstable library feature\n+        Foo::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n \n         unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.method_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Foo::method_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::method_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n \n         stable();\n         foo.method_stable();\n@@ -130,26 +130,26 @@ mod cross_crate {\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableStruct { i: 0 }; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableStruct { i: 0 }; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable library feature\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableUnitStruct; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableUnitStruct; //~ ERROR use of unstable library feature\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n         let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = Enum::UnstableVariant; //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = Enum::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n-        let _ = UnstableTupleStruct (1); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable library feature\n         let _ = StableTupleStruct (1);\n \n         // At the moment, the lint checker only checks stability in\n@@ -159,7 +159,7 @@ mod cross_crate {\n         // on macros themselves are not yet linted.\n         macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n         macro_test_arg!(deprecated_unstable_text()); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n     }\n \n@@ -173,33 +173,33 @@ mod cross_crate {\n         <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n-        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n         Trait::trait_stable(&foo);\n         <Foo>::trait_stable(&foo);\n@@ -210,46 +210,46 @@ mod cross_crate {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ WARNING use of unstable library feature\n-        foo.trait_unstable(); //~ WARNING use of unstable library feature\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ WARNING use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n     }\n \n     struct S;\n \n-    impl UnstableTrait for S { } //~ WARNING use of unstable library feature\n+    impl UnstableTrait for S { } //~ ERROR use of unstable library feature\n \n-    trait LocalTrait : UnstableTrait { } //~ WARNING use of unstable library feature\n+    trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable library feature\n \n     impl Trait for S {\n         fn trait_stable(&self) {}\n-        fn trait_unstable(&self) {} //~ WARNING use of unstable library feature\n+        fn trait_unstable(&self) {} //~ ERROR use of unstable library feature\n     }\n }\n \n mod inheritance {\n-    extern crate inherited_stability; //~ WARNING: use of unstable library feature\n-    use self::inherited_stability::*; //~ WARNING: use of unstable library feature\n+    extern crate inherited_stability; //~ ERROR use of unstable library feature\n+    use self::inherited_stability::*; //~ ERROR use of unstable library feature\n \n     fn test_inheritance() {\n-        unstable(); //~ WARNING use of unstable library feature\n+        unstable(); //~ ERROR use of unstable library feature\n         stable();\n \n-        stable_mod::unstable(); //~ WARNING use of unstable library feature\n+        stable_mod::unstable(); //~ ERROR use of unstable library feature\n         stable_mod::stable();\n \n         unstable_mod::deprecated(); //~ ERROR use of deprecated item\n-        unstable_mod::unstable(); //~ WARNING use of unstable library feature\n+        unstable_mod::unstable(); //~ ERROR use of unstable library feature\n \n-        let _ = Unstable::UnstableVariant; //~ WARNING use of unstable library feature\n+        let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Unstable::StableVariant;\n \n         let x: usize = 0;\n-        x.unstable(); //~ WARNING use of unstable library feature\n+        x.unstable(); //~ ERROR use of unstable library feature\n         x.stable();\n     }\n }"}, {"sha": "f150e84b9fdfecb5ded086e2d7ecc2b432b57f3d", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -16,6 +16,7 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![omit_gdb_pretty_printer_section]\n+#![feature(std_misc, core)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign\n // debug locations to const-expressions."}, {"sha": "c161600f2c3c9d24f99c2822eea03481273d04b5", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -17,6 +17,8 @@\n \n // compile-flags:-g\n \n+#![feature(old_io)]\n+\n // === GDB TESTS ===================================================================================\n \n // gdb-command:run"}, {"sha": "99e31ab23021442ca93788b9e08c282abce0f912", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -20,6 +20,8 @@\n \n // compile-flags:-g\n \n+#![feature(old_io)]\n+\n // === GDB TESTS ===================================================================================\n \n // gdb-command:rbreak immediate_args"}, {"sha": "38b149ef243e9fbfe6b2ef0146abccffcdfbd926", "filename": "src/test/debuginfo/issue13213.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue13213.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,9 @@\n // min-lldb-version: 310\n \n // aux-build:issue13213aux.rs\n+\n+#![feature(old_io)]\n+\n extern crate issue13213aux;\n \n // compile-flags:-g"}, {"sha": "16ae83ee8dc2b0e630b91f1f93d643bfb2d9b025", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -42,6 +42,7 @@\n \n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n+#![feature(core)]\n \n use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "509bee9def2731e2d65023c0fd98e1a4d35af415", "filename": "src/test/pretty/default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(optin_builtin_traits, core)]\n \n // pp-exact\n "}, {"sha": "bddab59e3e4c52eeeb03c12cead341923b7a8090", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,7 @@\n // error-pattern:explicit failure\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n+#![feature(std_misc, libc)]\n \n extern crate libc;\n use std::task;"}, {"sha": "0e72ab22dc8f9822af338157534d1b744d1d2d06", "filename": "src/test/run-fail/rt-set-exit-status-panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(os, rustc_private)]\n+\n #[macro_use] extern crate log;\n use std::os;\n "}, {"sha": "2498b7c2be4e7fa00450643109175dfcf5a3521c", "filename": "src/test/run-fail/rt-set-exit-status-panic2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(os, rustc_private)]\n+\n #[macro_use] extern crate log;\n use std::os;\n use std::thread;"}, {"sha": "9425a1b1902b51aa3683b3637d9a37d6ad0340e4", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#![feature(rustc_private, os)]\n+\n #[macro_use] extern crate log;\n use std::os;\n "}, {"sha": "a36cc474c2bf052054aa6614b805302073987703", "filename": "src/test/run-make/allow-warnings-cmdline-stability/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Ffoo.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(test_feature)]\n+\n extern crate bar;\n \n pub fn main() { bar::baz() }"}, {"sha": "02af5244b8aabe93cf4e7f208e8d51957b2f506a", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, old_path)]\n+\n use std::env;\n use std::fs::File;\n use std::process::Command;"}, {"sha": "2e1fad5a044f6a5998f16efafab1cf119d0eef32", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(std_misc, old_path, os)]\n+\n use std::dynamic_lib::DynamicLibrary;\n use std::os;\n use std::old_path::Path;"}, {"sha": "aec76fdf1b2c0b164164c1facc5638013091165e", "filename": "src/test/run-make/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(asm)]\n+#![feature(asm, core)]\n #![crate_type=\"lib\"]\n \n use std::intrinsics;"}, {"sha": "b089b9269a26401ae269aff8d44012413cafa4e7", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private, path)]\n+\n extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_lint;"}, {"sha": "b1576ccd48e9f04af52a43c2923438141a198a90", "filename": "src/test/run-make/link-path-order/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc, os)]\n+\n extern crate libc;\n \n #[link(name=\"foo\")]"}, {"sha": "c9395f557fd4f7ec9007bbf8cf6fa6ba66043a56", "filename": "src/test/run-make/lto-syntax-extension/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_private)]\n+\n extern crate lib;\n #[macro_use] extern crate log;\n "}, {"sha": "29f52f97a88878f0b8c8ab821ff683ac32b3578b", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n+#![feature(lang_items, no_std, libc)]\n #![no_std]\n #![crate_type = \"dylib\"]\n "}, {"sha": "ae424c6569dbe3f976c61522148dbd0c92738957", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n+#![feature(lang_items, no_std, libc)]\n #![no_std]\n #![crate_type = \"dylib\"]\n "}, {"sha": "8f11629be6cc83c054a577b22e3618b00e05112b", "filename": "src/test/run-make/rustdoc-default-impl/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(optin_builtin_traits)]\n+#![feature(core)]\n \n pub mod bar {\n     use std::marker;"}, {"sha": "74251c3c63e91d25af64d30506c69824cd3d3936", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,7 @@\n \n #![ crate_name = \"test\" ]\n #![allow(unstable)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, old_io, rustc_private, core)]\n \n extern crate graphviz;\n // A simple rust project"}, {"sha": "aa2ce785771211f3875fa326644030f1b0c0842e", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand)]\n+\n use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;"}, {"sha": "ebf3226334cc6573635b0a8c1a96ff94bcb63c3f", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand, core)]\n+\n use std::fs::File;\n use std::io::prelude::*;\n use std::iter::repeat;"}, {"sha": "bdd557b6cc27b4e604fb172875287d672104cbee", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core)]\n+\n use std::intrinsics::{volatile_load, volatile_store};\n \n pub fn main() {"}, {"sha": "7a3c32a45f912c6388b8d1279338c8d4885d4cf5", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,7 +12,7 @@\n \n // ignore-android\n \n-#![feature(rustc_private)]\n+#![feature(rustc_private, path)]\n #![feature(core)]\n \n extern crate getopts;"}, {"sha": "40947b2e25652fd3e494fe91309a0110bfdfb1c6", "filename": "src/test/run-pass-fulldeps/issue-16992.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-pretty\n // ignore-android\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "d4dc5627044dbd1be9dcff522e07581e4da45225", "filename": "src/test/run-pass-fulldeps/issue-18763-quote-token-tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "0e2e1f2dd86d6f1fe7b37f4327c7e14beefbb776", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n "}, {"sha": "928368fabdf3684dde673bca6478dce74e612d05", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,7 +11,7 @@\n // ignore-android\n // ignore-pretty: does not work well with `--test`\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n #![deny(unused_variable)]\n \n extern crate syntax;"}, {"sha": "23096828c4b95be06ab2da1b25bff3b4aaa89624", "filename": "src/test/run-pass-fulldeps/syntax-extension-with-dll-deps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,7 +12,7 @@\n // aux-build:syntax_extension_with_dll_deps_2.rs\n // ignore-stage1\n \n-#![feature(plugin)]\n+#![feature(plugin, rustc_private)]\n #![plugin(syntax_extension_with_dll_deps_2)]\n \n fn main() {"}, {"sha": "301c4b917816a8e1c8dec09a0a4a914a7eb5d623", "filename": "src/test/run-pass-valgrind/cleanup-stdin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_io, io)]\n+\n fn main() {\n     let _ = std::old_io::stdin();\n     let _ = std::io::stdin();"}, {"sha": "f6ff0415259af06782de1001a72693bb095f9c70", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,8 @@\n \n // Regression test for issue #374\n \n+// pretty-expanded FIXME #23616\n+\n enum sty { ty_nil, }\n \n struct RawT {struct_: sty, cname: Option<String>, hash: uint}"}, {"sha": "cd649310ae78406f12d0748f01693cf2e56e87d3", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n enum option<T> { some(T), none, }\n \n struct R<T> {v: Vec<option<T>> }"}, {"sha": "b40774e2be82fcff268e35176eb9426b36907fa0", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:anon-extern-mod-cross-crate-1.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate anonexternmod;\n \n use anonexternmod::rust_get_test_int;"}, {"sha": "e96b0cc1442c64ee33556d1bf1baeca09c3f4cbd", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(libc)]\n+\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\")]"}, {"sha": "2428d45256d518b4a0561e8ff7f55b619aab61b1", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct X {\n     x: int\n }"}, {"sha": "08412d1296cfc071b7440203b2ef50a2c6695d18", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let i32_c: int = 0x10101010;\n     assert!(i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3) =="}, {"sha": "8a0fc8adc189574d323684769e197ac2647b9dab", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(type_limits)]\n \n // Unsigned integer operations"}, {"sha": "422816079d62c6ac4eb6e540c87cdcc67902b930", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn f() -> int { { return 3; } }\n \n pub fn main() { assert!((f() == 3)); }"}, {"sha": "ec89e2b3ee288437e5fb780a967e583a0785c5a6", "filename": "src/test/run-pass/as-precedence.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fas-precedence.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn main() {\n     assert_eq!(3 as uint * 3, 9);\n     assert_eq!(3 as (uint) * 3, 9);"}, {"sha": "716c3d47a0365a2fb8410be081464a8fe3413dbf", "filename": "src/test/run-pass/asm-concat-src.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n pub fn main() {"}, {"sha": "6aeadbe203e182f20414f4e8ed37b8401fb53b75", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}, {"sha": "7b1548a8d4f6118a7bddd93c08bb0ee59c43c67f", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}, {"sha": "5d93388f7f4fee8fd639ec1a1f41a24ca48a1166", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // Issue 483 - Assignment expressions result in nil\n+// pretty-expanded FIXME #23616\n+\n fn test_assign() {\n     let mut x: int;\n     let y: () = x = 10;"}, {"sha": "4b22f84f78d12800b42f6b90eb639559772e3ff7", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,8 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unboxed_closures)]\n \n trait iterable<A> {"}, {"sha": "853b56ffb0c2ea34a0fd916058c363e912f754b6", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo : MarkerTrait {"}, {"sha": "39fc224148e8ed7d8f3403c1e0d044ba4018ca35", "filename": "src/test/run-pass/associated-types-binding-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n \n+// pretty-expanded FIXME #23616\n+\n use std::vec;\n \n pub trait BitIter {"}, {"sha": "87eeb23b7a3f37e0fcee111068af0dea7440072e", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "2301821f66358fe58a488d5e6c9284b8034533ad", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constrai32s on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait ToI32 {\n     fn to_i32(&self) -> i32;\n }"}, {"sha": "1a8da6755588be0e41cb3f3f5e4551293dbce350", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -14,6 +14,8 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n use std::ops::Deref;\n "}, {"sha": "b53e69e8d9d16603b9956db33d65fd0b5de92aa5", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait SignedUnsigned {\n     type Opposite;\n     fn convert(self) -> Self::Opposite;"}, {"sha": "7354ae67addc4d32aee8441cf7d4c0321fbd71e3", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "8ca3bc02548346864635ee80deac399b3ce64ef3", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,8 @@\n // (modulo bound lifetime names) appears in the environment\n // twice. Issue #21965.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<T>(t: T) -> i32\n     where T : for<'a> Fn(&'a u8) -> i32,\n           T : for<'b> Fn(&'b u8) -> i32,"}, {"sha": "5878f5dd51b2a213ae5d497d572f8507965c6941", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Check that we do not report ambiguities when the same predicate\n // appears in the environment twice. Issue #21965.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo {\n     type B;\n "}, {"sha": "8cf97fe62fea50639b7754502e8b48cb7d5179d6", "filename": "src/test/run-pass/associated-types-enum-field-named.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated types appearing in struct-like enum variants.\n \n+// pretty-expanded FIXME #23616\n+\n use self::VarValue::*;\n \n pub trait UnifyKey {"}, {"sha": "3c57da6b4a3ebee8bcee6ad51129b71c4067c3eb", "filename": "src/test/run-pass/associated-types-enum-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated types appearing in tuple-like enum variants.\n \n+// pretty-expanded FIXME #23616\n+\n use self::VarValue::*;\n \n pub trait UnifyKey {"}, {"sha": "feccd1d2dcec0daf2ca82cf80511b67b8aaf1b17", "filename": "src/test/run-pass/associated-types-eq-obj.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types inside of an object type\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "5bf10ae132cc52308ec622f91074c84f9575b970", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "4d286a4f9a48753c1597b07ac0ff017cad7f3047", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "41c53a5ad641090a8b23755715fe0854ff55163c", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "7b8b041e7ef679ac5a85cff57662d94c22c66682", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "718ea542799bbdb62ccd5e61a6298ebbffdd52a3", "filename": "src/test/run-pass/associated-types-issue-20220.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test references to `Self::Item` in the trait. Issue #20220.\n \n+// pretty-expanded FIXME #23616\n+\n use std::vec;\n \n trait IntoIteratorX {"}, {"sha": "562deba4d9301c8b759b058d714c71ab251b250b", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,10 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n \n impl X for f64 { type Y = int; }"}, {"sha": "057677a008785f11fe8ed4c25753e63f78ae6d5b", "filename": "src/test/run-pass/associated-types-issue-21212.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,6 +13,8 @@\n // where clauses in the environment which in turn required normalizing\n // `Self::Input`.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Parser {\n     type Input;\n "}, {"sha": "56e39a4450221084291cae3356577ade8e0740e8", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn pairwise_sub<T:DoubleEndedIterator<Item=int>>(mut t: T) -> int {\n     let mut result = 0;\n     loop {"}, {"sha": "a26b428a4eacf2db945eb1b0654ff920bc31b996", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,10 @@\n \n // Test that we can resolve nested projection types. Issue #20666.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(core)]\n+\n use std::marker::MarkerTrait;\n use std::slice;\n "}, {"sha": "d95ad2e883471dacb595f5db819e22428758ff6f", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,9 @@\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(core)]\n #![allow(dead_code)]\n \n use std::marker::MarkerTrait;"}, {"sha": "d8e4c5218d9cf68dbb9972267e5a56b4a0630cfb", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n \n struct Splits<'a, T:'a, P>(PhantomData<(&'a T, P)>);"}, {"sha": "ff08e7b69bdd87ab524fa3e7c345fef254c4b23e", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n \n struct Splits<'a, T, P>(PhantomData<(&'a(),T,P)>);"}, {"sha": "82adac8cf861484e867cb47d0263ece060527b1c", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,8 @@\n // various special paths in the `type_is_immediate` function.\n \n \n+// pretty-expanded FIXME #23616\n+\n pub trait OffsetState: Sized {}\n pub trait Offset {\n     type State: OffsetState;"}, {"sha": "151a9da948e832c5cf0d62c0fe0f79f5bb85cd92", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,6 +12,10 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n+// pretty-expanded FIXME #23616\n+\n+#![feature(core)]\n+\n use std::marker::{MarkerTrait, PhantomData};\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n use std::sync::atomic::Ordering::SeqCst;"}, {"sha": "2518ccf1cb47430076f854d7fa2e854e6283f03f", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test where the impl self type uses a projection from a constant type.\n \n+// pretty-expanded FIXME #23616\n+\n trait Int\n {\n     type T;"}, {"sha": "3b146792fdaded965b7873c9e919a9b471f31364", "filename": "src/test/run-pass/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,6 +13,8 @@\n // appear in associated type bindings in object types, which were not\n // being properly flagged.\n \n+// pretty-expanded FIXME #23616\n+\n use std::ops::{Shl, Shr};\n use std::cell::RefCell;\n "}, {"sha": "dbc2164c93a69c32c0989f96eb88ec18ed63bbe6", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n \n+// pretty-expanded FIXME #23616\n+\n trait A\n {\n     type TA;"}, {"sha": "80e3aa09e3e613e614c28d6f36ed2a44e4ffb3ea", "filename": "src/test/run-pass/associated-types-projection-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test a where clause that uses a non-normalized projection type.\n \n+// pretty-expanded FIXME #23616\n+\n trait Int\n {\n     type T;"}, {"sha": "a69de216ab997dbca06d8222b932ed258ef66be7", "filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo<T> {\n     type Bar;\n     fn get_bar() -> <Self as Foo<T>>::Bar;"}, {"sha": "ce09ec60bd6a52ba29ff76b0d4e63a9ed1499c09", "filename": "src/test/run-pass/associated-types-ref-from-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated type references in structure fields.\n \n+// pretty-expanded FIXME #23616\n+\n trait Test {\n     type V;\n "}, {"sha": "30b3871522cb2317557e1d26a1d09aac0723bf7c", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated type references in a struct literal. Issue #20535.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type Bar;\n "}, {"sha": "16e49f146ab557b24d8c2047256b5f4eaf998e90", "filename": "src/test/run-pass/associated-types-region-erasure-issue-20582.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Regression test for #20582. This test caused an ICE related to\n // inconsistent region erasure in trans.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo<'a> {\n     buf: &'a[u8]\n }"}, {"sha": "1ce4d6e341de2e581f85a688fc98fce20792378d", "filename": "src/test/run-pass/associated-types-resolve-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }"}, {"sha": "87043b833fd8f177aaf910d97bdfe3c8f7b0351f", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "4c9deab45112606dfd8c0959dabe8b8c39f04699", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "a2b7cf2106eb7af89dff81498ad27b6f3be80d73", "filename": "src/test/run-pass/associated-types-stream.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n \n+// pretty-expanded FIXME #23616\n+\n trait Stream {\n     type Car;\n     type Cdr: Stream;"}, {"sha": "d1872e4fb55f4c86abc2352dfcf58a82fd1c5724", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait UnifyKey {\n     type Value;\n "}, {"sha": "3d97c503dca5f94848f7dbd8569934e7085e11dd", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait UnifyKey {\n     type Value;\n "}, {"sha": "f8eff2f22fe3c0cb31be3c19a697850dfedec16f", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> Self::A;"}, {"sha": "ef2dc48fe136474ae438f83e36b4e50f95ae8236", "filename": "src/test/run-pass/astconv-cycle-between-trait-and-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -13,6 +13,8 @@\n // carries a predicate that references the trait (`u32 : Trait1`,\n // substituted).\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(dead_code)]\n \n trait Trait1 : Trait2<SomeType<u32>> {"}, {"sha": "cdd1b96de1e6081e14f965d594457a9a6c847a2b", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,9 @@\n \n // error-pattern:expected item\n \n-#![feature(custom_attribute)]\n+// pretty-expanded FIXME #23616\n+\n+#![feature(custom_attribute, test)]\n \n #[foo = \"bar\"]\n extern crate test;"}, {"sha": "cd02b5a9e73109498a2ba5ff438371facffd170f", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,7 +10,9 @@\n \n // error-pattern:expected item\n \n-#![feature(custom_attribute)]\n+// pretty-expanded FIXME #23616\n+\n+#![feature(custom_attribute, test)]\n \n mod m {\n     #[foo = \"bar\"]"}, {"sha": "4680f47fad6ce30e05e48f4edcf32ac49d9e7873", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n pub fn main() {"}, {"sha": "e8a12ee3ac79161816a23f8460fd39c9fbcfb2b5", "filename": "src/test/run-pass/attr-main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n #[main]"}, {"sha": "bcfb4b330f5eda6ff3e46578601fb2eb40f47a2e", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// pretty-expanded FIXME #23616\n+\n #![allow(unused_attribute)]\n #![feature(custom_attribute)]\n "}, {"sha": "f135762d28327910ee7fb25cc304696f303853cd", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]\n "}, {"sha": "08dce42c05b3ec757f7791519467cc02e1e46d32", "filename": "src/test/run-pass/attr-start.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-start.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(start)]\n \n #[start]"}, {"sha": "57e1b38c9c1664e133ab750c8d0a5eba586919d4", "filename": "src/test/run-pass/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n #[main]"}, {"sha": "2e79183755a18094395ab9dcd414d4d8a1ddab75", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let mut sum = 0;\n     let xs = vec!(1, 2, 3, 4, 5);"}, {"sha": "6dab0e51971382a29ab7f1d3219632454a275779", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n trait Pushable<T> {\n     fn push_val(&mut self, t: T);\n }"}, {"sha": "cf3b7d41b3a65e71a0ef76950ac350eeddd89eb1", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n \n fn g<F>(act: F) -> int where F: FnOnce(Vec<int>) -> int { return act(vec!(1, 2, 3)); }"}, {"sha": "6d7e150093e2cd9e7ca4d5dd0bf3d900bbfff54b", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo {\n     x: int,\n }"}, {"sha": "6a038927f4a486016b69128b6a1d48b0a4340e9d", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "bab0403e79dc1079d2bb1340d85ba5bd9aa59fdb", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "e9f70346089a528e4aa93ecc950b77b8d32bacb1", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "7558733adf1d2f42dc6651608e463f06a4d26684", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "1754a3707681598b8a4f1299ab1617e52d3f2d1c", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "37ba355956c309e08d289fa42c90408bdfdf36a2", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "226a7c12df9ab4a1d6689fec169a2b7eeb1ab231", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -12,7 +12,7 @@\n // ignore-windows FIXME #13259\n \n #![feature(unboxed_closures)]\n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, old_io, collections)]\n \n use std::env;\n use std::old_io::process::Command;"}, {"sha": "09746380ebab029d90d75a79276e7f3edaab56d6", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     assert_eq!(0xffffffff, (-1 as u32));\n     assert_eq!(4294967295, (-1 as u32));"}, {"sha": "1fe9dde844a4fe4602884c40460c6604cad837fb", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -10,6 +10,8 @@\n \n // Check that issue #954 stays fixed\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     match -1 { -1 => {}, _ => panic!(\"wat\") }\n     assert_eq!(1-1, 0);"}, {"sha": "5a6e801501fcfc1f2ac3b9ef5e660ae35fe11a8b", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::sync::Arc;\n fn dispose(_x: Arc<bool>) { }\n "}, {"sha": "c7b770d0a2b639f031ae2d4618bbec61a4496de2", "filename": "src/test/run-pass/bind-field-short-with-modifiers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c608084ff595c9c31e78ad3cde07093e68ee1848/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs?ref=c608084ff595c9c31e78ad3cde07093e68ee1848", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     struct Foo { x: int, y: int }\n     let mut f = Foo { x: 10, y: 0 };"}]}