{"sha": "62e5dc929c1e8535d4185073507e681f26ab7e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZTVkYzkyOWMxZTg1MzVkNDE4NTA3MzUwN2U2ODFmMjZhYjdlNmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-20T13:46:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:07:51Z"}, "message": "Remove checks that are already being done during typeck", "tree": {"sha": "16f8615a045d639c7bb77af538effa3bd3c14bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f8615a045d639c7bb77af538effa3bd3c14bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e5dc929c1e8535d4185073507e681f26ab7e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e5dc929c1e8535d4185073507e681f26ab7e6a", "html_url": "https://github.com/rust-lang/rust/commit/62e5dc929c1e8535d4185073507e681f26ab7e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e5dc929c1e8535d4185073507e681f26ab7e6a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7119974f82cb239307ed9ea2e885eb66c0edba95", "url": "https://api.github.com/repos/rust-lang/rust/commits/7119974f82cb239307ed9ea2e885eb66c0edba95", "html_url": "https://github.com/rust-lang/rust/commit/7119974f82cb239307ed9ea2e885eb66c0edba95"}], "stats": {"total": 50, "additions": 1, "deletions": 49}, "files": [{"sha": "9b63a99bd2ac5f9e301370e8573c0d419d008f1b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62e5dc929c1e8535d4185073507e681f26ab7e6a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e5dc929c1e8535d4185073507e681f26ab7e6a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=62e5dc929c1e8535d4185073507e681f26ab7e6a", "patch": "@@ -150,7 +150,6 @@ register_diagnostics!(\n     E0144,\n     E0145,\n     E0146,\n-    E0148,\n     E0151,\n     E0152,\n     E0153,"}, {"sha": "56e65f5defe77d750f5ab26b2c3323be1c0a7aa9", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/62e5dc929c1e8535d4185073507e681f26ab7e6a/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e5dc929c1e8535d4185073507e681f26ab7e6a/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=62e5dc929c1e8535d4185073507e681f26ab7e6a", "patch": "@@ -15,7 +15,7 @@ use util::ppaux::UserString;\n \n use syntax::ast::*;\n use syntax::codemap::Span;\n-use syntax::print::pprust::{expr_to_string, ident_to_string};\n+use syntax::print::pprust::{ident_to_string};\n use syntax::visit::Visitor;\n use syntax::visit;\n \n@@ -31,10 +31,6 @@ pub struct Context<'a,'tcx:'a> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn visit_expr(&mut self, ex: &Expr) {\n-        check_expr(self, ex);\n-    }\n-\n     fn visit_fn(&mut self, fk: visit::FnKind, fd: &'v FnDecl,\n                 b: &'v Block, s: Span, n: NodeId) {\n         check_fn(self, fk, fd, b, s, n);\n@@ -161,37 +157,6 @@ fn check_fn(\n     }\n }\n \n-pub fn check_expr(cx: &mut Context, e: &Expr) {\n-    debug!(\"kind::check_expr({})\", expr_to_string(e));\n-\n-    match e.node {\n-        ExprRepeat(ref element, ref count_expr) => {\n-            let count = ty::eval_repeat_count(cx.tcx, &**count_expr);\n-            if count > 1 {\n-                let element_ty = ty::expr_ty(cx.tcx, &**element);\n-                check_copy(cx, element_ty, element.span,\n-                           \"repeated element will be copied\");\n-            }\n-        }\n-        ExprAssign(ref lhs, _) |\n-        ExprAssignOp(_, ref lhs, _) => {\n-            let lhs_ty = ty::expr_ty(cx.tcx, &**lhs);\n-            if !ty::type_is_sized(cx.tcx, lhs_ty) {\n-                cx.tcx.sess.span_err(lhs.span, \"dynamically sized type on lhs of assignment\");\n-            }\n-        }\n-        ExprStruct(..) => {\n-            let e_ty = ty::expr_ty(cx.tcx, e);\n-            if !ty::type_is_sized(cx.tcx, e_ty) {\n-                cx.tcx.sess.span_err(e.span, \"trying to initialise a dynamically sized struct\");\n-            }\n-        }\n-        _ => {}\n-    }\n-\n-    visit::walk_expr(cx, e);\n-}\n-\n fn check_ty(cx: &mut Context, aty: &Ty) {\n     match aty.node {\n         TyPath(_, _, id) => {\n@@ -274,18 +239,6 @@ pub fn check_freevar_bounds(cx: &Context, fn_span: Span, sp: Span, ty: ty::t,\n     });\n }\n \n-fn check_copy(cx: &Context, ty: ty::t, sp: Span, reason: &str) {\n-    debug!(\"type_contents({})={}\",\n-           ty_to_string(cx.tcx, ty),\n-           ty::type_contents(cx.tcx, ty).to_string());\n-    if ty::type_moves_by_default(cx.tcx, ty) {\n-        span_err!(cx.tcx.sess, sp, E0148,\n-            \"copying a value of non-copyable type `{}`\",\n-            ty_to_string(cx.tcx, ty));\n-        span_note!(cx.tcx.sess, sp, \"{}\", reason.as_slice());\n-    }\n-}\n-\n // Ensure that `ty` has a statically known size (i.e., it has the `Sized` bound).\n fn check_sized(tcx: &ty::ctxt, ty: ty::t, name: String, sp: Span) {\n     if !ty::type_is_sized(tcx, ty) {"}]}