{"sha": "1884fe35b6b30e02a65bf13a542f0798f220724f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODRmZTM1YjZiMzBlMDJhNjViZjEzYTU0MmYwNzk4ZjIyMDcyNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-08T19:59:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-24T17:27:38Z"}, "message": "add a `user_substs` map into the typeck tables", "tree": {"sha": "7044a1e4c432eb00ddb9bff8a241328281724155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7044a1e4c432eb00ddb9bff8a241328281724155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1884fe35b6b30e02a65bf13a542f0798f220724f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1884fe35b6b30e02a65bf13a542f0798f220724f", "html_url": "https://github.com/rust-lang/rust/commit/1884fe35b6b30e02a65bf13a542f0798f220724f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1884fe35b6b30e02a65bf13a542f0798f220724f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b00727076ce251b54bdefa18779a13819d2209", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b00727076ce251b54bdefa18779a13819d2209", "html_url": "https://github.com/rust-lang/rust/commit/61b00727076ce251b54bdefa18779a13819d2209"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "388c2455eb3860fd4d901bcd95f5c4b890fb936c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1884fe35b6b30e02a65bf13a542f0798f220724f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1884fe35b6b30e02a65bf13a542f0798f220724f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1884fe35b6b30e02a65bf13a542f0798f220724f", "patch": "@@ -33,7 +33,7 @@ use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::{self, Mir, interpret};\n use mir::interpret::Allocation;\n-use ty::subst::{Kind, Substs, Subst};\n+use ty::subst::{CanonicalSubsts, Kind, Substs, Subst};\n use ty::ReprOptions;\n use traits;\n use traits::{Clause, Clauses, Goal, Goals};\n@@ -371,6 +371,18 @@ pub struct TypeckTables<'tcx> {\n     /// other items.\n     node_substs: ItemLocalMap<&'tcx Substs<'tcx>>,\n \n+    /// Stores the substitutions that the user explicit gave (if any)\n+    /// attached to `id`. These will not include any inferred\n+    /// values. The canonical form is used to capture things like `_`\n+    /// or other unspecified values.\n+    ///\n+    /// Example:\n+    ///\n+    /// If the user wrote `foo.collect::<Vec<_>>()`, then the\n+    /// canonical substitutions would include only `for<X> { Vec<X>\n+    /// }`.\n+    user_substs: ItemLocalMap<CanonicalSubsts<'tcx>>,\n+\n     adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n \n     /// Stores the actual binding mode for all instances of hir::BindingAnnotation.\n@@ -444,6 +456,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             user_provided_tys: ItemLocalMap(),\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n+            user_substs: ItemLocalMap(),\n             adjustments: ItemLocalMap(),\n             pat_binding_modes: ItemLocalMap(),\n             pat_adjustments: ItemLocalMap(),\n@@ -561,6 +574,18 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_substs.get(&id.local_id).cloned()\n     }\n \n+    pub fn user_substs_mut(&mut self) -> LocalTableInContextMut<CanonicalSubsts<'tcx>> {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.user_substs\n+        }\n+    }\n+\n+    pub fn user_substs(&self, id: hir::HirId) -> Option<CanonicalSubsts<'tcx>> {\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n+        self.user_substs.get(&id.local_id).cloned()\n+    }\n+\n     // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n     // doesn't provide type parameter substitutions.\n     pub fn pat_ty(&self, pat: &hir::Pat) -> Ty<'tcx> {\n@@ -740,6 +765,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             ref user_provided_tys,\n             ref node_types,\n             ref node_substs,\n+            ref user_substs,\n             ref adjustments,\n             ref pat_binding_modes,\n             ref pat_adjustments,\n@@ -762,6 +788,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             user_provided_tys.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n+            user_substs.hash_stable(hcx, hasher);\n             adjustments.hash_stable(hcx, hasher);\n             pat_binding_modes.hash_stable(hcx, hasher);\n             pat_adjustments.hash_stable(hcx, hasher);"}, {"sha": "26e8b72946b54b5e71a01d951709c7d63f7b56f1", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1884fe35b6b30e02a65bf13a542f0798f220724f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1884fe35b6b30e02a65bf13a542f0798f220724f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1884fe35b6b30e02a65bf13a542f0798f220724f", "patch": "@@ -11,6 +11,7 @@\n // Type substitutions.\n \n use hir::def_id::DefId;\n+use infer::canonical::Canonical;\n use ty::{self, Lift, List, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n@@ -179,6 +180,8 @@ impl<'tcx> Decodable for Kind<'tcx> {\n /// A substitution mapping generic parameters to new values.\n pub type Substs<'tcx> = List<Kind<'tcx>>;\n \n+pub type CanonicalSubsts<'gcx> = Canonical<'gcx, &'gcx Substs<'gcx>>;\n+\n impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     /// Creates a Substs that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId)"}]}