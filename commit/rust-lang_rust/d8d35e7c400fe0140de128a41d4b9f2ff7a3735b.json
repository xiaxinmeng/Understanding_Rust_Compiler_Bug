{"sha": "d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDM1ZTdjNDAwZmUwMTQwZGUxMjhhNDFkNGI5ZjJmZjdhMzczNWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T13:12:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T13:23:49Z"}, "message": "Rename car/cdr to head/tail in std::list\n\nCloses #1086", "tree": {"sha": "647f3c90b4ff3e9c243dbb769debc3c395801610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647f3c90b4ff3e9c243dbb769debc3c395801610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "html_url": "https://github.com/rust-lang/rust/commit/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d58a9c73464133f95663bf5e78bb693ffb5de284", "url": "https://api.github.com/repos/rust-lang/rust/commits/d58a9c73464133f95663bf5e78bb693ffb5de284", "html_url": "https://github.com/rust-lang/rust/commit/d58a9c73464133f95663bf5e78bb693ffb5de284"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "64169dd47ac3f6cd565a5ba333eb6103cc8559c0", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "patch": "@@ -356,11 +356,10 @@ fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {\n }\n \n fn visit_decl_with_scope(d: @decl, sc: scopes, v: vt<scopes>) {\n-    let loc_pos =\n-        alt list::car(sc) {\n-          scope_block(_, _, pos) { pos }\n-          _ { @mutable 0u }\n-        };\n+    let loc_pos = alt list::head(sc) {\n+      scope_block(_, _, pos) { pos }\n+      _ { @mutable 0u }\n+    };\n     alt d.node {\n       decl_local(locs) {\n         for (_, loc) in locs { v.visit_local(loc, sc, v);; *loc_pos += 1u; }"}, {"sha": "9ec762edd3d8509b994b108a9626a8f033a5620a", "filename": "src/lib/list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "patch": "@@ -105,20 +105,20 @@ fn len<T>(ls: list<T>) -> uint {\n }\n \n /*\n-Function: cdr\n+Function: tail\n \n Returns all but the first element of a list\n */\n-fn cdr<T>(ls: list<T>) -> list<T> {\n+fn tail<T>(ls: list<T>) -> list<T> {\n     alt ls { cons(_, tl) { ret *tl; } nil. { fail \"list empty\" } }\n }\n \n /*\n-Function: car\n+Function: head\n \n Returns the first element of a list\n */\n-fn car<T>(ls: list<T>) -> T {\n+fn head<T>(ls: list<T>) -> T {\n     alt ls { cons(hd, _) { ret hd; } nil. { fail \"list empty\" } }\n }\n "}, {"sha": "6bd044c95742eab7c847071bb9809177c2adc193", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "patch": "@@ -14,7 +14,7 @@ pure fn nonempty_list<T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<T>(ls: list<T>) : nonempty_list(ls) -> T { car(ls) }\n+fn safe_head<T>(ls: list<T>) : nonempty_list(ls) -> T { head(ls) }\n \n fn main() {\n     let mylist = cons(@1u, @nil);"}, {"sha": "e33c080e64fcdd330d977038ba2968a985d75819", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "patch": "@@ -22,7 +22,7 @@ pure fn nonempty_list<T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<T>(ls: list<T>) : nonempty_list(ls) -> T { car(ls) }\n+fn safe_head<T>(ls: list<T>) : nonempty_list(ls) -> T { head(ls) }\n \n fn main() {\n     let mylist = cons(@1u, @nil);"}, {"sha": "453ed7fc9ba686c03ab48b4db32d20fbd575af7c", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d35e7c400fe0140de128a41d4b9f2ff7a3735b/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=d8d35e7c400fe0140de128a41d4b9f2ff7a3735b", "patch": "@@ -1,25 +1,25 @@\n \n use std;\n import std::list;\n-import std::list::car;\n-import std::list::cdr;\n+import std::list::head;\n+import std::list::tail;\n import std::list::from_vec;\n import std::option;\n \n #[test]\n fn test_from_vec() {\n     let l = from_vec([0, 1, 2]);\n-    assert (car(l) == 0);\n-    assert (car(cdr(l)) == 1);\n-    assert (car(cdr(cdr(l))) == 2);\n+    assert (head(l) == 0);\n+    assert (head(tail(l)) == 1);\n+    assert (head(tail(tail(l))) == 2);\n }\n \n #[test]\n fn test_from_vec_mut() {\n     let l = from_vec([mutable 0, 1, 2]);\n-    assert (car(l) == 0);\n-    assert (car(cdr(l)) == 1);\n-    assert (car(cdr(cdr(l))) == 2);\n+    assert (head(l) == 0);\n+    assert (head(tail(l)) == 1);\n+    assert (head(tail(tail(l))) == 2);\n }\n \n #[test]"}]}