{"sha": "3a1582012eafb8b672e15b12b5424e72ea6096af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTU4MjAxMmVhZmI4YjY3MmUxNWIxMmI1NDI0ZTcyZWE2MDk2YWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-27T21:08:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-27T21:27:43Z"}, "message": "libcore: Implement ord and eq language items", "tree": {"sha": "497372d0ae35fa35b4f0f3360a51078330760249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497372d0ae35fa35b4f0f3360a51078330760249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1582012eafb8b672e15b12b5424e72ea6096af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1582012eafb8b672e15b12b5424e72ea6096af", "html_url": "https://github.com/rust-lang/rust/commit/3a1582012eafb8b672e15b12b5424e72ea6096af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1582012eafb8b672e15b12b5424e72ea6096af/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb056f4ab416b08a499b2229a3cca6404ce3c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb056f4ab416b08a499b2229a3cca6404ce3c54", "html_url": "https://github.com/rust-lang/rust/commit/2bb056f4ab416b08a499b2229a3cca6404ce3c54"}], "stats": {"total": 91, "additions": 54, "deletions": 37}, "files": [{"sha": "8ccfb6dd1f41c291f9e44e7cb0511018ad848bc2", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1582012eafb8b672e15b12b5424e72ea6096af/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1582012eafb8b672e15b12b5424e72ea6096af/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=3a1582012eafb8b672e15b12b5424e72ea6096af", "patch": "@@ -4,10 +4,14 @@\n \n /// Interfaces used for comparison.\n \n+#[cfg(notest)]\n+#[lang=\"ord\"]\n trait Ord {\n     pure fn lt(&&other: self) -> bool;\n }\n \n+#[cfg(notest)]\n+#[lang=\"eq\"]\n trait Eq {\n     pure fn eq(&&other: self) -> bool;\n }"}, {"sha": "488602019b379d096db3e317d0026e665da480b9", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 50, "deletions": 37, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3a1582012eafb8b672e15b12b5424e72ea6096af/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1582012eafb8b672e15b12b5424e72ea6096af/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=3a1582012eafb8b672e15b12b5424e72ea6096af", "patch": "@@ -23,42 +23,52 @@ import std::map::{hashmap, str_hash};\n import str_eq = str::eq;\n \n struct LanguageItems {\n-    let mut const_trait: Option<def_id>;\n-    let mut copy_trait: Option<def_id>;\n-    let mut send_trait: Option<def_id>;\n-    let mut owned_trait: Option<def_id>;\n-\n-    let mut add_trait: Option<def_id>;\n-    let mut sub_trait: Option<def_id>;\n-    let mut mul_trait: Option<def_id>;\n-    let mut div_trait: Option<def_id>;\n-    let mut modulo_trait: Option<def_id>;\n-    let mut neg_trait: Option<def_id>;\n-    let mut bitxor_trait: Option<def_id>;\n-    let mut bitand_trait: Option<def_id>;\n-    let mut bitor_trait: Option<def_id>;\n-    let mut shl_trait: Option<def_id>;\n-    let mut shr_trait: Option<def_id>;\n-    let mut index_trait: Option<def_id>;\n-\n-    new() {\n-        self.const_trait = None;\n-        self.copy_trait = None;\n-        self.send_trait = None;\n-        self.owned_trait = None;\n-\n-        self.add_trait = None;\n-        self.sub_trait = None;\n-        self.mul_trait = None;\n-        self.div_trait = None;\n-        self.modulo_trait = None;\n-        self.neg_trait = None;\n-        self.bitxor_trait = None;\n-        self.bitand_trait = None;\n-        self.bitor_trait = None;\n-        self.shl_trait = None;\n-        self.shr_trait = None;\n-        self.index_trait = None;\n+    mut const_trait: Option<def_id>;\n+    mut copy_trait: Option<def_id>;\n+    mut send_trait: Option<def_id>;\n+    mut owned_trait: Option<def_id>;\n+\n+    mut add_trait: Option<def_id>;\n+    mut sub_trait: Option<def_id>;\n+    mut mul_trait: Option<def_id>;\n+    mut div_trait: Option<def_id>;\n+    mut modulo_trait: Option<def_id>;\n+    mut neg_trait: Option<def_id>;\n+    mut bitxor_trait: Option<def_id>;\n+    mut bitand_trait: Option<def_id>;\n+    mut bitor_trait: Option<def_id>;\n+    mut shl_trait: Option<def_id>;\n+    mut shr_trait: Option<def_id>;\n+    mut index_trait: Option<def_id>;\n+\n+    mut eq_trait: Option<def_id>;\n+    mut ord_trait: Option<def_id>;\n+}\n+\n+mod LanguageItems {\n+    fn make() -> LanguageItems {\n+        LanguageItems {\n+            const_trait: None,\n+            copy_trait: None,\n+            send_trait: None,\n+            owned_trait: None,\n+\n+            add_trait: None,\n+            sub_trait: None,\n+            mul_trait: None,\n+            div_trait: None,\n+            modulo_trait: None,\n+            neg_trait: None,\n+            bitxor_trait: None,\n+            bitand_trait: None,\n+            bitor_trait: None,\n+            shl_trait: None,\n+            shr_trait: None,\n+            index_trait: None,\n+\n+            eq_trait: None,\n+            ord_trait: None\n+        }\n     }\n }\n \n@@ -93,6 +103,9 @@ struct LanguageItemCollector {\n         self.item_refs.insert(~\"shl\", &mut self.items.shl_trait);\n         self.item_refs.insert(~\"shr\", &mut self.items.shr_trait);\n         self.item_refs.insert(~\"index\", &mut self.items.index_trait);\n+\n+        self.item_refs.insert(~\"eq\", &mut self.items.eq_trait);\n+        self.item_refs.insert(~\"ord\", &mut self.items.ord_trait);\n     }\n \n     fn match_and_collect_meta_item(item_def_id: def_id,\n@@ -202,7 +215,7 @@ struct LanguageItemCollector {\n }\n \n fn collect_language_items(crate: @crate, session: session) -> LanguageItems {\n-    let items = LanguageItems();\n+    let items = LanguageItems::make();\n     let collector = LanguageItemCollector(crate, session, &items);\n     collector.collect();\n     copy items"}]}