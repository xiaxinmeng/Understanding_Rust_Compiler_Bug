{"sha": "ee330a3ff524852f2cd9c22fc3453a631658a94d", "node_id": "C_kwDOAAsO6NoAKGVlMzMwYTNmZjUyNDg1MmYyY2Q5YzIyZmMzNDUzYTYzMTY1OGE5NGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-21T18:00:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T18:00:12Z"}, "message": "Rollup merge of #108729 - bvanjoi:fix-issue-97534, r=petrochenkov\n\nfix: modify the condition that `resolve_imports` stops\n\nclose #97534", "tree": {"sha": "4ffa918cdea800ef10498ed482245a2e715a6616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ffa918cdea800ef10498ed482245a2e715a6616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee330a3ff524852f2cd9c22fc3453a631658a94d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGfCsCRBK7hj4Ov3rIwAAoO0IAEgrTHJpV2ZMlmjfMkzUOwLM\n0bjYTKJMhy3dBYW08r56vn48cqLoQSpcyyxhIGcxovkItqm2sOrH5iyt6dX34jDf\nmrieJjavCU2f14WbaxwOSQO70ZzHGPnjexIvYUUmoVSOt5++qoC+MPQ6EH1aUEss\n/fWyN8siklwariVgKqqAIT3DnkK8GNRpsIJkYhpafk32xgK+jznNtGVzmpYx1ldb\n7BWIWBo83PtazuBn/1/kOg/0Rri7FWQEXcGVv4jau0+9U3PTD1HMuZ3CzJy/Jtpd\nEuP32XWN9VvKZqP1l9w4HWRuYUhSJbhazZWSxrogLN2/JoOyQiZuJSq4Ua7osXA=\n=guy5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ffa918cdea800ef10498ed482245a2e715a6616\nparent 93a82a44a192a8a3f3c3610853878a57a0a37ee3\nparent 177572241076e4885c5c12e407d3ea10d3b2363f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679421612 +0100\ncommitter GitHub <noreply@github.com> 1679421612 +0100\n\nRollup merge of #108729 - bvanjoi:fix-issue-97534, r=petrochenkov\n\nfix: modify the condition that `resolve_imports` stops\n\nclose #97534\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee330a3ff524852f2cd9c22fc3453a631658a94d", "html_url": "https://github.com/rust-lang/rust/commit/ee330a3ff524852f2cd9c22fc3453a631658a94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee330a3ff524852f2cd9c22fc3453a631658a94d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93a82a44a192a8a3f3c3610853878a57a0a37ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a82a44a192a8a3f3c3610853878a57a0a37ee3", "html_url": "https://github.com/rust-lang/rust/commit/93a82a44a192a8a3f3c3610853878a57a0a37ee3"}, {"sha": "177572241076e4885c5c12e407d3ea10d3b2363f", "url": "https://api.github.com/repos/rust-lang/rust/commits/177572241076e4885c5c12e407d3ea10d3b2363f", "html_url": "https://github.com/rust-lang/rust/commit/177572241076e4885c5c12e407d3ea10d3b2363f"}], "stats": {"total": 121, "additions": 106, "deletions": 15}, "files": [{"sha": "4d4bc1be34973b241a0282fa75a1e184ebc798dd", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee330a3ff524852f2cd9c22fc3453a631658a94d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee330a3ff524852f2cd9c22fc3453a631658a94d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ee330a3ff524852f2cd9c22fc3453a631658a94d", "patch": "@@ -423,13 +423,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Resolves all imports for the crate. This method performs the fixed-\n     /// point iteration.\n     pub(crate) fn resolve_imports(&mut self) {\n-        let mut prev_num_indeterminates = self.indeterminate_imports.len() + 1;\n-        while self.indeterminate_imports.len() < prev_num_indeterminates {\n-            prev_num_indeterminates = self.indeterminate_imports.len();\n+        let mut prev_indeterminate_count = usize::MAX;\n+        let mut indeterminate_count = self.indeterminate_imports.len() * 3;\n+        while indeterminate_count < prev_indeterminate_count {\n+            prev_indeterminate_count = indeterminate_count;\n+            indeterminate_count = 0;\n             for import in mem::take(&mut self.indeterminate_imports) {\n-                match self.resolve_import(&import) {\n-                    true => self.determined_imports.push(import),\n-                    false => self.indeterminate_imports.push(import),\n+                let import_indeterminate_count = self.resolve_import(&import);\n+                indeterminate_count += import_indeterminate_count;\n+                match import_indeterminate_count {\n+                    0 => self.determined_imports.push(import),\n+                    _ => self.indeterminate_imports.push(import),\n                 }\n             }\n         }\n@@ -581,9 +585,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         diag.emit();\n     }\n \n-    /// Attempts to resolve the given import, returning true if its resolution is determined.\n-    /// If successful, the resolved bindings are written into the module.\n-    fn resolve_import(&mut self, import: &'a Import<'a>) -> bool {\n+    /// Attempts to resolve the given import, returning:\n+    /// - `0` means its resolution is determined.\n+    /// - Other values mean that indeterminate exists under certain namespaces.\n+    ///\n+    /// Meanwhile, if resolve successful, the resolved bindings are written\n+    /// into the module.\n+    fn resolve_import(&mut self, import: &'a Import<'a>) -> usize {\n         debug!(\n             \"(resolving import for module) resolving import `{}::...` in `{}`\",\n             Segment::names_to_string(&import.module_path),\n@@ -601,8 +609,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             match path_res {\n                 PathResult::Module(module) => module,\n-                PathResult::Indeterminate => return false,\n-                PathResult::NonModule(..) | PathResult::Failed { .. } => return true,\n+                PathResult::Indeterminate => return 3,\n+                PathResult::NonModule(..) | PathResult::Failed { .. } => return 0,\n             }\n         };\n \n@@ -618,12 +626,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } => (source, target, source_bindings, target_bindings, type_ns_only),\n             ImportKind::Glob { .. } => {\n                 self.resolve_glob_import(import);\n-                return true;\n+                return 0;\n             }\n             _ => unreachable!(),\n         };\n \n-        let mut indeterminate = false;\n+        let mut indeterminate_count = 0;\n         self.per_ns(|this, ns| {\n             if !type_ns_only || ns == TypeNS {\n                 if let Err(Undetermined) = source_bindings[ns].get() {\n@@ -646,7 +654,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let parent = import.parent_scope.module;\n                 match source_bindings[ns].get() {\n-                    Err(Undetermined) => indeterminate = true,\n+                    Err(Undetermined) => indeterminate_count += 1,\n                     // Don't update the resolution, because it was never added.\n                     Err(Determined) if target.name == kw::Underscore => {}\n                     Ok(binding) if binding.is_importable() => {\n@@ -670,7 +678,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         });\n \n-        !indeterminate\n+        indeterminate_count\n     }\n \n     /// Performs final import resolution, consistency checks and error reporting."}, {"sha": "21aa81e80926ead1252b83b6cf06c2295fc3c943", "filename": "tests/ui/macros/nested-use-as.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ee330a3ff524852f2cd9c22fc3453a631658a94d/tests%2Fui%2Fmacros%2Fnested-use-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee330a3ff524852f2cd9c22fc3453a631658a94d/tests%2Fui%2Fmacros%2Fnested-use-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fnested-use-as.rs?ref=ee330a3ff524852f2cd9c22fc3453a631658a94d", "patch": "@@ -0,0 +1,83 @@\n+// check-pass\n+// edition:2018\n+// issue: https://github.com/rust-lang/rust/issues/97534\n+\n+macro_rules! m {\n+    () => {\n+        macro_rules! foo {\n+            () => {}\n+        }\n+        use foo as bar;\n+    }\n+}\n+\n+m!{}\n+\n+use bar as baz;\n+\n+baz!{}\n+\n+macro_rules! foo2 {\n+    () => {};\n+}\n+\n+macro_rules! m2 {\n+    () => {\n+        use foo2 as bar2;\n+    };\n+}\n+\n+m2! {}\n+\n+use bar2 as baz2;\n+\n+baz2! {}\n+\n+macro_rules! n1 {\n+    () => {\n+        macro_rules! n2 {\n+            () => {\n+                macro_rules! n3 {\n+                    () => {\n+                        macro_rules! n4 {\n+                            () => {}\n+                        }\n+                        use n4 as c4;\n+                    }\n+                }\n+                use n3 as c3;\n+            }\n+        }\n+        use n2 as c2;\n+    }\n+}\n+\n+use n1 as c1;\n+c1!{}\n+use c2 as a2;\n+a2!{}\n+use c3 as a3;\n+a3!{}\n+use c4 as a4;\n+a4!{}\n+\n+// https://github.com/rust-lang/rust/pull/108729#issuecomment-1474750675\n+// reversed\n+use d5 as d6;\n+use d4 as d5;\n+use d3 as d4;\n+use d2 as d3;\n+use d1 as d2;\n+use foo2 as d1;\n+d6! {}\n+\n+// mess\n+use f3 as f4;\n+f5! {}\n+use f1 as f2;\n+use f4 as f5;\n+use f2 as f3;\n+use foo2 as f1;\n+\n+fn main() {\n+}"}]}