{"sha": "3eab21e22d080562dbe85ef440309c03c07becba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYWIyMWUyMmQwODA1NjJkYmU4NWVmNDQwMzA5YzAzYzA3YmVjYmE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-19T00:37:26Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-19T00:38:47Z"}, "message": "Don't ICE if called with a `TyKind::Error`\n\nIt felt too harsh to estebank and others to ICE even though it's\ntechnically a mistake to show a `TyKind::Error`.", "tree": {"sha": "46f3e40a7ffcaf6bde2e87c71a159e63020126aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f3e40a7ffcaf6bde2e87c71a159e63020126aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eab21e22d080562dbe85ef440309c03c07becba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eab21e22d080562dbe85ef440309c03c07becba", "html_url": "https://github.com/rust-lang/rust/commit/3eab21e22d080562dbe85ef440309c03c07becba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eab21e22d080562dbe85ef440309c03c07becba/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6831a7fd3fc624643b50f494212e0ceaad3c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6831a7fd3fc624643b50f494212e0ceaad3c28", "html_url": "https://github.com/rust-lang/rust/commit/8a6831a7fd3fc624643b50f494212e0ceaad3c28"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e049341659c835d457c6c34301c133036f48eb0f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eab21e22d080562dbe85ef440309c03c07becba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eab21e22d080562dbe85ef440309c03c07becba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=3eab21e22d080562dbe85ef440309c03c07becba", "patch": "@@ -212,13 +212,13 @@ impl TyKind<'tcx> {\n     }\n \n     /// Get the article (\"a\" or \"an\") to use with this type.\n-    ///\n-    /// **Panics if `self` is [`TyKind::Error`].**\n     pub fn article(&self) -> &'static str {\n         match self {\n             Int(_) | Float(_) | Array(_, _) => \"an\",\n             Adt(def, _) if def.is_enum() => \"an\",\n-            Error(_) => panic!(),\n+            // This should never happen, but ICEing and causing the user's code\n+            // to not compile felt too harsh.\n+            Error(_) => \"a\",\n             _ => \"a\",\n         }\n     }"}]}